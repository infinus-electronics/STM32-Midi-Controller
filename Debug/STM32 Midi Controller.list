
STM32 Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000815c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008268  08008268  00018268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082dc  080082dc  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  080082dc  080082dc  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082dc  080082dc  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082dc  080082dc  000182dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082e0  080082e0  000182e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080082e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f4  20000190  08008474  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001484  08008474  00021484  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a891  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034a8  00000000  00000000  0003aa4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001408  00000000  00000000  0003def8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a8  00000000  00000000  0003f300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b52b  00000000  00000000  000405a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012d07  00000000  00000000  0005bad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000942fb  00000000  00000000  0006e7da  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00102ad5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053d0  00000000  00000000  00102b50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000190 	.word	0x20000190
 8000128:	00000000 	.word	0x00000000
 800012c:	08008250 	.word	0x08008250

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000194 	.word	0x20000194
 8000148:	08008250 	.word	0x08008250

0800014c <DWT_Delay_Init>:
	GPIOA->BRR = (1<<7);
}

/* DWT based delay */
uint32_t DWT_Delay_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000150:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800015a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800015c:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <DWT_Delay_Init+0x58>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	4a10      	ldr	r2, [pc, #64]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000166:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000168:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0e      	ldr	r2, [pc, #56]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016e:	f023 0301 	bic.w	r3, r3, #1
 8000172:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a0b      	ldr	r2, [pc, #44]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000186:	bf00      	nop
    __ASM volatile ("NOP");
 8000188:	bf00      	nop
    __ASM volatile ("NOP");
 800018a:	bf00      	nop
    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000194:	2300      	movs	r3, #0
 8000196:	e000      	b.n	800019a <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000198:	2301      	movs	r3, #1
    }
}
 800019a:	4618      	mov	r0, r3
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	e000edf0 	.word	0xe000edf0
 80001a8:	e0001000 	.word	0xe0001000

080001ac <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80001b4:	4b0e      	ldr	r3, [pc, #56]	; (80001f0 <DWT_Delay_us+0x44>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80001ba:	f003 fb2f 	bl	800381c <HAL_RCC_GetHCLKFreq>
 80001be:	4602      	mov	r2, r0
 80001c0:	4b0c      	ldr	r3, [pc, #48]	; (80001f4 <DWT_Delay_us+0x48>)
 80001c2:	fba3 2302 	umull	r2, r3, r3, r2
 80001c6:	0c9b      	lsrs	r3, r3, #18
 80001c8:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	68ba      	ldr	r2, [r7, #8]
 80001ce:	fb02 f303 	mul.w	r3, r2, r3
 80001d2:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80001d4:	bf00      	nop
 80001d6:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <DWT_Delay_us+0x44>)
 80001d8:	685a      	ldr	r2, [r3, #4]
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	1ad2      	subs	r2, r2, r3
 80001de:	6879      	ldr	r1, [r7, #4]
 80001e0:	68bb      	ldr	r3, [r7, #8]
 80001e2:	1acb      	subs	r3, r1, r3
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d3f6      	bcc.n	80001d6 <DWT_Delay_us+0x2a>
}
 80001e8:	bf00      	nop
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	e0001000 	.word	0xe0001000
 80001f4:	431bde83 	.word	0x431bde83

080001f8 <MCP23017SetPin>:

//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

/* MCP23017 Defines */

void MCP23017SetPin(uint8_t pin, bank b, uint8_t addr){
 80001f8:	b480      	push	{r7}
 80001fa:	b085      	sub	sp, #20
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	71fb      	strb	r3, [r7, #7]
 8000202:	460b      	mov	r3, r1
 8000204:	71bb      	strb	r3, [r7, #6]
 8000206:	4613      	mov	r3, r2
 8000208:	717b      	strb	r3, [r7, #5]

	//__disable_irq();
	//TODO: just store the state instead of reading it to save time
	//first, read current state of Bank B so we can safely toggle pins
	uint8_t current = 0; //current state of bank b
 800020a:	2300      	movs	r3, #0
 800020c:	73fb      	strb	r3, [r7, #15]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800020e:	b672      	cpsid	i
	//select register
	__disable_irq();
	I2C2->CR1 |= (1<<8); //send start condition
 8000210:	4b72      	ldr	r3, [pc, #456]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a71      	ldr	r2, [pc, #452]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800021a:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 800021c:	bf00      	nop
 800021e:	4b6f      	ldr	r3, [pc, #444]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000220:	695b      	ldr	r3, [r3, #20]
 8000222:	f003 0301 	and.w	r3, r3, #1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d0f9      	beq.n	800021e <MCP23017SetPin+0x26>
	I2C2->DR = addr; //address the MCP23017
 800022a:	4a6c      	ldr	r2, [pc, #432]	; (80003dc <MCP23017SetPin+0x1e4>)
 800022c:	797b      	ldrb	r3, [r7, #5]
 800022e:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000230:	bf00      	nop
 8000232:	4b6a      	ldr	r3, [pc, #424]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f003 0302 	and.w	r3, r3, #2
 800023a:	2b00      	cmp	r3, #0
 800023c:	d0f9      	beq.n	8000232 <MCP23017SetPin+0x3a>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 800023e:	bf00      	nop
 8000240:	4b66      	ldr	r3, [pc, #408]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	f003 0304 	and.w	r3, r3, #4
 8000248:	2b00      	cmp	r3, #0
 800024a:	d0f9      	beq.n	8000240 <MCP23017SetPin+0x48>

	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800024c:	bf00      	nop
 800024e:	4b63      	ldr	r3, [pc, #396]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000250:	695b      	ldr	r3, [r3, #20]
 8000252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000256:	2b00      	cmp	r3, #0
 8000258:	d0f9      	beq.n	800024e <MCP23017SetPin+0x56>
	if(b==A){
 800025a:	79bb      	ldrb	r3, [r7, #6]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d103      	bne.n	8000268 <MCP23017SetPin+0x70>
		I2C2->DR = 0x12; //read from bank A
 8000260:	4b5e      	ldr	r3, [pc, #376]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000262:	2212      	movs	r2, #18
 8000264:	611a      	str	r2, [r3, #16]
 8000266:	e002      	b.n	800026e <MCP23017SetPin+0x76>
	}
	else{
		I2C2->DR = 0x13;
 8000268:	4b5c      	ldr	r3, [pc, #368]	; (80003dc <MCP23017SetPin+0x1e4>)
 800026a:	2213      	movs	r2, #19
 800026c:	611a      	str	r2, [r3, #16]
	}
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800026e:	bf00      	nop
 8000270:	4b5a      	ldr	r3, [pc, #360]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000278:	2b00      	cmp	r3, #0
 800027a:	d0f9      	beq.n	8000270 <MCP23017SetPin+0x78>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure BTF is 1
 800027c:	bf00      	nop
 800027e:	4b57      	ldr	r3, [pc, #348]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000286:	2b00      	cmp	r3, #0
 8000288:	d0f9      	beq.n	800027e <MCP23017SetPin+0x86>
	I2C2->CR1 |= (1<<9); //send stop condition
 800028a:	4b54      	ldr	r3, [pc, #336]	; (80003dc <MCP23017SetPin+0x1e4>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a53      	ldr	r2, [pc, #332]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000290:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000294:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000296:	b662      	cpsie	i
	__enable_irq();
	while ((I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 8000298:	bf00      	nop
 800029a:	4b50      	ldr	r3, [pc, #320]	; (80003dc <MCP23017SetPin+0x1e4>)
 800029c:	699b      	ldr	r3, [r3, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800029e:	b672      	cpsid	i

	//read in register contents
	__disable_irq();
	I2C2->CR1 |= (1<<8); //send start condition
 80002a0:	4b4e      	ldr	r3, [pc, #312]	; (80003dc <MCP23017SetPin+0x1e4>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a4d      	ldr	r2, [pc, #308]	; (80003dc <MCP23017SetPin+0x1e4>)
 80002a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002aa:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80002ac:	bf00      	nop
 80002ae:	4b4b      	ldr	r3, [pc, #300]	; (80003dc <MCP23017SetPin+0x1e4>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d0f9      	beq.n	80002ae <MCP23017SetPin+0xb6>
	I2C2->DR = addr | 1; //address the MCP23017 and READ from it
 80002ba:	797b      	ldrb	r3, [r7, #5]
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	b2da      	uxtb	r2, r3
 80002c2:	4b46      	ldr	r3, [pc, #280]	; (80003dc <MCP23017SetPin+0x1e4>)
 80002c4:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80002c6:	bf00      	nop
 80002c8:	4b44      	ldr	r3, [pc, #272]	; (80003dc <MCP23017SetPin+0x1e4>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	f003 0302 	and.w	r3, r3, #2
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d0f9      	beq.n	80002c8 <MCP23017SetPin+0xd0>
	if(I2C2->SR2); //read I2C SR2, Note: Can't check for busyness, results in spurious extra byte read
 80002d4:	4b41      	ldr	r3, [pc, #260]	; (80003dc <MCP23017SetPin+0x1e4>)
 80002d6:	699b      	ldr	r3, [r3, #24]
	I2C2->CR1 &= ~(1 << 10); //Disable ACK and
 80002d8:	4b40      	ldr	r3, [pc, #256]	; (80003dc <MCP23017SetPin+0x1e4>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a3f      	ldr	r2, [pc, #252]	; (80003dc <MCP23017SetPin+0x1e4>)
 80002de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80002e2:	6013      	str	r3, [r2, #0]
	I2C2->CR1 |= (1 << 9); //queue stop condition here (Just after EV6)
 80002e4:	4b3d      	ldr	r3, [pc, #244]	; (80003dc <MCP23017SetPin+0x1e4>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a3c      	ldr	r2, [pc, #240]	; (80003dc <MCP23017SetPin+0x1e4>)
 80002ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ee:	6013      	str	r3, [r2, #0]

	while ((I2C2->SR1 & (1<<6)) == 0); //while RxNE is low, ie data is still being read
 80002f0:	bf00      	nop
 80002f2:	4b3a      	ldr	r3, [pc, #232]	; (80003dc <MCP23017SetPin+0x1e4>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d0f9      	beq.n	80002f2 <MCP23017SetPin+0xfa>
	current = I2C2->DR; //read current state of Bank B
 80002fe:	4b37      	ldr	r3, [pc, #220]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000300:	691b      	ldr	r3, [r3, #16]
 8000302:	73fb      	strb	r3, [r7, #15]
	I2C2->CR1 |= (1<<10); //Re-enable ACK
 8000304:	4b35      	ldr	r3, [pc, #212]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a34      	ldr	r2, [pc, #208]	; (80003dc <MCP23017SetPin+0x1e4>)
 800030a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800030e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000310:	b662      	cpsie	i
	__enable_irq();

	while ((I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 8000312:	bf00      	nop
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000316:	699b      	ldr	r3, [r3, #24]


	current |= (1<<pin);
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	2201      	movs	r2, #1
 800031c:	fa02 f303 	lsl.w	r3, r2, r3
 8000320:	b25a      	sxtb	r2, r3
 8000322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000326:	4313      	orrs	r3, r2
 8000328:	b25b      	sxtb	r3, r3
 800032a:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 800032c:	b672      	cpsid	i

	//Note that all the I2C pointers are already volatile
	//I think I know the problem here, the start condition is sent, then the interrupt fires, then I2C DR has yet to be written, so the entire thing crashes in a pile of flames. It looks like the interrupt routine is plenty fast when compared to a full byte transfer, but just too long to squeeze into a start condition. YUP, CONFIRMED THAT IT GETS STUCK WAITING FOR THE ADDRESS FLAG, IE the address flag is not set!
	//write out the new state
	__disable_irq(); //the entire routine will be super duper unhappy unless this is in place
	I2C2->CR1 |= (1<<8); //send start condition
 800032e:	4b2b      	ldr	r3, [pc, #172]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a2a      	ldr	r2, [pc, #168]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000338:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 800033a:	bf00      	nop
 800033c:	4b27      	ldr	r3, [pc, #156]	; (80003dc <MCP23017SetPin+0x1e4>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	f003 0301 	and.w	r3, r3, #1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d0f9      	beq.n	800033c <MCP23017SetPin+0x144>
	I2C2->DR = addr; //address the MCP23017
 8000348:	4a24      	ldr	r2, [pc, #144]	; (80003dc <MCP23017SetPin+0x1e4>)
 800034a:	797b      	ldrb	r3, [r7, #5]
 800034c:	6113      	str	r3, [r2, #16]
	//__enable_irq(); didn't work here
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 800034e:	bf00      	nop
 8000350:	4b22      	ldr	r3, [pc, #136]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	f003 0302 	and.w	r3, r3, #2
 8000358:	2b00      	cmp	r3, #0
 800035a:	d0f9      	beq.n	8000350 <MCP23017SetPin+0x158>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 800035c:	bf00      	nop
 800035e:	4b1f      	ldr	r3, [pc, #124]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	f003 0304 	and.w	r3, r3, #4
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0f9      	beq.n	800035e <MCP23017SetPin+0x166>

	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800036a:	bf00      	nop
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MCP23017SetPin+0x1e4>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000374:	2b00      	cmp	r3, #0
 8000376:	d0f9      	beq.n	800036c <MCP23017SetPin+0x174>
	if(b==A){
 8000378:	79bb      	ldrb	r3, [r7, #6]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d103      	bne.n	8000386 <MCP23017SetPin+0x18e>
		I2C2->DR = 0x14;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000380:	2214      	movs	r2, #20
 8000382:	611a      	str	r2, [r3, #16]
 8000384:	e002      	b.n	800038c <MCP23017SetPin+0x194>
	}
	else{
		I2C2->DR = 0x15;
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000388:	2215      	movs	r2, #21
 800038a:	611a      	str	r2, [r3, #16]
	}
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800038c:	bf00      	nop
 800038e:	4b13      	ldr	r3, [pc, #76]	; (80003dc <MCP23017SetPin+0x1e4>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f9      	beq.n	800038e <MCP23017SetPin+0x196>
	I2C2->DR = current; //just pull everything low
 800039a:	4a10      	ldr	r2, [pc, #64]	; (80003dc <MCP23017SetPin+0x1e4>)
 800039c:	7bfb      	ldrb	r3, [r7, #15]
 800039e:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80003a0:	bf00      	nop
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <MCP23017SetPin+0x1e4>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d0f9      	beq.n	80003a2 <MCP23017SetPin+0x1aa>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure BTF is 1
 80003ae:	bf00      	nop
 80003b0:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <MCP23017SetPin+0x1e4>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d0f9      	beq.n	80003b0 <MCP23017SetPin+0x1b8>
	I2C2->CR1 |= (1<<9); //send stop condition
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <MCP23017SetPin+0x1e4>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a06      	ldr	r2, [pc, #24]	; (80003dc <MCP23017SetPin+0x1e4>)
 80003c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003c6:	6013      	str	r3, [r2, #0]

	while ((I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 80003c8:	bf00      	nop
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <MCP23017SetPin+0x1e4>)
 80003cc:	699b      	ldr	r3, [r3, #24]
  __ASM volatile ("cpsie i" : : : "memory");
 80003ce:	b662      	cpsie	i
	__enable_irq();

}
 80003d0:	bf00      	nop
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40005800 	.word	0x40005800

080003e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e4:	f000 fca6 	bl	8000d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e8:	f000 f88a 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ec:	f000 f9f0 	bl	80007d0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80003f0:	f007 fa8c 	bl	800790c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80003f4:	f000 f8ee 	bl	80005d4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80003f8:	f000 f92a 	bl	8000650 <MX_I2C1_Init>
  MX_I2C2_Init();
 80003fc:	f000 f956 	bl	80006ac <MX_I2C2_Init>
  MX_TIM2_Init();
 8000400:	f000 f982 	bl	8000708 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000404:	f000 f8d9 	bl	80005ba <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8000408:	f7ff fea0 	bl	800014c <DWT_Delay_Init>

  I2C2->CR1 |= 1; //enable i2c 2 peripheral for LCD and EEPROM
 800040c:	4b39      	ldr	r3, [pc, #228]	; (80004f4 <main+0x114>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a38      	ldr	r2, [pc, #224]	; (80004f4 <main+0x114>)
 8000412:	f043 0301 	orr.w	r3, r3, #1
 8000416:	6013      	str	r3, [r2, #0]

  //Initialise the MCP23017 first
  	I2C2->CR1 |= (1<<8); //send start condition
 8000418:	4b36      	ldr	r3, [pc, #216]	; (80004f4 <main+0x114>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a35      	ldr	r2, [pc, #212]	; (80004f4 <main+0x114>)
 800041e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000422:	6013      	str	r3, [r2, #0]
  	while ((I2C2->SR1 & 1) == 0); //clear SB
 8000424:	bf00      	nop
 8000426:	4b33      	ldr	r3, [pc, #204]	; (80004f4 <main+0x114>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	2b00      	cmp	r3, #0
 8000430:	d0f9      	beq.n	8000426 <main+0x46>
  	I2C2->DR = LCD_Address; //address the MCP23017
 8000432:	4b30      	ldr	r3, [pc, #192]	; (80004f4 <main+0x114>)
 8000434:	224e      	movs	r2, #78	; 0x4e
 8000436:	611a      	str	r2, [r3, #16]
  	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000438:	bf00      	nop
 800043a:	4b2e      	ldr	r3, [pc, #184]	; (80004f4 <main+0x114>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f003 0302 	and.w	r3, r3, #2
 8000442:	2b00      	cmp	r3, #0
 8000444:	d0f9      	beq.n	800043a <main+0x5a>
  	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000446:	bf00      	nop
 8000448:	4b2a      	ldr	r3, [pc, #168]	; (80004f4 <main+0x114>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	2b00      	cmp	r3, #0
 8000452:	d0f9      	beq.n	8000448 <main+0x68>
  	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000454:	bf00      	nop
 8000456:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <main+0x114>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800045e:	2b00      	cmp	r3, #0
 8000460:	d0f9      	beq.n	8000456 <main+0x76>
  	I2C2->DR = 0x00; //write to IODIR_A
 8000462:	4b24      	ldr	r3, [pc, #144]	; (80004f4 <main+0x114>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000468:	bf00      	nop
 800046a:	4b22      	ldr	r3, [pc, #136]	; (80004f4 <main+0x114>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000472:	2b00      	cmp	r3, #0
 8000474:	d0f9      	beq.n	800046a <main+0x8a>
  	I2C2->DR = 0x00; //all outputs
 8000476:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <main+0x114>)
 8000478:	2200      	movs	r2, #0
 800047a:	611a      	str	r2, [r3, #16]
  	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800047c:	bf00      	nop
 800047e:	4b1d      	ldr	r3, [pc, #116]	; (80004f4 <main+0x114>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000486:	2b00      	cmp	r3, #0
 8000488:	d0f9      	beq.n	800047e <main+0x9e>
  	I2C2->DR = 0x00; //all outputs for next address which is IODIR_B
 800048a:	4b1a      	ldr	r3, [pc, #104]	; (80004f4 <main+0x114>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
  	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000490:	bf00      	nop
 8000492:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <main+0x114>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800049a:	2b00      	cmp	r3, #0
 800049c:	d0f9      	beq.n	8000492 <main+0xb2>
  	while ((I2C2->SR1 & (1<<7)) == 0); //make sure BTF is 1
 800049e:	bf00      	nop
 80004a0:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <main+0x114>)
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d0f9      	beq.n	80004a0 <main+0xc0>
  	I2C2->CR1 |= (1<<9); //send stop condition
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <main+0x114>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a10      	ldr	r2, [pc, #64]	; (80004f4 <main+0x114>)
 80004b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004b6:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  brightness[0] = encoderValues[3];
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <main+0x118>)
 80004ba:	78db      	ldrb	r3, [r3, #3]
 80004bc:	b2da      	uxtb	r2, r3
 80004be:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <main+0x11c>)
 80004c0:	701a      	strb	r2, [r3, #0]
	  brightness[1] = encoderValues[2];
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <main+0x118>)
 80004c4:	789b      	ldrb	r3, [r3, #2]
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <main+0x11c>)
 80004ca:	705a      	strb	r2, [r3, #1]
	  brightness[2] = encoderValues[1];
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <main+0x118>)
 80004ce:	785b      	ldrb	r3, [r3, #1]
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <main+0x11c>)
 80004d4:	709a      	strb	r2, [r3, #2]
	  brightness[3] = encoderValues[0];
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <main+0x118>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	b2da      	uxtb	r2, r3
 80004dc:	4b07      	ldr	r3, [pc, #28]	; (80004fc <main+0x11c>)
 80004de:	70da      	strb	r2, [r3, #3]

	  //LCDShiftLeft(LCD_Address);
	  DWT_Delay_us(500);
 80004e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e4:	f7ff fe62 	bl	80001ac <DWT_Delay_us>
	  MCP23017SetPin(0, B, LCD_Address);
 80004e8:	224e      	movs	r2, #78	; 0x4e
 80004ea:	2101      	movs	r1, #1
 80004ec:	2000      	movs	r0, #0
 80004ee:	f7ff fe83 	bl	80001f8 <MCP23017SetPin>
	  brightness[0] = encoderValues[3];
 80004f2:	e7e1      	b.n	80004b8 <main+0xd8>
 80004f4:	40005800 	.word	0x40005800
 80004f8:	200001b8 	.word	0x200001b8
 80004fc:	20000000 	.word	0x20000000

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800050a:	2228      	movs	r2, #40	; 0x28
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f007 fe96 	bl	8008240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000530:	2301      	movs	r3, #1
 8000532:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000538:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053e:	2301      	movs	r3, #1
 8000540:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800054c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000550:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fd94 	bl	8003084 <HAL_RCC_OscConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000562:	f000 f9c7 	bl	80008f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000566:	230f      	movs	r3, #15
 8000568:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056a:	2302      	movs	r3, #2
 800056c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000576:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	2102      	movs	r1, #2
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fffe 	bl	8003584 <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800058e:	f000 f9b1 	bl	80008f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000592:	2312      	movs	r3, #18
 8000594:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800059a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 f976 	bl	8003894 <HAL_RCCEx_PeriphCLKConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005ae:	f000 f9a1 	bl	80008f4 <Error_Handler>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3750      	adds	r7, #80	; 0x50
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	201c      	movs	r0, #28
 80005c4:	f000 fef9 	bl	80013ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005c8:	201c      	movs	r0, #28
 80005ca:	f000 ff12 	bl	80013f2 <HAL_NVIC_EnableIRQ>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_ADC1_Init+0x74>)
 80005e6:	4a19      	ldr	r2, [pc, #100]	; (800064c <MX_ADC1_Init+0x78>)
 80005e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <MX_ADC1_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_ADC1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_ADC1_Init+0x74>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_ADC1_Init+0x74>)
 80005fe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000602:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_ADC1_Init+0x74>)
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_ADC1_Init+0x74>)
 800060c:	2201      	movs	r2, #1
 800060e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000610:	480d      	ldr	r0, [pc, #52]	; (8000648 <MX_ADC1_Init+0x74>)
 8000612:	f000 fbf1 	bl	8000df8 <HAL_ADC_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800061c:	f000 f96a 	bl	80008f4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000624:	2301      	movs	r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	4619      	mov	r1, r3
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_ADC1_Init+0x74>)
 8000632:	f000 fcb9 	bl	8000fa8 <HAL_ADC_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800063c:	f000 f95a 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000488 	.word	0x20000488
 800064c:	40012400 	.word	0x40012400

08000650 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000656:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <MX_I2C1_Init+0x54>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_I2C1_Init+0x50>)
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_I2C1_Init+0x58>)
 800065e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_I2C1_Init+0x50>)
 800066e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000672:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_I2C1_Init+0x50>)
 800068e:	f001 f83d 	bl	800170c <HAL_I2C_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000698:	f000 f92c 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200003e0 	.word	0x200003e0
 80006a4:	40005400 	.word	0x40005400
 80006a8:	00061a80 	.word	0x00061a80

080006ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_I2C2_Init+0x50>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <MX_I2C2_Init+0x54>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_I2C2_Init+0x50>)
 80006b8:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_I2C2_Init+0x58>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_I2C2_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_I2C2_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_I2C2_Init+0x50>)
 80006ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_I2C2_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_I2C2_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_I2C2_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_I2C2_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_I2C2_Init+0x50>)
 80006ea:	f001 f80f 	bl	800170c <HAL_I2C_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006f4:	f000 f8fe 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000434 	.word	0x20000434
 8000700:	40005800 	.word	0x40005800
 8000704:	00061a80 	.word	0x00061a80

08000708 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071c:	463b      	mov	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000724:	4b29      	ldr	r3, [pc, #164]	; (80007cc <MX_TIM2_Init+0xc4>)
 8000726:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800072a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800072c:	4b27      	ldr	r3, [pc, #156]	; (80007cc <MX_TIM2_Init+0xc4>)
 800072e:	2201      	movs	r2, #1
 8000730:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000732:	4b26      	ldr	r3, [pc, #152]	; (80007cc <MX_TIM2_Init+0xc4>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 8000738:	4b24      	ldr	r3, [pc, #144]	; (80007cc <MX_TIM2_Init+0xc4>)
 800073a:	223f      	movs	r2, #63	; 0x3f
 800073c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073e:	4b23      	ldr	r3, [pc, #140]	; (80007cc <MX_TIM2_Init+0xc4>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_TIM2_Init+0xc4>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800074a:	4820      	ldr	r0, [pc, #128]	; (80007cc <MX_TIM2_Init+0xc4>)
 800074c:	f003 f958 	bl	8003a00 <HAL_TIM_Base_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000756:	f000 f8cd 	bl	80008f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	4619      	mov	r1, r3
 8000766:	4819      	ldr	r0, [pc, #100]	; (80007cc <MX_TIM2_Init+0xc4>)
 8000768:	f003 faa1 	bl	8003cae <HAL_TIM_ConfigClockSource>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000772:	f000 f8bf 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	4619      	mov	r1, r3
 8000782:	4812      	ldr	r0, [pc, #72]	; (80007cc <MX_TIM2_Init+0xc4>)
 8000784:	f003 fc70 	bl	8004068 <HAL_TIMEx_MasterConfigSynchronization>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800078e:	f000 f8b1 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIM2->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the BAM Interrupt is triggered
 8000792:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800079c:	f023 0302 	bic.w	r3, r3, #2
 80007a0:	6013      	str	r3, [r2, #0]
  TIM2->DIER |= 1; //Update interrupt enable
 80007a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	60d3      	str	r3, [r2, #12]
  TIM2->CR1 |= 1; //enable BAM Driver
 80007b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200004b8 	.word	0x200004b8

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e4:	4b3f      	ldr	r3, [pc, #252]	; (80008e4 <MX_GPIO_Init+0x114>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a3e      	ldr	r2, [pc, #248]	; (80008e4 <MX_GPIO_Init+0x114>)
 80007ea:	f043 0310 	orr.w	r3, r3, #16
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b3c      	ldr	r3, [pc, #240]	; (80008e4 <MX_GPIO_Init+0x114>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f003 0310 	and.w	r3, r3, #16
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fc:	4b39      	ldr	r3, [pc, #228]	; (80008e4 <MX_GPIO_Init+0x114>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a38      	ldr	r2, [pc, #224]	; (80008e4 <MX_GPIO_Init+0x114>)
 8000802:	f043 0320 	orr.w	r3, r3, #32
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b36      	ldr	r3, [pc, #216]	; (80008e4 <MX_GPIO_Init+0x114>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f003 0320 	and.w	r3, r3, #32
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b33      	ldr	r3, [pc, #204]	; (80008e4 <MX_GPIO_Init+0x114>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a32      	ldr	r2, [pc, #200]	; (80008e4 <MX_GPIO_Init+0x114>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b30      	ldr	r3, [pc, #192]	; (80008e4 <MX_GPIO_Init+0x114>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0304 	and.w	r3, r3, #4
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082c:	4b2d      	ldr	r3, [pc, #180]	; (80008e4 <MX_GPIO_Init+0x114>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a2c      	ldr	r2, [pc, #176]	; (80008e4 <MX_GPIO_Init+0x114>)
 8000832:	f043 0308 	orr.w	r3, r3, #8
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <MX_GPIO_Init+0x114>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0308 	and.w	r3, r3, #8
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800084a:	4827      	ldr	r0, [pc, #156]	; (80008e8 <MX_GPIO_Init+0x118>)
 800084c:	f000 ff46 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f248 11c0 	movw	r1, #33216	; 0x81c0
 8000856:	4825      	ldr	r0, [pc, #148]	; (80008ec <MX_GPIO_Init+0x11c>)
 8000858:	f000 ff40 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000862:	4823      	ldr	r0, [pc, #140]	; (80008f0 <MX_GPIO_Init+0x120>)
 8000864:	f000 ff3a 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000868:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800086c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	4619      	mov	r1, r3
 8000880:	4819      	ldr	r0, [pc, #100]	; (80008e8 <MX_GPIO_Init+0x118>)
 8000882:	f000 fdd1 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
 8000886:	f248 13c0 	movw	r3, #33216	; 0x81c0
 800088a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2302      	movs	r3, #2
 8000896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4619      	mov	r1, r3
 800089e:	4813      	ldr	r0, [pc, #76]	; (80008ec <MX_GPIO_Init+0x11c>)
 80008a0:	f000 fdc2 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008a4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	4619      	mov	r1, r3
 80008bc:	480c      	ldr	r0, [pc, #48]	; (80008f0 <MX_GPIO_Init+0x120>)
 80008be:	f000 fdb3 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	4619      	mov	r1, r3
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_GPIO_Init+0x11c>)
 80008d8:	f000 fda6 	bl	8001428 <HAL_GPIO_Init>

}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40011000 	.word	0x40011000
 80008ec:	40010800 	.word	0x40010800
 80008f0:	40010c00 	.word	0x40010c00

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fa:	e7fe      	b.n	80008fa <Error_Handler+0x6>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <HAL_MspInit+0x5c>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	4a14      	ldr	r2, [pc, #80]	; (8000958 <HAL_MspInit+0x5c>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6193      	str	r3, [r2, #24]
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_MspInit+0x5c>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_MspInit+0x5c>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <HAL_MspInit+0x5c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	61d3      	str	r3, [r2, #28]
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <HAL_MspInit+0x5c>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_MspInit+0x60>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <HAL_MspInit+0x60>)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	40021000 	.word	0x40021000
 800095c:	40010000 	.word	0x40010000

08000960 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a14      	ldr	r2, [pc, #80]	; (80009cc <HAL_ADC_MspInit+0x6c>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d121      	bne.n	80009c4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <HAL_ADC_MspInit+0x70>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <HAL_ADC_MspInit+0x70>)
 8000986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_ADC_MspInit+0x70>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_ADC_MspInit+0x70>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a0c      	ldr	r2, [pc, #48]	; (80009d0 <HAL_ADC_MspInit+0x70>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <HAL_ADC_MspInit+0x70>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80009b0:	230f      	movs	r3, #15
 80009b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b4:	2303      	movs	r3, #3
 80009b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4619      	mov	r1, r3
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <HAL_ADC_MspInit+0x74>)
 80009c0:	f000 fd32 	bl	8001428 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009c4:	bf00      	nop
 80009c6:	3720      	adds	r7, #32
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40012400 	.word	0x40012400
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40010800 	.word	0x40010800

080009d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	; 0x30
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a32      	ldr	r2, [pc, #200]	; (8000abc <HAL_I2C_MspInit+0xe4>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d133      	bne.n	8000a60 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f8:	4b31      	ldr	r3, [pc, #196]	; (8000ac0 <HAL_I2C_MspInit+0xe8>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a30      	ldr	r2, [pc, #192]	; (8000ac0 <HAL_I2C_MspInit+0xe8>)
 80009fe:	f043 0308 	orr.w	r3, r3, #8
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b2e      	ldr	r3, [pc, #184]	; (8000ac0 <HAL_I2C_MspInit+0xe8>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0308 	and.w	r3, r3, #8
 8000a0c:	61bb      	str	r3, [r7, #24]
 8000a0e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a16:	2312      	movs	r3, #18
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4827      	ldr	r0, [pc, #156]	; (8000ac4 <HAL_I2C_MspInit+0xec>)
 8000a26:	f000 fcff 	bl	8001428 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000a2a:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <HAL_I2C_MspInit+0xf0>)
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a32:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a40:	4a21      	ldr	r2, [pc, #132]	; (8000ac8 <HAL_I2C_MspInit+0xf0>)
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a46:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <HAL_I2C_MspInit+0xe8>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <HAL_I2C_MspInit+0xe8>)
 8000a4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a50:	61d3      	str	r3, [r2, #28]
 8000a52:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <HAL_I2C_MspInit+0xe8>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a5e:	e029      	b.n	8000ab4 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a19      	ldr	r2, [pc, #100]	; (8000acc <HAL_I2C_MspInit+0xf4>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d124      	bne.n	8000ab4 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_I2C_MspInit+0xe8>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <HAL_I2C_MspInit+0xe8>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	6193      	str	r3, [r2, #24]
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_I2C_MspInit+0xe8>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a88:	2312      	movs	r3, #18
 8000a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <HAL_I2C_MspInit+0xec>)
 8000a98:	f000 fcc6 	bl	8001428 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_I2C_MspInit+0xe8>)
 8000a9e:	69db      	ldr	r3, [r3, #28]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_I2C_MspInit+0xe8>)
 8000aa2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000aa6:	61d3      	str	r3, [r2, #28]
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_I2C_MspInit+0xe8>)
 8000aaa:	69db      	ldr	r3, [r3, #28]
 8000aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3730      	adds	r7, #48	; 0x30
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010c00 	.word	0x40010c00
 8000ac8:	40010000 	.word	0x40010000
 8000acc:	40005800 	.word	0x40005800

08000ad0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ae0:	d10b      	bne.n	8000afa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_TIM_Base_MspInit+0x34>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <HAL_TIM_Base_MspInit+0x34>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	61d3      	str	r3, [r2, #28]
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_TIM_Base_MspInit+0x34>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	40021000 	.word	0x40021000

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr

08000b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr

08000b4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4e:	f000 f937 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b5e:	f001 f83e 	bl	8001bde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20001198 	.word	0x20001198

08000b6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	GPIOA->BSRR = 1<<6;
 8000b72:	4b50      	ldr	r3, [pc, #320]	; (8000cb4 <TIM2_IRQHandler+0x148>)
 8000b74:	2240      	movs	r2, #64	; 0x40
 8000b76:	611a      	str	r2, [r3, #16]
	for(int i = 0; i < 4; i++){ //BAM all 4 LED's
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	e01c      	b.n	8000bb8 <TIM2_IRQHandler+0x4c>

		if(brightness[i] & (1 << BAMIndex)){
 8000b7e:	4a4e      	ldr	r2, [pc, #312]	; (8000cb8 <TIM2_IRQHandler+0x14c>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4413      	add	r3, r2
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b4c      	ldr	r3, [pc, #304]	; (8000cbc <TIM2_IRQHandler+0x150>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	fa42 f303 	asr.w	r3, r2, r3
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d006      	beq.n	8000ba6 <TIM2_IRQHandler+0x3a>
			GPIOB->BSRR = (1<<(i+12));
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	330c      	adds	r3, #12
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	409a      	lsls	r2, r3
 8000ba0:	4b47      	ldr	r3, [pc, #284]	; (8000cc0 <TIM2_IRQHandler+0x154>)
 8000ba2:	611a      	str	r2, [r3, #16]
 8000ba4:	e005      	b.n	8000bb2 <TIM2_IRQHandler+0x46>
		}
		else{
			GPIOB->BRR = (1<<(i+12));
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	330c      	adds	r3, #12
 8000baa:	2201      	movs	r2, #1
 8000bac:	409a      	lsls	r2, r3
 8000bae:	4b44      	ldr	r3, [pc, #272]	; (8000cc0 <TIM2_IRQHandler+0x154>)
 8000bb0:	615a      	str	r2, [r3, #20]
	for(int i = 0; i < 4; i++){ //BAM all 4 LED's
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	dddf      	ble.n	8000b7e <TIM2_IRQHandler+0x12>
		}

	}

	if(BAMIndex == 7){ //We've passed one BAM cycle
 8000bbe:	4b3f      	ldr	r3, [pc, #252]	; (8000cbc <TIM2_IRQHandler+0x150>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b07      	cmp	r3, #7
 8000bc4:	d15e      	bne.n	8000c84 <TIM2_IRQHandler+0x118>
		BAMIndex = 0;
 8000bc6:	4b3d      	ldr	r3, [pc, #244]	; (8000cbc <TIM2_IRQHandler+0x150>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = 1;
 8000bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28



		uint8_t currentReadoff = ((((GPIOA->IDR)>>9) & 1) << 1) | (((GPIOA->IDR)>>10) & 1); //read current encoder state
 8000bd4:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <TIM2_IRQHandler+0x148>)
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	0a5b      	lsrs	r3, r3, #9
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <TIM2_IRQHandler+0x148>)
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	0a9b      	lsrs	r3, r3, #10
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	70fb      	strb	r3, [r7, #3]
		uint8_t index = (lastEncoder[currentEncoder]<<2) | currentReadoff;
 8000bf8:	4b32      	ldr	r3, [pc, #200]	; (8000cc4 <TIM2_IRQHandler+0x158>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b32      	ldr	r3, [pc, #200]	; (8000cc8 <TIM2_IRQHandler+0x15c>)
 8000c00:	5c9b      	ldrb	r3, [r3, r2]
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	b25a      	sxtb	r2, r3
 8000c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	70bb      	strb	r3, [r7, #2]
		encoderValues[currentEncoder] += encoderLUT[index];
 8000c10:	4b2c      	ldr	r3, [pc, #176]	; (8000cc4 <TIM2_IRQHandler+0x158>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <TIM2_IRQHandler+0x160>)
 8000c18:	5c9a      	ldrb	r2, [r3, r2]
 8000c1a:	78bb      	ldrb	r3, [r7, #2]
 8000c1c:	492c      	ldr	r1, [pc, #176]	; (8000cd0 <TIM2_IRQHandler+0x164>)
 8000c1e:	56cb      	ldrsb	r3, [r1, r3]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	4928      	ldr	r1, [pc, #160]	; (8000cc4 <TIM2_IRQHandler+0x158>)
 8000c24:	7809      	ldrb	r1, [r1, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <TIM2_IRQHandler+0x160>)
 8000c2c:	545a      	strb	r2, [r3, r1]
		lastEncoder[currentEncoder] = currentReadoff;
 8000c2e:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <TIM2_IRQHandler+0x158>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	4619      	mov	r1, r3
 8000c34:	4a24      	ldr	r2, [pc, #144]	; (8000cc8 <TIM2_IRQHandler+0x15c>)
 8000c36:	78fb      	ldrb	r3, [r7, #3]
 8000c38:	5453      	strb	r3, [r2, r1]
		//uint8_t buffer[256];
		//sprintf(buffer, "currentReadoff %d index %d encoderValue %d\r\n", currentReadoff, index, encoderValues[0]);
		//CDC_Transmit_FS(buffer, sizeof(buffer));
		//}

		if(currentEncoder == 4) currentEncoder = 0;
 8000c3a:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <TIM2_IRQHandler+0x158>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	d103      	bne.n	8000c4a <TIM2_IRQHandler+0xde>
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <TIM2_IRQHandler+0x158>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
 8000c48:	e005      	b.n	8000c56 <TIM2_IRQHandler+0xea>
		else currentEncoder++;
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <TIM2_IRQHandler+0x158>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <TIM2_IRQHandler+0x158>)
 8000c54:	701a      	strb	r2, [r3, #0]

		//select the nth encoder here to allow the mux time to settle
		GPIOC->BRR = (3<<13); //clear GPIO Pins
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <TIM2_IRQHandler+0x168>)
 8000c58:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000c5c:	615a      	str	r2, [r3, #20]
		GPIOC->BSRR = ((currentEncoder&3)<<13);
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <TIM2_IRQHandler+0x158>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	035b      	lsls	r3, r3, #13
 8000c64:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <TIM2_IRQHandler+0x168>)
 8000c66:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8000c6a:	6113      	str	r3, [r2, #16]
		GPIOA->BRR = (1<<15);
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <TIM2_IRQHandler+0x148>)
 8000c6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c72:	615a      	str	r2, [r3, #20]
		GPIOA->BSRR = ((currentEncoder&4)<<13);
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <TIM2_IRQHandler+0x158>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	035b      	lsls	r3, r3, #13
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <TIM2_IRQHandler+0x148>)
 8000c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c80:	6113      	str	r3, [r2, #16]
 8000c82:	e00c      	b.n	8000c9e <TIM2_IRQHandler+0x132>

	}
	else{
		BAMIndex++;
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <TIM2_IRQHandler+0x150>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <TIM2_IRQHandler+0x150>)
 8000c8e:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = TIM2->PSC << 1; //set next write to occupy twice the time of this current write.
 8000c90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	6293      	str	r3, [r2, #40]	; 0x28
	}
	GPIOA->BRR = 1<<6;
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <TIM2_IRQHandler+0x148>)
 8000ca0:	2240      	movs	r2, #64	; 0x40
 8000ca2:	615a      	str	r2, [r3, #20]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <TIM2_IRQHandler+0x16c>)
 8000ca6:	f002 fefa 	bl	8003a9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40010800 	.word	0x40010800
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	200001ac 	.word	0x200001ac
 8000cc0:	40010c00 	.word	0x40010c00
 8000cc4:	200001ad 	.word	0x200001ad
 8000cc8:	200001b0 	.word	0x200001b0
 8000ccc:	200001b8 	.word	0x200001b8
 8000cd0:	20000004 	.word	0x20000004
 8000cd4:	40011000 	.word	0x40011000
 8000cd8:	200004b8 	.word	0x200004b8

08000cdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <Reset_Handler>:
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e003      	b.n	8000cf4 <LoopCopyDataInit>

08000cec <CopyDataInit>:
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <LoopFillZerobss+0x14>)
 8000cee:	585b      	ldr	r3, [r3, r1]
 8000cf0:	5043      	str	r3, [r0, r1]
 8000cf2:	3104      	adds	r1, #4

08000cf4 <LoopCopyDataInit>:
 8000cf4:	480a      	ldr	r0, [pc, #40]	; (8000d20 <LoopFillZerobss+0x18>)
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <LoopFillZerobss+0x1c>)
 8000cf8:	1842      	adds	r2, r0, r1
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3f6      	bcc.n	8000cec <CopyDataInit>
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <LoopFillZerobss+0x20>)
 8000d00:	e002      	b.n	8000d08 <LoopFillZerobss>

08000d02 <FillZerobss>:
 8000d02:	2300      	movs	r3, #0
 8000d04:	f842 3b04 	str.w	r3, [r2], #4

08000d08 <LoopFillZerobss>:
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <LoopFillZerobss+0x24>)
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d3f9      	bcc.n	8000d02 <FillZerobss>
 8000d0e:	f7ff ffe5 	bl	8000cdc <SystemInit>
 8000d12:	f007 fa71 	bl	80081f8 <__libc_init_array>
 8000d16:	f7ff fb63 	bl	80003e0 <main>
 8000d1a:	4770      	bx	lr
 8000d1c:	080082e4 	.word	0x080082e4
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000190 	.word	0x20000190
 8000d28:	20000190 	.word	0x20000190
 8000d2c:	20001484 	.word	0x20001484

08000d30 <ADC1_2_IRQHandler>:
 8000d30:	e7fe      	b.n	8000d30 <ADC1_2_IRQHandler>
	...

08000d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_Init+0x28>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_Init+0x28>)
 8000d3e:	f043 0310 	orr.w	r3, r3, #16
 8000d42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 fb2d 	bl	80013a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f000 f808 	bl	8000d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff fdd4 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40022000 	.word	0x40022000

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x54>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x58>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fb45 	bl	800140e <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00e      	b.n	8000dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d80a      	bhi.n	8000daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d94:	2200      	movs	r2, #0
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f000 fb0d 	bl	80013ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <HAL_InitTick+0x5c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000014 	.word	0x20000014
 8000db8:	2000001c 	.word	0x2000001c
 8000dbc:	20000018 	.word	0x20000018

08000dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_IncTick+0x1c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_IncTick+0x20>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a03      	ldr	r2, [pc, #12]	; (8000de0 <HAL_IncTick+0x20>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	2000001c 	.word	0x2000001c
 8000de0:	20000500 	.word	0x20000500

08000de4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b02      	ldr	r3, [pc, #8]	; (8000df4 <HAL_GetTick+0x10>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	20000500 	.word	0x20000500

08000df8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e0be      	b.n	8000f98 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d109      	bne.n	8000e3c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff fd92 	bl	8000960 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 f9ab 	bl	8001198 <ADC_ConversionStop_Disable>
 8000e42:	4603      	mov	r3, r0
 8000e44:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4a:	f003 0310 	and.w	r3, r3, #16
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8099 	bne.w	8000f86 <HAL_ADC_Init+0x18e>
 8000e54:	7dfb      	ldrb	r3, [r7, #23]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f040 8095 	bne.w	8000f86 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e64:	f023 0302 	bic.w	r3, r3, #2
 8000e68:	f043 0202 	orr.w	r2, r3, #2
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e78:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7b1b      	ldrb	r3, [r3, #12]
 8000e7e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e80:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e90:	d003      	beq.n	8000e9a <HAL_ADC_Init+0xa2>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d102      	bne.n	8000ea0 <HAL_ADC_Init+0xa8>
 8000e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9e:	e000      	b.n	8000ea2 <HAL_ADC_Init+0xaa>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7d1b      	ldrb	r3, [r3, #20]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d119      	bne.n	8000ee4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	7b1b      	ldrb	r3, [r3, #12]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d109      	bne.n	8000ecc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	035a      	lsls	r2, r3, #13
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	e00b      	b.n	8000ee4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed0:	f043 0220 	orr.w	r2, r3, #32
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000edc:	f043 0201 	orr.w	r2, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <HAL_ADC_Init+0x1a8>)
 8000f00:	4013      	ands	r3, r2
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	6812      	ldr	r2, [r2, #0]
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	430b      	orrs	r3, r1
 8000f0a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f14:	d003      	beq.n	8000f1e <HAL_ADC_Init+0x126>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d104      	bne.n	8000f28 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	691b      	ldr	r3, [r3, #16]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	051b      	lsls	r3, r3, #20
 8000f26:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_ADC_Init+0x1ac>)
 8000f44:	4013      	ands	r3, r2
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d10b      	bne.n	8000f64 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f56:	f023 0303 	bic.w	r3, r3, #3
 8000f5a:	f043 0201 	orr.w	r2, r3, #1
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f62:	e018      	b.n	8000f96 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f68:	f023 0312 	bic.w	r3, r3, #18
 8000f6c:	f043 0210 	orr.w	r2, r3, #16
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f78:	f043 0201 	orr.w	r2, r3, #1
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f84:	e007      	b.n	8000f96 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8a:	f043 0210 	orr.w	r2, r3, #16
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	ffe1f7fd 	.word	0xffe1f7fd
 8000fa4:	ff1f0efe 	.word	0xff1f0efe

08000fa8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d101      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x20>
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e0dc      	b.n	8001182 <HAL_ADC_ConfigChannel+0x1da>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b06      	cmp	r3, #6
 8000fd6:	d81c      	bhi.n	8001012 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	3b05      	subs	r3, #5
 8000fea:	221f      	movs	r2, #31
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	4019      	ands	r1, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	3b05      	subs	r3, #5
 8001004:	fa00 f203 	lsl.w	r2, r0, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	430a      	orrs	r2, r1
 800100e:	635a      	str	r2, [r3, #52]	; 0x34
 8001010:	e03c      	b.n	800108c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b0c      	cmp	r3, #12
 8001018:	d81c      	bhi.n	8001054 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	3b23      	subs	r3, #35	; 0x23
 800102c:	221f      	movs	r2, #31
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	4019      	ands	r1, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	3b23      	subs	r3, #35	; 0x23
 8001046:	fa00 f203 	lsl.w	r2, r0, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	430a      	orrs	r2, r1
 8001050:	631a      	str	r2, [r3, #48]	; 0x30
 8001052:	e01b      	b.n	800108c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	3b41      	subs	r3, #65	; 0x41
 8001066:	221f      	movs	r2, #31
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	4019      	ands	r1, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	3b41      	subs	r3, #65	; 0x41
 8001080:	fa00 f203 	lsl.w	r2, r0, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	430a      	orrs	r2, r1
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b09      	cmp	r3, #9
 8001092:	d91c      	bls.n	80010ce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68d9      	ldr	r1, [r3, #12]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	3b1e      	subs	r3, #30
 80010a6:	2207      	movs	r2, #7
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	4019      	ands	r1, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	6898      	ldr	r0, [r3, #8]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	3b1e      	subs	r3, #30
 80010c0:	fa00 f203 	lsl.w	r2, r0, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	430a      	orrs	r2, r1
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	e019      	b.n	8001102 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6919      	ldr	r1, [r3, #16]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	2207      	movs	r2, #7
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	4019      	ands	r1, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	6898      	ldr	r0, [r3, #8]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4613      	mov	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	fa00 f203 	lsl.w	r2, r0, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	430a      	orrs	r2, r1
 8001100:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b10      	cmp	r3, #16
 8001108:	d003      	beq.n	8001112 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800110e:	2b11      	cmp	r3, #17
 8001110:	d132      	bne.n	8001178 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a1d      	ldr	r2, [pc, #116]	; (800118c <HAL_ADC_ConfigChannel+0x1e4>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d125      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d126      	bne.n	8001178 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001138:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b10      	cmp	r3, #16
 8001140:	d11a      	bne.n	8001178 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <HAL_ADC_ConfigChannel+0x1e8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a13      	ldr	r2, [pc, #76]	; (8001194 <HAL_ADC_ConfigChannel+0x1ec>)
 8001148:	fba2 2303 	umull	r2, r3, r2, r3
 800114c:	0c9a      	lsrs	r2, r3, #18
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001158:	e002      	b.n	8001160 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	3b01      	subs	r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f9      	bne.n	800115a <HAL_ADC_ConfigChannel+0x1b2>
 8001166:	e007      	b.n	8001178 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	f043 0220 	orr.w	r2, r3, #32
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	40012400 	.word	0x40012400
 8001190:	20000014 	.word	0x20000014
 8001194:	431bde83 	.word	0x431bde83

08001198 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d127      	bne.n	8001202 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0201 	bic.w	r2, r2, #1
 80011c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011c2:	f7ff fe0f 	bl	8000de4 <HAL_GetTick>
 80011c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011c8:	e014      	b.n	80011f4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011ca:	f7ff fe0b 	bl	8000de4 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d90d      	bls.n	80011f4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011dc:	f043 0210 	orr.w	r2, r3, #16
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e8:	f043 0201 	orr.w	r2, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e007      	b.n	8001204 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d0e3      	beq.n	80011ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001228:	4013      	ands	r3, r2
 800122a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123e:	4a04      	ldr	r2, [pc, #16]	; (8001250 <__NVIC_SetPriorityGrouping+0x44>)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	60d3      	str	r3, [r2, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <__NVIC_GetPriorityGrouping+0x18>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	f003 0307 	and.w	r3, r3, #7
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	db0b      	blt.n	800129a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f003 021f 	and.w	r2, r3, #31
 8001288:	4906      	ldr	r1, [pc, #24]	; (80012a4 <__NVIC_EnableIRQ+0x34>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	2001      	movs	r0, #1
 8001292:	fa00 f202 	lsl.w	r2, r0, r2
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db0a      	blt.n	80012d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	490c      	ldr	r1, [pc, #48]	; (80012f4 <__NVIC_SetPriority+0x4c>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	0112      	lsls	r2, r2, #4
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	440b      	add	r3, r1
 80012cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d0:	e00a      	b.n	80012e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4908      	ldr	r1, [pc, #32]	; (80012f8 <__NVIC_SetPriority+0x50>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	3b04      	subs	r3, #4
 80012e0:	0112      	lsls	r2, r2, #4
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	761a      	strb	r2, [r3, #24]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	; 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f1c3 0307 	rsb	r3, r3, #7
 8001316:	2b04      	cmp	r3, #4
 8001318:	bf28      	it	cs
 800131a:	2304      	movcs	r3, #4
 800131c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3304      	adds	r3, #4
 8001322:	2b06      	cmp	r3, #6
 8001324:	d902      	bls.n	800132c <NVIC_EncodePriority+0x30>
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3b03      	subs	r3, #3
 800132a:	e000      	b.n	800132e <NVIC_EncodePriority+0x32>
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	401a      	ands	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001344:	f04f 31ff 	mov.w	r1, #4294967295
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43d9      	mvns	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	4313      	orrs	r3, r2
         );
}
 8001356:	4618      	mov	r0, r3
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001370:	d301      	bcc.n	8001376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001372:	2301      	movs	r3, #1
 8001374:	e00f      	b.n	8001396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <SysTick_Config+0x40>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137e:	210f      	movs	r1, #15
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f7ff ff90 	bl	80012a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <SysTick_Config+0x40>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138e:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <SysTick_Config+0x40>)
 8001390:	2207      	movs	r2, #7
 8001392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	e000e010 	.word	0xe000e010

080013a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff2d 	bl	800120c <__NVIC_SetPriorityGrouping>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013cc:	f7ff ff42 	bl	8001254 <__NVIC_GetPriorityGrouping>
 80013d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	6978      	ldr	r0, [r7, #20]
 80013d8:	f7ff ff90 	bl	80012fc <NVIC_EncodePriority>
 80013dc:	4602      	mov	r2, r0
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff5f 	bl	80012a8 <__NVIC_SetPriority>
}
 80013ea:	bf00      	nop
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff35 	bl	8001270 <__NVIC_EnableIRQ>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ffa2 	bl	8001360 <SysTick_Config>
 800141c:	4603      	mov	r3, r0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001428:	b480      	push	{r7}
 800142a:	b08b      	sub	sp, #44	; 0x2c
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143a:	e127      	b.n	800168c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800143c:	2201      	movs	r2, #1
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	429a      	cmp	r2, r3
 8001456:	f040 8116 	bne.w	8001686 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b12      	cmp	r3, #18
 8001460:	d034      	beq.n	80014cc <HAL_GPIO_Init+0xa4>
 8001462:	2b12      	cmp	r3, #18
 8001464:	d80d      	bhi.n	8001482 <HAL_GPIO_Init+0x5a>
 8001466:	2b02      	cmp	r3, #2
 8001468:	d02b      	beq.n	80014c2 <HAL_GPIO_Init+0x9a>
 800146a:	2b02      	cmp	r3, #2
 800146c:	d804      	bhi.n	8001478 <HAL_GPIO_Init+0x50>
 800146e:	2b00      	cmp	r3, #0
 8001470:	d031      	beq.n	80014d6 <HAL_GPIO_Init+0xae>
 8001472:	2b01      	cmp	r3, #1
 8001474:	d01c      	beq.n	80014b0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001476:	e048      	b.n	800150a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001478:	2b03      	cmp	r3, #3
 800147a:	d043      	beq.n	8001504 <HAL_GPIO_Init+0xdc>
 800147c:	2b11      	cmp	r3, #17
 800147e:	d01b      	beq.n	80014b8 <HAL_GPIO_Init+0x90>
          break;
 8001480:	e043      	b.n	800150a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001482:	4a89      	ldr	r2, [pc, #548]	; (80016a8 <HAL_GPIO_Init+0x280>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d026      	beq.n	80014d6 <HAL_GPIO_Init+0xae>
 8001488:	4a87      	ldr	r2, [pc, #540]	; (80016a8 <HAL_GPIO_Init+0x280>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d806      	bhi.n	800149c <HAL_GPIO_Init+0x74>
 800148e:	4a87      	ldr	r2, [pc, #540]	; (80016ac <HAL_GPIO_Init+0x284>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d020      	beq.n	80014d6 <HAL_GPIO_Init+0xae>
 8001494:	4a86      	ldr	r2, [pc, #536]	; (80016b0 <HAL_GPIO_Init+0x288>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d01d      	beq.n	80014d6 <HAL_GPIO_Init+0xae>
          break;
 800149a:	e036      	b.n	800150a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800149c:	4a85      	ldr	r2, [pc, #532]	; (80016b4 <HAL_GPIO_Init+0x28c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d019      	beq.n	80014d6 <HAL_GPIO_Init+0xae>
 80014a2:	4a85      	ldr	r2, [pc, #532]	; (80016b8 <HAL_GPIO_Init+0x290>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d016      	beq.n	80014d6 <HAL_GPIO_Init+0xae>
 80014a8:	4a84      	ldr	r2, [pc, #528]	; (80016bc <HAL_GPIO_Init+0x294>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d013      	beq.n	80014d6 <HAL_GPIO_Init+0xae>
          break;
 80014ae:	e02c      	b.n	800150a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	623b      	str	r3, [r7, #32]
          break;
 80014b6:	e028      	b.n	800150a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	3304      	adds	r3, #4
 80014be:	623b      	str	r3, [r7, #32]
          break;
 80014c0:	e023      	b.n	800150a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	3308      	adds	r3, #8
 80014c8:	623b      	str	r3, [r7, #32]
          break;
 80014ca:	e01e      	b.n	800150a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	330c      	adds	r3, #12
 80014d2:	623b      	str	r3, [r7, #32]
          break;
 80014d4:	e019      	b.n	800150a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014de:	2304      	movs	r3, #4
 80014e0:	623b      	str	r3, [r7, #32]
          break;
 80014e2:	e012      	b.n	800150a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d105      	bne.n	80014f8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014ec:	2308      	movs	r3, #8
 80014ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	611a      	str	r2, [r3, #16]
          break;
 80014f6:	e008      	b.n	800150a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f8:	2308      	movs	r3, #8
 80014fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	615a      	str	r2, [r3, #20]
          break;
 8001502:	e002      	b.n	800150a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
          break;
 8001508:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2bff      	cmp	r3, #255	; 0xff
 800150e:	d801      	bhi.n	8001514 <HAL_GPIO_Init+0xec>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	e001      	b.n	8001518 <HAL_GPIO_Init+0xf0>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3304      	adds	r3, #4
 8001518:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	2bff      	cmp	r3, #255	; 0xff
 800151e:	d802      	bhi.n	8001526 <HAL_GPIO_Init+0xfe>
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	e002      	b.n	800152c <HAL_GPIO_Init+0x104>
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	3b08      	subs	r3, #8
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	210f      	movs	r1, #15
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	401a      	ands	r2, r3
 800153e:	6a39      	ldr	r1, [r7, #32]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	431a      	orrs	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 8096 	beq.w	8001686 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800155a:	4b59      	ldr	r3, [pc, #356]	; (80016c0 <HAL_GPIO_Init+0x298>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	4a58      	ldr	r2, [pc, #352]	; (80016c0 <HAL_GPIO_Init+0x298>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6193      	str	r3, [r2, #24]
 8001566:	4b56      	ldr	r3, [pc, #344]	; (80016c0 <HAL_GPIO_Init+0x298>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001572:	4a54      	ldr	r2, [pc, #336]	; (80016c4 <HAL_GPIO_Init+0x29c>)
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3302      	adds	r3, #2
 800157a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	220f      	movs	r2, #15
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	4013      	ands	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4b      	ldr	r2, [pc, #300]	; (80016c8 <HAL_GPIO_Init+0x2a0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d013      	beq.n	80015c6 <HAL_GPIO_Init+0x19e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4a      	ldr	r2, [pc, #296]	; (80016cc <HAL_GPIO_Init+0x2a4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00d      	beq.n	80015c2 <HAL_GPIO_Init+0x19a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a49      	ldr	r2, [pc, #292]	; (80016d0 <HAL_GPIO_Init+0x2a8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d007      	beq.n	80015be <HAL_GPIO_Init+0x196>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a48      	ldr	r2, [pc, #288]	; (80016d4 <HAL_GPIO_Init+0x2ac>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d101      	bne.n	80015ba <HAL_GPIO_Init+0x192>
 80015b6:	2303      	movs	r3, #3
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x1a0>
 80015ba:	2304      	movs	r3, #4
 80015bc:	e004      	b.n	80015c8 <HAL_GPIO_Init+0x1a0>
 80015be:	2302      	movs	r3, #2
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_Init+0x1a0>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_Init+0x1a0>
 80015c6:	2300      	movs	r3, #0
 80015c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ca:	f002 0203 	and.w	r2, r2, #3
 80015ce:	0092      	lsls	r2, r2, #2
 80015d0:	4093      	lsls	r3, r2
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015d8:	493a      	ldr	r1, [pc, #232]	; (80016c4 <HAL_GPIO_Init+0x29c>)
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d006      	beq.n	8001600 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015f2:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4938      	ldr	r1, [pc, #224]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
 80015fe:	e006      	b.n	800160e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001600:	4b35      	ldr	r3, [pc, #212]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	43db      	mvns	r3, r3
 8001608:	4933      	ldr	r1, [pc, #204]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 800160a:	4013      	ands	r3, r2
 800160c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d006      	beq.n	8001628 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800161a:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	492e      	ldr	r1, [pc, #184]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	604b      	str	r3, [r1, #4]
 8001626:	e006      	b.n	8001636 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	43db      	mvns	r3, r3
 8001630:	4929      	ldr	r1, [pc, #164]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001632:	4013      	ands	r3, r2
 8001634:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d006      	beq.n	8001650 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	4924      	ldr	r1, [pc, #144]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	608b      	str	r3, [r1, #8]
 800164e:	e006      	b.n	800165e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	43db      	mvns	r3, r3
 8001658:	491f      	ldr	r1, [pc, #124]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 800165a:	4013      	ands	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	491a      	ldr	r1, [pc, #104]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	60cb      	str	r3, [r1, #12]
 8001676:	e006      	b.n	8001686 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	43db      	mvns	r3, r3
 8001680:	4915      	ldr	r1, [pc, #84]	; (80016d8 <HAL_GPIO_Init+0x2b0>)
 8001682:	4013      	ands	r3, r2
 8001684:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	3301      	adds	r3, #1
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	fa22 f303 	lsr.w	r3, r2, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	f47f aed0 	bne.w	800143c <HAL_GPIO_Init+0x14>
  }
}
 800169c:	bf00      	nop
 800169e:	372c      	adds	r7, #44	; 0x2c
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	10210000 	.word	0x10210000
 80016ac:	10110000 	.word	0x10110000
 80016b0:	10120000 	.word	0x10120000
 80016b4:	10310000 	.word	0x10310000
 80016b8:	10320000 	.word	0x10320000
 80016bc:	10220000 	.word	0x10220000
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010000 	.word	0x40010000
 80016c8:	40010800 	.word	0x40010800
 80016cc:	40010c00 	.word	0x40010c00
 80016d0:	40011000 	.word	0x40011000
 80016d4:	40011400 	.word	0x40011400
 80016d8:	40010400 	.word	0x40010400

080016dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
 80016e8:	4613      	mov	r3, r2
 80016ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016ec:	787b      	ldrb	r3, [r7, #1]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016f8:	e003      	b.n	8001702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	041a      	lsls	r2, r3, #16
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	611a      	str	r2, [r3, #16]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e11f      	b.n	800195e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d106      	bne.n	8001738 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff f950 	bl	80009d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2224      	movs	r2, #36	; 0x24
 800173c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800175e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800176e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001770:	f002 f85e 	bl	8003830 <HAL_RCC_GetPCLK1Freq>
 8001774:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4a7b      	ldr	r2, [pc, #492]	; (8001968 <HAL_I2C_Init+0x25c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d807      	bhi.n	8001790 <HAL_I2C_Init+0x84>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4a7a      	ldr	r2, [pc, #488]	; (800196c <HAL_I2C_Init+0x260>)
 8001784:	4293      	cmp	r3, r2
 8001786:	bf94      	ite	ls
 8001788:	2301      	movls	r3, #1
 800178a:	2300      	movhi	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	e006      	b.n	800179e <HAL_I2C_Init+0x92>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4a77      	ldr	r2, [pc, #476]	; (8001970 <HAL_I2C_Init+0x264>)
 8001794:	4293      	cmp	r3, r2
 8001796:	bf94      	ite	ls
 8001798:	2301      	movls	r3, #1
 800179a:	2300      	movhi	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0db      	b.n	800195e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4a72      	ldr	r2, [pc, #456]	; (8001974 <HAL_I2C_Init+0x268>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	0c9b      	lsrs	r3, r3, #18
 80017b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	4a64      	ldr	r2, [pc, #400]	; (8001968 <HAL_I2C_Init+0x25c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d802      	bhi.n	80017e0 <HAL_I2C_Init+0xd4>
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3301      	adds	r3, #1
 80017de:	e009      	b.n	80017f4 <HAL_I2C_Init+0xe8>
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017e6:	fb02 f303 	mul.w	r3, r2, r3
 80017ea:	4a63      	ldr	r2, [pc, #396]	; (8001978 <HAL_I2C_Init+0x26c>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	099b      	lsrs	r3, r3, #6
 80017f2:	3301      	adds	r3, #1
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	430b      	orrs	r3, r1
 80017fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001806:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4956      	ldr	r1, [pc, #344]	; (8001968 <HAL_I2C_Init+0x25c>)
 8001810:	428b      	cmp	r3, r1
 8001812:	d80d      	bhi.n	8001830 <HAL_I2C_Init+0x124>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	1e59      	subs	r1, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001822:	3301      	adds	r3, #1
 8001824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001828:	2b04      	cmp	r3, #4
 800182a:	bf38      	it	cc
 800182c:	2304      	movcc	r3, #4
 800182e:	e04f      	b.n	80018d0 <HAL_I2C_Init+0x1c4>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d111      	bne.n	800185c <HAL_I2C_Init+0x150>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1e58      	subs	r0, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	440b      	add	r3, r1
 8001846:	fbb0 f3f3 	udiv	r3, r0, r3
 800184a:	3301      	adds	r3, #1
 800184c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf0c      	ite	eq
 8001854:	2301      	moveq	r3, #1
 8001856:	2300      	movne	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	e012      	b.n	8001882 <HAL_I2C_Init+0x176>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1e58      	subs	r0, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	0099      	lsls	r1, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001872:	3301      	adds	r3, #1
 8001874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf0c      	ite	eq
 800187c:	2301      	moveq	r3, #1
 800187e:	2300      	movne	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_I2C_Init+0x17e>
 8001886:	2301      	movs	r3, #1
 8001888:	e022      	b.n	80018d0 <HAL_I2C_Init+0x1c4>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10e      	bne.n	80018b0 <HAL_I2C_Init+0x1a4>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1e58      	subs	r0, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6859      	ldr	r1, [r3, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	440b      	add	r3, r1
 80018a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a4:	3301      	adds	r3, #1
 80018a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ae:	e00f      	b.n	80018d0 <HAL_I2C_Init+0x1c4>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1e58      	subs	r0, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	0099      	lsls	r1, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c6:	3301      	adds	r3, #1
 80018c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	6809      	ldr	r1, [r1, #0]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69da      	ldr	r2, [r3, #28]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6911      	ldr	r1, [r2, #16]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68d2      	ldr	r2, [r2, #12]
 800190a:	4311      	orrs	r1, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	430b      	orrs	r3, r1
 8001912:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0201 	orr.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2220      	movs	r2, #32
 800194a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	000186a0 	.word	0x000186a0
 800196c:	001e847f 	.word	0x001e847f
 8001970:	003d08ff 	.word	0x003d08ff
 8001974:	431bde83 	.word	0x431bde83
 8001978:	10624dd3 	.word	0x10624dd3

0800197c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800197c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197e:	b08b      	sub	sp, #44	; 0x2c
 8001980:	af06      	add	r7, sp, #24
 8001982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0fd      	b.n	8001b8a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d106      	bne.n	80019a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f006 f97e 	bl	8007ca4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2203      	movs	r2, #3
 80019ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 fbed 	bl	8004194 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	687e      	ldr	r6, [r7, #4]
 80019c2:	466d      	mov	r5, sp
 80019c4:	f106 0410 	add.w	r4, r6, #16
 80019c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	602b      	str	r3, [r5, #0]
 80019d0:	1d33      	adds	r3, r6, #4
 80019d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d4:	6838      	ldr	r0, [r7, #0]
 80019d6:	f002 fbb7 	bl	8004148 <USB_CoreInit>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2202      	movs	r2, #2
 80019e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0ce      	b.n	8001b8a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 fbe8 	bl	80041c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e04c      	b.n	8001a98 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3301      	adds	r3, #1
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	440b      	add	r3, r1
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	b298      	uxth	r0, r3
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	3336      	adds	r3, #54	; 0x36
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	440b      	add	r3, r1
 8001a50:	3303      	adds	r3, #3
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	3338      	adds	r3, #56	; 0x38
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a6a:	7bfa      	ldrb	r2, [r7, #15]
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	440b      	add	r3, r1
 8001a78:	333c      	adds	r3, #60	; 0x3c
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3340      	adds	r3, #64	; 0x40
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	3301      	adds	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d3ad      	bcc.n	80019fe <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]
 8001aa6:	e044      	b.n	8001b32 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aa8:	7bfa      	ldrb	r2, [r7, #15]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001abe:	7bfa      	ldrb	r2, [r7, #15]
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	440b      	add	r3, r1
 8001acc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	440b      	add	r3, r1
 8001ae2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001aea:	7bfa      	ldrb	r2, [r7, #15]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	440b      	add	r3, r1
 8001af8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	440b      	add	r3, r1
 8001b0e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	440b      	add	r3, r1
 8001b24:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	73fb      	strb	r3, [r7, #15]
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d3b5      	bcc.n	8001aa8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	687e      	ldr	r6, [r7, #4]
 8001b44:	466d      	mov	r5, sp
 8001b46:	f106 0410 	add.w	r4, r6, #16
 8001b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b4e:	6823      	ldr	r3, [r4, #0]
 8001b50:	602b      	str	r3, [r5, #0]
 8001b52:	1d33      	adds	r3, r6, #4
 8001b54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b56:	6838      	ldr	r0, [r7, #0]
 8001b58:	f002 fb42 	bl	80041e0 <USB_DevInit>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d005      	beq.n	8001b6e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2202      	movs	r2, #2
 8001b66:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e00d      	b.n	8001b8a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 fadc 	bl	8006140 <USB_DevDisconnect>

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b92 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_PCD_Start+0x16>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e016      	b.n	8001bd6 <HAL_PCD_Start+0x44>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 fad7 	bl	8004168 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001bba:	2101      	movs	r1, #1
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f006 fae4 	bl	800818a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f004 fab0 	bl	800612c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b088      	sub	sp, #32
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f004 fab2 	bl	8006154 <USB_ReadInterrupts>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bfa:	d102      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 fb61 	bl	80022c4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f004 faa4 	bl	8006154 <USB_ReadInterrupts>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c16:	d112      	bne.n	8001c3e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c2a:	b292      	uxth	r2, r2
 8001c2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f006 f8b2 	bl	8007d9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c36:	2100      	movs	r1, #0
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f925 	bl	8001e88 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f004 fa86 	bl	8006154 <USB_ReadInterrupts>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c52:	d10b      	bne.n	8001c6c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c66:	b292      	uxth	r2, r2
 8001c68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f004 fa6f 	bl	8006154 <USB_ReadInterrupts>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c80:	d10b      	bne.n	8001c9a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c94:	b292      	uxth	r2, r2
 8001c96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f004 fa58 	bl	8006154 <USB_ReadInterrupts>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cae:	d126      	bne.n	8001cfe <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0204 	bic.w	r2, r2, #4
 8001cc2:	b292      	uxth	r2, r2
 8001cc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0208 	bic.w	r2, r2, #8
 8001cda:	b292      	uxth	r2, r2
 8001cdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f006 f893 	bl	8007e0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cf8:	b292      	uxth	r2, r2
 8001cfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 fa26 	bl	8006154 <USB_ReadInterrupts>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d12:	f040 8084 	bne.w	8001e1e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	77fb      	strb	r3, [r7, #31]
 8001d1a:	e011      	b.n	8001d40 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	7ffb      	ldrb	r3, [r7, #31]
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	441a      	add	r2, r3
 8001d28:	7ffb      	ldrb	r3, [r7, #31]
 8001d2a:	8812      	ldrh	r2, [r2, #0]
 8001d2c:	b292      	uxth	r2, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	f107 0120 	add.w	r1, r7, #32
 8001d34:	440b      	add	r3, r1
 8001d36:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001d3a:	7ffb      	ldrb	r3, [r7, #31]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	77fb      	strb	r3, [r7, #31]
 8001d40:	7ffb      	ldrb	r3, [r7, #31]
 8001d42:	2b07      	cmp	r3, #7
 8001d44:	d9ea      	bls.n	8001d1c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0201 	orr.w	r2, r2, #1
 8001d58:	b292      	uxth	r2, r2
 8001d5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0201 	bic.w	r2, r2, #1
 8001d70:	b292      	uxth	r2, r2
 8001d72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001d76:	bf00      	nop
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f6      	beq.n	8001d78 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d9c:	b292      	uxth	r2, r2
 8001d9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	77fb      	strb	r3, [r7, #31]
 8001da6:	e010      	b.n	8001dca <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001da8:	7ffb      	ldrb	r3, [r7, #31]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	4611      	mov	r1, r2
 8001db0:	7ffa      	ldrb	r2, [r7, #31]
 8001db2:	0092      	lsls	r2, r2, #2
 8001db4:	440a      	add	r2, r1
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	f107 0120 	add.w	r1, r7, #32
 8001dbc:	440b      	add	r3, r1
 8001dbe:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001dc2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001dc4:	7ffb      	ldrb	r3, [r7, #31]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	77fb      	strb	r3, [r7, #31]
 8001dca:	7ffb      	ldrb	r3, [r7, #31]
 8001dcc:	2b07      	cmp	r3, #7
 8001dce:	d9eb      	bls.n	8001da8 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0208 	orr.w	r2, r2, #8
 8001de2:	b292      	uxth	r2, r2
 8001de4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dfa:	b292      	uxth	r2, r2
 8001dfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0204 	orr.w	r2, r2, #4
 8001e12:	b292      	uxth	r2, r2
 8001e14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f005 ffdd 	bl	8007dd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f004 f996 	bl	8006154 <USB_ReadInterrupts>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e32:	d10e      	bne.n	8001e52 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e46:	b292      	uxth	r2, r2
 8001e48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f005 ff96 	bl	8007d7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f004 f97c 	bl	8006154 <USB_ReadInterrupts>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e66:	d10b      	bne.n	8001e80 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e7a:	b292      	uxth	r2, r2
 8001e7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001e80:	bf00      	nop
 8001e82:	3720      	adds	r7, #32
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_PCD_SetAddress+0x1a>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e013      	b.n	8001eca <HAL_PCD_SetAddress+0x42>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	78fa      	ldrb	r2, [r7, #3]
 8001eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	78fa      	ldrb	r2, [r7, #3]
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f004 f923 	bl	8006106 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	4608      	mov	r0, r1
 8001edc:	4611      	mov	r1, r2
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	70fb      	strb	r3, [r7, #3]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	803b      	strh	r3, [r7, #0]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ef0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da0e      	bge.n	8001f16 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2201      	movs	r2, #1
 8001f12:	705a      	strb	r2, [r3, #1]
 8001f14:	e00e      	b.n	8001f34 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	f003 0207 	and.w	r2, r3, #7
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f40:	883a      	ldrh	r2, [r7, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	78ba      	ldrb	r2, [r7, #2]
 8001f4a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	785b      	ldrb	r3, [r3, #1]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f5e:	78bb      	ldrb	r3, [r7, #2]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d102      	bne.n	8001f6a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_PCD_EP_Open+0xa6>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e00e      	b.n	8001f96 <HAL_PCD_EP_Open+0xc4>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68f9      	ldr	r1, [r7, #12]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f002 f94a 	bl	8004220 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001f94:	7afb      	ldrb	r3, [r7, #11]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001faa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	da0e      	bge.n	8001fd0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb2:	78fb      	ldrb	r3, [r7, #3]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	705a      	strb	r2, [r3, #1]
 8001fce:	e00e      	b.n	8001fee <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	f003 0207 	and.w	r2, r3, #7
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_PCD_EP_Close+0x6a>
 8002004:	2302      	movs	r3, #2
 8002006:	e00e      	b.n	8002026 <HAL_PCD_EP_Close+0x88>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68f9      	ldr	r1, [r7, #12]
 8002016:	4618      	mov	r0, r3
 8002018:	f002 fc6c 	bl	80048f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	460b      	mov	r3, r1
 800203c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800203e:	7afb      	ldrb	r3, [r7, #11]
 8002040:	f003 0207 	and.w	r2, r3, #7
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4413      	add	r3, r2
 8002054:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2200      	movs	r2, #0
 8002066:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2200      	movs	r2, #0
 800206c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800206e:	7afb      	ldrb	r3, [r7, #11]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	b2da      	uxtb	r2, r3
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800207a:	7afb      	ldrb	r3, [r7, #11]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	2b00      	cmp	r3, #0
 8002082:	d106      	bne.n	8002092 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6979      	ldr	r1, [r7, #20]
 800208a:	4618      	mov	r0, r3
 800208c:	f002 fe1e 	bl	8004ccc <USB_EPStartXfer>
 8002090:	e005      	b.n	800209e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6979      	ldr	r1, [r7, #20]
 8002098:	4618      	mov	r0, r3
 800209a:	f002 fe17 	bl	8004ccc <USB_EPStartXfer>
  }

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	f003 0207 	and.w	r2, r3, #7
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	440b      	add	r3, r1
 80020c6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	460b      	mov	r3, r1
 80020e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020e6:	7afb      	ldrb	r3, [r7, #11]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4413      	add	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2200      	movs	r2, #0
 800211a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2201      	movs	r2, #1
 8002120:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002122:	7afb      	ldrb	r3, [r7, #11]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	b2da      	uxtb	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800212e:	7afb      	ldrb	r3, [r7, #11]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	2b00      	cmp	r3, #0
 8002136:	d106      	bne.n	8002146 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6979      	ldr	r1, [r7, #20]
 800213e:	4618      	mov	r0, r3
 8002140:	f002 fdc4 	bl	8004ccc <USB_EPStartXfer>
 8002144:	e005      	b.n	8002152 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6979      	ldr	r1, [r7, #20]
 800214c:	4618      	mov	r0, r3
 800214e:	f002 fdbd 	bl	8004ccc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	f003 0207 	and.w	r2, r3, #7
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	429a      	cmp	r2, r3
 8002174:	d901      	bls.n	800217a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e04c      	b.n	8002214 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800217a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800217e:	2b00      	cmp	r3, #0
 8002180:	da0e      	bge.n	80021a0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002182:	78fb      	ldrb	r3, [r7, #3]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	705a      	strb	r2, [r3, #1]
 800219e:	e00c      	b.n	80021ba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021a0:	78fa      	ldrb	r2, [r7, #3]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2201      	movs	r2, #1
 80021be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_PCD_EP_SetStall+0x7e>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e01c      	b.n	8002214 <HAL_PCD_EP_SetStall+0xb8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68f9      	ldr	r1, [r7, #12]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f003 fe8f 	bl	8005f0c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d108      	bne.n	800220a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002202:	4619      	mov	r1, r3
 8002204:	4610      	mov	r0, r2
 8002206:	f003 ffb4 	bl	8006172 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	f003 020f 	and.w	r2, r3, #15
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	429a      	cmp	r2, r3
 8002234:	d901      	bls.n	800223a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e040      	b.n	80022bc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800223a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800223e:	2b00      	cmp	r3, #0
 8002240:	da0e      	bge.n	8002260 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2201      	movs	r2, #1
 800225c:	705a      	strb	r2, [r3, #1]
 800225e:	e00e      	b.n	800227e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	f003 0207 	and.w	r2, r3, #7
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	b2da      	uxtb	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_PCD_EP_ClrStall+0x82>
 800229a:	2302      	movs	r3, #2
 800229c:	e00e      	b.n	80022bc <HAL_PCD_EP_ClrStall+0xa0>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68f9      	ldr	r1, [r7, #12]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 fe7d 	bl	8005fac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08e      	sub	sp, #56	; 0x38
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022cc:	e2df      	b.n	800288e <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022d6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80022d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80022e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f040 8158 	bne.w	800259e <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80022ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d152      	bne.n	800239e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002308:	81fb      	strh	r3, [r7, #14]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	89fb      	ldrh	r3, [r7, #14]
 8002310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002318:	b29b      	uxth	r3, r3
 800231a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3328      	adds	r3, #40	; 0x28
 8002320:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800232a:	b29b      	uxth	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	3302      	adds	r3, #2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	4413      	add	r3, r2
 8002340:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	441a      	add	r2, r3
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800235c:	2100      	movs	r1, #0
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f005 fcf3 	bl	8007d4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 828e 	beq.w	800288e <PCD_EP_ISR_Handler+0x5ca>
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f040 8289 	bne.w	800288e <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002388:	b2da      	uxtb	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b292      	uxth	r2, r2
 8002390:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800239c:	e277      	b.n	800288e <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80023ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d034      	beq.n	8002422 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	3306      	adds	r3, #6
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	f003 ff0a 	bl	8006210 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	b29a      	uxth	r2, r3
 8002404:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002408:	4013      	ands	r3, r2
 800240a:	823b      	strh	r3, [r7, #16]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	8a3a      	ldrh	r2, [r7, #16]
 8002412:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002416:	b292      	uxth	r2, r2
 8002418:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f005 fc68 	bl	8007cf0 <HAL_PCD_SetupStageCallback>
 8002420:	e235      	b.n	800288e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002422:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002426:	2b00      	cmp	r3, #0
 8002428:	f280 8231 	bge.w	800288e <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	b29a      	uxth	r2, r3
 8002434:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002438:	4013      	ands	r3, r2
 800243a:	83bb      	strh	r3, [r7, #28]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	8bba      	ldrh	r2, [r7, #28]
 8002442:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002446:	b292      	uxth	r2, r2
 8002448:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002452:	b29b      	uxth	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	3306      	adds	r3, #6
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	4413      	add	r3, r2
 8002468:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d019      	beq.n	80024b2 <PCD_EP_ISR_Handler+0x1ee>
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d015      	beq.n	80024b2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	6959      	ldr	r1, [r3, #20]
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002496:	b29b      	uxth	r3, r3
 8002498:	f003 feba 	bl	8006210 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	441a      	add	r2, r3
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024aa:	2100      	movs	r1, #0
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f005 fc31 	bl	8007d14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	4413      	add	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d112      	bne.n	8002500 <PCD_EP_ISR_Handler+0x23c>
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	801a      	strh	r2, [r3, #0]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	801a      	strh	r2, [r3, #0]
 80024fe:	e02f      	b.n	8002560 <PCD_EP_ISR_Handler+0x29c>
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	2b3e      	cmp	r3, #62	; 0x3e
 8002506:	d813      	bhi.n	8002530 <PCD_EP_ISR_Handler+0x26c>
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	085b      	lsrs	r3, r3, #1
 800250e:	633b      	str	r3, [r7, #48]	; 0x30
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <PCD_EP_ISR_Handler+0x25e>
 800251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251e:	3301      	adds	r3, #1
 8002520:	633b      	str	r3, [r7, #48]	; 0x30
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	b29b      	uxth	r3, r3
 8002526:	029b      	lsls	r3, r3, #10
 8002528:	b29a      	uxth	r2, r3
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	e017      	b.n	8002560 <PCD_EP_ISR_Handler+0x29c>
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	095b      	lsrs	r3, r3, #5
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <PCD_EP_ISR_Handler+0x286>
 8002544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002546:	3b01      	subs	r3, #1
 8002548:	633b      	str	r3, [r7, #48]	; 0x30
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	b29b      	uxth	r3, r3
 800254e:	029b      	lsls	r3, r3, #10
 8002550:	b29b      	uxth	r3, r3
 8002552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800255a:	b29a      	uxth	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	b29b      	uxth	r3, r3
 8002568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800256c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002570:	827b      	strh	r3, [r7, #18]
 8002572:	8a7b      	ldrh	r3, [r7, #18]
 8002574:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002578:	827b      	strh	r3, [r7, #18]
 800257a:	8a7b      	ldrh	r3, [r7, #18]
 800257c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002580:	827b      	strh	r3, [r7, #18]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	8a7b      	ldrh	r3, [r7, #18]
 8002588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800258c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002598:	b29b      	uxth	r3, r3
 800259a:	8013      	strh	r3, [r2, #0]
 800259c:	e177      	b.n	800288e <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025b0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f280 80ea 	bge.w	800278e <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025d0:	4013      	ands	r3, r2
 80025d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80025e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025e8:	b292      	uxth	r2, r2
 80025ea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80025ec:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	4413      	add	r3, r2
 8002600:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	7b1b      	ldrb	r3, [r3, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d122      	bne.n	8002650 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002612:	b29b      	uxth	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	3306      	adds	r3, #6
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	4413      	add	r3, r2
 8002628:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002632:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002634:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8087 	beq.w	800274a <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	6959      	ldr	r1, [r3, #20]
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	88da      	ldrh	r2, [r3, #6]
 8002648:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800264a:	f003 fde1 	bl	8006210 <USB_ReadPMA>
 800264e:	e07c      	b.n	800274a <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	78db      	ldrb	r3, [r3, #3]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d108      	bne.n	800266a <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002658:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800265a:	461a      	mov	r2, r3
 800265c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f923 	bl	80028aa <HAL_PCD_EP_DB_Receive>
 8002664:	4603      	mov	r3, r0
 8002666:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002668:	e06f      	b.n	800274a <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002684:	847b      	strh	r3, [r7, #34]	; 0x22
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	441a      	add	r2, r3
 8002694:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800269a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800269e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d021      	beq.n	8002708 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	3302      	adds	r3, #2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ec:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d02a      	beq.n	800274a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	6959      	ldr	r1, [r3, #20]
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	891a      	ldrh	r2, [r3, #8]
 8002700:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002702:	f003 fd85 	bl	8006210 <USB_ReadPMA>
 8002706:	e020      	b.n	800274a <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002710:	b29b      	uxth	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	3306      	adds	r3, #6
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	4413      	add	r3, r2
 8002726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002730:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002732:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	6959      	ldr	r1, [r3, #20]
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	895a      	ldrh	r2, [r3, #10]
 8002744:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002746:	f003 fd63 	bl	8006210 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	69da      	ldr	r2, [r3, #28]
 800274e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002750:	441a      	add	r2, r3
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800275c:	441a      	add	r2, r3
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d004      	beq.n	8002774 <PCD_EP_ISR_Handler+0x4b0>
 800276a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d206      	bcs.n	8002782 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	4619      	mov	r1, r3
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f005 faca 	bl	8007d14 <HAL_PCD_DataOutStageCallback>
 8002780:	e005      	b.n	800278e <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002788:	4618      	mov	r0, r3
 800278a:	f002 fa9f 	bl	8004ccc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800278e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002794:	2b00      	cmp	r3, #0
 8002796:	d07a      	beq.n	800288e <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002798:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80027c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c6:	843b      	strh	r3, [r7, #32]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	441a      	add	r2, r3
 80027d6:	8c3b      	ldrh	r3, [r7, #32]
 80027d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	78db      	ldrb	r3, [r3, #3]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d108      	bne.n	80027fe <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d146      	bne.n	8002882 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d141      	bne.n	8002882 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002806:	b29b      	uxth	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	3302      	adds	r3, #2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	4413      	add	r3, r2
 800281c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002826:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	699a      	ldr	r2, [r3, #24]
 800282c:	8bfb      	ldrh	r3, [r7, #30]
 800282e:	429a      	cmp	r2, r3
 8002830:	d906      	bls.n	8002840 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	8bfb      	ldrh	r3, [r7, #30]
 8002838:	1ad2      	subs	r2, r2, r3
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	619a      	str	r2, [r3, #24]
 800283e:	e002      	b.n	8002846 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	2200      	movs	r2, #0
 8002844:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	4619      	mov	r1, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f005 fa78 	bl	8007d4a <HAL_PCD_DataInStageCallback>
 800285a:	e018      	b.n	800288e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	695a      	ldr	r2, [r3, #20]
 8002860:	8bfb      	ldrh	r3, [r7, #30]
 8002862:	441a      	add	r2, r3
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	69da      	ldr	r2, [r3, #28]
 800286c:	8bfb      	ldrh	r3, [r7, #30]
 800286e:	441a      	add	r2, r3
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800287a:	4618      	mov	r0, r3
 800287c:	f002 fa26 	bl	8004ccc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002880:	e005      	b.n	800288e <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002882:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002884:	461a      	mov	r2, r3
 8002886:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f91b 	bl	8002ac4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002896:	b29b      	uxth	r3, r3
 8002898:	b21b      	sxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	f6ff ad17 	blt.w	80022ce <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3738      	adds	r7, #56	; 0x38
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b088      	sub	sp, #32
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	4613      	mov	r3, r2
 80028b6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028b8:	88fb      	ldrh	r3, [r7, #6]
 80028ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d07e      	beq.n	80029c0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4413      	add	r3, r2
 80028d6:	3302      	adds	r3, #2
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	699a      	ldr	r2, [r3, #24]
 80028f0:	8b7b      	ldrh	r3, [r7, #26]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d306      	bcc.n	8002904 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	8b7b      	ldrh	r3, [r7, #26]
 80028fc:	1ad2      	subs	r2, r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	619a      	str	r2, [r3, #24]
 8002902:	e002      	b.n	800290a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2200      	movs	r2, #0
 8002908:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d123      	bne.n	800295a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292c:	833b      	strh	r3, [r7, #24]
 800292e:	8b3b      	ldrh	r3, [r7, #24]
 8002930:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002934:	833b      	strh	r3, [r7, #24]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	441a      	add	r2, r3
 8002944:	8b3b      	ldrh	r3, [r7, #24]
 8002946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800294a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800294e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002956:	b29b      	uxth	r3, r3
 8002958:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800295a:	88fb      	ldrh	r3, [r7, #6]
 800295c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01f      	beq.n	80029a4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	b29b      	uxth	r3, r3
 8002976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800297a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297e:	82fb      	strh	r3, [r7, #22]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	441a      	add	r2, r3
 800298e:	8afb      	ldrh	r3, [r7, #22]
 8002990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800299c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80029a4:	8b7b      	ldrh	r3, [r7, #26]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 8087 	beq.w	8002aba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	6959      	ldr	r1, [r3, #20]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	891a      	ldrh	r2, [r3, #8]
 80029b8:	8b7b      	ldrh	r3, [r7, #26]
 80029ba:	f003 fc29 	bl	8006210 <USB_ReadPMA>
 80029be:	e07c      	b.n	8002aba <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	3306      	adds	r3, #6
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	8b7b      	ldrh	r3, [r7, #26]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d306      	bcc.n	8002a02 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	699a      	ldr	r2, [r3, #24]
 80029f8:	8b7b      	ldrh	r3, [r7, #26]
 80029fa:	1ad2      	subs	r2, r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	619a      	str	r2, [r3, #24]
 8002a00:	e002      	b.n	8002a08 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2200      	movs	r2, #0
 8002a06:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d123      	bne.n	8002a58 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2a:	83fb      	strh	r3, [r7, #30]
 8002a2c:	8bfb      	ldrh	r3, [r7, #30]
 8002a2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a32:	83fb      	strh	r3, [r7, #30]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	441a      	add	r2, r3
 8002a42:	8bfb      	ldrh	r3, [r7, #30]
 8002a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d11f      	bne.n	8002aa2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7c:	83bb      	strh	r3, [r7, #28]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	441a      	add	r2, r3
 8002a8c:	8bbb      	ldrh	r3, [r7, #28]
 8002a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002aa2:	8b7b      	ldrh	r3, [r7, #26]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	6959      	ldr	r1, [r3, #20]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	895a      	ldrh	r2, [r3, #10]
 8002ab4:	8b7b      	ldrh	r3, [r7, #26]
 8002ab6:	f003 fbab 	bl	8006210 <USB_ReadPMA>
    }
  }

  return count;
 8002aba:	8b7b      	ldrh	r3, [r7, #26]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3720      	adds	r7, #32
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b092      	sub	sp, #72	; 0x48
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8132 	beq.w	8002d42 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4413      	add	r3, r2
 8002af2:	3302      	adds	r3, #2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b06:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	699a      	ldr	r2, [r3, #24]
 8002b0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d906      	bls.n	8002b20 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b18:	1ad2      	subs	r2, r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	619a      	str	r2, [r3, #24]
 8002b1e:	e002      	b.n	8002b26 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2200      	movs	r2, #0
 8002b24:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d12c      	bne.n	8002b88 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	4619      	mov	r1, r3
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f005 f908 	bl	8007d4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 822f 	beq.w	8002fa4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b60:	827b      	strh	r3, [r7, #18]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	441a      	add	r2, r3
 8002b70:	8a7b      	ldrh	r3, [r7, #18]
 8002b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	8013      	strh	r3, [r2, #0]
 8002b86:	e20d      	b.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d01f      	beq.n	8002bd2 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bac:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	441a      	add	r2, r3
 8002bbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	f040 81e3 	bne.w	8002fa4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002be4:	441a      	add	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	69da      	ldr	r2, [r3, #28]
 8002bee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bf0:	441a      	add	r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	6a1a      	ldr	r2, [r3, #32]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d309      	bcc.n	8002c16 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	6a1a      	ldr	r2, [r3, #32]
 8002c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0e:	1ad2      	subs	r2, r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	621a      	str	r2, [r3, #32]
 8002c14:	e014      	b.n	8002c40 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002c1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c20:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c2a:	e009      	b.n	8002c40 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	785b      	ldrb	r3, [r3, #1]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d155      	bne.n	8002cf4 <HAL_PCD_EP_DB_Transmit+0x230>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	61bb      	str	r3, [r7, #24]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	011a      	lsls	r2, r3, #4
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d112      	bne.n	8002c9c <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	801a      	strh	r2, [r3, #0]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	801a      	strh	r2, [r3, #0]
 8002c9a:	e047      	b.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x268>
 8002c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9e:	2b3e      	cmp	r3, #62	; 0x3e
 8002ca0:	d811      	bhi.n	8002cc6 <HAL_PCD_EP_DB_Transmit+0x202>
 8002ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca4:	085b      	lsrs	r3, r3, #1
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	029b      	lsls	r3, r3, #10
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	801a      	strh	r2, [r3, #0]
 8002cc4:	e032      	b.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x268>
 8002cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc8:	095b      	lsrs	r3, r3, #5
 8002cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d102      	bne.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x218>
 8002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	029b      	lsls	r3, r3, #10
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	801a      	strh	r2, [r3, #0]
 8002cf2:	e01b      	b.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x268>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	785b      	ldrb	r3, [r3, #1]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d117      	bne.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x268>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	623b      	str	r3, [r7, #32]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	4413      	add	r3, r2
 8002d12:	623b      	str	r3, [r7, #32]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	011a      	lsls	r2, r3, #4
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d22:	61fb      	str	r3, [r7, #28]
 8002d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	6959      	ldr	r1, [r3, #20]
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	891a      	ldrh	r2, [r3, #8]
 8002d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	f003 fa24 	bl	8006188 <USB_WritePMA>
 8002d40:	e130      	b.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	3306      	adds	r3, #6
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d6a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	699a      	ldr	r2, [r3, #24]
 8002d70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d306      	bcc.n	8002d84 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d7c:	1ad2      	subs	r2, r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	619a      	str	r2, [r3, #24]
 8002d82:	e002      	b.n	8002d8a <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2200      	movs	r2, #0
 8002d88:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d12c      	bne.n	8002dec <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	4619      	mov	r1, r3
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f004 ffd6 	bl	8007d4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f040 80fd 	bne.w	8002fa4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	441a      	add	r2, r3
 8002dd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	8013      	strh	r3, [r2, #0]
 8002dea:	e0db      	b.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d11f      	bne.n	8002e36 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e10:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	441a      	add	r2, r3
 8002e20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	f040 80b1 	bne.w	8002fa4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e48:	441a      	add	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	69da      	ldr	r2, [r3, #28]
 8002e52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e54:	441a      	add	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	6a1a      	ldr	r2, [r3, #32]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d309      	bcc.n	8002e7a <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	6a1a      	ldr	r2, [r3, #32]
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	1ad2      	subs	r2, r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	621a      	str	r2, [r3, #32]
 8002e78:	e014      	b.n	8002ea4 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002e82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e84:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e8e:	e009      	b.n	8002ea4 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	785b      	ldrb	r3, [r3, #1]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d155      	bne.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x49a>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec6:	4413      	add	r3, r2
 8002ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	011a      	lsls	r2, r3, #4
 8002ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8002eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d112      	bne.n	8002f06 <HAL_PCD_EP_DB_Transmit+0x442>
 8002ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eee:	801a      	strh	r2, [r3, #0]
 8002ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f02:	801a      	strh	r2, [r3, #0]
 8002f04:	e044      	b.n	8002f90 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f08:	2b3e      	cmp	r3, #62	; 0x3e
 8002f0a:	d811      	bhi.n	8002f30 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0e:	085b      	lsrs	r3, r3, #1
 8002f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1e:	3301      	adds	r3, #1
 8002f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	029b      	lsls	r3, r3, #10
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f2c:	801a      	strh	r2, [r3, #0]
 8002f2e:	e02f      	b.n	8002f90 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d102      	bne.n	8002f46 <HAL_PCD_EP_DB_Transmit+0x482>
 8002f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f42:	3b01      	subs	r3, #1
 8002f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	029b      	lsls	r3, r3, #10
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f5a:	801a      	strh	r2, [r3, #0]
 8002f5c:	e018      	b.n	8002f90 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	785b      	ldrb	r3, [r3, #1]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d114      	bne.n	8002f90 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f74:	4413      	add	r3, r2
 8002f76:	637b      	str	r3, [r7, #52]	; 0x34
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	011a      	lsls	r2, r3, #4
 8002f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f80:	4413      	add	r3, r2
 8002f82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f86:	633b      	str	r3, [r7, #48]	; 0x30
 8002f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	6959      	ldr	r1, [r3, #20]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	895a      	ldrh	r2, [r3, #10]
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f003 f8f2 	bl	8006188 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fbe:	823b      	strh	r3, [r7, #16]
 8002fc0:	8a3b      	ldrh	r3, [r7, #16]
 8002fc2:	f083 0310 	eor.w	r3, r3, #16
 8002fc6:	823b      	strh	r3, [r7, #16]
 8002fc8:	8a3b      	ldrh	r3, [r7, #16]
 8002fca:	f083 0320 	eor.w	r3, r3, #32
 8002fce:	823b      	strh	r3, [r7, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	441a      	add	r2, r3
 8002fde:	8a3b      	ldrh	r3, [r7, #16]
 8002fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3748      	adds	r7, #72	; 0x48
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b087      	sub	sp, #28
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	817b      	strh	r3, [r7, #10]
 800300c:	4613      	mov	r3, r2
 800300e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003010:	897b      	ldrh	r3, [r7, #10]
 8003012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00b      	beq.n	8003034 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800301c:	897b      	ldrh	r3, [r7, #10]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4413      	add	r3, r2
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	e009      	b.n	8003048 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003034:	897a      	ldrh	r2, [r7, #10]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4413      	add	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003048:	893b      	ldrh	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d107      	bne.n	800305e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2200      	movs	r2, #0
 8003052:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	b29a      	uxth	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	80da      	strh	r2, [r3, #6]
 800305c:	e00b      	b.n	8003076 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2201      	movs	r2, #1
 8003062:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	b29a      	uxth	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	0c1b      	lsrs	r3, r3, #16
 8003070:	b29a      	uxth	r2, r3
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	371c      	adds	r7, #28
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr
	...

08003084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e26c      	b.n	8003570 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 8087 	beq.w	80031b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030a4:	4b92      	ldr	r3, [pc, #584]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d00c      	beq.n	80030ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030b0:	4b8f      	ldr	r3, [pc, #572]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d112      	bne.n	80030e2 <HAL_RCC_OscConfig+0x5e>
 80030bc:	4b8c      	ldr	r3, [pc, #560]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c8:	d10b      	bne.n	80030e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ca:	4b89      	ldr	r3, [pc, #548]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d06c      	beq.n	80031b0 <HAL_RCC_OscConfig+0x12c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d168      	bne.n	80031b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e246      	b.n	8003570 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ea:	d106      	bne.n	80030fa <HAL_RCC_OscConfig+0x76>
 80030ec:	4b80      	ldr	r3, [pc, #512]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a7f      	ldr	r2, [pc, #508]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80030f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	e02e      	b.n	8003158 <HAL_RCC_OscConfig+0xd4>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x98>
 8003102:	4b7b      	ldr	r3, [pc, #492]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a7a      	ldr	r2, [pc, #488]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b78      	ldr	r3, [pc, #480]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a77      	ldr	r2, [pc, #476]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e01d      	b.n	8003158 <HAL_RCC_OscConfig+0xd4>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0xbc>
 8003126:	4b72      	ldr	r3, [pc, #456]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a71      	ldr	r2, [pc, #452]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 800312c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	4b6f      	ldr	r3, [pc, #444]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a6e      	ldr	r2, [pc, #440]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e00b      	b.n	8003158 <HAL_RCC_OscConfig+0xd4>
 8003140:	4b6b      	ldr	r3, [pc, #428]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a6a      	ldr	r2, [pc, #424]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	4b68      	ldr	r3, [pc, #416]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a67      	ldr	r2, [pc, #412]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003156:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d013      	beq.n	8003188 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7fd fe40 	bl	8000de4 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003168:	f7fd fe3c 	bl	8000de4 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	; 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e1fa      	b.n	8003570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	4b5d      	ldr	r3, [pc, #372]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0xe4>
 8003186:	e014      	b.n	80031b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fd fe2c 	bl	8000de4 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003190:	f7fd fe28 	bl	8000de4 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	; 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e1e6      	b.n	8003570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a2:	4b53      	ldr	r3, [pc, #332]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x10c>
 80031ae:	e000      	b.n	80031b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d063      	beq.n	8003286 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031be:	4b4c      	ldr	r3, [pc, #304]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00b      	beq.n	80031e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031ca:	4b49      	ldr	r3, [pc, #292]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d11c      	bne.n	8003210 <HAL_RCC_OscConfig+0x18c>
 80031d6:	4b46      	ldr	r3, [pc, #280]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d116      	bne.n	8003210 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e2:	4b43      	ldr	r3, [pc, #268]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <HAL_RCC_OscConfig+0x176>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d001      	beq.n	80031fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e1ba      	b.n	8003570 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fa:	4b3d      	ldr	r3, [pc, #244]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4939      	ldr	r1, [pc, #228]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 800320a:	4313      	orrs	r3, r2
 800320c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320e:	e03a      	b.n	8003286 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d020      	beq.n	800325a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003218:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <HAL_RCC_OscConfig+0x270>)
 800321a:	2201      	movs	r2, #1
 800321c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321e:	f7fd fde1 	bl	8000de4 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003226:	f7fd fddd 	bl	8000de4 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e19b      	b.n	8003570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003238:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f0      	beq.n	8003226 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003244:	4b2a      	ldr	r3, [pc, #168]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4927      	ldr	r1, [pc, #156]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003254:	4313      	orrs	r3, r2
 8003256:	600b      	str	r3, [r1, #0]
 8003258:	e015      	b.n	8003286 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800325a:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <HAL_RCC_OscConfig+0x270>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fd fdc0 	bl	8000de4 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003268:	f7fd fdbc 	bl	8000de4 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e17a      	b.n	8003570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800327a:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d03a      	beq.n	8003308 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d019      	beq.n	80032ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800329a:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <HAL_RCC_OscConfig+0x274>)
 800329c:	2201      	movs	r2, #1
 800329e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a0:	f7fd fda0 	bl	8000de4 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a8:	f7fd fd9c 	bl	8000de4 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e15a      	b.n	8003570 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ba:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032c6:	2001      	movs	r0, #1
 80032c8:	f000 fac6 	bl	8003858 <RCC_Delay>
 80032cc:	e01c      	b.n	8003308 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ce:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <HAL_RCC_OscConfig+0x274>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d4:	f7fd fd86 	bl	8000de4 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032da:	e00f      	b.n	80032fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032dc:	f7fd fd82 	bl	8000de4 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d908      	bls.n	80032fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e140      	b.n	8003570 <HAL_RCC_OscConfig+0x4ec>
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000
 80032f4:	42420000 	.word	0x42420000
 80032f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032fc:	4b9e      	ldr	r3, [pc, #632]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e9      	bne.n	80032dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80a6 	beq.w	8003462 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003316:	2300      	movs	r3, #0
 8003318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331a:	4b97      	ldr	r3, [pc, #604]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10d      	bne.n	8003342 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	4b94      	ldr	r3, [pc, #592]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	4a93      	ldr	r2, [pc, #588]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003330:	61d3      	str	r3, [r2, #28]
 8003332:	4b91      	ldr	r3, [pc, #580]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333e:	2301      	movs	r3, #1
 8003340:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003342:	4b8e      	ldr	r3, [pc, #568]	; (800357c <HAL_RCC_OscConfig+0x4f8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d118      	bne.n	8003380 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800334e:	4b8b      	ldr	r3, [pc, #556]	; (800357c <HAL_RCC_OscConfig+0x4f8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a8a      	ldr	r2, [pc, #552]	; (800357c <HAL_RCC_OscConfig+0x4f8>)
 8003354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800335a:	f7fd fd43 	bl	8000de4 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003362:	f7fd fd3f 	bl	8000de4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b64      	cmp	r3, #100	; 0x64
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e0fd      	b.n	8003570 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003374:	4b81      	ldr	r3, [pc, #516]	; (800357c <HAL_RCC_OscConfig+0x4f8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d106      	bne.n	8003396 <HAL_RCC_OscConfig+0x312>
 8003388:	4b7b      	ldr	r3, [pc, #492]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4a7a      	ldr	r2, [pc, #488]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6213      	str	r3, [r2, #32]
 8003394:	e02d      	b.n	80033f2 <HAL_RCC_OscConfig+0x36e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x334>
 800339e:	4b76      	ldr	r3, [pc, #472]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	4a75      	ldr	r2, [pc, #468]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 80033a4:	f023 0301 	bic.w	r3, r3, #1
 80033a8:	6213      	str	r3, [r2, #32]
 80033aa:	4b73      	ldr	r3, [pc, #460]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	4a72      	ldr	r2, [pc, #456]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 80033b0:	f023 0304 	bic.w	r3, r3, #4
 80033b4:	6213      	str	r3, [r2, #32]
 80033b6:	e01c      	b.n	80033f2 <HAL_RCC_OscConfig+0x36e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b05      	cmp	r3, #5
 80033be:	d10c      	bne.n	80033da <HAL_RCC_OscConfig+0x356>
 80033c0:	4b6d      	ldr	r3, [pc, #436]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	4a6c      	ldr	r2, [pc, #432]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 80033c6:	f043 0304 	orr.w	r3, r3, #4
 80033ca:	6213      	str	r3, [r2, #32]
 80033cc:	4b6a      	ldr	r3, [pc, #424]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	4a69      	ldr	r2, [pc, #420]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6213      	str	r3, [r2, #32]
 80033d8:	e00b      	b.n	80033f2 <HAL_RCC_OscConfig+0x36e>
 80033da:	4b67      	ldr	r3, [pc, #412]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	4a66      	ldr	r2, [pc, #408]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	6213      	str	r3, [r2, #32]
 80033e6:	4b64      	ldr	r3, [pc, #400]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4a63      	ldr	r2, [pc, #396]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 80033ec:	f023 0304 	bic.w	r3, r3, #4
 80033f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d015      	beq.n	8003426 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fa:	f7fd fcf3 	bl	8000de4 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fd fcef 	bl	8000de4 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e0ab      	b.n	8003570 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	4b57      	ldr	r3, [pc, #348]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0ee      	beq.n	8003402 <HAL_RCC_OscConfig+0x37e>
 8003424:	e014      	b.n	8003450 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003426:	f7fd fcdd 	bl	8000de4 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342c:	e00a      	b.n	8003444 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342e:	f7fd fcd9 	bl	8000de4 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	; 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e095      	b.n	8003570 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003444:	4b4c      	ldr	r3, [pc, #304]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1ee      	bne.n	800342e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d105      	bne.n	8003462 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003456:	4b48      	ldr	r3, [pc, #288]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	4a47      	ldr	r2, [pc, #284]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 800345c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003460:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8081 	beq.w	800356e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800346c:	4b42      	ldr	r3, [pc, #264]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b08      	cmp	r3, #8
 8003476:	d061      	beq.n	800353c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d146      	bne.n	800350e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003480:	4b3f      	ldr	r3, [pc, #252]	; (8003580 <HAL_RCC_OscConfig+0x4fc>)
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003486:	f7fd fcad 	bl	8000de4 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348e:	f7fd fca9 	bl	8000de4 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e067      	b.n	8003570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a0:	4b35      	ldr	r3, [pc, #212]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f0      	bne.n	800348e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b4:	d108      	bne.n	80034c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034b6:	4b30      	ldr	r3, [pc, #192]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	492d      	ldr	r1, [pc, #180]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c8:	4b2b      	ldr	r3, [pc, #172]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a19      	ldr	r1, [r3, #32]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	430b      	orrs	r3, r1
 80034da:	4927      	ldr	r1, [pc, #156]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e0:	4b27      	ldr	r3, [pc, #156]	; (8003580 <HAL_RCC_OscConfig+0x4fc>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fd fc7d 	bl	8000de4 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ee:	f7fd fc79 	bl	8000de4 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e037      	b.n	8003570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003500:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x46a>
 800350c:	e02f      	b.n	800356e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350e:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <HAL_RCC_OscConfig+0x4fc>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fd fc66 	bl	8000de4 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351c:	f7fd fc62 	bl	8000de4 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e020      	b.n	8003570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800352e:	4b12      	ldr	r3, [pc, #72]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x498>
 800353a:	e018      	b.n	800356e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e013      	b.n	8003570 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <HAL_RCC_OscConfig+0x4f4>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	429a      	cmp	r2, r3
 800355a:	d106      	bne.n	800356a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d001      	beq.n	800356e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40021000 	.word	0x40021000
 800357c:	40007000 	.word	0x40007000
 8003580:	42420060 	.word	0x42420060

08003584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0d0      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003598:	4b6a      	ldr	r3, [pc, #424]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d910      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b67      	ldr	r3, [pc, #412]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 0207 	bic.w	r2, r3, #7
 80035ae:	4965      	ldr	r1, [pc, #404]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b63      	ldr	r3, [pc, #396]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0b8      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d020      	beq.n	8003616 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e0:	4b59      	ldr	r3, [pc, #356]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4a58      	ldr	r2, [pc, #352]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f8:	4b53      	ldr	r3, [pc, #332]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4a52      	ldr	r2, [pc, #328]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003602:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003604:	4b50      	ldr	r3, [pc, #320]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	494d      	ldr	r1, [pc, #308]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003612:	4313      	orrs	r3, r2
 8003614:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d040      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362a:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d115      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e07f      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d107      	bne.n	8003652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003642:	4b41      	ldr	r3, [pc, #260]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e073      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003652:	4b3d      	ldr	r3, [pc, #244]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e06b      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003662:	4b39      	ldr	r3, [pc, #228]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f023 0203 	bic.w	r2, r3, #3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4936      	ldr	r1, [pc, #216]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	4313      	orrs	r3, r2
 8003672:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003674:	f7fd fbb6 	bl	8000de4 <HAL_GetTick>
 8003678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367a:	e00a      	b.n	8003692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367c:	f7fd fbb2 	bl	8000de4 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	; 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e053      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003692:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 020c 	and.w	r2, r3, #12
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d1eb      	bne.n	800367c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036a4:	4b27      	ldr	r3, [pc, #156]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d210      	bcs.n	80036d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 0207 	bic.w	r2, r3, #7
 80036ba:	4922      	ldr	r1, [pc, #136]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e032      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4916      	ldr	r1, [pc, #88]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036fe:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	490e      	ldr	r1, [pc, #56]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003712:	f000 f821 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 8003716:	4601      	mov	r1, r0
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	4a0a      	ldr	r2, [pc, #40]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 8003724:	5cd3      	ldrb	r3, [r2, r3]
 8003726:	fa21 f303 	lsr.w	r3, r1, r3
 800372a:	4a09      	ldr	r2, [pc, #36]	; (8003750 <HAL_RCC_ClockConfig+0x1cc>)
 800372c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCC_ClockConfig+0x1d0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fd fb14 	bl	8000d60 <HAL_InitTick>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40022000 	.word	0x40022000
 8003748:	40021000 	.word	0x40021000
 800374c:	080082c4 	.word	0x080082c4
 8003750:	20000014 	.word	0x20000014
 8003754:	20000018 	.word	0x20000018

08003758 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003758:	b490      	push	{r4, r7}
 800375a:	b08a      	sub	sp, #40	; 0x28
 800375c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800375e:	4b2a      	ldr	r3, [pc, #168]	; (8003808 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003760:	1d3c      	adds	r4, r7, #4
 8003762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003764:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003768:	4b28      	ldr	r3, [pc, #160]	; (800380c <HAL_RCC_GetSysClockFreq+0xb4>)
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	2300      	movs	r3, #0
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003782:	4b23      	ldr	r3, [pc, #140]	; (8003810 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b04      	cmp	r3, #4
 8003790:	d002      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0x40>
 8003792:	2b08      	cmp	r3, #8
 8003794:	d003      	beq.n	800379e <HAL_RCC_GetSysClockFreq+0x46>
 8003796:	e02d      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003798:	4b1e      	ldr	r3, [pc, #120]	; (8003814 <HAL_RCC_GetSysClockFreq+0xbc>)
 800379a:	623b      	str	r3, [r7, #32]
      break;
 800379c:	e02d      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	0c9b      	lsrs	r3, r3, #18
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037aa:	4413      	add	r3, r2
 80037ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d013      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037bc:	4b14      	ldr	r3, [pc, #80]	; (8003810 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	0c5b      	lsrs	r3, r3, #17
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037ca:	4413      	add	r3, r2
 80037cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	4a0f      	ldr	r2, [pc, #60]	; (8003814 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037d6:	fb02 f203 	mul.w	r2, r2, r3
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
 80037e2:	e004      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037e8:	fb02 f303 	mul.w	r3, r2, r3
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	623b      	str	r3, [r7, #32]
      break;
 80037f2:	e002      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037f4:	4b07      	ldr	r3, [pc, #28]	; (8003814 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037f6:	623b      	str	r3, [r7, #32]
      break;
 80037f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037fa:	6a3b      	ldr	r3, [r7, #32]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3728      	adds	r7, #40	; 0x28
 8003800:	46bd      	mov	sp, r7
 8003802:	bc90      	pop	{r4, r7}
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	08008268 	.word	0x08008268
 800380c:	08008278 	.word	0x08008278
 8003810:	40021000 	.word	0x40021000
 8003814:	007a1200 	.word	0x007a1200
 8003818:	003d0900 	.word	0x003d0900

0800381c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003820:	4b02      	ldr	r3, [pc, #8]	; (800382c <HAL_RCC_GetHCLKFreq+0x10>)
 8003822:	681b      	ldr	r3, [r3, #0]
}
 8003824:	4618      	mov	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	20000014 	.word	0x20000014

08003830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003834:	f7ff fff2 	bl	800381c <HAL_RCC_GetHCLKFreq>
 8003838:	4601      	mov	r1, r0
 800383a:	4b05      	ldr	r3, [pc, #20]	; (8003850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	0a1b      	lsrs	r3, r3, #8
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	4a03      	ldr	r2, [pc, #12]	; (8003854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003846:	5cd3      	ldrb	r3, [r2, r3]
 8003848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800384c:	4618      	mov	r0, r3
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40021000 	.word	0x40021000
 8003854:	080082d4 	.word	0x080082d4

08003858 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003860:	4b0a      	ldr	r3, [pc, #40]	; (800388c <RCC_Delay+0x34>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <RCC_Delay+0x38>)
 8003866:	fba2 2303 	umull	r2, r3, r2, r3
 800386a:	0a5b      	lsrs	r3, r3, #9
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	fb02 f303 	mul.w	r3, r2, r3
 8003872:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003874:	bf00      	nop
  }
  while (Delay --);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1e5a      	subs	r2, r3, #1
 800387a:	60fa      	str	r2, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f9      	bne.n	8003874 <RCC_Delay+0x1c>
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000014 	.word	0x20000014
 8003890:	10624dd3 	.word	0x10624dd3

08003894 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d07d      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80038b0:	2300      	movs	r3, #0
 80038b2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b4:	4b4f      	ldr	r3, [pc, #316]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10d      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c0:	4b4c      	ldr	r3, [pc, #304]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	4a4b      	ldr	r2, [pc, #300]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ca:	61d3      	str	r3, [r2, #28]
 80038cc:	4b49      	ldr	r3, [pc, #292]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d8:	2301      	movs	r3, #1
 80038da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038dc:	4b46      	ldr	r3, [pc, #280]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d118      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e8:	4b43      	ldr	r3, [pc, #268]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a42      	ldr	r2, [pc, #264]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f4:	f7fd fa76 	bl	8000de4 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fa:	e008      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fc:	f7fd fa72 	bl	8000de4 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	; 0x64
 8003908:	d901      	bls.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e06d      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390e:	4b3a      	ldr	r3, [pc, #232]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800391a:	4b36      	ldr	r3, [pc, #216]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003922:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d02e      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	429a      	cmp	r2, r3
 8003936:	d027      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003938:	4b2e      	ldr	r3, [pc, #184]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003940:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003942:	4b2e      	ldr	r3, [pc, #184]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003944:	2201      	movs	r2, #1
 8003946:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003948:	4b2c      	ldr	r3, [pc, #176]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800394e:	4a29      	ldr	r2, [pc, #164]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d014      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395e:	f7fd fa41 	bl	8000de4 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	e00a      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fd fa3d 	bl	8000de4 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f241 3288 	movw	r2, #5000	; 0x1388
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e036      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0ee      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003988:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	4917      	ldr	r1, [pc, #92]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003996:	4313      	orrs	r3, r2
 8003998:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800399a:	7dfb      	ldrb	r3, [r7, #23]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d105      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a0:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039b8:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	490b      	ldr	r1, [pc, #44]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d008      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039d6:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	4904      	ldr	r1, [pc, #16]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40007000 	.word	0x40007000
 80039fc:	42420440 	.word	0x42420440

08003a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e041      	b.n	8003a96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fd f852 	bl	8000ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4610      	mov	r0, r2
 8003a40:	f000 fa1a 	bl	8003e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d122      	bne.n	8003afa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d11b      	bne.n	8003afa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f06f 0202 	mvn.w	r2, #2
 8003aca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f9ad 	bl	8003e40 <HAL_TIM_IC_CaptureCallback>
 8003ae6:	e005      	b.n	8003af4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f9a0 	bl	8003e2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f9af 	bl	8003e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d122      	bne.n	8003b4e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d11b      	bne.n	8003b4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f06f 0204 	mvn.w	r2, #4
 8003b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f983 	bl	8003e40 <HAL_TIM_IC_CaptureCallback>
 8003b3a:	e005      	b.n	8003b48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f976 	bl	8003e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f985 	bl	8003e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d122      	bne.n	8003ba2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d11b      	bne.n	8003ba2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f06f 0208 	mvn.w	r2, #8
 8003b72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2204      	movs	r2, #4
 8003b78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f959 	bl	8003e40 <HAL_TIM_IC_CaptureCallback>
 8003b8e:	e005      	b.n	8003b9c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f94c 	bl	8003e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f95b 	bl	8003e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d122      	bne.n	8003bf6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d11b      	bne.n	8003bf6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f06f 0210 	mvn.w	r2, #16
 8003bc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2208      	movs	r2, #8
 8003bcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f92f 	bl	8003e40 <HAL_TIM_IC_CaptureCallback>
 8003be2:	e005      	b.n	8003bf0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f922 	bl	8003e2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f931 	bl	8003e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d10e      	bne.n	8003c22 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d107      	bne.n	8003c22 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f06f 0201 	mvn.w	r2, #1
 8003c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f8fd 	bl	8003e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2c:	2b80      	cmp	r3, #128	; 0x80
 8003c2e:	d10e      	bne.n	8003c4e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3a:	2b80      	cmp	r3, #128	; 0x80
 8003c3c:	d107      	bne.n	8003c4e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fa74 	bl	8004136 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c58:	2b40      	cmp	r3, #64	; 0x40
 8003c5a:	d10e      	bne.n	8003c7a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d107      	bne.n	8003c7a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f8f5 	bl	8003e64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d10e      	bne.n	8003ca6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d107      	bne.n	8003ca6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f06f 0220 	mvn.w	r2, #32
 8003c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fa3f 	bl	8004124 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ca6:	bf00      	nop
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_TIM_ConfigClockSource+0x18>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e0a6      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x166>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ce4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cec:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b40      	cmp	r3, #64	; 0x40
 8003cfc:	d067      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0x120>
 8003cfe:	2b40      	cmp	r3, #64	; 0x40
 8003d00:	d80b      	bhi.n	8003d1a <HAL_TIM_ConfigClockSource+0x6c>
 8003d02:	2b10      	cmp	r3, #16
 8003d04:	d073      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x140>
 8003d06:	2b10      	cmp	r3, #16
 8003d08:	d802      	bhi.n	8003d10 <HAL_TIM_ConfigClockSource+0x62>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d06f      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d0e:	e078      	b.n	8003e02 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	d06c      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x140>
 8003d14:	2b30      	cmp	r3, #48	; 0x30
 8003d16:	d06a      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d18:	e073      	b.n	8003e02 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d1a:	2b70      	cmp	r3, #112	; 0x70
 8003d1c:	d00d      	beq.n	8003d3a <HAL_TIM_ConfigClockSource+0x8c>
 8003d1e:	2b70      	cmp	r3, #112	; 0x70
 8003d20:	d804      	bhi.n	8003d2c <HAL_TIM_ConfigClockSource+0x7e>
 8003d22:	2b50      	cmp	r3, #80	; 0x50
 8003d24:	d033      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0xe0>
 8003d26:	2b60      	cmp	r3, #96	; 0x60
 8003d28:	d041      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d2a:	e06a      	b.n	8003e02 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d30:	d066      	beq.n	8003e00 <HAL_TIM_ConfigClockSource+0x152>
 8003d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d36:	d017      	beq.n	8003d68 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d38:	e063      	b.n	8003e02 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6899      	ldr	r1, [r3, #8]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f000 f96e 	bl	800402a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	609a      	str	r2, [r3, #8]
      break;
 8003d66:	e04c      	b.n	8003e02 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	6899      	ldr	r1, [r3, #8]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f000 f957 	bl	800402a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d8a:	609a      	str	r2, [r3, #8]
      break;
 8003d8c:	e039      	b.n	8003e02 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6859      	ldr	r1, [r3, #4]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f000 f8ce 	bl	8003f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2150      	movs	r1, #80	; 0x50
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f925 	bl	8003ff6 <TIM_ITRx_SetConfig>
      break;
 8003dac:	e029      	b.n	8003e02 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6859      	ldr	r1, [r3, #4]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f000 f8ec 	bl	8003f98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2160      	movs	r1, #96	; 0x60
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 f915 	bl	8003ff6 <TIM_ITRx_SetConfig>
      break;
 8003dcc:	e019      	b.n	8003e02 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6859      	ldr	r1, [r3, #4]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f000 f8ae 	bl	8003f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2140      	movs	r1, #64	; 0x40
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f905 	bl	8003ff6 <TIM_ITRx_SetConfig>
      break;
 8003dec:	e009      	b.n	8003e02 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4619      	mov	r1, r3
 8003df8:	4610      	mov	r0, r2
 8003dfa:	f000 f8fc 	bl	8003ff6 <TIM_ITRx_SetConfig>
        break;
 8003dfe:	e000      	b.n	8003e02 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr

08003e2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr

08003e40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr

08003e52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr
	...

08003e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a29      	ldr	r2, [pc, #164]	; (8003f30 <TIM_Base_SetConfig+0xb8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00b      	beq.n	8003ea8 <TIM_Base_SetConfig+0x30>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e96:	d007      	beq.n	8003ea8 <TIM_Base_SetConfig+0x30>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a26      	ldr	r2, [pc, #152]	; (8003f34 <TIM_Base_SetConfig+0xbc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <TIM_Base_SetConfig+0x30>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a25      	ldr	r2, [pc, #148]	; (8003f38 <TIM_Base_SetConfig+0xc0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d108      	bne.n	8003eba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a1c      	ldr	r2, [pc, #112]	; (8003f30 <TIM_Base_SetConfig+0xb8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00b      	beq.n	8003eda <TIM_Base_SetConfig+0x62>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec8:	d007      	beq.n	8003eda <TIM_Base_SetConfig+0x62>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a19      	ldr	r2, [pc, #100]	; (8003f34 <TIM_Base_SetConfig+0xbc>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d003      	beq.n	8003eda <TIM_Base_SetConfig+0x62>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a18      	ldr	r2, [pc, #96]	; (8003f38 <TIM_Base_SetConfig+0xc0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d108      	bne.n	8003eec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a07      	ldr	r2, [pc, #28]	; (8003f30 <TIM_Base_SetConfig+0xb8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d103      	bne.n	8003f20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	615a      	str	r2, [r3, #20]
}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40000800 	.word	0x40000800

08003f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	f023 0201 	bic.w	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f023 030a 	bic.w	r3, r3, #10
 8003f78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	621a      	str	r2, [r3, #32]
}
 8003f8e:	bf00      	nop
 8003f90:	371c      	adds	r7, #28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	f023 0210 	bic.w	r2, r3, #16
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	031b      	lsls	r3, r3, #12
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	621a      	str	r2, [r3, #32]
}
 8003fec:	bf00      	nop
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr

08003ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b085      	sub	sp, #20
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	f043 0307 	orr.w	r3, r3, #7
 8004018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	609a      	str	r2, [r3, #8]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr

0800402a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800402a:	b480      	push	{r7}
 800402c:	b087      	sub	sp, #28
 800402e:	af00      	add	r7, sp, #0
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	607a      	str	r2, [r7, #4]
 8004036:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004044:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	021a      	lsls	r2, r3, #8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	431a      	orrs	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4313      	orrs	r3, r2
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	609a      	str	r2, [r3, #8]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800407c:	2302      	movs	r3, #2
 800407e:	e046      	b.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a16      	ldr	r2, [pc, #88]	; (8004118 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00e      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040cc:	d009      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a12      	ldr	r2, [pc, #72]	; (800411c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d004      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a10      	ldr	r2, [pc, #64]	; (8004120 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d10c      	bne.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr
 8004118:	40012c00 	.word	0x40012c00
 800411c:	40000400 	.word	0x40000400
 8004120:	40000800 	.word	0x40000800

08004124 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr

08004136 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004148:	b084      	sub	sp, #16
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	f107 0014 	add.w	r0, r7, #20
 8004156:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	b004      	add	sp, #16
 8004166:	4770      	bx	lr

08004168 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004178:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800417c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	b29a      	uxth	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800419c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80041a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	43db      	mvns	r3, r3
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	4013      	ands	r3, r2
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr

080041c8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041e0:	b084      	sub	sp, #16
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	f107 0014 	add.w	r0, r7, #20
 80041ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	b004      	add	sp, #16
 800421e:	4770      	bx	lr

08004220 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004220:	b480      	push	{r7}
 8004222:	b09b      	sub	sp, #108	; 0x6c
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	b29b      	uxth	r3, r3
 800423e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004246:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	78db      	ldrb	r3, [r3, #3]
 800424e:	2b03      	cmp	r3, #3
 8004250:	d81f      	bhi.n	8004292 <USB_ActivateEndpoint+0x72>
 8004252:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <USB_ActivateEndpoint+0x38>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	08004269 	.word	0x08004269
 800425c:	08004285 	.word	0x08004285
 8004260:	0800429b 	.word	0x0800429b
 8004264:	08004277 	.word	0x08004277
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004268:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800426c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004270:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004274:	e012      	b.n	800429c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004276:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800427a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800427e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004282:	e00b      	b.n	800429c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004284:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004288:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800428c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004290:	e004      	b.n	800429c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004298:	e000      	b.n	800429c <USB_ActivateEndpoint+0x7c>
      break;
 800429a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	441a      	add	r2, r3
 80042a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	441a      	add	r2, r3
 80042ec:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80042f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004300:	b29b      	uxth	r3, r3
 8004302:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	7b1b      	ldrb	r3, [r3, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	f040 8149 	bne.w	80045a0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	785b      	ldrb	r3, [r3, #1]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 8084 	beq.w	8004420 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004322:	b29b      	uxth	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	4413      	add	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	011a      	lsls	r2, r3, #4
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	88db      	ldrh	r3, [r3, #6]
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	b29b      	uxth	r3, r3
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	81fb      	strh	r3, [r7, #14]
 800435a:	89fb      	ldrh	r3, [r7, #14]
 800435c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01b      	beq.n	800439c <USB_ActivateEndpoint+0x17c>
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	81bb      	strh	r3, [r7, #12]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	441a      	add	r2, r3
 8004386:	89bb      	ldrh	r3, [r7, #12]
 8004388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800438c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004394:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004398:	b29b      	uxth	r3, r3
 800439a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	78db      	ldrb	r3, [r3, #3]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d020      	beq.n	80043e6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ba:	813b      	strh	r3, [r7, #8]
 80043bc:	893b      	ldrh	r3, [r7, #8]
 80043be:	f083 0320 	eor.w	r3, r3, #32
 80043c2:	813b      	strh	r3, [r7, #8]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	441a      	add	r2, r3
 80043ce:	893b      	ldrh	r3, [r7, #8]
 80043d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	8013      	strh	r3, [r2, #0]
 80043e4:	e27f      	b.n	80048e6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043fc:	817b      	strh	r3, [r7, #10]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	441a      	add	r2, r3
 8004408:	897b      	ldrh	r3, [r7, #10]
 800440a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800440e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800441a:	b29b      	uxth	r3, r3
 800441c:	8013      	strh	r3, [r2, #0]
 800441e:	e262      	b.n	80048e6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800442a:	b29b      	uxth	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004430:	4413      	add	r3, r2
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	011a      	lsls	r2, r3, #4
 800443a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443c:	4413      	add	r3, r2
 800443e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	88db      	ldrh	r3, [r3, #6]
 8004448:	085b      	lsrs	r3, r3, #1
 800444a:	b29b      	uxth	r3, r3
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004452:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800445e:	b29b      	uxth	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	4413      	add	r3, r2
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	011a      	lsls	r2, r3, #4
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	4413      	add	r3, r2
 8004472:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004476:	623b      	str	r3, [r7, #32]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d112      	bne.n	80044a6 <USB_ActivateEndpoint+0x286>
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b29b      	uxth	r3, r3
 8004486:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800448a:	b29a      	uxth	r2, r3
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800449a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449e:	b29a      	uxth	r2, r3
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	801a      	strh	r2, [r3, #0]
 80044a4:	e02f      	b.n	8004506 <USB_ActivateEndpoint+0x2e6>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b3e      	cmp	r3, #62	; 0x3e
 80044ac:	d813      	bhi.n	80044d6 <USB_ActivateEndpoint+0x2b6>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	085b      	lsrs	r3, r3, #1
 80044b4:	663b      	str	r3, [r7, #96]	; 0x60
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <USB_ActivateEndpoint+0x2a8>
 80044c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c4:	3301      	adds	r3, #1
 80044c6:	663b      	str	r3, [r7, #96]	; 0x60
 80044c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	029b      	lsls	r3, r3, #10
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	801a      	strh	r2, [r3, #0]
 80044d4:	e017      	b.n	8004506 <USB_ActivateEndpoint+0x2e6>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	663b      	str	r3, [r7, #96]	; 0x60
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d102      	bne.n	80044f0 <USB_ActivateEndpoint+0x2d0>
 80044ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044ec:	3b01      	subs	r3, #1
 80044ee:	663b      	str	r3, [r7, #96]	; 0x60
 80044f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	029b      	lsls	r3, r3, #10
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004500:	b29a      	uxth	r2, r3
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	83fb      	strh	r3, [r7, #30]
 8004514:	8bfb      	ldrh	r3, [r7, #30]
 8004516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d01b      	beq.n	8004556 <USB_ActivateEndpoint+0x336>
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004534:	83bb      	strh	r3, [r7, #28]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	441a      	add	r2, r3
 8004540:	8bbb      	ldrh	r3, [r7, #28]
 8004542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800454a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800454e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004552:	b29b      	uxth	r3, r3
 8004554:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456c:	837b      	strh	r3, [r7, #26]
 800456e:	8b7b      	ldrh	r3, [r7, #26]
 8004570:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004574:	837b      	strh	r3, [r7, #26]
 8004576:	8b7b      	ldrh	r3, [r7, #26]
 8004578:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800457c:	837b      	strh	r3, [r7, #26]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	441a      	add	r2, r3
 8004588:	8b7b      	ldrh	r3, [r7, #26]
 800458a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800458e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459a:	b29b      	uxth	r3, r3
 800459c:	8013      	strh	r3, [r2, #0]
 800459e:	e1a2      	b.n	80048e6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	441a      	add	r2, r3
 80045c4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80045c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80045d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d8:	b29b      	uxth	r3, r3
 80045da:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	65bb      	str	r3, [r7, #88]	; 0x58
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045ec:	4413      	add	r3, r2
 80045ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	011a      	lsls	r2, r3, #4
 80045f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	891b      	ldrh	r3, [r3, #8]
 8004604:	085b      	lsrs	r3, r3, #1
 8004606:	b29b      	uxth	r3, r3
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800460e:	801a      	strh	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	653b      	str	r3, [r7, #80]	; 0x50
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800461a:	b29b      	uxth	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004620:	4413      	add	r3, r2
 8004622:	653b      	str	r3, [r7, #80]	; 0x50
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	011a      	lsls	r2, r3, #4
 800462a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800462c:	4413      	add	r3, r2
 800462e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	895b      	ldrh	r3, [r3, #10]
 8004638:	085b      	lsrs	r3, r3, #1
 800463a:	b29b      	uxth	r3, r3
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004642:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	785b      	ldrb	r3, [r3, #1]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f040 8091 	bne.w	8004770 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800465c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800465e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d01b      	beq.n	800469e <USB_ActivateEndpoint+0x47e>
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	441a      	add	r2, r3
 8004688:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800468a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800468e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004692:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469a:	b29b      	uxth	r3, r3
 800469c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	873b      	strh	r3, [r7, #56]	; 0x38
 80046ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80046ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d01b      	beq.n	80046ee <USB_ActivateEndpoint+0x4ce>
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046cc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	441a      	add	r2, r3
 80046d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80046da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004704:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004706:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004708:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800470c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800470e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004710:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004714:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	441a      	add	r2, r3
 8004720:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004732:	b29b      	uxth	r3, r3
 8004734:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	b29b      	uxth	r3, r3
 8004744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800474c:	867b      	strh	r3, [r7, #50]	; 0x32
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	441a      	add	r2, r3
 8004758:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800475a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800475e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476a:	b29b      	uxth	r3, r3
 800476c:	8013      	strh	r3, [r2, #0]
 800476e:	e0ba      	b.n	80048e6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004780:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01d      	beq.n	80047c8 <USB_ActivateEndpoint+0x5a8>
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	b29b      	uxth	r3, r3
 800479a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800479e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	441a      	add	r2, r3
 80047b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80047b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80047d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80047dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01d      	beq.n	8004820 <USB_ActivateEndpoint+0x600>
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	441a      	add	r2, r3
 8004808:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800480c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004818:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800481c:	b29b      	uxth	r3, r3
 800481e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	78db      	ldrb	r3, [r3, #3]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d024      	beq.n	8004872 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	b29b      	uxth	r3, r3
 8004836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800483e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004842:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004846:	f083 0320 	eor.w	r3, r3, #32
 800484a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800485c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486c:	b29b      	uxth	r3, r3
 800486e:	8013      	strh	r3, [r2, #0]
 8004870:	e01d      	b.n	80048ae <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004888:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	441a      	add	r2, r3
 8004896:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800489a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	441a      	add	r2, r3
 80048d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80048d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80048e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	376c      	adds	r7, #108	; 0x6c
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr

080048f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b08d      	sub	sp, #52	; 0x34
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	7b1b      	ldrb	r3, [r3, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	f040 808e 	bne.w	8004a24 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	785b      	ldrb	r3, [r3, #1]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d044      	beq.n	800499a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	81bb      	strh	r3, [r7, #12]
 800491e:	89bb      	ldrh	r3, [r7, #12]
 8004920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01b      	beq.n	8004960 <USB_DeactivateEndpoint+0x6c>
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	b29b      	uxth	r3, r3
 8004936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	817b      	strh	r3, [r7, #10]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	441a      	add	r2, r3
 800494a:	897b      	ldrh	r3, [r7, #10]
 800494c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004958:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800495c:	b29b      	uxth	r3, r3
 800495e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004976:	813b      	strh	r3, [r7, #8]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	441a      	add	r2, r3
 8004982:	893b      	ldrh	r3, [r7, #8]
 8004984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004994:	b29b      	uxth	r3, r3
 8004996:	8013      	strh	r3, [r2, #0]
 8004998:	e192      	b.n	8004cc0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	827b      	strh	r3, [r7, #18]
 80049a8:	8a7b      	ldrh	r3, [r7, #18]
 80049aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01b      	beq.n	80049ea <USB_DeactivateEndpoint+0xf6>
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c8:	823b      	strh	r3, [r7, #16]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	441a      	add	r2, r3
 80049d4:	8a3b      	ldrh	r3, [r7, #16]
 80049d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a00:	81fb      	strh	r3, [r7, #14]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	441a      	add	r2, r3
 8004a0c:	89fb      	ldrh	r3, [r7, #14]
 8004a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	8013      	strh	r3, [r2, #0]
 8004a22:	e14d      	b.n	8004cc0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	785b      	ldrb	r3, [r3, #1]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f040 80a5 	bne.w	8004b78 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	843b      	strh	r3, [r7, #32]
 8004a3c:	8c3b      	ldrh	r3, [r7, #32]
 8004a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d01b      	beq.n	8004a7e <USB_DeactivateEndpoint+0x18a>
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5c:	83fb      	strh	r3, [r7, #30]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	441a      	add	r2, r3
 8004a68:	8bfb      	ldrh	r3, [r7, #30]
 8004a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	83bb      	strh	r3, [r7, #28]
 8004a8c:	8bbb      	ldrh	r3, [r7, #28]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01b      	beq.n	8004ace <USB_DeactivateEndpoint+0x1da>
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aac:	837b      	strh	r3, [r7, #26]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	441a      	add	r2, r3
 8004ab8:	8b7b      	ldrh	r3, [r7, #26]
 8004aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae4:	833b      	strh	r3, [r7, #24]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	441a      	add	r2, r3
 8004af0:	8b3b      	ldrh	r3, [r7, #24]
 8004af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1c:	82fb      	strh	r3, [r7, #22]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	441a      	add	r2, r3
 8004b28:	8afb      	ldrh	r3, [r7, #22]
 8004b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b54:	82bb      	strh	r3, [r7, #20]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	441a      	add	r2, r3
 8004b60:	8abb      	ldrh	r3, [r7, #20]
 8004b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	8013      	strh	r3, [r2, #0]
 8004b76:	e0a3      	b.n	8004cc0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01b      	beq.n	8004bc8 <USB_DeactivateEndpoint+0x2d4>
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004bd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <USB_DeactivateEndpoint+0x324>
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	853b      	strh	r3, [r7, #40]	; 0x28
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	441a      	add	r2, r3
 8004c3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c66:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	441a      	add	r2, r3
 8004c72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	441a      	add	r2, r3
 8004caa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3734      	adds	r7, #52	; 0x34
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr

08004ccc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b0c4      	sub	sp, #272	; 0x110
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	1d3b      	adds	r3, r7, #4
 8004cd4:	6018      	str	r0, [r3, #0]
 8004cd6:	463b      	mov	r3, r7
 8004cd8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cda:	463b      	mov	r3, r7
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	785b      	ldrb	r3, [r3, #1]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	f040 8557 	bne.w	8005794 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004ce6:	463b      	mov	r3, r7
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	699a      	ldr	r2, [r3, #24]
 8004cec:	463b      	mov	r3, r7
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d905      	bls.n	8004d02 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004cf6:	463b      	mov	r3, r7
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004d00:	e004      	b.n	8004d0c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004d02:	463b      	mov	r3, r7
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004d0c:	463b      	mov	r3, r7
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	7b1b      	ldrb	r3, [r3, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d12c      	bne.n	8004d70 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d16:	463b      	mov	r3, r7
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6959      	ldr	r1, [r3, #20]
 8004d1c:	463b      	mov	r3, r7
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	88da      	ldrh	r2, [r3, #6]
 8004d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	1d38      	adds	r0, r7, #4
 8004d2a:	6800      	ldr	r0, [r0, #0]
 8004d2c:	f001 fa2c 	bl	8006188 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d30:	1d3b      	adds	r3, r7, #4
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	1d3b      	adds	r3, r7, #4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	4413      	add	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	463b      	mov	r3, r7
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	011a      	lsls	r2, r3, #4
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	4413      	add	r3, r2
 8004d54:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004d58:	f107 0310 	add.w	r3, r7, #16
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	f107 0310 	add.w	r3, r7, #16
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	801a      	strh	r2, [r3, #0]
 8004d6c:	f000 bcdd 	b.w	800572a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004d70:	463b      	mov	r3, r7
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	78db      	ldrb	r3, [r3, #3]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	f040 8347 	bne.w	800540a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d7c:	463b      	mov	r3, r7
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6a1a      	ldr	r2, [r3, #32]
 8004d82:	463b      	mov	r3, r7
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	f240 82eb 	bls.w	8005364 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004d8e:	1d3b      	adds	r3, r7, #4
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	463b      	mov	r3, r7
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004dac:	1d3b      	adds	r3, r7, #4
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	463b      	mov	r3, r7
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	441a      	add	r2, r3
 8004dba:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004dd2:	463b      	mov	r3, r7
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6a1a      	ldr	r2, [r3, #32]
 8004dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ddc:	1ad2      	subs	r2, r2, r3
 8004dde:	463b      	mov	r3, r7
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004de4:	1d3b      	adds	r3, r7, #4
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	463b      	mov	r3, r7
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 8159 	beq.w	80050b2 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e00:	1d3b      	adds	r3, r7, #4
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	637b      	str	r3, [r7, #52]	; 0x34
 8004e06:	463b      	mov	r3, r7
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	785b      	ldrb	r3, [r3, #1]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d164      	bne.n	8004eda <USB_EPStartXfer+0x20e>
 8004e10:	1d3b      	adds	r3, r7, #4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e16:	1d3b      	adds	r3, r7, #4
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e24:	4413      	add	r3, r2
 8004e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e28:	463b      	mov	r3, r7
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	011a      	lsls	r2, r3, #4
 8004e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e32:	4413      	add	r3, r2
 8004e34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d112      	bne.n	8004e68 <USB_EPStartXfer+0x19c>
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	801a      	strh	r2, [r3, #0]
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	801a      	strh	r2, [r3, #0]
 8004e66:	e054      	b.n	8004f12 <USB_EPStartXfer+0x246>
 8004e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e6c:	2b3e      	cmp	r3, #62	; 0x3e
 8004e6e:	d817      	bhi.n	8004ea0 <USB_EPStartXfer+0x1d4>
 8004e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e74:	085b      	lsrs	r3, r3, #1
 8004e76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d004      	beq.n	8004e90 <USB_EPStartXfer+0x1c4>
 8004e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	029b      	lsls	r3, r3, #10
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	801a      	strh	r2, [r3, #0]
 8004e9e:	e038      	b.n	8004f12 <USB_EPStartXfer+0x246>
 8004ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eae:	f003 031f 	and.w	r3, r3, #31
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d104      	bne.n	8004ec0 <USB_EPStartXfer+0x1f4>
 8004eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	029b      	lsls	r3, r3, #10
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed6:	801a      	strh	r2, [r3, #0]
 8004ed8:	e01b      	b.n	8004f12 <USB_EPStartXfer+0x246>
 8004eda:	463b      	mov	r3, r7
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	785b      	ldrb	r3, [r3, #1]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d116      	bne.n	8004f12 <USB_EPStartXfer+0x246>
 8004ee4:	1d3b      	adds	r3, r7, #4
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	461a      	mov	r2, r3
 8004ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef2:	4413      	add	r3, r2
 8004ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef6:	463b      	mov	r3, r7
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	011a      	lsls	r2, r3, #4
 8004efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f00:	4413      	add	r3, r2
 8004f02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f06:	633b      	str	r3, [r7, #48]	; 0x30
 8004f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f12:	463b      	mov	r3, r7
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	895b      	ldrh	r3, [r3, #10]
 8004f18:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f1c:	463b      	mov	r3, r7
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6959      	ldr	r1, [r3, #20]
 8004f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004f2c:	1d38      	adds	r0, r7, #4
 8004f2e:	6800      	ldr	r0, [r0, #0]
 8004f30:	f001 f92a 	bl	8006188 <USB_WritePMA>
            ep->xfer_buff += len;
 8004f34:	463b      	mov	r3, r7
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f3e:	441a      	add	r2, r3
 8004f40:	463b      	mov	r3, r7
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f46:	463b      	mov	r3, r7
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6a1a      	ldr	r2, [r3, #32]
 8004f4c:	463b      	mov	r3, r7
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d909      	bls.n	8004f6a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004f56:	463b      	mov	r3, r7
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6a1a      	ldr	r2, [r3, #32]
 8004f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f60:	1ad2      	subs	r2, r2, r3
 8004f62:	463b      	mov	r3, r7
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	621a      	str	r2, [r3, #32]
 8004f68:	e008      	b.n	8004f7c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f6a:	463b      	mov	r3, r7
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004f74:	463b      	mov	r3, r7
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f7c:	463b      	mov	r3, r7
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	785b      	ldrb	r3, [r3, #1]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d164      	bne.n	8005050 <USB_EPStartXfer+0x384>
 8004f86:	1d3b      	adds	r3, r7, #4
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	61fb      	str	r3, [r7, #28]
 8004f8c:	1d3b      	adds	r3, r7, #4
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	463b      	mov	r3, r7
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	011a      	lsls	r2, r3, #4
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fae:	61bb      	str	r3, [r7, #24]
 8004fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d112      	bne.n	8004fde <USB_EPStartXfer+0x312>
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	801a      	strh	r2, [r3, #0]
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	801a      	strh	r2, [r3, #0]
 8004fdc:	e057      	b.n	800508e <USB_EPStartXfer+0x3c2>
 8004fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fe2:	2b3e      	cmp	r3, #62	; 0x3e
 8004fe4:	d817      	bhi.n	8005016 <USB_EPStartXfer+0x34a>
 8004fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fea:	085b      	lsrs	r3, r3, #1
 8004fec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d004      	beq.n	8005006 <USB_EPStartXfer+0x33a>
 8004ffc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005000:	3301      	adds	r3, #1
 8005002:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005006:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800500a:	b29b      	uxth	r3, r3
 800500c:	029b      	lsls	r3, r3, #10
 800500e:	b29a      	uxth	r2, r3
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	801a      	strh	r2, [r3, #0]
 8005014:	e03b      	b.n	800508e <USB_EPStartXfer+0x3c2>
 8005016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005024:	f003 031f 	and.w	r3, r3, #31
 8005028:	2b00      	cmp	r3, #0
 800502a:	d104      	bne.n	8005036 <USB_EPStartXfer+0x36a>
 800502c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005030:	3b01      	subs	r3, #1
 8005032:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005036:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800503a:	b29b      	uxth	r3, r3
 800503c:	029b      	lsls	r3, r3, #10
 800503e:	b29b      	uxth	r3, r3
 8005040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005048:	b29a      	uxth	r2, r3
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	801a      	strh	r2, [r3, #0]
 800504e:	e01e      	b.n	800508e <USB_EPStartXfer+0x3c2>
 8005050:	463b      	mov	r3, r7
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	785b      	ldrb	r3, [r3, #1]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d119      	bne.n	800508e <USB_EPStartXfer+0x3c2>
 800505a:	1d3b      	adds	r3, r7, #4
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	627b      	str	r3, [r7, #36]	; 0x24
 8005060:	1d3b      	adds	r3, r7, #4
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005068:	b29b      	uxth	r3, r3
 800506a:	461a      	mov	r2, r3
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	4413      	add	r3, r2
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
 8005072:	463b      	mov	r3, r7
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	011a      	lsls	r2, r3, #4
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	4413      	add	r3, r2
 800507e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005082:	623b      	str	r3, [r7, #32]
 8005084:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005088:	b29a      	uxth	r2, r3
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800508e:	463b      	mov	r3, r7
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	891b      	ldrh	r3, [r3, #8]
 8005094:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005098:	463b      	mov	r3, r7
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6959      	ldr	r1, [r3, #20]
 800509e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80050a8:	1d38      	adds	r0, r7, #4
 80050aa:	6800      	ldr	r0, [r0, #0]
 80050ac:	f001 f86c 	bl	8006188 <USB_WritePMA>
 80050b0:	e33b      	b.n	800572a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050b2:	463b      	mov	r3, r7
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	785b      	ldrb	r3, [r3, #1]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d164      	bne.n	8005186 <USB_EPStartXfer+0x4ba>
 80050bc:	1d3b      	adds	r3, r7, #4
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c2:	1d3b      	adds	r3, r7, #4
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d0:	4413      	add	r3, r2
 80050d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d4:	463b      	mov	r3, r7
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	011a      	lsls	r2, r3, #4
 80050dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050de:	4413      	add	r3, r2
 80050e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80050e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d112      	bne.n	8005114 <USB_EPStartXfer+0x448>
 80050ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fc:	801a      	strh	r2, [r3, #0]
 80050fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800510c:	b29a      	uxth	r2, r3
 800510e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005110:	801a      	strh	r2, [r3, #0]
 8005112:	e057      	b.n	80051c4 <USB_EPStartXfer+0x4f8>
 8005114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005118:	2b3e      	cmp	r3, #62	; 0x3e
 800511a:	d817      	bhi.n	800514c <USB_EPStartXfer+0x480>
 800511c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005120:	085b      	lsrs	r3, r3, #1
 8005122:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d004      	beq.n	800513c <USB_EPStartXfer+0x470>
 8005132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005136:	3301      	adds	r3, #1
 8005138:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800513c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005140:	b29b      	uxth	r3, r3
 8005142:	029b      	lsls	r3, r3, #10
 8005144:	b29a      	uxth	r2, r3
 8005146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005148:	801a      	strh	r2, [r3, #0]
 800514a:	e03b      	b.n	80051c4 <USB_EPStartXfer+0x4f8>
 800514c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800515a:	f003 031f 	and.w	r3, r3, #31
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <USB_EPStartXfer+0x4a0>
 8005162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005166:	3b01      	subs	r3, #1
 8005168:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800516c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005170:	b29b      	uxth	r3, r3
 8005172:	029b      	lsls	r3, r3, #10
 8005174:	b29b      	uxth	r3, r3
 8005176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800517a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800517e:	b29a      	uxth	r2, r3
 8005180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005182:	801a      	strh	r2, [r3, #0]
 8005184:	e01e      	b.n	80051c4 <USB_EPStartXfer+0x4f8>
 8005186:	463b      	mov	r3, r7
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	785b      	ldrb	r3, [r3, #1]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d119      	bne.n	80051c4 <USB_EPStartXfer+0x4f8>
 8005190:	1d3b      	adds	r3, r7, #4
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	657b      	str	r3, [r7, #84]	; 0x54
 8005196:	1d3b      	adds	r3, r7, #4
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519e:	b29b      	uxth	r3, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051a4:	4413      	add	r3, r2
 80051a6:	657b      	str	r3, [r7, #84]	; 0x54
 80051a8:	463b      	mov	r3, r7
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	011a      	lsls	r2, r3, #4
 80051b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051b2:	4413      	add	r3, r2
 80051b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051b8:	653b      	str	r3, [r7, #80]	; 0x50
 80051ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051be:	b29a      	uxth	r2, r3
 80051c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80051c4:	463b      	mov	r3, r7
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	891b      	ldrh	r3, [r3, #8]
 80051ca:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051ce:	463b      	mov	r3, r7
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6959      	ldr	r1, [r3, #20]
 80051d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80051de:	1d38      	adds	r0, r7, #4
 80051e0:	6800      	ldr	r0, [r0, #0]
 80051e2:	f000 ffd1 	bl	8006188 <USB_WritePMA>
            ep->xfer_buff += len;
 80051e6:	463b      	mov	r3, r7
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695a      	ldr	r2, [r3, #20]
 80051ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051f0:	441a      	add	r2, r3
 80051f2:	463b      	mov	r3, r7
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80051f8:	463b      	mov	r3, r7
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6a1a      	ldr	r2, [r3, #32]
 80051fe:	463b      	mov	r3, r7
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	429a      	cmp	r2, r3
 8005206:	d909      	bls.n	800521c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005208:	463b      	mov	r3, r7
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6a1a      	ldr	r2, [r3, #32]
 800520e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005212:	1ad2      	subs	r2, r2, r3
 8005214:	463b      	mov	r3, r7
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	621a      	str	r2, [r3, #32]
 800521a:	e008      	b.n	800522e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800521c:	463b      	mov	r3, r7
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005226:	463b      	mov	r3, r7
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2200      	movs	r2, #0
 800522c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800522e:	1d3b      	adds	r3, r7, #4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	647b      	str	r3, [r7, #68]	; 0x44
 8005234:	463b      	mov	r3, r7
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	785b      	ldrb	r3, [r3, #1]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d164      	bne.n	8005308 <USB_EPStartXfer+0x63c>
 800523e:	1d3b      	adds	r3, r7, #4
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005244:	1d3b      	adds	r3, r7, #4
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800524c:	b29b      	uxth	r3, r3
 800524e:	461a      	mov	r2, r3
 8005250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005252:	4413      	add	r3, r2
 8005254:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005256:	463b      	mov	r3, r7
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	011a      	lsls	r2, r3, #4
 800525e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005260:	4413      	add	r3, r2
 8005262:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005266:	63bb      	str	r3, [r7, #56]	; 0x38
 8005268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d112      	bne.n	8005296 <USB_EPStartXfer+0x5ca>
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800527a:	b29a      	uxth	r2, r3
 800527c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527e:	801a      	strh	r2, [r3, #0]
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800528a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800528e:	b29a      	uxth	r2, r3
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	801a      	strh	r2, [r3, #0]
 8005294:	e054      	b.n	8005340 <USB_EPStartXfer+0x674>
 8005296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800529a:	2b3e      	cmp	r3, #62	; 0x3e
 800529c:	d817      	bhi.n	80052ce <USB_EPStartXfer+0x602>
 800529e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a2:	085b      	lsrs	r3, r3, #1
 80052a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d004      	beq.n	80052be <USB_EPStartXfer+0x5f2>
 80052b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052b8:	3301      	adds	r3, #1
 80052ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	029b      	lsls	r3, r3, #10
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ca:	801a      	strh	r2, [r3, #0]
 80052cc:	e038      	b.n	8005340 <USB_EPStartXfer+0x674>
 80052ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d2:	095b      	lsrs	r3, r3, #5
 80052d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052dc:	f003 031f 	and.w	r3, r3, #31
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <USB_EPStartXfer+0x622>
 80052e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052e8:	3b01      	subs	r3, #1
 80052ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	029b      	lsls	r3, r3, #10
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005300:	b29a      	uxth	r2, r3
 8005302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005304:	801a      	strh	r2, [r3, #0]
 8005306:	e01b      	b.n	8005340 <USB_EPStartXfer+0x674>
 8005308:	463b      	mov	r3, r7
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d116      	bne.n	8005340 <USB_EPStartXfer+0x674>
 8005312:	1d3b      	adds	r3, r7, #4
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800531a:	b29b      	uxth	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005320:	4413      	add	r3, r2
 8005322:	647b      	str	r3, [r7, #68]	; 0x44
 8005324:	463b      	mov	r3, r7
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	011a      	lsls	r2, r3, #4
 800532c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800532e:	4413      	add	r3, r2
 8005330:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005334:	643b      	str	r3, [r7, #64]	; 0x40
 8005336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800533a:	b29a      	uxth	r2, r3
 800533c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800533e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005340:	463b      	mov	r3, r7
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	895b      	ldrh	r3, [r3, #10]
 8005346:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800534a:	463b      	mov	r3, r7
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6959      	ldr	r1, [r3, #20]
 8005350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005354:	b29b      	uxth	r3, r3
 8005356:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800535a:	1d38      	adds	r0, r7, #4
 800535c:	6800      	ldr	r0, [r0, #0]
 800535e:	f000 ff13 	bl	8006188 <USB_WritePMA>
 8005362:	e1e2      	b.n	800572a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005364:	463b      	mov	r3, r7
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800536e:	1d3b      	adds	r3, r7, #4
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	463b      	mov	r3, r7
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005388:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800538c:	1d3b      	adds	r3, r7, #4
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	463b      	mov	r3, r7
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	441a      	add	r2, r3
 800539a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800539e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80053b2:	1d3b      	adds	r3, r7, #4
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	663b      	str	r3, [r7, #96]	; 0x60
 80053b8:	1d3b      	adds	r3, r7, #4
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	461a      	mov	r2, r3
 80053c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053c6:	4413      	add	r3, r2
 80053c8:	663b      	str	r3, [r7, #96]	; 0x60
 80053ca:	463b      	mov	r3, r7
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	011a      	lsls	r2, r3, #4
 80053d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053d4:	4413      	add	r3, r2
 80053d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053e6:	463b      	mov	r3, r7
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	891b      	ldrh	r3, [r3, #8]
 80053ec:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053f0:	463b      	mov	r3, r7
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6959      	ldr	r1, [r3, #20]
 80053f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005400:	1d38      	adds	r0, r7, #4
 8005402:	6800      	ldr	r0, [r0, #0]
 8005404:	f000 fec0 	bl	8006188 <USB_WritePMA>
 8005408:	e18f      	b.n	800572a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800540a:	1d3b      	adds	r3, r7, #4
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	463b      	mov	r3, r7
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b29b      	uxth	r3, r3
 800541c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 808f 	beq.w	8005544 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005426:	1d3b      	adds	r3, r7, #4
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	67bb      	str	r3, [r7, #120]	; 0x78
 800542c:	463b      	mov	r3, r7
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	785b      	ldrb	r3, [r3, #1]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d164      	bne.n	8005500 <USB_EPStartXfer+0x834>
 8005436:	1d3b      	adds	r3, r7, #4
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	673b      	str	r3, [r7, #112]	; 0x70
 800543c:	1d3b      	adds	r3, r7, #4
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005444:	b29b      	uxth	r3, r3
 8005446:	461a      	mov	r2, r3
 8005448:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800544a:	4413      	add	r3, r2
 800544c:	673b      	str	r3, [r7, #112]	; 0x70
 800544e:	463b      	mov	r3, r7
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	011a      	lsls	r2, r3, #4
 8005456:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005458:	4413      	add	r3, r2
 800545a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800545e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d112      	bne.n	800548e <USB_EPStartXfer+0x7c2>
 8005468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005472:	b29a      	uxth	r2, r3
 8005474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005476:	801a      	strh	r2, [r3, #0]
 8005478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	b29b      	uxth	r3, r3
 800547e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005486:	b29a      	uxth	r2, r3
 8005488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548a:	801a      	strh	r2, [r3, #0]
 800548c:	e054      	b.n	8005538 <USB_EPStartXfer+0x86c>
 800548e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005492:	2b3e      	cmp	r3, #62	; 0x3e
 8005494:	d817      	bhi.n	80054c6 <USB_EPStartXfer+0x7fa>
 8005496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800549a:	085b      	lsrs	r3, r3, #1
 800549c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d004      	beq.n	80054b6 <USB_EPStartXfer+0x7ea>
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b0:	3301      	adds	r3, #1
 80054b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	029b      	lsls	r3, r3, #10
 80054be:	b29a      	uxth	r2, r3
 80054c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	e038      	b.n	8005538 <USB_EPStartXfer+0x86c>
 80054c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ca:	095b      	lsrs	r3, r3, #5
 80054cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054d4:	f003 031f 	and.w	r3, r3, #31
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d104      	bne.n	80054e6 <USB_EPStartXfer+0x81a>
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e0:	3b01      	subs	r3, #1
 80054e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	029b      	lsls	r3, r3, #10
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054fc:	801a      	strh	r2, [r3, #0]
 80054fe:	e01b      	b.n	8005538 <USB_EPStartXfer+0x86c>
 8005500:	463b      	mov	r3, r7
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	785b      	ldrb	r3, [r3, #1]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d116      	bne.n	8005538 <USB_EPStartXfer+0x86c>
 800550a:	1d3b      	adds	r3, r7, #4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005512:	b29b      	uxth	r3, r3
 8005514:	461a      	mov	r2, r3
 8005516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005518:	4413      	add	r3, r2
 800551a:	67bb      	str	r3, [r7, #120]	; 0x78
 800551c:	463b      	mov	r3, r7
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	011a      	lsls	r2, r3, #4
 8005524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005526:	4413      	add	r3, r2
 8005528:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800552c:	677b      	str	r3, [r7, #116]	; 0x74
 800552e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005532:	b29a      	uxth	r2, r3
 8005534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005536:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005538:	463b      	mov	r3, r7
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	895b      	ldrh	r3, [r3, #10]
 800553e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005542:	e097      	b.n	8005674 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005544:	463b      	mov	r3, r7
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	785b      	ldrb	r3, [r3, #1]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d168      	bne.n	8005620 <USB_EPStartXfer+0x954>
 800554e:	1d3b      	adds	r3, r7, #4
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005556:	1d3b      	adds	r3, r7, #4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800555e:	b29b      	uxth	r3, r3
 8005560:	461a      	mov	r2, r3
 8005562:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005566:	4413      	add	r3, r2
 8005568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800556c:	463b      	mov	r3, r7
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	011a      	lsls	r2, r3, #4
 8005574:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005578:	4413      	add	r3, r2
 800557a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800557e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d112      	bne.n	80055ae <USB_EPStartXfer+0x8e2>
 8005588:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005592:	b29a      	uxth	r2, r3
 8005594:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005596:	801a      	strh	r2, [r3, #0]
 8005598:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	e05d      	b.n	800566a <USB_EPStartXfer+0x99e>
 80055ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055b2:	2b3e      	cmp	r3, #62	; 0x3e
 80055b4:	d817      	bhi.n	80055e6 <USB_EPStartXfer+0x91a>
 80055b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ba:	085b      	lsrs	r3, r3, #1
 80055bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d004      	beq.n	80055d6 <USB_EPStartXfer+0x90a>
 80055cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055d0:	3301      	adds	r3, #1
 80055d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055da:	b29b      	uxth	r3, r3
 80055dc:	029b      	lsls	r3, r3, #10
 80055de:	b29a      	uxth	r2, r3
 80055e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055e2:	801a      	strh	r2, [r3, #0]
 80055e4:	e041      	b.n	800566a <USB_EPStartXfer+0x99e>
 80055e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d104      	bne.n	8005606 <USB_EPStartXfer+0x93a>
 80055fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005600:	3b01      	subs	r3, #1
 8005602:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005606:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800560a:	b29b      	uxth	r3, r3
 800560c:	029b      	lsls	r3, r3, #10
 800560e:	b29b      	uxth	r3, r3
 8005610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005618:	b29a      	uxth	r2, r3
 800561a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800561c:	801a      	strh	r2, [r3, #0]
 800561e:	e024      	b.n	800566a <USB_EPStartXfer+0x99e>
 8005620:	463b      	mov	r3, r7
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	785b      	ldrb	r3, [r3, #1]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d11f      	bne.n	800566a <USB_EPStartXfer+0x99e>
 800562a:	1d3b      	adds	r3, r7, #4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005632:	1d3b      	adds	r3, r7, #4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800563a:	b29b      	uxth	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005642:	4413      	add	r3, r2
 8005644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005648:	463b      	mov	r3, r7
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	011a      	lsls	r2, r3, #4
 8005650:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005654:	4413      	add	r3, r2
 8005656:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800565a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800565e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005662:	b29a      	uxth	r2, r3
 8005664:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005668:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800566a:	463b      	mov	r3, r7
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	891b      	ldrh	r3, [r3, #8]
 8005670:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005674:	463b      	mov	r3, r7
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6959      	ldr	r1, [r3, #20]
 800567a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567e:	b29b      	uxth	r3, r3
 8005680:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005684:	1d38      	adds	r0, r7, #4
 8005686:	6800      	ldr	r0, [r0, #0]
 8005688:	f000 fd7e 	bl	8006188 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800568c:	463b      	mov	r3, r7
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	785b      	ldrb	r3, [r3, #1]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d122      	bne.n	80056dc <USB_EPStartXfer+0xa10>
 8005696:	1d3b      	adds	r3, r7, #4
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	463b      	mov	r3, r7
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80056b4:	1d3b      	adds	r3, r7, #4
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	463b      	mov	r3, r7
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	441a      	add	r2, r3
 80056c2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80056c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	8013      	strh	r3, [r2, #0]
 80056da:	e026      	b.n	800572a <USB_EPStartXfer+0xa5e>
 80056dc:	463b      	mov	r3, r7
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	785b      	ldrb	r3, [r3, #1]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d121      	bne.n	800572a <USB_EPStartXfer+0xa5e>
 80056e6:	1d3b      	adds	r3, r7, #4
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	463b      	mov	r3, r7
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005700:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005704:	1d3b      	adds	r3, r7, #4
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	463b      	mov	r3, r7
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	441a      	add	r2, r3
 8005712:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800571a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800571e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005726:	b29b      	uxth	r3, r3
 8005728:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800572a:	1d3b      	adds	r3, r7, #4
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	463b      	mov	r3, r7
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	b29b      	uxth	r3, r3
 800573c:	f107 020e 	add.w	r2, r7, #14
 8005740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005748:	8013      	strh	r3, [r2, #0]
 800574a:	f107 030e 	add.w	r3, r7, #14
 800574e:	f107 020e 	add.w	r2, r7, #14
 8005752:	8812      	ldrh	r2, [r2, #0]
 8005754:	f082 0210 	eor.w	r2, r2, #16
 8005758:	801a      	strh	r2, [r3, #0]
 800575a:	f107 030e 	add.w	r3, r7, #14
 800575e:	f107 020e 	add.w	r2, r7, #14
 8005762:	8812      	ldrh	r2, [r2, #0]
 8005764:	f082 0220 	eor.w	r2, r2, #32
 8005768:	801a      	strh	r2, [r3, #0]
 800576a:	1d3b      	adds	r3, r7, #4
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	463b      	mov	r3, r7
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	441a      	add	r2, r3
 8005778:	f107 030e 	add.w	r3, r7, #14
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800578a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578e:	b29b      	uxth	r3, r3
 8005790:	8013      	strh	r3, [r2, #0]
 8005792:	e3b5      	b.n	8005f00 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005794:	463b      	mov	r3, r7
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	7b1b      	ldrb	r3, [r3, #12]
 800579a:	2b00      	cmp	r3, #0
 800579c:	f040 8090 	bne.w	80058c0 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80057a0:	463b      	mov	r3, r7
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699a      	ldr	r2, [r3, #24]
 80057a6:	463b      	mov	r3, r7
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d90e      	bls.n	80057ce <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80057b0:	463b      	mov	r3, r7
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80057ba:	463b      	mov	r3, r7
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699a      	ldr	r2, [r3, #24]
 80057c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057c4:	1ad2      	subs	r2, r2, r3
 80057c6:	463b      	mov	r3, r7
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	619a      	str	r2, [r3, #24]
 80057cc:	e008      	b.n	80057e0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80057ce:	463b      	mov	r3, r7
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80057d8:	463b      	mov	r3, r7
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2200      	movs	r2, #0
 80057de:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80057e0:	1d3b      	adds	r3, r7, #4
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057e8:	1d3b      	adds	r3, r7, #4
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	461a      	mov	r2, r3
 80057f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80057f8:	4413      	add	r3, r2
 80057fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057fe:	463b      	mov	r3, r7
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	011a      	lsls	r2, r3, #4
 8005806:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800580a:	4413      	add	r3, r2
 800580c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005810:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005818:	2b00      	cmp	r3, #0
 800581a:	d116      	bne.n	800584a <USB_EPStartXfer+0xb7e>
 800581c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	b29b      	uxth	r3, r3
 8005824:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005828:	b29a      	uxth	r2, r3
 800582a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800582e:	801a      	strh	r2, [r3, #0]
 8005830:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	b29b      	uxth	r3, r3
 8005838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800583c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005840:	b29a      	uxth	r2, r3
 8005842:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005846:	801a      	strh	r2, [r3, #0]
 8005848:	e32c      	b.n	8005ea4 <USB_EPStartXfer+0x11d8>
 800584a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800584e:	2b3e      	cmp	r3, #62	; 0x3e
 8005850:	d818      	bhi.n	8005884 <USB_EPStartXfer+0xbb8>
 8005852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005856:	085b      	lsrs	r3, r3, #1
 8005858:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800585c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b00      	cmp	r3, #0
 8005866:	d004      	beq.n	8005872 <USB_EPStartXfer+0xba6>
 8005868:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800586c:	3301      	adds	r3, #1
 800586e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005872:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005876:	b29b      	uxth	r3, r3
 8005878:	029b      	lsls	r3, r3, #10
 800587a:	b29a      	uxth	r2, r3
 800587c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	e30f      	b.n	8005ea4 <USB_EPStartXfer+0x11d8>
 8005884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005888:	095b      	lsrs	r3, r3, #5
 800588a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800588e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	2b00      	cmp	r3, #0
 8005898:	d104      	bne.n	80058a4 <USB_EPStartXfer+0xbd8>
 800589a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800589e:	3b01      	subs	r3, #1
 80058a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	029b      	lsls	r3, r3, #10
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	e2f1      	b.n	8005ea4 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80058c0:	463b      	mov	r3, r7
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	78db      	ldrb	r3, [r3, #3]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	f040 818f 	bne.w	8005bea <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80058cc:	463b      	mov	r3, r7
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	785b      	ldrb	r3, [r3, #1]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d175      	bne.n	80059c2 <USB_EPStartXfer+0xcf6>
 80058d6:	1d3b      	adds	r3, r7, #4
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058de:	1d3b      	adds	r3, r7, #4
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80058ee:	4413      	add	r3, r2
 80058f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058f4:	463b      	mov	r3, r7
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	011a      	lsls	r2, r3, #4
 80058fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005900:	4413      	add	r3, r2
 8005902:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005906:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800590a:	463b      	mov	r3, r7
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d116      	bne.n	8005942 <USB_EPStartXfer+0xc76>
 8005914:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b29b      	uxth	r3, r3
 800591c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005920:	b29a      	uxth	r2, r3
 8005922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	b29b      	uxth	r3, r3
 8005930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005938:	b29a      	uxth	r2, r3
 800593a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800593e:	801a      	strh	r2, [r3, #0]
 8005940:	e065      	b.n	8005a0e <USB_EPStartXfer+0xd42>
 8005942:	463b      	mov	r3, r7
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	2b3e      	cmp	r3, #62	; 0x3e
 800594a:	d81a      	bhi.n	8005982 <USB_EPStartXfer+0xcb6>
 800594c:	463b      	mov	r3, r7
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	085b      	lsrs	r3, r3, #1
 8005954:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005958:	463b      	mov	r3, r7
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d004      	beq.n	8005970 <USB_EPStartXfer+0xca4>
 8005966:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800596a:	3301      	adds	r3, #1
 800596c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005970:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005974:	b29b      	uxth	r3, r3
 8005976:	029b      	lsls	r3, r3, #10
 8005978:	b29a      	uxth	r2, r3
 800597a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800597e:	801a      	strh	r2, [r3, #0]
 8005980:	e045      	b.n	8005a0e <USB_EPStartXfer+0xd42>
 8005982:	463b      	mov	r3, r7
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	095b      	lsrs	r3, r3, #5
 800598a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800598e:	463b      	mov	r3, r7
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	f003 031f 	and.w	r3, r3, #31
 8005998:	2b00      	cmp	r3, #0
 800599a:	d104      	bne.n	80059a6 <USB_EPStartXfer+0xcda>
 800599c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059a0:	3b01      	subs	r3, #1
 80059a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	029b      	lsls	r3, r3, #10
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	e025      	b.n	8005a0e <USB_EPStartXfer+0xd42>
 80059c2:	463b      	mov	r3, r7
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d120      	bne.n	8005a0e <USB_EPStartXfer+0xd42>
 80059cc:	1d3b      	adds	r3, r7, #4
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059d4:	1d3b      	adds	r3, r7, #4
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059dc:	b29b      	uxth	r3, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059e4:	4413      	add	r3, r2
 80059e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059ea:	463b      	mov	r3, r7
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	011a      	lsls	r2, r3, #4
 80059f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059f6:	4413      	add	r3, r2
 80059f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a00:	463b      	mov	r3, r7
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a0c:	801a      	strh	r2, [r3, #0]
 8005a0e:	1d3b      	adds	r3, r7, #4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a16:	463b      	mov	r3, r7
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	785b      	ldrb	r3, [r3, #1]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d175      	bne.n	8005b0c <USB_EPStartXfer+0xe40>
 8005a20:	1d3b      	adds	r3, r7, #4
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a28:	1d3b      	adds	r3, r7, #4
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	461a      	mov	r2, r3
 8005a34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a38:	4413      	add	r3, r2
 8005a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a3e:	463b      	mov	r3, r7
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	011a      	lsls	r2, r3, #4
 8005a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a54:	463b      	mov	r3, r7
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d116      	bne.n	8005a8c <USB_EPStartXfer+0xdc0>
 8005a5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a70:	801a      	strh	r2, [r3, #0]
 8005a72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a88:	801a      	strh	r2, [r3, #0]
 8005a8a:	e061      	b.n	8005b50 <USB_EPStartXfer+0xe84>
 8005a8c:	463b      	mov	r3, r7
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b3e      	cmp	r3, #62	; 0x3e
 8005a94:	d81a      	bhi.n	8005acc <USB_EPStartXfer+0xe00>
 8005a96:	463b      	mov	r3, r7
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	085b      	lsrs	r3, r3, #1
 8005a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005aa2:	463b      	mov	r3, r7
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d004      	beq.n	8005aba <USB_EPStartXfer+0xdee>
 8005ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	029b      	lsls	r3, r3, #10
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ac8:	801a      	strh	r2, [r3, #0]
 8005aca:	e041      	b.n	8005b50 <USB_EPStartXfer+0xe84>
 8005acc:	463b      	mov	r3, r7
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ad8:	463b      	mov	r3, r7
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f003 031f 	and.w	r3, r3, #31
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d104      	bne.n	8005af0 <USB_EPStartXfer+0xe24>
 8005ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aea:	3b01      	subs	r3, #1
 8005aec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	029b      	lsls	r3, r3, #10
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b08:	801a      	strh	r2, [r3, #0]
 8005b0a:	e021      	b.n	8005b50 <USB_EPStartXfer+0xe84>
 8005b0c:	463b      	mov	r3, r7
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	785b      	ldrb	r3, [r3, #1]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d11c      	bne.n	8005b50 <USB_EPStartXfer+0xe84>
 8005b16:	1d3b      	adds	r3, r7, #4
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	461a      	mov	r2, r3
 8005b22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b26:	4413      	add	r3, r2
 8005b28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b2c:	463b      	mov	r3, r7
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	011a      	lsls	r2, r3, #4
 8005b34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b38:	4413      	add	r3, r2
 8005b3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b42:	463b      	mov	r3, r7
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b4e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b50:	463b      	mov	r3, r7
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 81a4 	beq.w	8005ea4 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005b5c:	1d3b      	adds	r3, r7, #4
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	463b      	mov	r3, r7
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b70:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d005      	beq.n	8005b88 <USB_EPStartXfer+0xebc>
 8005b7c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10d      	bne.n	8005ba4 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b88:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f040 8187 	bne.w	8005ea4 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b96:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f040 8180 	bne.w	8005ea4 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005ba4:	1d3b      	adds	r3, r7, #4
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	463b      	mov	r3, r7
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbe:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005bc2:	1d3b      	adds	r3, r7, #4
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	463b      	mov	r3, r7
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	441a      	add	r2, r3
 8005bd0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	8013      	strh	r3, [r2, #0]
 8005be8:	e15c      	b.n	8005ea4 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005bea:	463b      	mov	r3, r7
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	78db      	ldrb	r3, [r3, #3]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	f040 8155 	bne.w	8005ea0 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005bf6:	463b      	mov	r3, r7
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	699a      	ldr	r2, [r3, #24]
 8005bfc:	463b      	mov	r3, r7
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d90e      	bls.n	8005c24 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005c06:	463b      	mov	r3, r7
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005c10:	463b      	mov	r3, r7
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c1a:	1ad2      	subs	r2, r2, r3
 8005c1c:	463b      	mov	r3, r7
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	619a      	str	r2, [r3, #24]
 8005c22:	e008      	b.n	8005c36 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005c24:	463b      	mov	r3, r7
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005c2e:	463b      	mov	r3, r7
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2200      	movs	r2, #0
 8005c34:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c36:	463b      	mov	r3, r7
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	785b      	ldrb	r3, [r3, #1]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d16f      	bne.n	8005d20 <USB_EPStartXfer+0x1054>
 8005c40:	1d3b      	adds	r3, r7, #4
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c48:	1d3b      	adds	r3, r7, #4
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	461a      	mov	r2, r3
 8005c54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c58:	4413      	add	r3, r2
 8005c5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c5e:	463b      	mov	r3, r7
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	011a      	lsls	r2, r3, #4
 8005c66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d116      	bne.n	8005caa <USB_EPStartXfer+0xfde>
 8005c7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c8e:	801a      	strh	r2, [r3, #0]
 8005c90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ca6:	801a      	strh	r2, [r3, #0]
 8005ca8:	e05f      	b.n	8005d6a <USB_EPStartXfer+0x109e>
 8005caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cae:	2b3e      	cmp	r3, #62	; 0x3e
 8005cb0:	d818      	bhi.n	8005ce4 <USB_EPStartXfer+0x1018>
 8005cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cb6:	085b      	lsrs	r3, r3, #1
 8005cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <USB_EPStartXfer+0x1006>
 8005cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ccc:	3301      	adds	r3, #1
 8005cce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	029b      	lsls	r3, r3, #10
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ce0:	801a      	strh	r2, [r3, #0]
 8005ce2:	e042      	b.n	8005d6a <USB_EPStartXfer+0x109e>
 8005ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf2:	f003 031f 	and.w	r3, r3, #31
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d104      	bne.n	8005d04 <USB_EPStartXfer+0x1038>
 8005cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	029b      	lsls	r3, r3, #10
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d1c:	801a      	strh	r2, [r3, #0]
 8005d1e:	e024      	b.n	8005d6a <USB_EPStartXfer+0x109e>
 8005d20:	463b      	mov	r3, r7
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	785b      	ldrb	r3, [r3, #1]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d11f      	bne.n	8005d6a <USB_EPStartXfer+0x109e>
 8005d2a:	1d3b      	adds	r3, r7, #4
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d32:	1d3b      	adds	r3, r7, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d42:	4413      	add	r3, r2
 8005d44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d48:	463b      	mov	r3, r7
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	011a      	lsls	r2, r3, #4
 8005d50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d54:	4413      	add	r3, r2
 8005d56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d68:	801a      	strh	r2, [r3, #0]
 8005d6a:	1d3b      	adds	r3, r7, #4
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d72:	463b      	mov	r3, r7
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	785b      	ldrb	r3, [r3, #1]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d16f      	bne.n	8005e5c <USB_EPStartXfer+0x1190>
 8005d7c:	1d3b      	adds	r3, r7, #4
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d84:	1d3b      	adds	r3, r7, #4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d94:	4413      	add	r3, r2
 8005d96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d9a:	463b      	mov	r3, r7
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	011a      	lsls	r2, r3, #4
 8005da2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005da6:	4413      	add	r3, r2
 8005da8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d116      	bne.n	8005de6 <USB_EPStartXfer+0x111a>
 8005db8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	e05e      	b.n	8005ea4 <USB_EPStartXfer+0x11d8>
 8005de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dea:	2b3e      	cmp	r3, #62	; 0x3e
 8005dec:	d818      	bhi.n	8005e20 <USB_EPStartXfer+0x1154>
 8005dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <USB_EPStartXfer+0x1142>
 8005e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e08:	3301      	adds	r3, #1
 8005e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	029b      	lsls	r3, r3, #10
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e1c:	801a      	strh	r2, [r3, #0]
 8005e1e:	e041      	b.n	8005ea4 <USB_EPStartXfer+0x11d8>
 8005e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e24:	095b      	lsrs	r3, r3, #5
 8005e26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e2e:	f003 031f 	and.w	r3, r3, #31
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d104      	bne.n	8005e40 <USB_EPStartXfer+0x1174>
 8005e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	029b      	lsls	r3, r3, #10
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e58:	801a      	strh	r2, [r3, #0]
 8005e5a:	e023      	b.n	8005ea4 <USB_EPStartXfer+0x11d8>
 8005e5c:	463b      	mov	r3, r7
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	785b      	ldrb	r3, [r3, #1]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d11e      	bne.n	8005ea4 <USB_EPStartXfer+0x11d8>
 8005e66:	1d3b      	adds	r3, r7, #4
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	461a      	mov	r2, r3
 8005e72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e76:	4413      	add	r3, r2
 8005e78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e7c:	463b      	mov	r3, r7
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	011a      	lsls	r2, r3, #4
 8005e84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e88:	4413      	add	r3, r2
 8005e8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e9c:	801a      	strh	r2, [r3, #0]
 8005e9e:	e001      	b.n	8005ea4 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e02e      	b.n	8005f02 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ea4:	1d3b      	adds	r3, r7, #4
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	463b      	mov	r3, r7
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005ec2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005ec6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005eca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005ece:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005ed2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ed6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005eda:	1d3b      	adds	r3, r7, #4
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	463b      	mov	r3, r7
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	441a      	add	r2, r3
 8005ee8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	785b      	ldrb	r3, [r3, #1]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d020      	beq.n	8005f60 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f34:	81bb      	strh	r3, [r7, #12]
 8005f36:	89bb      	ldrh	r3, [r7, #12]
 8005f38:	f083 0310 	eor.w	r3, r3, #16
 8005f3c:	81bb      	strh	r3, [r7, #12]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	441a      	add	r2, r3
 8005f48:	89bb      	ldrh	r3, [r7, #12]
 8005f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	8013      	strh	r3, [r2, #0]
 8005f5e:	e01f      	b.n	8005fa0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f76:	81fb      	strh	r3, [r7, #14]
 8005f78:	89fb      	ldrh	r3, [r7, #14]
 8005f7a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f7e:	81fb      	strh	r3, [r7, #14]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	441a      	add	r2, r3
 8005f8a:	89fb      	ldrh	r3, [r7, #14]
 8005f8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bc80      	pop	{r7}
 8005faa:	4770      	bx	lr

08005fac <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	7b1b      	ldrb	r3, [r3, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f040 809d 	bne.w	80060fa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	785b      	ldrb	r3, [r3, #1]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d04c      	beq.n	8006062 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	823b      	strh	r3, [r7, #16]
 8005fd6:	8a3b      	ldrh	r3, [r7, #16]
 8005fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d01b      	beq.n	8006018 <USB_EPClearStall+0x6c>
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff6:	81fb      	strh	r3, [r7, #14]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	441a      	add	r2, r3
 8006002:	89fb      	ldrh	r3, [r7, #14]
 8006004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800600c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006010:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006014:	b29b      	uxth	r3, r3
 8006016:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	78db      	ldrb	r3, [r3, #3]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d06c      	beq.n	80060fa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	b29b      	uxth	r3, r3
 800602e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006036:	81bb      	strh	r3, [r7, #12]
 8006038:	89bb      	ldrh	r3, [r7, #12]
 800603a:	f083 0320 	eor.w	r3, r3, #32
 800603e:	81bb      	strh	r3, [r7, #12]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	441a      	add	r2, r3
 800604a:	89bb      	ldrh	r3, [r7, #12]
 800604c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605c:	b29b      	uxth	r3, r3
 800605e:	8013      	strh	r3, [r2, #0]
 8006060:	e04b      	b.n	80060fa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	82fb      	strh	r3, [r7, #22]
 8006070:	8afb      	ldrh	r3, [r7, #22]
 8006072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d01b      	beq.n	80060b2 <USB_EPClearStall+0x106>
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b29b      	uxth	r3, r3
 8006088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800608c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006090:	82bb      	strh	r3, [r7, #20]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	441a      	add	r2, r3
 800609c:	8abb      	ldrh	r3, [r7, #20]
 800609e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c8:	827b      	strh	r3, [r7, #18]
 80060ca:	8a7b      	ldrh	r3, [r7, #18]
 80060cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060d0:	827b      	strh	r3, [r7, #18]
 80060d2:	8a7b      	ldrh	r3, [r7, #18]
 80060d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060d8:	827b      	strh	r3, [r7, #18]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	441a      	add	r2, r3
 80060e4:	8a7b      	ldrh	r3, [r7, #18]
 80060e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	371c      	adds	r7, #28
 8006100:	46bd      	mov	sp, r7
 8006102:	bc80      	pop	{r7}
 8006104:	4770      	bx	lr

08006106 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	460b      	mov	r3, r1
 8006110:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006112:	78fb      	ldrb	r3, [r7, #3]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d103      	bne.n	8006120 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2280      	movs	r2, #128	; 0x80
 800611c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr

0800612c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	bc80      	pop	{r7}
 800613e:	4770      	bx	lr

08006140 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	bc80      	pop	{r7}
 8006152:	4770      	bx	lr

08006154 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006162:	b29b      	uxth	r3, r3
 8006164:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006166:	68fb      	ldr	r3, [r7, #12]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	bc80      	pop	{r7}
 8006170:	4770      	bx	lr

08006172 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	bc80      	pop	{r7}
 8006186:	4770      	bx	lr

08006188 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006188:	b480      	push	{r7}
 800618a:	b08d      	sub	sp, #52	; 0x34
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	4611      	mov	r1, r2
 8006194:	461a      	mov	r2, r3
 8006196:	460b      	mov	r3, r1
 8006198:	80fb      	strh	r3, [r7, #6]
 800619a:	4613      	mov	r3, r2
 800619c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800619e:	88bb      	ldrh	r3, [r7, #4]
 80061a0:	3301      	adds	r3, #1
 80061a2:	085b      	lsrs	r3, r3, #1
 80061a4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	005a      	lsls	r2, r3, #1
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ba:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061c0:	e01e      	b.n	8006200 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	3301      	adds	r3, #1
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	021b      	lsls	r3, r3, #8
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	4313      	orrs	r3, r2
 80061de:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	3302      	adds	r3, #2
 80061ec:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	3302      	adds	r3, #2
 80061f2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	3301      	adds	r3, #1
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80061fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fc:	3b01      	subs	r3, #1
 80061fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1dd      	bne.n	80061c2 <USB_WritePMA+0x3a>
  }
}
 8006206:	bf00      	nop
 8006208:	3734      	adds	r7, #52	; 0x34
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr

08006210 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006210:	b480      	push	{r7}
 8006212:	b08b      	sub	sp, #44	; 0x2c
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	4611      	mov	r1, r2
 800621c:	461a      	mov	r2, r3
 800621e:	460b      	mov	r3, r1
 8006220:	80fb      	strh	r3, [r7, #6]
 8006222:	4613      	mov	r3, r2
 8006224:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006226:	88bb      	ldrh	r3, [r7, #4]
 8006228:	085b      	lsrs	r3, r3, #1
 800622a:	b29b      	uxth	r3, r3
 800622c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006236:	88fb      	ldrh	r3, [r7, #6]
 8006238:	005a      	lsls	r2, r3, #1
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006242:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	627b      	str	r3, [r7, #36]	; 0x24
 8006248:	e01b      	b.n	8006282 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	b29b      	uxth	r3, r3
 8006250:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	3302      	adds	r3, #2
 8006256:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	b2da      	uxtb	r2, r3
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	3301      	adds	r3, #1
 8006264:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	0a1b      	lsrs	r3, r3, #8
 800626a:	b2da      	uxtb	r2, r3
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	3301      	adds	r3, #1
 8006274:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	3302      	adds	r3, #2
 800627a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	3b01      	subs	r3, #1
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e0      	bne.n	800624a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006288:	88bb      	ldrh	r3, [r7, #4]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	b29b      	uxth	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	d007      	beq.n	80062a4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	701a      	strb	r2, [r3, #0]
  }
}
 80062a4:	bf00      	nop
 80062a6:	372c      	adds	r7, #44	; 0x2c
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr

080062ae <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	7c1b      	ldrb	r3, [r3, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d115      	bne.n	80062f2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062ca:	2202      	movs	r2, #2
 80062cc:	2181      	movs	r1, #129	; 0x81
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f001 fe1f 	bl	8007f12 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062de:	2202      	movs	r2, #2
 80062e0:	2101      	movs	r1, #1
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f001 fe15 	bl	8007f12 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80062f0:	e012      	b.n	8006318 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062f2:	2340      	movs	r3, #64	; 0x40
 80062f4:	2202      	movs	r2, #2
 80062f6:	2181      	movs	r1, #129	; 0x81
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 fe0a 	bl	8007f12 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006304:	2340      	movs	r3, #64	; 0x40
 8006306:	2202      	movs	r2, #2
 8006308:	2101      	movs	r1, #1
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f001 fe01 	bl	8007f12 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006318:	2308      	movs	r3, #8
 800631a:	2203      	movs	r2, #3
 800631c:	2182      	movs	r1, #130	; 0x82
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f001 fdf7 	bl	8007f12 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800632a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800632e:	f001 ff17 	bl	8008160 <USBD_static_malloc>
 8006332:	4602      	mov	r2, r0
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d102      	bne.n	800634a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006344:	2301      	movs	r3, #1
 8006346:	73fb      	strb	r3, [r7, #15]
 8006348:	e026      	b.n	8006398 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006350:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2200      	movs	r2, #0
 8006360:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2200      	movs	r2, #0
 8006368:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	7c1b      	ldrb	r3, [r3, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d109      	bne.n	8006388 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800637a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800637e:	2101      	movs	r1, #1
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f001 feb7 	bl	80080f4 <USBD_LL_PrepareReceive>
 8006386:	e007      	b.n	8006398 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800638e:	2340      	movs	r3, #64	; 0x40
 8006390:	2101      	movs	r1, #1
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f001 feae 	bl	80080f4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b084      	sub	sp, #16
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	460b      	mov	r3, r1
 80063ac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80063b2:	2181      	movs	r1, #129	; 0x81
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 fdd2 	bl	8007f5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80063c0:	2101      	movs	r1, #1
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f001 fdcb 	bl	8007f5e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80063d0:	2182      	movs	r1, #130	; 0x82
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 fdc3 	bl	8007f5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00e      	beq.n	8006406 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f8:	4618      	mov	r0, r3
 80063fa:	f001 febd 	bl	8008178 <USBD_static_free>
    pdev->pClassData = NULL;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006406:	7bfb      	ldrb	r3, [r7, #15]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006420:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006426:	2300      	movs	r3, #0
 8006428:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006436:	2b00      	cmp	r3, #0
 8006438:	d039      	beq.n	80064ae <USBD_CDC_Setup+0x9e>
 800643a:	2b20      	cmp	r3, #32
 800643c:	d17c      	bne.n	8006538 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	88db      	ldrh	r3, [r3, #6]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d029      	beq.n	800649a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	b25b      	sxtb	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	da11      	bge.n	8006474 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800645c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	88d2      	ldrh	r2, [r2, #6]
 8006462:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006464:	6939      	ldr	r1, [r7, #16]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	88db      	ldrh	r3, [r3, #6]
 800646a:	461a      	mov	r2, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 f9c9 	bl	8007804 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006472:	e068      	b.n	8006546 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	785a      	ldrb	r2, [r3, #1]
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	88db      	ldrh	r3, [r3, #6]
 8006482:	b2da      	uxtb	r2, r3
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800648a:	6939      	ldr	r1, [r7, #16]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	88db      	ldrh	r3, [r3, #6]
 8006490:	461a      	mov	r2, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f001 f9e4 	bl	8007860 <USBD_CtlPrepareRx>
      break;
 8006498:	e055      	b.n	8006546 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	7850      	ldrb	r0, [r2, #1]
 80064a6:	2200      	movs	r2, #0
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	4798      	blx	r3
      break;
 80064ac:	e04b      	b.n	8006546 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	785b      	ldrb	r3, [r3, #1]
 80064b2:	2b0a      	cmp	r3, #10
 80064b4:	d017      	beq.n	80064e6 <USBD_CDC_Setup+0xd6>
 80064b6:	2b0b      	cmp	r3, #11
 80064b8:	d029      	beq.n	800650e <USBD_CDC_Setup+0xfe>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d133      	bne.n	8006526 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d107      	bne.n	80064d8 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80064c8:	f107 030c 	add.w	r3, r7, #12
 80064cc:	2202      	movs	r2, #2
 80064ce:	4619      	mov	r1, r3
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f001 f997 	bl	8007804 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064d6:	e02e      	b.n	8006536 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f001 f928 	bl	8007730 <USBD_CtlError>
            ret = USBD_FAIL;
 80064e0:	2302      	movs	r3, #2
 80064e2:	75fb      	strb	r3, [r7, #23]
          break;
 80064e4:	e027      	b.n	8006536 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d107      	bne.n	8006500 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80064f0:	f107 030f 	add.w	r3, r7, #15
 80064f4:	2201      	movs	r2, #1
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f001 f983 	bl	8007804 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064fe:	e01a      	b.n	8006536 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 f914 	bl	8007730 <USBD_CtlError>
            ret = USBD_FAIL;
 8006508:	2302      	movs	r3, #2
 800650a:	75fb      	strb	r3, [r7, #23]
          break;
 800650c:	e013      	b.n	8006536 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006514:	2b03      	cmp	r3, #3
 8006516:	d00d      	beq.n	8006534 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f001 f908 	bl	8007730 <USBD_CtlError>
            ret = USBD_FAIL;
 8006520:	2302      	movs	r3, #2
 8006522:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006524:	e006      	b.n	8006534 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f001 f901 	bl	8007730 <USBD_CtlError>
          ret = USBD_FAIL;
 800652e:	2302      	movs	r3, #2
 8006530:	75fb      	strb	r3, [r7, #23]
          break;
 8006532:	e000      	b.n	8006536 <USBD_CDC_Setup+0x126>
          break;
 8006534:	bf00      	nop
      }
      break;
 8006536:	e006      	b.n	8006546 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f001 f8f8 	bl	8007730 <USBD_CtlError>
      ret = USBD_FAIL;
 8006540:	2302      	movs	r3, #2
 8006542:	75fb      	strb	r3, [r7, #23]
      break;
 8006544:	bf00      	nop
  }

  return ret;
 8006546:	7dfb      	ldrb	r3, [r7, #23]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006562:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800656a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d03a      	beq.n	80065ec <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006576:	78fa      	ldrb	r2, [r7, #3]
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	4613      	mov	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	440b      	add	r3, r1
 8006584:	331c      	adds	r3, #28
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d029      	beq.n	80065e0 <USBD_CDC_DataIn+0x90>
 800658c:	78fa      	ldrb	r2, [r7, #3]
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	4613      	mov	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	440b      	add	r3, r1
 800659a:	331c      	adds	r3, #28
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	78f9      	ldrb	r1, [r7, #3]
 80065a0:	68b8      	ldr	r0, [r7, #8]
 80065a2:	460b      	mov	r3, r1
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	4403      	add	r3, r0
 80065ac:	3338      	adds	r3, #56	; 0x38
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80065b4:	fb03 f301 	mul.w	r3, r3, r1
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d110      	bne.n	80065e0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80065be:	78fa      	ldrb	r2, [r7, #3]
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	440b      	add	r3, r1
 80065cc:	331c      	adds	r3, #28
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80065d2:	78f9      	ldrb	r1, [r7, #3]
 80065d4:	2300      	movs	r3, #0
 80065d6:	2200      	movs	r2, #0
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 fd68 	bl	80080ae <USBD_LL_Transmit>
 80065de:	e003      	b.n	80065e8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	e000      	b.n	80065ee <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80065ec:	2302      	movs	r3, #2
  }
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	460b      	mov	r3, r1
 8006600:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006608:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	4619      	mov	r1, r3
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f001 fd93 	bl	800813a <USBD_LL_GetRxDataSize>
 8006614:	4602      	mov	r2, r0
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00d      	beq.n	8006642 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800663a:	4611      	mov	r1, r2
 800663c:	4798      	blx	r3

    return USBD_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	e000      	b.n	8006644 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006642:	2302      	movs	r3, #2
  }
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006662:	2b00      	cmp	r3, #0
 8006664:	d015      	beq.n	8006692 <USBD_CDC_EP0_RxReady+0x46>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800666c:	2bff      	cmp	r3, #255	; 0xff
 800666e:	d010      	beq.n	8006692 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800667e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006686:	b292      	uxth	r2, r2
 8006688:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	22ff      	movs	r2, #255	; 0xff
 800668e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2243      	movs	r2, #67	; 0x43
 80066a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80066aa:	4b03      	ldr	r3, [pc, #12]	; (80066b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bc80      	pop	{r7}
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	200000a8 	.word	0x200000a8

080066bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2243      	movs	r2, #67	; 0x43
 80066c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80066ca:	4b03      	ldr	r3, [pc, #12]	; (80066d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bc80      	pop	{r7}
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	20000064 	.word	0x20000064

080066dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2243      	movs	r2, #67	; 0x43
 80066e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80066ea:	4b03      	ldr	r3, [pc, #12]	; (80066f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bc80      	pop	{r7}
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	200000ec 	.word	0x200000ec

080066fc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	220a      	movs	r2, #10
 8006708:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800670a:	4b03      	ldr	r3, [pc, #12]	; (8006718 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800670c:	4618      	mov	r0, r3
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	bc80      	pop	{r7}
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	20000020 	.word	0x20000020

0800671c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006726:	2302      	movs	r3, #2
 8006728:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800673c:	7bfb      	ldrb	r3, [r7, #15]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr

08006748 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	4613      	mov	r3, r2
 8006754:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800675c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006766:	88fa      	ldrh	r2, [r7, #6]
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	371c      	adds	r7, #28
 8006774:	46bd      	mov	sp, r7
 8006776:	bc80      	pop	{r7}
 8006778:	4770      	bx	lr

0800677a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800677a:	b480      	push	{r7}
 800677c:	b085      	sub	sp, #20
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr

080067a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d017      	beq.n	80067ea <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	7c1b      	ldrb	r3, [r3, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067cc:	2101      	movs	r1, #1
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f001 fc90 	bl	80080f4 <USBD_LL_PrepareReceive>
 80067d4:	e007      	b.n	80067e6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067dc:	2340      	movs	r3, #64	; 0x40
 80067de:	2101      	movs	r1, #1
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f001 fc87 	bl	80080f4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	e000      	b.n	80067ec <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80067ea:	2302      	movs	r3, #2
  }
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	4613      	mov	r3, r2
 8006800:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006808:	2302      	movs	r3, #2
 800680a:	e01a      	b.n	8006842 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d003      	beq.n	800682c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	79fa      	ldrb	r2, [r7, #7]
 8006838:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f001 faf4 	bl	8007e28 <USBD_LL_Init>

  return USBD_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800684a:	b480      	push	{r7}
 800684c:	b085      	sub	sp, #20
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006854:	2300      	movs	r3, #0
 8006856:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d006      	beq.n	800686c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]
 800686a:	e001      	b.n	8006870 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800686c:	2302      	movs	r3, #2
 800686e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006870:	7bfb      	ldrb	r3, [r7, #15]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr

0800687c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f001 fb29 	bl	8007edc <USBD_LL_Start>

  return USBD_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bc80      	pop	{r7}
 80068a6:	4770      	bx	lr

080068a8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	460b      	mov	r3, r1
 80068b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80068b4:	2302      	movs	r3, #2
 80068b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00c      	beq.n	80068dc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	78fa      	ldrb	r2, [r7, #3]
 80068cc:	4611      	mov	r1, r2
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	4798      	blx	r3
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b082      	sub	sp, #8
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	460b      	mov	r3, r1
 80068f0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	78fa      	ldrb	r2, [r7, #3]
 80068fc:	4611      	mov	r1, r2
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	4798      	blx	r3

  return USBD_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f000 feca 	bl	80076b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006932:	461a      	mov	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006940:	f003 031f 	and.w	r3, r3, #31
 8006944:	2b01      	cmp	r3, #1
 8006946:	d00c      	beq.n	8006962 <USBD_LL_SetupStage+0x56>
 8006948:	2b01      	cmp	r3, #1
 800694a:	d302      	bcc.n	8006952 <USBD_LL_SetupStage+0x46>
 800694c:	2b02      	cmp	r3, #2
 800694e:	d010      	beq.n	8006972 <USBD_LL_SetupStage+0x66>
 8006950:	e017      	b.n	8006982 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f9ca 	bl	8006cf4 <USBD_StdDevReq>
      break;
 8006960:	e01a      	b.n	8006998 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fa2c 	bl	8006dc8 <USBD_StdItfReq>
      break;
 8006970:	e012      	b.n	8006998 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa6a 	bl	8006e54 <USBD_StdEPReq>
      break;
 8006980:	e00a      	b.n	8006998 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006988:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800698c:	b2db      	uxtb	r3, r3
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 fb03 	bl	8007f9c <USBD_LL_StallEP>
      break;
 8006996:	bf00      	nop
  }

  return USBD_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b086      	sub	sp, #24
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	460b      	mov	r3, r1
 80069ac:	607a      	str	r2, [r7, #4]
 80069ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80069b0:	7afb      	ldrb	r3, [r7, #11]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d14b      	bne.n	8006a4e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80069bc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069c4:	2b03      	cmp	r3, #3
 80069c6:	d134      	bne.n	8006a32 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d919      	bls.n	8006a08 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	1ad2      	subs	r2, r2, r3
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d203      	bcs.n	80069f6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	e002      	b.n	80069fc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	461a      	mov	r2, r3
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 ff4b 	bl	800789c <USBD_CtlContinueRx>
 8006a06:	e038      	b.n	8006a7a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00a      	beq.n	8006a2a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d105      	bne.n	8006a2a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 ff48 	bl	80078c0 <USBD_CtlSendStatus>
 8006a30:	e023      	b.n	8006a7a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a38:	2b05      	cmp	r3, #5
 8006a3a:	d11e      	bne.n	8006a7a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006a44:	2100      	movs	r1, #0
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f001 faa8 	bl	8007f9c <USBD_LL_StallEP>
 8006a4c:	e015      	b.n	8006a7a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00d      	beq.n	8006a76 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a60:	2b03      	cmp	r3, #3
 8006a62:	d108      	bne.n	8006a76 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	7afa      	ldrb	r2, [r7, #11]
 8006a6e:	4611      	mov	r1, r2
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	4798      	blx	r3
 8006a74:	e001      	b.n	8006a7a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a76:	2302      	movs	r3, #2
 8006a78:	e000      	b.n	8006a7c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	607a      	str	r2, [r7, #4]
 8006a90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a92:	7afb      	ldrb	r3, [r7, #11]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d17f      	bne.n	8006b98 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3314      	adds	r3, #20
 8006a9c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d15c      	bne.n	8006b62 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d915      	bls.n	8006ae0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	68da      	ldr	r2, [r3, #12]
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	1ad2      	subs	r2, r2, r3
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	461a      	mov	r2, r3
 8006aca:	6879      	ldr	r1, [r7, #4]
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 feb5 	bl	800783c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f001 fb0b 	bl	80080f4 <USBD_LL_PrepareReceive>
 8006ade:	e04e      	b.n	8006b7e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	6912      	ldr	r2, [r2, #16]
 8006ae8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aec:	fb02 f201 	mul.w	r2, r2, r1
 8006af0:	1a9b      	subs	r3, r3, r2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d11c      	bne.n	8006b30 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d316      	bcc.n	8006b30 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d20f      	bcs.n	8006b30 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b10:	2200      	movs	r2, #0
 8006b12:	2100      	movs	r1, #0
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fe91 	bl	800783c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b22:	2300      	movs	r3, #0
 8006b24:	2200      	movs	r2, #0
 8006b26:	2100      	movs	r1, #0
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f001 fae3 	bl	80080f4 <USBD_LL_PrepareReceive>
 8006b2e:	e026      	b.n	8006b7e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00a      	beq.n	8006b52 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d105      	bne.n	8006b52 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006b52:	2180      	movs	r1, #128	; 0x80
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f001 fa21 	bl	8007f9c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f000 fec3 	bl	80078e6 <USBD_CtlReceiveStatus>
 8006b60:	e00d      	b.n	8006b7e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	d004      	beq.n	8006b76 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d103      	bne.n	8006b7e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006b76:	2180      	movs	r1, #128	; 0x80
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f001 fa0f 	bl	8007f9c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d11d      	bne.n	8006bc4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f7ff fe83 	bl	8006894 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b96:	e015      	b.n	8006bc4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00d      	beq.n	8006bc0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006baa:	2b03      	cmp	r3, #3
 8006bac:	d108      	bne.n	8006bc0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	7afa      	ldrb	r2, [r7, #11]
 8006bb8:	4611      	mov	r1, r2
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	4798      	blx	r3
 8006bbe:	e001      	b.n	8006bc4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e000      	b.n	8006bc6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bd6:	2340      	movs	r3, #64	; 0x40
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2100      	movs	r1, #0
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 f998 	bl	8007f12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2240      	movs	r2, #64	; 0x40
 8006bee:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bf2:	2340      	movs	r3, #64	; 0x40
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	2180      	movs	r1, #128	; 0x80
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 f98a 	bl	8007f12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2240      	movs	r2, #64	; 0x40
 8006c08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d009      	beq.n	8006c46 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	6852      	ldr	r2, [r2, #4]
 8006c3e:	b2d2      	uxtb	r2, r2
 8006c40:	4611      	mov	r1, r2
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	4798      	blx	r3
  }

  return USBD_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	78fa      	ldrb	r2, [r7, #3]
 8006c60:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bc80      	pop	{r7}
 8006c6c:	4770      	bx	lr

08006c6e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2204      	movs	r2, #4
 8006c86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bc80      	pop	{r7}
 8006c94:	4770      	bx	lr

08006c96 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b083      	sub	sp, #12
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca4:	2b04      	cmp	r3, #4
 8006ca6:	d105      	bne.n	8006cb4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr

08006cc0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d10b      	bne.n	8006cea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d005      	beq.n	8006cea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	d004      	beq.n	8006d18 <USBD_StdDevReq+0x24>
 8006d0e:	2b40      	cmp	r3, #64	; 0x40
 8006d10:	d002      	beq.n	8006d18 <USBD_StdDevReq+0x24>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d008      	beq.n	8006d28 <USBD_StdDevReq+0x34>
 8006d16:	e04c      	b.n	8006db2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	4798      	blx	r3
      break;
 8006d26:	e049      	b.n	8006dbc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	785b      	ldrb	r3, [r3, #1]
 8006d2c:	2b09      	cmp	r3, #9
 8006d2e:	d83a      	bhi.n	8006da6 <USBD_StdDevReq+0xb2>
 8006d30:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <USBD_StdDevReq+0x44>)
 8006d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d36:	bf00      	nop
 8006d38:	08006d89 	.word	0x08006d89
 8006d3c:	08006d9d 	.word	0x08006d9d
 8006d40:	08006da7 	.word	0x08006da7
 8006d44:	08006d93 	.word	0x08006d93
 8006d48:	08006da7 	.word	0x08006da7
 8006d4c:	08006d6b 	.word	0x08006d6b
 8006d50:	08006d61 	.word	0x08006d61
 8006d54:	08006da7 	.word	0x08006da7
 8006d58:	08006d7f 	.word	0x08006d7f
 8006d5c:	08006d75 	.word	0x08006d75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f9d4 	bl	8007110 <USBD_GetDescriptor>
          break;
 8006d68:	e022      	b.n	8006db0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fb37 	bl	80073e0 <USBD_SetAddress>
          break;
 8006d72:	e01d      	b.n	8006db0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fb74 	bl	8007464 <USBD_SetConfig>
          break;
 8006d7c:	e018      	b.n	8006db0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fbfd 	bl	8007580 <USBD_GetConfig>
          break;
 8006d86:	e013      	b.n	8006db0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fc2c 	bl	80075e8 <USBD_GetStatus>
          break;
 8006d90:	e00e      	b.n	8006db0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fc5a 	bl	800764e <USBD_SetFeature>
          break;
 8006d9a:	e009      	b.n	8006db0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fc69 	bl	8007676 <USBD_ClrFeature>
          break;
 8006da4:	e004      	b.n	8006db0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fcc1 	bl	8007730 <USBD_CtlError>
          break;
 8006dae:	bf00      	nop
      }
      break;
 8006db0:	e004      	b.n	8006dbc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fcbb 	bl	8007730 <USBD_CtlError>
      break;
 8006dba:	bf00      	nop
  }

  return ret;
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop

08006dc8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	d003      	beq.n	8006dea <USBD_StdItfReq+0x22>
 8006de2:	2b40      	cmp	r3, #64	; 0x40
 8006de4:	d001      	beq.n	8006dea <USBD_StdItfReq+0x22>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d12a      	bne.n	8006e40 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df0:	3b01      	subs	r3, #1
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d81d      	bhi.n	8006e32 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	889b      	ldrh	r3, [r3, #4]
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d813      	bhi.n	8006e28 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	4798      	blx	r3
 8006e0e:	4603      	mov	r3, r0
 8006e10:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	88db      	ldrh	r3, [r3, #6]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d110      	bne.n	8006e3c <USBD_StdItfReq+0x74>
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10d      	bne.n	8006e3c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fd4d 	bl	80078c0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e26:	e009      	b.n	8006e3c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fc80 	bl	8007730 <USBD_CtlError>
          break;
 8006e30:	e004      	b.n	8006e3c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fc7b 	bl	8007730 <USBD_CtlError>
          break;
 8006e3a:	e000      	b.n	8006e3e <USBD_StdItfReq+0x76>
          break;
 8006e3c:	bf00      	nop
      }
      break;
 8006e3e:	e004      	b.n	8006e4a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fc74 	bl	8007730 <USBD_CtlError>
      break;
 8006e48:	bf00      	nop
  }

  return USBD_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	889b      	ldrh	r3, [r3, #4]
 8006e66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e70:	2b20      	cmp	r3, #32
 8006e72:	d004      	beq.n	8006e7e <USBD_StdEPReq+0x2a>
 8006e74:	2b40      	cmp	r3, #64	; 0x40
 8006e76:	d002      	beq.n	8006e7e <USBD_StdEPReq+0x2a>
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d008      	beq.n	8006e8e <USBD_StdEPReq+0x3a>
 8006e7c:	e13d      	b.n	80070fa <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	4798      	blx	r3
      break;
 8006e8c:	e13a      	b.n	8007104 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	d10a      	bne.n	8006eb0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
 8006eae:	e12a      	b.n	8007106 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	785b      	ldrb	r3, [r3, #1]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d03e      	beq.n	8006f36 <USBD_StdEPReq+0xe2>
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d002      	beq.n	8006ec2 <USBD_StdEPReq+0x6e>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d070      	beq.n	8006fa2 <USBD_StdEPReq+0x14e>
 8006ec0:	e115      	b.n	80070ee <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d002      	beq.n	8006ed2 <USBD_StdEPReq+0x7e>
 8006ecc:	2b03      	cmp	r3, #3
 8006ece:	d015      	beq.n	8006efc <USBD_StdEPReq+0xa8>
 8006ed0:	e02b      	b.n	8006f2a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00c      	beq.n	8006ef2 <USBD_StdEPReq+0x9e>
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	2b80      	cmp	r3, #128	; 0x80
 8006edc:	d009      	beq.n	8006ef2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 f85a 	bl	8007f9c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ee8:	2180      	movs	r1, #128	; 0x80
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 f856 	bl	8007f9c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ef0:	e020      	b.n	8006f34 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fc1b 	bl	8007730 <USBD_CtlError>
              break;
 8006efa:	e01b      	b.n	8006f34 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	885b      	ldrh	r3, [r3, #2]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10e      	bne.n	8006f22 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00b      	beq.n	8006f22 <USBD_StdEPReq+0xce>
 8006f0a:	7bbb      	ldrb	r3, [r7, #14]
 8006f0c:	2b80      	cmp	r3, #128	; 0x80
 8006f0e:	d008      	beq.n	8006f22 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	88db      	ldrh	r3, [r3, #6]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d104      	bne.n	8006f22 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 f83d 	bl	8007f9c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fccc 	bl	80078c0 <USBD_CtlSendStatus>

              break;
 8006f28:	e004      	b.n	8006f34 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fbff 	bl	8007730 <USBD_CtlError>
              break;
 8006f32:	bf00      	nop
          }
          break;
 8006f34:	e0e0      	b.n	80070f8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d002      	beq.n	8006f46 <USBD_StdEPReq+0xf2>
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d015      	beq.n	8006f70 <USBD_StdEPReq+0x11c>
 8006f44:	e026      	b.n	8006f94 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00c      	beq.n	8006f66 <USBD_StdEPReq+0x112>
 8006f4c:	7bbb      	ldrb	r3, [r7, #14]
 8006f4e:	2b80      	cmp	r3, #128	; 0x80
 8006f50:	d009      	beq.n	8006f66 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f52:	7bbb      	ldrb	r3, [r7, #14]
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 f820 	bl	8007f9c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f5c:	2180      	movs	r1, #128	; 0x80
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 f81c 	bl	8007f9c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f64:	e01c      	b.n	8006fa0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fbe1 	bl	8007730 <USBD_CtlError>
              break;
 8006f6e:	e017      	b.n	8006fa0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	885b      	ldrh	r3, [r3, #2]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d112      	bne.n	8006f9e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d004      	beq.n	8006f8c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 f827 	bl	8007fda <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fc97 	bl	80078c0 <USBD_CtlSendStatus>
              }
              break;
 8006f92:	e004      	b.n	8006f9e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fbca 	bl	8007730 <USBD_CtlError>
              break;
 8006f9c:	e000      	b.n	8006fa0 <USBD_StdEPReq+0x14c>
              break;
 8006f9e:	bf00      	nop
          }
          break;
 8006fa0:	e0aa      	b.n	80070f8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d002      	beq.n	8006fb2 <USBD_StdEPReq+0x15e>
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d032      	beq.n	8007016 <USBD_StdEPReq+0x1c2>
 8006fb0:	e097      	b.n	80070e2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d007      	beq.n	8006fc8 <USBD_StdEPReq+0x174>
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	2b80      	cmp	r3, #128	; 0x80
 8006fbc:	d004      	beq.n	8006fc8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fbb5 	bl	8007730 <USBD_CtlError>
                break;
 8006fc6:	e091      	b.n	80070ec <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	da0b      	bge.n	8006fe8 <USBD_StdEPReq+0x194>
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	3310      	adds	r3, #16
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	e00b      	b.n	8007000 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fe8:	7bbb      	ldrb	r3, [r7, #14]
 8006fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	3304      	adds	r3, #4
 8007000:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2202      	movs	r2, #2
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fbf8 	bl	8007804 <USBD_CtlSendData>
              break;
 8007014:	e06a      	b.n	80070ec <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007016:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800701a:	2b00      	cmp	r3, #0
 800701c:	da11      	bge.n	8007042 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800701e:	7bbb      	ldrb	r3, [r7, #14]
 8007020:	f003 020f 	and.w	r2, r3, #15
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	3318      	adds	r3, #24
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d117      	bne.n	8007068 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fb78 	bl	8007730 <USBD_CtlError>
                  break;
 8007040:	e054      	b.n	80070ec <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007042:	7bbb      	ldrb	r3, [r7, #14]
 8007044:	f003 020f 	and.w	r2, r3, #15
 8007048:	6879      	ldr	r1, [r7, #4]
 800704a:	4613      	mov	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	440b      	add	r3, r1
 8007054:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d104      	bne.n	8007068 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fb65 	bl	8007730 <USBD_CtlError>
                  break;
 8007066:	e041      	b.n	80070ec <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007068:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800706c:	2b00      	cmp	r3, #0
 800706e:	da0b      	bge.n	8007088 <USBD_StdEPReq+0x234>
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007076:	4613      	mov	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	3310      	adds	r3, #16
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	4413      	add	r3, r2
 8007084:	3304      	adds	r3, #4
 8007086:	e00b      	b.n	80070a0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007088:	7bbb      	ldrb	r3, [r7, #14]
 800708a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800708e:	4613      	mov	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	4413      	add	r3, r2
 800709e:	3304      	adds	r3, #4
 80070a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80070a2:	7bbb      	ldrb	r3, [r7, #14]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <USBD_StdEPReq+0x25a>
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	2b80      	cmp	r3, #128	; 0x80
 80070ac:	d103      	bne.n	80070b6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2200      	movs	r2, #0
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	e00e      	b.n	80070d4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80070b6:	7bbb      	ldrb	r3, [r7, #14]
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 ffac 	bl	8008018 <USBD_LL_IsStallEP>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2201      	movs	r2, #1
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	e002      	b.n	80070d4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2200      	movs	r2, #0
 80070d2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2202      	movs	r2, #2
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fb92 	bl	8007804 <USBD_CtlSendData>
              break;
 80070e0:	e004      	b.n	80070ec <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fb23 	bl	8007730 <USBD_CtlError>
              break;
 80070ea:	bf00      	nop
          }
          break;
 80070ec:	e004      	b.n	80070f8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fb1d 	bl	8007730 <USBD_CtlError>
          break;
 80070f6:	bf00      	nop
      }
      break;
 80070f8:	e004      	b.n	8007104 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fb17 	bl	8007730 <USBD_CtlError>
      break;
 8007102:	bf00      	nop
  }

  return ret;
 8007104:	7bfb      	ldrb	r3, [r7, #15]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800711a:	2300      	movs	r3, #0
 800711c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800711e:	2300      	movs	r3, #0
 8007120:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	885b      	ldrh	r3, [r3, #2]
 800712a:	0a1b      	lsrs	r3, r3, #8
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	2b06      	cmp	r3, #6
 8007132:	f200 8128 	bhi.w	8007386 <USBD_GetDescriptor+0x276>
 8007136:	a201      	add	r2, pc, #4	; (adr r2, 800713c <USBD_GetDescriptor+0x2c>)
 8007138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713c:	08007159 	.word	0x08007159
 8007140:	08007171 	.word	0x08007171
 8007144:	080071b1 	.word	0x080071b1
 8007148:	08007387 	.word	0x08007387
 800714c:	08007387 	.word	0x08007387
 8007150:	08007327 	.word	0x08007327
 8007154:	08007353 	.word	0x08007353
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	7c12      	ldrb	r2, [r2, #16]
 8007164:	f107 0108 	add.w	r1, r7, #8
 8007168:	4610      	mov	r0, r2
 800716a:	4798      	blx	r3
 800716c:	60f8      	str	r0, [r7, #12]
      break;
 800716e:	e112      	b.n	8007396 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	7c1b      	ldrb	r3, [r3, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10d      	bne.n	8007194 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800717e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007180:	f107 0208 	add.w	r2, r7, #8
 8007184:	4610      	mov	r0, r2
 8007186:	4798      	blx	r3
 8007188:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	3301      	adds	r3, #1
 800718e:	2202      	movs	r2, #2
 8007190:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007192:	e100      	b.n	8007396 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	f107 0208 	add.w	r2, r7, #8
 80071a0:	4610      	mov	r0, r2
 80071a2:	4798      	blx	r3
 80071a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3301      	adds	r3, #1
 80071aa:	2202      	movs	r2, #2
 80071ac:	701a      	strb	r2, [r3, #0]
      break;
 80071ae:	e0f2      	b.n	8007396 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	885b      	ldrh	r3, [r3, #2]
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b05      	cmp	r3, #5
 80071b8:	f200 80ac 	bhi.w	8007314 <USBD_GetDescriptor+0x204>
 80071bc:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <USBD_GetDescriptor+0xb4>)
 80071be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c2:	bf00      	nop
 80071c4:	080071dd 	.word	0x080071dd
 80071c8:	08007211 	.word	0x08007211
 80071cc:	08007245 	.word	0x08007245
 80071d0:	08007279 	.word	0x08007279
 80071d4:	080072ad 	.word	0x080072ad
 80071d8:	080072e1 	.word	0x080072e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00b      	beq.n	8007200 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	7c12      	ldrb	r2, [r2, #16]
 80071f4:	f107 0108 	add.w	r1, r7, #8
 80071f8:	4610      	mov	r0, r2
 80071fa:	4798      	blx	r3
 80071fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071fe:	e091      	b.n	8007324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa94 	bl	8007730 <USBD_CtlError>
            err++;
 8007208:	7afb      	ldrb	r3, [r7, #11]
 800720a:	3301      	adds	r3, #1
 800720c:	72fb      	strb	r3, [r7, #11]
          break;
 800720e:	e089      	b.n	8007324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00b      	beq.n	8007234 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	7c12      	ldrb	r2, [r2, #16]
 8007228:	f107 0108 	add.w	r1, r7, #8
 800722c:	4610      	mov	r0, r2
 800722e:	4798      	blx	r3
 8007230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007232:	e077      	b.n	8007324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fa7a 	bl	8007730 <USBD_CtlError>
            err++;
 800723c:	7afb      	ldrb	r3, [r7, #11]
 800723e:	3301      	adds	r3, #1
 8007240:	72fb      	strb	r3, [r7, #11]
          break;
 8007242:	e06f      	b.n	8007324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00b      	beq.n	8007268 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	7c12      	ldrb	r2, [r2, #16]
 800725c:	f107 0108 	add.w	r1, r7, #8
 8007260:	4610      	mov	r0, r2
 8007262:	4798      	blx	r3
 8007264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007266:	e05d      	b.n	8007324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fa60 	bl	8007730 <USBD_CtlError>
            err++;
 8007270:	7afb      	ldrb	r3, [r7, #11]
 8007272:	3301      	adds	r3, #1
 8007274:	72fb      	strb	r3, [r7, #11]
          break;
 8007276:	e055      	b.n	8007324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00b      	beq.n	800729c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	7c12      	ldrb	r2, [r2, #16]
 8007290:	f107 0108 	add.w	r1, r7, #8
 8007294:	4610      	mov	r0, r2
 8007296:	4798      	blx	r3
 8007298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800729a:	e043      	b.n	8007324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fa46 	bl	8007730 <USBD_CtlError>
            err++;
 80072a4:	7afb      	ldrb	r3, [r7, #11]
 80072a6:	3301      	adds	r3, #1
 80072a8:	72fb      	strb	r3, [r7, #11]
          break;
 80072aa:	e03b      	b.n	8007324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00b      	beq.n	80072d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	7c12      	ldrb	r2, [r2, #16]
 80072c4:	f107 0108 	add.w	r1, r7, #8
 80072c8:	4610      	mov	r0, r2
 80072ca:	4798      	blx	r3
 80072cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ce:	e029      	b.n	8007324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fa2c 	bl	8007730 <USBD_CtlError>
            err++;
 80072d8:	7afb      	ldrb	r3, [r7, #11]
 80072da:	3301      	adds	r3, #1
 80072dc:	72fb      	strb	r3, [r7, #11]
          break;
 80072de:	e021      	b.n	8007324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00b      	beq.n	8007304 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	7c12      	ldrb	r2, [r2, #16]
 80072f8:	f107 0108 	add.w	r1, r7, #8
 80072fc:	4610      	mov	r0, r2
 80072fe:	4798      	blx	r3
 8007300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007302:	e00f      	b.n	8007324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fa12 	bl	8007730 <USBD_CtlError>
            err++;
 800730c:	7afb      	ldrb	r3, [r7, #11]
 800730e:	3301      	adds	r3, #1
 8007310:	72fb      	strb	r3, [r7, #11]
          break;
 8007312:	e007      	b.n	8007324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fa0a 	bl	8007730 <USBD_CtlError>
          err++;
 800731c:	7afb      	ldrb	r3, [r7, #11]
 800731e:	3301      	adds	r3, #1
 8007320:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007322:	e038      	b.n	8007396 <USBD_GetDescriptor+0x286>
 8007324:	e037      	b.n	8007396 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	7c1b      	ldrb	r3, [r3, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d109      	bne.n	8007342 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007336:	f107 0208 	add.w	r2, r7, #8
 800733a:	4610      	mov	r0, r2
 800733c:	4798      	blx	r3
 800733e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007340:	e029      	b.n	8007396 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007342:	6839      	ldr	r1, [r7, #0]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f9f3 	bl	8007730 <USBD_CtlError>
        err++;
 800734a:	7afb      	ldrb	r3, [r7, #11]
 800734c:	3301      	adds	r3, #1
 800734e:	72fb      	strb	r3, [r7, #11]
      break;
 8007350:	e021      	b.n	8007396 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	7c1b      	ldrb	r3, [r3, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10d      	bne.n	8007376 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007362:	f107 0208 	add.w	r2, r7, #8
 8007366:	4610      	mov	r0, r2
 8007368:	4798      	blx	r3
 800736a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	3301      	adds	r3, #1
 8007370:	2207      	movs	r2, #7
 8007372:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007374:	e00f      	b.n	8007396 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f9d9 	bl	8007730 <USBD_CtlError>
        err++;
 800737e:	7afb      	ldrb	r3, [r7, #11]
 8007380:	3301      	adds	r3, #1
 8007382:	72fb      	strb	r3, [r7, #11]
      break;
 8007384:	e007      	b.n	8007396 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f9d1 	bl	8007730 <USBD_CtlError>
      err++;
 800738e:	7afb      	ldrb	r3, [r7, #11]
 8007390:	3301      	adds	r3, #1
 8007392:	72fb      	strb	r3, [r7, #11]
      break;
 8007394:	bf00      	nop
  }

  if (err != 0U)
 8007396:	7afb      	ldrb	r3, [r7, #11]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d11c      	bne.n	80073d6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800739c:	893b      	ldrh	r3, [r7, #8]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d011      	beq.n	80073c6 <USBD_GetDescriptor+0x2b6>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	88db      	ldrh	r3, [r3, #6]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00d      	beq.n	80073c6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	88da      	ldrh	r2, [r3, #6]
 80073ae:	893b      	ldrh	r3, [r7, #8]
 80073b0:	4293      	cmp	r3, r2
 80073b2:	bf28      	it	cs
 80073b4:	4613      	movcs	r3, r2
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80073ba:	893b      	ldrh	r3, [r7, #8]
 80073bc:	461a      	mov	r2, r3
 80073be:	68f9      	ldr	r1, [r7, #12]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 fa1f 	bl	8007804 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	88db      	ldrh	r3, [r3, #6]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d104      	bne.n	80073d8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fa76 	bl	80078c0 <USBD_CtlSendStatus>
 80073d4:	e000      	b.n	80073d8 <USBD_GetDescriptor+0x2c8>
    return;
 80073d6:	bf00      	nop
    }
  }
}
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop

080073e0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	889b      	ldrh	r3, [r3, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d130      	bne.n	8007454 <USBD_SetAddress+0x74>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	88db      	ldrh	r3, [r3, #6]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d12c      	bne.n	8007454 <USBD_SetAddress+0x74>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	885b      	ldrh	r3, [r3, #2]
 80073fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007400:	d828      	bhi.n	8007454 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	885b      	ldrh	r3, [r3, #2]
 8007406:	b2db      	uxtb	r3, r3
 8007408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800740c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007414:	2b03      	cmp	r3, #3
 8007416:	d104      	bne.n	8007422 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f988 	bl	8007730 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007420:	e01c      	b.n	800745c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	7bfa      	ldrb	r2, [r7, #15]
 8007426:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fe1e 	bl	8008070 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fa43 	bl	80078c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d004      	beq.n	800744a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007448:	e008      	b.n	800745c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007452:	e003      	b.n	800745c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f96a 	bl	8007730 <USBD_CtlError>
  }
}
 800745c:	bf00      	nop
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	885b      	ldrh	r3, [r3, #2]
 8007472:	b2da      	uxtb	r2, r3
 8007474:	4b41      	ldr	r3, [pc, #260]	; (800757c <USBD_SetConfig+0x118>)
 8007476:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007478:	4b40      	ldr	r3, [pc, #256]	; (800757c <USBD_SetConfig+0x118>)
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d904      	bls.n	800748a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f954 	bl	8007730 <USBD_CtlError>
 8007488:	e075      	b.n	8007576 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007490:	2b02      	cmp	r3, #2
 8007492:	d002      	beq.n	800749a <USBD_SetConfig+0x36>
 8007494:	2b03      	cmp	r3, #3
 8007496:	d023      	beq.n	80074e0 <USBD_SetConfig+0x7c>
 8007498:	e062      	b.n	8007560 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800749a:	4b38      	ldr	r3, [pc, #224]	; (800757c <USBD_SetConfig+0x118>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d01a      	beq.n	80074d8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80074a2:	4b36      	ldr	r3, [pc, #216]	; (800757c <USBD_SetConfig+0x118>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2203      	movs	r2, #3
 80074b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80074b4:	4b31      	ldr	r3, [pc, #196]	; (800757c <USBD_SetConfig+0x118>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7ff f9f4 	bl	80068a8 <USBD_SetClassConfig>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d104      	bne.n	80074d0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f931 	bl	8007730 <USBD_CtlError>
            return;
 80074ce:	e052      	b.n	8007576 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f9f5 	bl	80078c0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80074d6:	e04e      	b.n	8007576 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f9f1 	bl	80078c0 <USBD_CtlSendStatus>
        break;
 80074de:	e04a      	b.n	8007576 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80074e0:	4b26      	ldr	r3, [pc, #152]	; (800757c <USBD_SetConfig+0x118>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d112      	bne.n	800750e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80074f0:	4b22      	ldr	r3, [pc, #136]	; (800757c <USBD_SetConfig+0x118>)
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	461a      	mov	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80074fa:	4b20      	ldr	r3, [pc, #128]	; (800757c <USBD_SetConfig+0x118>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f7ff f9f0 	bl	80068e6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f9da 	bl	80078c0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800750c:	e033      	b.n	8007576 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800750e:	4b1b      	ldr	r3, [pc, #108]	; (800757c <USBD_SetConfig+0x118>)
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	429a      	cmp	r2, r3
 800751a:	d01d      	beq.n	8007558 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	b2db      	uxtb	r3, r3
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff f9de 	bl	80068e6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800752a:	4b14      	ldr	r3, [pc, #80]	; (800757c <USBD_SetConfig+0x118>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007534:	4b11      	ldr	r3, [pc, #68]	; (800757c <USBD_SetConfig+0x118>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7ff f9b4 	bl	80068a8 <USBD_SetClassConfig>
 8007540:	4603      	mov	r3, r0
 8007542:	2b02      	cmp	r3, #2
 8007544:	d104      	bne.n	8007550 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f8f1 	bl	8007730 <USBD_CtlError>
            return;
 800754e:	e012      	b.n	8007576 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f9b5 	bl	80078c0 <USBD_CtlSendStatus>
        break;
 8007556:	e00e      	b.n	8007576 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f9b1 	bl	80078c0 <USBD_CtlSendStatus>
        break;
 800755e:	e00a      	b.n	8007576 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f8e4 	bl	8007730 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007568:	4b04      	ldr	r3, [pc, #16]	; (800757c <USBD_SetConfig+0x118>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff f9b9 	bl	80068e6 <USBD_ClrClassConfig>
        break;
 8007574:	bf00      	nop
    }
  }
}
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	200001bd 	.word	0x200001bd

08007580 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	88db      	ldrh	r3, [r3, #6]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d004      	beq.n	800759c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f8cb 	bl	8007730 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800759a:	e021      	b.n	80075e0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	db17      	blt.n	80075d6 <USBD_GetConfig+0x56>
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	dd02      	ble.n	80075b0 <USBD_GetConfig+0x30>
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d00b      	beq.n	80075c6 <USBD_GetConfig+0x46>
 80075ae:	e012      	b.n	80075d6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3308      	adds	r3, #8
 80075ba:	2201      	movs	r2, #1
 80075bc:	4619      	mov	r1, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f920 	bl	8007804 <USBD_CtlSendData>
        break;
 80075c4:	e00c      	b.n	80075e0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	3304      	adds	r3, #4
 80075ca:	2201      	movs	r2, #1
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f918 	bl	8007804 <USBD_CtlSendData>
        break;
 80075d4:	e004      	b.n	80075e0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 f8a9 	bl	8007730 <USBD_CtlError>
        break;
 80075de:	bf00      	nop
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f8:	3b01      	subs	r3, #1
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d81e      	bhi.n	800763c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	88db      	ldrh	r3, [r3, #6]
 8007602:	2b02      	cmp	r3, #2
 8007604:	d004      	beq.n	8007610 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f891 	bl	8007730 <USBD_CtlError>
        break;
 800760e:	e01a      	b.n	8007646 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800761c:	2b00      	cmp	r3, #0
 800761e:	d005      	beq.n	800762c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f043 0202 	orr.w	r2, r3, #2
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	330c      	adds	r3, #12
 8007630:	2202      	movs	r2, #2
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f8e5 	bl	8007804 <USBD_CtlSendData>
      break;
 800763a:	e004      	b.n	8007646 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f876 	bl	8007730 <USBD_CtlError>
      break;
 8007644:	bf00      	nop
  }
}
 8007646:	bf00      	nop
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b082      	sub	sp, #8
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	885b      	ldrh	r3, [r3, #2]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d106      	bne.n	800766e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f929 	bl	80078c0 <USBD_CtlSendStatus>
  }
}
 800766e:	bf00      	nop
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007686:	3b01      	subs	r3, #1
 8007688:	2b02      	cmp	r3, #2
 800768a:	d80b      	bhi.n	80076a4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	885b      	ldrh	r3, [r3, #2]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d10c      	bne.n	80076ae <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f90f 	bl	80078c0 <USBD_CtlSendStatus>
      }
      break;
 80076a2:	e004      	b.n	80076ae <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f842 	bl	8007730 <USBD_CtlError>
      break;
 80076ac:	e000      	b.n	80076b0 <USBD_ClrFeature+0x3a>
      break;
 80076ae:	bf00      	nop
  }
}
 80076b0:	bf00      	nop
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781a      	ldrb	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	785a      	ldrb	r2, [r3, #1]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	3302      	adds	r3, #2
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	b29a      	uxth	r2, r3
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	3303      	adds	r3, #3
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	021b      	lsls	r3, r3, #8
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	4413      	add	r3, r2
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	3304      	adds	r3, #4
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	3305      	adds	r3, #5
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	021b      	lsls	r3, r3, #8
 8007700:	b29b      	uxth	r3, r3
 8007702:	4413      	add	r3, r2
 8007704:	b29a      	uxth	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	3306      	adds	r3, #6
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	b29a      	uxth	r2, r3
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	3307      	adds	r3, #7
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	b29b      	uxth	r3, r3
 800771a:	021b      	lsls	r3, r3, #8
 800771c:	b29b      	uxth	r3, r3
 800771e:	4413      	add	r3, r2
 8007720:	b29a      	uxth	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	80da      	strh	r2, [r3, #6]

}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	bc80      	pop	{r7}
 800772e:	4770      	bx	lr

08007730 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800773a:	2180      	movs	r1, #128	; 0x80
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fc2d 	bl	8007f9c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007742:	2100      	movs	r1, #0
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fc29 	bl	8007f9c <USBD_LL_StallEP>
}
 800774a:	bf00      	nop
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b086      	sub	sp, #24
 8007756:	af00      	add	r7, sp, #0
 8007758:	60f8      	str	r0, [r7, #12]
 800775a:	60b9      	str	r1, [r7, #8]
 800775c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800775e:	2300      	movs	r3, #0
 8007760:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d032      	beq.n	80077ce <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 f834 	bl	80077d6 <USBD_GetLen>
 800776e:	4603      	mov	r3, r0
 8007770:	3301      	adds	r3, #1
 8007772:	b29b      	uxth	r3, r3
 8007774:	005b      	lsls	r3, r3, #1
 8007776:	b29a      	uxth	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800777c:	7dfb      	ldrb	r3, [r7, #23]
 800777e:	1c5a      	adds	r2, r3, #1
 8007780:	75fa      	strb	r2, [r7, #23]
 8007782:	461a      	mov	r2, r3
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	4413      	add	r3, r2
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	7812      	ldrb	r2, [r2, #0]
 800778c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	75fa      	strb	r2, [r7, #23]
 8007794:	461a      	mov	r2, r3
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	4413      	add	r3, r2
 800779a:	2203      	movs	r2, #3
 800779c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800779e:	e012      	b.n	80077c6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	60fa      	str	r2, [r7, #12]
 80077a6:	7dfa      	ldrb	r2, [r7, #23]
 80077a8:	1c51      	adds	r1, r2, #1
 80077aa:	75f9      	strb	r1, [r7, #23]
 80077ac:	4611      	mov	r1, r2
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	440a      	add	r2, r1
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80077b6:	7dfb      	ldrb	r3, [r7, #23]
 80077b8:	1c5a      	adds	r2, r3, #1
 80077ba:	75fa      	strb	r2, [r7, #23]
 80077bc:	461a      	mov	r2, r3
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	4413      	add	r3, r2
 80077c2:	2200      	movs	r2, #0
 80077c4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e8      	bne.n	80077a0 <USBD_GetString+0x4e>
    }
  }
}
 80077ce:	bf00      	nop
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b085      	sub	sp, #20
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80077e2:	e005      	b.n	80077f0 <USBD_GetLen+0x1a>
  {
    len++;
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	3301      	adds	r3, #1
 80077e8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	3301      	adds	r3, #1
 80077ee:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1f5      	bne.n	80077e4 <USBD_GetLen+0xe>
  }

  return len;
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	bc80      	pop	{r7}
 8007802:	4770      	bx	lr

08007804 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	4613      	mov	r3, r2
 8007810:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2202      	movs	r2, #2
 8007816:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800781a:	88fa      	ldrh	r2, [r7, #6]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007820:	88fa      	ldrh	r2, [r7, #6]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007826:	88fb      	ldrh	r3, [r7, #6]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	2100      	movs	r1, #0
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 fc3e 	bl	80080ae <USBD_LL_Transmit>

  return USBD_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	4613      	mov	r3, r2
 8007848:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800784a:	88fb      	ldrh	r3, [r7, #6]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	2100      	movs	r1, #0
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 fc2c 	bl	80080ae <USBD_LL_Transmit>

  return USBD_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2203      	movs	r2, #3
 8007872:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007876:	88fa      	ldrh	r2, [r7, #6]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800787e:	88fa      	ldrh	r2, [r7, #6]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007886:	88fb      	ldrh	r3, [r7, #6]
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	2100      	movs	r1, #0
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 fc31 	bl	80080f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	4613      	mov	r3, r2
 80078a8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078aa:	88fb      	ldrh	r3, [r7, #6]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	2100      	movs	r1, #0
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 fc1f 	bl	80080f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2204      	movs	r2, #4
 80078cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078d0:	2300      	movs	r3, #0
 80078d2:	2200      	movs	r2, #0
 80078d4:	2100      	movs	r1, #0
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fbe9 	bl	80080ae <USBD_LL_Transmit>

  return USBD_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b082      	sub	sp, #8
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2205      	movs	r2, #5
 80078f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078f6:	2300      	movs	r3, #0
 80078f8:	2200      	movs	r2, #0
 80078fa:	2100      	movs	r1, #0
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fbf9 	bl	80080f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007910:	2200      	movs	r2, #0
 8007912:	4912      	ldr	r1, [pc, #72]	; (800795c <MX_USB_DEVICE_Init+0x50>)
 8007914:	4812      	ldr	r0, [pc, #72]	; (8007960 <MX_USB_DEVICE_Init+0x54>)
 8007916:	f7fe ff6d 	bl	80067f4 <USBD_Init>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007920:	f7f8 ffe8 	bl	80008f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007924:	490f      	ldr	r1, [pc, #60]	; (8007964 <MX_USB_DEVICE_Init+0x58>)
 8007926:	480e      	ldr	r0, [pc, #56]	; (8007960 <MX_USB_DEVICE_Init+0x54>)
 8007928:	f7fe ff8f 	bl	800684a <USBD_RegisterClass>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007932:	f7f8 ffdf 	bl	80008f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007936:	490c      	ldr	r1, [pc, #48]	; (8007968 <MX_USB_DEVICE_Init+0x5c>)
 8007938:	4809      	ldr	r0, [pc, #36]	; (8007960 <MX_USB_DEVICE_Init+0x54>)
 800793a:	f7fe feef 	bl	800671c <USBD_CDC_RegisterInterface>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007944:	f7f8 ffd6 	bl	80008f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007948:	4805      	ldr	r0, [pc, #20]	; (8007960 <MX_USB_DEVICE_Init+0x54>)
 800794a:	f7fe ff97 	bl	800687c <USBD_Start>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007954:	f7f8 ffce 	bl	80008f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007958:	bf00      	nop
 800795a:	bd80      	pop	{r7, pc}
 800795c:	20000140 	.word	0x20000140
 8007960:	20000504 	.word	0x20000504
 8007964:	2000002c 	.word	0x2000002c
 8007968:	20000130 	.word	0x20000130

0800796c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007970:	2200      	movs	r2, #0
 8007972:	4905      	ldr	r1, [pc, #20]	; (8007988 <CDC_Init_FS+0x1c>)
 8007974:	4805      	ldr	r0, [pc, #20]	; (800798c <CDC_Init_FS+0x20>)
 8007976:	f7fe fee7 	bl	8006748 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800797a:	4905      	ldr	r1, [pc, #20]	; (8007990 <CDC_Init_FS+0x24>)
 800797c:	4803      	ldr	r0, [pc, #12]	; (800798c <CDC_Init_FS+0x20>)
 800797e:	f7fe fefc 	bl	800677a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007982:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007984:	4618      	mov	r0, r3
 8007986:	bd80      	pop	{r7, pc}
 8007988:	20000bb0 	.word	0x20000bb0
 800798c:	20000504 	.word	0x20000504
 8007990:	200007c8 	.word	0x200007c8

08007994 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007994:	b480      	push	{r7}
 8007996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007998:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800799a:	4618      	mov	r0, r3
 800799c:	46bd      	mov	sp, r7
 800799e:	bc80      	pop	{r7}
 80079a0:	4770      	bx	lr
	...

080079a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	4603      	mov	r3, r0
 80079ac:	6039      	str	r1, [r7, #0]
 80079ae:	71fb      	strb	r3, [r7, #7]
 80079b0:	4613      	mov	r3, r2
 80079b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	2b23      	cmp	r3, #35	; 0x23
 80079b8:	d84a      	bhi.n	8007a50 <CDC_Control_FS+0xac>
 80079ba:	a201      	add	r2, pc, #4	; (adr r2, 80079c0 <CDC_Control_FS+0x1c>)
 80079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c0:	08007a51 	.word	0x08007a51
 80079c4:	08007a51 	.word	0x08007a51
 80079c8:	08007a51 	.word	0x08007a51
 80079cc:	08007a51 	.word	0x08007a51
 80079d0:	08007a51 	.word	0x08007a51
 80079d4:	08007a51 	.word	0x08007a51
 80079d8:	08007a51 	.word	0x08007a51
 80079dc:	08007a51 	.word	0x08007a51
 80079e0:	08007a51 	.word	0x08007a51
 80079e4:	08007a51 	.word	0x08007a51
 80079e8:	08007a51 	.word	0x08007a51
 80079ec:	08007a51 	.word	0x08007a51
 80079f0:	08007a51 	.word	0x08007a51
 80079f4:	08007a51 	.word	0x08007a51
 80079f8:	08007a51 	.word	0x08007a51
 80079fc:	08007a51 	.word	0x08007a51
 8007a00:	08007a51 	.word	0x08007a51
 8007a04:	08007a51 	.word	0x08007a51
 8007a08:	08007a51 	.word	0x08007a51
 8007a0c:	08007a51 	.word	0x08007a51
 8007a10:	08007a51 	.word	0x08007a51
 8007a14:	08007a51 	.word	0x08007a51
 8007a18:	08007a51 	.word	0x08007a51
 8007a1c:	08007a51 	.word	0x08007a51
 8007a20:	08007a51 	.word	0x08007a51
 8007a24:	08007a51 	.word	0x08007a51
 8007a28:	08007a51 	.word	0x08007a51
 8007a2c:	08007a51 	.word	0x08007a51
 8007a30:	08007a51 	.word	0x08007a51
 8007a34:	08007a51 	.word	0x08007a51
 8007a38:	08007a51 	.word	0x08007a51
 8007a3c:	08007a51 	.word	0x08007a51
 8007a40:	08007a51 	.word	0x08007a51
 8007a44:	08007a51 	.word	0x08007a51
 8007a48:	08007a51 	.word	0x08007a51
 8007a4c:	08007a51 	.word	0x08007a51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a50:	bf00      	nop
  }

  return (USBD_OK);
 8007a52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bc80      	pop	{r7}
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop

08007a60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	4805      	ldr	r0, [pc, #20]	; (8007a84 <CDC_Receive_FS+0x24>)
 8007a6e:	f7fe fe84 	bl	800677a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a72:	4804      	ldr	r0, [pc, #16]	; (8007a84 <CDC_Receive_FS+0x24>)
 8007a74:	f7fe fe94 	bl	80067a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20000504 	.word	0x20000504

08007a88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	6039      	str	r1, [r7, #0]
 8007a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2212      	movs	r2, #18
 8007a98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a9a:	4b03      	ldr	r3, [pc, #12]	; (8007aa8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bc80      	pop	{r7}
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	2000015c 	.word	0x2000015c

08007aac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	6039      	str	r1, [r7, #0]
 8007ab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2204      	movs	r2, #4
 8007abc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007abe:	4b03      	ldr	r3, [pc, #12]	; (8007acc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bc80      	pop	{r7}
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	20000170 	.word	0x20000170

08007ad0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	6039      	str	r1, [r7, #0]
 8007ada:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d105      	bne.n	8007aee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	4907      	ldr	r1, [pc, #28]	; (8007b04 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ae6:	4808      	ldr	r0, [pc, #32]	; (8007b08 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ae8:	f7ff fe33 	bl	8007752 <USBD_GetString>
 8007aec:	e004      	b.n	8007af8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	4904      	ldr	r1, [pc, #16]	; (8007b04 <USBD_FS_ProductStrDescriptor+0x34>)
 8007af2:	4805      	ldr	r0, [pc, #20]	; (8007b08 <USBD_FS_ProductStrDescriptor+0x38>)
 8007af4:	f7ff fe2d 	bl	8007752 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007af8:	4b02      	ldr	r3, [pc, #8]	; (8007b04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	20000f98 	.word	0x20000f98
 8007b08:	0800827c 	.word	0x0800827c

08007b0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	6039      	str	r1, [r7, #0]
 8007b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	4904      	ldr	r1, [pc, #16]	; (8007b2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b1c:	4804      	ldr	r0, [pc, #16]	; (8007b30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b1e:	f7ff fe18 	bl	8007752 <USBD_GetString>
  return USBD_StrDesc;
 8007b22:	4b02      	ldr	r3, [pc, #8]	; (8007b2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	20000f98 	.word	0x20000f98
 8007b30:	08008294 	.word	0x08008294

08007b34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	6039      	str	r1, [r7, #0]
 8007b3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	221a      	movs	r2, #26
 8007b44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b46:	f000 f843 	bl	8007bd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b4a:	4b02      	ldr	r3, [pc, #8]	; (8007b54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20000174 	.word	0x20000174

08007b58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	6039      	str	r1, [r7, #0]
 8007b62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b64:	79fb      	ldrb	r3, [r7, #7]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d105      	bne.n	8007b76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	4907      	ldr	r1, [pc, #28]	; (8007b8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b6e:	4808      	ldr	r0, [pc, #32]	; (8007b90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b70:	f7ff fdef 	bl	8007752 <USBD_GetString>
 8007b74:	e004      	b.n	8007b80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	4904      	ldr	r1, [pc, #16]	; (8007b8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b7a:	4805      	ldr	r0, [pc, #20]	; (8007b90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b7c:	f7ff fde9 	bl	8007752 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b80:	4b02      	ldr	r3, [pc, #8]	; (8007b8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	20000f98 	.word	0x20000f98
 8007b90:	080082a8 	.word	0x080082a8

08007b94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	6039      	str	r1, [r7, #0]
 8007b9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ba0:	79fb      	ldrb	r3, [r7, #7]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d105      	bne.n	8007bb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	4907      	ldr	r1, [pc, #28]	; (8007bc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007baa:	4808      	ldr	r0, [pc, #32]	; (8007bcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bac:	f7ff fdd1 	bl	8007752 <USBD_GetString>
 8007bb0:	e004      	b.n	8007bbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	4904      	ldr	r1, [pc, #16]	; (8007bc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bb6:	4805      	ldr	r0, [pc, #20]	; (8007bcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bb8:	f7ff fdcb 	bl	8007752 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bbc:	4b02      	ldr	r3, [pc, #8]	; (8007bc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20000f98 	.word	0x20000f98
 8007bcc:	080082b4 	.word	0x080082b4

08007bd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bd6:	4b0f      	ldr	r3, [pc, #60]	; (8007c14 <Get_SerialNum+0x44>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bdc:	4b0e      	ldr	r3, [pc, #56]	; (8007c18 <Get_SerialNum+0x48>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007be2:	4b0e      	ldr	r3, [pc, #56]	; (8007c1c <Get_SerialNum+0x4c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4413      	add	r3, r2
 8007bee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bf6:	2208      	movs	r2, #8
 8007bf8:	4909      	ldr	r1, [pc, #36]	; (8007c20 <Get_SerialNum+0x50>)
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f814 	bl	8007c28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c00:	2204      	movs	r2, #4
 8007c02:	4908      	ldr	r1, [pc, #32]	; (8007c24 <Get_SerialNum+0x54>)
 8007c04:	68b8      	ldr	r0, [r7, #8]
 8007c06:	f000 f80f 	bl	8007c28 <IntToUnicode>
  }
}
 8007c0a:	bf00      	nop
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	1ffff7e8 	.word	0x1ffff7e8
 8007c18:	1ffff7ec 	.word	0x1ffff7ec
 8007c1c:	1ffff7f0 	.word	0x1ffff7f0
 8007c20:	20000176 	.word	0x20000176
 8007c24:	20000186 	.word	0x20000186

08007c28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b087      	sub	sp, #28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	4613      	mov	r3, r2
 8007c34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c36:	2300      	movs	r3, #0
 8007c38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	75fb      	strb	r3, [r7, #23]
 8007c3e:	e027      	b.n	8007c90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	0f1b      	lsrs	r3, r3, #28
 8007c44:	2b09      	cmp	r3, #9
 8007c46:	d80b      	bhi.n	8007c60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	0f1b      	lsrs	r3, r3, #28
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	4619      	mov	r1, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	440b      	add	r3, r1
 8007c58:	3230      	adds	r2, #48	; 0x30
 8007c5a:	b2d2      	uxtb	r2, r2
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	e00a      	b.n	8007c76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	0f1b      	lsrs	r3, r3, #28
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	005b      	lsls	r3, r3, #1
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	440b      	add	r3, r1
 8007c70:	3237      	adds	r2, #55	; 0x37
 8007c72:	b2d2      	uxtb	r2, r2
 8007c74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	011b      	lsls	r3, r3, #4
 8007c7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	3301      	adds	r3, #1
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	4413      	add	r3, r2
 8007c86:	2200      	movs	r2, #0
 8007c88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	75fb      	strb	r3, [r7, #23]
 8007c90:	7dfa      	ldrb	r2, [r7, #23]
 8007c92:	79fb      	ldrb	r3, [r7, #7]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d3d3      	bcc.n	8007c40 <IntToUnicode+0x18>
  }
}
 8007c98:	bf00      	nop
 8007c9a:	371c      	adds	r7, #28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bc80      	pop	{r7}
 8007ca0:	4770      	bx	lr
	...

08007ca4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a0d      	ldr	r2, [pc, #52]	; (8007ce8 <HAL_PCD_MspInit+0x44>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d113      	bne.n	8007cde <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007cb6:	4b0d      	ldr	r3, [pc, #52]	; (8007cec <HAL_PCD_MspInit+0x48>)
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	4a0c      	ldr	r2, [pc, #48]	; (8007cec <HAL_PCD_MspInit+0x48>)
 8007cbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007cc0:	61d3      	str	r3, [r2, #28]
 8007cc2:	4b0a      	ldr	r3, [pc, #40]	; (8007cec <HAL_PCD_MspInit+0x48>)
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cca:	60fb      	str	r3, [r7, #12]
 8007ccc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007cce:	2200      	movs	r2, #0
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	2014      	movs	r0, #20
 8007cd4:	f7f9 fb71 	bl	80013ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007cd8:	2014      	movs	r0, #20
 8007cda:	f7f9 fb8a 	bl	80013f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007cde:	bf00      	nop
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	40005c00 	.word	0x40005c00
 8007cec:	40021000 	.word	0x40021000

08007cf0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007d04:	4619      	mov	r1, r3
 8007d06:	4610      	mov	r0, r2
 8007d08:	f7fe fe00 	bl	800690c <USBD_LL_SetupStage>
}
 8007d0c:	bf00      	nop
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007d26:	78fa      	ldrb	r2, [r7, #3]
 8007d28:	6879      	ldr	r1, [r7, #4]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	440b      	add	r3, r1
 8007d34:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	78fb      	ldrb	r3, [r7, #3]
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	f7fe fe30 	bl	80069a2 <USBD_LL_DataOutStage>
}
 8007d42:	bf00      	nop
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b082      	sub	sp, #8
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	460b      	mov	r3, r1
 8007d54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007d5c:	78fa      	ldrb	r2, [r7, #3]
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	4613      	mov	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4413      	add	r3, r2
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	440b      	add	r3, r1
 8007d6a:	333c      	adds	r3, #60	; 0x3c
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	78fb      	ldrb	r3, [r7, #3]
 8007d70:	4619      	mov	r1, r3
 8007d72:	f7fe fe87 	bl	8006a84 <USBD_LL_DataInStage>
}
 8007d76:	bf00      	nop
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fe ff97 	bl	8006cc0 <USBD_LL_SOF>
}
 8007d92:	bf00      	nop
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007da2:	2301      	movs	r3, #1
 8007da4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d001      	beq.n	8007db2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007dae:	f7f8 fda1 	bl	80008f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007db8:	7bfa      	ldrb	r2, [r7, #15]
 8007dba:	4611      	mov	r1, r2
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fe ff47 	bl	8006c50 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe ff00 	bl	8006bce <USBD_LL_Reset>
}
 8007dce:	bf00      	nop
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fe ff41 	bl	8006c6e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d005      	beq.n	8007e00 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007df4:	4b04      	ldr	r3, [pc, #16]	; (8007e08 <HAL_PCD_SuspendCallback+0x30>)
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	4a03      	ldr	r2, [pc, #12]	; (8007e08 <HAL_PCD_SuspendCallback+0x30>)
 8007dfa:	f043 0306 	orr.w	r3, r3, #6
 8007dfe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	e000ed00 	.word	0xe000ed00

08007e0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe ff3b 	bl	8006c96 <USBD_LL_Resume>
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007e30:	4a28      	ldr	r2, [pc, #160]	; (8007ed4 <USBD_LL_Init+0xac>)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a26      	ldr	r2, [pc, #152]	; (8007ed4 <USBD_LL_Init+0xac>)
 8007e3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007e40:	4b24      	ldr	r3, [pc, #144]	; (8007ed4 <USBD_LL_Init+0xac>)
 8007e42:	4a25      	ldr	r2, [pc, #148]	; (8007ed8 <USBD_LL_Init+0xb0>)
 8007e44:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007e46:	4b23      	ldr	r3, [pc, #140]	; (8007ed4 <USBD_LL_Init+0xac>)
 8007e48:	2208      	movs	r2, #8
 8007e4a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007e4c:	4b21      	ldr	r3, [pc, #132]	; (8007ed4 <USBD_LL_Init+0xac>)
 8007e4e:	2202      	movs	r2, #2
 8007e50:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007e52:	4b20      	ldr	r3, [pc, #128]	; (8007ed4 <USBD_LL_Init+0xac>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007e58:	4b1e      	ldr	r3, [pc, #120]	; (8007ed4 <USBD_LL_Init+0xac>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007e5e:	4b1d      	ldr	r3, [pc, #116]	; (8007ed4 <USBD_LL_Init+0xac>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007e64:	481b      	ldr	r0, [pc, #108]	; (8007ed4 <USBD_LL_Init+0xac>)
 8007e66:	f7f9 fd89 	bl	800197c <HAL_PCD_Init>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007e70:	f7f8 fd40 	bl	80008f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e7a:	2318      	movs	r3, #24
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2100      	movs	r1, #0
 8007e80:	f7fb f8bd 	bl	8002ffe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e8a:	2358      	movs	r3, #88	; 0x58
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2180      	movs	r1, #128	; 0x80
 8007e90:	f7fb f8b5 	bl	8002ffe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e9a:	23c0      	movs	r3, #192	; 0xc0
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2181      	movs	r1, #129	; 0x81
 8007ea0:	f7fb f8ad 	bl	8002ffe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eaa:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	f7fb f8a4 	bl	8002ffe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	2182      	movs	r1, #130	; 0x82
 8007ec4:	f7fb f89b 	bl	8002ffe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20001198 	.word	0x20001198
 8007ed8:	40005c00 	.word	0x40005c00

08007edc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7f9 fe4d 	bl	8001b92 <HAL_PCD_Start>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 f94e 	bl	80081a0 <USBD_Get_USB_Status>
 8007f04:	4603      	mov	r3, r0
 8007f06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	4608      	mov	r0, r1
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	461a      	mov	r2, r3
 8007f20:	4603      	mov	r3, r0
 8007f22:	70fb      	strb	r3, [r7, #3]
 8007f24:	460b      	mov	r3, r1
 8007f26:	70bb      	strb	r3, [r7, #2]
 8007f28:	4613      	mov	r3, r2
 8007f2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f3a:	78bb      	ldrb	r3, [r7, #2]
 8007f3c:	883a      	ldrh	r2, [r7, #0]
 8007f3e:	78f9      	ldrb	r1, [r7, #3]
 8007f40:	f7f9 ffc7 	bl	8001ed2 <HAL_PCD_EP_Open>
 8007f44:	4603      	mov	r3, r0
 8007f46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f48:	7bfb      	ldrb	r3, [r7, #15]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 f928 	bl	80081a0 <USBD_Get_USB_Status>
 8007f50:	4603      	mov	r3, r0
 8007f52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	460b      	mov	r3, r1
 8007f68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f78:	78fa      	ldrb	r2, [r7, #3]
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fa f80e 	bl	8001f9e <HAL_PCD_EP_Close>
 8007f82:	4603      	mov	r3, r0
 8007f84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 f909 	bl	80081a0 <USBD_Get_USB_Status>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f92:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fb6:	78fa      	ldrb	r2, [r7, #3]
 8007fb8:	4611      	mov	r1, r2
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fa f8ce 	bl	800215c <HAL_PCD_EP_SetStall>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 f8ea 	bl	80081a0 <USBD_Get_USB_Status>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b084      	sub	sp, #16
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ff4:	78fa      	ldrb	r2, [r7, #3]
 8007ff6:	4611      	mov	r1, r2
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fa f90f 	bl	800221c <HAL_PCD_EP_ClrStall>
 8007ffe:	4603      	mov	r3, r0
 8008000:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	4618      	mov	r0, r3
 8008006:	f000 f8cb 	bl	80081a0 <USBD_Get_USB_Status>
 800800a:	4603      	mov	r3, r0
 800800c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800800e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800802a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800802c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008030:	2b00      	cmp	r3, #0
 8008032:	da0c      	bge.n	800804e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800803a:	68f9      	ldr	r1, [r7, #12]
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	4613      	mov	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	00db      	lsls	r3, r3, #3
 8008046:	440b      	add	r3, r1
 8008048:	3302      	adds	r3, #2
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	e00b      	b.n	8008066 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800804e:	78fb      	ldrb	r3, [r7, #3]
 8008050:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008054:	68f9      	ldr	r1, [r7, #12]
 8008056:	4613      	mov	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	00db      	lsls	r3, r3, #3
 800805e:	440b      	add	r3, r1
 8008060:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008064:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	bc80      	pop	{r7}
 800806e:	4770      	bx	lr

08008070 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	460b      	mov	r3, r1
 800807a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800807c:	2300      	movs	r3, #0
 800807e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800808a:	78fa      	ldrb	r2, [r7, #3]
 800808c:	4611      	mov	r1, r2
 800808e:	4618      	mov	r0, r3
 8008090:	f7f9 fefa 	bl	8001e88 <HAL_PCD_SetAddress>
 8008094:	4603      	mov	r3, r0
 8008096:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 f880 	bl	80081a0 <USBD_Get_USB_Status>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b086      	sub	sp, #24
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	607a      	str	r2, [r7, #4]
 80080b8:	461a      	mov	r2, r3
 80080ba:	460b      	mov	r3, r1
 80080bc:	72fb      	strb	r3, [r7, #11]
 80080be:	4613      	mov	r3, r2
 80080c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080d0:	893b      	ldrh	r3, [r7, #8]
 80080d2:	7af9      	ldrb	r1, [r7, #11]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	f7f9 fffe 	bl	80020d6 <HAL_PCD_EP_Transmit>
 80080da:	4603      	mov	r3, r0
 80080dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080de:	7dfb      	ldrb	r3, [r7, #23]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 f85d 	bl	80081a0 <USBD_Get_USB_Status>
 80080e6:	4603      	mov	r3, r0
 80080e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3718      	adds	r7, #24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	607a      	str	r2, [r7, #4]
 80080fe:	461a      	mov	r2, r3
 8008100:	460b      	mov	r3, r1
 8008102:	72fb      	strb	r3, [r7, #11]
 8008104:	4613      	mov	r3, r2
 8008106:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008116:	893b      	ldrh	r3, [r7, #8]
 8008118:	7af9      	ldrb	r1, [r7, #11]
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	f7f9 ff87 	bl	800202e <HAL_PCD_EP_Receive>
 8008120:	4603      	mov	r3, r0
 8008122:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008124:	7dfb      	ldrb	r3, [r7, #23]
 8008126:	4618      	mov	r0, r3
 8008128:	f000 f83a 	bl	80081a0 <USBD_Get_USB_Status>
 800812c:	4603      	mov	r3, r0
 800812e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008130:	7dbb      	ldrb	r3, [r7, #22]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3718      	adds	r7, #24
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b082      	sub	sp, #8
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	460b      	mov	r3, r1
 8008144:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800814c:	78fa      	ldrb	r2, [r7, #3]
 800814e:	4611      	mov	r1, r2
 8008150:	4618      	mov	r0, r3
 8008152:	f7f9 ffa9 	bl	80020a8 <HAL_PCD_EP_GetRxCount>
 8008156:	4603      	mov	r3, r0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008168:	4b02      	ldr	r3, [pc, #8]	; (8008174 <USBD_static_malloc+0x14>)
}
 800816a:	4618      	mov	r0, r3
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	bc80      	pop	{r7}
 8008172:	4770      	bx	lr
 8008174:	200001c0 	.word	0x200001c0

08008178 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]

}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	bc80      	pop	{r7}
 8008188:	4770      	bx	lr

0800818a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800818a:	b480      	push	{r7}
 800818c:	b083      	sub	sp, #12
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	460b      	mov	r3, r1
 8008194:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008196:	bf00      	nop
 8008198:	370c      	adds	r7, #12
 800819a:	46bd      	mov	sp, r7
 800819c:	bc80      	pop	{r7}
 800819e:	4770      	bx	lr

080081a0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	4603      	mov	r3, r0
 80081a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081ae:	79fb      	ldrb	r3, [r7, #7]
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d817      	bhi.n	80081e4 <USBD_Get_USB_Status+0x44>
 80081b4:	a201      	add	r2, pc, #4	; (adr r2, 80081bc <USBD_Get_USB_Status+0x1c>)
 80081b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ba:	bf00      	nop
 80081bc:	080081cd 	.word	0x080081cd
 80081c0:	080081d3 	.word	0x080081d3
 80081c4:	080081d9 	.word	0x080081d9
 80081c8:	080081df 	.word	0x080081df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73fb      	strb	r3, [r7, #15]
    break;
 80081d0:	e00b      	b.n	80081ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081d2:	2302      	movs	r3, #2
 80081d4:	73fb      	strb	r3, [r7, #15]
    break;
 80081d6:	e008      	b.n	80081ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081d8:	2301      	movs	r3, #1
 80081da:	73fb      	strb	r3, [r7, #15]
    break;
 80081dc:	e005      	b.n	80081ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081de:	2302      	movs	r3, #2
 80081e0:	73fb      	strb	r3, [r7, #15]
    break;
 80081e2:	e002      	b.n	80081ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081e4:	2302      	movs	r3, #2
 80081e6:	73fb      	strb	r3, [r7, #15]
    break;
 80081e8:	bf00      	nop
  }
  return usb_status;
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bc80      	pop	{r7}
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop

080081f8 <__libc_init_array>:
 80081f8:	b570      	push	{r4, r5, r6, lr}
 80081fa:	2500      	movs	r5, #0
 80081fc:	4e0c      	ldr	r6, [pc, #48]	; (8008230 <__libc_init_array+0x38>)
 80081fe:	4c0d      	ldr	r4, [pc, #52]	; (8008234 <__libc_init_array+0x3c>)
 8008200:	1ba4      	subs	r4, r4, r6
 8008202:	10a4      	asrs	r4, r4, #2
 8008204:	42a5      	cmp	r5, r4
 8008206:	d109      	bne.n	800821c <__libc_init_array+0x24>
 8008208:	f000 f822 	bl	8008250 <_init>
 800820c:	2500      	movs	r5, #0
 800820e:	4e0a      	ldr	r6, [pc, #40]	; (8008238 <__libc_init_array+0x40>)
 8008210:	4c0a      	ldr	r4, [pc, #40]	; (800823c <__libc_init_array+0x44>)
 8008212:	1ba4      	subs	r4, r4, r6
 8008214:	10a4      	asrs	r4, r4, #2
 8008216:	42a5      	cmp	r5, r4
 8008218:	d105      	bne.n	8008226 <__libc_init_array+0x2e>
 800821a:	bd70      	pop	{r4, r5, r6, pc}
 800821c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008220:	4798      	blx	r3
 8008222:	3501      	adds	r5, #1
 8008224:	e7ee      	b.n	8008204 <__libc_init_array+0xc>
 8008226:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800822a:	4798      	blx	r3
 800822c:	3501      	adds	r5, #1
 800822e:	e7f2      	b.n	8008216 <__libc_init_array+0x1e>
 8008230:	080082dc 	.word	0x080082dc
 8008234:	080082dc 	.word	0x080082dc
 8008238:	080082dc 	.word	0x080082dc
 800823c:	080082e0 	.word	0x080082e0

08008240 <memset>:
 8008240:	4603      	mov	r3, r0
 8008242:	4402      	add	r2, r0
 8008244:	4293      	cmp	r3, r2
 8008246:	d100      	bne.n	800824a <memset+0xa>
 8008248:	4770      	bx	lr
 800824a:	f803 1b01 	strb.w	r1, [r3], #1
 800824e:	e7f9      	b.n	8008244 <memset+0x4>

08008250 <_init>:
 8008250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008252:	bf00      	nop
 8008254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008256:	bc08      	pop	{r3}
 8008258:	469e      	mov	lr, r3
 800825a:	4770      	bx	lr

0800825c <_fini>:
 800825c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825e:	bf00      	nop
 8008260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008262:	bc08      	pop	{r3}
 8008264:	469e      	mov	lr, r3
 8008266:	4770      	bx	lr
