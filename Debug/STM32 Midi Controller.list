
STM32 Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b040  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800b14c  0800b14c  0001b14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b210  0800b210  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b210  0800b210  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b210  0800b210  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b210  0800b210  0001b210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b214  0800b214  0001b214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800b218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c4  200001f8  0800b410  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015bc  0800b410  000215bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c497  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039c5  00000000  00000000  0003c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001520  00000000  00000000  00040080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001390  00000000  00000000  000415a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bda4  00000000  00000000  00042930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014786  00000000  00000000  0005e6d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000950ac  00000000  00000000  00072e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00107f06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b44  00000000  00000000  00107f84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f8 	.word	0x200001f8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b134 	.word	0x0800b134

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001fc 	.word	0x200001fc
 8000148:	0800b134 	.word	0x0800b134

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <DWT_Delay_Init>:
	GPIOA->BRR = (1<<7);
}

/* DWT based delay */
uint32_t DWT_Delay_Init(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000198:	4b14      	ldr	r3, [pc, #80]	; (80001ec <DWT_Delay_Init+0x58>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	4a13      	ldr	r2, [pc, #76]	; (80001ec <DWT_Delay_Init+0x58>)
 800019e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80001a2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80001a4:	4b11      	ldr	r3, [pc, #68]	; (80001ec <DWT_Delay_Init+0x58>)
 80001a6:	68db      	ldr	r3, [r3, #12]
 80001a8:	4a10      	ldr	r2, [pc, #64]	; (80001ec <DWT_Delay_Init+0x58>)
 80001aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001ae:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80001b0:	4b0f      	ldr	r3, [pc, #60]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a0e      	ldr	r2, [pc, #56]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001b6:	f023 0301 	bic.w	r3, r3, #1
 80001ba:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80001bc:	4b0c      	ldr	r3, [pc, #48]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a0b      	ldr	r2, [pc, #44]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001c2:	f043 0301 	orr.w	r3, r3, #1
 80001c6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80001c8:	4b09      	ldr	r3, [pc, #36]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80001ce:	bf00      	nop
    __ASM volatile ("NOP");
 80001d0:	bf00      	nop
    __ASM volatile ("NOP");
 80001d2:	bf00      	nop
    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80001d4:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001d6:	685b      	ldr	r3, [r3, #4]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80001dc:	2300      	movs	r3, #0
 80001de:	e000      	b.n	80001e2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80001e0:	2301      	movs	r3, #1
    }
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000edf0 	.word	0xe000edf0
 80001f0:	e0001000 	.word	0xe0001000

080001f4 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80001fc:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <DWT_Delay_us+0x44>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000202:	f005 fe51 	bl	8005ea8 <HAL_RCC_GetHCLKFreq>
 8000206:	4602      	mov	r2, r0
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <DWT_Delay_us+0x48>)
 800020a:	fba3 2302 	umull	r2, r3, r3, r2
 800020e:	0c9b      	lsrs	r3, r3, #18
 8000210:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	68ba      	ldr	r2, [r7, #8]
 8000216:	fb02 f303 	mul.w	r3, r2, r3
 800021a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 800021c:	bf00      	nop
 800021e:	4b06      	ldr	r3, [pc, #24]	; (8000238 <DWT_Delay_us+0x44>)
 8000220:	685a      	ldr	r2, [r3, #4]
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	1ad2      	subs	r2, r2, r3
 8000226:	6879      	ldr	r1, [r7, #4]
 8000228:	68bb      	ldr	r3, [r7, #8]
 800022a:	1acb      	subs	r3, r1, r3
 800022c:	429a      	cmp	r2, r3
 800022e:	d3f6      	bcc.n	800021e <DWT_Delay_us+0x2a>
}
 8000230:	bf00      	nop
 8000232:	3710      	adds	r7, #16
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	e0001000 	.word	0xe0001000
 800023c:	431bde83 	.word	0x431bde83

08000240 <DWT_Delay_ms>:

__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <DWT_Delay_ms+0x40>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 800024e:	f005 fe2b 	bl	8005ea8 <HAL_RCC_GetHCLKFreq>
 8000252:	4602      	mov	r2, r0
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <DWT_Delay_ms+0x44>)
 8000256:	fba3 2302 	umull	r2, r3, r3, r2
 800025a:	099b      	lsrs	r3, r3, #6
 800025c:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	68ba      	ldr	r2, [r7, #8]
 8000262:	fb02 f303 	mul.w	r3, r2, r3
 8000266:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8000268:	bf00      	nop
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <DWT_Delay_ms+0x40>)
 800026c:	685a      	ldr	r2, [r3, #4]
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	1ad2      	subs	r2, r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	429a      	cmp	r2, r3
 8000276:	d3f8      	bcc.n	800026a <DWT_Delay_ms+0x2a>
}
 8000278:	bf00      	nop
 800027a:	3710      	adds	r7, #16
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	e0001000 	.word	0xe0001000
 8000284:	10624dd3 	.word	0x10624dd3

08000288 <MCP23017SetPin>:



/* MCP23017 Defines */

void MCP23017SetPin(uint8_t pin, bank b, uint8_t addr){
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	71fb      	strb	r3, [r7, #7]
 8000292:	460b      	mov	r3, r1
 8000294:	71bb      	strb	r3, [r7, #6]
 8000296:	4613      	mov	r3, r2
 8000298:	717b      	strb	r3, [r7, #5]

	while(blocked); //wait for clearance
 800029a:	bf00      	nop
 800029c:	4b3f      	ldr	r3, [pc, #252]	; (800039c <MCP23017SetPin+0x114>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d1fa      	bne.n	800029c <MCP23017SetPin+0x14>
	//GPIOA->BSRR = (1<<7);

	currentIOState[b] |= (1<<pin);
 80002a6:	79bb      	ldrb	r3, [r7, #6]
 80002a8:	4a3d      	ldr	r2, [pc, #244]	; (80003a0 <MCP23017SetPin+0x118>)
 80002aa:	5cd3      	ldrb	r3, [r2, r3]
 80002ac:	b25a      	sxtb	r2, r3
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2101      	movs	r1, #1
 80002b2:	fa01 f303 	lsl.w	r3, r1, r3
 80002b6:	b25b      	sxtb	r3, r3
 80002b8:	4313      	orrs	r3, r2
 80002ba:	b25a      	sxtb	r2, r3
 80002bc:	79bb      	ldrb	r3, [r7, #6]
 80002be:	b2d1      	uxtb	r1, r2
 80002c0:	4a37      	ldr	r2, [pc, #220]	; (80003a0 <MCP23017SetPin+0x118>)
 80002c2:	54d1      	strb	r1, [r2, r3]
	//write out the new state
	//UPDATE: This messes up the BAM Driver because it causes the BAM to skip entire steps... its better just to pause TIM2
	//__disable_irq(); //the entire routine will be super duper unhappy unless this is in place


	TIM2->CR1 &= ~1; //disable BAM Driver
 80002c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ce:	f023 0301 	bic.w	r3, r3, #1
 80002d2:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 80002d4:	4b33      	ldr	r3, [pc, #204]	; (80003a4 <MCP23017SetPin+0x11c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a32      	ldr	r2, [pc, #200]	; (80003a4 <MCP23017SetPin+0x11c>)
 80002da:	f023 0301 	bic.w	r3, r3, #1
 80002de:	6013      	str	r3, [r2, #0]
	//__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 80002e0:	4b31      	ldr	r3, [pc, #196]	; (80003a8 <MCP23017SetPin+0x120>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a30      	ldr	r2, [pc, #192]	; (80003a8 <MCP23017SetPin+0x120>)
 80002e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ea:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80002ec:	bf00      	nop
 80002ee:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <MCP23017SetPin+0x120>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f9      	beq.n	80002ee <MCP23017SetPin+0x66>
	I2C2->DR = addr; //address the MCP23017
 80002fa:	4a2b      	ldr	r2, [pc, #172]	; (80003a8 <MCP23017SetPin+0x120>)
 80002fc:	797b      	ldrb	r3, [r7, #5]
 80002fe:	6113      	str	r3, [r2, #16]
	//__enable_irq(); didn't work here
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000300:	bf00      	nop
 8000302:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <MCP23017SetPin+0x120>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f003 0302 	and.w	r3, r3, #2
 800030a:	2b00      	cmp	r3, #0
 800030c:	d0f9      	beq.n	8000302 <MCP23017SetPin+0x7a>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 800030e:	bf00      	nop
 8000310:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <MCP23017SetPin+0x120>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0304 	and.w	r3, r3, #4
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f9      	beq.n	8000310 <MCP23017SetPin+0x88>

	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800031c:	bf00      	nop
 800031e:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <MCP23017SetPin+0x120>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0f9      	beq.n	800031e <MCP23017SetPin+0x96>
	if(b==A){
 800032a:	79bb      	ldrb	r3, [r7, #6]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d103      	bne.n	8000338 <MCP23017SetPin+0xb0>
		I2C2->DR = 0x14;
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <MCP23017SetPin+0x120>)
 8000332:	2214      	movs	r2, #20
 8000334:	611a      	str	r2, [r3, #16]
 8000336:	e002      	b.n	800033e <MCP23017SetPin+0xb6>
	}
	else{
		I2C2->DR = 0x15;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MCP23017SetPin+0x120>)
 800033a:	2215      	movs	r2, #21
 800033c:	611a      	str	r2, [r3, #16]
	}
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800033e:	bf00      	nop
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MCP23017SetPin+0x120>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f9      	beq.n	8000340 <MCP23017SetPin+0xb8>
	I2C2->DR = currentIOState[b]; //just pull everything low
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	4a14      	ldr	r2, [pc, #80]	; (80003a0 <MCP23017SetPin+0x118>)
 8000350:	5cd2      	ldrb	r2, [r2, r3]
 8000352:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <MCP23017SetPin+0x120>)
 8000354:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000356:	bf00      	nop
 8000358:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <MCP23017SetPin+0x120>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0f9      	beq.n	8000358 <MCP23017SetPin+0xd0>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 8000364:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <MCP23017SetPin+0x120>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <MCP23017SetPin+0x120>)
 800036a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800036e:	6013      	str	r3, [r2, #0]

	while ((I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 8000370:	bf00      	nop
 8000372:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <MCP23017SetPin+0x120>)
 8000374:	699b      	ldr	r3, [r3, #24]

	//__enable_irq();
	TIM2->CR1 |= 1; //enable BAM Driver
 8000376:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 8000386:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <MCP23017SetPin+0x11c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <MCP23017SetPin+0x11c>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6013      	str	r3, [r2, #0]

	//GPIOA->BRR = (1<<7);

}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	20000215 	.word	0x20000215
 80003a0:	20000234 	.word	0x20000234
 80003a4:	40000400 	.word	0x40000400
 80003a8:	40005800 	.word	0x40005800

080003ac <MCP23017ClearPin>:

void MCP23017ClearPin(uint8_t pin, bank b, uint8_t addr){
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
 80003b6:	460b      	mov	r3, r1
 80003b8:	71bb      	strb	r3, [r7, #6]
 80003ba:	4613      	mov	r3, r2
 80003bc:	717b      	strb	r3, [r7, #5]

	while(blocked); //wait for clearance
 80003be:	bf00      	nop
 80003c0:	4b40      	ldr	r3, [pc, #256]	; (80004c4 <MCP23017ClearPin+0x118>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d1fa      	bne.n	80003c0 <MCP23017ClearPin+0x14>
	//GPIOA->BSRR = (1<<7);

	currentIOState[b] &= ~(1<<pin);
 80003ca:	79bb      	ldrb	r3, [r7, #6]
 80003cc:	4a3e      	ldr	r2, [pc, #248]	; (80004c8 <MCP23017ClearPin+0x11c>)
 80003ce:	5cd3      	ldrb	r3, [r2, r3]
 80003d0:	b25a      	sxtb	r2, r3
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	2101      	movs	r1, #1
 80003d6:	fa01 f303 	lsl.w	r3, r1, r3
 80003da:	b25b      	sxtb	r3, r3
 80003dc:	43db      	mvns	r3, r3
 80003de:	b25b      	sxtb	r3, r3
 80003e0:	4013      	ands	r3, r2
 80003e2:	b25a      	sxtb	r2, r3
 80003e4:	79bb      	ldrb	r3, [r7, #6]
 80003e6:	b2d1      	uxtb	r1, r2
 80003e8:	4a37      	ldr	r2, [pc, #220]	; (80004c8 <MCP23017ClearPin+0x11c>)
 80003ea:	54d1      	strb	r1, [r2, r3]
	//UPDATE: This messses up the BAM Driver... I think it'll be better just to stop TIM2
	//__disable_irq(); //the entire routine will be super duper unhappy unless this is in place

	//potential issue: the other interrupts may cause this crap to fail again...

	TIM2->CR1 &= ~1; //disable BAM Driver
 80003ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003f6:	f023 0301 	bic.w	r3, r3, #1
 80003fa:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 80003fc:	4b33      	ldr	r3, [pc, #204]	; (80004cc <MCP23017ClearPin+0x120>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a32      	ldr	r2, [pc, #200]	; (80004cc <MCP23017ClearPin+0x120>)
 8000402:	f023 0301 	bic.w	r3, r3, #1
 8000406:	6013      	str	r3, [r2, #0]
	//__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 8000408:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <MCP23017ClearPin+0x124>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a30      	ldr	r2, [pc, #192]	; (80004d0 <MCP23017ClearPin+0x124>)
 800040e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000412:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 8000414:	bf00      	nop
 8000416:	4b2e      	ldr	r3, [pc, #184]	; (80004d0 <MCP23017ClearPin+0x124>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	2b00      	cmp	r3, #0
 8000420:	d0f9      	beq.n	8000416 <MCP23017ClearPin+0x6a>
	I2C2->DR = addr; //address the MCP23017
 8000422:	4a2b      	ldr	r2, [pc, #172]	; (80004d0 <MCP23017ClearPin+0x124>)
 8000424:	797b      	ldrb	r3, [r7, #5]
 8000426:	6113      	str	r3, [r2, #16]
	//__enable_irq(); didn't work here
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000428:	bf00      	nop
 800042a:	4b29      	ldr	r3, [pc, #164]	; (80004d0 <MCP23017ClearPin+0x124>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f003 0302 	and.w	r3, r3, #2
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0f9      	beq.n	800042a <MCP23017ClearPin+0x7e>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000436:	bf00      	nop
 8000438:	4b25      	ldr	r3, [pc, #148]	; (80004d0 <MCP23017ClearPin+0x124>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0304 	and.w	r3, r3, #4
 8000440:	2b00      	cmp	r3, #0
 8000442:	d0f9      	beq.n	8000438 <MCP23017ClearPin+0x8c>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000444:	bf00      	nop
 8000446:	4b22      	ldr	r3, [pc, #136]	; (80004d0 <MCP23017ClearPin+0x124>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <MCP23017ClearPin+0x9a>
	if(b==A){
 8000452:	79bb      	ldrb	r3, [r7, #6]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d103      	bne.n	8000460 <MCP23017ClearPin+0xb4>
		I2C2->DR = 0x14;
 8000458:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <MCP23017ClearPin+0x124>)
 800045a:	2214      	movs	r2, #20
 800045c:	611a      	str	r2, [r3, #16]
 800045e:	e002      	b.n	8000466 <MCP23017ClearPin+0xba>
	}
	else{
		I2C2->DR = 0x15;
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <MCP23017ClearPin+0x124>)
 8000462:	2215      	movs	r2, #21
 8000464:	611a      	str	r2, [r3, #16]
	}
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000466:	bf00      	nop
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <MCP23017ClearPin+0x124>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000470:	2b00      	cmp	r3, #0
 8000472:	d0f9      	beq.n	8000468 <MCP23017ClearPin+0xbc>
	I2C2->DR = currentIOState[b]; //just pull everything low
 8000474:	79bb      	ldrb	r3, [r7, #6]
 8000476:	4a14      	ldr	r2, [pc, #80]	; (80004c8 <MCP23017ClearPin+0x11c>)
 8000478:	5cd2      	ldrb	r2, [r2, r3]
 800047a:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <MCP23017ClearPin+0x124>)
 800047c:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800047e:	bf00      	nop
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <MCP23017ClearPin+0x124>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000488:	2b00      	cmp	r3, #0
 800048a:	d0f9      	beq.n	8000480 <MCP23017ClearPin+0xd4>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 800048c:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <MCP23017ClearPin+0x124>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a0f      	ldr	r2, [pc, #60]	; (80004d0 <MCP23017ClearPin+0x124>)
 8000492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000496:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 8000498:	bf00      	nop
 800049a:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <MCP23017ClearPin+0x124>)
 800049c:	699b      	ldr	r3, [r3, #24]

	//__enable_irq();
	TIM2->CR1 |= 1; //enable BAM Driver
 800049e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 80004ae:	4b07      	ldr	r3, [pc, #28]	; (80004cc <MCP23017ClearPin+0x120>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a06      	ldr	r2, [pc, #24]	; (80004cc <MCP23017ClearPin+0x120>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6013      	str	r3, [r2, #0]
	//__enable_irq();
	//GPIOA->BRR = (1<<7);

}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	20000215 	.word	0x20000215
 80004c8:	20000234 	.word	0x20000234
 80004cc:	40000400 	.word	0x40000400
 80004d0:	40005800 	.word	0x40005800

080004d4 <LEDMatrixInit>:

void LEDMatrixInit(uint8_t addr){
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004de:	b672      	cpsid	i
	//note: BTF clearing and stop generation are handled by the Event Interrupt
	__disable_irq();



	I2C1->CR1 |= (1<<8); //send start condition
 80004e0:	4b27      	ldr	r3, [pc, #156]	; (8000580 <LEDMatrixInit+0xac>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a26      	ldr	r2, [pc, #152]	; (8000580 <LEDMatrixInit+0xac>)
 80004e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ea:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 80004ec:	bf00      	nop
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <LEDMatrixInit+0xac>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f9      	beq.n	80004ee <LEDMatrixInit+0x1a>
	I2C1->DR = addr; //address the MCP23017
 80004fa:	4a21      	ldr	r2, [pc, #132]	; (8000580 <LEDMatrixInit+0xac>)
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	6113      	str	r3, [r2, #16]
	while ((I2C1->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000500:	bf00      	nop
 8000502:	4b1f      	ldr	r3, [pc, #124]	; (8000580 <LEDMatrixInit+0xac>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	f003 0302 	and.w	r3, r3, #2
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0f9      	beq.n	8000502 <LEDMatrixInit+0x2e>
	while ((I2C1->SR2 & (1<<2)) == 0); //read I2C SR2
 800050e:	bf00      	nop
 8000510:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <LEDMatrixInit+0xac>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	2b00      	cmp	r3, #0
 800051a:	d0f9      	beq.n	8000510 <LEDMatrixInit+0x3c>
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800051c:	bf00      	nop
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <LEDMatrixInit+0xac>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <LEDMatrixInit+0x4a>
	I2C1->DR = 0x00; //write to IODIR_A
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <LEDMatrixInit+0xac>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000530:	bf00      	nop
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <LEDMatrixInit+0xac>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f9      	beq.n	8000532 <LEDMatrixInit+0x5e>
	I2C1->DR = 0x00; //all outputs
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <LEDMatrixInit+0xac>)
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000544:	bf00      	nop
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <LEDMatrixInit+0xac>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0f9      	beq.n	8000546 <LEDMatrixInit+0x72>
	I2C1->DR = 0x00; //all outputs for next address which is IODIR_B
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <LEDMatrixInit+0xac>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000558:	bf00      	nop
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <LEDMatrixInit+0xac>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000562:	2b00      	cmp	r3, #0
 8000564:	d0f9      	beq.n	800055a <LEDMatrixInit+0x86>
	//while ((I2C1->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C1->CR1 |= (1<<9); //send stop condition
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <LEDMatrixInit+0xac>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a05      	ldr	r2, [pc, #20]	; (8000580 <LEDMatrixInit+0xac>)
 800056c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000570:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000572:	b662      	cpsie	i
	__enable_irq();

}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40005400 	.word	0x40005400

08000584 <LEDMatrixStart>:

void LEDMatrixStart(uint8_t addr){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]

	while(blocked); //just so nothing stupid happens
 800058e:	bf00      	nop
 8000590:	4b21      	ldr	r3, [pc, #132]	; (8000618 <LEDMatrixStart+0x94>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1fa      	bne.n	8000590 <LEDMatrixStart+0xc>


	DMA1_Channel6->CMAR = (uint32_t)LEDMatrixBuffer;
 800059a:	4b20      	ldr	r3, [pc, #128]	; (800061c <LEDMatrixStart+0x98>)
 800059c:	4a20      	ldr	r2, [pc, #128]	; (8000620 <LEDMatrixStart+0x9c>)
 800059e:	60da      	str	r2, [r3, #12]
	DMA1_Channel6->CPAR = (uint32_t)&(I2C1->DR);
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <LEDMatrixStart+0x98>)
 80005a2:	4a20      	ldr	r2, [pc, #128]	; (8000624 <LEDMatrixStart+0xa0>)
 80005a4:	609a      	str	r2, [r3, #8]
	DMA1_Channel6->CNDTR = 3;
 80005a6:	4b1d      	ldr	r3, [pc, #116]	; (800061c <LEDMatrixStart+0x98>)
 80005a8:	2203      	movs	r2, #3
 80005aa:	605a      	str	r2, [r3, #4]
	DMA1_Channel6->CCR |= (0b11<<12); //High Priority
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <LEDMatrixStart+0x98>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a1a      	ldr	r2, [pc, #104]	; (800061c <LEDMatrixStart+0x98>)
 80005b2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80005b6:	6013      	str	r3, [r2, #0]
	DMA1_Channel6->CCR |= (1<<4 | 1<<7); //set MINC and Read from Memory
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <LEDMatrixStart+0x98>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a17      	ldr	r2, [pc, #92]	; (800061c <LEDMatrixStart+0x98>)
 80005be:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80005c2:	6013      	str	r3, [r2, #0]
	//DMA1_Channel6->CCR |= (1<<1); //enable transfer complete interrupt

	DMA1_Channel6->CCR |= 1; //activate DMA
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <LEDMatrixStart+0x98>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a14      	ldr	r2, [pc, #80]	; (800061c <LEDMatrixStart+0x98>)
 80005ca:	f043 0301 	orr.w	r3, r3, #1
 80005ce:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i

	__disable_irq();
	I2C1->CR2 |= (1<<9); //enable event interrupts
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <LEDMatrixStart+0xa4>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	4a14      	ldr	r2, [pc, #80]	; (8000628 <LEDMatrixStart+0xa4>)
 80005d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005dc:	6053      	str	r3, [r2, #4]
	I2C1->CR1 |= (1<<8); //send start condition
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <LEDMatrixStart+0xa4>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a11      	ldr	r2, [pc, #68]	; (8000628 <LEDMatrixStart+0xa4>)
 80005e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e8:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 80005ea:	bf00      	nop
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <LEDMatrixStart+0xa4>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0f9      	beq.n	80005ec <LEDMatrixStart+0x68>
	I2C1->DR = addr; //address the MCP23017
 80005f8:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <LEDMatrixStart+0xa4>)
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	6113      	str	r3, [r2, #16]
	I2C1->CR2 |= (1<<11); //enable DMA Requests
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <LEDMatrixStart+0xa4>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	4a09      	ldr	r2, [pc, #36]	; (8000628 <LEDMatrixStart+0xa4>)
 8000604:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000608:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 800060a:	b662      	cpsie	i
	__enable_irq();



}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000215 	.word	0x20000215
 800061c:	4002006c 	.word	0x4002006c
 8000620:	20000628 	.word	0x20000628
 8000624:	40005410 	.word	0x40005410
 8000628:	40005400 	.word	0x40005400

0800062c <LCDInit>:
 * \fn LCDInit
 * @brief Initialises both the LCD and the MCP23017
 *
 * @param addr Address of the MCP23017
 */
void LCDInit(uint8_t addr){ //interrupts should be disabled here
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8000636:	b672      	cpsid	i

	//while(blocked); //wait for clearance anyways just for good measure

	//Initialise the MCP23017 first
	__disable_irq(); //let's allow the init to go down peacefully
	I2C2->CR1 |= (1<<8); //send start condition
 8000638:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <LCDInit+0x138>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a49      	ldr	r2, [pc, #292]	; (8000764 <LCDInit+0x138>)
 800063e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000642:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 8000644:	bf00      	nop
 8000646:	4b47      	ldr	r3, [pc, #284]	; (8000764 <LCDInit+0x138>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0f9      	beq.n	8000646 <LCDInit+0x1a>
	I2C2->DR = addr; //address the MCP23017
 8000652:	4a44      	ldr	r2, [pc, #272]	; (8000764 <LCDInit+0x138>)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000658:	bf00      	nop
 800065a:	4b42      	ldr	r3, [pc, #264]	; (8000764 <LCDInit+0x138>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0f9      	beq.n	800065a <LCDInit+0x2e>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000666:	bf00      	nop
 8000668:	4b3e      	ldr	r3, [pc, #248]	; (8000764 <LCDInit+0x138>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0304 	and.w	r3, r3, #4
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0f9      	beq.n	8000668 <LCDInit+0x3c>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000674:	bf00      	nop
 8000676:	4b3b      	ldr	r3, [pc, #236]	; (8000764 <LCDInit+0x138>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f9      	beq.n	8000676 <LCDInit+0x4a>
	I2C2->DR = 0x00; //write to IODIR_A
 8000682:	4b38      	ldr	r3, [pc, #224]	; (8000764 <LCDInit+0x138>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000688:	bf00      	nop
 800068a:	4b36      	ldr	r3, [pc, #216]	; (8000764 <LCDInit+0x138>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f9      	beq.n	800068a <LCDInit+0x5e>
	I2C2->DR = 0x00; //all outputs
 8000696:	4b33      	ldr	r3, [pc, #204]	; (8000764 <LCDInit+0x138>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800069c:	bf00      	nop
 800069e:	4b31      	ldr	r3, [pc, #196]	; (8000764 <LCDInit+0x138>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0f9      	beq.n	800069e <LCDInit+0x72>
	I2C2->DR = 0x00; //all outputs for next address which is IODIR_B
 80006aa:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <LCDInit+0x138>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80006b0:	bf00      	nop
 80006b2:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <LCDInit+0x138>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d0f9      	beq.n	80006b2 <LCDInit+0x86>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 80006be:	4b29      	ldr	r3, [pc, #164]	; (8000764 <LCDInit+0x138>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a28      	ldr	r2, [pc, #160]	; (8000764 <LCDInit+0x138>)
 80006c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006c8:	6013      	str	r3, [r2, #0]


	//Pull RS, RW and E pins LOW
	MCP23017ClearPin(RS_Pin, B, LCD_Address);
 80006ca:	224e      	movs	r2, #78	; 0x4e
 80006cc:	2101      	movs	r1, #1
 80006ce:	2002      	movs	r0, #2
 80006d0:	f7ff fe6c 	bl	80003ac <MCP23017ClearPin>
	MCP23017ClearPin(RS_Pin, B, LCD_Address);
 80006d4:	224e      	movs	r2, #78	; 0x4e
 80006d6:	2101      	movs	r1, #1
 80006d8:	2002      	movs	r0, #2
 80006da:	f7ff fe67 	bl	80003ac <MCP23017ClearPin>
	MCP23017ClearPin(RS_Pin, B, LCD_Address);
 80006de:	224e      	movs	r2, #78	; 0x4e
 80006e0:	2101      	movs	r1, #1
 80006e2:	2002      	movs	r0, #2
 80006e4:	f7ff fe62 	bl	80003ac <MCP23017ClearPin>



	LCDData(0x00, addr); //clear the data pins as well
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	4619      	mov	r1, r3
 80006ec:	2000      	movs	r0, #0
 80006ee:	f000 f83b 	bl	8000768 <LCDData>
	DWT_Delay_ms(30);
 80006f2:	201e      	movs	r0, #30
 80006f4:	f7ff fda4 	bl	8000240 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4619      	mov	r1, r3
 80006fc:	2030      	movs	r0, #48	; 0x30
 80006fe:	f000 f8a7 	bl	8000850 <LCDCommand>
	DWT_Delay_ms(5);
 8000702:	2005      	movs	r0, #5
 8000704:	f7ff fd9c 	bl	8000240 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4619      	mov	r1, r3
 800070c:	2030      	movs	r0, #48	; 0x30
 800070e:	f000 f89f 	bl	8000850 <LCDCommand>
	DWT_Delay_ms(5);
 8000712:	2005      	movs	r0, #5
 8000714:	f7ff fd94 	bl	8000240 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	4619      	mov	r1, r3
 800071c:	2030      	movs	r0, #48	; 0x30
 800071e:	f000 f897 	bl	8000850 <LCDCommand>
	DWT_Delay_us(1000);
 8000722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000726:	f7ff fd65 	bl	80001f4 <DWT_Delay_us>

	LCDCommand(0x38, addr); //8-bit mode, 2 lines, smaller font
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	4619      	mov	r1, r3
 800072e:	2038      	movs	r0, #56	; 0x38
 8000730:	f000 f88e 	bl	8000850 <LCDCommand>

	LCDCommand(0x0C, addr); //display ON
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	4619      	mov	r1, r3
 8000738:	200c      	movs	r0, #12
 800073a:	f000 f889 	bl	8000850 <LCDCommand>

	LCDCommand(0x01, addr); //display clear
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	4619      	mov	r1, r3
 8000742:	2001      	movs	r0, #1
 8000744:	f000 f884 	bl	8000850 <LCDCommand>
	DWT_Delay_us(2000); //clear requires a substantial delay
 8000748:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800074c:	f7ff fd52 	bl	80001f4 <DWT_Delay_us>

	LCDCommand(0x06, addr); //set entry mode
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4619      	mov	r1, r3
 8000754:	2006      	movs	r0, #6
 8000756:	f000 f87b 	bl	8000850 <LCDCommand>
  __ASM volatile ("cpsie i" : : : "memory");
 800075a:	b662      	cpsie	i

	__enable_irq();


}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40005800 	.word	0x40005800

08000768 <LCDData>:
 * @brief Presents the data to D0 to D7 (located on Bank A)
 *
 * @param data Data to send
 * @param addr I2C Address of the MCP23017
 */
void LCDData(char data, uint8_t addr){
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	460a      	mov	r2, r1
 8000772:	71fb      	strb	r3, [r7, #7]
 8000774:	4613      	mov	r3, r2
 8000776:	71bb      	strb	r3, [r7, #6]

	while(blocked); //wait for clearance
 8000778:	bf00      	nop
 800077a:	4b32      	ldr	r3, [pc, #200]	; (8000844 <LCDData+0xdc>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d1fa      	bne.n	800077a <LCDData+0x12>

	TIM2->CR1 &= ~1; //disable BAM Driver
 8000784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800078e:	f023 0301 	bic.w	r3, r3, #1
 8000792:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 8000794:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <LCDData+0xe0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a2b      	ldr	r2, [pc, #172]	; (8000848 <LCDData+0xe0>)
 800079a:	f023 0301 	bic.w	r3, r3, #1
 800079e:	6013      	str	r3, [r2, #0]
	//__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <LCDData+0xe4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a29      	ldr	r2, [pc, #164]	; (800084c <LCDData+0xe4>)
 80007a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007aa:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80007ac:	bf00      	nop
 80007ae:	4b27      	ldr	r3, [pc, #156]	; (800084c <LCDData+0xe4>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d0f9      	beq.n	80007ae <LCDData+0x46>
	I2C2->DR = addr; //address the MCP23017
 80007ba:	4a24      	ldr	r2, [pc, #144]	; (800084c <LCDData+0xe4>)
 80007bc:	79bb      	ldrb	r3, [r7, #6]
 80007be:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80007c0:	bf00      	nop
 80007c2:	4b22      	ldr	r3, [pc, #136]	; (800084c <LCDData+0xe4>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f9      	beq.n	80007c2 <LCDData+0x5a>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 80007ce:	bf00      	nop
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <LCDData+0xe4>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d0f9      	beq.n	80007d0 <LCDData+0x68>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80007dc:	bf00      	nop
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <LCDData+0xe4>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0f9      	beq.n	80007de <LCDData+0x76>
	I2C2->DR = 0x14; //write to GPIO_A
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <LCDData+0xe4>)
 80007ec:	2214      	movs	r2, #20
 80007ee:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80007f0:	bf00      	nop
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <LCDData+0xe4>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f9      	beq.n	80007f2 <LCDData+0x8a>
	I2C2->DR = data; //present data at output bank A
 80007fe:	4a13      	ldr	r2, [pc, #76]	; (800084c <LCDData+0xe4>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000804:	bf00      	nop
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <LCDData+0xe4>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f9      	beq.n	8000806 <LCDData+0x9e>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <LCDData+0xe4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0d      	ldr	r2, [pc, #52]	; (800084c <LCDData+0xe4>)
 8000818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081c:	6013      	str	r3, [r2, #0]

	//__enable_irq();
	TIM2->CR1 |= 1; //enable BAM Driver
 800081e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <LCDData+0xe0>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a05      	ldr	r2, [pc, #20]	; (8000848 <LCDData+0xe0>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6013      	str	r3, [r2, #0]

}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000215 	.word	0x20000215
 8000848:	40000400 	.word	0x40000400
 800084c:	40005800 	.word	0x40005800

08000850 <LCDCommand>:

void LCDCommand(char data, uint8_t addr){
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	460a      	mov	r2, r1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	71bb      	strb	r3, [r7, #6]


	MCP23017ClearPin(RS_Pin, B, addr);
 8000860:	79bb      	ldrb	r3, [r7, #6]
 8000862:	461a      	mov	r2, r3
 8000864:	2101      	movs	r1, #1
 8000866:	2002      	movs	r0, #2
 8000868:	f7ff fda0 	bl	80003ac <MCP23017ClearPin>

	LCDData(data, addr);
 800086c:	79ba      	ldrb	r2, [r7, #6]
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff78 	bl	8000768 <LCDData>

	LCDCycleEN(addr);
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f804 	bl	8000888 <LCDCycleEN>

}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <LCDCycleEN>:

void LCDCycleEN(uint8_t addr){
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]

	MCP23017ClearPin(EN_Pin, B, addr);
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	461a      	mov	r2, r3
 8000896:	2101      	movs	r1, #1
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff fd87 	bl	80003ac <MCP23017ClearPin>
	DWT_Delay_us(1);
 800089e:	2001      	movs	r0, #1
 80008a0:	f7ff fca8 	bl	80001f4 <DWT_Delay_us>
	MCP23017SetPin(EN_Pin, B, addr);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	461a      	mov	r2, r3
 80008a8:	2101      	movs	r1, #1
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff fcec 	bl	8000288 <MCP23017SetPin>
	DWT_Delay_us(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f7ff fc9f 	bl	80001f4 <DWT_Delay_us>
	MCP23017ClearPin(EN_Pin, B, addr);
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	461a      	mov	r2, r3
 80008ba:	2101      	movs	r1, #1
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fd75 	bl	80003ac <MCP23017ClearPin>
	DWT_Delay_us(100);
 80008c2:	2064      	movs	r0, #100	; 0x64
 80008c4:	f7ff fc96 	bl	80001f4 <DWT_Delay_us>


}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <LCDWriteChar>:

void LCDWriteChar(char data, uint8_t addr){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	460a      	mov	r2, r1
 80008da:	71fb      	strb	r3, [r7, #7]
 80008dc:	4613      	mov	r3, r2
 80008de:	71bb      	strb	r3, [r7, #6]

	MCP23017SetPin(RS_Pin, B, addr);
 80008e0:	79bb      	ldrb	r3, [r7, #6]
 80008e2:	461a      	mov	r2, r3
 80008e4:	2101      	movs	r1, #1
 80008e6:	2002      	movs	r0, #2
 80008e8:	f7ff fcce 	bl	8000288 <MCP23017SetPin>
	LCDData(data, addr);
 80008ec:	79ba      	ldrb	r2, [r7, #6]
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff38 	bl	8000768 <LCDData>
	LCDCycleEN(addr);
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ffc4 	bl	8000888 <LCDCycleEN>

}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <LCDWriteString>:

void LCDWriteString(char *str, uint8_t addr){
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	70fb      	strb	r3, [r7, #3]

	for(int i = 0; (volatile char)str[i] != '\x00' ; i++){ //Nice touch: take advantage of null byte terminated strings
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	e00b      	b.n	8000932 <LCDWriteString+0x2a>
		LCDWriteChar(str[i], addr);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	4413      	add	r3, r2
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	78fa      	ldrb	r2, [r7, #3]
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ffd2 	bl	80008d0 <LCDWriteChar>
	for(int i = 0; (volatile char)str[i] != '\x00' ; i++){ //Nice touch: take advantage of null byte terminated strings
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3301      	adds	r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	4413      	add	r3, r2
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d1ed      	bne.n	800091a <LCDWriteString+0x12>
	}

}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <LCDClear>:

void LCDClear(uint8_t addr){
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	4603      	mov	r3, r0
 800094e:	71fb      	strb	r3, [r7, #7]

	LCDCommand(1, addr);
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4619      	mov	r1, r3
 8000954:	2001      	movs	r0, #1
 8000956:	f7ff ff7b 	bl	8000850 <LCDCommand>
	DWT_Delay_us(2000);
 800095a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800095e:	f7ff fc49 	bl	80001f4 <DWT_Delay_us>

}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <LCDSetCursor>:

void LCDSetCursor(uint8_t row, uint8_t col, uint8_t addr){
 800096a:	b580      	push	{r7, lr}
 800096c:	b084      	sub	sp, #16
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	460b      	mov	r3, r1
 8000976:	71bb      	strb	r3, [r7, #6]
 8000978:	4613      	mov	r3, r2
 800097a:	717b      	strb	r3, [r7, #5]

	char outbyte;

	if(row == 1){
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d109      	bne.n	8000996 <LCDSetCursor+0x2c>
		outbyte = 0x80 + col - 1;
 8000982:	79bb      	ldrb	r3, [r7, #6]
 8000984:	337f      	adds	r3, #127	; 0x7f
 8000986:	73fb      	strb	r3, [r7, #15]
		LCDCommand(outbyte, addr);
 8000988:	797a      	ldrb	r2, [r7, #5]
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	4611      	mov	r1, r2
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ff5e 	bl	8000850 <LCDCommand>
	else if(row == 2){
		outbyte = 0xC0 + col - 1;
		LCDCommand(outbyte, addr);
	}

}
 8000994:	e00b      	b.n	80009ae <LCDSetCursor+0x44>
	else if(row == 2){
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d108      	bne.n	80009ae <LCDSetCursor+0x44>
		outbyte = 0xC0 + col - 1;
 800099c:	79bb      	ldrb	r3, [r7, #6]
 800099e:	3b41      	subs	r3, #65	; 0x41
 80009a0:	73fb      	strb	r3, [r7, #15]
		LCDCommand(outbyte, addr);
 80009a2:	797a      	ldrb	r2, [r7, #5]
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff51 	bl	8000850 <LCDCommand>
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009be:	f000 ff4d 	bl	800185c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c2:	f000 f8e5 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c6:	f000 fae7 	bl	8000f98 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ca:	f000 facf 	bl	8000f6c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80009ce:	f009 fae3 	bl	8009f98 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80009d2:	f000 f961 	bl	8000c98 <MX_ADC1_Init>
  MX_I2C1_Init();
 80009d6:	f000 f99d 	bl	8000d14 <MX_I2C1_Init>
  MX_I2C2_Init();
 80009da:	f000 f9c9 	bl	8000d70 <MX_I2C2_Init>
  MX_TIM2_Init();
 80009de:	f000 fa0f 	bl	8000e00 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009e2:	f000 fa69 	bl	8000eb8 <MX_TIM3_Init>
  MX_IWDG_Init();
 80009e6:	f000 f9f1 	bl	8000dcc <MX_IWDG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80009ea:	f000 f930 	bl	8000c4e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  NVIC_SetPriorityGrouping(0U); //use standard interrupt grouping
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff fbac 	bl	800014c <__NVIC_SetPriorityGrouping>
  DWT_Delay_Init();
 80009f4:	f7ff fbce 	bl	8000194 <DWT_Delay_Init>

  blocked = 0;
 80009f8:	4b58      	ldr	r3, [pc, #352]	; (8000b5c <main+0x1a4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
  I2C2->CR1 |= 1; //enable i2c 2 peripheral for LCD and EEPROM
 80009fe:	4b58      	ldr	r3, [pc, #352]	; (8000b60 <main+0x1a8>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a57      	ldr	r2, [pc, #348]	; (8000b60 <main+0x1a8>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6013      	str	r3, [r2, #0]
  I2C1->CR1 |= 1; //enable i2c 1 peripheral for LED Matrix
 8000a0a:	4b56      	ldr	r3, [pc, #344]	; (8000b64 <main+0x1ac>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a55      	ldr	r2, [pc, #340]	; (8000b64 <main+0x1ac>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6013      	str	r3, [r2, #0]

  LCDInit(LCD_Address);
 8000a16:	204e      	movs	r0, #78	; 0x4e
 8000a18:	f7ff fe08 	bl	800062c <LCDInit>
  LEDMatrixInit(LEDMatrix_Address);
 8000a1c:	2048      	movs	r0, #72	; 0x48
 8000a1e:	f7ff fd59 	bl	80004d4 <LEDMatrixInit>

  TIM2->CR1 |= 1; //enable BAM Driver
 8000a22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6013      	str	r3, [r2, #0]
  TIM3->CR1 |= 1; //enable encoder scan driver
 8000a32:	4b4d      	ldr	r3, [pc, #308]	; (8000b68 <main+0x1b0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a4c      	ldr	r2, [pc, #304]	; (8000b68 <main+0x1b0>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6013      	str	r3, [r2, #0]


  LCDClear(LCD_Address);
 8000a3e:	204e      	movs	r0, #78	; 0x4e
 8000a40:	f7ff ff81 	bl	8000946 <LCDClear>

  LCDSetCursor(1, 1, LCD_Address);
 8000a44:	224e      	movs	r2, #78	; 0x4e
 8000a46:	2101      	movs	r1, #1
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff ff8e 	bl	800096a <LCDSetCursor>

  LCDWriteString("AAAA", LCD_Address);
 8000a4e:	214e      	movs	r1, #78	; 0x4e
 8000a50:	4846      	ldr	r0, [pc, #280]	; (8000b6c <main+0x1b4>)
 8000a52:	f7ff ff59 	bl	8000908 <LCDWriteString>



  for(int i = 0; i < 4; i++){ //function to drive the LED's
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
 8000a5a:	e022      	b.n	8000aa2 <main+0xea>
	  LEDMatrixBuffer[i*3] = 0x14;
 8000a5c:	69fa      	ldr	r2, [r7, #28]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	4413      	add	r3, r2
 8000a64:	4a42      	ldr	r2, [pc, #264]	; (8000b70 <main+0x1b8>)
 8000a66:	2114      	movs	r1, #20
 8000a68:	54d1      	strb	r1, [r2, r3]
	  LEDMatrixBuffer[i*3+1] = ~(1<<i);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	b2d9      	uxtb	r1, r3
 8000a74:	69fa      	ldr	r2, [r7, #28]
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	43ca      	mvns	r2, r1
 8000a80:	b2d1      	uxtb	r1, r2
 8000a82:	4a3b      	ldr	r2, [pc, #236]	; (8000b70 <main+0x1b8>)
 8000a84:	54d1      	strb	r1, [r2, r3]
	  LEDMatrixBuffer[i*3+2] = LEDMatrix[i];
 8000a86:	69fa      	ldr	r2, [r7, #28]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	3302      	adds	r3, #2
 8000a90:	4938      	ldr	r1, [pc, #224]	; (8000b74 <main+0x1bc>)
 8000a92:	69fa      	ldr	r2, [r7, #28]
 8000a94:	440a      	add	r2, r1
 8000a96:	7811      	ldrb	r1, [r2, #0]
 8000a98:	4a35      	ldr	r2, [pc, #212]	; (8000b70 <main+0x1b8>)
 8000a9a:	54d1      	strb	r1, [r2, r3]
  for(int i = 0; i < 4; i++){ //function to drive the LED's
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	61fb      	str	r3, [r7, #28]
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	2b03      	cmp	r3, #3
 8000aa6:	ddd9      	ble.n	8000a5c <main+0xa4>
  }

  LEDMatrixStart(LEDMatrix_Address);
 8000aa8:	2048      	movs	r0, #72	; 0x48
 8000aaa:	f7ff fd6b 	bl	8000584 <LEDMatrixStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  IWDG->KR = 0xAAAA; //reset the watchdog timer
 8000aae:	4b32      	ldr	r3, [pc, #200]	; (8000b78 <main+0x1c0>)
 8000ab0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000ab4:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  brightness[0] = encoderValues[3];
 8000ab6:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <main+0x1c4>)
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b30      	ldr	r3, [pc, #192]	; (8000b80 <main+0x1c8>)
 8000abe:	701a      	strb	r2, [r3, #0]
	  brightness[1] = encoderValues[2];
 8000ac0:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <main+0x1c4>)
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <main+0x1c8>)
 8000ac8:	705a      	strb	r2, [r3, #1]
	  brightness[2] = encoderValues[1];
 8000aca:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <main+0x1c4>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <main+0x1c8>)
 8000ad2:	709a      	strb	r2, [r3, #2]
	  brightness[3] = encoderValues[0];
 8000ad4:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <main+0x1c4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <main+0x1c8>)
 8000adc:	70da      	strb	r2, [r3, #3]


	  for(int i = 0; i < 5; i++){
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	e037      	b.n	8000b54 <main+0x19c>
		  if(encoderChanged[i]){
 8000ae4:	4a27      	ldr	r2, [pc, #156]	; (8000b84 <main+0x1cc>)
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	4413      	add	r3, r2
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d02d      	beq.n	8000b4e <main+0x196>
			  char buffer[17] = "";
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	731a      	strb	r2, [r3, #12]
			  LCDSetCursor(1,1, LCD_Address);
 8000b04:	224e      	movs	r2, #78	; 0x4e
 8000b06:	2101      	movs	r1, #1
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f7ff ff2e 	bl	800096a <LCDSetCursor>
			  snprintf(buffer, 16, "Encoder %d", i);
 8000b0e:	1d38      	adds	r0, r7, #4
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	4a1d      	ldr	r2, [pc, #116]	; (8000b88 <main+0x1d0>)
 8000b14:	2110      	movs	r1, #16
 8000b16:	f009 fee7 	bl	800a8e8 <sniprintf>
			  LCDWriteString(buffer, LCD_Address);
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	214e      	movs	r1, #78	; 0x4e
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fef2 	bl	8000908 <LCDWriteString>
			  LCDSetCursor(2,1, LCD_Address);
 8000b24:	224e      	movs	r2, #78	; 0x4e
 8000b26:	2101      	movs	r1, #1
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f7ff ff1e 	bl	800096a <LCDSetCursor>
			  snprintf(buffer, 16, "%15d", encoderValues[i]);
 8000b2e:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <main+0x1c4>)
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b36:	1d38      	adds	r0, r7, #4
 8000b38:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <main+0x1d4>)
 8000b3a:	2110      	movs	r1, #16
 8000b3c:	f009 fed4 	bl	800a8e8 <sniprintf>
			  LCDWriteString(buffer, LCD_Address);
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	214e      	movs	r1, #78	; 0x4e
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fedf 	bl	8000908 <LCDWriteString>
			  break;
 8000b4a:	bf00      	nop
 8000b4c:	e005      	b.n	8000b5a <main+0x1a2>
	  for(int i = 0; i < 5; i++){
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	3301      	adds	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	ddc4      	ble.n	8000ae4 <main+0x12c>
	  IWDG->KR = 0xAAAA; //reset the watchdog timer
 8000b5a:	e7a8      	b.n	8000aae <main+0xf6>
 8000b5c:	20000215 	.word	0x20000215
 8000b60:	40005800 	.word	0x40005800
 8000b64:	40005400 	.word	0x40005400
 8000b68:	40000400 	.word	0x40000400
 8000b6c:	0800b14c 	.word	0x0800b14c
 8000b70:	20000628 	.word	0x20000628
 8000b74:	20000014 	.word	0x20000014
 8000b78:	40003000 	.word	0x40003000
 8000b7c:	20000220 	.word	0x20000220
 8000b80:	20000000 	.word	0x20000000
 8000b84:	200005a8 	.word	0x200005a8
 8000b88:	0800b154 	.word	0x0800b154
 8000b8c:	0800b160 	.word	0x0800b160

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b094      	sub	sp, #80	; 0x50
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b9a:	2228      	movs	r2, #40	; 0x28
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f009 fe9a 	bl	800a8d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000bc0:	2309      	movs	r3, #9
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000be0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000be4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bea:	4618      	mov	r0, r3
 8000bec:	f004 fd90 	bl	8005710 <HAL_RCC_OscConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000bf6:	f000 fa61 	bl	80010bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfa:	230f      	movs	r3, #15
 8000bfc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2102      	movs	r1, #2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f004 fffa 	bl	8005c10 <HAL_RCC_ClockConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c22:	f000 fa4b 	bl	80010bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000c26:	2312      	movs	r3, #18
 8000c28:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c2e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	4618      	mov	r0, r3
 8000c38:	f005 f972 	bl	8005f20 <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000c42:	f000 fa3b 	bl	80010bc <Error_Handler>
  }
}
 8000c46:	bf00      	nop
 8000c48:	3750      	adds	r7, #80	; 0x50
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2101      	movs	r1, #1
 8000c56:	201c      	movs	r0, #28
 8000c58:	f001 f943 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c5c:	201c      	movs	r0, #28
 8000c5e:	f001 f95c 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2102      	movs	r1, #2
 8000c66:	201d      	movs	r0, #29
 8000c68:	f001 f93b 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c6c:	201d      	movs	r0, #29
 8000c6e:	f001 f954 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2010      	movs	r0, #16
 8000c78:	f001 f933 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c7c:	2010      	movs	r0, #16
 8000c7e:	f001 f94c 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	201f      	movs	r0, #31
 8000c88:	f001 f92b 	bl	8001ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c8c:	201f      	movs	r0, #31
 8000c8e:	f001 f944 	bl	8001f1a <HAL_NVIC_EnableIRQ>
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000caa:	4a19      	ldr	r2, [pc, #100]	; (8000d10 <MX_ADC1_Init+0x78>)
 8000cac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cc2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000cc6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cc8:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cd6:	f000 fe23 	bl	8001920 <HAL_ADC_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ce0:	f000 f9ec 	bl	80010bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cf6:	f000 feeb 	bl	8001ad0 <HAL_ADC_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d00:	f000 f9dc 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200005b0 	.word	0x200005b0
 8000d10:	40012400 	.word	0x40012400

08000d14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d1a:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <MX_I2C1_Init+0x54>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d20:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <MX_I2C1_Init+0x58>)
 8000d22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_I2C1_Init+0x50>)
 8000d52:	f001 fc51 	bl	80025f8 <HAL_I2C_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d5c:	f000 f9ae 	bl	80010bc <Error_Handler>
  //dude, the code generation is evil... doesn't help you all the way!!! Came a gutsa so many times....


  /* USER CODE END I2C1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200004ac 	.word	0x200004ac
 8000d68:	40005400 	.word	0x40005400
 8000d6c:	00061a80 	.word	0x00061a80

08000d70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000d76:	4a13      	ldr	r2, [pc, #76]	; (8000dc4 <MX_I2C2_Init+0x54>)
 8000d78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000d7c:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <MX_I2C2_Init+0x58>)
 8000d7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000d8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d92:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <MX_I2C2_Init+0x50>)
 8000dae:	f001 fc23 	bl	80025f8 <HAL_I2C_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000db8:	f000 f980 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000050c 	.word	0x2000050c
 8000dc4:	40005800 	.word	0x40005800
 8000dc8:	00061a80 	.word	0x00061a80

08000dcc <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_IWDG_Init+0x2c>)
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <MX_IWDG_Init+0x30>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_IWDG_Init+0x2c>)
 8000dd8:	2202      	movs	r2, #2
 8000dda:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_IWDG_Init+0x2c>)
 8000dde:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000de2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <MX_IWDG_Init+0x2c>)
 8000de6:	f003 f8d7 	bl	8003f98 <HAL_IWDG_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000df0:	f000 f964 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000500 	.word	0x20000500
 8000dfc:	40003000 	.word	0x40003000

08000e00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	463b      	mov	r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e1c:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <MX_TIM2_Init+0xb4>)
 8000e1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000e24:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <MX_TIM2_Init+0xb4>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2a:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <MX_TIM2_Init+0xb4>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 511;
 8000e30:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <MX_TIM2_Init+0xb4>)
 8000e32:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000e36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e38:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <MX_TIM2_Init+0xb4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <MX_TIM2_Init+0xb4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e44:	481b      	ldr	r0, [pc, #108]	; (8000eb4 <MX_TIM2_Init+0xb4>)
 8000e46:	f005 f921 	bl	800608c <HAL_TIM_Base_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e50:	f000 f934 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4814      	ldr	r0, [pc, #80]	; (8000eb4 <MX_TIM2_Init+0xb4>)
 8000e62:	f005 fa6a 	bl	800633a <HAL_TIM_ConfigClockSource>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e6c:	f000 f926 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <MX_TIM2_Init+0xb4>)
 8000e7e:	f005 fc39 	bl	80066f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e88:	f000 f918 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIM2->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the BAM Interrupt is triggered
 8000e8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e96:	f023 0302 	bic.w	r3, r3, #2
 8000e9a:	6013      	str	r3, [r2, #0]
  TIM2->DIER |= 1; //Update interrupt enable
 8000e9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	60d3      	str	r3, [r2, #12]

  /* USER CODE END TIM2_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200005e0 	.word	0x200005e0

08000eb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ecc:	463b      	mov	r3, r7
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <MX_TIM3_Init+0xac>)
 8000ed6:	4a24      	ldr	r2, [pc, #144]	; (8000f68 <MX_TIM3_Init+0xb0>)
 8000ed8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000eda:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <MX_TIM3_Init+0xac>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee0:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <MX_TIM3_Init+0xac>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16383;
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_TIM3_Init+0xac>)
 8000ee8:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000eec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_TIM3_Init+0xac>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <MX_TIM3_Init+0xac>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000efa:	481a      	ldr	r0, [pc, #104]	; (8000f64 <MX_TIM3_Init+0xac>)
 8000efc:	f005 f8c6 	bl	800608c <HAL_TIM_Base_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f06:	f000 f8d9 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	4619      	mov	r1, r3
 8000f16:	4813      	ldr	r0, [pc, #76]	; (8000f64 <MX_TIM3_Init+0xac>)
 8000f18:	f005 fa0f 	bl	800633a <HAL_TIM_ConfigClockSource>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f22:	f000 f8cb 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f2e:	463b      	mov	r3, r7
 8000f30:	4619      	mov	r1, r3
 8000f32:	480c      	ldr	r0, [pc, #48]	; (8000f64 <MX_TIM3_Init+0xac>)
 8000f34:	f005 fbde 	bl	80066f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f3e:	f000 f8bd 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the Encoder Scan Interrupt is triggered
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_TIM3_Init+0xb0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <MX_TIM3_Init+0xb0>)
 8000f48:	f023 0302 	bic.w	r3, r3, #2
 8000f4c:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= 1; //Update interrupt enable
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_TIM3_Init+0xb0>)
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <MX_TIM3_Init+0xb0>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM3_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000560 	.word	0x20000560
 8000f68:	40000400 	.word	0x40000400

08000f6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_DMA_Init+0x28>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <MX_DMA_Init+0x28>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <MX_DMA_Init+0x28>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	40021000 	.word	0x40021000

08000f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fac:	4b3f      	ldr	r3, [pc, #252]	; (80010ac <MX_GPIO_Init+0x114>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a3e      	ldr	r2, [pc, #248]	; (80010ac <MX_GPIO_Init+0x114>)
 8000fb2:	f043 0310 	orr.w	r3, r3, #16
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b3c      	ldr	r3, [pc, #240]	; (80010ac <MX_GPIO_Init+0x114>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0310 	and.w	r3, r3, #16
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc4:	4b39      	ldr	r3, [pc, #228]	; (80010ac <MX_GPIO_Init+0x114>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a38      	ldr	r2, [pc, #224]	; (80010ac <MX_GPIO_Init+0x114>)
 8000fca:	f043 0320 	orr.w	r3, r3, #32
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b36      	ldr	r3, [pc, #216]	; (80010ac <MX_GPIO_Init+0x114>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0320 	and.w	r3, r3, #32
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b33      	ldr	r3, [pc, #204]	; (80010ac <MX_GPIO_Init+0x114>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a32      	ldr	r2, [pc, #200]	; (80010ac <MX_GPIO_Init+0x114>)
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <MX_GPIO_Init+0x114>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <MX_GPIO_Init+0x114>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	4a2c      	ldr	r2, [pc, #176]	; (80010ac <MX_GPIO_Init+0x114>)
 8000ffa:	f043 0308 	orr.w	r3, r3, #8
 8000ffe:	6193      	str	r3, [r2, #24]
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <MX_GPIO_Init+0x114>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0308 	and.w	r3, r3, #8
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001012:	4827      	ldr	r0, [pc, #156]	; (80010b0 <MX_GPIO_Init+0x118>)
 8001014:	f001 fad8 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	f248 11c0 	movw	r1, #33216	; 0x81c0
 800101e:	4825      	ldr	r0, [pc, #148]	; (80010b4 <MX_GPIO_Init+0x11c>)
 8001020:	f001 fad2 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800102a:	4823      	ldr	r0, [pc, #140]	; (80010b8 <MX_GPIO_Init+0x120>)
 800102c:	f001 facc 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001030:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	4619      	mov	r1, r3
 8001048:	4819      	ldr	r0, [pc, #100]	; (80010b0 <MX_GPIO_Init+0x118>)
 800104a:	f001 f963 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
 800104e:	f248 13c0 	movw	r3, #33216	; 0x81c0
 8001052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001054:	2301      	movs	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	4619      	mov	r1, r3
 8001066:	4813      	ldr	r0, [pc, #76]	; (80010b4 <MX_GPIO_Init+0x11c>)
 8001068:	f001 f954 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800106c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001070:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	4619      	mov	r1, r3
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_GPIO_Init+0x120>)
 8001086:	f001 f945 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800108a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800108e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_GPIO_Init+0x11c>)
 80010a0:	f001 f938 	bl	8002314 <HAL_GPIO_Init>

}
 80010a4:	bf00      	nop
 80010a6:	3720      	adds	r7, #32
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40011000 	.word	0x40011000
 80010b4:	40010800 	.word	0x40010800
 80010b8:	40010c00 	.word	0x40010c00

080010bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <Error_Handler+0x6>

080010c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_MspInit+0x5c>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	4a14      	ldr	r2, [pc, #80]	; (8001120 <HAL_MspInit+0x5c>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6193      	str	r3, [r2, #24]
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_MspInit+0x5c>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_MspInit+0x5c>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <HAL_MspInit+0x5c>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	61d3      	str	r3, [r2, #28]
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <HAL_MspInit+0x5c>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_MspInit+0x60>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <HAL_MspInit+0x60>)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	40021000 	.word	0x40021000
 8001124:	40010000 	.word	0x40010000

08001128 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <HAL_ADC_MspInit+0x6c>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d121      	bne.n	800118c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_ADC_MspInit+0x70>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a12      	ldr	r2, [pc, #72]	; (8001198 <HAL_ADC_MspInit+0x70>)
 800114e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <HAL_ADC_MspInit+0x70>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HAL_ADC_MspInit+0x70>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <HAL_ADC_MspInit+0x70>)
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_ADC_MspInit+0x70>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001178:	230f      	movs	r3, #15
 800117a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117c:	2303      	movs	r3, #3
 800117e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <HAL_ADC_MspInit+0x74>)
 8001188:	f001 f8c4 	bl	8002314 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40012400 	.word	0x40012400
 8001198:	40021000 	.word	0x40021000
 800119c:	40010800 	.word	0x40010800

080011a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	; 0x30
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a45      	ldr	r2, [pc, #276]	; (80012d0 <HAL_I2C_MspInit+0x130>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d159      	bne.n	8001274 <HAL_I2C_MspInit+0xd4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b44      	ldr	r3, [pc, #272]	; (80012d4 <HAL_I2C_MspInit+0x134>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a43      	ldr	r2, [pc, #268]	; (80012d4 <HAL_I2C_MspInit+0x134>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b41      	ldr	r3, [pc, #260]	; (80012d4 <HAL_I2C_MspInit+0x134>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011de:	2312      	movs	r3, #18
 80011e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4619      	mov	r1, r3
 80011ec:	483a      	ldr	r0, [pc, #232]	; (80012d8 <HAL_I2C_MspInit+0x138>)
 80011ee:	f001 f891 	bl	8002314 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80011f2:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <HAL_I2C_MspInit+0x13c>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001202:	f043 0302 	orr.w	r3, r3, #2
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001208:	4a34      	ldr	r2, [pc, #208]	; (80012dc <HAL_I2C_MspInit+0x13c>)
 800120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800120e:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <HAL_I2C_MspInit+0x134>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	4a30      	ldr	r2, [pc, #192]	; (80012d4 <HAL_I2C_MspInit+0x134>)
 8001214:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001218:	61d3      	str	r3, [r2, #28]
 800121a:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <HAL_I2C_MspInit+0x134>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001226:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <HAL_I2C_MspInit+0x140>)
 8001228:	4a2e      	ldr	r2, [pc, #184]	; (80012e4 <HAL_I2C_MspInit+0x144>)
 800122a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800122c:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <HAL_I2C_MspInit+0x140>)
 800122e:	2210      	movs	r2, #16
 8001230:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001232:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <HAL_I2C_MspInit+0x140>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001238:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <HAL_I2C_MspInit+0x140>)
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800123e:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <HAL_I2C_MspInit+0x140>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <HAL_I2C_MspInit+0x140>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <HAL_I2C_MspInit+0x140>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001250:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <HAL_I2C_MspInit+0x140>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001256:	4822      	ldr	r0, [pc, #136]	; (80012e0 <HAL_I2C_MspInit+0x140>)
 8001258:	f000 fe7a 	bl	8001f50 <HAL_DMA_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 8001262:	f7ff ff2b 	bl	80010bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a1d      	ldr	r2, [pc, #116]	; (80012e0 <HAL_I2C_MspInit+0x140>)
 800126a:	635a      	str	r2, [r3, #52]	; 0x34
 800126c:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <HAL_I2C_MspInit+0x140>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001272:	e029      	b.n	80012c8 <HAL_I2C_MspInit+0x128>
  else if(hi2c->Instance==I2C2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <HAL_I2C_MspInit+0x148>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d124      	bne.n	80012c8 <HAL_I2C_MspInit+0x128>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_I2C_MspInit+0x134>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <HAL_I2C_MspInit+0x134>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	6193      	str	r3, [r2, #24]
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_I2C_MspInit+0x134>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001296:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800129a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129c:	2312      	movs	r3, #18
 800129e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	480b      	ldr	r0, [pc, #44]	; (80012d8 <HAL_I2C_MspInit+0x138>)
 80012ac:	f001 f832 	bl	8002314 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_I2C_MspInit+0x134>)
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <HAL_I2C_MspInit+0x134>)
 80012b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012ba:	61d3      	str	r3, [r2, #28]
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <HAL_I2C_MspInit+0x134>)
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
}
 80012c8:	bf00      	nop
 80012ca:	3730      	adds	r7, #48	; 0x30
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40005400 	.word	0x40005400
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010c00 	.word	0x40010c00
 80012dc:	40010000 	.word	0x40010000
 80012e0:	20000468 	.word	0x20000468
 80012e4:	4002006c 	.word	0x4002006c
 80012e8:	40005800 	.word	0x40005800

080012ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012fc:	d10c      	bne.n	8001318 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_TIM_Base_MspInit+0x58>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	4a10      	ldr	r2, [pc, #64]	; (8001344 <HAL_TIM_Base_MspInit+0x58>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	61d3      	str	r3, [r2, #28]
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_TIM_Base_MspInit+0x58>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001316:	e010      	b.n	800133a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <HAL_TIM_Base_MspInit+0x5c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d10b      	bne.n	800133a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_TIM_Base_MspInit+0x58>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a07      	ldr	r2, [pc, #28]	; (8001344 <HAL_TIM_Base_MspInit+0x58>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_TIM_Base_MspInit+0x58>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000
 8001348:	40000400 	.word	0x40000400

0800134c <LEDMatrixNextRow>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LEDMatrixNextRow(uint8_t addr){
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]

	blocked = 1; //avoid issues
 8001356:	4b33      	ldr	r3, [pc, #204]	; (8001424 <LEDMatrixNextRow+0xd8>)
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]

	DMA1_Channel6->CCR &= ~1; //disable DMA1 Channel 6 for reconfiguring
 800135c:	4b32      	ldr	r3, [pc, #200]	; (8001428 <LEDMatrixNextRow+0xdc>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a31      	ldr	r2, [pc, #196]	; (8001428 <LEDMatrixNextRow+0xdc>)
 8001362:	f023 0301 	bic.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]
	if(currentLEDRow == 3) currentLEDRow = 0;
 8001368:	4b30      	ldr	r3, [pc, #192]	; (800142c <LEDMatrixNextRow+0xe0>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b03      	cmp	r3, #3
 8001370:	d103      	bne.n	800137a <LEDMatrixNextRow+0x2e>
 8001372:	4b2e      	ldr	r3, [pc, #184]	; (800142c <LEDMatrixNextRow+0xe0>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	e006      	b.n	8001388 <LEDMatrixNextRow+0x3c>
	else currentLEDRow++;
 800137a:	4b2c      	ldr	r3, [pc, #176]	; (800142c <LEDMatrixNextRow+0xe0>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	3301      	adds	r3, #1
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <LEDMatrixNextRow+0xe0>)
 8001386:	701a      	strb	r2, [r3, #0]
	DMA1_Channel6->CNDTR = 3; //reload 3 bytes to transfer
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <LEDMatrixNextRow+0xdc>)
 800138a:	2203      	movs	r2, #3
 800138c:	605a      	str	r2, [r3, #4]
	DMA1_Channel6->CMAR = (uint32_t)&(LEDMatrixBuffer[currentLEDRow*3]); //set next target
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <LEDMatrixNextRow+0xe0>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	4613      	mov	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	4413      	add	r3, r2
 800139c:	4a24      	ldr	r2, [pc, #144]	; (8001430 <LEDMatrixNextRow+0xe4>)
 800139e:	441a      	add	r2, r3
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <LEDMatrixNextRow+0xdc>)
 80013a2:	60da      	str	r2, [r3, #12]
	DMA1_Channel6->CCR |= 1; //enable DMA1 Channel 6
 80013a4:	4b20      	ldr	r3, [pc, #128]	; (8001428 <LEDMatrixNextRow+0xdc>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a1f      	ldr	r2, [pc, #124]	; (8001428 <LEDMatrixNextRow+0xdc>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	b672      	cpsid	i

	__disable_irq();
	TIM2->CR1 &= ~1; //disable BAM Driver
 80013b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <LEDMatrixNextRow+0xe8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <LEDMatrixNextRow+0xe8>)
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= (1<<8); //send restart condition
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <LEDMatrixNextRow+0xec>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a19      	ldr	r2, [pc, #100]	; (8001438 <LEDMatrixNextRow+0xec>)
 80013d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d8:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 80013da:	bf00      	nop
 80013dc:	4b16      	ldr	r3, [pc, #88]	; (8001438 <LEDMatrixNextRow+0xec>)
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f9      	beq.n	80013dc <LEDMatrixNextRow+0x90>
	I2C1->DR = LEDMatrix_Address; //address the MCP23017
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <LEDMatrixNextRow+0xec>)
 80013ea:	2248      	movs	r2, #72	; 0x48
 80013ec:	611a      	str	r2, [r3, #16]
	I2C1->CR2 |= (1<<11); //enable DMA Requests
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <LEDMatrixNextRow+0xec>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	4a11      	ldr	r2, [pc, #68]	; (8001438 <LEDMatrixNextRow+0xec>)
 80013f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013f8:	6053      	str	r3, [r2, #4]
	TIM2->CR1 |= 1; //enable BAM Driver
 80013fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <LEDMatrixNextRow+0xe8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a09      	ldr	r2, [pc, #36]	; (8001434 <LEDMatrixNextRow+0xe8>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001416:	b662      	cpsie	i
	else GPIOA->BRR = 1<<6;
	TIM2->CR1 |= 1; //enable BAM Driver
	TIM3->CR1 |= 1;
	__enable_irq();*/

}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000215 	.word	0x20000215
 8001428:	4002006c 	.word	0x4002006c
 800142c:	20000236 	.word	0x20000236
 8001430:	20000628 	.word	0x20000628
 8001434:	40000400 	.word	0x40000400
 8001438:	40005400 	.word	0x40005400

0800143c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <NMI_Handler+0x4>

08001442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <MemManage_Handler+0x4>

0800144e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <UsageFault_Handler+0x4>

0800145a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001482:	f000 fa31 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	//GPIOA->BRR = 1<<6;



  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <DMA1_Channel6_IRQHandler+0x10>)
 8001492:	f000 fe2d 	bl	80020f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  //GPIOA->BSRR = 1<<6;
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000468 	.word	0x20000468

080014a0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80014a6:	f002 fee1 	bl	800426c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200012cc 	.word	0x200012cc

080014b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//GPIOA->BSRR = 1<<6;
	if(BAMIndex == 0){
 80014b8:	4b45      	ldr	r3, [pc, #276]	; (80015d0 <TIM2_IRQHandler+0x11c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d102      	bne.n	80014c8 <TIM2_IRQHandler+0x14>
		blocked = 1; //block to protect the time sensitive LSB's, otherwise it gets pretty flicker-ry
 80014c2:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <TIM2_IRQHandler+0x120>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]

	}

	if(brightness[0] & (1 << BAMIndex))	GPIOB->BSRR = (1<<12);
 80014c8:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <TIM2_IRQHandler+0x124>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b3f      	ldr	r3, [pc, #252]	; (80015d0 <TIM2_IRQHandler+0x11c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	fa42 f303 	asr.w	r3, r2, r3
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d004      	beq.n	80014ec <TIM2_IRQHandler+0x38>
 80014e2:	4b3e      	ldr	r3, [pc, #248]	; (80015dc <TIM2_IRQHandler+0x128>)
 80014e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014e8:	611a      	str	r2, [r3, #16]
 80014ea:	e003      	b.n	80014f4 <TIM2_IRQHandler+0x40>
	else GPIOB->BRR = (1<<12);
 80014ec:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <TIM2_IRQHandler+0x128>)
 80014ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f2:	615a      	str	r2, [r3, #20]
	if(brightness[1] & (1 << BAMIndex))	GPIOB->BSRR = (1<<13);
 80014f4:	4b38      	ldr	r3, [pc, #224]	; (80015d8 <TIM2_IRQHandler+0x124>)
 80014f6:	785b      	ldrb	r3, [r3, #1]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <TIM2_IRQHandler+0x11c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	fa42 f303 	asr.w	r3, r2, r3
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d004      	beq.n	8001518 <TIM2_IRQHandler+0x64>
 800150e:	4b33      	ldr	r3, [pc, #204]	; (80015dc <TIM2_IRQHandler+0x128>)
 8001510:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	e003      	b.n	8001520 <TIM2_IRQHandler+0x6c>
	else GPIOB->BRR = (1<<13);
 8001518:	4b30      	ldr	r3, [pc, #192]	; (80015dc <TIM2_IRQHandler+0x128>)
 800151a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800151e:	615a      	str	r2, [r3, #20]
	if(brightness[2] & (1 << BAMIndex))	GPIOB->BSRR = (1<<14);
 8001520:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <TIM2_IRQHandler+0x124>)
 8001522:	789b      	ldrb	r3, [r3, #2]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <TIM2_IRQHandler+0x11c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	fa42 f303 	asr.w	r3, r2, r3
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d004      	beq.n	8001544 <TIM2_IRQHandler+0x90>
 800153a:	4b28      	ldr	r3, [pc, #160]	; (80015dc <TIM2_IRQHandler+0x128>)
 800153c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001540:	611a      	str	r2, [r3, #16]
 8001542:	e003      	b.n	800154c <TIM2_IRQHandler+0x98>
	else GPIOB->BRR = (1<<14);
 8001544:	4b25      	ldr	r3, [pc, #148]	; (80015dc <TIM2_IRQHandler+0x128>)
 8001546:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800154a:	615a      	str	r2, [r3, #20]
	if(brightness[3] & (1 << BAMIndex))	GPIOB->BSRR = (1<<15);
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <TIM2_IRQHandler+0x124>)
 800154e:	78db      	ldrb	r3, [r3, #3]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <TIM2_IRQHandler+0x11c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	fa42 f303 	asr.w	r3, r2, r3
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d004      	beq.n	8001570 <TIM2_IRQHandler+0xbc>
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <TIM2_IRQHandler+0x128>)
 8001568:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800156c:	611a      	str	r2, [r3, #16]
 800156e:	e003      	b.n	8001578 <TIM2_IRQHandler+0xc4>
	else GPIOB->BRR = (1<<15);
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <TIM2_IRQHandler+0x128>)
 8001572:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001576:	615a      	str	r2, [r3, #20]


*/

	//FIXME this might potentially cause issues, as it blocks for half of the time
	if(BAMIndex == 5){
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <TIM2_IRQHandler+0x11c>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b05      	cmp	r3, #5
 8001580:	d102      	bne.n	8001588 <TIM2_IRQHandler+0xd4>
		blocked = 0; //Time sensitive LSB's are done, unblock, value of 3 or less gives visible flicker
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <TIM2_IRQHandler+0x120>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]

	}

	if(BAMIndex == 7){ //We've passed one BAM cycle
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <TIM2_IRQHandler+0x11c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b07      	cmp	r3, #7
 8001590:	d10a      	bne.n	80015a8 <TIM2_IRQHandler+0xf4>


		BAMIndex = 0;
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <TIM2_IRQHandler+0x11c>)
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = 1;
 8001598:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800159c:	2201      	movs	r2, #1
 800159e:	629a      	str	r2, [r3, #40]	; 0x28
		LEDMatrixNextRow(LEDMatrix_Address);
 80015a0:	2048      	movs	r0, #72	; 0x48
 80015a2:	f7ff fed3 	bl	800134c <LEDMatrixNextRow>
 80015a6:	e00d      	b.n	80015c4 <TIM2_IRQHandler+0x110>



	}
	else{
		BAMIndex++;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <TIM2_IRQHandler+0x11c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	3301      	adds	r3, #1
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <TIM2_IRQHandler+0x11c>)
 80015b4:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = (volatile)(TIM2->PSC << 1); //set next write to occupy twice the time of this current write.
 80015b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	6293      	str	r3, [r2, #40]	; 0x28
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015c4:	4806      	ldr	r0, [pc, #24]	; (80015e0 <TIM2_IRQHandler+0x12c>)
 80015c6:	f004 fdb0 	bl	800612a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000214 	.word	0x20000214
 80015d4:	20000215 	.word	0x20000215
 80015d8:	20000000 	.word	0x20000000
 80015dc:	40010c00 	.word	0x40010c00
 80015e0:	200005e0 	.word	0x200005e0

080015e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	GPIOA->BSRR = 1<<6;
 80015ea:	4b4e      	ldr	r3, [pc, #312]	; (8001724 <TIM3_IRQHandler+0x140>)
 80015ec:	2240      	movs	r2, #64	; 0x40
 80015ee:	611a      	str	r2, [r3, #16]
	uint8_t currentReadoff = ((((GPIOA->IDR)>>9) & 1) << 1) | (((GPIOA->IDR)>>10) & 1); //read current encoder state
 80015f0:	4b4c      	ldr	r3, [pc, #304]	; (8001724 <TIM3_IRQHandler+0x140>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	0a5b      	lsrs	r3, r3, #9
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b48      	ldr	r3, [pc, #288]	; (8001724 <TIM3_IRQHandler+0x140>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	0a9b      	lsrs	r3, r3, #10
 8001608:	b2db      	uxtb	r3, r3
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	b2db      	uxtb	r3, r3
 8001610:	4313      	orrs	r3, r2
 8001612:	71fb      	strb	r3, [r7, #7]
	uint8_t index = (lastEncoder[currentEncoder]<<2) | currentReadoff;
 8001614:	4b44      	ldr	r3, [pc, #272]	; (8001728 <TIM3_IRQHandler+0x144>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	461a      	mov	r2, r3
 800161c:	4b43      	ldr	r3, [pc, #268]	; (800172c <TIM3_IRQHandler+0x148>)
 800161e:	5c9b      	ldrb	r3, [r3, r2]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	b25a      	sxtb	r2, r3
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	4313      	orrs	r3, r2
 800162c:	b25b      	sxtb	r3, r3
 800162e:	71bb      	strb	r3, [r7, #6]
	encoderValues[currentEncoder] += encoderLUT[index];
 8001630:	79bb      	ldrb	r3, [r7, #6]
 8001632:	4a3f      	ldr	r2, [pc, #252]	; (8001730 <TIM3_IRQHandler+0x14c>)
 8001634:	5cd3      	ldrb	r3, [r2, r3]
 8001636:	b259      	sxtb	r1, r3
 8001638:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <TIM3_IRQHandler+0x144>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4610      	mov	r0, r2
 8001640:	4b3c      	ldr	r3, [pc, #240]	; (8001734 <TIM3_IRQHandler+0x150>)
 8001642:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001646:	4608      	mov	r0, r1
 8001648:	4611      	mov	r1, r2
 800164a:	4403      	add	r3, r0
 800164c:	4a39      	ldr	r2, [pc, #228]	; (8001734 <TIM3_IRQHandler+0x150>)
 800164e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	encoderChanged[currentEncoder] = encoderLUT[index];
 8001652:	79bb      	ldrb	r3, [r7, #6]
 8001654:	4a36      	ldr	r2, [pc, #216]	; (8001730 <TIM3_IRQHandler+0x14c>)
 8001656:	5cd3      	ldrb	r3, [r2, r3]
 8001658:	b259      	sxtb	r1, r3
 800165a:	4b33      	ldr	r3, [pc, #204]	; (8001728 <TIM3_IRQHandler+0x144>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	b2c9      	uxtb	r1, r1
 8001664:	4b34      	ldr	r3, [pc, #208]	; (8001738 <TIM3_IRQHandler+0x154>)
 8001666:	5499      	strb	r1, [r3, r2]

	//constrain encoderValues
	if(encoderValues[currentEncoder] > 255) encoderValues[currentEncoder] = 255;
 8001668:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <TIM3_IRQHandler+0x144>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	4b30      	ldr	r3, [pc, #192]	; (8001734 <TIM3_IRQHandler+0x150>)
 8001672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001676:	2bff      	cmp	r3, #255	; 0xff
 8001678:	dd07      	ble.n	800168a <TIM3_IRQHandler+0xa6>
 800167a:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <TIM3_IRQHandler+0x144>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	4619      	mov	r1, r3
 8001682:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <TIM3_IRQHandler+0x150>)
 8001684:	22ff      	movs	r2, #255	; 0xff
 8001686:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	if(encoderValues[currentEncoder] < 0) encoderValues[currentEncoder] = 0;
 800168a:	4b27      	ldr	r3, [pc, #156]	; (8001728 <TIM3_IRQHandler+0x144>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	461a      	mov	r2, r3
 8001692:	4b28      	ldr	r3, [pc, #160]	; (8001734 <TIM3_IRQHandler+0x150>)
 8001694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001698:	2b00      	cmp	r3, #0
 800169a:	da07      	bge.n	80016ac <TIM3_IRQHandler+0xc8>
 800169c:	4b22      	ldr	r3, [pc, #136]	; (8001728 <TIM3_IRQHandler+0x144>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4619      	mov	r1, r3
 80016a4:	4b23      	ldr	r3, [pc, #140]	; (8001734 <TIM3_IRQHandler+0x150>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	lastEncoder[currentEncoder] = currentReadoff;
 80016ac:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <TIM3_IRQHandler+0x144>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	4619      	mov	r1, r3
 80016b4:	4a1d      	ldr	r2, [pc, #116]	; (800172c <TIM3_IRQHandler+0x148>)
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	5453      	strb	r3, [r2, r1]
	//uint8_t buffer[256];
	//sprintf(buffer, "currentReadoff %d index %d encoderValue %d\r\n", currentReadoff, index, encoderValues[0]);
	//CDC_Transmit_FS(buffer, sizeof(buffer));
	//}

	if(currentEncoder == 4) currentEncoder = 0;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <TIM3_IRQHandler+0x144>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d103      	bne.n	80016cc <TIM3_IRQHandler+0xe8>
 80016c4:	4b18      	ldr	r3, [pc, #96]	; (8001728 <TIM3_IRQHandler+0x144>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	e006      	b.n	80016da <TIM3_IRQHandler+0xf6>
	else currentEncoder++;
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <TIM3_IRQHandler+0x144>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	3301      	adds	r3, #1
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <TIM3_IRQHandler+0x144>)
 80016d8:	701a      	strb	r2, [r3, #0]

	//select the nth encoder here to allow the mux time to settle
	GPIOC->BRR = (3<<13); //clear GPIO Pins
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <TIM3_IRQHandler+0x158>)
 80016dc:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80016e0:	615a      	str	r2, [r3, #20]
	GPIOC->BSRR = ((currentEncoder&3)<<13);
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <TIM3_IRQHandler+0x144>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	035b      	lsls	r3, r3, #13
 80016ea:	4a14      	ldr	r2, [pc, #80]	; (800173c <TIM3_IRQHandler+0x158>)
 80016ec:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80016f0:	6113      	str	r3, [r2, #16]
	GPIOA->BRR = (1<<15);
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <TIM3_IRQHandler+0x140>)
 80016f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016f8:	615a      	str	r2, [r3, #20]
	if(currentEncoder&4) GPIOA->BSRR = (1<<15); //BLOODY SOLDER DAG!!! Shorted out the pins giving the result in DS14
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <TIM3_IRQHandler+0x144>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <TIM3_IRQHandler+0x12c>
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <TIM3_IRQHandler+0x140>)
 800170a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800170e:	611a      	str	r2, [r3, #16]

	GPIOA->BRR = 1<<6;
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <TIM3_IRQHandler+0x140>)
 8001712:	2240      	movs	r2, #64	; 0x40
 8001714:	615a      	str	r2, [r3, #20]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001716:	480a      	ldr	r0, [pc, #40]	; (8001740 <TIM3_IRQHandler+0x15c>)
 8001718:	f004 fd07 	bl	800612a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40010800 	.word	0x40010800
 8001728:	20000216 	.word	0x20000216
 800172c:	20000218 	.word	0x20000218
 8001730:	20000004 	.word	0x20000004
 8001734:	20000220 	.word	0x20000220
 8001738:	200005a8 	.word	0x200005a8
 800173c:	40011000 	.word	0x40011000
 8001740:	20000560 	.word	0x20000560

08001744 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

	//note: time to transfer 4 packets at this speed is about 100 us



	GPIOA->BSRR = 1<<7;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <I2C1_EV_IRQHandler+0x44>)
 800174a:	2280      	movs	r2, #128	; 0x80
 800174c:	611a      	str	r2, [r3, #16]
	if(I2C1->SR1 & (1<<2)){ //BTF is set
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <I2C1_EV_IRQHandler+0x48>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00e      	beq.n	8001778 <I2C1_EV_IRQHandler+0x34>

		I2C1->CR2 &= ~(1<<11); //disable I2C1 DMA requesting
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <I2C1_EV_IRQHandler+0x48>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <I2C1_EV_IRQHandler+0x48>)
 8001760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001764:	6053      	str	r3, [r2, #4]
		I2C1->CR1 |= (1<<9); //send stop condition
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <I2C1_EV_IRQHandler+0x48>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <I2C1_EV_IRQHandler+0x48>)
 800176c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001770:	6013      	str	r3, [r2, #0]
		blocked = 0; //give clearance for other blocking operations
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <I2C1_EV_IRQHandler+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
			}
		}*/
	}

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001778:	4806      	ldr	r0, [pc, #24]	; (8001794 <I2C1_EV_IRQHandler+0x50>)
 800177a:	f001 f875 	bl	8002868 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */
  	GPIOA->BRR = 1<<7;
 800177e:	4b02      	ldr	r3, [pc, #8]	; (8001788 <I2C1_EV_IRQHandler+0x44>)
 8001780:	2280      	movs	r2, #128	; 0x80
 8001782:	615a      	str	r2, [r3, #20]
  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40010800 	.word	0x40010800
 800178c:	40005400 	.word	0x40005400
 8001790:	20000215 	.word	0x20000215
 8001794:	200004ac 	.word	0x200004ac

08001798 <_sbrk>:
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <_sbrk+0x5c>)
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <_sbrk+0x60>)
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <_sbrk+0x22>
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <_sbrk+0x64>)
 80017b6:	4a12      	ldr	r2, [pc, #72]	; (8001800 <_sbrk+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d207      	bcs.n	80017d8 <_sbrk+0x40>
 80017c8:	f009 f85c 	bl	800a884 <__errno>
 80017cc:	4602      	mov	r2, r0
 80017ce:	230c      	movs	r3, #12
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	e009      	b.n	80017ec <_sbrk+0x54>
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b07      	ldr	r3, [pc, #28]	; (80017fc <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <_sbrk+0x64>)
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20005000 	.word	0x20005000
 80017f8:	00000400 	.word	0x00000400
 80017fc:	20000238 	.word	0x20000238
 8001800:	200015c0 	.word	0x200015c0

08001804 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <Reset_Handler>:
 8001810:	2100      	movs	r1, #0
 8001812:	e003      	b.n	800181c <LoopCopyDataInit>

08001814 <CopyDataInit>:
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <LoopFillZerobss+0x14>)
 8001816:	585b      	ldr	r3, [r3, r1]
 8001818:	5043      	str	r3, [r0, r1]
 800181a:	3104      	adds	r1, #4

0800181c <LoopCopyDataInit>:
 800181c:	480a      	ldr	r0, [pc, #40]	; (8001848 <LoopFillZerobss+0x18>)
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <LoopFillZerobss+0x1c>)
 8001820:	1842      	adds	r2, r0, r1
 8001822:	429a      	cmp	r2, r3
 8001824:	d3f6      	bcc.n	8001814 <CopyDataInit>
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <LoopFillZerobss+0x20>)
 8001828:	e002      	b.n	8001830 <LoopFillZerobss>

0800182a <FillZerobss>:
 800182a:	2300      	movs	r3, #0
 800182c:	f842 3b04 	str.w	r3, [r2], #4

08001830 <LoopFillZerobss>:
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <LoopFillZerobss+0x24>)
 8001832:	429a      	cmp	r2, r3
 8001834:	d3f9      	bcc.n	800182a <FillZerobss>
 8001836:	f7ff ffe5 	bl	8001804 <SystemInit>
 800183a:	f009 f829 	bl	800a890 <__libc_init_array>
 800183e:	f7ff f8bb 	bl	80009b8 <main>
 8001842:	4770      	bx	lr
 8001844:	0800b218 	.word	0x0800b218
 8001848:	20000000 	.word	0x20000000
 800184c:	200001f8 	.word	0x200001f8
 8001850:	200001f8 	.word	0x200001f8
 8001854:	200015bc 	.word	0x200015bc

08001858 <ADC1_2_IRQHandler>:
 8001858:	e7fe      	b.n	8001858 <ADC1_2_IRQHandler>
	...

0800185c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_Init+0x28>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_Init+0x28>)
 8001866:	f043 0310 	orr.w	r3, r3, #16
 800186a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 fb2d 	bl	8001ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	2000      	movs	r0, #0
 8001874:	f000 f808 	bl	8001888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff fc24 	bl	80010c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40022000 	.word	0x40022000

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x54>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x58>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fb45 	bl	8001f36 <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f000 fb0d 	bl	8001ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <HAL_InitTick+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000018 	.word	0x20000018
 80018e0:	20000020 	.word	0x20000020
 80018e4:	2000001c 	.word	0x2000001c

080018e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_IncTick+0x1c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_IncTick+0x20>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a03      	ldr	r2, [pc, #12]	; (8001908 <HAL_IncTick+0x20>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000020 	.word	0x20000020
 8001908:	20000634 	.word	0x20000634

0800190c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b02      	ldr	r3, [pc, #8]	; (800191c <HAL_GetTick+0x10>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	20000634 	.word	0x20000634

08001920 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e0be      	b.n	8001ac0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194c:	2b00      	cmp	r3, #0
 800194e:	d109      	bne.n	8001964 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fbe2 	bl	8001128 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f9ab 	bl	8001cc0 <ADC_ConversionStop_Disable>
 800196a:	4603      	mov	r3, r0
 800196c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	2b00      	cmp	r3, #0
 8001978:	f040 8099 	bne.w	8001aae <HAL_ADC_Init+0x18e>
 800197c:	7dfb      	ldrb	r3, [r7, #23]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f040 8095 	bne.w	8001aae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800198c:	f023 0302 	bic.w	r3, r3, #2
 8001990:	f043 0202 	orr.w	r2, r3, #2
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019a0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7b1b      	ldrb	r3, [r3, #12]
 80019a6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019a8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b8:	d003      	beq.n	80019c2 <HAL_ADC_Init+0xa2>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d102      	bne.n	80019c8 <HAL_ADC_Init+0xa8>
 80019c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019c6:	e000      	b.n	80019ca <HAL_ADC_Init+0xaa>
 80019c8:	2300      	movs	r3, #0
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7d1b      	ldrb	r3, [r3, #20]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d119      	bne.n	8001a0c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7b1b      	ldrb	r3, [r3, #12]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d109      	bne.n	80019f4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	035a      	lsls	r2, r3, #13
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	e00b      	b.n	8001a0c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	f043 0220 	orr.w	r2, r3, #32
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	f043 0201 	orr.w	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <HAL_ADC_Init+0x1a8>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	430b      	orrs	r3, r1
 8001a32:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a3c:	d003      	beq.n	8001a46 <HAL_ADC_Init+0x126>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d104      	bne.n	8001a50 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	051b      	lsls	r3, r3, #20
 8001a4e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <HAL_ADC_Init+0x1ac>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d10b      	bne.n	8001a8c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	f023 0303 	bic.w	r3, r3, #3
 8001a82:	f043 0201 	orr.w	r2, r3, #1
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a8a:	e018      	b.n	8001abe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a90:	f023 0312 	bic.w	r3, r3, #18
 8001a94:	f043 0210 	orr.w	r2, r3, #16
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	f043 0201 	orr.w	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001aac:	e007      	b.n	8001abe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab2:	f043 0210 	orr.w	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	ffe1f7fd 	.word	0xffe1f7fd
 8001acc:	ff1f0efe 	.word	0xff1f0efe

08001ad0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x20>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e0dc      	b.n	8001caa <HAL_ADC_ConfigChannel+0x1da>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b06      	cmp	r3, #6
 8001afe:	d81c      	bhi.n	8001b3a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b05      	subs	r3, #5
 8001b12:	221f      	movs	r2, #31
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4019      	ands	r1, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	6818      	ldr	r0, [r3, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	3b05      	subs	r3, #5
 8001b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	635a      	str	r2, [r3, #52]	; 0x34
 8001b38:	e03c      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	d81c      	bhi.n	8001b7c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	3b23      	subs	r3, #35	; 0x23
 8001b54:	221f      	movs	r2, #31
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	4019      	ands	r1, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b23      	subs	r3, #35	; 0x23
 8001b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	631a      	str	r2, [r3, #48]	; 0x30
 8001b7a:	e01b      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b41      	subs	r3, #65	; 0x41
 8001b8e:	221f      	movs	r2, #31
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	4019      	ands	r1, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3b41      	subs	r3, #65	; 0x41
 8001ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b09      	cmp	r3, #9
 8001bba:	d91c      	bls.n	8001bf6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68d9      	ldr	r1, [r3, #12]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	3b1e      	subs	r3, #30
 8001bce:	2207      	movs	r2, #7
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	4019      	ands	r1, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	6898      	ldr	r0, [r3, #8]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	3b1e      	subs	r3, #30
 8001be8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	60da      	str	r2, [r3, #12]
 8001bf4:	e019      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6919      	ldr	r1, [r3, #16]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	2207      	movs	r2, #7
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	4019      	ands	r1, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	6898      	ldr	r0, [r3, #8]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b10      	cmp	r3, #16
 8001c30:	d003      	beq.n	8001c3a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c36:	2b11      	cmp	r3, #17
 8001c38:	d132      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1d      	ldr	r2, [pc, #116]	; (8001cb4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d125      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d126      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c60:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d11a      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <HAL_ADC_ConfigChannel+0x1ec>)
 8001c70:	fba2 2303 	umull	r2, r3, r2, r3
 8001c74:	0c9a      	lsrs	r2, r3, #18
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c80:	e002      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f9      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x1b2>
 8001c8e:	e007      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	f043 0220 	orr.w	r2, r3, #32
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	40012400 	.word	0x40012400
 8001cb8:	20000018 	.word	0x20000018
 8001cbc:	431bde83 	.word	0x431bde83

08001cc0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d127      	bne.n	8001d2a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cea:	f7ff fe0f 	bl	800190c <HAL_GetTick>
 8001cee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cf0:	e014      	b.n	8001d1c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cf2:	f7ff fe0b 	bl	800190c <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d90d      	bls.n	8001d1c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	f043 0210 	orr.w	r2, r3, #16
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	f043 0201 	orr.w	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e007      	b.n	8001d2c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d0e3      	beq.n	8001cf2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <__NVIC_SetPriorityGrouping>:
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d50:	4013      	ands	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d66:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	60d3      	str	r3, [r2, #12]
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <__NVIC_GetPriorityGrouping+0x18>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	f003 0307 	and.w	r3, r3, #7
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	db0b      	blt.n	8001dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	f003 021f 	and.w	r2, r3, #31
 8001db0:	4906      	ldr	r1, [pc, #24]	; (8001dcc <__NVIC_EnableIRQ+0x34>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	095b      	lsrs	r3, r3, #5
 8001db8:	2001      	movs	r0, #1
 8001dba:	fa00 f202 	lsl.w	r2, r0, r2
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100

08001dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	db0a      	blt.n	8001dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	490c      	ldr	r1, [pc, #48]	; (8001e1c <__NVIC_SetPriority+0x4c>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	440b      	add	r3, r1
 8001df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df8:	e00a      	b.n	8001e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4908      	ldr	r1, [pc, #32]	; (8001e20 <__NVIC_SetPriority+0x50>)
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	3b04      	subs	r3, #4
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	761a      	strb	r2, [r3, #24]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000e100 	.word	0xe000e100
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	; 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f1c3 0307 	rsb	r3, r3, #7
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	bf28      	it	cs
 8001e42:	2304      	movcs	r3, #4
 8001e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d902      	bls.n	8001e54 <NVIC_EncodePriority+0x30>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3b03      	subs	r3, #3
 8001e52:	e000      	b.n	8001e56 <NVIC_EncodePriority+0x32>
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	401a      	ands	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	43d9      	mvns	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	4313      	orrs	r3, r2
         );
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3724      	adds	r7, #36	; 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e98:	d301      	bcc.n	8001e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00f      	b.n	8001ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <SysTick_Config+0x40>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea6:	210f      	movs	r1, #15
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	f7ff ff90 	bl	8001dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb8:	2207      	movs	r2, #7
 8001eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	e000e010 	.word	0xe000e010

08001ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ff2d 	bl	8001d34 <__NVIC_SetPriorityGrouping>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef4:	f7ff ff42 	bl	8001d7c <__NVIC_GetPriorityGrouping>
 8001ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	6978      	ldr	r0, [r7, #20]
 8001f00:	f7ff ff90 	bl	8001e24 <NVIC_EncodePriority>
 8001f04:	4602      	mov	r2, r0
 8001f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff5f 	bl	8001dd0 <__NVIC_SetPriority>
}
 8001f12:	bf00      	nop
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff35 	bl	8001d98 <__NVIC_EnableIRQ>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ffa2 	bl	8001e88 <SysTick_Config>
 8001f44:	4603      	mov	r3, r0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e043      	b.n	8001fee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b22      	ldr	r3, [pc, #136]	; (8001ff8 <HAL_DMA_Init+0xa8>)
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a22      	ldr	r2, [pc, #136]	; (8001ffc <HAL_DMA_Init+0xac>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	091b      	lsrs	r3, r3, #4
 8001f78:	009a      	lsls	r2, r3, #2
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a1f      	ldr	r2, [pc, #124]	; (8002000 <HAL_DMA_Init+0xb0>)
 8001f82:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f9a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	bffdfff8 	.word	0xbffdfff8
 8001ffc:	cccccccd 	.word	0xcccccccd
 8002000:	40020000 	.word	0x40020000

08002004 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002016:	2b02      	cmp	r3, #2
 8002018:	d005      	beq.n	8002026 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2204      	movs	r2, #4
 800201e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e051      	b.n	80020ca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 020e 	bic.w	r2, r2, #14
 8002034:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0201 	bic.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <HAL_DMA_Abort_IT+0xd0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d029      	beq.n	80020a4 <HAL_DMA_Abort_IT+0xa0>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a20      	ldr	r2, [pc, #128]	; (80020d8 <HAL_DMA_Abort_IT+0xd4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d022      	beq.n	80020a0 <HAL_DMA_Abort_IT+0x9c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1f      	ldr	r2, [pc, #124]	; (80020dc <HAL_DMA_Abort_IT+0xd8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d01a      	beq.n	800209a <HAL_DMA_Abort_IT+0x96>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <HAL_DMA_Abort_IT+0xdc>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d012      	beq.n	8002094 <HAL_DMA_Abort_IT+0x90>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <HAL_DMA_Abort_IT+0xe0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00a      	beq.n	800208e <HAL_DMA_Abort_IT+0x8a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1a      	ldr	r2, [pc, #104]	; (80020e8 <HAL_DMA_Abort_IT+0xe4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d102      	bne.n	8002088 <HAL_DMA_Abort_IT+0x84>
 8002082:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002086:	e00e      	b.n	80020a6 <HAL_DMA_Abort_IT+0xa2>
 8002088:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800208c:	e00b      	b.n	80020a6 <HAL_DMA_Abort_IT+0xa2>
 800208e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002092:	e008      	b.n	80020a6 <HAL_DMA_Abort_IT+0xa2>
 8002094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002098:	e005      	b.n	80020a6 <HAL_DMA_Abort_IT+0xa2>
 800209a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800209e:	e002      	b.n	80020a6 <HAL_DMA_Abort_IT+0xa2>
 80020a0:	2310      	movs	r3, #16
 80020a2:	e000      	b.n	80020a6 <HAL_DMA_Abort_IT+0xa2>
 80020a4:	2301      	movs	r3, #1
 80020a6:	4a11      	ldr	r2, [pc, #68]	; (80020ec <HAL_DMA_Abort_IT+0xe8>)
 80020a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	4798      	blx	r3
    } 
  }
  return status;
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40020008 	.word	0x40020008
 80020d8:	4002001c 	.word	0x4002001c
 80020dc:	40020030 	.word	0x40020030
 80020e0:	40020044 	.word	0x40020044
 80020e4:	40020058 	.word	0x40020058
 80020e8:	4002006c 	.word	0x4002006c
 80020ec:	40020000 	.word	0x40020000

080020f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	2204      	movs	r2, #4
 800210e:	409a      	lsls	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d04f      	beq.n	80021b8 <HAL_DMA_IRQHandler+0xc8>
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b00      	cmp	r3, #0
 8002120:	d04a      	beq.n	80021b8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b00      	cmp	r3, #0
 800212e:	d107      	bne.n	8002140 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0204 	bic.w	r2, r2, #4
 800213e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a66      	ldr	r2, [pc, #408]	; (80022e0 <HAL_DMA_IRQHandler+0x1f0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d029      	beq.n	800219e <HAL_DMA_IRQHandler+0xae>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a65      	ldr	r2, [pc, #404]	; (80022e4 <HAL_DMA_IRQHandler+0x1f4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d022      	beq.n	800219a <HAL_DMA_IRQHandler+0xaa>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a63      	ldr	r2, [pc, #396]	; (80022e8 <HAL_DMA_IRQHandler+0x1f8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d01a      	beq.n	8002194 <HAL_DMA_IRQHandler+0xa4>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a62      	ldr	r2, [pc, #392]	; (80022ec <HAL_DMA_IRQHandler+0x1fc>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d012      	beq.n	800218e <HAL_DMA_IRQHandler+0x9e>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a60      	ldr	r2, [pc, #384]	; (80022f0 <HAL_DMA_IRQHandler+0x200>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00a      	beq.n	8002188 <HAL_DMA_IRQHandler+0x98>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a5f      	ldr	r2, [pc, #380]	; (80022f4 <HAL_DMA_IRQHandler+0x204>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d102      	bne.n	8002182 <HAL_DMA_IRQHandler+0x92>
 800217c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002180:	e00e      	b.n	80021a0 <HAL_DMA_IRQHandler+0xb0>
 8002182:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002186:	e00b      	b.n	80021a0 <HAL_DMA_IRQHandler+0xb0>
 8002188:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800218c:	e008      	b.n	80021a0 <HAL_DMA_IRQHandler+0xb0>
 800218e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002192:	e005      	b.n	80021a0 <HAL_DMA_IRQHandler+0xb0>
 8002194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002198:	e002      	b.n	80021a0 <HAL_DMA_IRQHandler+0xb0>
 800219a:	2340      	movs	r3, #64	; 0x40
 800219c:	e000      	b.n	80021a0 <HAL_DMA_IRQHandler+0xb0>
 800219e:	2304      	movs	r3, #4
 80021a0:	4a55      	ldr	r2, [pc, #340]	; (80022f8 <HAL_DMA_IRQHandler+0x208>)
 80021a2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 8094 	beq.w	80022d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80021b6:	e08e      	b.n	80022d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	2202      	movs	r2, #2
 80021be:	409a      	lsls	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d056      	beq.n	8002276 <HAL_DMA_IRQHandler+0x186>
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d051      	beq.n	8002276 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10b      	bne.n	80021f8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 020a 	bic.w	r2, r2, #10
 80021ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a38      	ldr	r2, [pc, #224]	; (80022e0 <HAL_DMA_IRQHandler+0x1f0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d029      	beq.n	8002256 <HAL_DMA_IRQHandler+0x166>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a37      	ldr	r2, [pc, #220]	; (80022e4 <HAL_DMA_IRQHandler+0x1f4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d022      	beq.n	8002252 <HAL_DMA_IRQHandler+0x162>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a35      	ldr	r2, [pc, #212]	; (80022e8 <HAL_DMA_IRQHandler+0x1f8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d01a      	beq.n	800224c <HAL_DMA_IRQHandler+0x15c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a34      	ldr	r2, [pc, #208]	; (80022ec <HAL_DMA_IRQHandler+0x1fc>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d012      	beq.n	8002246 <HAL_DMA_IRQHandler+0x156>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a32      	ldr	r2, [pc, #200]	; (80022f0 <HAL_DMA_IRQHandler+0x200>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00a      	beq.n	8002240 <HAL_DMA_IRQHandler+0x150>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a31      	ldr	r2, [pc, #196]	; (80022f4 <HAL_DMA_IRQHandler+0x204>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d102      	bne.n	800223a <HAL_DMA_IRQHandler+0x14a>
 8002234:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002238:	e00e      	b.n	8002258 <HAL_DMA_IRQHandler+0x168>
 800223a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223e:	e00b      	b.n	8002258 <HAL_DMA_IRQHandler+0x168>
 8002240:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002244:	e008      	b.n	8002258 <HAL_DMA_IRQHandler+0x168>
 8002246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224a:	e005      	b.n	8002258 <HAL_DMA_IRQHandler+0x168>
 800224c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002250:	e002      	b.n	8002258 <HAL_DMA_IRQHandler+0x168>
 8002252:	2320      	movs	r3, #32
 8002254:	e000      	b.n	8002258 <HAL_DMA_IRQHandler+0x168>
 8002256:	2302      	movs	r3, #2
 8002258:	4a27      	ldr	r2, [pc, #156]	; (80022f8 <HAL_DMA_IRQHandler+0x208>)
 800225a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	2b00      	cmp	r3, #0
 800226a:	d034      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002274:	e02f      	b.n	80022d6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	2208      	movs	r2, #8
 800227c:	409a      	lsls	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4013      	ands	r3, r2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d028      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x1e8>
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d023      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 020e 	bic.w	r2, r2, #14
 800229e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a8:	2101      	movs	r1, #1
 80022aa:	fa01 f202 	lsl.w	r2, r1, r2
 80022ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d004      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	4798      	blx	r3
    }
  }
  return;
 80022d6:	bf00      	nop
 80022d8:	bf00      	nop
}
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40020008 	.word	0x40020008
 80022e4:	4002001c 	.word	0x4002001c
 80022e8:	40020030 	.word	0x40020030
 80022ec:	40020044 	.word	0x40020044
 80022f0:	40020058 	.word	0x40020058
 80022f4:	4002006c 	.word	0x4002006c
 80022f8:	40020000 	.word	0x40020000

080022fc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr

08002314 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002314:	b480      	push	{r7}
 8002316:	b08b      	sub	sp, #44	; 0x2c
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800231e:	2300      	movs	r3, #0
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002322:	2300      	movs	r3, #0
 8002324:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002326:	e127      	b.n	8002578 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002328:	2201      	movs	r2, #1
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	429a      	cmp	r2, r3
 8002342:	f040 8116 	bne.w	8002572 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b12      	cmp	r3, #18
 800234c:	d034      	beq.n	80023b8 <HAL_GPIO_Init+0xa4>
 800234e:	2b12      	cmp	r3, #18
 8002350:	d80d      	bhi.n	800236e <HAL_GPIO_Init+0x5a>
 8002352:	2b02      	cmp	r3, #2
 8002354:	d02b      	beq.n	80023ae <HAL_GPIO_Init+0x9a>
 8002356:	2b02      	cmp	r3, #2
 8002358:	d804      	bhi.n	8002364 <HAL_GPIO_Init+0x50>
 800235a:	2b00      	cmp	r3, #0
 800235c:	d031      	beq.n	80023c2 <HAL_GPIO_Init+0xae>
 800235e:	2b01      	cmp	r3, #1
 8002360:	d01c      	beq.n	800239c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002362:	e048      	b.n	80023f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002364:	2b03      	cmp	r3, #3
 8002366:	d043      	beq.n	80023f0 <HAL_GPIO_Init+0xdc>
 8002368:	2b11      	cmp	r3, #17
 800236a:	d01b      	beq.n	80023a4 <HAL_GPIO_Init+0x90>
          break;
 800236c:	e043      	b.n	80023f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800236e:	4a89      	ldr	r2, [pc, #548]	; (8002594 <HAL_GPIO_Init+0x280>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d026      	beq.n	80023c2 <HAL_GPIO_Init+0xae>
 8002374:	4a87      	ldr	r2, [pc, #540]	; (8002594 <HAL_GPIO_Init+0x280>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d806      	bhi.n	8002388 <HAL_GPIO_Init+0x74>
 800237a:	4a87      	ldr	r2, [pc, #540]	; (8002598 <HAL_GPIO_Init+0x284>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d020      	beq.n	80023c2 <HAL_GPIO_Init+0xae>
 8002380:	4a86      	ldr	r2, [pc, #536]	; (800259c <HAL_GPIO_Init+0x288>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d01d      	beq.n	80023c2 <HAL_GPIO_Init+0xae>
          break;
 8002386:	e036      	b.n	80023f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002388:	4a85      	ldr	r2, [pc, #532]	; (80025a0 <HAL_GPIO_Init+0x28c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d019      	beq.n	80023c2 <HAL_GPIO_Init+0xae>
 800238e:	4a85      	ldr	r2, [pc, #532]	; (80025a4 <HAL_GPIO_Init+0x290>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d016      	beq.n	80023c2 <HAL_GPIO_Init+0xae>
 8002394:	4a84      	ldr	r2, [pc, #528]	; (80025a8 <HAL_GPIO_Init+0x294>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d013      	beq.n	80023c2 <HAL_GPIO_Init+0xae>
          break;
 800239a:	e02c      	b.n	80023f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	623b      	str	r3, [r7, #32]
          break;
 80023a2:	e028      	b.n	80023f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	3304      	adds	r3, #4
 80023aa:	623b      	str	r3, [r7, #32]
          break;
 80023ac:	e023      	b.n	80023f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	3308      	adds	r3, #8
 80023b4:	623b      	str	r3, [r7, #32]
          break;
 80023b6:	e01e      	b.n	80023f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	330c      	adds	r3, #12
 80023be:	623b      	str	r3, [r7, #32]
          break;
 80023c0:	e019      	b.n	80023f6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d102      	bne.n	80023d0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023ca:	2304      	movs	r3, #4
 80023cc:	623b      	str	r3, [r7, #32]
          break;
 80023ce:	e012      	b.n	80023f6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d8:	2308      	movs	r3, #8
 80023da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	611a      	str	r2, [r3, #16]
          break;
 80023e2:	e008      	b.n	80023f6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023e4:	2308      	movs	r3, #8
 80023e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	615a      	str	r2, [r3, #20]
          break;
 80023ee:	e002      	b.n	80023f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023f0:	2300      	movs	r3, #0
 80023f2:	623b      	str	r3, [r7, #32]
          break;
 80023f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	2bff      	cmp	r3, #255	; 0xff
 80023fa:	d801      	bhi.n	8002400 <HAL_GPIO_Init+0xec>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	e001      	b.n	8002404 <HAL_GPIO_Init+0xf0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3304      	adds	r3, #4
 8002404:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2bff      	cmp	r3, #255	; 0xff
 800240a:	d802      	bhi.n	8002412 <HAL_GPIO_Init+0xfe>
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	e002      	b.n	8002418 <HAL_GPIO_Init+0x104>
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	3b08      	subs	r3, #8
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	210f      	movs	r1, #15
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	401a      	ands	r2, r3
 800242a:	6a39      	ldr	r1, [r7, #32]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	431a      	orrs	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 8096 	beq.w	8002572 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002446:	4b59      	ldr	r3, [pc, #356]	; (80025ac <HAL_GPIO_Init+0x298>)
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	4a58      	ldr	r2, [pc, #352]	; (80025ac <HAL_GPIO_Init+0x298>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6193      	str	r3, [r2, #24]
 8002452:	4b56      	ldr	r3, [pc, #344]	; (80025ac <HAL_GPIO_Init+0x298>)
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800245e:	4a54      	ldr	r2, [pc, #336]	; (80025b0 <HAL_GPIO_Init+0x29c>)
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	3302      	adds	r3, #2
 8002466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	220f      	movs	r2, #15
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4013      	ands	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4b      	ldr	r2, [pc, #300]	; (80025b4 <HAL_GPIO_Init+0x2a0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d013      	beq.n	80024b2 <HAL_GPIO_Init+0x19e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4a      	ldr	r2, [pc, #296]	; (80025b8 <HAL_GPIO_Init+0x2a4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d00d      	beq.n	80024ae <HAL_GPIO_Init+0x19a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a49      	ldr	r2, [pc, #292]	; (80025bc <HAL_GPIO_Init+0x2a8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d007      	beq.n	80024aa <HAL_GPIO_Init+0x196>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a48      	ldr	r2, [pc, #288]	; (80025c0 <HAL_GPIO_Init+0x2ac>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d101      	bne.n	80024a6 <HAL_GPIO_Init+0x192>
 80024a2:	2303      	movs	r3, #3
 80024a4:	e006      	b.n	80024b4 <HAL_GPIO_Init+0x1a0>
 80024a6:	2304      	movs	r3, #4
 80024a8:	e004      	b.n	80024b4 <HAL_GPIO_Init+0x1a0>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e002      	b.n	80024b4 <HAL_GPIO_Init+0x1a0>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_GPIO_Init+0x1a0>
 80024b2:	2300      	movs	r3, #0
 80024b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b6:	f002 0203 	and.w	r2, r2, #3
 80024ba:	0092      	lsls	r2, r2, #2
 80024bc:	4093      	lsls	r3, r2
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024c4:	493a      	ldr	r1, [pc, #232]	; (80025b0 <HAL_GPIO_Init+0x29c>)
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d006      	beq.n	80024ec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024de:	4b39      	ldr	r3, [pc, #228]	; (80025c4 <HAL_GPIO_Init+0x2b0>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4938      	ldr	r1, [pc, #224]	; (80025c4 <HAL_GPIO_Init+0x2b0>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
 80024ea:	e006      	b.n	80024fa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024ec:	4b35      	ldr	r3, [pc, #212]	; (80025c4 <HAL_GPIO_Init+0x2b0>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	4933      	ldr	r1, [pc, #204]	; (80025c4 <HAL_GPIO_Init+0x2b0>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d006      	beq.n	8002514 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002506:	4b2f      	ldr	r3, [pc, #188]	; (80025c4 <HAL_GPIO_Init+0x2b0>)
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	492e      	ldr	r1, [pc, #184]	; (80025c4 <HAL_GPIO_Init+0x2b0>)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	604b      	str	r3, [r1, #4]
 8002512:	e006      	b.n	8002522 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002514:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <HAL_GPIO_Init+0x2b0>)
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	43db      	mvns	r3, r3
 800251c:	4929      	ldr	r1, [pc, #164]	; (80025c4 <HAL_GPIO_Init+0x2b0>)
 800251e:	4013      	ands	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d006      	beq.n	800253c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800252e:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <HAL_GPIO_Init+0x2b0>)
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	4924      	ldr	r1, [pc, #144]	; (80025c4 <HAL_GPIO_Init+0x2b0>)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	608b      	str	r3, [r1, #8]
 800253a:	e006      	b.n	800254a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800253c:	4b21      	ldr	r3, [pc, #132]	; (80025c4 <HAL_GPIO_Init+0x2b0>)
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	43db      	mvns	r3, r3
 8002544:	491f      	ldr	r1, [pc, #124]	; (80025c4 <HAL_GPIO_Init+0x2b0>)
 8002546:	4013      	ands	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d006      	beq.n	8002564 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002556:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_GPIO_Init+0x2b0>)
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	491a      	ldr	r1, [pc, #104]	; (80025c4 <HAL_GPIO_Init+0x2b0>)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	60cb      	str	r3, [r1, #12]
 8002562:	e006      	b.n	8002572 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <HAL_GPIO_Init+0x2b0>)
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	43db      	mvns	r3, r3
 800256c:	4915      	ldr	r1, [pc, #84]	; (80025c4 <HAL_GPIO_Init+0x2b0>)
 800256e:	4013      	ands	r3, r2
 8002570:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	3301      	adds	r3, #1
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	f47f aed0 	bne.w	8002328 <HAL_GPIO_Init+0x14>
  }
}
 8002588:	bf00      	nop
 800258a:	372c      	adds	r7, #44	; 0x2c
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	10210000 	.word	0x10210000
 8002598:	10110000 	.word	0x10110000
 800259c:	10120000 	.word	0x10120000
 80025a0:	10310000 	.word	0x10310000
 80025a4:	10320000 	.word	0x10320000
 80025a8:	10220000 	.word	0x10220000
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40010000 	.word	0x40010000
 80025b4:	40010800 	.word	0x40010800
 80025b8:	40010c00 	.word	0x40010c00
 80025bc:	40011000 	.word	0x40011000
 80025c0:	40011400 	.word	0x40011400
 80025c4:	40010400 	.word	0x40010400

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025e4:	e003      	b.n	80025ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	041a      	lsls	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	611a      	str	r2, [r3, #16]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e11f      	b.n	800284a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fe fdbe 	bl	80011a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2224      	movs	r2, #36	; 0x24
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800264a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800265a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800265c:	f003 fc2e 	bl	8005ebc <HAL_RCC_GetPCLK1Freq>
 8002660:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4a7b      	ldr	r2, [pc, #492]	; (8002854 <HAL_I2C_Init+0x25c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d807      	bhi.n	800267c <HAL_I2C_Init+0x84>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4a7a      	ldr	r2, [pc, #488]	; (8002858 <HAL_I2C_Init+0x260>)
 8002670:	4293      	cmp	r3, r2
 8002672:	bf94      	ite	ls
 8002674:	2301      	movls	r3, #1
 8002676:	2300      	movhi	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e006      	b.n	800268a <HAL_I2C_Init+0x92>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4a77      	ldr	r2, [pc, #476]	; (800285c <HAL_I2C_Init+0x264>)
 8002680:	4293      	cmp	r3, r2
 8002682:	bf94      	ite	ls
 8002684:	2301      	movls	r3, #1
 8002686:	2300      	movhi	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0db      	b.n	800284a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4a72      	ldr	r2, [pc, #456]	; (8002860 <HAL_I2C_Init+0x268>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	0c9b      	lsrs	r3, r3, #18
 800269c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4a64      	ldr	r2, [pc, #400]	; (8002854 <HAL_I2C_Init+0x25c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d802      	bhi.n	80026cc <HAL_I2C_Init+0xd4>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3301      	adds	r3, #1
 80026ca:	e009      	b.n	80026e0 <HAL_I2C_Init+0xe8>
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	4a63      	ldr	r2, [pc, #396]	; (8002864 <HAL_I2C_Init+0x26c>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	099b      	lsrs	r3, r3, #6
 80026de:	3301      	adds	r3, #1
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	4956      	ldr	r1, [pc, #344]	; (8002854 <HAL_I2C_Init+0x25c>)
 80026fc:	428b      	cmp	r3, r1
 80026fe:	d80d      	bhi.n	800271c <HAL_I2C_Init+0x124>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1e59      	subs	r1, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	fbb1 f3f3 	udiv	r3, r1, r3
 800270e:	3301      	adds	r3, #1
 8002710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002714:	2b04      	cmp	r3, #4
 8002716:	bf38      	it	cc
 8002718:	2304      	movcc	r3, #4
 800271a:	e04f      	b.n	80027bc <HAL_I2C_Init+0x1c4>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d111      	bne.n	8002748 <HAL_I2C_Init+0x150>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1e58      	subs	r0, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	440b      	add	r3, r1
 8002732:	fbb0 f3f3 	udiv	r3, r0, r3
 8002736:	3301      	adds	r3, #1
 8002738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273c:	2b00      	cmp	r3, #0
 800273e:	bf0c      	ite	eq
 8002740:	2301      	moveq	r3, #1
 8002742:	2300      	movne	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	e012      	b.n	800276e <HAL_I2C_Init+0x176>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1e58      	subs	r0, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6859      	ldr	r1, [r3, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	0099      	lsls	r1, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	fbb0 f3f3 	udiv	r3, r0, r3
 800275e:	3301      	adds	r3, #1
 8002760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf0c      	ite	eq
 8002768:	2301      	moveq	r3, #1
 800276a:	2300      	movne	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Init+0x17e>
 8002772:	2301      	movs	r3, #1
 8002774:	e022      	b.n	80027bc <HAL_I2C_Init+0x1c4>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10e      	bne.n	800279c <HAL_I2C_Init+0x1a4>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1e58      	subs	r0, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6859      	ldr	r1, [r3, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	440b      	add	r3, r1
 800278c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002790:	3301      	adds	r3, #1
 8002792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800279a:	e00f      	b.n	80027bc <HAL_I2C_Init+0x1c4>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1e58      	subs	r0, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	0099      	lsls	r1, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b2:	3301      	adds	r3, #1
 80027b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	6809      	ldr	r1, [r1, #0]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6911      	ldr	r1, [r2, #16]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68d2      	ldr	r2, [r2, #12]
 80027f6:	4311      	orrs	r1, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	430b      	orrs	r3, r1
 80027fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	000186a0 	.word	0x000186a0
 8002858:	001e847f 	.word	0x001e847f
 800285c:	003d08ff 	.word	0x003d08ff
 8002860:	431bde83 	.word	0x431bde83
 8002864:	10624dd3 	.word	0x10624dd3

08002868 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002888:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002890:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	2b10      	cmp	r3, #16
 8002896:	d003      	beq.n	80028a0 <HAL_I2C_EV_IRQHandler+0x38>
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b40      	cmp	r3, #64	; 0x40
 800289c:	f040 80bd 	bne.w	8002a1a <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10d      	bne.n	80028d6 <HAL_I2C_EV_IRQHandler+0x6e>
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80028c0:	d003      	beq.n	80028ca <HAL_I2C_EV_IRQHandler+0x62>
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80028c8:	d101      	bne.n	80028ce <HAL_I2C_EV_IRQHandler+0x66>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_I2C_EV_IRQHandler+0x68>
 80028ce:	2300      	movs	r3, #0
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	f000 812e 	beq.w	8002b32 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00c      	beq.n	80028fa <HAL_I2C_EV_IRQHandler+0x92>
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	0a5b      	lsrs	r3, r3, #9
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d006      	beq.n	80028fa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f001 fb39 	bl	8003f64 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fcb1 	bl	800325a <I2C_Master_SB>
 80028f8:	e08e      	b.n	8002a18 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	08db      	lsrs	r3, r3, #3
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <HAL_I2C_EV_IRQHandler+0xb2>
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	0a5b      	lsrs	r3, r3, #9
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fd26 	bl	8003364 <I2C_Master_ADD10>
 8002918:	e07e      	b.n	8002a18 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	085b      	lsrs	r3, r3, #1
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HAL_I2C_EV_IRQHandler+0xd2>
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	0a5b      	lsrs	r3, r3, #9
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 fd3f 	bl	80033b6 <I2C_Master_ADDR>
 8002938:	e06e      	b.n	8002a18 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d037      	beq.n	80029b6 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002954:	f000 80ef 	beq.w	8002b36 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	09db      	lsrs	r3, r3, #7
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00f      	beq.n	8002984 <HAL_I2C_EV_IRQHandler+0x11c>
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	0a9b      	lsrs	r3, r3, #10
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d009      	beq.n	8002984 <HAL_I2C_EV_IRQHandler+0x11c>
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d103      	bne.n	8002984 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f93e 	bl	8002bfe <I2C_MasterTransmit_TXE>
 8002982:	e049      	b.n	8002a18 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	089b      	lsrs	r3, r3, #2
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 80d2 	beq.w	8002b36 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	0a5b      	lsrs	r3, r3, #9
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 80cb 	beq.w	8002b36 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	2b10      	cmp	r3, #16
 80029a4:	d103      	bne.n	80029ae <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f9c5 	bl	8002d36 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029ac:	e0c3      	b.n	8002b36 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fa29 	bl	8002e06 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029b4:	e0bf      	b.n	8002b36 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c4:	f000 80b7 	beq.w	8002b36 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00f      	beq.n	80029f4 <HAL_I2C_EV_IRQHandler+0x18c>
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	0a9b      	lsrs	r3, r3, #10
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d009      	beq.n	80029f4 <HAL_I2C_EV_IRQHandler+0x18c>
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	089b      	lsrs	r3, r3, #2
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d103      	bne.n	80029f4 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fa99 	bl	8002f24 <I2C_MasterReceive_RXNE>
 80029f2:	e011      	b.n	8002a18 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	089b      	lsrs	r3, r3, #2
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 809a 	beq.w	8002b36 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	0a5b      	lsrs	r3, r3, #9
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8093 	beq.w	8002b36 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fb38 	bl	8003086 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a16:	e08e      	b.n	8002b36 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002a18:	e08d      	b.n	8002b36 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d004      	beq.n	8002a2c <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	e007      	b.n	8002a3c <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	085b      	lsrs	r3, r3, #1
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d012      	beq.n	8002a6e <HAL_I2C_EV_IRQHandler+0x206>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	0a5b      	lsrs	r3, r3, #9
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00c      	beq.n	8002a6e <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002a64:	69b9      	ldr	r1, [r7, #24]
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fefc 	bl	8003864 <I2C_Slave_ADDR>
 8002a6c:	e066      	b.n	8002b3c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <HAL_I2C_EV_IRQHandler+0x226>
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	0a5b      	lsrs	r3, r3, #9
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 ff30 	bl	80038ec <I2C_Slave_STOPF>
 8002a8c:	e056      	b.n	8002b3c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a8e:	7bbb      	ldrb	r3, [r7, #14]
 8002a90:	2b21      	cmp	r3, #33	; 0x21
 8002a92:	d002      	beq.n	8002a9a <HAL_I2C_EV_IRQHandler+0x232>
 8002a94:	7bbb      	ldrb	r3, [r7, #14]
 8002a96:	2b29      	cmp	r3, #41	; 0x29
 8002a98:	d125      	bne.n	8002ae6 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	09db      	lsrs	r3, r3, #7
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00f      	beq.n	8002ac6 <HAL_I2C_EV_IRQHandler+0x25e>
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	0a9b      	lsrs	r3, r3, #10
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <HAL_I2C_EV_IRQHandler+0x25e>
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d103      	bne.n	8002ac6 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fe14 	bl	80036ec <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ac4:	e039      	b.n	8002b3a <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	089b      	lsrs	r3, r3, #2
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d033      	beq.n	8002b3a <HAL_I2C_EV_IRQHandler+0x2d2>
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	0a5b      	lsrs	r3, r3, #9
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d02d      	beq.n	8002b3a <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fe41 	bl	8003766 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ae4:	e029      	b.n	8002b3a <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	099b      	lsrs	r3, r3, #6
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00f      	beq.n	8002b12 <HAL_I2C_EV_IRQHandler+0x2aa>
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	0a9b      	lsrs	r3, r3, #10
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_I2C_EV_IRQHandler+0x2aa>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	089b      	lsrs	r3, r3, #2
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d103      	bne.n	8002b12 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fe4b 	bl	80037a6 <I2C_SlaveReceive_RXNE>
 8002b10:	e014      	b.n	8002b3c <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	089b      	lsrs	r3, r3, #2
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00e      	beq.n	8002b3c <HAL_I2C_EV_IRQHandler+0x2d4>
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	0a5b      	lsrs	r3, r3, #9
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fe79 	bl	8003822 <I2C_SlaveReceive_BTF>
 8002b30:	e004      	b.n	8002b3c <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8002b32:	bf00      	nop
 8002b34:	e002      	b.n	8002b3c <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b36:	bf00      	nop
 8002b38:	e000      	b.n	8002b3c <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b3a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	460b      	mov	r3, r1
 8002b94:	70fb      	strb	r3, [r7, #3]
 8002b96:	4613      	mov	r3, r2
 8002b98:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c14:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d150      	bne.n	8002cc6 <I2C_MasterTransmit_TXE+0xc8>
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	2b21      	cmp	r3, #33	; 0x21
 8002c28:	d14d      	bne.n	8002cc6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d01d      	beq.n	8002c6c <I2C_MasterTransmit_TXE+0x6e>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	d01a      	beq.n	8002c6c <I2C_MasterTransmit_TXE+0x6e>
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c3c:	d016      	beq.n	8002c6c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c4c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2211      	movs	r2, #17
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff ff6c 	bl	8002b42 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c6a:	e060      	b.n	8002d2e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c7a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c8a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d107      	bne.n	8002cb6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ff81 	bl	8002bb6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cb4:	e03b      	b.n	8002d2e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff ff3f 	bl	8002b42 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cc4:	e033      	b.n	8002d2e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	2b21      	cmp	r3, #33	; 0x21
 8002cca:	d005      	beq.n	8002cd8 <I2C_MasterTransmit_TXE+0xda>
 8002ccc:	7bbb      	ldrb	r3, [r7, #14]
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	d12d      	bne.n	8002d2e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	2b22      	cmp	r3, #34	; 0x22
 8002cd6:	d12a      	bne.n	8002d2e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d108      	bne.n	8002cf4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002cf2:	e01c      	b.n	8002d2e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b40      	cmp	r3, #64	; 0x40
 8002cfe:	d103      	bne.n	8002d08 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f880 	bl	8002e06 <I2C_MemoryTransmit_TXE_BTF>
}
 8002d06:	e012      	b.n	8002d2e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d2c:	e7ff      	b.n	8002d2e <I2C_MasterTransmit_TXE+0x130>
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b21      	cmp	r3, #33	; 0x21
 8002d4e:	d156      	bne.n	8002dfe <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d012      	beq.n	8002d80 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	781a      	ldrb	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002d7e:	e03e      	b.n	8002dfe <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d01d      	beq.n	8002dc2 <I2C_MasterTransmit_BTF+0x8c>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d01a      	beq.n	8002dc2 <I2C_MasterTransmit_BTF+0x8c>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d92:	d016      	beq.n	8002dc2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002da2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2211      	movs	r2, #17
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff fec1 	bl	8002b42 <HAL_I2C_MasterTxCpltCallback>
}
 8002dc0:	e01d      	b.n	8002dfe <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dd0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff fea2 	bl	8002b42 <HAL_I2C_MasterTxCpltCallback>
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d11d      	bne.n	8002e5a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d10b      	bne.n	8002e3e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e36:	1c9a      	adds	r2, r3, #2
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002e3c:	e06e      	b.n	8002f1c <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	121b      	asrs	r3, r3, #8
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e58:	e060      	b.n	8002f1c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d10b      	bne.n	8002e7a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e78:	e050      	b.n	8002f1c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d14c      	bne.n	8002f1c <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	2b22      	cmp	r3, #34	; 0x22
 8002e86:	d108      	bne.n	8002e9a <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e96:	601a      	str	r2, [r3, #0]
}
 8002e98:	e040      	b.n	8002f1c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d015      	beq.n	8002ed0 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2b21      	cmp	r3, #33	; 0x21
 8002ea8:	d112      	bne.n	8002ed0 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	781a      	ldrb	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ece:	e025      	b.n	8002f1c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d120      	bne.n	8002f1c <I2C_MemoryTransmit_TXE_BTF+0x116>
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	2b21      	cmp	r3, #33	; 0x21
 8002ede:	d11d      	bne.n	8002f1c <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002eee:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002efe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff fe4d 	bl	8002bb6 <HAL_I2C_MemTxCpltCallback>
}
 8002f1c:	bf00      	nop
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b22      	cmp	r3, #34	; 0x22
 8002f36:	f040 80a2 	bne.w	800307e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d921      	bls.n	8002f8c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	f040 8082 	bne.w	800307e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f88:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002f8a:	e078      	b.n	800307e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d074      	beq.n	800307e <I2C_MasterReceive_RXNE+0x15a>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d002      	beq.n	8002fa0 <I2C_MasterReceive_RXNE+0x7c>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d16e      	bne.n	800307e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 ffad 	bl	8003f00 <I2C_WaitOnSTOPRequestThroughIT>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d142      	bne.n	8003032 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fba:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691a      	ldr	r2, [r3, #16]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b40      	cmp	r3, #64	; 0x40
 8003004:	d10a      	bne.n	800301c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff fdd7 	bl	8002bc8 <HAL_I2C_MemRxCpltCallback>
}
 800301a:	e030      	b.n	800307e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2212      	movs	r2, #18
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff fd92 	bl	8002b54 <HAL_I2C_MasterRxCpltCallback>
}
 8003030:	e025      	b.n	800307e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003040:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff fdae 	bl	8002bda <HAL_I2C_ErrorCallback>
}
 800307e:	bf00      	nop
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b04      	cmp	r3, #4
 800309c:	d11b      	bne.n	80030d6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ac:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80030d4:	e0bd      	b.n	8003252 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d129      	bne.n	8003134 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ee:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d00a      	beq.n	800310c <I2C_MasterReceive_BTF+0x86>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d007      	beq.n	800310c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800310a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691a      	ldr	r2, [r3, #16]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003132:	e08e      	b.n	8003252 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d176      	bne.n	800322c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d002      	beq.n	800314a <I2C_MasterReceive_BTF+0xc4>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b10      	cmp	r3, #16
 8003148:	d108      	bne.n	800315c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	e019      	b.n	8003190 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b04      	cmp	r3, #4
 8003160:	d002      	beq.n	8003168 <I2C_MasterReceive_BTF+0xe2>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b02      	cmp	r3, #2
 8003166:	d108      	bne.n	800317a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	e00a      	b.n	8003190 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b10      	cmp	r3, #16
 800317e:	d007      	beq.n	8003190 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80031ea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b40      	cmp	r3, #64	; 0x40
 80031fe:	d10a      	bne.n	8003216 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff fcda 	bl	8002bc8 <HAL_I2C_MemRxCpltCallback>
}
 8003214:	e01d      	b.n	8003252 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2212      	movs	r2, #18
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff fc95 	bl	8002b54 <HAL_I2C_MasterRxCpltCallback>
}
 800322a:	e012      	b.n	8003252 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003252:	bf00      	nop
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b40      	cmp	r3, #64	; 0x40
 800326c:	d117      	bne.n	800329e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003286:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003288:	e067      	b.n	800335a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	b2da      	uxtb	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	611a      	str	r2, [r3, #16]
}
 800329c:	e05d      	b.n	800335a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032a6:	d133      	bne.n	8003310 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b21      	cmp	r3, #33	; 0x21
 80032b2:	d109      	bne.n	80032c8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	461a      	mov	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032c4:	611a      	str	r2, [r3, #16]
 80032c6:	e008      	b.n	80032da <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d004      	beq.n	80032ec <I2C_Master_SB+0x92>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d108      	bne.n	80032fe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d032      	beq.n	800335a <I2C_Master_SB+0x100>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d02d      	beq.n	800335a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800330c:	605a      	str	r2, [r3, #4]
}
 800330e:	e024      	b.n	800335a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10e      	bne.n	8003336 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331c:	b29b      	uxth	r3, r3
 800331e:	11db      	asrs	r3, r3, #7
 8003320:	b2db      	uxtb	r3, r3
 8003322:	f003 0306 	and.w	r3, r3, #6
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f063 030f 	orn	r3, r3, #15
 800332c:	b2da      	uxtb	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	611a      	str	r2, [r3, #16]
}
 8003334:	e011      	b.n	800335a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800333a:	2b01      	cmp	r3, #1
 800333c:	d10d      	bne.n	800335a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	b29b      	uxth	r3, r3
 8003344:	11db      	asrs	r3, r3, #7
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f003 0306 	and.w	r3, r3, #6
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f063 030e 	orn	r3, r3, #14
 8003352:	b2da      	uxtb	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	611a      	str	r2, [r3, #16]
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	b2da      	uxtb	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337c:	2b00      	cmp	r3, #0
 800337e:	d103      	bne.n	8003388 <I2C_Master_ADD10+0x24>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	2b00      	cmp	r3, #0
 8003386:	d011      	beq.n	80033ac <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	2b00      	cmp	r3, #0
 8003390:	d104      	bne.n	800339c <I2C_Master_ADD10+0x38>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	2b00      	cmp	r3, #0
 800339a:	d007      	beq.n	80033ac <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033aa:	605a      	str	r2, [r3, #4]
    }
  }
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr

080033b6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b091      	sub	sp, #68	; 0x44
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b22      	cmp	r3, #34	; 0x22
 80033de:	f040 8174 	bne.w	80036ca <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10f      	bne.n	800340a <I2C_Master_ADDR+0x54>
 80033ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033ee:	2b40      	cmp	r3, #64	; 0x40
 80033f0:	d10b      	bne.n	800340a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f2:	2300      	movs	r3, #0
 80033f4:	633b      	str	r3, [r7, #48]	; 0x30
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	633b      	str	r3, [r7, #48]	; 0x30
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	633b      	str	r3, [r7, #48]	; 0x30
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	e16b      	b.n	80036e2 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340e:	2b00      	cmp	r3, #0
 8003410:	d11d      	bne.n	800344e <I2C_Master_ADDR+0x98>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800341a:	d118      	bne.n	800344e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800341c:	2300      	movs	r3, #0
 800341e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003440:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	651a      	str	r2, [r3, #80]	; 0x50
 800344c:	e149      	b.n	80036e2 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003452:	b29b      	uxth	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d113      	bne.n	8003480 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003458:	2300      	movs	r3, #0
 800345a:	62bb      	str	r3, [r7, #40]	; 0x28
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e120      	b.n	80036c2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	f040 808a 	bne.w	80035a0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003492:	d137      	bne.n	8003504 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b2:	d113      	bne.n	80034dc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c4:	2300      	movs	r3, #0
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	e0f2      	b.n	80036c2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034dc:	2300      	movs	r3, #0
 80034de:	623b      	str	r3, [r7, #32]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	623b      	str	r3, [r7, #32]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	623b      	str	r3, [r7, #32]
 80034f0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	e0de      	b.n	80036c2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003506:	2b08      	cmp	r3, #8
 8003508:	d02e      	beq.n	8003568 <I2C_Master_ADDR+0x1b2>
 800350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350c:	2b20      	cmp	r3, #32
 800350e:	d02b      	beq.n	8003568 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003512:	2b12      	cmp	r3, #18
 8003514:	d102      	bne.n	800351c <I2C_Master_ADDR+0x166>
 8003516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003518:	2b01      	cmp	r3, #1
 800351a:	d125      	bne.n	8003568 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351e:	2b04      	cmp	r3, #4
 8003520:	d00e      	beq.n	8003540 <I2C_Master_ADDR+0x18a>
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	2b02      	cmp	r3, #2
 8003526:	d00b      	beq.n	8003540 <I2C_Master_ADDR+0x18a>
 8003528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352a:	2b10      	cmp	r3, #16
 800352c:	d008      	beq.n	8003540 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e007      	b.n	8003550 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800354e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003550:	2300      	movs	r3, #0
 8003552:	61fb      	str	r3, [r7, #28]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	61fb      	str	r3, [r7, #28]
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	e0ac      	b.n	80036c2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003576:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003578:	2300      	movs	r3, #0
 800357a:	61bb      	str	r3, [r7, #24]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	61bb      	str	r3, [r7, #24]
 800358c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	e090      	b.n	80036c2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d158      	bne.n	800365c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80035aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d021      	beq.n	80035f4 <I2C_Master_ADDR+0x23e>
 80035b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d01e      	beq.n	80035f4 <I2C_Master_ADDR+0x23e>
 80035b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d01b      	beq.n	80035f4 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	e012      	b.n	800361a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003602:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003604:	2300      	movs	r3, #0
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003628:	d14b      	bne.n	80036c2 <I2C_Master_ADDR+0x30c>
 800362a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003630:	d00b      	beq.n	800364a <I2C_Master_ADDR+0x294>
 8003632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003634:	2b01      	cmp	r3, #1
 8003636:	d008      	beq.n	800364a <I2C_Master_ADDR+0x294>
 8003638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363a:	2b08      	cmp	r3, #8
 800363c:	d005      	beq.n	800364a <I2C_Master_ADDR+0x294>
 800363e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003640:	2b10      	cmp	r3, #16
 8003642:	d002      	beq.n	800364a <I2C_Master_ADDR+0x294>
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	2b20      	cmp	r3, #32
 8003648:	d13b      	bne.n	80036c2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	e032      	b.n	80036c2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800366a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800367a:	d117      	bne.n	80036ac <I2C_Master_ADDR+0x2f6>
 800367c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003682:	d00b      	beq.n	800369c <I2C_Master_ADDR+0x2e6>
 8003684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003686:	2b01      	cmp	r3, #1
 8003688:	d008      	beq.n	800369c <I2C_Master_ADDR+0x2e6>
 800368a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368c:	2b08      	cmp	r3, #8
 800368e:	d005      	beq.n	800369c <I2C_Master_ADDR+0x2e6>
 8003690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003692:	2b10      	cmp	r3, #16
 8003694:	d002      	beq.n	800369c <I2C_Master_ADDR+0x2e6>
 8003696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003698:	2b20      	cmp	r3, #32
 800369a:	d107      	bne.n	80036ac <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036aa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80036c8:	e00b      	b.n	80036e2 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	68bb      	ldr	r3, [r7, #8]
}
 80036e0:	e7ff      	b.n	80036e2 <I2C_Master_ADDR+0x32c>
 80036e2:	bf00      	nop
 80036e4:	3744      	adds	r7, #68	; 0x44
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d02b      	beq.n	800375e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	781a      	ldrb	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d114      	bne.n	800375e <I2C_SlaveTransmit_TXE+0x72>
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b29      	cmp	r3, #41	; 0x29
 8003738:	d111      	bne.n	800375e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003748:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2221      	movs	r2, #33	; 0x21
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2228      	movs	r2, #40	; 0x28
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff fa04 	bl	8002b66 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800375e:	bf00      	nop
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d011      	beq.n	800379c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr

080037a6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d02c      	beq.n	800381a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691a      	ldr	r2, [r3, #16]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037dc:	b29b      	uxth	r3, r3
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d114      	bne.n	800381a <I2C_SlaveReceive_RXNE+0x74>
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	2b2a      	cmp	r3, #42	; 0x2a
 80037f4:	d111      	bne.n	800381a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003804:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2222      	movs	r2, #34	; 0x22
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2228      	movs	r2, #40	; 0x28
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff f9af 	bl	8002b78 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800381a:	bf00      	nop
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d012      	beq.n	800385a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691a      	ldr	r2, [r3, #16]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr

08003864 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800387e:	2b28      	cmp	r3, #40	; 0x28
 8003880:	d127      	bne.n	80038d2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003890:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	089b      	lsrs	r3, r3, #2
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	09db      	lsrs	r3, r3, #7
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d103      	bne.n	80038b6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	81bb      	strh	r3, [r7, #12]
 80038b4:	e002      	b.n	80038bc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80038c4:	89ba      	ldrh	r2, [r7, #12]
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	4619      	mov	r1, r3
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff f95d 	bl	8002b8a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80038d0:	e008      	b.n	80038e4 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f06f 0202 	mvn.w	r2, #2
 80038da:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80038e4:	bf00      	nop
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800390a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800390c:	2300      	movs	r3, #0
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	60bb      	str	r3, [r7, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003938:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003948:	d172      	bne.n	8003a30 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	2b22      	cmp	r3, #34	; 0x22
 800394e:	d002      	beq.n	8003956 <I2C_Slave_STOPF+0x6a>
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	2b2a      	cmp	r3, #42	; 0x2a
 8003954:	d135      	bne.n	80039c2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	b29a      	uxth	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f043 0204 	orr.w	r2, r3, #4
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003988:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fcb4 	bl	80022fc <HAL_DMA_GetState>
 8003994:	4603      	mov	r3, r0
 8003996:	2b01      	cmp	r3, #1
 8003998:	d049      	beq.n	8003a2e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	4a69      	ldr	r2, [pc, #420]	; (8003b44 <I2C_Slave_STOPF+0x258>)
 80039a0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fe fb2c 	bl	8002004 <HAL_DMA_Abort_IT>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d03d      	beq.n	8003a2e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039bc:	4610      	mov	r0, r2
 80039be:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039c0:	e035      	b.n	8003a2e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f043 0204 	orr.w	r2, r3, #4
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe fc7e 	bl	80022fc <HAL_DMA_GetState>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d014      	beq.n	8003a30 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0a:	4a4e      	ldr	r2, [pc, #312]	; (8003b44 <I2C_Slave_STOPF+0x258>)
 8003a0c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe faf6 	bl	8002004 <HAL_DMA_Abort_IT>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d008      	beq.n	8003a30 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4798      	blx	r3
 8003a2c:	e000      	b.n	8003a30 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a2e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d03e      	beq.n	8003ab8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d112      	bne.n	8003a6e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691a      	ldr	r2, [r3, #16]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a78:	2b40      	cmp	r3, #64	; 0x40
 8003a7a:	d112      	bne.n	8003aa2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	f043 0204 	orr.w	r2, r3, #4
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f843 	bl	8003b4c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003ac6:	e039      	b.n	8003b3c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	2b2a      	cmp	r3, #42	; 0x2a
 8003acc:	d109      	bne.n	8003ae2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2228      	movs	r2, #40	; 0x28
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff f84b 	bl	8002b78 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b28      	cmp	r3, #40	; 0x28
 8003aec:	d111      	bne.n	8003b12 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a15      	ldr	r2, [pc, #84]	; (8003b48 <I2C_Slave_STOPF+0x25c>)
 8003af2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff f84a 	bl	8002ba4 <HAL_I2C_ListenCpltCallback>
}
 8003b10:	e014      	b.n	8003b3c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	2b22      	cmp	r3, #34	; 0x22
 8003b18:	d002      	beq.n	8003b20 <I2C_Slave_STOPF+0x234>
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	2b22      	cmp	r3, #34	; 0x22
 8003b1e:	d10d      	bne.n	8003b3c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff f81e 	bl	8002b78 <HAL_I2C_SlaveRxCpltCallback>
}
 8003b3c:	bf00      	nop
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	08003db1 	.word	0x08003db1
 8003b48:	ffff0000 	.word	0xffff0000

08003b4c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b62:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b64:	7bbb      	ldrb	r3, [r7, #14]
 8003b66:	2b10      	cmp	r3, #16
 8003b68:	d002      	beq.n	8003b70 <I2C_ITError+0x24>
 8003b6a:	7bbb      	ldrb	r3, [r7, #14]
 8003b6c:	2b40      	cmp	r3, #64	; 0x40
 8003b6e:	d10a      	bne.n	8003b86 <I2C_ITError+0x3a>
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	2b22      	cmp	r3, #34	; 0x22
 8003b74:	d107      	bne.n	8003b86 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b84:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b8c:	2b28      	cmp	r3, #40	; 0x28
 8003b8e:	d107      	bne.n	8003ba0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2228      	movs	r2, #40	; 0x28
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b9e:	e015      	b.n	8003bcc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bae:	d00a      	beq.n	8003bc6 <I2C_ITError+0x7a>
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	2b60      	cmp	r3, #96	; 0x60
 8003bb4:	d007      	beq.n	8003bc6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bda:	d161      	bne.n	8003ca0 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d020      	beq.n	8003c3a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfc:	4a6a      	ldr	r2, [pc, #424]	; (8003da8 <I2C_ITError+0x25c>)
 8003bfe:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fe f9fd 	bl	8002004 <HAL_DMA_Abort_IT>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8089 	beq.w	8003d24 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c34:	4610      	mov	r0, r2
 8003c36:	4798      	blx	r3
 8003c38:	e074      	b.n	8003d24 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	4a5a      	ldr	r2, [pc, #360]	; (8003da8 <I2C_ITError+0x25c>)
 8003c40:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe f9dc 	bl	8002004 <HAL_DMA_Abort_IT>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d068      	beq.n	8003d24 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5c:	2b40      	cmp	r3, #64	; 0x40
 8003c5e:	d10b      	bne.n	8003c78 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0201 	bic.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	4798      	blx	r3
 8003c9e:	e041      	b.n	8003d24 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b60      	cmp	r3, #96	; 0x60
 8003caa:	d125      	bne.n	8003cf8 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc4:	2b40      	cmp	r3, #64	; 0x40
 8003cc6:	d10b      	bne.n	8003ce0 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691a      	ldr	r2, [r3, #16]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0201 	bic.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7fe ff7b 	bl	8002bec <HAL_I2C_AbortCpltCallback>
 8003cf6:	e015      	b.n	8003d24 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b40      	cmp	r3, #64	; 0x40
 8003d04:	d10b      	bne.n	8003d1e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fe ff5b 	bl	8002bda <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10e      	bne.n	8003d52 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d104      	bne.n	8003d52 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d007      	beq.n	8003d62 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d60:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d68:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d113      	bne.n	8003d9e <I2C_ITError+0x252>
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	2b28      	cmp	r3, #40	; 0x28
 8003d7a:	d110      	bne.n	8003d9e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a0b      	ldr	r2, [pc, #44]	; (8003dac <I2C_ITError+0x260>)
 8003d80:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7fe ff03 	bl	8002ba4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d9e:	bf00      	nop
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	08003db1 	.word	0x08003db1
 8003dac:	ffff0000 	.word	0xffff0000

08003db0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003dca:	4b4b      	ldr	r3, [pc, #300]	; (8003ef8 <I2C_DMAAbort+0x148>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	08db      	lsrs	r3, r3, #3
 8003dd0:	4a4a      	ldr	r2, [pc, #296]	; (8003efc <I2C_DMAAbort+0x14c>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	0a1a      	lsrs	r2, r3, #8
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	00da      	lsls	r2, r3, #3
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	f043 0220 	orr.w	r2, r3, #32
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003df6:	e00a      	b.n	8003e0e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e0c:	d0ea      	beq.n	8003de4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2200      	movs	r2, #0
 8003e42:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e50:	2200      	movs	r2, #0
 8003e52:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	2200      	movs	r2, #0
 8003e62:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0201 	bic.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b60      	cmp	r3, #96	; 0x60
 8003e7e:	d10e      	bne.n	8003e9e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2200      	movs	r2, #0
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e96:	6978      	ldr	r0, [r7, #20]
 8003e98:	f7fe fea8 	bl	8002bec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e9c:	e027      	b.n	8003eee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ea0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ea4:	2b28      	cmp	r3, #40	; 0x28
 8003ea6:	d117      	bne.n	8003ed8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ec6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2228      	movs	r2, #40	; 0x28
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ed6:	e007      	b.n	8003ee8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003ee8:	6978      	ldr	r0, [r7, #20]
 8003eea:	f7fe fe76 	bl	8002bda <HAL_I2C_ErrorCallback>
}
 8003eee:	bf00      	nop
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000018 	.word	0x20000018
 8003efc:	14f8b589 	.word	0x14f8b589

08003f00 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f0c:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	08db      	lsrs	r3, r3, #3
 8003f12:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	0a1a      	lsrs	r2, r3, #8
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d107      	bne.n	8003f3e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f043 0220 	orr.w	r2, r3, #32
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e008      	b.n	8003f50 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f4c:	d0e9      	beq.n	8003f22 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000018 	.word	0x20000018
 8003f60:	14f8b589 	.word	0x14f8b589

08003f64 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f74:	d103      	bne.n	8003f7e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f7c:	e007      	b.n	8003f8e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f86:	d102      	bne.n	8003f8e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e02b      	b.n	8004002 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f245 5255 	movw	r2, #21845	; 0x5555
 8003fbc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6852      	ldr	r2, [r2, #4]
 8003fc6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6892      	ldr	r2, [r2, #8]
 8003fd0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003fd2:	f7fd fc9b 	bl	800190c <HAL_GetTick>
 8003fd6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8003fd8:	e008      	b.n	8003fec <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003fda:	f7fd fc97 	bl	800190c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b26      	cmp	r3, #38	; 0x26
 8003fe6:	d901      	bls.n	8003fec <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e00a      	b.n	8004002 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f1      	bne.n	8003fda <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003ffe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800400a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400c:	b08b      	sub	sp, #44	; 0x2c
 800400e:	af06      	add	r7, sp, #24
 8004010:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0fd      	b.n	8004218 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d106      	bne.n	8004036 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f006 f97d 	bl	800a330 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2203      	movs	r2, #3
 800403a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f002 fbec 	bl	8006820 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	687e      	ldr	r6, [r7, #4]
 8004050:	466d      	mov	r5, sp
 8004052:	f106 0410 	add.w	r4, r6, #16
 8004056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	602b      	str	r3, [r5, #0]
 800405e:	1d33      	adds	r3, r6, #4
 8004060:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004062:	6838      	ldr	r0, [r7, #0]
 8004064:	f002 fbb6 	bl	80067d4 <USB_CoreInit>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2202      	movs	r2, #2
 8004072:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e0ce      	b.n	8004218 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f002 fbe7 	bl	8006854 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004086:	2300      	movs	r3, #0
 8004088:	73fb      	strb	r3, [r7, #15]
 800408a:	e04c      	b.n	8004126 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	440b      	add	r3, r1
 800409c:	3301      	adds	r3, #1
 800409e:	2201      	movs	r2, #1
 80040a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	440b      	add	r3, r1
 80040b2:	7bfa      	ldrb	r2, [r7, #15]
 80040b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040b6:	7bfa      	ldrb	r2, [r7, #15]
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	b298      	uxth	r0, r3
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	440b      	add	r3, r1
 80040c8:	3336      	adds	r3, #54	; 0x36
 80040ca:	4602      	mov	r2, r0
 80040cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	440b      	add	r3, r1
 80040de:	3303      	adds	r3, #3
 80040e0:	2200      	movs	r2, #0
 80040e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040e4:	7bfa      	ldrb	r2, [r7, #15]
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	440b      	add	r3, r1
 80040f2:	3338      	adds	r3, #56	; 0x38
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040f8:	7bfa      	ldrb	r2, [r7, #15]
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	440b      	add	r3, r1
 8004106:	333c      	adds	r3, #60	; 0x3c
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800410c:	7bfa      	ldrb	r2, [r7, #15]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	440b      	add	r3, r1
 800411a:	3340      	adds	r3, #64	; 0x40
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	3301      	adds	r3, #1
 8004124:	73fb      	strb	r3, [r7, #15]
 8004126:	7bfa      	ldrb	r2, [r7, #15]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	429a      	cmp	r2, r3
 800412e:	d3ad      	bcc.n	800408c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004130:	2300      	movs	r3, #0
 8004132:	73fb      	strb	r3, [r7, #15]
 8004134:	e044      	b.n	80041c0 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004136:	7bfa      	ldrb	r2, [r7, #15]
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	440b      	add	r3, r1
 8004144:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800414c:	7bfa      	ldrb	r2, [r7, #15]
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	440b      	add	r3, r1
 800415a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800415e:	7bfa      	ldrb	r2, [r7, #15]
 8004160:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004162:	7bfa      	ldrb	r2, [r7, #15]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	440b      	add	r3, r1
 8004170:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004174:	2200      	movs	r2, #0
 8004176:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004178:	7bfa      	ldrb	r2, [r7, #15]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	440b      	add	r3, r1
 8004186:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800418e:	7bfa      	ldrb	r2, [r7, #15]
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	440b      	add	r3, r1
 800419c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041a4:	7bfa      	ldrb	r2, [r7, #15]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	440b      	add	r3, r1
 80041b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	3301      	adds	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
 80041c0:	7bfa      	ldrb	r2, [r7, #15]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d3b5      	bcc.n	8004136 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	687e      	ldr	r6, [r7, #4]
 80041d2:	466d      	mov	r5, sp
 80041d4:	f106 0410 	add.w	r4, r6, #16
 80041d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	602b      	str	r3, [r5, #0]
 80041e0:	1d33      	adds	r3, r6, #4
 80041e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041e4:	6838      	ldr	r0, [r7, #0]
 80041e6:	f002 fb41 	bl	800686c <USB_DevInit>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e00d      	b.n	8004218 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f004 fadb 	bl	80087cc <USB_DevDisconnect>

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004220 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_PCD_Start+0x16>
 8004232:	2302      	movs	r3, #2
 8004234:	e016      	b.n	8004264 <HAL_PCD_Start+0x44>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f002 fad6 	bl	80067f4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004248:	2101      	movs	r1, #1
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f006 fae3 	bl	800a816 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f004 faaf 	bl	80087b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f004 fab1 	bl	80087e0 <USB_ReadInterrupts>
 800427e:	4603      	mov	r3, r0
 8004280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004288:	d102      	bne.n	8004290 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fb61 	bl	8004952 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f004 faa3 	bl	80087e0 <USB_ReadInterrupts>
 800429a:	4603      	mov	r3, r0
 800429c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a4:	d112      	bne.n	80042cc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b8:	b292      	uxth	r2, r2
 80042ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f006 f8b1 	bl	800a426 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80042c4:	2100      	movs	r1, #0
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f925 	bl	8004516 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f004 fa85 	bl	80087e0 <USB_ReadInterrupts>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042e0:	d10b      	bne.n	80042fa <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042f4:	b292      	uxth	r2, r2
 80042f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f004 fa6e 	bl	80087e0 <USB_ReadInterrupts>
 8004304:	4603      	mov	r3, r0
 8004306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800430a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800430e:	d10b      	bne.n	8004328 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004318:	b29a      	uxth	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004322:	b292      	uxth	r2, r2
 8004324:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f004 fa57 	bl	80087e0 <USB_ReadInterrupts>
 8004332:	4603      	mov	r3, r0
 8004334:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433c:	d126      	bne.n	800438c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004346:	b29a      	uxth	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0204 	bic.w	r2, r2, #4
 8004350:	b292      	uxth	r2, r2
 8004352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800435e:	b29a      	uxth	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0208 	bic.w	r2, r2, #8
 8004368:	b292      	uxth	r2, r2
 800436a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f006 f892 	bl	800a498 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800437c:	b29a      	uxth	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004386:	b292      	uxth	r2, r2
 8004388:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f004 fa25 	bl	80087e0 <USB_ReadInterrupts>
 8004396:	4603      	mov	r3, r0
 8004398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800439c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043a0:	f040 8084 	bne.w	80044ac <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80043a4:	2300      	movs	r3, #0
 80043a6:	77fb      	strb	r3, [r7, #31]
 80043a8:	e011      	b.n	80043ce <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	7ffb      	ldrb	r3, [r7, #31]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	441a      	add	r2, r3
 80043b6:	7ffb      	ldrb	r3, [r7, #31]
 80043b8:	8812      	ldrh	r2, [r2, #0]
 80043ba:	b292      	uxth	r2, r2
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	f107 0120 	add.w	r1, r7, #32
 80043c2:	440b      	add	r3, r1
 80043c4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80043c8:	7ffb      	ldrb	r3, [r7, #31]
 80043ca:	3301      	adds	r3, #1
 80043cc:	77fb      	strb	r3, [r7, #31]
 80043ce:	7ffb      	ldrb	r3, [r7, #31]
 80043d0:	2b07      	cmp	r3, #7
 80043d2:	d9ea      	bls.n	80043aa <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043dc:	b29a      	uxth	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	b292      	uxth	r2, r2
 80043e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0201 	bic.w	r2, r2, #1
 80043fe:	b292      	uxth	r2, r2
 8004400:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004404:	bf00      	nop
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800440e:	b29b      	uxth	r3, r3
 8004410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f6      	beq.n	8004406 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004420:	b29a      	uxth	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442a:	b292      	uxth	r2, r2
 800442c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004430:	2300      	movs	r3, #0
 8004432:	77fb      	strb	r3, [r7, #31]
 8004434:	e010      	b.n	8004458 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004436:	7ffb      	ldrb	r3, [r7, #31]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	4611      	mov	r1, r2
 800443e:	7ffa      	ldrb	r2, [r7, #31]
 8004440:	0092      	lsls	r2, r2, #2
 8004442:	440a      	add	r2, r1
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	f107 0120 	add.w	r1, r7, #32
 800444a:	440b      	add	r3, r1
 800444c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004450:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004452:	7ffb      	ldrb	r3, [r7, #31]
 8004454:	3301      	adds	r3, #1
 8004456:	77fb      	strb	r3, [r7, #31]
 8004458:	7ffb      	ldrb	r3, [r7, #31]
 800445a:	2b07      	cmp	r3, #7
 800445c:	d9eb      	bls.n	8004436 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004466:	b29a      	uxth	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0208 	orr.w	r2, r2, #8
 8004470:	b292      	uxth	r2, r2
 8004472:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800447e:	b29a      	uxth	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004488:	b292      	uxth	r2, r2
 800448a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004496:	b29a      	uxth	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 0204 	orr.w	r2, r2, #4
 80044a0:	b292      	uxth	r2, r2
 80044a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f005 ffdc 	bl	800a464 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f004 f995 	bl	80087e0 <USB_ReadInterrupts>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c0:	d10e      	bne.n	80044e0 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044d4:	b292      	uxth	r2, r2
 80044d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f005 ff95 	bl	800a40a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f004 f97b 	bl	80087e0 <USB_ReadInterrupts>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f4:	d10b      	bne.n	800450e <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044fe:	b29a      	uxth	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004508:	b292      	uxth	r2, r2
 800450a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800450e:	bf00      	nop
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	460b      	mov	r3, r1
 8004520:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_PCD_SetAddress+0x1a>
 800452c:	2302      	movs	r3, #2
 800452e:	e013      	b.n	8004558 <HAL_PCD_SetAddress+0x42>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	78fa      	ldrb	r2, [r7, #3]
 800453c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	78fa      	ldrb	r2, [r7, #3]
 8004546:	4611      	mov	r1, r2
 8004548:	4618      	mov	r0, r3
 800454a:	f004 f922 	bl	8008792 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	4608      	mov	r0, r1
 800456a:	4611      	mov	r1, r2
 800456c:	461a      	mov	r2, r3
 800456e:	4603      	mov	r3, r0
 8004570:	70fb      	strb	r3, [r7, #3]
 8004572:	460b      	mov	r3, r1
 8004574:	803b      	strh	r3, [r7, #0]
 8004576:	4613      	mov	r3, r2
 8004578:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800457e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004582:	2b00      	cmp	r3, #0
 8004584:	da0e      	bge.n	80045a4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004586:	78fb      	ldrb	r3, [r7, #3]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	4413      	add	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	705a      	strb	r2, [r3, #1]
 80045a2:	e00e      	b.n	80045c2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	f003 0207 	and.w	r2, r3, #7
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	4413      	add	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80045ce:	883a      	ldrh	r2, [r7, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	78ba      	ldrb	r2, [r7, #2]
 80045d8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	785b      	ldrb	r3, [r3, #1]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d004      	beq.n	80045ec <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80045ec:	78bb      	ldrb	r3, [r7, #2]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d102      	bne.n	80045f8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_PCD_EP_Open+0xa6>
 8004602:	2302      	movs	r3, #2
 8004604:	e00e      	b.n	8004624 <HAL_PCD_EP_Open+0xc4>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68f9      	ldr	r1, [r7, #12]
 8004614:	4618      	mov	r0, r3
 8004616:	f002 f949 	bl	80068ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004622:	7afb      	ldrb	r3, [r7, #11]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004638:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800463c:	2b00      	cmp	r3, #0
 800463e:	da0e      	bge.n	800465e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	4413      	add	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	705a      	strb	r2, [r3, #1]
 800465c:	e00e      	b.n	800467c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800465e:	78fb      	ldrb	r3, [r7, #3]
 8004660:	f003 0207 	and.w	r2, r3, #7
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4413      	add	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	b2da      	uxtb	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_PCD_EP_Close+0x6a>
 8004692:	2302      	movs	r3, #2
 8004694:	e00e      	b.n	80046b4 <HAL_PCD_EP_Close+0x88>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68f9      	ldr	r1, [r7, #12]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f002 fc6b 	bl	8006f80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	607a      	str	r2, [r7, #4]
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	460b      	mov	r3, r1
 80046ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046cc:	7afb      	ldrb	r3, [r7, #11]
 80046ce:	f003 0207 	and.w	r2, r3, #7
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4413      	add	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2200      	movs	r2, #0
 80046f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2200      	movs	r2, #0
 80046fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046fc:	7afb      	ldrb	r3, [r7, #11]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	b2da      	uxtb	r2, r3
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004708:	7afb      	ldrb	r3, [r7, #11]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6979      	ldr	r1, [r7, #20]
 8004718:	4618      	mov	r0, r3
 800471a:	f002 fe1d 	bl	8007358 <USB_EPStartXfer>
 800471e:	e005      	b.n	800472c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6979      	ldr	r1, [r7, #20]
 8004726:	4618      	mov	r0, r3
 8004728:	f002 fe16 	bl	8007358 <USB_EPStartXfer>
  }

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	460b      	mov	r3, r1
 8004740:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004742:	78fb      	ldrb	r3, [r7, #3]
 8004744:	f003 0207 	and.w	r2, r3, #7
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	440b      	add	r3, r1
 8004754:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004758:	681b      	ldr	r3, [r3, #0]
}
 800475a:	4618      	mov	r0, r3
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr

08004764 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	607a      	str	r2, [r7, #4]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	460b      	mov	r3, r1
 8004772:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004774:	7afb      	ldrb	r3, [r7, #11]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2200      	movs	r2, #0
 80047a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2201      	movs	r2, #1
 80047ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047b0:	7afb      	ldrb	r3, [r7, #11]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047bc:	7afb      	ldrb	r3, [r7, #11]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6979      	ldr	r1, [r7, #20]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f002 fdc3 	bl	8007358 <USB_EPStartXfer>
 80047d2:	e005      	b.n	80047e0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6979      	ldr	r1, [r7, #20]
 80047da:	4618      	mov	r0, r3
 80047dc:	f002 fdbc 	bl	8007358 <USB_EPStartXfer>
  }

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b084      	sub	sp, #16
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	460b      	mov	r3, r1
 80047f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80047f6:	78fb      	ldrb	r3, [r7, #3]
 80047f8:	f003 0207 	and.w	r2, r3, #7
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	429a      	cmp	r2, r3
 8004802:	d901      	bls.n	8004808 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e04c      	b.n	80048a2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800480c:	2b00      	cmp	r3, #0
 800480e:	da0e      	bge.n	800482e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004810:	78fb      	ldrb	r3, [r7, #3]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	4413      	add	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	705a      	strb	r2, [r3, #1]
 800482c:	e00c      	b.n	8004848 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800482e:	78fa      	ldrb	r2, [r7, #3]
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	4413      	add	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2201      	movs	r2, #1
 800484c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800484e:	78fb      	ldrb	r3, [r7, #3]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	b2da      	uxtb	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_PCD_EP_SetStall+0x7e>
 8004864:	2302      	movs	r3, #2
 8004866:	e01c      	b.n	80048a2 <HAL_PCD_EP_SetStall+0xb8>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68f9      	ldr	r1, [r7, #12]
 8004876:	4618      	mov	r0, r3
 8004878:	f003 fe8e 	bl	8008598 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	2b00      	cmp	r3, #0
 8004884:	d108      	bne.n	8004898 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004890:	4619      	mov	r1, r3
 8004892:	4610      	mov	r0, r2
 8004894:	f003 ffb3 	bl	80087fe <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	460b      	mov	r3, r1
 80048b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80048b6:	78fb      	ldrb	r3, [r7, #3]
 80048b8:	f003 020f 	and.w	r2, r3, #15
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d901      	bls.n	80048c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e040      	b.n	800494a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	da0e      	bge.n	80048ee <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	4613      	mov	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	4413      	add	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	705a      	strb	r2, [r3, #1]
 80048ec:	e00e      	b.n	800490c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048ee:	78fb      	ldrb	r3, [r7, #3]
 80048f0:	f003 0207 	and.w	r2, r3, #7
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	4413      	add	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004912:	78fb      	ldrb	r3, [r7, #3]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	b2da      	uxtb	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_PCD_EP_ClrStall+0x82>
 8004928:	2302      	movs	r3, #2
 800492a:	e00e      	b.n	800494a <HAL_PCD_EP_ClrStall+0xa0>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68f9      	ldr	r1, [r7, #12]
 800493a:	4618      	mov	r0, r3
 800493c:	f003 fe7c 	bl	8008638 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b08e      	sub	sp, #56	; 0x38
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800495a:	e2df      	b.n	8004f1c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004964:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004966:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004968:	b2db      	uxtb	r3, r3
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004972:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004976:	2b00      	cmp	r3, #0
 8004978:	f040 8158 	bne.w	8004c2c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800497c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	2b00      	cmp	r3, #0
 8004984:	d152      	bne.n	8004a2c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	b29b      	uxth	r3, r3
 800498e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	81fb      	strh	r3, [r7, #14]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	89fb      	ldrh	r3, [r7, #14]
 800499e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3328      	adds	r3, #40	; 0x28
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	461a      	mov	r2, r3
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	4413      	add	r3, r2
 80049c4:	3302      	adds	r3, #2
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	695a      	ldr	r2, [r3, #20]
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	441a      	add	r2, r3
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80049ea:	2100      	movs	r1, #0
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f005 fcf2 	bl	800a3d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 828e 	beq.w	8004f1c <PCD_EP_ISR_Handler+0x5ca>
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f040 8289 	bne.w	8004f1c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	b292      	uxth	r2, r2
 8004a1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a2a:	e277      	b.n	8004f1c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004a3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d034      	beq.n	8004ab0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	4413      	add	r3, r2
 8004a5a:	3306      	adds	r3, #6
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6812      	ldr	r2, [r2, #0]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	f003 ff09 	bl	800889c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a96:	4013      	ands	r3, r2
 8004a98:	823b      	strh	r3, [r7, #16]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	8a3a      	ldrh	r2, [r7, #16]
 8004aa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004aa4:	b292      	uxth	r2, r2
 8004aa6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f005 fc67 	bl	800a37c <HAL_PCD_SetupStageCallback>
 8004aae:	e235      	b.n	8004f1c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004ab0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f280 8231 	bge.w	8004f1c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	83bb      	strh	r3, [r7, #28]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	8bba      	ldrh	r2, [r7, #28]
 8004ad0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ad4:	b292      	uxth	r2, r2
 8004ad6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	4413      	add	r3, r2
 8004aec:	3306      	adds	r3, #6
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	6812      	ldr	r2, [r2, #0]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d019      	beq.n	8004b40 <PCD_EP_ISR_Handler+0x1ee>
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d015      	beq.n	8004b40 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6818      	ldr	r0, [r3, #0]
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	6959      	ldr	r1, [r3, #20]
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	f003 feb9 	bl	800889c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	695a      	ldr	r2, [r3, #20]
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	441a      	add	r2, r3
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004b38:	2100      	movs	r1, #0
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f005 fc30 	bl	800a3a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	61bb      	str	r3, [r7, #24]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	461a      	mov	r2, r3
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	4413      	add	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d112      	bne.n	8004b8e <PCD_EP_ISR_Handler+0x23c>
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	801a      	strh	r2, [r3, #0]
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	801a      	strh	r2, [r3, #0]
 8004b8c:	e02f      	b.n	8004bee <PCD_EP_ISR_Handler+0x29c>
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	2b3e      	cmp	r3, #62	; 0x3e
 8004b94:	d813      	bhi.n	8004bbe <PCD_EP_ISR_Handler+0x26c>
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <PCD_EP_ISR_Handler+0x25e>
 8004baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bac:	3301      	adds	r3, #1
 8004bae:	633b      	str	r3, [r7, #48]	; 0x30
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	029b      	lsls	r3, r3, #10
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	801a      	strh	r2, [r3, #0]
 8004bbc:	e017      	b.n	8004bee <PCD_EP_ISR_Handler+0x29c>
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 031f 	and.w	r3, r3, #31
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d102      	bne.n	8004bd8 <PCD_EP_ISR_Handler+0x286>
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	633b      	str	r3, [r7, #48]	; 0x30
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	029b      	lsls	r3, r3, #10
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfe:	827b      	strh	r3, [r7, #18]
 8004c00:	8a7b      	ldrh	r3, [r7, #18]
 8004c02:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c06:	827b      	strh	r3, [r7, #18]
 8004c08:	8a7b      	ldrh	r3, [r7, #18]
 8004c0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c0e:	827b      	strh	r3, [r7, #18]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	8a7b      	ldrh	r3, [r7, #18]
 8004c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	8013      	strh	r3, [r2, #0]
 8004c2a:	e177      	b.n	8004f1c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c3e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f280 80ea 	bge.w	8004e1c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004c5e:	4013      	ands	r3, r2
 8004c60:	853b      	strh	r3, [r7, #40]	; 0x28
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004c72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c76:	b292      	uxth	r2, r2
 8004c78:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004c7a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	7b1b      	ldrb	r3, [r3, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d122      	bne.n	8004cde <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4413      	add	r3, r2
 8004cac:	3306      	adds	r3, #6
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cc0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004cc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 8087 	beq.w	8004dd8 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	6959      	ldr	r1, [r3, #20]
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	88da      	ldrh	r2, [r3, #6]
 8004cd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004cd8:	f003 fde0 	bl	800889c <USB_ReadPMA>
 8004cdc:	e07c      	b.n	8004dd8 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	78db      	ldrb	r3, [r3, #3]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d108      	bne.n	8004cf8 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004ce6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ce8:	461a      	mov	r2, r3
 8004cea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f923 	bl	8004f38 <HAL_PCD_EP_DB_Receive>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004cf6:	e06f      	b.n	8004dd8 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d12:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	441a      	add	r2, r3
 8004d22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d021      	beq.n	8004d96 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4413      	add	r3, r2
 8004d66:	3302      	adds	r3, #2
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6812      	ldr	r2, [r2, #0]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d7a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004d7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d02a      	beq.n	8004dd8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	6959      	ldr	r1, [r3, #20]
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	891a      	ldrh	r2, [r3, #8]
 8004d8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d90:	f003 fd84 	bl	800889c <USB_ReadPMA>
 8004d94:	e020      	b.n	8004dd8 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	461a      	mov	r2, r3
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4413      	add	r3, r2
 8004daa:	3306      	adds	r3, #6
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6812      	ldr	r2, [r2, #0]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dbe:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004dc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d008      	beq.n	8004dd8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	6959      	ldr	r1, [r3, #20]
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	895a      	ldrh	r2, [r3, #10]
 8004dd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dd4:	f003 fd62 	bl	800889c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	69da      	ldr	r2, [r3, #28]
 8004ddc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dde:	441a      	add	r2, r3
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	695a      	ldr	r2, [r3, #20]
 8004de8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dea:	441a      	add	r2, r3
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d004      	beq.n	8004e02 <PCD_EP_ISR_Handler+0x4b0>
 8004df8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d206      	bcs.n	8004e10 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	4619      	mov	r1, r3
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f005 fac9 	bl	800a3a0 <HAL_PCD_DataOutStageCallback>
 8004e0e:	e005      	b.n	8004e1c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e16:	4618      	mov	r0, r3
 8004e18:	f002 fa9e 	bl	8007358 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004e1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d07a      	beq.n	8004f1c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8004e26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	4413      	add	r3, r2
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e54:	843b      	strh	r3, [r7, #32]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	441a      	add	r2, r3
 8004e64:	8c3b      	ldrh	r3, [r7, #32]
 8004e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	78db      	ldrb	r3, [r3, #3]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d108      	bne.n	8004e8c <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d146      	bne.n	8004f10 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004e82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d141      	bne.n	8004f10 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	461a      	mov	r2, r3
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	4413      	add	r3, r2
 8004ea0:	3302      	adds	r3, #2
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6812      	ldr	r2, [r2, #0]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eb4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	699a      	ldr	r2, [r3, #24]
 8004eba:	8bfb      	ldrh	r3, [r7, #30]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d906      	bls.n	8004ece <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	699a      	ldr	r2, [r3, #24]
 8004ec4:	8bfb      	ldrh	r3, [r7, #30]
 8004ec6:	1ad2      	subs	r2, r2, r3
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	619a      	str	r2, [r3, #24]
 8004ecc:	e002      	b.n	8004ed4 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d106      	bne.n	8004eea <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f005 fa77 	bl	800a3d6 <HAL_PCD_DataInStageCallback>
 8004ee8:	e018      	b.n	8004f1c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	695a      	ldr	r2, [r3, #20]
 8004eee:	8bfb      	ldrh	r3, [r7, #30]
 8004ef0:	441a      	add	r2, r3
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	69da      	ldr	r2, [r3, #28]
 8004efa:	8bfb      	ldrh	r3, [r7, #30]
 8004efc:	441a      	add	r2, r3
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f002 fa25 	bl	8007358 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004f0e:	e005      	b.n	8004f1c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004f10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f12:	461a      	mov	r2, r3
 8004f14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f91b 	bl	8005152 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	b21b      	sxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f6ff ad17 	blt.w	800495c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3738      	adds	r7, #56	; 0x38
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	4613      	mov	r3, r2
 8004f44:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f46:	88fb      	ldrh	r3, [r7, #6]
 8004f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d07e      	beq.n	800504e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	4413      	add	r3, r2
 8004f64:	3302      	adds	r3, #2
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f78:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	8b7b      	ldrh	r3, [r7, #26]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d306      	bcc.n	8004f92 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	699a      	ldr	r2, [r3, #24]
 8004f88:	8b7b      	ldrh	r3, [r7, #26]
 8004f8a:	1ad2      	subs	r2, r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	619a      	str	r2, [r3, #24]
 8004f90:	e002      	b.n	8004f98 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2200      	movs	r2, #0
 8004f96:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d123      	bne.n	8004fe8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fba:	833b      	strh	r3, [r7, #24]
 8004fbc:	8b3b      	ldrh	r3, [r7, #24]
 8004fbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fc2:	833b      	strh	r3, [r7, #24]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	441a      	add	r2, r3
 8004fd2:	8b3b      	ldrh	r3, [r7, #24]
 8004fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004fe8:	88fb      	ldrh	r3, [r7, #6]
 8004fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01f      	beq.n	8005032 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b29b      	uxth	r3, r3
 8005004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500c:	82fb      	strh	r3, [r7, #22]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	441a      	add	r2, r3
 800501c:	8afb      	ldrh	r3, [r7, #22]
 800501e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800502a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800502e:	b29b      	uxth	r3, r3
 8005030:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005032:	8b7b      	ldrh	r3, [r7, #26]
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8087 	beq.w	8005148 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6818      	ldr	r0, [r3, #0]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	6959      	ldr	r1, [r3, #20]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	891a      	ldrh	r2, [r3, #8]
 8005046:	8b7b      	ldrh	r3, [r7, #26]
 8005048:	f003 fc28 	bl	800889c <USB_ReadPMA>
 800504c:	e07c      	b.n	8005148 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005056:	b29b      	uxth	r3, r3
 8005058:	461a      	mov	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	4413      	add	r3, r2
 8005062:	3306      	adds	r3, #6
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005076:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	699a      	ldr	r2, [r3, #24]
 800507c:	8b7b      	ldrh	r3, [r7, #26]
 800507e:	429a      	cmp	r2, r3
 8005080:	d306      	bcc.n	8005090 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	8b7b      	ldrh	r3, [r7, #26]
 8005088:	1ad2      	subs	r2, r2, r3
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	619a      	str	r2, [r3, #24]
 800508e:	e002      	b.n	8005096 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2200      	movs	r2, #0
 8005094:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d123      	bne.n	80050e6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b8:	83fb      	strh	r3, [r7, #30]
 80050ba:	8bfb      	ldrh	r3, [r7, #30]
 80050bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050c0:	83fb      	strh	r3, [r7, #30]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	441a      	add	r2, r3
 80050d0:	8bfb      	ldrh	r3, [r7, #30]
 80050d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80050e6:	88fb      	ldrh	r3, [r7, #6]
 80050e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d11f      	bne.n	8005130 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b29b      	uxth	r3, r3
 8005102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510a:	83bb      	strh	r3, [r7, #28]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	441a      	add	r2, r3
 800511a:	8bbb      	ldrh	r3, [r7, #28]
 800511c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005128:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800512c:	b29b      	uxth	r3, r3
 800512e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005130:	8b7b      	ldrh	r3, [r7, #26]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d008      	beq.n	8005148 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	6959      	ldr	r1, [r3, #20]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	895a      	ldrh	r2, [r3, #10]
 8005142:	8b7b      	ldrh	r3, [r7, #26]
 8005144:	f003 fbaa 	bl	800889c <USB_ReadPMA>
    }
  }

  return count;
 8005148:	8b7b      	ldrh	r3, [r7, #26]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3720      	adds	r7, #32
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b092      	sub	sp, #72	; 0x48
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	4613      	mov	r3, r2
 800515e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 8132 	beq.w	80053d0 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005174:	b29b      	uxth	r3, r3
 8005176:	461a      	mov	r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	4413      	add	r3, r2
 8005180:	3302      	adds	r3, #2
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005194:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800519c:	429a      	cmp	r2, r3
 800519e:	d906      	bls.n	80051ae <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	699a      	ldr	r2, [r3, #24]
 80051a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051a6:	1ad2      	subs	r2, r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	619a      	str	r2, [r3, #24]
 80051ac:	e002      	b.n	80051b4 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2200      	movs	r2, #0
 80051b2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d12c      	bne.n	8005216 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	4619      	mov	r1, r3
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f005 f907 	bl	800a3d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 822f 	beq.w	8005632 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ee:	827b      	strh	r3, [r7, #18]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	461a      	mov	r2, r3
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	441a      	add	r2, r3
 80051fe:	8a7b      	ldrh	r3, [r7, #18]
 8005200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005208:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800520c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005210:	b29b      	uxth	r3, r3
 8005212:	8013      	strh	r3, [r2, #0]
 8005214:	e20d      	b.n	8005632 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005216:	88fb      	ldrh	r3, [r7, #6]
 8005218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01f      	beq.n	8005260 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	b29b      	uxth	r3, r3
 8005232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	441a      	add	r2, r3
 800524a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800524c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800525c:	b29b      	uxth	r3, r3
 800525e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005266:	2b01      	cmp	r3, #1
 8005268:	f040 81e3 	bne.w	8005632 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	695a      	ldr	r2, [r3, #20]
 8005270:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005272:	441a      	add	r2, r3
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800527e:	441a      	add	r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	6a1a      	ldr	r2, [r3, #32]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	429a      	cmp	r2, r3
 800528e:	d309      	bcc.n	80052a4 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	6a1a      	ldr	r2, [r3, #32]
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	1ad2      	subs	r2, r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	621a      	str	r2, [r3, #32]
 80052a2:	e014      	b.n	80052ce <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80052ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052ae:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80052b8:	e009      	b.n	80052ce <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2200      	movs	r2, #0
 80052cc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	785b      	ldrb	r3, [r3, #1]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d155      	bne.n	8005382 <HAL_PCD_EP_DB_Transmit+0x230>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	4413      	add	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	011a      	lsls	r2, r3, #4
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	4413      	add	r3, r2
 80052f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005300:	2b00      	cmp	r3, #0
 8005302:	d112      	bne.n	800532a <HAL_PCD_EP_DB_Transmit+0x1d8>
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800530e:	b29a      	uxth	r2, r3
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800531e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005322:	b29a      	uxth	r2, r3
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	801a      	strh	r2, [r3, #0]
 8005328:	e047      	b.n	80053ba <HAL_PCD_EP_DB_Transmit+0x268>
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	2b3e      	cmp	r3, #62	; 0x3e
 800532e:	d811      	bhi.n	8005354 <HAL_PCD_EP_DB_Transmit+0x202>
 8005330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005332:	085b      	lsrs	r3, r3, #1
 8005334:	62bb      	str	r3, [r7, #40]	; 0x28
 8005336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	3301      	adds	r3, #1
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	b29b      	uxth	r3, r3
 800534a:	029b      	lsls	r3, r3, #10
 800534c:	b29a      	uxth	r2, r3
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	801a      	strh	r2, [r3, #0]
 8005352:	e032      	b.n	80053ba <HAL_PCD_EP_DB_Transmit+0x268>
 8005354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	f003 031f 	and.w	r3, r3, #31
 8005360:	2b00      	cmp	r3, #0
 8005362:	d102      	bne.n	800536a <HAL_PCD_EP_DB_Transmit+0x218>
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	3b01      	subs	r3, #1
 8005368:	62bb      	str	r3, [r7, #40]	; 0x28
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	b29b      	uxth	r3, r3
 800536e:	029b      	lsls	r3, r3, #10
 8005370:	b29b      	uxth	r3, r3
 8005372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800537a:	b29a      	uxth	r2, r3
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	801a      	strh	r2, [r3, #0]
 8005380:	e01b      	b.n	80053ba <HAL_PCD_EP_DB_Transmit+0x268>
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	785b      	ldrb	r3, [r3, #1]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d117      	bne.n	80053ba <HAL_PCD_EP_DB_Transmit+0x268>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	623b      	str	r3, [r7, #32]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005398:	b29b      	uxth	r3, r3
 800539a:	461a      	mov	r2, r3
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	4413      	add	r3, r2
 80053a0:	623b      	str	r3, [r7, #32]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	011a      	lsls	r2, r3, #4
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	4413      	add	r3, r2
 80053ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	6959      	ldr	r1, [r3, #20]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	891a      	ldrh	r2, [r3, #8]
 80053c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	f003 fa23 	bl	8008814 <USB_WritePMA>
 80053ce:	e130      	b.n	8005632 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d8:	b29b      	uxth	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	4413      	add	r3, r2
 80053e4:	3306      	adds	r3, #6
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	6812      	ldr	r2, [r2, #0]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053f8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005400:	429a      	cmp	r2, r3
 8005402:	d306      	bcc.n	8005412 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	699a      	ldr	r2, [r3, #24]
 8005408:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800540a:	1ad2      	subs	r2, r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	619a      	str	r2, [r3, #24]
 8005410:	e002      	b.n	8005418 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2200      	movs	r2, #0
 8005416:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d12c      	bne.n	800547a <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	4619      	mov	r1, r3
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f004 ffd5 	bl	800a3d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800542c:	88fb      	ldrh	r3, [r7, #6]
 800542e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005432:	2b00      	cmp	r3, #0
 8005434:	f040 80fd 	bne.w	8005632 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	b29b      	uxth	r3, r3
 800544a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800544e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005452:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	461a      	mov	r2, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	441a      	add	r2, r3
 8005462:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005474:	b29b      	uxth	r3, r3
 8005476:	8013      	strh	r3, [r2, #0]
 8005478:	e0db      	b.n	8005632 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800547a:	88fb      	ldrh	r3, [r7, #6]
 800547c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d11f      	bne.n	80054c4 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29b      	uxth	r3, r3
 8005496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	461a      	mov	r2, r3
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	441a      	add	r2, r3
 80054ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80054b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	f040 80b1 	bne.w	8005632 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	695a      	ldr	r2, [r3, #20]
 80054d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054d6:	441a      	add	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054e2:	441a      	add	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	6a1a      	ldr	r2, [r3, #32]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d309      	bcc.n	8005508 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	6a1a      	ldr	r2, [r3, #32]
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	1ad2      	subs	r2, r2, r3
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	621a      	str	r2, [r3, #32]
 8005506:	e014      	b.n	8005532 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d106      	bne.n	800551e <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8005510:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005512:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800551c:	e009      	b.n	8005532 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2200      	movs	r2, #0
 8005528:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	637b      	str	r3, [r7, #52]	; 0x34
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	785b      	ldrb	r3, [r3, #1]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d155      	bne.n	80055ec <HAL_PCD_EP_DB_Transmit+0x49a>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	647b      	str	r3, [r7, #68]	; 0x44
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554e:	b29b      	uxth	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005554:	4413      	add	r3, r2
 8005556:	647b      	str	r3, [r7, #68]	; 0x44
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	011a      	lsls	r2, r3, #4
 800555e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005560:	4413      	add	r3, r2
 8005562:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005566:	643b      	str	r3, [r7, #64]	; 0x40
 8005568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556a:	2b00      	cmp	r3, #0
 800556c:	d112      	bne.n	8005594 <HAL_PCD_EP_DB_Transmit+0x442>
 800556e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	b29b      	uxth	r3, r3
 8005574:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005578:	b29a      	uxth	r2, r3
 800557a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	b29b      	uxth	r3, r3
 8005584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800558c:	b29a      	uxth	r2, r3
 800558e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005590:	801a      	strh	r2, [r3, #0]
 8005592:	e044      	b.n	800561e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	2b3e      	cmp	r3, #62	; 0x3e
 8005598:	d811      	bhi.n	80055be <HAL_PCD_EP_DB_Transmit+0x46c>
 800559a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559c:	085b      	lsrs	r3, r3, #1
 800559e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <HAL_PCD_EP_DB_Transmit+0x45e>
 80055aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ac:	3301      	adds	r3, #1
 80055ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	029b      	lsls	r3, r3, #10
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ba:	801a      	strh	r2, [r3, #0]
 80055bc:	e02f      	b.n	800561e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	095b      	lsrs	r3, r3, #5
 80055c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	f003 031f 	and.w	r3, r3, #31
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <HAL_PCD_EP_DB_Transmit+0x482>
 80055ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d0:	3b01      	subs	r3, #1
 80055d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	029b      	lsls	r3, r3, #10
 80055da:	b29b      	uxth	r3, r3
 80055dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e8:	801a      	strh	r2, [r3, #0]
 80055ea:	e018      	b.n	800561e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d114      	bne.n	800561e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005602:	4413      	add	r3, r2
 8005604:	637b      	str	r3, [r7, #52]	; 0x34
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	011a      	lsls	r2, r3, #4
 800560c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560e:	4413      	add	r3, r2
 8005610:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005614:	633b      	str	r3, [r7, #48]	; 0x30
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	b29a      	uxth	r2, r3
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	6959      	ldr	r1, [r3, #20]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	895a      	ldrh	r2, [r3, #10]
 800562a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562c:	b29b      	uxth	r3, r3
 800562e:	f003 f8f1 	bl	8008814 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	461a      	mov	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	b29b      	uxth	r3, r3
 8005644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800564c:	823b      	strh	r3, [r7, #16]
 800564e:	8a3b      	ldrh	r3, [r7, #16]
 8005650:	f083 0310 	eor.w	r3, r3, #16
 8005654:	823b      	strh	r3, [r7, #16]
 8005656:	8a3b      	ldrh	r3, [r7, #16]
 8005658:	f083 0320 	eor.w	r3, r3, #32
 800565c:	823b      	strh	r3, [r7, #16]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	461a      	mov	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	441a      	add	r2, r3
 800566c:	8a3b      	ldrh	r3, [r7, #16]
 800566e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567e:	b29b      	uxth	r3, r3
 8005680:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3748      	adds	r7, #72	; 0x48
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	607b      	str	r3, [r7, #4]
 8005696:	460b      	mov	r3, r1
 8005698:	817b      	strh	r3, [r7, #10]
 800569a:	4613      	mov	r3, r2
 800569c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800569e:	897b      	ldrh	r3, [r7, #10]
 80056a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00b      	beq.n	80056c2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056aa:	897b      	ldrh	r3, [r7, #10]
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4413      	add	r3, r2
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	e009      	b.n	80056d6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80056c2:	897a      	ldrh	r2, [r7, #10]
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80056d6:	893b      	ldrh	r3, [r7, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d107      	bne.n	80056ec <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2200      	movs	r2, #0
 80056e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	80da      	strh	r2, [r3, #6]
 80056ea:	e00b      	b.n	8005704 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2201      	movs	r2, #1
 80056f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	0c1b      	lsrs	r3, r3, #16
 80056fe:	b29a      	uxth	r2, r3
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr

08005710 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e26c      	b.n	8005bfc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 8087 	beq.w	800583e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005730:	4b92      	ldr	r3, [pc, #584]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 030c 	and.w	r3, r3, #12
 8005738:	2b04      	cmp	r3, #4
 800573a:	d00c      	beq.n	8005756 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800573c:	4b8f      	ldr	r3, [pc, #572]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f003 030c 	and.w	r3, r3, #12
 8005744:	2b08      	cmp	r3, #8
 8005746:	d112      	bne.n	800576e <HAL_RCC_OscConfig+0x5e>
 8005748:	4b8c      	ldr	r3, [pc, #560]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005754:	d10b      	bne.n	800576e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005756:	4b89      	ldr	r3, [pc, #548]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d06c      	beq.n	800583c <HAL_RCC_OscConfig+0x12c>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d168      	bne.n	800583c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e246      	b.n	8005bfc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005776:	d106      	bne.n	8005786 <HAL_RCC_OscConfig+0x76>
 8005778:	4b80      	ldr	r3, [pc, #512]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a7f      	ldr	r2, [pc, #508]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 800577e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	e02e      	b.n	80057e4 <HAL_RCC_OscConfig+0xd4>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10c      	bne.n	80057a8 <HAL_RCC_OscConfig+0x98>
 800578e:	4b7b      	ldr	r3, [pc, #492]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a7a      	ldr	r2, [pc, #488]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 8005794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	4b78      	ldr	r3, [pc, #480]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a77      	ldr	r2, [pc, #476]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 80057a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	e01d      	b.n	80057e4 <HAL_RCC_OscConfig+0xd4>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057b0:	d10c      	bne.n	80057cc <HAL_RCC_OscConfig+0xbc>
 80057b2:	4b72      	ldr	r3, [pc, #456]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a71      	ldr	r2, [pc, #452]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 80057b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	4b6f      	ldr	r3, [pc, #444]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a6e      	ldr	r2, [pc, #440]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 80057c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	e00b      	b.n	80057e4 <HAL_RCC_OscConfig+0xd4>
 80057cc:	4b6b      	ldr	r3, [pc, #428]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a6a      	ldr	r2, [pc, #424]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 80057d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	4b68      	ldr	r3, [pc, #416]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a67      	ldr	r2, [pc, #412]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 80057de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d013      	beq.n	8005814 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ec:	f7fc f88e 	bl	800190c <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057f4:	f7fc f88a 	bl	800190c <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b64      	cmp	r3, #100	; 0x64
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e1fa      	b.n	8005bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005806:	4b5d      	ldr	r3, [pc, #372]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0f0      	beq.n	80057f4 <HAL_RCC_OscConfig+0xe4>
 8005812:	e014      	b.n	800583e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005814:	f7fc f87a 	bl	800190c <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800581c:	f7fc f876 	bl	800190c <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b64      	cmp	r3, #100	; 0x64
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e1e6      	b.n	8005bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800582e:	4b53      	ldr	r3, [pc, #332]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1f0      	bne.n	800581c <HAL_RCC_OscConfig+0x10c>
 800583a:	e000      	b.n	800583e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800583c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d063      	beq.n	8005912 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800584a:	4b4c      	ldr	r3, [pc, #304]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f003 030c 	and.w	r3, r3, #12
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00b      	beq.n	800586e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005856:	4b49      	ldr	r3, [pc, #292]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f003 030c 	and.w	r3, r3, #12
 800585e:	2b08      	cmp	r3, #8
 8005860:	d11c      	bne.n	800589c <HAL_RCC_OscConfig+0x18c>
 8005862:	4b46      	ldr	r3, [pc, #280]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d116      	bne.n	800589c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800586e:	4b43      	ldr	r3, [pc, #268]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d005      	beq.n	8005886 <HAL_RCC_OscConfig+0x176>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d001      	beq.n	8005886 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e1ba      	b.n	8005bfc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005886:	4b3d      	ldr	r3, [pc, #244]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	4939      	ldr	r1, [pc, #228]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 8005896:	4313      	orrs	r3, r2
 8005898:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800589a:	e03a      	b.n	8005912 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d020      	beq.n	80058e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058a4:	4b36      	ldr	r3, [pc, #216]	; (8005980 <HAL_RCC_OscConfig+0x270>)
 80058a6:	2201      	movs	r2, #1
 80058a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058aa:	f7fc f82f 	bl	800190c <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058b2:	f7fc f82b 	bl	800190c <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e19b      	b.n	8005bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c4:	4b2d      	ldr	r3, [pc, #180]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0f0      	beq.n	80058b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d0:	4b2a      	ldr	r3, [pc, #168]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	4927      	ldr	r1, [pc, #156]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	600b      	str	r3, [r1, #0]
 80058e4:	e015      	b.n	8005912 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058e6:	4b26      	ldr	r3, [pc, #152]	; (8005980 <HAL_RCC_OscConfig+0x270>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ec:	f7fc f80e 	bl	800190c <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f4:	f7fc f80a 	bl	800190c <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e17a      	b.n	8005bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005906:	4b1d      	ldr	r3, [pc, #116]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1f0      	bne.n	80058f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b00      	cmp	r3, #0
 800591c:	d03a      	beq.n	8005994 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d019      	beq.n	800595a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005926:	4b17      	ldr	r3, [pc, #92]	; (8005984 <HAL_RCC_OscConfig+0x274>)
 8005928:	2201      	movs	r2, #1
 800592a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800592c:	f7fb ffee 	bl	800190c <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005934:	f7fb ffea 	bl	800190c <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e15a      	b.n	8005bfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005946:	4b0d      	ldr	r3, [pc, #52]	; (800597c <HAL_RCC_OscConfig+0x26c>)
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0f0      	beq.n	8005934 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005952:	2001      	movs	r0, #1
 8005954:	f000 fac6 	bl	8005ee4 <RCC_Delay>
 8005958:	e01c      	b.n	8005994 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800595a:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <HAL_RCC_OscConfig+0x274>)
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005960:	f7fb ffd4 	bl	800190c <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005966:	e00f      	b.n	8005988 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005968:	f7fb ffd0 	bl	800190c <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d908      	bls.n	8005988 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e140      	b.n	8005bfc <HAL_RCC_OscConfig+0x4ec>
 800597a:	bf00      	nop
 800597c:	40021000 	.word	0x40021000
 8005980:	42420000 	.word	0x42420000
 8005984:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005988:	4b9e      	ldr	r3, [pc, #632]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e9      	bne.n	8005968 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 80a6 	beq.w	8005aee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059a2:	2300      	movs	r3, #0
 80059a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059a6:	4b97      	ldr	r3, [pc, #604]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10d      	bne.n	80059ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059b2:	4b94      	ldr	r3, [pc, #592]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	4a93      	ldr	r2, [pc, #588]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 80059b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059bc:	61d3      	str	r3, [r2, #28]
 80059be:	4b91      	ldr	r3, [pc, #580]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c6:	60bb      	str	r3, [r7, #8]
 80059c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ca:	2301      	movs	r3, #1
 80059cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ce:	4b8e      	ldr	r3, [pc, #568]	; (8005c08 <HAL_RCC_OscConfig+0x4f8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d118      	bne.n	8005a0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059da:	4b8b      	ldr	r3, [pc, #556]	; (8005c08 <HAL_RCC_OscConfig+0x4f8>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a8a      	ldr	r2, [pc, #552]	; (8005c08 <HAL_RCC_OscConfig+0x4f8>)
 80059e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059e6:	f7fb ff91 	bl	800190c <HAL_GetTick>
 80059ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ec:	e008      	b.n	8005a00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ee:	f7fb ff8d 	bl	800190c <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b64      	cmp	r3, #100	; 0x64
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e0fd      	b.n	8005bfc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a00:	4b81      	ldr	r3, [pc, #516]	; (8005c08 <HAL_RCC_OscConfig+0x4f8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0f0      	beq.n	80059ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d106      	bne.n	8005a22 <HAL_RCC_OscConfig+0x312>
 8005a14:	4b7b      	ldr	r3, [pc, #492]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	4a7a      	ldr	r2, [pc, #488]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005a1a:	f043 0301 	orr.w	r3, r3, #1
 8005a1e:	6213      	str	r3, [r2, #32]
 8005a20:	e02d      	b.n	8005a7e <HAL_RCC_OscConfig+0x36e>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10c      	bne.n	8005a44 <HAL_RCC_OscConfig+0x334>
 8005a2a:	4b76      	ldr	r3, [pc, #472]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	4a75      	ldr	r2, [pc, #468]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005a30:	f023 0301 	bic.w	r3, r3, #1
 8005a34:	6213      	str	r3, [r2, #32]
 8005a36:	4b73      	ldr	r3, [pc, #460]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	4a72      	ldr	r2, [pc, #456]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005a3c:	f023 0304 	bic.w	r3, r3, #4
 8005a40:	6213      	str	r3, [r2, #32]
 8005a42:	e01c      	b.n	8005a7e <HAL_RCC_OscConfig+0x36e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	2b05      	cmp	r3, #5
 8005a4a:	d10c      	bne.n	8005a66 <HAL_RCC_OscConfig+0x356>
 8005a4c:	4b6d      	ldr	r3, [pc, #436]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	4a6c      	ldr	r2, [pc, #432]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005a52:	f043 0304 	orr.w	r3, r3, #4
 8005a56:	6213      	str	r3, [r2, #32]
 8005a58:	4b6a      	ldr	r3, [pc, #424]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	4a69      	ldr	r2, [pc, #420]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005a5e:	f043 0301 	orr.w	r3, r3, #1
 8005a62:	6213      	str	r3, [r2, #32]
 8005a64:	e00b      	b.n	8005a7e <HAL_RCC_OscConfig+0x36e>
 8005a66:	4b67      	ldr	r3, [pc, #412]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	4a66      	ldr	r2, [pc, #408]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005a6c:	f023 0301 	bic.w	r3, r3, #1
 8005a70:	6213      	str	r3, [r2, #32]
 8005a72:	4b64      	ldr	r3, [pc, #400]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	4a63      	ldr	r2, [pc, #396]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005a78:	f023 0304 	bic.w	r3, r3, #4
 8005a7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d015      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a86:	f7fb ff41 	bl	800190c <HAL_GetTick>
 8005a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a8c:	e00a      	b.n	8005aa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a8e:	f7fb ff3d 	bl	800190c <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e0ab      	b.n	8005bfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa4:	4b57      	ldr	r3, [pc, #348]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d0ee      	beq.n	8005a8e <HAL_RCC_OscConfig+0x37e>
 8005ab0:	e014      	b.n	8005adc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ab2:	f7fb ff2b 	bl	800190c <HAL_GetTick>
 8005ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ab8:	e00a      	b.n	8005ad0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aba:	f7fb ff27 	bl	800190c <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e095      	b.n	8005bfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ad0:	4b4c      	ldr	r3, [pc, #304]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1ee      	bne.n	8005aba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d105      	bne.n	8005aee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ae2:	4b48      	ldr	r3, [pc, #288]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	4a47      	ldr	r2, [pc, #284]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 8081 	beq.w	8005bfa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005af8:	4b42      	ldr	r3, [pc, #264]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f003 030c 	and.w	r3, r3, #12
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d061      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d146      	bne.n	8005b9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b0c:	4b3f      	ldr	r3, [pc, #252]	; (8005c0c <HAL_RCC_OscConfig+0x4fc>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b12:	f7fb fefb 	bl	800190c <HAL_GetTick>
 8005b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b18:	e008      	b.n	8005b2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b1a:	f7fb fef7 	bl	800190c <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e067      	b.n	8005bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b2c:	4b35      	ldr	r3, [pc, #212]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1f0      	bne.n	8005b1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b40:	d108      	bne.n	8005b54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b42:	4b30      	ldr	r3, [pc, #192]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	492d      	ldr	r1, [pc, #180]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b54:	4b2b      	ldr	r3, [pc, #172]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a19      	ldr	r1, [r3, #32]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	430b      	orrs	r3, r1
 8005b66:	4927      	ldr	r1, [pc, #156]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b6c:	4b27      	ldr	r3, [pc, #156]	; (8005c0c <HAL_RCC_OscConfig+0x4fc>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b72:	f7fb fecb 	bl	800190c <HAL_GetTick>
 8005b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b7a:	f7fb fec7 	bl	800190c <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e037      	b.n	8005bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b8c:	4b1d      	ldr	r3, [pc, #116]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0f0      	beq.n	8005b7a <HAL_RCC_OscConfig+0x46a>
 8005b98:	e02f      	b.n	8005bfa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b9a:	4b1c      	ldr	r3, [pc, #112]	; (8005c0c <HAL_RCC_OscConfig+0x4fc>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba0:	f7fb feb4 	bl	800190c <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba8:	f7fb feb0 	bl	800190c <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e020      	b.n	8005bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bba:	4b12      	ldr	r3, [pc, #72]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f0      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x498>
 8005bc6:	e018      	b.n	8005bfa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d101      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e013      	b.n	8005bfc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bd4:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <HAL_RCC_OscConfig+0x4f4>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d106      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d001      	beq.n	8005bfa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40021000 	.word	0x40021000
 8005c08:	40007000 	.word	0x40007000
 8005c0c:	42420060 	.word	0x42420060

08005c10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e0d0      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c24:	4b6a      	ldr	r3, [pc, #424]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d910      	bls.n	8005c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c32:	4b67      	ldr	r3, [pc, #412]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f023 0207 	bic.w	r2, r3, #7
 8005c3a:	4965      	ldr	r1, [pc, #404]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c42:	4b63      	ldr	r3, [pc, #396]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d001      	beq.n	8005c54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e0b8      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d020      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c6c:	4b59      	ldr	r3, [pc, #356]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	4a58      	ldr	r2, [pc, #352]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0308 	and.w	r3, r3, #8
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c84:	4b53      	ldr	r3, [pc, #332]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	4a52      	ldr	r2, [pc, #328]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c90:	4b50      	ldr	r3, [pc, #320]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	494d      	ldr	r1, [pc, #308]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d040      	beq.n	8005d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d107      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb6:	4b47      	ldr	r3, [pc, #284]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d115      	bne.n	8005cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e07f      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d107      	bne.n	8005cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cce:	4b41      	ldr	r3, [pc, #260]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e073      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cde:	4b3d      	ldr	r3, [pc, #244]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e06b      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cee:	4b39      	ldr	r3, [pc, #228]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f023 0203 	bic.w	r2, r3, #3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	4936      	ldr	r1, [pc, #216]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d00:	f7fb fe04 	bl	800190c <HAL_GetTick>
 8005d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d06:	e00a      	b.n	8005d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d08:	f7fb fe00 	bl	800190c <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e053      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d1e:	4b2d      	ldr	r3, [pc, #180]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f003 020c 	and.w	r2, r3, #12
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d1eb      	bne.n	8005d08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d30:	4b27      	ldr	r3, [pc, #156]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d210      	bcs.n	8005d60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d3e:	4b24      	ldr	r3, [pc, #144]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f023 0207 	bic.w	r2, r3, #7
 8005d46:	4922      	ldr	r1, [pc, #136]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d4e:	4b20      	ldr	r3, [pc, #128]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d001      	beq.n	8005d60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e032      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d6c:	4b19      	ldr	r3, [pc, #100]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	4916      	ldr	r1, [pc, #88]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d8a:	4b12      	ldr	r3, [pc, #72]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	490e      	ldr	r1, [pc, #56]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d9e:	f000 f821 	bl	8005de4 <HAL_RCC_GetSysClockFreq>
 8005da2:	4601      	mov	r1, r0
 8005da4:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	091b      	lsrs	r3, r3, #4
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	4a0a      	ldr	r2, [pc, #40]	; (8005dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005db0:	5cd3      	ldrb	r3, [r2, r3]
 8005db2:	fa21 f303 	lsr.w	r3, r1, r3
 8005db6:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <HAL_RCC_ClockConfig+0x1cc>)
 8005db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005dba:	4b09      	ldr	r3, [pc, #36]	; (8005de0 <HAL_RCC_ClockConfig+0x1d0>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fb fd62 	bl	8001888 <HAL_InitTick>

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40022000 	.word	0x40022000
 8005dd4:	40021000 	.word	0x40021000
 8005dd8:	0800b1c4 	.word	0x0800b1c4
 8005ddc:	20000018 	.word	0x20000018
 8005de0:	2000001c 	.word	0x2000001c

08005de4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005de4:	b490      	push	{r4, r7}
 8005de6:	b08a      	sub	sp, #40	; 0x28
 8005de8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005dea:	4b2a      	ldr	r3, [pc, #168]	; (8005e94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005dec:	1d3c      	adds	r4, r7, #4
 8005dee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005df0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005df4:	4b28      	ldr	r3, [pc, #160]	; (8005e98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61fb      	str	r3, [r7, #28]
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61bb      	str	r3, [r7, #24]
 8005e02:	2300      	movs	r3, #0
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e0e:	4b23      	ldr	r3, [pc, #140]	; (8005e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f003 030c 	and.w	r3, r3, #12
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	d002      	beq.n	8005e24 <HAL_RCC_GetSysClockFreq+0x40>
 8005e1e:	2b08      	cmp	r3, #8
 8005e20:	d003      	beq.n	8005e2a <HAL_RCC_GetSysClockFreq+0x46>
 8005e22:	e02d      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e24:	4b1e      	ldr	r3, [pc, #120]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e26:	623b      	str	r3, [r7, #32]
      break;
 8005e28:	e02d      	b.n	8005e86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	0c9b      	lsrs	r3, r3, #18
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e36:	4413      	add	r3, r2
 8005e38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005e3c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d013      	beq.n	8005e70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e48:	4b14      	ldr	r3, [pc, #80]	; (8005e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	0c5b      	lsrs	r3, r3, #17
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e56:	4413      	add	r3, r2
 8005e58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005e5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	4a0f      	ldr	r2, [pc, #60]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e62:	fb02 f203 	mul.w	r2, r2, r3
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e6e:	e004      	b.n	8005e7a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	4a0c      	ldr	r2, [pc, #48]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e74:	fb02 f303 	mul.w	r3, r2, r3
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	623b      	str	r3, [r7, #32]
      break;
 8005e7e:	e002      	b.n	8005e86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e80:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e82:	623b      	str	r3, [r7, #32]
      break;
 8005e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e86:	6a3b      	ldr	r3, [r7, #32]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3728      	adds	r7, #40	; 0x28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bc90      	pop	{r4, r7}
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	0800b168 	.word	0x0800b168
 8005e98:	0800b178 	.word	0x0800b178
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	007a1200 	.word	0x007a1200
 8005ea4:	003d0900 	.word	0x003d0900

08005ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eac:	4b02      	ldr	r3, [pc, #8]	; (8005eb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005eae:	681b      	ldr	r3, [r3, #0]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr
 8005eb8:	20000018 	.word	0x20000018

08005ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ec0:	f7ff fff2 	bl	8005ea8 <HAL_RCC_GetHCLKFreq>
 8005ec4:	4601      	mov	r1, r0
 8005ec6:	4b05      	ldr	r3, [pc, #20]	; (8005edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	0a1b      	lsrs	r3, r3, #8
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	4a03      	ldr	r2, [pc, #12]	; (8005ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ed2:	5cd3      	ldrb	r3, [r2, r3]
 8005ed4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	0800b1d4 	.word	0x0800b1d4

08005ee4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005eec:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <RCC_Delay+0x34>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a0a      	ldr	r2, [pc, #40]	; (8005f1c <RCC_Delay+0x38>)
 8005ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef6:	0a5b      	lsrs	r3, r3, #9
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	fb02 f303 	mul.w	r3, r2, r3
 8005efe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f00:	bf00      	nop
  }
  while (Delay --);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	1e5a      	subs	r2, r3, #1
 8005f06:	60fa      	str	r2, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1f9      	bne.n	8005f00 <RCC_Delay+0x1c>
}
 8005f0c:	bf00      	nop
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bc80      	pop	{r7}
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	20000018 	.word	0x20000018
 8005f1c:	10624dd3 	.word	0x10624dd3

08005f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	613b      	str	r3, [r7, #16]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d07d      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f40:	4b4f      	ldr	r3, [pc, #316]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10d      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f4c:	4b4c      	ldr	r3, [pc, #304]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	4a4b      	ldr	r2, [pc, #300]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f56:	61d3      	str	r3, [r2, #28]
 8005f58:	4b49      	ldr	r3, [pc, #292]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f64:	2301      	movs	r3, #1
 8005f66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f68:	4b46      	ldr	r3, [pc, #280]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d118      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f74:	4b43      	ldr	r3, [pc, #268]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a42      	ldr	r2, [pc, #264]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f80:	f7fb fcc4 	bl	800190c <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f86:	e008      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f88:	f7fb fcc0 	bl	800190c <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b64      	cmp	r3, #100	; 0x64
 8005f94:	d901      	bls.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e06d      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9a:	4b3a      	ldr	r3, [pc, #232]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0f0      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fa6:	4b36      	ldr	r3, [pc, #216]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d02e      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d027      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fc4:	4b2e      	ldr	r3, [pc, #184]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fcc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fce:	4b2e      	ldr	r3, [pc, #184]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fd4:	4b2c      	ldr	r3, [pc, #176]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005fda:	4a29      	ldr	r2, [pc, #164]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d014      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fea:	f7fb fc8f 	bl	800190c <HAL_GetTick>
 8005fee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff0:	e00a      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ff2:	f7fb fc8b 	bl	800190c <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006000:	4293      	cmp	r3, r2
 8006002:	d901      	bls.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e036      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006008:	4b1d      	ldr	r3, [pc, #116]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d0ee      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006014:	4b1a      	ldr	r3, [pc, #104]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	4917      	ldr	r1, [pc, #92]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006022:	4313      	orrs	r3, r2
 8006024:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006026:	7dfb      	ldrb	r3, [r7, #23]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d105      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800602c:	4b14      	ldr	r3, [pc, #80]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	4a13      	ldr	r2, [pc, #76]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006036:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	2b00      	cmp	r3, #0
 8006042:	d008      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006044:	4b0e      	ldr	r3, [pc, #56]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	490b      	ldr	r1, [pc, #44]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006052:	4313      	orrs	r3, r2
 8006054:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006062:	4b07      	ldr	r3, [pc, #28]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	4904      	ldr	r1, [pc, #16]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006070:	4313      	orrs	r3, r2
 8006072:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40021000 	.word	0x40021000
 8006084:	40007000 	.word	0x40007000
 8006088:	42420440 	.word	0x42420440

0800608c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e041      	b.n	8006122 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fb f91a 	bl	80012ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f000 fa1a 	bl	8006504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b02      	cmp	r3, #2
 800613e:	d122      	bne.n	8006186 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b02      	cmp	r3, #2
 800614c:	d11b      	bne.n	8006186 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f06f 0202 	mvn.w	r2, #2
 8006156:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	f003 0303 	and.w	r3, r3, #3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f9ad 	bl	80064cc <HAL_TIM_IC_CaptureCallback>
 8006172:	e005      	b.n	8006180 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f9a0 	bl	80064ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f9af 	bl	80064de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b04      	cmp	r3, #4
 8006192:	d122      	bne.n	80061da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f003 0304 	and.w	r3, r3, #4
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d11b      	bne.n	80061da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f06f 0204 	mvn.w	r2, #4
 80061aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f983 	bl	80064cc <HAL_TIM_IC_CaptureCallback>
 80061c6:	e005      	b.n	80061d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f976 	bl	80064ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f985 	bl	80064de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d122      	bne.n	800622e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	2b08      	cmp	r3, #8
 80061f4:	d11b      	bne.n	800622e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f06f 0208 	mvn.w	r2, #8
 80061fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2204      	movs	r2, #4
 8006204:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	f003 0303 	and.w	r3, r3, #3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f959 	bl	80064cc <HAL_TIM_IC_CaptureCallback>
 800621a:	e005      	b.n	8006228 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f94c 	bl	80064ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f95b 	bl	80064de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	2b10      	cmp	r3, #16
 800623a:	d122      	bne.n	8006282 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f003 0310 	and.w	r3, r3, #16
 8006246:	2b10      	cmp	r3, #16
 8006248:	d11b      	bne.n	8006282 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f06f 0210 	mvn.w	r2, #16
 8006252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2208      	movs	r2, #8
 8006258:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69db      	ldr	r3, [r3, #28]
 8006260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f92f 	bl	80064cc <HAL_TIM_IC_CaptureCallback>
 800626e:	e005      	b.n	800627c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f922 	bl	80064ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f931 	bl	80064de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b01      	cmp	r3, #1
 800628e:	d10e      	bne.n	80062ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b01      	cmp	r3, #1
 800629c:	d107      	bne.n	80062ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f06f 0201 	mvn.w	r2, #1
 80062a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f8fd 	bl	80064a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b8:	2b80      	cmp	r3, #128	; 0x80
 80062ba:	d10e      	bne.n	80062da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c6:	2b80      	cmp	r3, #128	; 0x80
 80062c8:	d107      	bne.n	80062da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fa74 	bl	80067c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e4:	2b40      	cmp	r3, #64	; 0x40
 80062e6:	d10e      	bne.n	8006306 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f2:	2b40      	cmp	r3, #64	; 0x40
 80062f4:	d107      	bne.n	8006306 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f8f5 	bl	80064f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f003 0320 	and.w	r3, r3, #32
 8006310:	2b20      	cmp	r3, #32
 8006312:	d10e      	bne.n	8006332 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b20      	cmp	r3, #32
 8006320:	d107      	bne.n	8006332 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f06f 0220 	mvn.w	r2, #32
 800632a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fa3f 	bl	80067b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006332:	bf00      	nop
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_TIM_ConfigClockSource+0x18>
 800634e:	2302      	movs	r3, #2
 8006350:	e0a6      	b.n	80064a0 <HAL_TIM_ConfigClockSource+0x166>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2202      	movs	r2, #2
 800635e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006370:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006378:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b40      	cmp	r3, #64	; 0x40
 8006388:	d067      	beq.n	800645a <HAL_TIM_ConfigClockSource+0x120>
 800638a:	2b40      	cmp	r3, #64	; 0x40
 800638c:	d80b      	bhi.n	80063a6 <HAL_TIM_ConfigClockSource+0x6c>
 800638e:	2b10      	cmp	r3, #16
 8006390:	d073      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x140>
 8006392:	2b10      	cmp	r3, #16
 8006394:	d802      	bhi.n	800639c <HAL_TIM_ConfigClockSource+0x62>
 8006396:	2b00      	cmp	r3, #0
 8006398:	d06f      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800639a:	e078      	b.n	800648e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800639c:	2b20      	cmp	r3, #32
 800639e:	d06c      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x140>
 80063a0:	2b30      	cmp	r3, #48	; 0x30
 80063a2:	d06a      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x140>
      break;
 80063a4:	e073      	b.n	800648e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063a6:	2b70      	cmp	r3, #112	; 0x70
 80063a8:	d00d      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x8c>
 80063aa:	2b70      	cmp	r3, #112	; 0x70
 80063ac:	d804      	bhi.n	80063b8 <HAL_TIM_ConfigClockSource+0x7e>
 80063ae:	2b50      	cmp	r3, #80	; 0x50
 80063b0:	d033      	beq.n	800641a <HAL_TIM_ConfigClockSource+0xe0>
 80063b2:	2b60      	cmp	r3, #96	; 0x60
 80063b4:	d041      	beq.n	800643a <HAL_TIM_ConfigClockSource+0x100>
      break;
 80063b6:	e06a      	b.n	800648e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063bc:	d066      	beq.n	800648c <HAL_TIM_ConfigClockSource+0x152>
 80063be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c2:	d017      	beq.n	80063f4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80063c4:	e063      	b.n	800648e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	6899      	ldr	r1, [r3, #8]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	f000 f96e 	bl	80066b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	609a      	str	r2, [r3, #8]
      break;
 80063f2:	e04c      	b.n	800648e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6818      	ldr	r0, [r3, #0]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	6899      	ldr	r1, [r3, #8]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f000 f957 	bl	80066b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006416:	609a      	str	r2, [r3, #8]
      break;
 8006418:	e039      	b.n	800648e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	6859      	ldr	r1, [r3, #4]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	461a      	mov	r2, r3
 8006428:	f000 f8ce 	bl	80065c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2150      	movs	r1, #80	; 0x50
 8006432:	4618      	mov	r0, r3
 8006434:	f000 f925 	bl	8006682 <TIM_ITRx_SetConfig>
      break;
 8006438:	e029      	b.n	800648e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6818      	ldr	r0, [r3, #0]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	6859      	ldr	r1, [r3, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	461a      	mov	r2, r3
 8006448:	f000 f8ec 	bl	8006624 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2160      	movs	r1, #96	; 0x60
 8006452:	4618      	mov	r0, r3
 8006454:	f000 f915 	bl	8006682 <TIM_ITRx_SetConfig>
      break;
 8006458:	e019      	b.n	800648e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	6859      	ldr	r1, [r3, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	461a      	mov	r2, r3
 8006468:	f000 f8ae 	bl	80065c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2140      	movs	r1, #64	; 0x40
 8006472:	4618      	mov	r0, r3
 8006474:	f000 f905 	bl	8006682 <TIM_ITRx_SetConfig>
      break;
 8006478:	e009      	b.n	800648e <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4619      	mov	r1, r3
 8006484:	4610      	mov	r0, r2
 8006486:	f000 f8fc 	bl	8006682 <TIM_ITRx_SetConfig>
        break;
 800648a:	e000      	b.n	800648e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800648c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr

080064ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bc80      	pop	{r7}
 80064ca:	4770      	bx	lr

080064cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	bc80      	pop	{r7}
 80064dc:	4770      	bx	lr

080064de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bc80      	pop	{r7}
 80064ee:	4770      	bx	lr

080064f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr
	...

08006504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a29      	ldr	r2, [pc, #164]	; (80065bc <TIM_Base_SetConfig+0xb8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00b      	beq.n	8006534 <TIM_Base_SetConfig+0x30>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006522:	d007      	beq.n	8006534 <TIM_Base_SetConfig+0x30>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a26      	ldr	r2, [pc, #152]	; (80065c0 <TIM_Base_SetConfig+0xbc>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_Base_SetConfig+0x30>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a25      	ldr	r2, [pc, #148]	; (80065c4 <TIM_Base_SetConfig+0xc0>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d108      	bne.n	8006546 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a1c      	ldr	r2, [pc, #112]	; (80065bc <TIM_Base_SetConfig+0xb8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d00b      	beq.n	8006566 <TIM_Base_SetConfig+0x62>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006554:	d007      	beq.n	8006566 <TIM_Base_SetConfig+0x62>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a19      	ldr	r2, [pc, #100]	; (80065c0 <TIM_Base_SetConfig+0xbc>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d003      	beq.n	8006566 <TIM_Base_SetConfig+0x62>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a18      	ldr	r2, [pc, #96]	; (80065c4 <TIM_Base_SetConfig+0xc0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d108      	bne.n	8006578 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800656c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a07      	ldr	r2, [pc, #28]	; (80065bc <TIM_Base_SetConfig+0xb8>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d103      	bne.n	80065ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	691a      	ldr	r2, [r3, #16]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	615a      	str	r2, [r3, #20]
}
 80065b2:	bf00      	nop
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bc80      	pop	{r7}
 80065ba:	4770      	bx	lr
 80065bc:	40012c00 	.word	0x40012c00
 80065c0:	40000400 	.word	0x40000400
 80065c4:	40000800 	.word	0x40000800

080065c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f023 0201 	bic.w	r2, r3, #1
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f023 030a 	bic.w	r3, r3, #10
 8006604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	4313      	orrs	r3, r2
 800660c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr

08006624 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	f023 0210 	bic.w	r2, r3, #16
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800664e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	031b      	lsls	r3, r3, #12
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006660:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	621a      	str	r2, [r3, #32]
}
 8006678:	bf00      	nop
 800667a:	371c      	adds	r7, #28
 800667c:	46bd      	mov	sp, r7
 800667e:	bc80      	pop	{r7}
 8006680:	4770      	bx	lr

08006682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006682:	b480      	push	{r7}
 8006684:	b085      	sub	sp, #20
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4313      	orrs	r3, r2
 80066a0:	f043 0307 	orr.w	r3, r3, #7
 80066a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	609a      	str	r2, [r3, #8]
}
 80066ac:	bf00      	nop
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bc80      	pop	{r7}
 80066b4:	4770      	bx	lr

080066b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b087      	sub	sp, #28
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	021a      	lsls	r2, r3, #8
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	431a      	orrs	r2, r3
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	4313      	orrs	r3, r2
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	609a      	str	r2, [r3, #8]
}
 80066ea:	bf00      	nop
 80066ec:	371c      	adds	r7, #28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr

080066f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006708:	2302      	movs	r3, #2
 800670a:	e046      	b.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a16      	ldr	r2, [pc, #88]	; (80067a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00e      	beq.n	800676e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006758:	d009      	beq.n	800676e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a12      	ldr	r2, [pc, #72]	; (80067a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d004      	beq.n	800676e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a10      	ldr	r2, [pc, #64]	; (80067ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d10c      	bne.n	8006788 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	4313      	orrs	r3, r2
 800677e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	bc80      	pop	{r7}
 80067a2:	4770      	bx	lr
 80067a4:	40012c00 	.word	0x40012c00
 80067a8:	40000400 	.word	0x40000400
 80067ac:	40000800 	.word	0x40000800

080067b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr

080067c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bc80      	pop	{r7}
 80067d2:	4770      	bx	lr

080067d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80067d4:	b084      	sub	sp, #16
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	f107 0014 	add.w	r0, r7, #20
 80067e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bc80      	pop	{r7}
 80067f0:	b004      	add	sp, #16
 80067f2:	4770      	bx	lr

080067f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006804:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006808:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	b29a      	uxth	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr

08006820 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006828:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800682c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	b29b      	uxth	r3, r3
 800683a:	43db      	mvns	r3, r3
 800683c:	b29b      	uxth	r3, r3
 800683e:	4013      	ands	r3, r2
 8006840:	b29a      	uxth	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	bc80      	pop	{r7}
 8006852:	4770      	bx	lr

08006854 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	bc80      	pop	{r7}
 800686a:	4770      	bx	lr

0800686c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800686c:	b084      	sub	sp, #16
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	f107 0014 	add.w	r0, r7, #20
 800687a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bc80      	pop	{r7}
 80068a8:	b004      	add	sp, #16
 80068aa:	4770      	bx	lr

080068ac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b09b      	sub	sp, #108	; 0x6c
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80068ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	78db      	ldrb	r3, [r3, #3]
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d81f      	bhi.n	800691e <USB_ActivateEndpoint+0x72>
 80068de:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <USB_ActivateEndpoint+0x38>)
 80068e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e4:	080068f5 	.word	0x080068f5
 80068e8:	08006911 	.word	0x08006911
 80068ec:	08006927 	.word	0x08006927
 80068f0:	08006903 	.word	0x08006903
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80068f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80068f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068fc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006900:	e012      	b.n	8006928 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006902:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006906:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800690a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800690e:	e00b      	b.n	8006928 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006910:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006914:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006918:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800691c:	e004      	b.n	8006928 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006924:	e000      	b.n	8006928 <USB_ActivateEndpoint+0x7c>
      break;
 8006926:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	441a      	add	r2, r3
 8006932:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800693a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800693e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006946:	b29b      	uxth	r3, r3
 8006948:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006960:	b29a      	uxth	r2, r3
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	b29b      	uxth	r3, r3
 8006968:	4313      	orrs	r3, r2
 800696a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	441a      	add	r2, r3
 8006978:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800697c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800698c:	b29b      	uxth	r3, r3
 800698e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	7b1b      	ldrb	r3, [r3, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f040 8149 	bne.w	8006c2c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	785b      	ldrb	r3, [r3, #1]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 8084 	beq.w	8006aac <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	461a      	mov	r2, r3
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	4413      	add	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	011a      	lsls	r2, r3, #4
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069c6:	613b      	str	r3, [r7, #16]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	88db      	ldrh	r3, [r3, #6]
 80069cc:	085b      	lsrs	r3, r3, #1
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	81fb      	strh	r3, [r7, #14]
 80069e6:	89fb      	ldrh	r3, [r7, #14]
 80069e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d01b      	beq.n	8006a28 <USB_ActivateEndpoint+0x17c>
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a06:	81bb      	strh	r3, [r7, #12]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	441a      	add	r2, r3
 8006a12:	89bb      	ldrh	r3, [r7, #12]
 8006a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	78db      	ldrb	r3, [r3, #3]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d020      	beq.n	8006a72 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a46:	813b      	strh	r3, [r7, #8]
 8006a48:	893b      	ldrh	r3, [r7, #8]
 8006a4a:	f083 0320 	eor.w	r3, r3, #32
 8006a4e:	813b      	strh	r3, [r7, #8]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	441a      	add	r2, r3
 8006a5a:	893b      	ldrh	r3, [r7, #8]
 8006a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	8013      	strh	r3, [r2, #0]
 8006a70:	e27f      	b.n	8006f72 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a88:	817b      	strh	r3, [r7, #10]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	441a      	add	r2, r3
 8006a94:	897b      	ldrh	r3, [r7, #10]
 8006a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	8013      	strh	r3, [r2, #0]
 8006aaa:	e262      	b.n	8006f72 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	461a      	mov	r2, r3
 8006aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006abc:	4413      	add	r3, r2
 8006abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	011a      	lsls	r2, r3, #4
 8006ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	88db      	ldrh	r3, [r3, #6]
 8006ad4:	085b      	lsrs	r3, r3, #1
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ade:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	461a      	mov	r2, r3
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	4413      	add	r3, r2
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	011a      	lsls	r2, r3, #4
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	4413      	add	r3, r2
 8006afe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b02:	623b      	str	r3, [r7, #32]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d112      	bne.n	8006b32 <USB_ActivateEndpoint+0x286>
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	801a      	strh	r2, [r3, #0]
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
 8006b2e:	801a      	strh	r2, [r3, #0]
 8006b30:	e02f      	b.n	8006b92 <USB_ActivateEndpoint+0x2e6>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b3e      	cmp	r3, #62	; 0x3e
 8006b38:	d813      	bhi.n	8006b62 <USB_ActivateEndpoint+0x2b6>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	085b      	lsrs	r3, r3, #1
 8006b40:	663b      	str	r3, [r7, #96]	; 0x60
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <USB_ActivateEndpoint+0x2a8>
 8006b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b50:	3301      	adds	r3, #1
 8006b52:	663b      	str	r3, [r7, #96]	; 0x60
 8006b54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	029b      	lsls	r3, r3, #10
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	801a      	strh	r2, [r3, #0]
 8006b60:	e017      	b.n	8006b92 <USB_ActivateEndpoint+0x2e6>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	095b      	lsrs	r3, r3, #5
 8006b68:	663b      	str	r3, [r7, #96]	; 0x60
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f003 031f 	and.w	r3, r3, #31
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d102      	bne.n	8006b7c <USB_ActivateEndpoint+0x2d0>
 8006b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	663b      	str	r3, [r7, #96]	; 0x60
 8006b7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	029b      	lsls	r3, r3, #10
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	83fb      	strh	r3, [r7, #30]
 8006ba0:	8bfb      	ldrh	r3, [r7, #30]
 8006ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d01b      	beq.n	8006be2 <USB_ActivateEndpoint+0x336>
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc0:	83bb      	strh	r3, [r7, #28]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	441a      	add	r2, r3
 8006bcc:	8bbb      	ldrh	r3, [r7, #28]
 8006bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf8:	837b      	strh	r3, [r7, #26]
 8006bfa:	8b7b      	ldrh	r3, [r7, #26]
 8006bfc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c00:	837b      	strh	r3, [r7, #26]
 8006c02:	8b7b      	ldrh	r3, [r7, #26]
 8006c04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c08:	837b      	strh	r3, [r7, #26]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	441a      	add	r2, r3
 8006c14:	8b7b      	ldrh	r3, [r7, #26]
 8006c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	8013      	strh	r3, [r2, #0]
 8006c2a:	e1a2      	b.n	8006f72 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c42:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	441a      	add	r2, r3
 8006c50:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c5c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	461a      	mov	r2, r3
 8006c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c78:	4413      	add	r3, r2
 8006c7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	011a      	lsls	r2, r3, #4
 8006c82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	891b      	ldrh	r3, [r3, #8]
 8006c90:	085b      	lsrs	r3, r3, #1
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c9a:	801a      	strh	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	653b      	str	r3, [r7, #80]	; 0x50
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	461a      	mov	r2, r3
 8006caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cac:	4413      	add	r3, r2
 8006cae:	653b      	str	r3, [r7, #80]	; 0x50
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	011a      	lsls	r2, r3, #4
 8006cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	895b      	ldrh	r3, [r3, #10]
 8006cc4:	085b      	lsrs	r3, r3, #1
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cce:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	785b      	ldrb	r3, [r3, #1]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 8091 	bne.w	8006dfc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006ce8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d01b      	beq.n	8006d2a <USB_ActivateEndpoint+0x47e>
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d08:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	441a      	add	r2, r3
 8006d14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	873b      	strh	r3, [r7, #56]	; 0x38
 8006d38:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d01b      	beq.n	8006d7a <USB_ActivateEndpoint+0x4ce>
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d58:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	441a      	add	r2, r3
 8006d64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d90:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006d92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d98:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006d9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006da0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	441a      	add	r2, r3
 8006dac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dd8:	867b      	strh	r3, [r7, #50]	; 0x32
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	441a      	add	r2, r3
 8006de4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	8013      	strh	r3, [r2, #0]
 8006dfa:	e0ba      	b.n	8006f72 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006e0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d01d      	beq.n	8006e54 <USB_ActivateEndpoint+0x5a8>
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	441a      	add	r2, r3
 8006e3c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006e64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01d      	beq.n	8006eac <USB_ActivateEndpoint+0x600>
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	441a      	add	r2, r3
 8006e94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ea4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	78db      	ldrb	r3, [r3, #3]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d024      	beq.n	8006efe <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ed2:	f083 0320 	eor.w	r3, r3, #32
 8006ed6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	441a      	add	r2, r3
 8006ee4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	8013      	strh	r3, [r2, #0]
 8006efc:	e01d      	b.n	8006f3a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f14:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	441a      	add	r2, r3
 8006f22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f50:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	441a      	add	r2, r3
 8006f5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006f5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006f72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	376c      	adds	r7, #108	; 0x6c
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bc80      	pop	{r7}
 8006f7e:	4770      	bx	lr

08006f80 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b08d      	sub	sp, #52	; 0x34
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	7b1b      	ldrb	r3, [r3, #12]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f040 808e 	bne.w	80070b0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	785b      	ldrb	r3, [r3, #1]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d044      	beq.n	8007026 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	81bb      	strh	r3, [r7, #12]
 8006faa:	89bb      	ldrh	r3, [r7, #12]
 8006fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d01b      	beq.n	8006fec <USB_DeactivateEndpoint+0x6c>
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	881b      	ldrh	r3, [r3, #0]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fca:	817b      	strh	r3, [r7, #10]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	441a      	add	r2, r3
 8006fd6:	897b      	ldrh	r3, [r7, #10]
 8006fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007002:	813b      	strh	r3, [r7, #8]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	441a      	add	r2, r3
 800700e:	893b      	ldrh	r3, [r7, #8]
 8007010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800701c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007020:	b29b      	uxth	r3, r3
 8007022:	8013      	strh	r3, [r2, #0]
 8007024:	e192      	b.n	800734c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	827b      	strh	r3, [r7, #18]
 8007034:	8a7b      	ldrh	r3, [r7, #18]
 8007036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d01b      	beq.n	8007076 <USB_DeactivateEndpoint+0xf6>
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	b29b      	uxth	r3, r3
 800704c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007054:	823b      	strh	r3, [r7, #16]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	441a      	add	r2, r3
 8007060:	8a3b      	ldrh	r3, [r7, #16]
 8007062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800706a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800706e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007072:	b29b      	uxth	r3, r3
 8007074:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29b      	uxth	r3, r3
 8007084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708c:	81fb      	strh	r3, [r7, #14]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	441a      	add	r2, r3
 8007098:	89fb      	ldrh	r3, [r7, #14]
 800709a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800709e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	8013      	strh	r3, [r2, #0]
 80070ae:	e14d      	b.n	800734c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	785b      	ldrb	r3, [r3, #1]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f040 80a5 	bne.w	8007204 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	843b      	strh	r3, [r7, #32]
 80070c8:	8c3b      	ldrh	r3, [r7, #32]
 80070ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d01b      	beq.n	800710a <USB_DeactivateEndpoint+0x18a>
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e8:	83fb      	strh	r3, [r7, #30]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	441a      	add	r2, r3
 80070f4:	8bfb      	ldrh	r3, [r7, #30]
 80070f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007106:	b29b      	uxth	r3, r3
 8007108:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	83bb      	strh	r3, [r7, #28]
 8007118:	8bbb      	ldrh	r3, [r7, #28]
 800711a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711e:	2b00      	cmp	r3, #0
 8007120:	d01b      	beq.n	800715a <USB_DeactivateEndpoint+0x1da>
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	b29b      	uxth	r3, r3
 8007130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007138:	837b      	strh	r3, [r7, #26]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	441a      	add	r2, r3
 8007144:	8b7b      	ldrh	r3, [r7, #26]
 8007146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800714a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800714e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007152:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007156:	b29b      	uxth	r3, r3
 8007158:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	b29b      	uxth	r3, r3
 8007168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800716c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007170:	833b      	strh	r3, [r7, #24]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	441a      	add	r2, r3
 800717c:	8b3b      	ldrh	r3, [r7, #24]
 800717e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800718a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800718e:	b29b      	uxth	r3, r3
 8007190:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	b29b      	uxth	r3, r3
 80071a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a8:	82fb      	strh	r3, [r7, #22]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	441a      	add	r2, r3
 80071b4:	8afb      	ldrh	r3, [r7, #22]
 80071b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071e0:	82bb      	strh	r3, [r7, #20]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	441a      	add	r2, r3
 80071ec:	8abb      	ldrh	r3, [r7, #20]
 80071ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071fe:	b29b      	uxth	r3, r3
 8007200:	8013      	strh	r3, [r2, #0]
 8007202:	e0a3      	b.n	800734c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007212:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d01b      	beq.n	8007254 <USB_DeactivateEndpoint+0x2d4>
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	b29b      	uxth	r3, r3
 800722a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800722e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007232:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	441a      	add	r2, r3
 800723e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007248:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800724c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007250:	b29b      	uxth	r3, r3
 8007252:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	881b      	ldrh	r3, [r3, #0]
 8007260:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007262:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007268:	2b00      	cmp	r3, #0
 800726a:	d01b      	beq.n	80072a4 <USB_DeactivateEndpoint+0x324>
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	b29b      	uxth	r3, r3
 800727a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800727e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007282:	853b      	strh	r3, [r7, #40]	; 0x28
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	441a      	add	r2, r3
 800728e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800729c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	441a      	add	r2, r3
 80072c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d8:	b29b      	uxth	r3, r3
 80072da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	441a      	add	r2, r3
 80072fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800730c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007310:	b29b      	uxth	r3, r3
 8007312:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4413      	add	r3, r2
 800731e:	881b      	ldrh	r3, [r3, #0]
 8007320:	b29b      	uxth	r3, r3
 8007322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732a:	847b      	strh	r3, [r7, #34]	; 0x22
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	441a      	add	r2, r3
 8007336:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800733c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007348:	b29b      	uxth	r3, r3
 800734a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3734      	adds	r7, #52	; 0x34
 8007352:	46bd      	mov	sp, r7
 8007354:	bc80      	pop	{r7}
 8007356:	4770      	bx	lr

08007358 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b0c4      	sub	sp, #272	; 0x110
 800735c:	af00      	add	r7, sp, #0
 800735e:	1d3b      	adds	r3, r7, #4
 8007360:	6018      	str	r0, [r3, #0]
 8007362:	463b      	mov	r3, r7
 8007364:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007366:	463b      	mov	r3, r7
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	785b      	ldrb	r3, [r3, #1]
 800736c:	2b01      	cmp	r3, #1
 800736e:	f040 8557 	bne.w	8007e20 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007372:	463b      	mov	r3, r7
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	699a      	ldr	r2, [r3, #24]
 8007378:	463b      	mov	r3, r7
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	429a      	cmp	r2, r3
 8007380:	d905      	bls.n	800738e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007382:	463b      	mov	r3, r7
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800738c:	e004      	b.n	8007398 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800738e:	463b      	mov	r3, r7
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007398:	463b      	mov	r3, r7
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	7b1b      	ldrb	r3, [r3, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d12c      	bne.n	80073fc <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80073a2:	463b      	mov	r3, r7
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6959      	ldr	r1, [r3, #20]
 80073a8:	463b      	mov	r3, r7
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	88da      	ldrh	r2, [r3, #6]
 80073ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	1d38      	adds	r0, r7, #4
 80073b6:	6800      	ldr	r0, [r0, #0]
 80073b8:	f001 fa2c 	bl	8008814 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80073bc:	1d3b      	adds	r3, r7, #4
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	617b      	str	r3, [r7, #20]
 80073c2:	1d3b      	adds	r3, r7, #4
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	461a      	mov	r2, r3
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	4413      	add	r3, r2
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	463b      	mov	r3, r7
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	011a      	lsls	r2, r3, #4
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	4413      	add	r3, r2
 80073e0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80073e4:	f107 0310 	add.w	r3, r7, #16
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	f107 0310 	add.w	r3, r7, #16
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	801a      	strh	r2, [r3, #0]
 80073f8:	f000 bcdd 	b.w	8007db6 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80073fc:	463b      	mov	r3, r7
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	78db      	ldrb	r3, [r3, #3]
 8007402:	2b02      	cmp	r3, #2
 8007404:	f040 8347 	bne.w	8007a96 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007408:	463b      	mov	r3, r7
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6a1a      	ldr	r2, [r3, #32]
 800740e:	463b      	mov	r3, r7
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	429a      	cmp	r2, r3
 8007416:	f240 82eb 	bls.w	80079f0 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800741a:	1d3b      	adds	r3, r7, #4
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	463b      	mov	r3, r7
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b29b      	uxth	r3, r3
 800742c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007434:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8007438:	1d3b      	adds	r3, r7, #4
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	463b      	mov	r3, r7
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	441a      	add	r2, r3
 8007446:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800744a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800744e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007452:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745a:	b29b      	uxth	r3, r3
 800745c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800745e:	463b      	mov	r3, r7
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6a1a      	ldr	r2, [r3, #32]
 8007464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007468:	1ad2      	subs	r2, r2, r3
 800746a:	463b      	mov	r3, r7
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007470:	1d3b      	adds	r3, r7, #4
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	463b      	mov	r3, r7
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	b29b      	uxth	r3, r3
 8007482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007486:	2b00      	cmp	r3, #0
 8007488:	f000 8159 	beq.w	800773e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800748c:	1d3b      	adds	r3, r7, #4
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	637b      	str	r3, [r7, #52]	; 0x34
 8007492:	463b      	mov	r3, r7
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	785b      	ldrb	r3, [r3, #1]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d164      	bne.n	8007566 <USB_EPStartXfer+0x20e>
 800749c:	1d3b      	adds	r3, r7, #4
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074a2:	1d3b      	adds	r3, r7, #4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	461a      	mov	r2, r3
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	4413      	add	r3, r2
 80074b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074b4:	463b      	mov	r3, r7
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	011a      	lsls	r2, r3, #4
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	4413      	add	r3, r2
 80074c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80074c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d112      	bne.n	80074f4 <USB_EPStartXfer+0x19c>
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	881b      	ldrh	r3, [r3, #0]
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074d8:	b29a      	uxth	r2, r3
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	801a      	strh	r2, [r3, #0]
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f0:	801a      	strh	r2, [r3, #0]
 80074f2:	e054      	b.n	800759e <USB_EPStartXfer+0x246>
 80074f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074f8:	2b3e      	cmp	r3, #62	; 0x3e
 80074fa:	d817      	bhi.n	800752c <USB_EPStartXfer+0x1d4>
 80074fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007500:	085b      	lsrs	r3, r3, #1
 8007502:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d004      	beq.n	800751c <USB_EPStartXfer+0x1c4>
 8007512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007516:	3301      	adds	r3, #1
 8007518:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800751c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007520:	b29b      	uxth	r3, r3
 8007522:	029b      	lsls	r3, r3, #10
 8007524:	b29a      	uxth	r2, r3
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	801a      	strh	r2, [r3, #0]
 800752a:	e038      	b.n	800759e <USB_EPStartXfer+0x246>
 800752c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007530:	095b      	lsrs	r3, r3, #5
 8007532:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007536:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800753a:	f003 031f 	and.w	r3, r3, #31
 800753e:	2b00      	cmp	r3, #0
 8007540:	d104      	bne.n	800754c <USB_EPStartXfer+0x1f4>
 8007542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007546:	3b01      	subs	r3, #1
 8007548:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800754c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007550:	b29b      	uxth	r3, r3
 8007552:	029b      	lsls	r3, r3, #10
 8007554:	b29b      	uxth	r3, r3
 8007556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800755a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800755e:	b29a      	uxth	r2, r3
 8007560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007562:	801a      	strh	r2, [r3, #0]
 8007564:	e01b      	b.n	800759e <USB_EPStartXfer+0x246>
 8007566:	463b      	mov	r3, r7
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	785b      	ldrb	r3, [r3, #1]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d116      	bne.n	800759e <USB_EPStartXfer+0x246>
 8007570:	1d3b      	adds	r3, r7, #4
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007578:	b29b      	uxth	r3, r3
 800757a:	461a      	mov	r2, r3
 800757c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757e:	4413      	add	r3, r2
 8007580:	637b      	str	r3, [r7, #52]	; 0x34
 8007582:	463b      	mov	r3, r7
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	011a      	lsls	r2, r3, #4
 800758a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758c:	4413      	add	r3, r2
 800758e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007592:	633b      	str	r3, [r7, #48]	; 0x30
 8007594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007598:	b29a      	uxth	r2, r3
 800759a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800759e:	463b      	mov	r3, r7
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	895b      	ldrh	r3, [r3, #10]
 80075a4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075a8:	463b      	mov	r3, r7
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6959      	ldr	r1, [r3, #20]
 80075ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80075b8:	1d38      	adds	r0, r7, #4
 80075ba:	6800      	ldr	r0, [r0, #0]
 80075bc:	f001 f92a 	bl	8008814 <USB_WritePMA>
            ep->xfer_buff += len;
 80075c0:	463b      	mov	r3, r7
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	695a      	ldr	r2, [r3, #20]
 80075c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075ca:	441a      	add	r2, r3
 80075cc:	463b      	mov	r3, r7
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80075d2:	463b      	mov	r3, r7
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6a1a      	ldr	r2, [r3, #32]
 80075d8:	463b      	mov	r3, r7
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d909      	bls.n	80075f6 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80075e2:	463b      	mov	r3, r7
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6a1a      	ldr	r2, [r3, #32]
 80075e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075ec:	1ad2      	subs	r2, r2, r3
 80075ee:	463b      	mov	r3, r7
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	621a      	str	r2, [r3, #32]
 80075f4:	e008      	b.n	8007608 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80075f6:	463b      	mov	r3, r7
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007600:	463b      	mov	r3, r7
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2200      	movs	r2, #0
 8007606:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007608:	463b      	mov	r3, r7
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	785b      	ldrb	r3, [r3, #1]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d164      	bne.n	80076dc <USB_EPStartXfer+0x384>
 8007612:	1d3b      	adds	r3, r7, #4
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	61fb      	str	r3, [r7, #28]
 8007618:	1d3b      	adds	r3, r7, #4
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007620:	b29b      	uxth	r3, r3
 8007622:	461a      	mov	r2, r3
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	4413      	add	r3, r2
 8007628:	61fb      	str	r3, [r7, #28]
 800762a:	463b      	mov	r3, r7
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	011a      	lsls	r2, r3, #4
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	4413      	add	r3, r2
 8007636:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800763a:	61bb      	str	r3, [r7, #24]
 800763c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007640:	2b00      	cmp	r3, #0
 8007642:	d112      	bne.n	800766a <USB_EPStartXfer+0x312>
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	881b      	ldrh	r3, [r3, #0]
 8007648:	b29b      	uxth	r3, r3
 800764a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800764e:	b29a      	uxth	r2, r3
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	801a      	strh	r2, [r3, #0]
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	b29b      	uxth	r3, r3
 800765a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800765e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007662:	b29a      	uxth	r2, r3
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	801a      	strh	r2, [r3, #0]
 8007668:	e057      	b.n	800771a <USB_EPStartXfer+0x3c2>
 800766a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800766e:	2b3e      	cmp	r3, #62	; 0x3e
 8007670:	d817      	bhi.n	80076a2 <USB_EPStartXfer+0x34a>
 8007672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007676:	085b      	lsrs	r3, r3, #1
 8007678:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800767c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007680:	f003 0301 	and.w	r3, r3, #1
 8007684:	2b00      	cmp	r3, #0
 8007686:	d004      	beq.n	8007692 <USB_EPStartXfer+0x33a>
 8007688:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800768c:	3301      	adds	r3, #1
 800768e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007692:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007696:	b29b      	uxth	r3, r3
 8007698:	029b      	lsls	r3, r3, #10
 800769a:	b29a      	uxth	r2, r3
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	801a      	strh	r2, [r3, #0]
 80076a0:	e03b      	b.n	800771a <USB_EPStartXfer+0x3c2>
 80076a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076a6:	095b      	lsrs	r3, r3, #5
 80076a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076b0:	f003 031f 	and.w	r3, r3, #31
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d104      	bne.n	80076c2 <USB_EPStartXfer+0x36a>
 80076b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076bc:	3b01      	subs	r3, #1
 80076be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	029b      	lsls	r3, r3, #10
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	801a      	strh	r2, [r3, #0]
 80076da:	e01e      	b.n	800771a <USB_EPStartXfer+0x3c2>
 80076dc:	463b      	mov	r3, r7
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	785b      	ldrb	r3, [r3, #1]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d119      	bne.n	800771a <USB_EPStartXfer+0x3c2>
 80076e6:	1d3b      	adds	r3, r7, #4
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	627b      	str	r3, [r7, #36]	; 0x24
 80076ec:	1d3b      	adds	r3, r7, #4
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	461a      	mov	r2, r3
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	4413      	add	r3, r2
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24
 80076fe:	463b      	mov	r3, r7
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	011a      	lsls	r2, r3, #4
 8007706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007708:	4413      	add	r3, r2
 800770a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800770e:	623b      	str	r3, [r7, #32]
 8007710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007714:	b29a      	uxth	r2, r3
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800771a:	463b      	mov	r3, r7
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	891b      	ldrh	r3, [r3, #8]
 8007720:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007724:	463b      	mov	r3, r7
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6959      	ldr	r1, [r3, #20]
 800772a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800772e:	b29b      	uxth	r3, r3
 8007730:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007734:	1d38      	adds	r0, r7, #4
 8007736:	6800      	ldr	r0, [r0, #0]
 8007738:	f001 f86c 	bl	8008814 <USB_WritePMA>
 800773c:	e33b      	b.n	8007db6 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800773e:	463b      	mov	r3, r7
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	785b      	ldrb	r3, [r3, #1]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d164      	bne.n	8007812 <USB_EPStartXfer+0x4ba>
 8007748:	1d3b      	adds	r3, r7, #4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800774e:	1d3b      	adds	r3, r7, #4
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007756:	b29b      	uxth	r3, r3
 8007758:	461a      	mov	r2, r3
 800775a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800775c:	4413      	add	r3, r2
 800775e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007760:	463b      	mov	r3, r7
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	011a      	lsls	r2, r3, #4
 8007768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800776a:	4413      	add	r3, r2
 800776c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007770:	64bb      	str	r3, [r7, #72]	; 0x48
 8007772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d112      	bne.n	80077a0 <USB_EPStartXfer+0x448>
 800777a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	b29b      	uxth	r3, r3
 8007780:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007784:	b29a      	uxth	r2, r3
 8007786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007788:	801a      	strh	r2, [r3, #0]
 800778a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	b29b      	uxth	r3, r3
 8007790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007798:	b29a      	uxth	r2, r3
 800779a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800779c:	801a      	strh	r2, [r3, #0]
 800779e:	e057      	b.n	8007850 <USB_EPStartXfer+0x4f8>
 80077a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077a4:	2b3e      	cmp	r3, #62	; 0x3e
 80077a6:	d817      	bhi.n	80077d8 <USB_EPStartXfer+0x480>
 80077a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077ac:	085b      	lsrs	r3, r3, #1
 80077ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80077b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d004      	beq.n	80077c8 <USB_EPStartXfer+0x470>
 80077be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077c2:	3301      	adds	r3, #1
 80077c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80077c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	029b      	lsls	r3, r3, #10
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077d4:	801a      	strh	r2, [r3, #0]
 80077d6:	e03b      	b.n	8007850 <USB_EPStartXfer+0x4f8>
 80077d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80077e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077e6:	f003 031f 	and.w	r3, r3, #31
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d104      	bne.n	80077f8 <USB_EPStartXfer+0x4a0>
 80077ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077f2:	3b01      	subs	r3, #1
 80077f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80077f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	029b      	lsls	r3, r3, #10
 8007800:	b29b      	uxth	r3, r3
 8007802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800780a:	b29a      	uxth	r2, r3
 800780c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800780e:	801a      	strh	r2, [r3, #0]
 8007810:	e01e      	b.n	8007850 <USB_EPStartXfer+0x4f8>
 8007812:	463b      	mov	r3, r7
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	785b      	ldrb	r3, [r3, #1]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d119      	bne.n	8007850 <USB_EPStartXfer+0x4f8>
 800781c:	1d3b      	adds	r3, r7, #4
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	657b      	str	r3, [r7, #84]	; 0x54
 8007822:	1d3b      	adds	r3, r7, #4
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800782a:	b29b      	uxth	r3, r3
 800782c:	461a      	mov	r2, r3
 800782e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007830:	4413      	add	r3, r2
 8007832:	657b      	str	r3, [r7, #84]	; 0x54
 8007834:	463b      	mov	r3, r7
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	011a      	lsls	r2, r3, #4
 800783c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800783e:	4413      	add	r3, r2
 8007840:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007844:	653b      	str	r3, [r7, #80]	; 0x50
 8007846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800784a:	b29a      	uxth	r2, r3
 800784c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800784e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007850:	463b      	mov	r3, r7
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	891b      	ldrh	r3, [r3, #8]
 8007856:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800785a:	463b      	mov	r3, r7
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6959      	ldr	r1, [r3, #20]
 8007860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007864:	b29b      	uxth	r3, r3
 8007866:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800786a:	1d38      	adds	r0, r7, #4
 800786c:	6800      	ldr	r0, [r0, #0]
 800786e:	f000 ffd1 	bl	8008814 <USB_WritePMA>
            ep->xfer_buff += len;
 8007872:	463b      	mov	r3, r7
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	695a      	ldr	r2, [r3, #20]
 8007878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800787c:	441a      	add	r2, r3
 800787e:	463b      	mov	r3, r7
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007884:	463b      	mov	r3, r7
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6a1a      	ldr	r2, [r3, #32]
 800788a:	463b      	mov	r3, r7
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	429a      	cmp	r2, r3
 8007892:	d909      	bls.n	80078a8 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8007894:	463b      	mov	r3, r7
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6a1a      	ldr	r2, [r3, #32]
 800789a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800789e:	1ad2      	subs	r2, r2, r3
 80078a0:	463b      	mov	r3, r7
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	621a      	str	r2, [r3, #32]
 80078a6:	e008      	b.n	80078ba <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80078a8:	463b      	mov	r3, r7
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80078b2:	463b      	mov	r3, r7
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2200      	movs	r2, #0
 80078b8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80078ba:	1d3b      	adds	r3, r7, #4
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	647b      	str	r3, [r7, #68]	; 0x44
 80078c0:	463b      	mov	r3, r7
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	785b      	ldrb	r3, [r3, #1]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d164      	bne.n	8007994 <USB_EPStartXfer+0x63c>
 80078ca:	1d3b      	adds	r3, r7, #4
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078d0:	1d3b      	adds	r3, r7, #4
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d8:	b29b      	uxth	r3, r3
 80078da:	461a      	mov	r2, r3
 80078dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078de:	4413      	add	r3, r2
 80078e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078e2:	463b      	mov	r3, r7
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	011a      	lsls	r2, r3, #4
 80078ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ec:	4413      	add	r3, r2
 80078ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80078f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d112      	bne.n	8007922 <USB_EPStartXfer+0x5ca>
 80078fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fe:	881b      	ldrh	r3, [r3, #0]
 8007900:	b29b      	uxth	r3, r3
 8007902:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007906:	b29a      	uxth	r2, r3
 8007908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790a:	801a      	strh	r2, [r3, #0]
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	b29b      	uxth	r3, r3
 8007912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800791a:	b29a      	uxth	r2, r3
 800791c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791e:	801a      	strh	r2, [r3, #0]
 8007920:	e054      	b.n	80079cc <USB_EPStartXfer+0x674>
 8007922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007926:	2b3e      	cmp	r3, #62	; 0x3e
 8007928:	d817      	bhi.n	800795a <USB_EPStartXfer+0x602>
 800792a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800792e:	085b      	lsrs	r3, r3, #1
 8007930:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	2b00      	cmp	r3, #0
 800793e:	d004      	beq.n	800794a <USB_EPStartXfer+0x5f2>
 8007940:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007944:	3301      	adds	r3, #1
 8007946:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800794a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800794e:	b29b      	uxth	r3, r3
 8007950:	029b      	lsls	r3, r3, #10
 8007952:	b29a      	uxth	r2, r3
 8007954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007956:	801a      	strh	r2, [r3, #0]
 8007958:	e038      	b.n	80079cc <USB_EPStartXfer+0x674>
 800795a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800795e:	095b      	lsrs	r3, r3, #5
 8007960:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007968:	f003 031f 	and.w	r3, r3, #31
 800796c:	2b00      	cmp	r3, #0
 800796e:	d104      	bne.n	800797a <USB_EPStartXfer+0x622>
 8007970:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007974:	3b01      	subs	r3, #1
 8007976:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800797a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800797e:	b29b      	uxth	r3, r3
 8007980:	029b      	lsls	r3, r3, #10
 8007982:	b29b      	uxth	r3, r3
 8007984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800798c:	b29a      	uxth	r2, r3
 800798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007990:	801a      	strh	r2, [r3, #0]
 8007992:	e01b      	b.n	80079cc <USB_EPStartXfer+0x674>
 8007994:	463b      	mov	r3, r7
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	785b      	ldrb	r3, [r3, #1]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d116      	bne.n	80079cc <USB_EPStartXfer+0x674>
 800799e:	1d3b      	adds	r3, r7, #4
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	461a      	mov	r2, r3
 80079aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079ac:	4413      	add	r3, r2
 80079ae:	647b      	str	r3, [r7, #68]	; 0x44
 80079b0:	463b      	mov	r3, r7
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	011a      	lsls	r2, r3, #4
 80079b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079ba:	4413      	add	r3, r2
 80079bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079c0:	643b      	str	r3, [r7, #64]	; 0x40
 80079c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80079cc:	463b      	mov	r3, r7
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	895b      	ldrh	r3, [r3, #10]
 80079d2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079d6:	463b      	mov	r3, r7
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6959      	ldr	r1, [r3, #20]
 80079dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80079e6:	1d38      	adds	r0, r7, #4
 80079e8:	6800      	ldr	r0, [r0, #0]
 80079ea:	f000 ff13 	bl	8008814 <USB_WritePMA>
 80079ee:	e1e2      	b.n	8007db6 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80079f0:	463b      	mov	r3, r7
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80079fa:	1d3b      	adds	r3, r7, #4
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	463b      	mov	r3, r7
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a14:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007a18:	1d3b      	adds	r3, r7, #4
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	463b      	mov	r3, r7
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	441a      	add	r2, r3
 8007a26:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a3e:	1d3b      	adds	r3, r7, #4
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	663b      	str	r3, [r7, #96]	; 0x60
 8007a44:	1d3b      	adds	r3, r7, #4
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	461a      	mov	r2, r3
 8007a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a52:	4413      	add	r3, r2
 8007a54:	663b      	str	r3, [r7, #96]	; 0x60
 8007a56:	463b      	mov	r3, r7
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	011a      	lsls	r2, r3, #4
 8007a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a60:	4413      	add	r3, r2
 8007a62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a70:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a72:	463b      	mov	r3, r7
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	891b      	ldrh	r3, [r3, #8]
 8007a78:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a7c:	463b      	mov	r3, r7
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6959      	ldr	r1, [r3, #20]
 8007a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007a8c:	1d38      	adds	r0, r7, #4
 8007a8e:	6800      	ldr	r0, [r0, #0]
 8007a90:	f000 fec0 	bl	8008814 <USB_WritePMA>
 8007a94:	e18f      	b.n	8007db6 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007a96:	1d3b      	adds	r3, r7, #4
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	463b      	mov	r3, r7
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	881b      	ldrh	r3, [r3, #0]
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 808f 	beq.w	8007bd0 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ab2:	1d3b      	adds	r3, r7, #4
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ab8:	463b      	mov	r3, r7
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	785b      	ldrb	r3, [r3, #1]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d164      	bne.n	8007b8c <USB_EPStartXfer+0x834>
 8007ac2:	1d3b      	adds	r3, r7, #4
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	673b      	str	r3, [r7, #112]	; 0x70
 8007ac8:	1d3b      	adds	r3, r7, #4
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ad6:	4413      	add	r3, r2
 8007ad8:	673b      	str	r3, [r7, #112]	; 0x70
 8007ada:	463b      	mov	r3, r7
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	011a      	lsls	r2, r3, #4
 8007ae2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007aea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d112      	bne.n	8007b1a <USB_EPStartXfer+0x7c2>
 8007af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b02:	801a      	strh	r2, [r3, #0]
 8007b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b16:	801a      	strh	r2, [r3, #0]
 8007b18:	e054      	b.n	8007bc4 <USB_EPStartXfer+0x86c>
 8007b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b1e:	2b3e      	cmp	r3, #62	; 0x3e
 8007b20:	d817      	bhi.n	8007b52 <USB_EPStartXfer+0x7fa>
 8007b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b26:	085b      	lsrs	r3, r3, #1
 8007b28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d004      	beq.n	8007b42 <USB_EPStartXfer+0x7ea>
 8007b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	029b      	lsls	r3, r3, #10
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b4e:	801a      	strh	r2, [r3, #0]
 8007b50:	e038      	b.n	8007bc4 <USB_EPStartXfer+0x86c>
 8007b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b56:	095b      	lsrs	r3, r3, #5
 8007b58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b60:	f003 031f 	and.w	r3, r3, #31
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d104      	bne.n	8007b72 <USB_EPStartXfer+0x81a>
 8007b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	029b      	lsls	r3, r3, #10
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b88:	801a      	strh	r2, [r3, #0]
 8007b8a:	e01b      	b.n	8007bc4 <USB_EPStartXfer+0x86c>
 8007b8c:	463b      	mov	r3, r7
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	785b      	ldrb	r3, [r3, #1]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d116      	bne.n	8007bc4 <USB_EPStartXfer+0x86c>
 8007b96:	1d3b      	adds	r3, r7, #4
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ba4:	4413      	add	r3, r2
 8007ba6:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ba8:	463b      	mov	r3, r7
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	011a      	lsls	r2, r3, #4
 8007bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bb8:	677b      	str	r3, [r7, #116]	; 0x74
 8007bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bc2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007bc4:	463b      	mov	r3, r7
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	895b      	ldrh	r3, [r3, #10]
 8007bca:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8007bce:	e097      	b.n	8007d00 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bd0:	463b      	mov	r3, r7
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	785b      	ldrb	r3, [r3, #1]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d168      	bne.n	8007cac <USB_EPStartXfer+0x954>
 8007bda:	1d3b      	adds	r3, r7, #4
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007be2:	1d3b      	adds	r3, r7, #4
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	461a      	mov	r2, r3
 8007bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bf8:	463b      	mov	r3, r7
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	011a      	lsls	r2, r3, #4
 8007c00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c04:	4413      	add	r3, r2
 8007c06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d112      	bne.n	8007c3a <USB_EPStartXfer+0x8e2>
 8007c14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c22:	801a      	strh	r2, [r3, #0]
 8007c24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c36:	801a      	strh	r2, [r3, #0]
 8007c38:	e05d      	b.n	8007cf6 <USB_EPStartXfer+0x99e>
 8007c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c3e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c40:	d817      	bhi.n	8007c72 <USB_EPStartXfer+0x91a>
 8007c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c46:	085b      	lsrs	r3, r3, #1
 8007c48:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d004      	beq.n	8007c62 <USB_EPStartXfer+0x90a>
 8007c58:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007c62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	029b      	lsls	r3, r3, #10
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c6e:	801a      	strh	r2, [r3, #0]
 8007c70:	e041      	b.n	8007cf6 <USB_EPStartXfer+0x99e>
 8007c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c76:	095b      	lsrs	r3, r3, #5
 8007c78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c80:	f003 031f 	and.w	r3, r3, #31
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d104      	bne.n	8007c92 <USB_EPStartXfer+0x93a>
 8007c88:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007c92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	029b      	lsls	r3, r3, #10
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ca8:	801a      	strh	r2, [r3, #0]
 8007caa:	e024      	b.n	8007cf6 <USB_EPStartXfer+0x99e>
 8007cac:	463b      	mov	r3, r7
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	785b      	ldrb	r3, [r3, #1]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d11f      	bne.n	8007cf6 <USB_EPStartXfer+0x99e>
 8007cb6:	1d3b      	adds	r3, r7, #4
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007cbe:	1d3b      	adds	r3, r7, #4
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cce:	4413      	add	r3, r2
 8007cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007cd4:	463b      	mov	r3, r7
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	011a      	lsls	r2, r3, #4
 8007cdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cf4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007cf6:	463b      	mov	r3, r7
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	891b      	ldrh	r3, [r3, #8]
 8007cfc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d00:	463b      	mov	r3, r7
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6959      	ldr	r1, [r3, #20]
 8007d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007d10:	1d38      	adds	r0, r7, #4
 8007d12:	6800      	ldr	r0, [r0, #0]
 8007d14:	f000 fd7e 	bl	8008814 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007d18:	463b      	mov	r3, r7
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	785b      	ldrb	r3, [r3, #1]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d122      	bne.n	8007d68 <USB_EPStartXfer+0xa10>
 8007d22:	1d3b      	adds	r3, r7, #4
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	463b      	mov	r3, r7
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d3c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007d40:	1d3b      	adds	r3, r7, #4
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	463b      	mov	r3, r7
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	441a      	add	r2, r3
 8007d4e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	8013      	strh	r3, [r2, #0]
 8007d66:	e026      	b.n	8007db6 <USB_EPStartXfer+0xa5e>
 8007d68:	463b      	mov	r3, r7
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	785b      	ldrb	r3, [r3, #1]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d121      	bne.n	8007db6 <USB_EPStartXfer+0xa5e>
 8007d72:	1d3b      	adds	r3, r7, #4
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	463b      	mov	r3, r7
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d8c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8007d90:	1d3b      	adds	r3, r7, #4
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	463b      	mov	r3, r7
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	441a      	add	r2, r3
 8007d9e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8007da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007daa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007db6:	1d3b      	adds	r3, r7, #4
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	463b      	mov	r3, r7
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	f107 020e 	add.w	r2, r7, #14
 8007dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dd4:	8013      	strh	r3, [r2, #0]
 8007dd6:	f107 030e 	add.w	r3, r7, #14
 8007dda:	f107 020e 	add.w	r2, r7, #14
 8007dde:	8812      	ldrh	r2, [r2, #0]
 8007de0:	f082 0210 	eor.w	r2, r2, #16
 8007de4:	801a      	strh	r2, [r3, #0]
 8007de6:	f107 030e 	add.w	r3, r7, #14
 8007dea:	f107 020e 	add.w	r2, r7, #14
 8007dee:	8812      	ldrh	r2, [r2, #0]
 8007df0:	f082 0220 	eor.w	r2, r2, #32
 8007df4:	801a      	strh	r2, [r3, #0]
 8007df6:	1d3b      	adds	r3, r7, #4
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	463b      	mov	r3, r7
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	441a      	add	r2, r3
 8007e04:	f107 030e 	add.w	r3, r7, #14
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	8013      	strh	r3, [r2, #0]
 8007e1e:	e3b5      	b.n	800858c <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007e20:	463b      	mov	r3, r7
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	7b1b      	ldrb	r3, [r3, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f040 8090 	bne.w	8007f4c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007e2c:	463b      	mov	r3, r7
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	699a      	ldr	r2, [r3, #24]
 8007e32:	463b      	mov	r3, r7
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d90e      	bls.n	8007e5a <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8007e3c:	463b      	mov	r3, r7
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8007e46:	463b      	mov	r3, r7
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	699a      	ldr	r2, [r3, #24]
 8007e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e50:	1ad2      	subs	r2, r2, r3
 8007e52:	463b      	mov	r3, r7
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	619a      	str	r2, [r3, #24]
 8007e58:	e008      	b.n	8007e6c <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8007e64:	463b      	mov	r3, r7
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007e6c:	1d3b      	adds	r3, r7, #4
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e74:	1d3b      	adds	r3, r7, #4
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	461a      	mov	r2, r3
 8007e80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e84:	4413      	add	r3, r2
 8007e86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e8a:	463b      	mov	r3, r7
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	011a      	lsls	r2, r3, #4
 8007e92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e96:	4413      	add	r3, r2
 8007e98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d116      	bne.n	8007ed6 <USB_EPStartXfer+0xb7e>
 8007ea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007eba:	801a      	strh	r2, [r3, #0]
 8007ebc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ed2:	801a      	strh	r2, [r3, #0]
 8007ed4:	e32c      	b.n	8008530 <USB_EPStartXfer+0x11d8>
 8007ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eda:	2b3e      	cmp	r3, #62	; 0x3e
 8007edc:	d818      	bhi.n	8007f10 <USB_EPStartXfer+0xbb8>
 8007ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ee2:	085b      	lsrs	r3, r3, #1
 8007ee4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d004      	beq.n	8007efe <USB_EPStartXfer+0xba6>
 8007ef4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007ef8:	3301      	adds	r3, #1
 8007efa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007efe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	029b      	lsls	r3, r3, #10
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f0c:	801a      	strh	r2, [r3, #0]
 8007f0e:	e30f      	b.n	8008530 <USB_EPStartXfer+0x11d8>
 8007f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f14:	095b      	lsrs	r3, r3, #5
 8007f16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f1e:	f003 031f 	and.w	r3, r3, #31
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d104      	bne.n	8007f30 <USB_EPStartXfer+0xbd8>
 8007f26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	029b      	lsls	r3, r3, #10
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f48:	801a      	strh	r2, [r3, #0]
 8007f4a:	e2f1      	b.n	8008530 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007f4c:	463b      	mov	r3, r7
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	78db      	ldrb	r3, [r3, #3]
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	f040 818f 	bne.w	8008276 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007f58:	463b      	mov	r3, r7
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	785b      	ldrb	r3, [r3, #1]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d175      	bne.n	800804e <USB_EPStartXfer+0xcf6>
 8007f62:	1d3b      	adds	r3, r7, #4
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f6a:	1d3b      	adds	r3, r7, #4
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	461a      	mov	r2, r3
 8007f76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f80:	463b      	mov	r3, r7
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	011a      	lsls	r2, r3, #4
 8007f88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f96:	463b      	mov	r3, r7
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d116      	bne.n	8007fce <USB_EPStartXfer+0xc76>
 8007fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fb2:	801a      	strh	r2, [r3, #0]
 8007fb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fca:	801a      	strh	r2, [r3, #0]
 8007fcc:	e065      	b.n	800809a <USB_EPStartXfer+0xd42>
 8007fce:	463b      	mov	r3, r7
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	2b3e      	cmp	r3, #62	; 0x3e
 8007fd6:	d81a      	bhi.n	800800e <USB_EPStartXfer+0xcb6>
 8007fd8:	463b      	mov	r3, r7
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	085b      	lsrs	r3, r3, #1
 8007fe0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007fe4:	463b      	mov	r3, r7
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d004      	beq.n	8007ffc <USB_EPStartXfer+0xca4>
 8007ff2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ffc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008000:	b29b      	uxth	r3, r3
 8008002:	029b      	lsls	r3, r3, #10
 8008004:	b29a      	uxth	r2, r3
 8008006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800800a:	801a      	strh	r2, [r3, #0]
 800800c:	e045      	b.n	800809a <USB_EPStartXfer+0xd42>
 800800e:	463b      	mov	r3, r7
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	095b      	lsrs	r3, r3, #5
 8008016:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800801a:	463b      	mov	r3, r7
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	f003 031f 	and.w	r3, r3, #31
 8008024:	2b00      	cmp	r3, #0
 8008026:	d104      	bne.n	8008032 <USB_EPStartXfer+0xcda>
 8008028:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800802c:	3b01      	subs	r3, #1
 800802e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008032:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008036:	b29b      	uxth	r3, r3
 8008038:	029b      	lsls	r3, r3, #10
 800803a:	b29b      	uxth	r3, r3
 800803c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008044:	b29a      	uxth	r2, r3
 8008046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800804a:	801a      	strh	r2, [r3, #0]
 800804c:	e025      	b.n	800809a <USB_EPStartXfer+0xd42>
 800804e:	463b      	mov	r3, r7
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	785b      	ldrb	r3, [r3, #1]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d120      	bne.n	800809a <USB_EPStartXfer+0xd42>
 8008058:	1d3b      	adds	r3, r7, #4
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008060:	1d3b      	adds	r3, r7, #4
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008068:	b29b      	uxth	r3, r3
 800806a:	461a      	mov	r2, r3
 800806c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008070:	4413      	add	r3, r2
 8008072:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008076:	463b      	mov	r3, r7
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	011a      	lsls	r2, r3, #4
 800807e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008082:	4413      	add	r3, r2
 8008084:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008088:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800808c:	463b      	mov	r3, r7
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	b29a      	uxth	r2, r3
 8008094:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008098:	801a      	strh	r2, [r3, #0]
 800809a:	1d3b      	adds	r3, r7, #4
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80080a2:	463b      	mov	r3, r7
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	785b      	ldrb	r3, [r3, #1]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d175      	bne.n	8008198 <USB_EPStartXfer+0xe40>
 80080ac:	1d3b      	adds	r3, r7, #4
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80080b4:	1d3b      	adds	r3, r7, #4
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080bc:	b29b      	uxth	r3, r3
 80080be:	461a      	mov	r2, r3
 80080c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080c4:	4413      	add	r3, r2
 80080c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80080ca:	463b      	mov	r3, r7
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	011a      	lsls	r2, r3, #4
 80080d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080d6:	4413      	add	r3, r2
 80080d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80080e0:	463b      	mov	r3, r7
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d116      	bne.n	8008118 <USB_EPStartXfer+0xdc0>
 80080ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080fc:	801a      	strh	r2, [r3, #0]
 80080fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	b29b      	uxth	r3, r3
 8008106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800810a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800810e:	b29a      	uxth	r2, r3
 8008110:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008114:	801a      	strh	r2, [r3, #0]
 8008116:	e061      	b.n	80081dc <USB_EPStartXfer+0xe84>
 8008118:	463b      	mov	r3, r7
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	2b3e      	cmp	r3, #62	; 0x3e
 8008120:	d81a      	bhi.n	8008158 <USB_EPStartXfer+0xe00>
 8008122:	463b      	mov	r3, r7
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	085b      	lsrs	r3, r3, #1
 800812a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800812e:	463b      	mov	r3, r7
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	d004      	beq.n	8008146 <USB_EPStartXfer+0xdee>
 800813c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008140:	3301      	adds	r3, #1
 8008142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800814a:	b29b      	uxth	r3, r3
 800814c:	029b      	lsls	r3, r3, #10
 800814e:	b29a      	uxth	r2, r3
 8008150:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008154:	801a      	strh	r2, [r3, #0]
 8008156:	e041      	b.n	80081dc <USB_EPStartXfer+0xe84>
 8008158:	463b      	mov	r3, r7
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	095b      	lsrs	r3, r3, #5
 8008160:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008164:	463b      	mov	r3, r7
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	f003 031f 	and.w	r3, r3, #31
 800816e:	2b00      	cmp	r3, #0
 8008170:	d104      	bne.n	800817c <USB_EPStartXfer+0xe24>
 8008172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008176:	3b01      	subs	r3, #1
 8008178:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800817c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008180:	b29b      	uxth	r3, r3
 8008182:	029b      	lsls	r3, r3, #10
 8008184:	b29b      	uxth	r3, r3
 8008186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800818a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800818e:	b29a      	uxth	r2, r3
 8008190:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008194:	801a      	strh	r2, [r3, #0]
 8008196:	e021      	b.n	80081dc <USB_EPStartXfer+0xe84>
 8008198:	463b      	mov	r3, r7
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	785b      	ldrb	r3, [r3, #1]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d11c      	bne.n	80081dc <USB_EPStartXfer+0xe84>
 80081a2:	1d3b      	adds	r3, r7, #4
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	461a      	mov	r2, r3
 80081ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80081b2:	4413      	add	r3, r2
 80081b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80081b8:	463b      	mov	r3, r7
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	011a      	lsls	r2, r3, #4
 80081c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80081c4:	4413      	add	r3, r2
 80081c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80081ce:	463b      	mov	r3, r7
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80081da:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80081dc:	463b      	mov	r3, r7
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 81a4 	beq.w	8008530 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80081e8:	1d3b      	adds	r3, r7, #4
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	463b      	mov	r3, r7
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80081fc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d005      	beq.n	8008214 <USB_EPStartXfer+0xebc>
 8008208:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800820c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10d      	bne.n	8008230 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008214:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800821c:	2b00      	cmp	r3, #0
 800821e:	f040 8187 	bne.w	8008530 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008222:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822a:	2b00      	cmp	r3, #0
 800822c:	f040 8180 	bne.w	8008530 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008230:	1d3b      	adds	r3, r7, #4
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	463b      	mov	r3, r7
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	b29b      	uxth	r3, r3
 8008242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800824a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800824e:	1d3b      	adds	r3, r7, #4
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	463b      	mov	r3, r7
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	441a      	add	r2, r3
 800825c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8008260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800826c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008270:	b29b      	uxth	r3, r3
 8008272:	8013      	strh	r3, [r2, #0]
 8008274:	e15c      	b.n	8008530 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008276:	463b      	mov	r3, r7
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	78db      	ldrb	r3, [r3, #3]
 800827c:	2b01      	cmp	r3, #1
 800827e:	f040 8155 	bne.w	800852c <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008282:	463b      	mov	r3, r7
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	699a      	ldr	r2, [r3, #24]
 8008288:	463b      	mov	r3, r7
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	429a      	cmp	r2, r3
 8008290:	d90e      	bls.n	80082b0 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8008292:	463b      	mov	r3, r7
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800829c:	463b      	mov	r3, r7
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	699a      	ldr	r2, [r3, #24]
 80082a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082a6:	1ad2      	subs	r2, r2, r3
 80082a8:	463b      	mov	r3, r7
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	619a      	str	r2, [r3, #24]
 80082ae:	e008      	b.n	80082c2 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80082b0:	463b      	mov	r3, r7
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80082ba:	463b      	mov	r3, r7
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2200      	movs	r2, #0
 80082c0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80082c2:	463b      	mov	r3, r7
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	785b      	ldrb	r3, [r3, #1]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d16f      	bne.n	80083ac <USB_EPStartXfer+0x1054>
 80082cc:	1d3b      	adds	r3, r7, #4
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082d4:	1d3b      	adds	r3, r7, #4
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082dc:	b29b      	uxth	r3, r3
 80082de:	461a      	mov	r2, r3
 80082e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80082e4:	4413      	add	r3, r2
 80082e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082ea:	463b      	mov	r3, r7
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	011a      	lsls	r2, r3, #4
 80082f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80082f6:	4413      	add	r3, r2
 80082f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d116      	bne.n	8008336 <USB_EPStartXfer+0xfde>
 8008308:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	b29b      	uxth	r3, r3
 8008310:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008314:	b29a      	uxth	r2, r3
 8008316:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800831a:	801a      	strh	r2, [r3, #0]
 800831c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008320:	881b      	ldrh	r3, [r3, #0]
 8008322:	b29b      	uxth	r3, r3
 8008324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800832c:	b29a      	uxth	r2, r3
 800832e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008332:	801a      	strh	r2, [r3, #0]
 8008334:	e05f      	b.n	80083f6 <USB_EPStartXfer+0x109e>
 8008336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800833a:	2b3e      	cmp	r3, #62	; 0x3e
 800833c:	d818      	bhi.n	8008370 <USB_EPStartXfer+0x1018>
 800833e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008342:	085b      	lsrs	r3, r3, #1
 8008344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	2b00      	cmp	r3, #0
 8008352:	d004      	beq.n	800835e <USB_EPStartXfer+0x1006>
 8008354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008358:	3301      	adds	r3, #1
 800835a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800835e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008362:	b29b      	uxth	r3, r3
 8008364:	029b      	lsls	r3, r3, #10
 8008366:	b29a      	uxth	r2, r3
 8008368:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800836c:	801a      	strh	r2, [r3, #0]
 800836e:	e042      	b.n	80083f6 <USB_EPStartXfer+0x109e>
 8008370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008374:	095b      	lsrs	r3, r3, #5
 8008376:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800837a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800837e:	f003 031f 	and.w	r3, r3, #31
 8008382:	2b00      	cmp	r3, #0
 8008384:	d104      	bne.n	8008390 <USB_EPStartXfer+0x1038>
 8008386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800838a:	3b01      	subs	r3, #1
 800838c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008394:	b29b      	uxth	r3, r3
 8008396:	029b      	lsls	r3, r3, #10
 8008398:	b29b      	uxth	r3, r3
 800839a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800839e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083a8:	801a      	strh	r2, [r3, #0]
 80083aa:	e024      	b.n	80083f6 <USB_EPStartXfer+0x109e>
 80083ac:	463b      	mov	r3, r7
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	785b      	ldrb	r3, [r3, #1]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d11f      	bne.n	80083f6 <USB_EPStartXfer+0x109e>
 80083b6:	1d3b      	adds	r3, r7, #4
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083be:	1d3b      	adds	r3, r7, #4
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	461a      	mov	r2, r3
 80083ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083ce:	4413      	add	r3, r2
 80083d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083d4:	463b      	mov	r3, r7
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	011a      	lsls	r2, r3, #4
 80083dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083e0:	4413      	add	r3, r2
 80083e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80083ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083f4:	801a      	strh	r2, [r3, #0]
 80083f6:	1d3b      	adds	r3, r7, #4
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083fe:	463b      	mov	r3, r7
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	785b      	ldrb	r3, [r3, #1]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d16f      	bne.n	80084e8 <USB_EPStartXfer+0x1190>
 8008408:	1d3b      	adds	r3, r7, #4
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008410:	1d3b      	adds	r3, r7, #4
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008418:	b29b      	uxth	r3, r3
 800841a:	461a      	mov	r2, r3
 800841c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008420:	4413      	add	r3, r2
 8008422:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008426:	463b      	mov	r3, r7
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	011a      	lsls	r2, r3, #4
 800842e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008432:	4413      	add	r3, r2
 8008434:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008438:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800843c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008440:	2b00      	cmp	r3, #0
 8008442:	d116      	bne.n	8008472 <USB_EPStartXfer+0x111a>
 8008444:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008448:	881b      	ldrh	r3, [r3, #0]
 800844a:	b29b      	uxth	r3, r3
 800844c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008450:	b29a      	uxth	r2, r3
 8008452:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008456:	801a      	strh	r2, [r3, #0]
 8008458:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	b29b      	uxth	r3, r3
 8008460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008468:	b29a      	uxth	r2, r3
 800846a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800846e:	801a      	strh	r2, [r3, #0]
 8008470:	e05e      	b.n	8008530 <USB_EPStartXfer+0x11d8>
 8008472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008476:	2b3e      	cmp	r3, #62	; 0x3e
 8008478:	d818      	bhi.n	80084ac <USB_EPStartXfer+0x1154>
 800847a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800847e:	085b      	lsrs	r3, r3, #1
 8008480:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	d004      	beq.n	800849a <USB_EPStartXfer+0x1142>
 8008490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008494:	3301      	adds	r3, #1
 8008496:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800849a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800849e:	b29b      	uxth	r3, r3
 80084a0:	029b      	lsls	r3, r3, #10
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80084a8:	801a      	strh	r2, [r3, #0]
 80084aa:	e041      	b.n	8008530 <USB_EPStartXfer+0x11d8>
 80084ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084b0:	095b      	lsrs	r3, r3, #5
 80084b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80084b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084ba:	f003 031f 	and.w	r3, r3, #31
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d104      	bne.n	80084cc <USB_EPStartXfer+0x1174>
 80084c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084c6:	3b01      	subs	r3, #1
 80084c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80084cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	029b      	lsls	r3, r3, #10
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084de:	b29a      	uxth	r2, r3
 80084e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80084e4:	801a      	strh	r2, [r3, #0]
 80084e6:	e023      	b.n	8008530 <USB_EPStartXfer+0x11d8>
 80084e8:	463b      	mov	r3, r7
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	785b      	ldrb	r3, [r3, #1]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d11e      	bne.n	8008530 <USB_EPStartXfer+0x11d8>
 80084f2:	1d3b      	adds	r3, r7, #4
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	461a      	mov	r2, r3
 80084fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008502:	4413      	add	r3, r2
 8008504:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008508:	463b      	mov	r3, r7
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	011a      	lsls	r2, r3, #4
 8008510:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008514:	4413      	add	r3, r2
 8008516:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800851a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800851e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008522:	b29a      	uxth	r2, r3
 8008524:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008528:	801a      	strh	r2, [r3, #0]
 800852a:	e001      	b.n	8008530 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e02e      	b.n	800858e <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008530:	1d3b      	adds	r3, r7, #4
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	463b      	mov	r3, r7
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	881b      	ldrh	r3, [r3, #0]
 8008540:	b29b      	uxth	r3, r3
 8008542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800854a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800854e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008552:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008556:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800855a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800855e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008562:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008566:	1d3b      	adds	r3, r7, #4
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	463b      	mov	r3, r7
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	441a      	add	r2, r3
 8008574:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800857c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008588:	b29b      	uxth	r3, r3
 800858a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	785b      	ldrb	r3, [r3, #1]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d020      	beq.n	80085ec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085c0:	81bb      	strh	r3, [r7, #12]
 80085c2:	89bb      	ldrh	r3, [r7, #12]
 80085c4:	f083 0310 	eor.w	r3, r3, #16
 80085c8:	81bb      	strh	r3, [r7, #12]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	441a      	add	r2, r3
 80085d4:	89bb      	ldrh	r3, [r7, #12]
 80085d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	8013      	strh	r3, [r2, #0]
 80085ea:	e01f      	b.n	800862c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	881b      	ldrh	r3, [r3, #0]
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008602:	81fb      	strh	r3, [r7, #14]
 8008604:	89fb      	ldrh	r3, [r7, #14]
 8008606:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800860a:	81fb      	strh	r3, [r7, #14]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	441a      	add	r2, r3
 8008616:	89fb      	ldrh	r3, [r7, #14]
 8008618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800861c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008628:	b29b      	uxth	r3, r3
 800862a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	bc80      	pop	{r7}
 8008636:	4770      	bx	lr

08008638 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	7b1b      	ldrb	r3, [r3, #12]
 8008646:	2b00      	cmp	r3, #0
 8008648:	f040 809d 	bne.w	8008786 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	785b      	ldrb	r3, [r3, #1]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d04c      	beq.n	80086ee <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	823b      	strh	r3, [r7, #16]
 8008662:	8a3b      	ldrh	r3, [r7, #16]
 8008664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008668:	2b00      	cmp	r3, #0
 800866a:	d01b      	beq.n	80086a4 <USB_EPClearStall+0x6c>
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	b29b      	uxth	r3, r3
 800867a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800867e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008682:	81fb      	strh	r3, [r7, #14]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	441a      	add	r2, r3
 800868e:	89fb      	ldrh	r3, [r7, #14]
 8008690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800869c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	78db      	ldrb	r3, [r3, #3]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d06c      	beq.n	8008786 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086c2:	81bb      	strh	r3, [r7, #12]
 80086c4:	89bb      	ldrh	r3, [r7, #12]
 80086c6:	f083 0320 	eor.w	r3, r3, #32
 80086ca:	81bb      	strh	r3, [r7, #12]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	441a      	add	r2, r3
 80086d6:	89bb      	ldrh	r3, [r7, #12]
 80086d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	8013      	strh	r3, [r2, #0]
 80086ec:	e04b      	b.n	8008786 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	82fb      	strh	r3, [r7, #22]
 80086fc:	8afb      	ldrh	r3, [r7, #22]
 80086fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d01b      	beq.n	800873e <USB_EPClearStall+0x106>
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	b29b      	uxth	r3, r3
 8008714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800871c:	82bb      	strh	r3, [r7, #20]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	441a      	add	r2, r3
 8008728:	8abb      	ldrh	r3, [r7, #20]
 800872a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800872e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008732:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800873a:	b29b      	uxth	r3, r3
 800873c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	b29b      	uxth	r3, r3
 800874c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008754:	827b      	strh	r3, [r7, #18]
 8008756:	8a7b      	ldrh	r3, [r7, #18]
 8008758:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800875c:	827b      	strh	r3, [r7, #18]
 800875e:	8a7b      	ldrh	r3, [r7, #18]
 8008760:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008764:	827b      	strh	r3, [r7, #18]
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	441a      	add	r2, r3
 8008770:	8a7b      	ldrh	r3, [r7, #18]
 8008772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800877a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800877e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008782:	b29b      	uxth	r3, r3
 8008784:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	371c      	adds	r7, #28
 800878c:	46bd      	mov	sp, r7
 800878e:	bc80      	pop	{r7}
 8008790:	4770      	bx	lr

08008792 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008792:	b480      	push	{r7}
 8008794:	b083      	sub	sp, #12
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	460b      	mov	r3, r1
 800879c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800879e:	78fb      	ldrb	r3, [r7, #3]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d103      	bne.n	80087ac <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2280      	movs	r2, #128	; 0x80
 80087a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bc80      	pop	{r7}
 80087b6:	4770      	bx	lr

080087b8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bc80      	pop	{r7}
 80087ca:	4770      	bx	lr

080087cc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	bc80      	pop	{r7}
 80087de:	4770      	bx	lr

080087e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80087f2:	68fb      	ldr	r3, [r7, #12]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bc80      	pop	{r7}
 80087fc:	4770      	bx	lr

080087fe <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80087fe:	b480      	push	{r7}
 8008800:	b083      	sub	sp, #12
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	bc80      	pop	{r7}
 8008812:	4770      	bx	lr

08008814 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008814:	b480      	push	{r7}
 8008816:	b08d      	sub	sp, #52	; 0x34
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	4611      	mov	r1, r2
 8008820:	461a      	mov	r2, r3
 8008822:	460b      	mov	r3, r1
 8008824:	80fb      	strh	r3, [r7, #6]
 8008826:	4613      	mov	r3, r2
 8008828:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800882a:	88bb      	ldrh	r3, [r7, #4]
 800882c:	3301      	adds	r3, #1
 800882e:	085b      	lsrs	r3, r3, #1
 8008830:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800883a:	88fb      	ldrh	r3, [r7, #6]
 800883c:	005a      	lsls	r2, r3, #1
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	4413      	add	r3, r2
 8008842:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008846:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800884c:	e01e      	b.n	800888c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	3301      	adds	r3, #1
 8008858:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	b29b      	uxth	r3, r3
 8008860:	021b      	lsls	r3, r3, #8
 8008862:	b29b      	uxth	r3, r3
 8008864:	461a      	mov	r2, r3
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	4313      	orrs	r3, r2
 800886a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	b29a      	uxth	r2, r3
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	3302      	adds	r3, #2
 8008878:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	3302      	adds	r3, #2
 800887e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	3301      	adds	r3, #1
 8008884:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008888:	3b01      	subs	r3, #1
 800888a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800888c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1dd      	bne.n	800884e <USB_WritePMA+0x3a>
  }
}
 8008892:	bf00      	nop
 8008894:	3734      	adds	r7, #52	; 0x34
 8008896:	46bd      	mov	sp, r7
 8008898:	bc80      	pop	{r7}
 800889a:	4770      	bx	lr

0800889c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800889c:	b480      	push	{r7}
 800889e:	b08b      	sub	sp, #44	; 0x2c
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	4611      	mov	r1, r2
 80088a8:	461a      	mov	r2, r3
 80088aa:	460b      	mov	r3, r1
 80088ac:	80fb      	strh	r3, [r7, #6]
 80088ae:	4613      	mov	r3, r2
 80088b0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80088b2:	88bb      	ldrh	r3, [r7, #4]
 80088b4:	085b      	lsrs	r3, r3, #1
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80088c2:	88fb      	ldrh	r3, [r7, #6]
 80088c4:	005a      	lsls	r2, r3, #1
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	4413      	add	r3, r2
 80088ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088ce:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
 80088d4:	e01b      	b.n	800890e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	881b      	ldrh	r3, [r3, #0]
 80088da:	b29b      	uxth	r3, r3
 80088dc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80088de:	6a3b      	ldr	r3, [r7, #32]
 80088e0:	3302      	adds	r3, #2
 80088e2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	b2da      	uxtb	r2, r3
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	3301      	adds	r3, #1
 80088f0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	0a1b      	lsrs	r3, r3, #8
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	3301      	adds	r3, #1
 8008900:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008902:	6a3b      	ldr	r3, [r7, #32]
 8008904:	3302      	adds	r3, #2
 8008906:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	3b01      	subs	r3, #1
 800890c:	627b      	str	r3, [r7, #36]	; 0x24
 800890e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e0      	bne.n	80088d6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008914:	88bb      	ldrh	r3, [r7, #4]
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	b29b      	uxth	r3, r3
 800891c:	2b00      	cmp	r3, #0
 800891e:	d007      	beq.n	8008930 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	881b      	ldrh	r3, [r3, #0]
 8008924:	b29b      	uxth	r3, r3
 8008926:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	b2da      	uxtb	r2, r3
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	701a      	strb	r2, [r3, #0]
  }
}
 8008930:	bf00      	nop
 8008932:	372c      	adds	r7, #44	; 0x2c
 8008934:	46bd      	mov	sp, r7
 8008936:	bc80      	pop	{r7}
 8008938:	4770      	bx	lr

0800893a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b084      	sub	sp, #16
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	460b      	mov	r3, r1
 8008944:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	7c1b      	ldrb	r3, [r3, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d115      	bne.n	800897e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008956:	2202      	movs	r2, #2
 8008958:	2181      	movs	r1, #129	; 0x81
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f001 fe1f 	bl	800a59e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008966:	f44f 7300 	mov.w	r3, #512	; 0x200
 800896a:	2202      	movs	r2, #2
 800896c:	2101      	movs	r1, #1
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 fe15 	bl	800a59e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800897c:	e012      	b.n	80089a4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800897e:	2340      	movs	r3, #64	; 0x40
 8008980:	2202      	movs	r2, #2
 8008982:	2181      	movs	r1, #129	; 0x81
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 fe0a 	bl	800a59e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008990:	2340      	movs	r3, #64	; 0x40
 8008992:	2202      	movs	r2, #2
 8008994:	2101      	movs	r1, #1
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f001 fe01 	bl	800a59e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80089a4:	2308      	movs	r3, #8
 80089a6:	2203      	movs	r2, #3
 80089a8:	2182      	movs	r1, #130	; 0x82
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 fdf7 	bl	800a59e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80089b6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80089ba:	f001 ff17 	bl	800a7ec <USBD_static_malloc>
 80089be:	4602      	mov	r2, r0
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d102      	bne.n	80089d6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80089d0:	2301      	movs	r3, #1
 80089d2:	73fb      	strb	r3, [r7, #15]
 80089d4:	e026      	b.n	8008a24 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089dc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	7c1b      	ldrb	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d109      	bne.n	8008a14 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a0a:	2101      	movs	r1, #1
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f001 feb7 	bl	800a780 <USBD_LL_PrepareReceive>
 8008a12:	e007      	b.n	8008a24 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a1a:	2340      	movs	r3, #64	; 0x40
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f001 feae 	bl	800a780 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b084      	sub	sp, #16
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	460b      	mov	r3, r1
 8008a38:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008a3e:	2181      	movs	r1, #129	; 0x81
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f001 fdd2 	bl	800a5ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f001 fdcb 	bl	800a5ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008a5c:	2182      	movs	r1, #130	; 0x82
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f001 fdc3 	bl	800a5ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00e      	beq.n	8008a92 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a84:	4618      	mov	r0, r3
 8008a86:	f001 febd 	bl	800a804 <USBD_static_free>
    pdev->pClassData = NULL;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aac:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d039      	beq.n	8008b3a <USBD_CDC_Setup+0x9e>
 8008ac6:	2b20      	cmp	r3, #32
 8008ac8:	d17c      	bne.n	8008bc4 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	88db      	ldrh	r3, [r3, #6]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d029      	beq.n	8008b26 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	b25b      	sxtb	r3, r3
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	da11      	bge.n	8008b00 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008ae8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	88d2      	ldrh	r2, [r2, #6]
 8008aee:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008af0:	6939      	ldr	r1, [r7, #16]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	88db      	ldrh	r3, [r3, #6]
 8008af6:	461a      	mov	r2, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f001 f9c9 	bl	8009e90 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008afe:	e068      	b.n	8008bd2 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	785a      	ldrb	r2, [r3, #1]
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	88db      	ldrh	r3, [r3, #6]
 8008b0e:	b2da      	uxtb	r2, r3
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b16:	6939      	ldr	r1, [r7, #16]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	88db      	ldrh	r3, [r3, #6]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f001 f9e4 	bl	8009eec <USBD_CtlPrepareRx>
      break;
 8008b24:	e055      	b.n	8008bd2 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	7850      	ldrb	r0, [r2, #1]
 8008b32:	2200      	movs	r2, #0
 8008b34:	6839      	ldr	r1, [r7, #0]
 8008b36:	4798      	blx	r3
      break;
 8008b38:	e04b      	b.n	8008bd2 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	785b      	ldrb	r3, [r3, #1]
 8008b3e:	2b0a      	cmp	r3, #10
 8008b40:	d017      	beq.n	8008b72 <USBD_CDC_Setup+0xd6>
 8008b42:	2b0b      	cmp	r3, #11
 8008b44:	d029      	beq.n	8008b9a <USBD_CDC_Setup+0xfe>
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d133      	bne.n	8008bb2 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b50:	2b03      	cmp	r3, #3
 8008b52:	d107      	bne.n	8008b64 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008b54:	f107 030c 	add.w	r3, r7, #12
 8008b58:	2202      	movs	r2, #2
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f001 f997 	bl	8009e90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b62:	e02e      	b.n	8008bc2 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f001 f928 	bl	8009dbc <USBD_CtlError>
            ret = USBD_FAIL;
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	75fb      	strb	r3, [r7, #23]
          break;
 8008b70:	e027      	b.n	8008bc2 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d107      	bne.n	8008b8c <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b7c:	f107 030f 	add.w	r3, r7, #15
 8008b80:	2201      	movs	r2, #1
 8008b82:	4619      	mov	r1, r3
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f001 f983 	bl	8009e90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b8a:	e01a      	b.n	8008bc2 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f001 f914 	bl	8009dbc <USBD_CtlError>
            ret = USBD_FAIL;
 8008b94:	2302      	movs	r3, #2
 8008b96:	75fb      	strb	r3, [r7, #23]
          break;
 8008b98:	e013      	b.n	8008bc2 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba0:	2b03      	cmp	r3, #3
 8008ba2:	d00d      	beq.n	8008bc0 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f001 f908 	bl	8009dbc <USBD_CtlError>
            ret = USBD_FAIL;
 8008bac:	2302      	movs	r3, #2
 8008bae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008bb0:	e006      	b.n	8008bc0 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f001 f901 	bl	8009dbc <USBD_CtlError>
          ret = USBD_FAIL;
 8008bba:	2302      	movs	r3, #2
 8008bbc:	75fb      	strb	r3, [r7, #23]
          break;
 8008bbe:	e000      	b.n	8008bc2 <USBD_CDC_Setup+0x126>
          break;
 8008bc0:	bf00      	nop
      }
      break;
 8008bc2:	e006      	b.n	8008bd2 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f001 f8f8 	bl	8009dbc <USBD_CtlError>
      ret = USBD_FAIL;
 8008bcc:	2302      	movs	r3, #2
 8008bce:	75fb      	strb	r3, [r7, #23]
      break;
 8008bd0:	bf00      	nop
  }

  return ret;
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3718      	adds	r7, #24
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	460b      	mov	r3, r1
 8008be6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bee:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bf6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d03a      	beq.n	8008c78 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008c02:	78fa      	ldrb	r2, [r7, #3]
 8008c04:	6879      	ldr	r1, [r7, #4]
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	440b      	add	r3, r1
 8008c10:	331c      	adds	r3, #28
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d029      	beq.n	8008c6c <USBD_CDC_DataIn+0x90>
 8008c18:	78fa      	ldrb	r2, [r7, #3]
 8008c1a:	6879      	ldr	r1, [r7, #4]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	440b      	add	r3, r1
 8008c26:	331c      	adds	r3, #28
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	78f9      	ldrb	r1, [r7, #3]
 8008c2c:	68b8      	ldr	r0, [r7, #8]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	440b      	add	r3, r1
 8008c34:	00db      	lsls	r3, r3, #3
 8008c36:	4403      	add	r3, r0
 8008c38:	3338      	adds	r3, #56	; 0x38
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c40:	fb03 f301 	mul.w	r3, r3, r1
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d110      	bne.n	8008c6c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	6879      	ldr	r1, [r7, #4]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	440b      	add	r3, r1
 8008c58:	331c      	adds	r3, #28
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c5e:	78f9      	ldrb	r1, [r7, #3]
 8008c60:	2300      	movs	r3, #0
 8008c62:	2200      	movs	r2, #0
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 fd68 	bl	800a73a <USBD_LL_Transmit>
 8008c6a:	e003      	b.n	8008c74 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	e000      	b.n	8008c7a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008c78:	2302      	movs	r3, #2
  }
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c94:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c96:	78fb      	ldrb	r3, [r7, #3]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f001 fd93 	bl	800a7c6 <USBD_LL_GetRxDataSize>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00d      	beq.n	8008cce <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	4798      	blx	r3

    return USBD_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	e000      	b.n	8008cd0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008cce:	2302      	movs	r3, #2
  }
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d015      	beq.n	8008d1e <USBD_CDC_EP0_RxReady+0x46>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008cf8:	2bff      	cmp	r3, #255	; 0xff
 8008cfa:	d010      	beq.n	8008d1e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008d0a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d12:	b292      	uxth	r2, r2
 8008d14:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	22ff      	movs	r2, #255	; 0xff
 8008d1a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2243      	movs	r2, #67	; 0x43
 8008d34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008d36:	4b03      	ldr	r3, [pc, #12]	; (8008d44 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bc80      	pop	{r7}
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	200000ac 	.word	0x200000ac

08008d48 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2243      	movs	r2, #67	; 0x43
 8008d54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008d56:	4b03      	ldr	r3, [pc, #12]	; (8008d64 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bc80      	pop	{r7}
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	20000068 	.word	0x20000068

08008d68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2243      	movs	r2, #67	; 0x43
 8008d74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008d76:	4b03      	ldr	r3, [pc, #12]	; (8008d84 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bc80      	pop	{r7}
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	200000f0 	.word	0x200000f0

08008d88 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	220a      	movs	r2, #10
 8008d94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008d96:	4b03      	ldr	r3, [pc, #12]	; (8008da4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bc80      	pop	{r7}
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	20000024 	.word	0x20000024

08008da8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008db2:	2302      	movs	r3, #2
 8008db4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d005      	beq.n	8008dc8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3714      	adds	r7, #20
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bc80      	pop	{r7}
 8008dd2:	4770      	bx	lr

08008dd4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b087      	sub	sp, #28
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	4613      	mov	r3, r2
 8008de0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008de8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008df2:	88fa      	ldrh	r2, [r7, #6]
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	371c      	adds	r7, #28
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bc80      	pop	{r7}
 8008e04:	4770      	bx	lr

08008e06 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b085      	sub	sp, #20
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e16:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bc80      	pop	{r7}
 8008e2a:	4770      	bx	lr

08008e2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d017      	beq.n	8008e76 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	7c1b      	ldrb	r3, [r3, #16]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d109      	bne.n	8008e62 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e58:	2101      	movs	r1, #1
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 fc90 	bl	800a780 <USBD_LL_PrepareReceive>
 8008e60:	e007      	b.n	8008e72 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e68:	2340      	movs	r3, #64	; 0x40
 8008e6a:	2101      	movs	r1, #1
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f001 fc87 	bl	800a780 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008e72:	2300      	movs	r3, #0
 8008e74:	e000      	b.n	8008e78 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008e76:	2302      	movs	r3, #2
  }
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d101      	bne.n	8008e98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e94:	2302      	movs	r3, #2
 8008e96:	e01a      	b.n	8008ece <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d003      	beq.n	8008eaa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d003      	beq.n	8008eb8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	79fa      	ldrb	r2, [r7, #7]
 8008ec4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f001 faf4 	bl	800a4b4 <USBD_LL_Init>

  return USBD_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b085      	sub	sp, #20
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d006      	beq.n	8008ef8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	73fb      	strb	r3, [r7, #15]
 8008ef6:	e001      	b.n	8008efc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008ef8:	2302      	movs	r3, #2
 8008efa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bc80      	pop	{r7}
 8008f06:	4770      	bx	lr

08008f08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f001 fb29 	bl	800a568 <USBD_LL_Start>

  return USBD_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	370c      	adds	r7, #12
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bc80      	pop	{r7}
 8008f32:	4770      	bx	lr

08008f34 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008f40:	2302      	movs	r3, #2
 8008f42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00c      	beq.n	8008f68 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	78fa      	ldrb	r2, [r7, #3]
 8008f58:	4611      	mov	r1, r2
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	4798      	blx	r3
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d101      	bne.n	8008f68 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b082      	sub	sp, #8
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	78fa      	ldrb	r2, [r7, #3]
 8008f88:	4611      	mov	r1, r2
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	4798      	blx	r3

  return USBD_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 feca 	bl	8009d44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008fcc:	f003 031f 	and.w	r3, r3, #31
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d00c      	beq.n	8008fee <USBD_LL_SetupStage+0x56>
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d302      	bcc.n	8008fde <USBD_LL_SetupStage+0x46>
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d010      	beq.n	8008ffe <USBD_LL_SetupStage+0x66>
 8008fdc:	e017      	b.n	800900e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f9ca 	bl	8009380 <USBD_StdDevReq>
      break;
 8008fec:	e01a      	b.n	8009024 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fa2c 	bl	8009454 <USBD_StdItfReq>
      break;
 8008ffc:	e012      	b.n	8009024 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009004:	4619      	mov	r1, r3
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fa6a 	bl	80094e0 <USBD_StdEPReq>
      break;
 800900c:	e00a      	b.n	8009024 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009014:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009018:	b2db      	uxtb	r3, r3
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f001 fb03 	bl	800a628 <USBD_LL_StallEP>
      break;
 8009022:	bf00      	nop
  }

  return USBD_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b086      	sub	sp, #24
 8009032:	af00      	add	r7, sp, #0
 8009034:	60f8      	str	r0, [r7, #12]
 8009036:	460b      	mov	r3, r1
 8009038:	607a      	str	r2, [r7, #4]
 800903a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800903c:	7afb      	ldrb	r3, [r7, #11]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d14b      	bne.n	80090da <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009048:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009050:	2b03      	cmp	r3, #3
 8009052:	d134      	bne.n	80090be <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	68da      	ldr	r2, [r3, #12]
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	429a      	cmp	r2, r3
 800905e:	d919      	bls.n	8009094 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	1ad2      	subs	r2, r2, r3
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	68da      	ldr	r2, [r3, #12]
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009076:	429a      	cmp	r2, r3
 8009078:	d203      	bcs.n	8009082 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800907e:	b29b      	uxth	r3, r3
 8009080:	e002      	b.n	8009088 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009086:	b29b      	uxth	r3, r3
 8009088:	461a      	mov	r2, r3
 800908a:	6879      	ldr	r1, [r7, #4]
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f000 ff4b 	bl	8009f28 <USBD_CtlContinueRx>
 8009092:	e038      	b.n	8009106 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00a      	beq.n	80090b6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d105      	bne.n	80090b6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f000 ff48 	bl	8009f4c <USBD_CtlSendStatus>
 80090bc:	e023      	b.n	8009106 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090c4:	2b05      	cmp	r3, #5
 80090c6:	d11e      	bne.n	8009106 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80090d0:	2100      	movs	r1, #0
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f001 faa8 	bl	800a628 <USBD_LL_StallEP>
 80090d8:	e015      	b.n	8009106 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00d      	beq.n	8009102 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	d108      	bne.n	8009102 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	7afa      	ldrb	r2, [r7, #11]
 80090fa:	4611      	mov	r1, r2
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	4798      	blx	r3
 8009100:	e001      	b.n	8009106 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009102:	2302      	movs	r3, #2
 8009104:	e000      	b.n	8009108 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	460b      	mov	r3, r1
 800911a:	607a      	str	r2, [r7, #4]
 800911c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800911e:	7afb      	ldrb	r3, [r7, #11]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d17f      	bne.n	8009224 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	3314      	adds	r3, #20
 8009128:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009130:	2b02      	cmp	r3, #2
 8009132:	d15c      	bne.n	80091ee <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	68da      	ldr	r2, [r3, #12]
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	429a      	cmp	r2, r3
 800913e:	d915      	bls.n	800916c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	68da      	ldr	r2, [r3, #12]
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	1ad2      	subs	r2, r2, r3
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	b29b      	uxth	r3, r3
 8009154:	461a      	mov	r2, r3
 8009156:	6879      	ldr	r1, [r7, #4]
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 feb5 	bl	8009ec8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800915e:	2300      	movs	r3, #0
 8009160:	2200      	movs	r2, #0
 8009162:	2100      	movs	r1, #0
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f001 fb0b 	bl	800a780 <USBD_LL_PrepareReceive>
 800916a:	e04e      	b.n	800920a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	697a      	ldr	r2, [r7, #20]
 8009172:	6912      	ldr	r2, [r2, #16]
 8009174:	fbb3 f1f2 	udiv	r1, r3, r2
 8009178:	fb02 f201 	mul.w	r2, r2, r1
 800917c:	1a9b      	subs	r3, r3, r2
 800917e:	2b00      	cmp	r3, #0
 8009180:	d11c      	bne.n	80091bc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	689a      	ldr	r2, [r3, #8]
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800918a:	429a      	cmp	r2, r3
 800918c:	d316      	bcc.n	80091bc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	689a      	ldr	r2, [r3, #8]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009198:	429a      	cmp	r2, r3
 800919a:	d20f      	bcs.n	80091bc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800919c:	2200      	movs	r2, #0
 800919e:	2100      	movs	r1, #0
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f000 fe91 	bl	8009ec8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091ae:	2300      	movs	r3, #0
 80091b0:	2200      	movs	r2, #0
 80091b2:	2100      	movs	r1, #0
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f001 fae3 	bl	800a780 <USBD_LL_PrepareReceive>
 80091ba:	e026      	b.n	800920a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00a      	beq.n	80091de <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	d105      	bne.n	80091de <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80091de:	2180      	movs	r1, #128	; 0x80
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f001 fa21 	bl	800a628 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f000 fec3 	bl	8009f72 <USBD_CtlReceiveStatus>
 80091ec:	e00d      	b.n	800920a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091f4:	2b04      	cmp	r3, #4
 80091f6:	d004      	beq.n	8009202 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d103      	bne.n	800920a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009202:	2180      	movs	r1, #128	; 0x80
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	f001 fa0f 	bl	800a628 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009210:	2b01      	cmp	r3, #1
 8009212:	d11d      	bne.n	8009250 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f7ff fe83 	bl	8008f20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009222:	e015      	b.n	8009250 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00d      	beq.n	800924c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009236:	2b03      	cmp	r3, #3
 8009238:	d108      	bne.n	800924c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	7afa      	ldrb	r2, [r7, #11]
 8009244:	4611      	mov	r1, r2
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	4798      	blx	r3
 800924a:	e001      	b.n	8009250 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800924c:	2302      	movs	r3, #2
 800924e:	e000      	b.n	8009252 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b082      	sub	sp, #8
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009262:	2340      	movs	r3, #64	; 0x40
 8009264:	2200      	movs	r2, #0
 8009266:	2100      	movs	r1, #0
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f001 f998 	bl	800a59e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2240      	movs	r2, #64	; 0x40
 800927a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800927e:	2340      	movs	r3, #64	; 0x40
 8009280:	2200      	movs	r2, #0
 8009282:	2180      	movs	r1, #128	; 0x80
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f001 f98a 	bl	800a59e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2240      	movs	r2, #64	; 0x40
 8009294:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2201      	movs	r2, #1
 800929a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d009      	beq.n	80092d2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	6852      	ldr	r2, [r2, #4]
 80092ca:	b2d2      	uxtb	r2, r2
 80092cc:	4611      	mov	r1, r2
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	4798      	blx	r3
  }

  return USBD_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	460b      	mov	r3, r1
 80092e6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	78fa      	ldrb	r2, [r7, #3]
 80092ec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bc80      	pop	{r7}
 80092f8:	4770      	bx	lr

080092fa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80092fa:	b480      	push	{r7}
 80092fc:	b083      	sub	sp, #12
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2204      	movs	r2, #4
 8009312:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	bc80      	pop	{r7}
 8009320:	4770      	bx	lr

08009322 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009322:	b480      	push	{r7}
 8009324:	b083      	sub	sp, #12
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009330:	2b04      	cmp	r3, #4
 8009332:	d105      	bne.n	8009340 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	bc80      	pop	{r7}
 800934a:	4770      	bx	lr

0800934c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800935a:	2b03      	cmp	r3, #3
 800935c:	d10b      	bne.n	8009376 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d005      	beq.n	8009376 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009396:	2b20      	cmp	r3, #32
 8009398:	d004      	beq.n	80093a4 <USBD_StdDevReq+0x24>
 800939a:	2b40      	cmp	r3, #64	; 0x40
 800939c:	d002      	beq.n	80093a4 <USBD_StdDevReq+0x24>
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d008      	beq.n	80093b4 <USBD_StdDevReq+0x34>
 80093a2:	e04c      	b.n	800943e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	4798      	blx	r3
      break;
 80093b2:	e049      	b.n	8009448 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	785b      	ldrb	r3, [r3, #1]
 80093b8:	2b09      	cmp	r3, #9
 80093ba:	d83a      	bhi.n	8009432 <USBD_StdDevReq+0xb2>
 80093bc:	a201      	add	r2, pc, #4	; (adr r2, 80093c4 <USBD_StdDevReq+0x44>)
 80093be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c2:	bf00      	nop
 80093c4:	08009415 	.word	0x08009415
 80093c8:	08009429 	.word	0x08009429
 80093cc:	08009433 	.word	0x08009433
 80093d0:	0800941f 	.word	0x0800941f
 80093d4:	08009433 	.word	0x08009433
 80093d8:	080093f7 	.word	0x080093f7
 80093dc:	080093ed 	.word	0x080093ed
 80093e0:	08009433 	.word	0x08009433
 80093e4:	0800940b 	.word	0x0800940b
 80093e8:	08009401 	.word	0x08009401
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f9d4 	bl	800979c <USBD_GetDescriptor>
          break;
 80093f4:	e022      	b.n	800943c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80093f6:	6839      	ldr	r1, [r7, #0]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fb37 	bl	8009a6c <USBD_SetAddress>
          break;
 80093fe:	e01d      	b.n	800943c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fb74 	bl	8009af0 <USBD_SetConfig>
          break;
 8009408:	e018      	b.n	800943c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fbfd 	bl	8009c0c <USBD_GetConfig>
          break;
 8009412:	e013      	b.n	800943c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fc2c 	bl	8009c74 <USBD_GetStatus>
          break;
 800941c:	e00e      	b.n	800943c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fc5a 	bl	8009cda <USBD_SetFeature>
          break;
 8009426:	e009      	b.n	800943c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fc69 	bl	8009d02 <USBD_ClrFeature>
          break;
 8009430:	e004      	b.n	800943c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009432:	6839      	ldr	r1, [r7, #0]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fcc1 	bl	8009dbc <USBD_CtlError>
          break;
 800943a:	bf00      	nop
      }
      break;
 800943c:	e004      	b.n	8009448 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800943e:	6839      	ldr	r1, [r7, #0]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fcbb 	bl	8009dbc <USBD_CtlError>
      break;
 8009446:	bf00      	nop
  }

  return ret;
 8009448:	7bfb      	ldrb	r3, [r7, #15]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop

08009454 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800945e:	2300      	movs	r3, #0
 8009460:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800946a:	2b20      	cmp	r3, #32
 800946c:	d003      	beq.n	8009476 <USBD_StdItfReq+0x22>
 800946e:	2b40      	cmp	r3, #64	; 0x40
 8009470:	d001      	beq.n	8009476 <USBD_StdItfReq+0x22>
 8009472:	2b00      	cmp	r3, #0
 8009474:	d12a      	bne.n	80094cc <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800947c:	3b01      	subs	r3, #1
 800947e:	2b02      	cmp	r3, #2
 8009480:	d81d      	bhi.n	80094be <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	889b      	ldrh	r3, [r3, #4]
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b01      	cmp	r3, #1
 800948a:	d813      	bhi.n	80094b4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	4798      	blx	r3
 800949a:	4603      	mov	r3, r0
 800949c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	88db      	ldrh	r3, [r3, #6]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d110      	bne.n	80094c8 <USBD_StdItfReq+0x74>
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10d      	bne.n	80094c8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 fd4d 	bl	8009f4c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80094b2:	e009      	b.n	80094c8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fc80 	bl	8009dbc <USBD_CtlError>
          break;
 80094bc:	e004      	b.n	80094c8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fc7b 	bl	8009dbc <USBD_CtlError>
          break;
 80094c6:	e000      	b.n	80094ca <USBD_StdItfReq+0x76>
          break;
 80094c8:	bf00      	nop
      }
      break;
 80094ca:	e004      	b.n	80094d6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fc74 	bl	8009dbc <USBD_CtlError>
      break;
 80094d4:	bf00      	nop
  }

  return USBD_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	889b      	ldrh	r3, [r3, #4]
 80094f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094fc:	2b20      	cmp	r3, #32
 80094fe:	d004      	beq.n	800950a <USBD_StdEPReq+0x2a>
 8009500:	2b40      	cmp	r3, #64	; 0x40
 8009502:	d002      	beq.n	800950a <USBD_StdEPReq+0x2a>
 8009504:	2b00      	cmp	r3, #0
 8009506:	d008      	beq.n	800951a <USBD_StdEPReq+0x3a>
 8009508:	e13d      	b.n	8009786 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	6839      	ldr	r1, [r7, #0]
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	4798      	blx	r3
      break;
 8009518:	e13a      	b.n	8009790 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009522:	2b20      	cmp	r3, #32
 8009524:	d10a      	bne.n	800953c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	4798      	blx	r3
 8009534:	4603      	mov	r3, r0
 8009536:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009538:	7bfb      	ldrb	r3, [r7, #15]
 800953a:	e12a      	b.n	8009792 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	785b      	ldrb	r3, [r3, #1]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d03e      	beq.n	80095c2 <USBD_StdEPReq+0xe2>
 8009544:	2b03      	cmp	r3, #3
 8009546:	d002      	beq.n	800954e <USBD_StdEPReq+0x6e>
 8009548:	2b00      	cmp	r3, #0
 800954a:	d070      	beq.n	800962e <USBD_StdEPReq+0x14e>
 800954c:	e115      	b.n	800977a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009554:	2b02      	cmp	r3, #2
 8009556:	d002      	beq.n	800955e <USBD_StdEPReq+0x7e>
 8009558:	2b03      	cmp	r3, #3
 800955a:	d015      	beq.n	8009588 <USBD_StdEPReq+0xa8>
 800955c:	e02b      	b.n	80095b6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800955e:	7bbb      	ldrb	r3, [r7, #14]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00c      	beq.n	800957e <USBD_StdEPReq+0x9e>
 8009564:	7bbb      	ldrb	r3, [r7, #14]
 8009566:	2b80      	cmp	r3, #128	; 0x80
 8009568:	d009      	beq.n	800957e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800956a:	7bbb      	ldrb	r3, [r7, #14]
 800956c:	4619      	mov	r1, r3
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f001 f85a 	bl	800a628 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009574:	2180      	movs	r1, #128	; 0x80
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f001 f856 	bl	800a628 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800957c:	e020      	b.n	80095c0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800957e:	6839      	ldr	r1, [r7, #0]
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fc1b 	bl	8009dbc <USBD_CtlError>
              break;
 8009586:	e01b      	b.n	80095c0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	885b      	ldrh	r3, [r3, #2]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10e      	bne.n	80095ae <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8009590:	7bbb      	ldrb	r3, [r7, #14]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00b      	beq.n	80095ae <USBD_StdEPReq+0xce>
 8009596:	7bbb      	ldrb	r3, [r7, #14]
 8009598:	2b80      	cmp	r3, #128	; 0x80
 800959a:	d008      	beq.n	80095ae <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	88db      	ldrh	r3, [r3, #6]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d104      	bne.n	80095ae <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80095a4:	7bbb      	ldrb	r3, [r7, #14]
 80095a6:	4619      	mov	r1, r3
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f001 f83d 	bl	800a628 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fccc 	bl	8009f4c <USBD_CtlSendStatus>

              break;
 80095b4:	e004      	b.n	80095c0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80095b6:	6839      	ldr	r1, [r7, #0]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fbff 	bl	8009dbc <USBD_CtlError>
              break;
 80095be:	bf00      	nop
          }
          break;
 80095c0:	e0e0      	b.n	8009784 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d002      	beq.n	80095d2 <USBD_StdEPReq+0xf2>
 80095cc:	2b03      	cmp	r3, #3
 80095ce:	d015      	beq.n	80095fc <USBD_StdEPReq+0x11c>
 80095d0:	e026      	b.n	8009620 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095d2:	7bbb      	ldrb	r3, [r7, #14]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00c      	beq.n	80095f2 <USBD_StdEPReq+0x112>
 80095d8:	7bbb      	ldrb	r3, [r7, #14]
 80095da:	2b80      	cmp	r3, #128	; 0x80
 80095dc:	d009      	beq.n	80095f2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80095de:	7bbb      	ldrb	r3, [r7, #14]
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f001 f820 	bl	800a628 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80095e8:	2180      	movs	r1, #128	; 0x80
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f001 f81c 	bl	800a628 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095f0:	e01c      	b.n	800962c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fbe1 	bl	8009dbc <USBD_CtlError>
              break;
 80095fa:	e017      	b.n	800962c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	885b      	ldrh	r3, [r3, #2]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d112      	bne.n	800962a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800960a:	2b00      	cmp	r3, #0
 800960c:	d004      	beq.n	8009618 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800960e:	7bbb      	ldrb	r3, [r7, #14]
 8009610:	4619      	mov	r1, r3
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f001 f827 	bl	800a666 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fc97 	bl	8009f4c <USBD_CtlSendStatus>
              }
              break;
 800961e:	e004      	b.n	800962a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8009620:	6839      	ldr	r1, [r7, #0]
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fbca 	bl	8009dbc <USBD_CtlError>
              break;
 8009628:	e000      	b.n	800962c <USBD_StdEPReq+0x14c>
              break;
 800962a:	bf00      	nop
          }
          break;
 800962c:	e0aa      	b.n	8009784 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009634:	2b02      	cmp	r3, #2
 8009636:	d002      	beq.n	800963e <USBD_StdEPReq+0x15e>
 8009638:	2b03      	cmp	r3, #3
 800963a:	d032      	beq.n	80096a2 <USBD_StdEPReq+0x1c2>
 800963c:	e097      	b.n	800976e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800963e:	7bbb      	ldrb	r3, [r7, #14]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d007      	beq.n	8009654 <USBD_StdEPReq+0x174>
 8009644:	7bbb      	ldrb	r3, [r7, #14]
 8009646:	2b80      	cmp	r3, #128	; 0x80
 8009648:	d004      	beq.n	8009654 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fbb5 	bl	8009dbc <USBD_CtlError>
                break;
 8009652:	e091      	b.n	8009778 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009654:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009658:	2b00      	cmp	r3, #0
 800965a:	da0b      	bge.n	8009674 <USBD_StdEPReq+0x194>
 800965c:	7bbb      	ldrb	r3, [r7, #14]
 800965e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009662:	4613      	mov	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	3310      	adds	r3, #16
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	4413      	add	r3, r2
 8009670:	3304      	adds	r3, #4
 8009672:	e00b      	b.n	800968c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009674:	7bbb      	ldrb	r3, [r7, #14]
 8009676:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800967a:	4613      	mov	r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4413      	add	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	4413      	add	r3, r2
 800968a:	3304      	adds	r3, #4
 800968c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	2200      	movs	r2, #0
 8009692:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	2202      	movs	r2, #2
 8009698:	4619      	mov	r1, r3
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fbf8 	bl	8009e90 <USBD_CtlSendData>
              break;
 80096a0:	e06a      	b.n	8009778 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80096a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	da11      	bge.n	80096ce <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80096aa:	7bbb      	ldrb	r3, [r7, #14]
 80096ac:	f003 020f 	and.w	r2, r3, #15
 80096b0:	6879      	ldr	r1, [r7, #4]
 80096b2:	4613      	mov	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4413      	add	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	440b      	add	r3, r1
 80096bc:	3318      	adds	r3, #24
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d117      	bne.n	80096f4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fb78 	bl	8009dbc <USBD_CtlError>
                  break;
 80096cc:	e054      	b.n	8009778 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80096ce:	7bbb      	ldrb	r3, [r7, #14]
 80096d0:	f003 020f 	and.w	r2, r3, #15
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	4613      	mov	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	440b      	add	r3, r1
 80096e0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d104      	bne.n	80096f4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80096ea:	6839      	ldr	r1, [r7, #0]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fb65 	bl	8009dbc <USBD_CtlError>
                  break;
 80096f2:	e041      	b.n	8009778 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	da0b      	bge.n	8009714 <USBD_StdEPReq+0x234>
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
 80096fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009702:	4613      	mov	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	4413      	add	r3, r2
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	3310      	adds	r3, #16
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	4413      	add	r3, r2
 8009710:	3304      	adds	r3, #4
 8009712:	e00b      	b.n	800972c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009714:	7bbb      	ldrb	r3, [r7, #14]
 8009716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800971a:	4613      	mov	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	4413      	add	r3, r2
 800972a:	3304      	adds	r3, #4
 800972c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800972e:	7bbb      	ldrb	r3, [r7, #14]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d002      	beq.n	800973a <USBD_StdEPReq+0x25a>
 8009734:	7bbb      	ldrb	r3, [r7, #14]
 8009736:	2b80      	cmp	r3, #128	; 0x80
 8009738:	d103      	bne.n	8009742 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	2200      	movs	r2, #0
 800973e:	601a      	str	r2, [r3, #0]
 8009740:	e00e      	b.n	8009760 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009742:	7bbb      	ldrb	r3, [r7, #14]
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 ffac 	bl	800a6a4 <USBD_LL_IsStallEP>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	2201      	movs	r2, #1
 8009756:	601a      	str	r2, [r3, #0]
 8009758:	e002      	b.n	8009760 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	2200      	movs	r2, #0
 800975e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	2202      	movs	r2, #2
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fb92 	bl	8009e90 <USBD_CtlSendData>
              break;
 800976c:	e004      	b.n	8009778 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fb23 	bl	8009dbc <USBD_CtlError>
              break;
 8009776:	bf00      	nop
          }
          break;
 8009778:	e004      	b.n	8009784 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 fb1d 	bl	8009dbc <USBD_CtlError>
          break;
 8009782:	bf00      	nop
      }
      break;
 8009784:	e004      	b.n	8009790 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fb17 	bl	8009dbc <USBD_CtlError>
      break;
 800978e:	bf00      	nop
  }

  return ret;
 8009790:	7bfb      	ldrb	r3, [r7, #15]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
	...

0800979c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097a6:	2300      	movs	r3, #0
 80097a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80097aa:	2300      	movs	r3, #0
 80097ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80097ae:	2300      	movs	r3, #0
 80097b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	885b      	ldrh	r3, [r3, #2]
 80097b6:	0a1b      	lsrs	r3, r3, #8
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	3b01      	subs	r3, #1
 80097bc:	2b06      	cmp	r3, #6
 80097be:	f200 8128 	bhi.w	8009a12 <USBD_GetDescriptor+0x276>
 80097c2:	a201      	add	r2, pc, #4	; (adr r2, 80097c8 <USBD_GetDescriptor+0x2c>)
 80097c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c8:	080097e5 	.word	0x080097e5
 80097cc:	080097fd 	.word	0x080097fd
 80097d0:	0800983d 	.word	0x0800983d
 80097d4:	08009a13 	.word	0x08009a13
 80097d8:	08009a13 	.word	0x08009a13
 80097dc:	080099b3 	.word	0x080099b3
 80097e0:	080099df 	.word	0x080099df
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	7c12      	ldrb	r2, [r2, #16]
 80097f0:	f107 0108 	add.w	r1, r7, #8
 80097f4:	4610      	mov	r0, r2
 80097f6:	4798      	blx	r3
 80097f8:	60f8      	str	r0, [r7, #12]
      break;
 80097fa:	e112      	b.n	8009a22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	7c1b      	ldrb	r3, [r3, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d10d      	bne.n	8009820 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800980a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980c:	f107 0208 	add.w	r2, r7, #8
 8009810:	4610      	mov	r0, r2
 8009812:	4798      	blx	r3
 8009814:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	3301      	adds	r3, #1
 800981a:	2202      	movs	r2, #2
 800981c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800981e:	e100      	b.n	8009a22 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009828:	f107 0208 	add.w	r2, r7, #8
 800982c:	4610      	mov	r0, r2
 800982e:	4798      	blx	r3
 8009830:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3301      	adds	r3, #1
 8009836:	2202      	movs	r2, #2
 8009838:	701a      	strb	r2, [r3, #0]
      break;
 800983a:	e0f2      	b.n	8009a22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	885b      	ldrh	r3, [r3, #2]
 8009840:	b2db      	uxtb	r3, r3
 8009842:	2b05      	cmp	r3, #5
 8009844:	f200 80ac 	bhi.w	80099a0 <USBD_GetDescriptor+0x204>
 8009848:	a201      	add	r2, pc, #4	; (adr r2, 8009850 <USBD_GetDescriptor+0xb4>)
 800984a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984e:	bf00      	nop
 8009850:	08009869 	.word	0x08009869
 8009854:	0800989d 	.word	0x0800989d
 8009858:	080098d1 	.word	0x080098d1
 800985c:	08009905 	.word	0x08009905
 8009860:	08009939 	.word	0x08009939
 8009864:	0800996d 	.word	0x0800996d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00b      	beq.n	800988c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	7c12      	ldrb	r2, [r2, #16]
 8009880:	f107 0108 	add.w	r1, r7, #8
 8009884:	4610      	mov	r0, r2
 8009886:	4798      	blx	r3
 8009888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800988a:	e091      	b.n	80099b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800988c:	6839      	ldr	r1, [r7, #0]
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fa94 	bl	8009dbc <USBD_CtlError>
            err++;
 8009894:	7afb      	ldrb	r3, [r7, #11]
 8009896:	3301      	adds	r3, #1
 8009898:	72fb      	strb	r3, [r7, #11]
          break;
 800989a:	e089      	b.n	80099b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00b      	beq.n	80098c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	7c12      	ldrb	r2, [r2, #16]
 80098b4:	f107 0108 	add.w	r1, r7, #8
 80098b8:	4610      	mov	r0, r2
 80098ba:	4798      	blx	r3
 80098bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098be:	e077      	b.n	80099b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098c0:	6839      	ldr	r1, [r7, #0]
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 fa7a 	bl	8009dbc <USBD_CtlError>
            err++;
 80098c8:	7afb      	ldrb	r3, [r7, #11]
 80098ca:	3301      	adds	r3, #1
 80098cc:	72fb      	strb	r3, [r7, #11]
          break;
 80098ce:	e06f      	b.n	80099b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00b      	beq.n	80098f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	7c12      	ldrb	r2, [r2, #16]
 80098e8:	f107 0108 	add.w	r1, r7, #8
 80098ec:	4610      	mov	r0, r2
 80098ee:	4798      	blx	r3
 80098f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098f2:	e05d      	b.n	80099b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fa60 	bl	8009dbc <USBD_CtlError>
            err++;
 80098fc:	7afb      	ldrb	r3, [r7, #11]
 80098fe:	3301      	adds	r3, #1
 8009900:	72fb      	strb	r3, [r7, #11]
          break;
 8009902:	e055      	b.n	80099b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00b      	beq.n	8009928 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	7c12      	ldrb	r2, [r2, #16]
 800991c:	f107 0108 	add.w	r1, r7, #8
 8009920:	4610      	mov	r0, r2
 8009922:	4798      	blx	r3
 8009924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009926:	e043      	b.n	80099b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fa46 	bl	8009dbc <USBD_CtlError>
            err++;
 8009930:	7afb      	ldrb	r3, [r7, #11]
 8009932:	3301      	adds	r3, #1
 8009934:	72fb      	strb	r3, [r7, #11]
          break;
 8009936:	e03b      	b.n	80099b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00b      	beq.n	800995c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800994a:	695b      	ldr	r3, [r3, #20]
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	7c12      	ldrb	r2, [r2, #16]
 8009950:	f107 0108 	add.w	r1, r7, #8
 8009954:	4610      	mov	r0, r2
 8009956:	4798      	blx	r3
 8009958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800995a:	e029      	b.n	80099b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800995c:	6839      	ldr	r1, [r7, #0]
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fa2c 	bl	8009dbc <USBD_CtlError>
            err++;
 8009964:	7afb      	ldrb	r3, [r7, #11]
 8009966:	3301      	adds	r3, #1
 8009968:	72fb      	strb	r3, [r7, #11]
          break;
 800996a:	e021      	b.n	80099b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009972:	699b      	ldr	r3, [r3, #24]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00b      	beq.n	8009990 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	7c12      	ldrb	r2, [r2, #16]
 8009984:	f107 0108 	add.w	r1, r7, #8
 8009988:	4610      	mov	r0, r2
 800998a:	4798      	blx	r3
 800998c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800998e:	e00f      	b.n	80099b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fa12 	bl	8009dbc <USBD_CtlError>
            err++;
 8009998:	7afb      	ldrb	r3, [r7, #11]
 800999a:	3301      	adds	r3, #1
 800999c:	72fb      	strb	r3, [r7, #11]
          break;
 800999e:	e007      	b.n	80099b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fa0a 	bl	8009dbc <USBD_CtlError>
          err++;
 80099a8:	7afb      	ldrb	r3, [r7, #11]
 80099aa:	3301      	adds	r3, #1
 80099ac:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80099ae:	e038      	b.n	8009a22 <USBD_GetDescriptor+0x286>
 80099b0:	e037      	b.n	8009a22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	7c1b      	ldrb	r3, [r3, #16]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d109      	bne.n	80099ce <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c2:	f107 0208 	add.w	r2, r7, #8
 80099c6:	4610      	mov	r0, r2
 80099c8:	4798      	blx	r3
 80099ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099cc:	e029      	b.n	8009a22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f9f3 	bl	8009dbc <USBD_CtlError>
        err++;
 80099d6:	7afb      	ldrb	r3, [r7, #11]
 80099d8:	3301      	adds	r3, #1
 80099da:	72fb      	strb	r3, [r7, #11]
      break;
 80099dc:	e021      	b.n	8009a22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	7c1b      	ldrb	r3, [r3, #16]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10d      	bne.n	8009a02 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ee:	f107 0208 	add.w	r2, r7, #8
 80099f2:	4610      	mov	r0, r2
 80099f4:	4798      	blx	r3
 80099f6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	3301      	adds	r3, #1
 80099fc:	2207      	movs	r2, #7
 80099fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a00:	e00f      	b.n	8009a22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f9d9 	bl	8009dbc <USBD_CtlError>
        err++;
 8009a0a:	7afb      	ldrb	r3, [r7, #11]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	72fb      	strb	r3, [r7, #11]
      break;
 8009a10:	e007      	b.n	8009a22 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f9d1 	bl	8009dbc <USBD_CtlError>
      err++;
 8009a1a:	7afb      	ldrb	r3, [r7, #11]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	72fb      	strb	r3, [r7, #11]
      break;
 8009a20:	bf00      	nop
  }

  if (err != 0U)
 8009a22:	7afb      	ldrb	r3, [r7, #11]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d11c      	bne.n	8009a62 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009a28:	893b      	ldrh	r3, [r7, #8]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d011      	beq.n	8009a52 <USBD_GetDescriptor+0x2b6>
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	88db      	ldrh	r3, [r3, #6]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00d      	beq.n	8009a52 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	88da      	ldrh	r2, [r3, #6]
 8009a3a:	893b      	ldrh	r3, [r7, #8]
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	bf28      	it	cs
 8009a40:	4613      	movcs	r3, r2
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a46:	893b      	ldrh	r3, [r7, #8]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	68f9      	ldr	r1, [r7, #12]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 fa1f 	bl	8009e90 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	88db      	ldrh	r3, [r3, #6]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d104      	bne.n	8009a64 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fa76 	bl	8009f4c <USBD_CtlSendStatus>
 8009a60:	e000      	b.n	8009a64 <USBD_GetDescriptor+0x2c8>
    return;
 8009a62:	bf00      	nop
    }
  }
}
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop

08009a6c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	889b      	ldrh	r3, [r3, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d130      	bne.n	8009ae0 <USBD_SetAddress+0x74>
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	88db      	ldrh	r3, [r3, #6]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d12c      	bne.n	8009ae0 <USBD_SetAddress+0x74>
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	885b      	ldrh	r3, [r3, #2]
 8009a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8009a8c:	d828      	bhi.n	8009ae0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	885b      	ldrh	r3, [r3, #2]
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa0:	2b03      	cmp	r3, #3
 8009aa2:	d104      	bne.n	8009aae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009aa4:	6839      	ldr	r1, [r7, #0]
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f988 	bl	8009dbc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aac:	e01c      	b.n	8009ae8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	7bfa      	ldrb	r2, [r7, #15]
 8009ab2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ab6:	7bfb      	ldrb	r3, [r7, #15]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fe1e 	bl	800a6fc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fa43 	bl	8009f4c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ac6:	7bfb      	ldrb	r3, [r7, #15]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d004      	beq.n	8009ad6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2202      	movs	r2, #2
 8009ad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ad4:	e008      	b.n	8009ae8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ade:	e003      	b.n	8009ae8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ae0:	6839      	ldr	r1, [r7, #0]
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f96a 	bl	8009dbc <USBD_CtlError>
  }
}
 8009ae8:	bf00      	nop
 8009aea:	3710      	adds	r7, #16
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	885b      	ldrh	r3, [r3, #2]
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	4b41      	ldr	r3, [pc, #260]	; (8009c08 <USBD_SetConfig+0x118>)
 8009b02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b04:	4b40      	ldr	r3, [pc, #256]	; (8009c08 <USBD_SetConfig+0x118>)
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d904      	bls.n	8009b16 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f954 	bl	8009dbc <USBD_CtlError>
 8009b14:	e075      	b.n	8009c02 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d002      	beq.n	8009b26 <USBD_SetConfig+0x36>
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	d023      	beq.n	8009b6c <USBD_SetConfig+0x7c>
 8009b24:	e062      	b.n	8009bec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009b26:	4b38      	ldr	r3, [pc, #224]	; (8009c08 <USBD_SetConfig+0x118>)
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d01a      	beq.n	8009b64 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009b2e:	4b36      	ldr	r3, [pc, #216]	; (8009c08 <USBD_SetConfig+0x118>)
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	461a      	mov	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2203      	movs	r2, #3
 8009b3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b40:	4b31      	ldr	r3, [pc, #196]	; (8009c08 <USBD_SetConfig+0x118>)
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7ff f9f4 	bl	8008f34 <USBD_SetClassConfig>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d104      	bne.n	8009b5c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009b52:	6839      	ldr	r1, [r7, #0]
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f931 	bl	8009dbc <USBD_CtlError>
            return;
 8009b5a:	e052      	b.n	8009c02 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f9f5 	bl	8009f4c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b62:	e04e      	b.n	8009c02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f9f1 	bl	8009f4c <USBD_CtlSendStatus>
        break;
 8009b6a:	e04a      	b.n	8009c02 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009b6c:	4b26      	ldr	r3, [pc, #152]	; (8009c08 <USBD_SetConfig+0x118>)
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d112      	bne.n	8009b9a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2202      	movs	r2, #2
 8009b78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009b7c:	4b22      	ldr	r3, [pc, #136]	; (8009c08 <USBD_SetConfig+0x118>)
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	461a      	mov	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009b86:	4b20      	ldr	r3, [pc, #128]	; (8009c08 <USBD_SetConfig+0x118>)
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7ff f9f0 	bl	8008f72 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f9da 	bl	8009f4c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b98:	e033      	b.n	8009c02 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009b9a:	4b1b      	ldr	r3, [pc, #108]	; (8009c08 <USBD_SetConfig+0x118>)
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d01d      	beq.n	8009be4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	4619      	mov	r1, r3
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f7ff f9de 	bl	8008f72 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009bb6:	4b14      	ldr	r3, [pc, #80]	; (8009c08 <USBD_SetConfig+0x118>)
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009bc0:	4b11      	ldr	r3, [pc, #68]	; (8009c08 <USBD_SetConfig+0x118>)
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7ff f9b4 	bl	8008f34 <USBD_SetClassConfig>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d104      	bne.n	8009bdc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f8f1 	bl	8009dbc <USBD_CtlError>
            return;
 8009bda:	e012      	b.n	8009c02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f9b5 	bl	8009f4c <USBD_CtlSendStatus>
        break;
 8009be2:	e00e      	b.n	8009c02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f9b1 	bl	8009f4c <USBD_CtlSendStatus>
        break;
 8009bea:	e00a      	b.n	8009c02 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f8e4 	bl	8009dbc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009bf4:	4b04      	ldr	r3, [pc, #16]	; (8009c08 <USBD_SetConfig+0x118>)
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f7ff f9b9 	bl	8008f72 <USBD_ClrClassConfig>
        break;
 8009c00:	bf00      	nop
    }
  }
}
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	2000023c 	.word	0x2000023c

08009c0c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	88db      	ldrh	r3, [r3, #6]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d004      	beq.n	8009c28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f8cb 	bl	8009dbc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009c26:	e021      	b.n	8009c6c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	db17      	blt.n	8009c62 <USBD_GetConfig+0x56>
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	dd02      	ble.n	8009c3c <USBD_GetConfig+0x30>
 8009c36:	2b03      	cmp	r3, #3
 8009c38:	d00b      	beq.n	8009c52 <USBD_GetConfig+0x46>
 8009c3a:	e012      	b.n	8009c62 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3308      	adds	r3, #8
 8009c46:	2201      	movs	r2, #1
 8009c48:	4619      	mov	r1, r3
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f920 	bl	8009e90 <USBD_CtlSendData>
        break;
 8009c50:	e00c      	b.n	8009c6c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	3304      	adds	r3, #4
 8009c56:	2201      	movs	r2, #1
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f918 	bl	8009e90 <USBD_CtlSendData>
        break;
 8009c60:	e004      	b.n	8009c6c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f8a9 	bl	8009dbc <USBD_CtlError>
        break;
 8009c6a:	bf00      	nop
}
 8009c6c:	bf00      	nop
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c84:	3b01      	subs	r3, #1
 8009c86:	2b02      	cmp	r3, #2
 8009c88:	d81e      	bhi.n	8009cc8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	88db      	ldrh	r3, [r3, #6]
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	d004      	beq.n	8009c9c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 f891 	bl	8009dbc <USBD_CtlError>
        break;
 8009c9a:	e01a      	b.n	8009cd2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d005      	beq.n	8009cb8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	f043 0202 	orr.w	r2, r3, #2
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	330c      	adds	r3, #12
 8009cbc:	2202      	movs	r2, #2
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f8e5 	bl	8009e90 <USBD_CtlSendData>
      break;
 8009cc6:	e004      	b.n	8009cd2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f876 	bl	8009dbc <USBD_CtlError>
      break;
 8009cd0:	bf00      	nop
  }
}
 8009cd2:	bf00      	nop
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b082      	sub	sp, #8
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	885b      	ldrh	r3, [r3, #2]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d106      	bne.n	8009cfa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f929 	bl	8009f4c <USBD_CtlSendStatus>
  }
}
 8009cfa:	bf00      	nop
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b082      	sub	sp, #8
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d12:	3b01      	subs	r3, #1
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d80b      	bhi.n	8009d30 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	885b      	ldrh	r3, [r3, #2]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d10c      	bne.n	8009d3a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f90f 	bl	8009f4c <USBD_CtlSendStatus>
      }
      break;
 8009d2e:	e004      	b.n	8009d3a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009d30:	6839      	ldr	r1, [r7, #0]
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f842 	bl	8009dbc <USBD_CtlError>
      break;
 8009d38:	e000      	b.n	8009d3c <USBD_ClrFeature+0x3a>
      break;
 8009d3a:	bf00      	nop
  }
}
 8009d3c:	bf00      	nop
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781a      	ldrb	r2, [r3, #0]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	785a      	ldrb	r2, [r3, #1]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	3302      	adds	r3, #2
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	3303      	adds	r3, #3
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	021b      	lsls	r3, r3, #8
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	4413      	add	r3, r2
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	3304      	adds	r3, #4
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	3305      	adds	r3, #5
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	021b      	lsls	r3, r3, #8
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	4413      	add	r3, r2
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	3306      	adds	r3, #6
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	3307      	adds	r3, #7
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	021b      	lsls	r3, r3, #8
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	4413      	add	r3, r2
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	80da      	strh	r2, [r3, #6]

}
 8009db2:	bf00      	nop
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bc80      	pop	{r7}
 8009dba:	4770      	bx	lr

08009dbc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009dc6:	2180      	movs	r1, #128	; 0x80
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 fc2d 	bl	800a628 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009dce:	2100      	movs	r1, #0
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 fc29 	bl	800a628 <USBD_LL_StallEP>
}
 8009dd6:	bf00      	nop
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b086      	sub	sp, #24
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	60f8      	str	r0, [r7, #12]
 8009de6:	60b9      	str	r1, [r7, #8]
 8009de8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009dea:	2300      	movs	r3, #0
 8009dec:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d032      	beq.n	8009e5a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f000 f834 	bl	8009e62 <USBD_GetLen>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	005b      	lsls	r3, r3, #1
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009e08:	7dfb      	ldrb	r3, [r7, #23]
 8009e0a:	1c5a      	adds	r2, r3, #1
 8009e0c:	75fa      	strb	r2, [r7, #23]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	4413      	add	r3, r2
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	7812      	ldrb	r2, [r2, #0]
 8009e18:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009e1a:	7dfb      	ldrb	r3, [r7, #23]
 8009e1c:	1c5a      	adds	r2, r3, #1
 8009e1e:	75fa      	strb	r2, [r7, #23]
 8009e20:	461a      	mov	r2, r3
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	4413      	add	r3, r2
 8009e26:	2203      	movs	r2, #3
 8009e28:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009e2a:	e012      	b.n	8009e52 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	60fa      	str	r2, [r7, #12]
 8009e32:	7dfa      	ldrb	r2, [r7, #23]
 8009e34:	1c51      	adds	r1, r2, #1
 8009e36:	75f9      	strb	r1, [r7, #23]
 8009e38:	4611      	mov	r1, r2
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	440a      	add	r2, r1
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009e42:	7dfb      	ldrb	r3, [r7, #23]
 8009e44:	1c5a      	adds	r2, r3, #1
 8009e46:	75fa      	strb	r2, [r7, #23]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	2200      	movs	r2, #0
 8009e50:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1e8      	bne.n	8009e2c <USBD_GetString+0x4e>
    }
  }
}
 8009e5a:	bf00      	nop
 8009e5c:	3718      	adds	r7, #24
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e62:	b480      	push	{r7}
 8009e64:	b085      	sub	sp, #20
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009e6e:	e005      	b.n	8009e7c <USBD_GetLen+0x1a>
  {
    len++;
 8009e70:	7bfb      	ldrb	r3, [r7, #15]
 8009e72:	3301      	adds	r3, #1
 8009e74:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1f5      	bne.n	8009e70 <USBD_GetLen+0xe>
  }

  return len;
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3714      	adds	r7, #20
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bc80      	pop	{r7}
 8009e8e:	4770      	bx	lr

08009e90 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009ea6:	88fa      	ldrh	r2, [r7, #6]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009eac:	88fa      	ldrh	r2, [r7, #6]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009eb2:	88fb      	ldrh	r3, [r7, #6]
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f000 fc3e 	bl	800a73a <USBD_LL_Transmit>

  return USBD_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ed6:	88fb      	ldrh	r3, [r7, #6]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	2100      	movs	r1, #0
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f000 fc2c 	bl	800a73a <USBD_LL_Transmit>

  return USBD_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2203      	movs	r2, #3
 8009efe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009f02:	88fa      	ldrh	r2, [r7, #6]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009f0a:	88fa      	ldrh	r2, [r7, #6]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f12:	88fb      	ldrh	r3, [r7, #6]
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	2100      	movs	r1, #0
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f000 fc31 	bl	800a780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	4613      	mov	r3, r2
 8009f34:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f36:	88fb      	ldrh	r3, [r7, #6]
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f000 fc1f 	bl	800a780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3710      	adds	r7, #16
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2204      	movs	r2, #4
 8009f58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	2200      	movs	r2, #0
 8009f60:	2100      	movs	r1, #0
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fbe9 	bl	800a73a <USBD_LL_Transmit>

  return USBD_OK;
 8009f68:	2300      	movs	r3, #0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3708      	adds	r7, #8
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b082      	sub	sp, #8
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2205      	movs	r2, #5
 8009f7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f82:	2300      	movs	r3, #0
 8009f84:	2200      	movs	r2, #0
 8009f86:	2100      	movs	r1, #0
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fbf9 	bl	800a780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	4912      	ldr	r1, [pc, #72]	; (8009fe8 <MX_USB_DEVICE_Init+0x50>)
 8009fa0:	4812      	ldr	r0, [pc, #72]	; (8009fec <MX_USB_DEVICE_Init+0x54>)
 8009fa2:	f7fe ff6d 	bl	8008e80 <USBD_Init>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009fac:	f7f7 f886 	bl	80010bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009fb0:	490f      	ldr	r1, [pc, #60]	; (8009ff0 <MX_USB_DEVICE_Init+0x58>)
 8009fb2:	480e      	ldr	r0, [pc, #56]	; (8009fec <MX_USB_DEVICE_Init+0x54>)
 8009fb4:	f7fe ff8f 	bl	8008ed6 <USBD_RegisterClass>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d001      	beq.n	8009fc2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009fbe:	f7f7 f87d 	bl	80010bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009fc2:	490c      	ldr	r1, [pc, #48]	; (8009ff4 <MX_USB_DEVICE_Init+0x5c>)
 8009fc4:	4809      	ldr	r0, [pc, #36]	; (8009fec <MX_USB_DEVICE_Init+0x54>)
 8009fc6:	f7fe feef 	bl	8008da8 <USBD_CDC_RegisterInterface>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d001      	beq.n	8009fd4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009fd0:	f7f7 f874 	bl	80010bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009fd4:	4805      	ldr	r0, [pc, #20]	; (8009fec <MX_USB_DEVICE_Init+0x54>)
 8009fd6:	f7fe ff97 	bl	8008f08 <USBD_Start>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009fe0:	f7f7 f86c 	bl	80010bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009fe4:	bf00      	nop
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	20000144 	.word	0x20000144
 8009fec:	20000638 	.word	0x20000638
 8009ff0:	20000030 	.word	0x20000030
 8009ff4:	20000134 	.word	0x20000134

08009ff8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	4905      	ldr	r1, [pc, #20]	; (800a014 <CDC_Init_FS+0x1c>)
 800a000:	4805      	ldr	r0, [pc, #20]	; (800a018 <CDC_Init_FS+0x20>)
 800a002:	f7fe fee7 	bl	8008dd4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a006:	4905      	ldr	r1, [pc, #20]	; (800a01c <CDC_Init_FS+0x24>)
 800a008:	4803      	ldr	r0, [pc, #12]	; (800a018 <CDC_Init_FS+0x20>)
 800a00a:	f7fe fefc 	bl	8008e06 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a00e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a010:	4618      	mov	r0, r3
 800a012:	bd80      	pop	{r7, pc}
 800a014:	20000ce4 	.word	0x20000ce4
 800a018:	20000638 	.word	0x20000638
 800a01c:	200008fc 	.word	0x200008fc

0800a020 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a020:	b480      	push	{r7}
 800a022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a024:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a026:	4618      	mov	r0, r3
 800a028:	46bd      	mov	sp, r7
 800a02a:	bc80      	pop	{r7}
 800a02c:	4770      	bx	lr
	...

0800a030 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	6039      	str	r1, [r7, #0]
 800a03a:	71fb      	strb	r3, [r7, #7]
 800a03c:	4613      	mov	r3, r2
 800a03e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a040:	79fb      	ldrb	r3, [r7, #7]
 800a042:	2b23      	cmp	r3, #35	; 0x23
 800a044:	d84a      	bhi.n	800a0dc <CDC_Control_FS+0xac>
 800a046:	a201      	add	r2, pc, #4	; (adr r2, 800a04c <CDC_Control_FS+0x1c>)
 800a048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04c:	0800a0dd 	.word	0x0800a0dd
 800a050:	0800a0dd 	.word	0x0800a0dd
 800a054:	0800a0dd 	.word	0x0800a0dd
 800a058:	0800a0dd 	.word	0x0800a0dd
 800a05c:	0800a0dd 	.word	0x0800a0dd
 800a060:	0800a0dd 	.word	0x0800a0dd
 800a064:	0800a0dd 	.word	0x0800a0dd
 800a068:	0800a0dd 	.word	0x0800a0dd
 800a06c:	0800a0dd 	.word	0x0800a0dd
 800a070:	0800a0dd 	.word	0x0800a0dd
 800a074:	0800a0dd 	.word	0x0800a0dd
 800a078:	0800a0dd 	.word	0x0800a0dd
 800a07c:	0800a0dd 	.word	0x0800a0dd
 800a080:	0800a0dd 	.word	0x0800a0dd
 800a084:	0800a0dd 	.word	0x0800a0dd
 800a088:	0800a0dd 	.word	0x0800a0dd
 800a08c:	0800a0dd 	.word	0x0800a0dd
 800a090:	0800a0dd 	.word	0x0800a0dd
 800a094:	0800a0dd 	.word	0x0800a0dd
 800a098:	0800a0dd 	.word	0x0800a0dd
 800a09c:	0800a0dd 	.word	0x0800a0dd
 800a0a0:	0800a0dd 	.word	0x0800a0dd
 800a0a4:	0800a0dd 	.word	0x0800a0dd
 800a0a8:	0800a0dd 	.word	0x0800a0dd
 800a0ac:	0800a0dd 	.word	0x0800a0dd
 800a0b0:	0800a0dd 	.word	0x0800a0dd
 800a0b4:	0800a0dd 	.word	0x0800a0dd
 800a0b8:	0800a0dd 	.word	0x0800a0dd
 800a0bc:	0800a0dd 	.word	0x0800a0dd
 800a0c0:	0800a0dd 	.word	0x0800a0dd
 800a0c4:	0800a0dd 	.word	0x0800a0dd
 800a0c8:	0800a0dd 	.word	0x0800a0dd
 800a0cc:	0800a0dd 	.word	0x0800a0dd
 800a0d0:	0800a0dd 	.word	0x0800a0dd
 800a0d4:	0800a0dd 	.word	0x0800a0dd
 800a0d8:	0800a0dd 	.word	0x0800a0dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a0dc:	bf00      	nop
  }

  return (USBD_OK);
 800a0de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bc80      	pop	{r7}
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop

0800a0ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a0f6:	6879      	ldr	r1, [r7, #4]
 800a0f8:	4805      	ldr	r0, [pc, #20]	; (800a110 <CDC_Receive_FS+0x24>)
 800a0fa:	f7fe fe84 	bl	8008e06 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a0fe:	4804      	ldr	r0, [pc, #16]	; (800a110 <CDC_Receive_FS+0x24>)
 800a100:	f7fe fe94 	bl	8008e2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a104:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a106:	4618      	mov	r0, r3
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	20000638 	.word	0x20000638

0800a114 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	4603      	mov	r3, r0
 800a11c:	6039      	str	r1, [r7, #0]
 800a11e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	2212      	movs	r2, #18
 800a124:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a126:	4b03      	ldr	r3, [pc, #12]	; (800a134 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a128:	4618      	mov	r0, r3
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bc80      	pop	{r7}
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	20000160 	.word	0x20000160

0800a138 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	4603      	mov	r3, r0
 800a140:	6039      	str	r1, [r7, #0]
 800a142:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	2204      	movs	r2, #4
 800a148:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a14a:	4b03      	ldr	r3, [pc, #12]	; (800a158 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	bc80      	pop	{r7}
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	20000174 	.word	0x20000174

0800a15c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	4603      	mov	r3, r0
 800a164:	6039      	str	r1, [r7, #0]
 800a166:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a168:	79fb      	ldrb	r3, [r7, #7]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d105      	bne.n	800a17a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a16e:	683a      	ldr	r2, [r7, #0]
 800a170:	4907      	ldr	r1, [pc, #28]	; (800a190 <USBD_FS_ProductStrDescriptor+0x34>)
 800a172:	4808      	ldr	r0, [pc, #32]	; (800a194 <USBD_FS_ProductStrDescriptor+0x38>)
 800a174:	f7ff fe33 	bl	8009dde <USBD_GetString>
 800a178:	e004      	b.n	800a184 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	4904      	ldr	r1, [pc, #16]	; (800a190 <USBD_FS_ProductStrDescriptor+0x34>)
 800a17e:	4805      	ldr	r0, [pc, #20]	; (800a194 <USBD_FS_ProductStrDescriptor+0x38>)
 800a180:	f7ff fe2d 	bl	8009dde <USBD_GetString>
  }
  return USBD_StrDesc;
 800a184:	4b02      	ldr	r3, [pc, #8]	; (800a190 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a186:	4618      	mov	r0, r3
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	200010cc 	.word	0x200010cc
 800a194:	0800b17c 	.word	0x0800b17c

0800a198 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	4603      	mov	r3, r0
 800a1a0:	6039      	str	r1, [r7, #0]
 800a1a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	4904      	ldr	r1, [pc, #16]	; (800a1b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a1a8:	4804      	ldr	r0, [pc, #16]	; (800a1bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a1aa:	f7ff fe18 	bl	8009dde <USBD_GetString>
  return USBD_StrDesc;
 800a1ae:	4b02      	ldr	r3, [pc, #8]	; (800a1b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	200010cc 	.word	0x200010cc
 800a1bc:	0800b194 	.word	0x0800b194

0800a1c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	6039      	str	r1, [r7, #0]
 800a1ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	221a      	movs	r2, #26
 800a1d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a1d2:	f000 f843 	bl	800a25c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a1d6:	4b02      	ldr	r3, [pc, #8]	; (800a1e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	20000178 	.word	0x20000178

0800a1e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	6039      	str	r1, [r7, #0]
 800a1ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a1f0:	79fb      	ldrb	r3, [r7, #7]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d105      	bne.n	800a202 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	4907      	ldr	r1, [pc, #28]	; (800a218 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1fa:	4808      	ldr	r0, [pc, #32]	; (800a21c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1fc:	f7ff fdef 	bl	8009dde <USBD_GetString>
 800a200:	e004      	b.n	800a20c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a202:	683a      	ldr	r2, [r7, #0]
 800a204:	4904      	ldr	r1, [pc, #16]	; (800a218 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a206:	4805      	ldr	r0, [pc, #20]	; (800a21c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a208:	f7ff fde9 	bl	8009dde <USBD_GetString>
  }
  return USBD_StrDesc;
 800a20c:	4b02      	ldr	r3, [pc, #8]	; (800a218 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3708      	adds	r7, #8
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	200010cc 	.word	0x200010cc
 800a21c:	0800b1a8 	.word	0x0800b1a8

0800a220 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	4603      	mov	r3, r0
 800a228:	6039      	str	r1, [r7, #0]
 800a22a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a22c:	79fb      	ldrb	r3, [r7, #7]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d105      	bne.n	800a23e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	4907      	ldr	r1, [pc, #28]	; (800a254 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a236:	4808      	ldr	r0, [pc, #32]	; (800a258 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a238:	f7ff fdd1 	bl	8009dde <USBD_GetString>
 800a23c:	e004      	b.n	800a248 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	4904      	ldr	r1, [pc, #16]	; (800a254 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a242:	4805      	ldr	r0, [pc, #20]	; (800a258 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a244:	f7ff fdcb 	bl	8009dde <USBD_GetString>
  }
  return USBD_StrDesc;
 800a248:	4b02      	ldr	r3, [pc, #8]	; (800a254 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3708      	adds	r7, #8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	200010cc 	.word	0x200010cc
 800a258:	0800b1b4 	.word	0x0800b1b4

0800a25c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a262:	4b0f      	ldr	r3, [pc, #60]	; (800a2a0 <Get_SerialNum+0x44>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a268:	4b0e      	ldr	r3, [pc, #56]	; (800a2a4 <Get_SerialNum+0x48>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a26e:	4b0e      	ldr	r3, [pc, #56]	; (800a2a8 <Get_SerialNum+0x4c>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4413      	add	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d009      	beq.n	800a296 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a282:	2208      	movs	r2, #8
 800a284:	4909      	ldr	r1, [pc, #36]	; (800a2ac <Get_SerialNum+0x50>)
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f000 f814 	bl	800a2b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a28c:	2204      	movs	r2, #4
 800a28e:	4908      	ldr	r1, [pc, #32]	; (800a2b0 <Get_SerialNum+0x54>)
 800a290:	68b8      	ldr	r0, [r7, #8]
 800a292:	f000 f80f 	bl	800a2b4 <IntToUnicode>
  }
}
 800a296:	bf00      	nop
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	1ffff7e8 	.word	0x1ffff7e8
 800a2a4:	1ffff7ec 	.word	0x1ffff7ec
 800a2a8:	1ffff7f0 	.word	0x1ffff7f0
 800a2ac:	2000017a 	.word	0x2000017a
 800a2b0:	2000018a 	.word	0x2000018a

0800a2b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b087      	sub	sp, #28
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	75fb      	strb	r3, [r7, #23]
 800a2ca:	e027      	b.n	800a31c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	0f1b      	lsrs	r3, r3, #28
 800a2d0:	2b09      	cmp	r3, #9
 800a2d2:	d80b      	bhi.n	800a2ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	0f1b      	lsrs	r3, r3, #28
 800a2d8:	b2da      	uxtb	r2, r3
 800a2da:	7dfb      	ldrb	r3, [r7, #23]
 800a2dc:	005b      	lsls	r3, r3, #1
 800a2de:	4619      	mov	r1, r3
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	440b      	add	r3, r1
 800a2e4:	3230      	adds	r2, #48	; 0x30
 800a2e6:	b2d2      	uxtb	r2, r2
 800a2e8:	701a      	strb	r2, [r3, #0]
 800a2ea:	e00a      	b.n	800a302 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	0f1b      	lsrs	r3, r3, #28
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	7dfb      	ldrb	r3, [r7, #23]
 800a2f4:	005b      	lsls	r3, r3, #1
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	440b      	add	r3, r1
 800a2fc:	3237      	adds	r2, #55	; 0x37
 800a2fe:	b2d2      	uxtb	r2, r2
 800a300:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	011b      	lsls	r3, r3, #4
 800a306:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a308:	7dfb      	ldrb	r3, [r7, #23]
 800a30a:	005b      	lsls	r3, r3, #1
 800a30c:	3301      	adds	r3, #1
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	4413      	add	r3, r2
 800a312:	2200      	movs	r2, #0
 800a314:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a316:	7dfb      	ldrb	r3, [r7, #23]
 800a318:	3301      	adds	r3, #1
 800a31a:	75fb      	strb	r3, [r7, #23]
 800a31c:	7dfa      	ldrb	r2, [r7, #23]
 800a31e:	79fb      	ldrb	r3, [r7, #7]
 800a320:	429a      	cmp	r2, r3
 800a322:	d3d3      	bcc.n	800a2cc <IntToUnicode+0x18>
  }
}
 800a324:	bf00      	nop
 800a326:	371c      	adds	r7, #28
 800a328:	46bd      	mov	sp, r7
 800a32a:	bc80      	pop	{r7}
 800a32c:	4770      	bx	lr
	...

0800a330 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a0d      	ldr	r2, [pc, #52]	; (800a374 <HAL_PCD_MspInit+0x44>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d113      	bne.n	800a36a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a342:	4b0d      	ldr	r3, [pc, #52]	; (800a378 <HAL_PCD_MspInit+0x48>)
 800a344:	69db      	ldr	r3, [r3, #28]
 800a346:	4a0c      	ldr	r2, [pc, #48]	; (800a378 <HAL_PCD_MspInit+0x48>)
 800a348:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a34c:	61d3      	str	r3, [r2, #28]
 800a34e:	4b0a      	ldr	r3, [pc, #40]	; (800a378 <HAL_PCD_MspInit+0x48>)
 800a350:	69db      	ldr	r3, [r3, #28]
 800a352:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a356:	60fb      	str	r3, [r7, #12]
 800a358:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a35a:	2200      	movs	r2, #0
 800a35c:	2100      	movs	r1, #0
 800a35e:	2014      	movs	r0, #20
 800a360:	f7f7 fdbf 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a364:	2014      	movs	r0, #20
 800a366:	f7f7 fdd8 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a36a:	bf00      	nop
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	40005c00 	.word	0x40005c00
 800a378:	40021000 	.word	0x40021000

0800a37c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a390:	4619      	mov	r1, r3
 800a392:	4610      	mov	r0, r2
 800a394:	f7fe fe00 	bl	8008f98 <USBD_LL_SetupStage>
}
 800a398:	bf00      	nop
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a3b2:	78fa      	ldrb	r2, [r7, #3]
 800a3b4:	6879      	ldr	r1, [r7, #4]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4413      	add	r3, r2
 800a3bc:	00db      	lsls	r3, r3, #3
 800a3be:	440b      	add	r3, r1
 800a3c0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	78fb      	ldrb	r3, [r7, #3]
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	f7fe fe30 	bl	800902e <USBD_LL_DataOutStage>
}
 800a3ce:	bf00      	nop
 800a3d0:	3708      	adds	r7, #8
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b082      	sub	sp, #8
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
 800a3de:	460b      	mov	r3, r1
 800a3e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a3e8:	78fa      	ldrb	r2, [r7, #3]
 800a3ea:	6879      	ldr	r1, [r7, #4]
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	4413      	add	r3, r2
 800a3f2:	00db      	lsls	r3, r3, #3
 800a3f4:	440b      	add	r3, r1
 800a3f6:	333c      	adds	r3, #60	; 0x3c
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	78fb      	ldrb	r3, [r7, #3]
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	f7fe fe87 	bl	8009110 <USBD_LL_DataInStage>
}
 800a402:	bf00      	nop
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b082      	sub	sp, #8
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a418:	4618      	mov	r0, r3
 800a41a:	f7fe ff97 	bl	800934c <USBD_LL_SOF>
}
 800a41e:	bf00      	nop
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b084      	sub	sp, #16
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a42e:	2301      	movs	r3, #1
 800a430:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	2b02      	cmp	r3, #2
 800a438:	d001      	beq.n	800a43e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a43a:	f7f6 fe3f 	bl	80010bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a444:	7bfa      	ldrb	r2, [r7, #15]
 800a446:	4611      	mov	r1, r2
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fe ff47 	bl	80092dc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a454:	4618      	mov	r0, r3
 800a456:	f7fe ff00 	bl	800925a <USBD_LL_Reset>
}
 800a45a:	bf00      	nop
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
	...

0800a464 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a472:	4618      	mov	r0, r3
 800a474:	f7fe ff41 	bl	80092fa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d005      	beq.n	800a48c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a480:	4b04      	ldr	r3, [pc, #16]	; (800a494 <HAL_PCD_SuspendCallback+0x30>)
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	4a03      	ldr	r2, [pc, #12]	; (800a494 <HAL_PCD_SuspendCallback+0x30>)
 800a486:	f043 0306 	orr.w	r3, r3, #6
 800a48a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a48c:	bf00      	nop
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	e000ed00 	.word	0xe000ed00

0800a498 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fe ff3b 	bl	8009322 <USBD_LL_Resume>
}
 800a4ac:	bf00      	nop
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a4bc:	4a28      	ldr	r2, [pc, #160]	; (800a560 <USBD_LL_Init+0xac>)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a26      	ldr	r2, [pc, #152]	; (800a560 <USBD_LL_Init+0xac>)
 800a4c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a4cc:	4b24      	ldr	r3, [pc, #144]	; (800a560 <USBD_LL_Init+0xac>)
 800a4ce:	4a25      	ldr	r2, [pc, #148]	; (800a564 <USBD_LL_Init+0xb0>)
 800a4d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a4d2:	4b23      	ldr	r3, [pc, #140]	; (800a560 <USBD_LL_Init+0xac>)
 800a4d4:	2208      	movs	r2, #8
 800a4d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a4d8:	4b21      	ldr	r3, [pc, #132]	; (800a560 <USBD_LL_Init+0xac>)
 800a4da:	2202      	movs	r2, #2
 800a4dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a4de:	4b20      	ldr	r3, [pc, #128]	; (800a560 <USBD_LL_Init+0xac>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a4e4:	4b1e      	ldr	r3, [pc, #120]	; (800a560 <USBD_LL_Init+0xac>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a4ea:	4b1d      	ldr	r3, [pc, #116]	; (800a560 <USBD_LL_Init+0xac>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a4f0:	481b      	ldr	r0, [pc, #108]	; (800a560 <USBD_LL_Init+0xac>)
 800a4f2:	f7f9 fd8a 	bl	800400a <HAL_PCD_Init>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d001      	beq.n	800a500 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a4fc:	f7f6 fdde 	bl	80010bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a506:	2318      	movs	r3, #24
 800a508:	2200      	movs	r2, #0
 800a50a:	2100      	movs	r1, #0
 800a50c:	f7fb f8be 	bl	800568c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a516:	2358      	movs	r3, #88	; 0x58
 800a518:	2200      	movs	r2, #0
 800a51a:	2180      	movs	r1, #128	; 0x80
 800a51c:	f7fb f8b6 	bl	800568c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a526:	23c0      	movs	r3, #192	; 0xc0
 800a528:	2200      	movs	r2, #0
 800a52a:	2181      	movs	r1, #129	; 0x81
 800a52c:	f7fb f8ae 	bl	800568c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a536:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a53a:	2200      	movs	r2, #0
 800a53c:	2101      	movs	r1, #1
 800a53e:	f7fb f8a5 	bl	800568c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a54c:	2200      	movs	r2, #0
 800a54e:	2182      	movs	r1, #130	; 0x82
 800a550:	f7fb f89c 	bl	800568c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3708      	adds	r7, #8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	200012cc 	.word	0x200012cc
 800a564:	40005c00 	.word	0x40005c00

0800a568 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a574:	2300      	movs	r3, #0
 800a576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a57e:	4618      	mov	r0, r3
 800a580:	f7f9 fe4e 	bl	8004220 <HAL_PCD_Start>
 800a584:	4603      	mov	r3, r0
 800a586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a588:	7bfb      	ldrb	r3, [r7, #15]
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 f94e 	bl	800a82c <USBD_Get_USB_Status>
 800a590:	4603      	mov	r3, r0
 800a592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a594:	7bbb      	ldrb	r3, [r7, #14]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b084      	sub	sp, #16
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	4608      	mov	r0, r1
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	70fb      	strb	r3, [r7, #3]
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	70bb      	strb	r3, [r7, #2]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a5c6:	78bb      	ldrb	r3, [r7, #2]
 800a5c8:	883a      	ldrh	r2, [r7, #0]
 800a5ca:	78f9      	ldrb	r1, [r7, #3]
 800a5cc:	f7f9 ffc8 	bl	8004560 <HAL_PCD_EP_Open>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5d4:	7bfb      	ldrb	r3, [r7, #15]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 f928 	bl	800a82c <USBD_Get_USB_Status>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a604:	78fa      	ldrb	r2, [r7, #3]
 800a606:	4611      	mov	r1, r2
 800a608:	4618      	mov	r0, r3
 800a60a:	f7fa f80f 	bl	800462c <HAL_PCD_EP_Close>
 800a60e:	4603      	mov	r3, r0
 800a610:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a612:	7bfb      	ldrb	r3, [r7, #15]
 800a614:	4618      	mov	r0, r3
 800a616:	f000 f909 	bl	800a82c <USBD_Get_USB_Status>
 800a61a:	4603      	mov	r3, r0
 800a61c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a61e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a634:	2300      	movs	r3, #0
 800a636:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a638:	2300      	movs	r3, #0
 800a63a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a642:	78fa      	ldrb	r2, [r7, #3]
 800a644:	4611      	mov	r1, r2
 800a646:	4618      	mov	r0, r3
 800a648:	f7fa f8cf 	bl	80047ea <HAL_PCD_EP_SetStall>
 800a64c:	4603      	mov	r3, r0
 800a64e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a650:	7bfb      	ldrb	r3, [r7, #15]
 800a652:	4618      	mov	r0, r3
 800a654:	f000 f8ea 	bl	800a82c <USBD_Get_USB_Status>
 800a658:	4603      	mov	r3, r0
 800a65a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a65c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b084      	sub	sp, #16
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
 800a66e:	460b      	mov	r3, r1
 800a670:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a672:	2300      	movs	r3, #0
 800a674:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a676:	2300      	movs	r3, #0
 800a678:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a680:	78fa      	ldrb	r2, [r7, #3]
 800a682:	4611      	mov	r1, r2
 800a684:	4618      	mov	r0, r3
 800a686:	f7fa f910 	bl	80048aa <HAL_PCD_EP_ClrStall>
 800a68a:	4603      	mov	r3, r0
 800a68c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
 800a690:	4618      	mov	r0, r3
 800a692:	f000 f8cb 	bl	800a82c <USBD_Get_USB_Status>
 800a696:	4603      	mov	r3, r0
 800a698:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a69a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a6b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	da0c      	bge.n	800a6da <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a6c0:	78fb      	ldrb	r3, [r7, #3]
 800a6c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6c6:	68f9      	ldr	r1, [r7, #12]
 800a6c8:	1c5a      	adds	r2, r3, #1
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	4413      	add	r3, r2
 800a6d0:	00db      	lsls	r3, r3, #3
 800a6d2:	440b      	add	r3, r1
 800a6d4:	3302      	adds	r3, #2
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	e00b      	b.n	800a6f2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a6da:	78fb      	ldrb	r3, [r7, #3]
 800a6dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6e0:	68f9      	ldr	r1, [r7, #12]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	4413      	add	r3, r2
 800a6e8:	00db      	lsls	r3, r3, #3
 800a6ea:	440b      	add	r3, r1
 800a6ec:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a6f0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bc80      	pop	{r7}
 800a6fa:	4770      	bx	lr

0800a6fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	460b      	mov	r3, r1
 800a706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a708:	2300      	movs	r3, #0
 800a70a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a716:	78fa      	ldrb	r2, [r7, #3]
 800a718:	4611      	mov	r1, r2
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7f9 fefb 	bl	8004516 <HAL_PCD_SetAddress>
 800a720:	4603      	mov	r3, r0
 800a722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a724:	7bfb      	ldrb	r3, [r7, #15]
 800a726:	4618      	mov	r0, r3
 800a728:	f000 f880 	bl	800a82c <USBD_Get_USB_Status>
 800a72c:	4603      	mov	r3, r0
 800a72e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a730:	7bbb      	ldrb	r3, [r7, #14]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b086      	sub	sp, #24
 800a73e:	af00      	add	r7, sp, #0
 800a740:	60f8      	str	r0, [r7, #12]
 800a742:	607a      	str	r2, [r7, #4]
 800a744:	461a      	mov	r2, r3
 800a746:	460b      	mov	r3, r1
 800a748:	72fb      	strb	r3, [r7, #11]
 800a74a:	4613      	mov	r3, r2
 800a74c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a74e:	2300      	movs	r3, #0
 800a750:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a752:	2300      	movs	r3, #0
 800a754:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a75c:	893b      	ldrh	r3, [r7, #8]
 800a75e:	7af9      	ldrb	r1, [r7, #11]
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	f7f9 ffff 	bl	8004764 <HAL_PCD_EP_Transmit>
 800a766:	4603      	mov	r3, r0
 800a768:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a76a:	7dfb      	ldrb	r3, [r7, #23]
 800a76c:	4618      	mov	r0, r3
 800a76e:	f000 f85d 	bl	800a82c <USBD_Get_USB_Status>
 800a772:	4603      	mov	r3, r0
 800a774:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a776:	7dbb      	ldrb	r3, [r7, #22]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3718      	adds	r7, #24
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	607a      	str	r2, [r7, #4]
 800a78a:	461a      	mov	r2, r3
 800a78c:	460b      	mov	r3, r1
 800a78e:	72fb      	strb	r3, [r7, #11]
 800a790:	4613      	mov	r3, r2
 800a792:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a794:	2300      	movs	r3, #0
 800a796:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a798:	2300      	movs	r3, #0
 800a79a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7a2:	893b      	ldrh	r3, [r7, #8]
 800a7a4:	7af9      	ldrb	r1, [r7, #11]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	f7f9 ff88 	bl	80046bc <HAL_PCD_EP_Receive>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7b0:	7dfb      	ldrb	r3, [r7, #23]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 f83a 	bl	800a82c <USBD_Get_USB_Status>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b082      	sub	sp, #8
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7d8:	78fa      	ldrb	r2, [r7, #3]
 800a7da:	4611      	mov	r1, r2
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7f9 ffaa 	bl	8004736 <HAL_PCD_EP_GetRxCount>
 800a7e2:	4603      	mov	r3, r0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a7f4:	4b02      	ldr	r3, [pc, #8]	; (800a800 <USBD_static_malloc+0x14>)
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	370c      	adds	r7, #12
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bc80      	pop	{r7}
 800a7fe:	4770      	bx	lr
 800a800:	20000240 	.word	0x20000240

0800a804 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]

}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	bc80      	pop	{r7}
 800a814:	4770      	bx	lr

0800a816 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a816:	b480      	push	{r7}
 800a818:	b083      	sub	sp, #12
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	460b      	mov	r3, r1
 800a820:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a822:	bf00      	nop
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	bc80      	pop	{r7}
 800a82a:	4770      	bx	lr

0800a82c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	4603      	mov	r3, r0
 800a834:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a83a:	79fb      	ldrb	r3, [r7, #7]
 800a83c:	2b03      	cmp	r3, #3
 800a83e:	d817      	bhi.n	800a870 <USBD_Get_USB_Status+0x44>
 800a840:	a201      	add	r2, pc, #4	; (adr r2, 800a848 <USBD_Get_USB_Status+0x1c>)
 800a842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a846:	bf00      	nop
 800a848:	0800a859 	.word	0x0800a859
 800a84c:	0800a85f 	.word	0x0800a85f
 800a850:	0800a865 	.word	0x0800a865
 800a854:	0800a86b 	.word	0x0800a86b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a858:	2300      	movs	r3, #0
 800a85a:	73fb      	strb	r3, [r7, #15]
    break;
 800a85c:	e00b      	b.n	800a876 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a85e:	2302      	movs	r3, #2
 800a860:	73fb      	strb	r3, [r7, #15]
    break;
 800a862:	e008      	b.n	800a876 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a864:	2301      	movs	r3, #1
 800a866:	73fb      	strb	r3, [r7, #15]
    break;
 800a868:	e005      	b.n	800a876 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a86a:	2302      	movs	r3, #2
 800a86c:	73fb      	strb	r3, [r7, #15]
    break;
 800a86e:	e002      	b.n	800a876 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a870:	2302      	movs	r3, #2
 800a872:	73fb      	strb	r3, [r7, #15]
    break;
 800a874:	bf00      	nop
  }
  return usb_status;
 800a876:	7bfb      	ldrb	r3, [r7, #15]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bc80      	pop	{r7}
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop

0800a884 <__errno>:
 800a884:	4b01      	ldr	r3, [pc, #4]	; (800a88c <__errno+0x8>)
 800a886:	6818      	ldr	r0, [r3, #0]
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	20000194 	.word	0x20000194

0800a890 <__libc_init_array>:
 800a890:	b570      	push	{r4, r5, r6, lr}
 800a892:	2500      	movs	r5, #0
 800a894:	4e0c      	ldr	r6, [pc, #48]	; (800a8c8 <__libc_init_array+0x38>)
 800a896:	4c0d      	ldr	r4, [pc, #52]	; (800a8cc <__libc_init_array+0x3c>)
 800a898:	1ba4      	subs	r4, r4, r6
 800a89a:	10a4      	asrs	r4, r4, #2
 800a89c:	42a5      	cmp	r5, r4
 800a89e:	d109      	bne.n	800a8b4 <__libc_init_array+0x24>
 800a8a0:	f000 fc48 	bl	800b134 <_init>
 800a8a4:	2500      	movs	r5, #0
 800a8a6:	4e0a      	ldr	r6, [pc, #40]	; (800a8d0 <__libc_init_array+0x40>)
 800a8a8:	4c0a      	ldr	r4, [pc, #40]	; (800a8d4 <__libc_init_array+0x44>)
 800a8aa:	1ba4      	subs	r4, r4, r6
 800a8ac:	10a4      	asrs	r4, r4, #2
 800a8ae:	42a5      	cmp	r5, r4
 800a8b0:	d105      	bne.n	800a8be <__libc_init_array+0x2e>
 800a8b2:	bd70      	pop	{r4, r5, r6, pc}
 800a8b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a8b8:	4798      	blx	r3
 800a8ba:	3501      	adds	r5, #1
 800a8bc:	e7ee      	b.n	800a89c <__libc_init_array+0xc>
 800a8be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a8c2:	4798      	blx	r3
 800a8c4:	3501      	adds	r5, #1
 800a8c6:	e7f2      	b.n	800a8ae <__libc_init_array+0x1e>
 800a8c8:	0800b210 	.word	0x0800b210
 800a8cc:	0800b210 	.word	0x0800b210
 800a8d0:	0800b210 	.word	0x0800b210
 800a8d4:	0800b214 	.word	0x0800b214

0800a8d8 <memset>:
 800a8d8:	4603      	mov	r3, r0
 800a8da:	4402      	add	r2, r0
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d100      	bne.n	800a8e2 <memset+0xa>
 800a8e0:	4770      	bx	lr
 800a8e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a8e6:	e7f9      	b.n	800a8dc <memset+0x4>

0800a8e8 <sniprintf>:
 800a8e8:	b40c      	push	{r2, r3}
 800a8ea:	b530      	push	{r4, r5, lr}
 800a8ec:	4b17      	ldr	r3, [pc, #92]	; (800a94c <sniprintf+0x64>)
 800a8ee:	1e0c      	subs	r4, r1, #0
 800a8f0:	b09d      	sub	sp, #116	; 0x74
 800a8f2:	681d      	ldr	r5, [r3, #0]
 800a8f4:	da08      	bge.n	800a908 <sniprintf+0x20>
 800a8f6:	238b      	movs	r3, #139	; 0x8b
 800a8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fc:	602b      	str	r3, [r5, #0]
 800a8fe:	b01d      	add	sp, #116	; 0x74
 800a900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a904:	b002      	add	sp, #8
 800a906:	4770      	bx	lr
 800a908:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a90c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a910:	bf0c      	ite	eq
 800a912:	4623      	moveq	r3, r4
 800a914:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a918:	9304      	str	r3, [sp, #16]
 800a91a:	9307      	str	r3, [sp, #28]
 800a91c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a920:	9002      	str	r0, [sp, #8]
 800a922:	9006      	str	r0, [sp, #24]
 800a924:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a928:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a92a:	ab21      	add	r3, sp, #132	; 0x84
 800a92c:	a902      	add	r1, sp, #8
 800a92e:	4628      	mov	r0, r5
 800a930:	9301      	str	r3, [sp, #4]
 800a932:	f000 f867 	bl	800aa04 <_svfiprintf_r>
 800a936:	1c43      	adds	r3, r0, #1
 800a938:	bfbc      	itt	lt
 800a93a:	238b      	movlt	r3, #139	; 0x8b
 800a93c:	602b      	strlt	r3, [r5, #0]
 800a93e:	2c00      	cmp	r4, #0
 800a940:	d0dd      	beq.n	800a8fe <sniprintf+0x16>
 800a942:	2200      	movs	r2, #0
 800a944:	9b02      	ldr	r3, [sp, #8]
 800a946:	701a      	strb	r2, [r3, #0]
 800a948:	e7d9      	b.n	800a8fe <sniprintf+0x16>
 800a94a:	bf00      	nop
 800a94c:	20000194 	.word	0x20000194

0800a950 <__ssputs_r>:
 800a950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a954:	688e      	ldr	r6, [r1, #8]
 800a956:	4682      	mov	sl, r0
 800a958:	429e      	cmp	r6, r3
 800a95a:	460c      	mov	r4, r1
 800a95c:	4690      	mov	r8, r2
 800a95e:	4699      	mov	r9, r3
 800a960:	d837      	bhi.n	800a9d2 <__ssputs_r+0x82>
 800a962:	898a      	ldrh	r2, [r1, #12]
 800a964:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a968:	d031      	beq.n	800a9ce <__ssputs_r+0x7e>
 800a96a:	2302      	movs	r3, #2
 800a96c:	6825      	ldr	r5, [r4, #0]
 800a96e:	6909      	ldr	r1, [r1, #16]
 800a970:	1a6f      	subs	r7, r5, r1
 800a972:	6965      	ldr	r5, [r4, #20]
 800a974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a978:	fb95 f5f3 	sdiv	r5, r5, r3
 800a97c:	f109 0301 	add.w	r3, r9, #1
 800a980:	443b      	add	r3, r7
 800a982:	429d      	cmp	r5, r3
 800a984:	bf38      	it	cc
 800a986:	461d      	movcc	r5, r3
 800a988:	0553      	lsls	r3, r2, #21
 800a98a:	d530      	bpl.n	800a9ee <__ssputs_r+0x9e>
 800a98c:	4629      	mov	r1, r5
 800a98e:	f000 fb37 	bl	800b000 <_malloc_r>
 800a992:	4606      	mov	r6, r0
 800a994:	b950      	cbnz	r0, 800a9ac <__ssputs_r+0x5c>
 800a996:	230c      	movs	r3, #12
 800a998:	f04f 30ff 	mov.w	r0, #4294967295
 800a99c:	f8ca 3000 	str.w	r3, [sl]
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9a6:	81a3      	strh	r3, [r4, #12]
 800a9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ac:	463a      	mov	r2, r7
 800a9ae:	6921      	ldr	r1, [r4, #16]
 800a9b0:	f000 fab6 	bl	800af20 <memcpy>
 800a9b4:	89a3      	ldrh	r3, [r4, #12]
 800a9b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9be:	81a3      	strh	r3, [r4, #12]
 800a9c0:	6126      	str	r6, [r4, #16]
 800a9c2:	443e      	add	r6, r7
 800a9c4:	6026      	str	r6, [r4, #0]
 800a9c6:	464e      	mov	r6, r9
 800a9c8:	6165      	str	r5, [r4, #20]
 800a9ca:	1bed      	subs	r5, r5, r7
 800a9cc:	60a5      	str	r5, [r4, #8]
 800a9ce:	454e      	cmp	r6, r9
 800a9d0:	d900      	bls.n	800a9d4 <__ssputs_r+0x84>
 800a9d2:	464e      	mov	r6, r9
 800a9d4:	4632      	mov	r2, r6
 800a9d6:	4641      	mov	r1, r8
 800a9d8:	6820      	ldr	r0, [r4, #0]
 800a9da:	f000 faac 	bl	800af36 <memmove>
 800a9de:	68a3      	ldr	r3, [r4, #8]
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	1b9b      	subs	r3, r3, r6
 800a9e4:	60a3      	str	r3, [r4, #8]
 800a9e6:	6823      	ldr	r3, [r4, #0]
 800a9e8:	441e      	add	r6, r3
 800a9ea:	6026      	str	r6, [r4, #0]
 800a9ec:	e7dc      	b.n	800a9a8 <__ssputs_r+0x58>
 800a9ee:	462a      	mov	r2, r5
 800a9f0:	f000 fb60 	bl	800b0b4 <_realloc_r>
 800a9f4:	4606      	mov	r6, r0
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d1e2      	bne.n	800a9c0 <__ssputs_r+0x70>
 800a9fa:	6921      	ldr	r1, [r4, #16]
 800a9fc:	4650      	mov	r0, sl
 800a9fe:	f000 fab3 	bl	800af68 <_free_r>
 800aa02:	e7c8      	b.n	800a996 <__ssputs_r+0x46>

0800aa04 <_svfiprintf_r>:
 800aa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa08:	461d      	mov	r5, r3
 800aa0a:	898b      	ldrh	r3, [r1, #12]
 800aa0c:	b09d      	sub	sp, #116	; 0x74
 800aa0e:	061f      	lsls	r7, r3, #24
 800aa10:	4680      	mov	r8, r0
 800aa12:	460c      	mov	r4, r1
 800aa14:	4616      	mov	r6, r2
 800aa16:	d50f      	bpl.n	800aa38 <_svfiprintf_r+0x34>
 800aa18:	690b      	ldr	r3, [r1, #16]
 800aa1a:	b96b      	cbnz	r3, 800aa38 <_svfiprintf_r+0x34>
 800aa1c:	2140      	movs	r1, #64	; 0x40
 800aa1e:	f000 faef 	bl	800b000 <_malloc_r>
 800aa22:	6020      	str	r0, [r4, #0]
 800aa24:	6120      	str	r0, [r4, #16]
 800aa26:	b928      	cbnz	r0, 800aa34 <_svfiprintf_r+0x30>
 800aa28:	230c      	movs	r3, #12
 800aa2a:	f8c8 3000 	str.w	r3, [r8]
 800aa2e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa32:	e0c8      	b.n	800abc6 <_svfiprintf_r+0x1c2>
 800aa34:	2340      	movs	r3, #64	; 0x40
 800aa36:	6163      	str	r3, [r4, #20]
 800aa38:	2300      	movs	r3, #0
 800aa3a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa3c:	2320      	movs	r3, #32
 800aa3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa42:	2330      	movs	r3, #48	; 0x30
 800aa44:	f04f 0b01 	mov.w	fp, #1
 800aa48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa4c:	9503      	str	r5, [sp, #12]
 800aa4e:	4637      	mov	r7, r6
 800aa50:	463d      	mov	r5, r7
 800aa52:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aa56:	b10b      	cbz	r3, 800aa5c <_svfiprintf_r+0x58>
 800aa58:	2b25      	cmp	r3, #37	; 0x25
 800aa5a:	d13e      	bne.n	800aada <_svfiprintf_r+0xd6>
 800aa5c:	ebb7 0a06 	subs.w	sl, r7, r6
 800aa60:	d00b      	beq.n	800aa7a <_svfiprintf_r+0x76>
 800aa62:	4653      	mov	r3, sl
 800aa64:	4632      	mov	r2, r6
 800aa66:	4621      	mov	r1, r4
 800aa68:	4640      	mov	r0, r8
 800aa6a:	f7ff ff71 	bl	800a950 <__ssputs_r>
 800aa6e:	3001      	adds	r0, #1
 800aa70:	f000 80a4 	beq.w	800abbc <_svfiprintf_r+0x1b8>
 800aa74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa76:	4453      	add	r3, sl
 800aa78:	9309      	str	r3, [sp, #36]	; 0x24
 800aa7a:	783b      	ldrb	r3, [r7, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 809d 	beq.w	800abbc <_svfiprintf_r+0x1b8>
 800aa82:	2300      	movs	r3, #0
 800aa84:	f04f 32ff 	mov.w	r2, #4294967295
 800aa88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa8c:	9304      	str	r3, [sp, #16]
 800aa8e:	9307      	str	r3, [sp, #28]
 800aa90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa94:	931a      	str	r3, [sp, #104]	; 0x68
 800aa96:	462f      	mov	r7, r5
 800aa98:	2205      	movs	r2, #5
 800aa9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800aa9e:	4850      	ldr	r0, [pc, #320]	; (800abe0 <_svfiprintf_r+0x1dc>)
 800aaa0:	f000 fa30 	bl	800af04 <memchr>
 800aaa4:	9b04      	ldr	r3, [sp, #16]
 800aaa6:	b9d0      	cbnz	r0, 800aade <_svfiprintf_r+0xda>
 800aaa8:	06d9      	lsls	r1, r3, #27
 800aaaa:	bf44      	itt	mi
 800aaac:	2220      	movmi	r2, #32
 800aaae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aab2:	071a      	lsls	r2, r3, #28
 800aab4:	bf44      	itt	mi
 800aab6:	222b      	movmi	r2, #43	; 0x2b
 800aab8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aabc:	782a      	ldrb	r2, [r5, #0]
 800aabe:	2a2a      	cmp	r2, #42	; 0x2a
 800aac0:	d015      	beq.n	800aaee <_svfiprintf_r+0xea>
 800aac2:	462f      	mov	r7, r5
 800aac4:	2000      	movs	r0, #0
 800aac6:	250a      	movs	r5, #10
 800aac8:	9a07      	ldr	r2, [sp, #28]
 800aaca:	4639      	mov	r1, r7
 800aacc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aad0:	3b30      	subs	r3, #48	; 0x30
 800aad2:	2b09      	cmp	r3, #9
 800aad4:	d94d      	bls.n	800ab72 <_svfiprintf_r+0x16e>
 800aad6:	b1b8      	cbz	r0, 800ab08 <_svfiprintf_r+0x104>
 800aad8:	e00f      	b.n	800aafa <_svfiprintf_r+0xf6>
 800aada:	462f      	mov	r7, r5
 800aadc:	e7b8      	b.n	800aa50 <_svfiprintf_r+0x4c>
 800aade:	4a40      	ldr	r2, [pc, #256]	; (800abe0 <_svfiprintf_r+0x1dc>)
 800aae0:	463d      	mov	r5, r7
 800aae2:	1a80      	subs	r0, r0, r2
 800aae4:	fa0b f000 	lsl.w	r0, fp, r0
 800aae8:	4318      	orrs	r0, r3
 800aaea:	9004      	str	r0, [sp, #16]
 800aaec:	e7d3      	b.n	800aa96 <_svfiprintf_r+0x92>
 800aaee:	9a03      	ldr	r2, [sp, #12]
 800aaf0:	1d11      	adds	r1, r2, #4
 800aaf2:	6812      	ldr	r2, [r2, #0]
 800aaf4:	9103      	str	r1, [sp, #12]
 800aaf6:	2a00      	cmp	r2, #0
 800aaf8:	db01      	blt.n	800aafe <_svfiprintf_r+0xfa>
 800aafa:	9207      	str	r2, [sp, #28]
 800aafc:	e004      	b.n	800ab08 <_svfiprintf_r+0x104>
 800aafe:	4252      	negs	r2, r2
 800ab00:	f043 0302 	orr.w	r3, r3, #2
 800ab04:	9207      	str	r2, [sp, #28]
 800ab06:	9304      	str	r3, [sp, #16]
 800ab08:	783b      	ldrb	r3, [r7, #0]
 800ab0a:	2b2e      	cmp	r3, #46	; 0x2e
 800ab0c:	d10c      	bne.n	800ab28 <_svfiprintf_r+0x124>
 800ab0e:	787b      	ldrb	r3, [r7, #1]
 800ab10:	2b2a      	cmp	r3, #42	; 0x2a
 800ab12:	d133      	bne.n	800ab7c <_svfiprintf_r+0x178>
 800ab14:	9b03      	ldr	r3, [sp, #12]
 800ab16:	3702      	adds	r7, #2
 800ab18:	1d1a      	adds	r2, r3, #4
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	9203      	str	r2, [sp, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	bfb8      	it	lt
 800ab22:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab26:	9305      	str	r3, [sp, #20]
 800ab28:	4d2e      	ldr	r5, [pc, #184]	; (800abe4 <_svfiprintf_r+0x1e0>)
 800ab2a:	2203      	movs	r2, #3
 800ab2c:	7839      	ldrb	r1, [r7, #0]
 800ab2e:	4628      	mov	r0, r5
 800ab30:	f000 f9e8 	bl	800af04 <memchr>
 800ab34:	b138      	cbz	r0, 800ab46 <_svfiprintf_r+0x142>
 800ab36:	2340      	movs	r3, #64	; 0x40
 800ab38:	1b40      	subs	r0, r0, r5
 800ab3a:	fa03 f000 	lsl.w	r0, r3, r0
 800ab3e:	9b04      	ldr	r3, [sp, #16]
 800ab40:	3701      	adds	r7, #1
 800ab42:	4303      	orrs	r3, r0
 800ab44:	9304      	str	r3, [sp, #16]
 800ab46:	7839      	ldrb	r1, [r7, #0]
 800ab48:	2206      	movs	r2, #6
 800ab4a:	4827      	ldr	r0, [pc, #156]	; (800abe8 <_svfiprintf_r+0x1e4>)
 800ab4c:	1c7e      	adds	r6, r7, #1
 800ab4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab52:	f000 f9d7 	bl	800af04 <memchr>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	d038      	beq.n	800abcc <_svfiprintf_r+0x1c8>
 800ab5a:	4b24      	ldr	r3, [pc, #144]	; (800abec <_svfiprintf_r+0x1e8>)
 800ab5c:	bb13      	cbnz	r3, 800aba4 <_svfiprintf_r+0x1a0>
 800ab5e:	9b03      	ldr	r3, [sp, #12]
 800ab60:	3307      	adds	r3, #7
 800ab62:	f023 0307 	bic.w	r3, r3, #7
 800ab66:	3308      	adds	r3, #8
 800ab68:	9303      	str	r3, [sp, #12]
 800ab6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab6c:	444b      	add	r3, r9
 800ab6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab70:	e76d      	b.n	800aa4e <_svfiprintf_r+0x4a>
 800ab72:	fb05 3202 	mla	r2, r5, r2, r3
 800ab76:	2001      	movs	r0, #1
 800ab78:	460f      	mov	r7, r1
 800ab7a:	e7a6      	b.n	800aaca <_svfiprintf_r+0xc6>
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	250a      	movs	r5, #10
 800ab80:	4619      	mov	r1, r3
 800ab82:	3701      	adds	r7, #1
 800ab84:	9305      	str	r3, [sp, #20]
 800ab86:	4638      	mov	r0, r7
 800ab88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab8c:	3a30      	subs	r2, #48	; 0x30
 800ab8e:	2a09      	cmp	r2, #9
 800ab90:	d903      	bls.n	800ab9a <_svfiprintf_r+0x196>
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d0c8      	beq.n	800ab28 <_svfiprintf_r+0x124>
 800ab96:	9105      	str	r1, [sp, #20]
 800ab98:	e7c6      	b.n	800ab28 <_svfiprintf_r+0x124>
 800ab9a:	fb05 2101 	mla	r1, r5, r1, r2
 800ab9e:	2301      	movs	r3, #1
 800aba0:	4607      	mov	r7, r0
 800aba2:	e7f0      	b.n	800ab86 <_svfiprintf_r+0x182>
 800aba4:	ab03      	add	r3, sp, #12
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	4622      	mov	r2, r4
 800abaa:	4b11      	ldr	r3, [pc, #68]	; (800abf0 <_svfiprintf_r+0x1ec>)
 800abac:	a904      	add	r1, sp, #16
 800abae:	4640      	mov	r0, r8
 800abb0:	f3af 8000 	nop.w
 800abb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800abb8:	4681      	mov	r9, r0
 800abba:	d1d6      	bne.n	800ab6a <_svfiprintf_r+0x166>
 800abbc:	89a3      	ldrh	r3, [r4, #12]
 800abbe:	065b      	lsls	r3, r3, #25
 800abc0:	f53f af35 	bmi.w	800aa2e <_svfiprintf_r+0x2a>
 800abc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abc6:	b01d      	add	sp, #116	; 0x74
 800abc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abcc:	ab03      	add	r3, sp, #12
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	4622      	mov	r2, r4
 800abd2:	4b07      	ldr	r3, [pc, #28]	; (800abf0 <_svfiprintf_r+0x1ec>)
 800abd4:	a904      	add	r1, sp, #16
 800abd6:	4640      	mov	r0, r8
 800abd8:	f000 f882 	bl	800ace0 <_printf_i>
 800abdc:	e7ea      	b.n	800abb4 <_svfiprintf_r+0x1b0>
 800abde:	bf00      	nop
 800abe0:	0800b1dc 	.word	0x0800b1dc
 800abe4:	0800b1e2 	.word	0x0800b1e2
 800abe8:	0800b1e6 	.word	0x0800b1e6
 800abec:	00000000 	.word	0x00000000
 800abf0:	0800a951 	.word	0x0800a951

0800abf4 <_printf_common>:
 800abf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abf8:	4691      	mov	r9, r2
 800abfa:	461f      	mov	r7, r3
 800abfc:	688a      	ldr	r2, [r1, #8]
 800abfe:	690b      	ldr	r3, [r1, #16]
 800ac00:	4606      	mov	r6, r0
 800ac02:	4293      	cmp	r3, r2
 800ac04:	bfb8      	it	lt
 800ac06:	4613      	movlt	r3, r2
 800ac08:	f8c9 3000 	str.w	r3, [r9]
 800ac0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac10:	460c      	mov	r4, r1
 800ac12:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac16:	b112      	cbz	r2, 800ac1e <_printf_common+0x2a>
 800ac18:	3301      	adds	r3, #1
 800ac1a:	f8c9 3000 	str.w	r3, [r9]
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	0699      	lsls	r1, r3, #26
 800ac22:	bf42      	ittt	mi
 800ac24:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ac28:	3302      	addmi	r3, #2
 800ac2a:	f8c9 3000 	strmi.w	r3, [r9]
 800ac2e:	6825      	ldr	r5, [r4, #0]
 800ac30:	f015 0506 	ands.w	r5, r5, #6
 800ac34:	d107      	bne.n	800ac46 <_printf_common+0x52>
 800ac36:	f104 0a19 	add.w	sl, r4, #25
 800ac3a:	68e3      	ldr	r3, [r4, #12]
 800ac3c:	f8d9 2000 	ldr.w	r2, [r9]
 800ac40:	1a9b      	subs	r3, r3, r2
 800ac42:	42ab      	cmp	r3, r5
 800ac44:	dc29      	bgt.n	800ac9a <_printf_common+0xa6>
 800ac46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ac4a:	6822      	ldr	r2, [r4, #0]
 800ac4c:	3300      	adds	r3, #0
 800ac4e:	bf18      	it	ne
 800ac50:	2301      	movne	r3, #1
 800ac52:	0692      	lsls	r2, r2, #26
 800ac54:	d42e      	bmi.n	800acb4 <_printf_common+0xc0>
 800ac56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac5a:	4639      	mov	r1, r7
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	47c0      	blx	r8
 800ac60:	3001      	adds	r0, #1
 800ac62:	d021      	beq.n	800aca8 <_printf_common+0xb4>
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	68e5      	ldr	r5, [r4, #12]
 800ac68:	f003 0306 	and.w	r3, r3, #6
 800ac6c:	2b04      	cmp	r3, #4
 800ac6e:	bf18      	it	ne
 800ac70:	2500      	movne	r5, #0
 800ac72:	f8d9 2000 	ldr.w	r2, [r9]
 800ac76:	f04f 0900 	mov.w	r9, #0
 800ac7a:	bf08      	it	eq
 800ac7c:	1aad      	subeq	r5, r5, r2
 800ac7e:	68a3      	ldr	r3, [r4, #8]
 800ac80:	6922      	ldr	r2, [r4, #16]
 800ac82:	bf08      	it	eq
 800ac84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	bfc4      	itt	gt
 800ac8c:	1a9b      	subgt	r3, r3, r2
 800ac8e:	18ed      	addgt	r5, r5, r3
 800ac90:	341a      	adds	r4, #26
 800ac92:	454d      	cmp	r5, r9
 800ac94:	d11a      	bne.n	800accc <_printf_common+0xd8>
 800ac96:	2000      	movs	r0, #0
 800ac98:	e008      	b.n	800acac <_printf_common+0xb8>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	4652      	mov	r2, sl
 800ac9e:	4639      	mov	r1, r7
 800aca0:	4630      	mov	r0, r6
 800aca2:	47c0      	blx	r8
 800aca4:	3001      	adds	r0, #1
 800aca6:	d103      	bne.n	800acb0 <_printf_common+0xbc>
 800aca8:	f04f 30ff 	mov.w	r0, #4294967295
 800acac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb0:	3501      	adds	r5, #1
 800acb2:	e7c2      	b.n	800ac3a <_printf_common+0x46>
 800acb4:	2030      	movs	r0, #48	; 0x30
 800acb6:	18e1      	adds	r1, r4, r3
 800acb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acbc:	1c5a      	adds	r2, r3, #1
 800acbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acc2:	4422      	add	r2, r4
 800acc4:	3302      	adds	r3, #2
 800acc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acca:	e7c4      	b.n	800ac56 <_printf_common+0x62>
 800accc:	2301      	movs	r3, #1
 800acce:	4622      	mov	r2, r4
 800acd0:	4639      	mov	r1, r7
 800acd2:	4630      	mov	r0, r6
 800acd4:	47c0      	blx	r8
 800acd6:	3001      	adds	r0, #1
 800acd8:	d0e6      	beq.n	800aca8 <_printf_common+0xb4>
 800acda:	f109 0901 	add.w	r9, r9, #1
 800acde:	e7d8      	b.n	800ac92 <_printf_common+0x9e>

0800ace0 <_printf_i>:
 800ace0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ace4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ace8:	460c      	mov	r4, r1
 800acea:	7e09      	ldrb	r1, [r1, #24]
 800acec:	b085      	sub	sp, #20
 800acee:	296e      	cmp	r1, #110	; 0x6e
 800acf0:	4617      	mov	r7, r2
 800acf2:	4606      	mov	r6, r0
 800acf4:	4698      	mov	r8, r3
 800acf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acf8:	f000 80b3 	beq.w	800ae62 <_printf_i+0x182>
 800acfc:	d822      	bhi.n	800ad44 <_printf_i+0x64>
 800acfe:	2963      	cmp	r1, #99	; 0x63
 800ad00:	d036      	beq.n	800ad70 <_printf_i+0x90>
 800ad02:	d80a      	bhi.n	800ad1a <_printf_i+0x3a>
 800ad04:	2900      	cmp	r1, #0
 800ad06:	f000 80b9 	beq.w	800ae7c <_printf_i+0x19c>
 800ad0a:	2958      	cmp	r1, #88	; 0x58
 800ad0c:	f000 8083 	beq.w	800ae16 <_printf_i+0x136>
 800ad10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ad18:	e032      	b.n	800ad80 <_printf_i+0xa0>
 800ad1a:	2964      	cmp	r1, #100	; 0x64
 800ad1c:	d001      	beq.n	800ad22 <_printf_i+0x42>
 800ad1e:	2969      	cmp	r1, #105	; 0x69
 800ad20:	d1f6      	bne.n	800ad10 <_printf_i+0x30>
 800ad22:	6820      	ldr	r0, [r4, #0]
 800ad24:	6813      	ldr	r3, [r2, #0]
 800ad26:	0605      	lsls	r5, r0, #24
 800ad28:	f103 0104 	add.w	r1, r3, #4
 800ad2c:	d52a      	bpl.n	800ad84 <_printf_i+0xa4>
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	6011      	str	r1, [r2, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	da03      	bge.n	800ad3e <_printf_i+0x5e>
 800ad36:	222d      	movs	r2, #45	; 0x2d
 800ad38:	425b      	negs	r3, r3
 800ad3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ad3e:	486f      	ldr	r0, [pc, #444]	; (800aefc <_printf_i+0x21c>)
 800ad40:	220a      	movs	r2, #10
 800ad42:	e039      	b.n	800adb8 <_printf_i+0xd8>
 800ad44:	2973      	cmp	r1, #115	; 0x73
 800ad46:	f000 809d 	beq.w	800ae84 <_printf_i+0x1a4>
 800ad4a:	d808      	bhi.n	800ad5e <_printf_i+0x7e>
 800ad4c:	296f      	cmp	r1, #111	; 0x6f
 800ad4e:	d020      	beq.n	800ad92 <_printf_i+0xb2>
 800ad50:	2970      	cmp	r1, #112	; 0x70
 800ad52:	d1dd      	bne.n	800ad10 <_printf_i+0x30>
 800ad54:	6823      	ldr	r3, [r4, #0]
 800ad56:	f043 0320 	orr.w	r3, r3, #32
 800ad5a:	6023      	str	r3, [r4, #0]
 800ad5c:	e003      	b.n	800ad66 <_printf_i+0x86>
 800ad5e:	2975      	cmp	r1, #117	; 0x75
 800ad60:	d017      	beq.n	800ad92 <_printf_i+0xb2>
 800ad62:	2978      	cmp	r1, #120	; 0x78
 800ad64:	d1d4      	bne.n	800ad10 <_printf_i+0x30>
 800ad66:	2378      	movs	r3, #120	; 0x78
 800ad68:	4865      	ldr	r0, [pc, #404]	; (800af00 <_printf_i+0x220>)
 800ad6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad6e:	e055      	b.n	800ae1c <_printf_i+0x13c>
 800ad70:	6813      	ldr	r3, [r2, #0]
 800ad72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad76:	1d19      	adds	r1, r3, #4
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	6011      	str	r1, [r2, #0]
 800ad7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad80:	2301      	movs	r3, #1
 800ad82:	e08c      	b.n	800ae9e <_printf_i+0x1be>
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad8a:	6011      	str	r1, [r2, #0]
 800ad8c:	bf18      	it	ne
 800ad8e:	b21b      	sxthne	r3, r3
 800ad90:	e7cf      	b.n	800ad32 <_printf_i+0x52>
 800ad92:	6813      	ldr	r3, [r2, #0]
 800ad94:	6825      	ldr	r5, [r4, #0]
 800ad96:	1d18      	adds	r0, r3, #4
 800ad98:	6010      	str	r0, [r2, #0]
 800ad9a:	0628      	lsls	r0, r5, #24
 800ad9c:	d501      	bpl.n	800ada2 <_printf_i+0xc2>
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	e002      	b.n	800ada8 <_printf_i+0xc8>
 800ada2:	0668      	lsls	r0, r5, #25
 800ada4:	d5fb      	bpl.n	800ad9e <_printf_i+0xbe>
 800ada6:	881b      	ldrh	r3, [r3, #0]
 800ada8:	296f      	cmp	r1, #111	; 0x6f
 800adaa:	bf14      	ite	ne
 800adac:	220a      	movne	r2, #10
 800adae:	2208      	moveq	r2, #8
 800adb0:	4852      	ldr	r0, [pc, #328]	; (800aefc <_printf_i+0x21c>)
 800adb2:	2100      	movs	r1, #0
 800adb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adb8:	6865      	ldr	r5, [r4, #4]
 800adba:	2d00      	cmp	r5, #0
 800adbc:	60a5      	str	r5, [r4, #8]
 800adbe:	f2c0 8095 	blt.w	800aeec <_printf_i+0x20c>
 800adc2:	6821      	ldr	r1, [r4, #0]
 800adc4:	f021 0104 	bic.w	r1, r1, #4
 800adc8:	6021      	str	r1, [r4, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d13d      	bne.n	800ae4a <_printf_i+0x16a>
 800adce:	2d00      	cmp	r5, #0
 800add0:	f040 808e 	bne.w	800aef0 <_printf_i+0x210>
 800add4:	4665      	mov	r5, ip
 800add6:	2a08      	cmp	r2, #8
 800add8:	d10b      	bne.n	800adf2 <_printf_i+0x112>
 800adda:	6823      	ldr	r3, [r4, #0]
 800addc:	07db      	lsls	r3, r3, #31
 800adde:	d508      	bpl.n	800adf2 <_printf_i+0x112>
 800ade0:	6923      	ldr	r3, [r4, #16]
 800ade2:	6862      	ldr	r2, [r4, #4]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	bfde      	ittt	le
 800ade8:	2330      	movle	r3, #48	; 0x30
 800adea:	f805 3c01 	strble.w	r3, [r5, #-1]
 800adee:	f105 35ff 	addle.w	r5, r5, #4294967295
 800adf2:	ebac 0305 	sub.w	r3, ip, r5
 800adf6:	6123      	str	r3, [r4, #16]
 800adf8:	f8cd 8000 	str.w	r8, [sp]
 800adfc:	463b      	mov	r3, r7
 800adfe:	aa03      	add	r2, sp, #12
 800ae00:	4621      	mov	r1, r4
 800ae02:	4630      	mov	r0, r6
 800ae04:	f7ff fef6 	bl	800abf4 <_printf_common>
 800ae08:	3001      	adds	r0, #1
 800ae0a:	d14d      	bne.n	800aea8 <_printf_i+0x1c8>
 800ae0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae10:	b005      	add	sp, #20
 800ae12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae16:	4839      	ldr	r0, [pc, #228]	; (800aefc <_printf_i+0x21c>)
 800ae18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ae1c:	6813      	ldr	r3, [r2, #0]
 800ae1e:	6821      	ldr	r1, [r4, #0]
 800ae20:	1d1d      	adds	r5, r3, #4
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	6015      	str	r5, [r2, #0]
 800ae26:	060a      	lsls	r2, r1, #24
 800ae28:	d50b      	bpl.n	800ae42 <_printf_i+0x162>
 800ae2a:	07ca      	lsls	r2, r1, #31
 800ae2c:	bf44      	itt	mi
 800ae2e:	f041 0120 	orrmi.w	r1, r1, #32
 800ae32:	6021      	strmi	r1, [r4, #0]
 800ae34:	b91b      	cbnz	r3, 800ae3e <_printf_i+0x15e>
 800ae36:	6822      	ldr	r2, [r4, #0]
 800ae38:	f022 0220 	bic.w	r2, r2, #32
 800ae3c:	6022      	str	r2, [r4, #0]
 800ae3e:	2210      	movs	r2, #16
 800ae40:	e7b7      	b.n	800adb2 <_printf_i+0xd2>
 800ae42:	064d      	lsls	r5, r1, #25
 800ae44:	bf48      	it	mi
 800ae46:	b29b      	uxthmi	r3, r3
 800ae48:	e7ef      	b.n	800ae2a <_printf_i+0x14a>
 800ae4a:	4665      	mov	r5, ip
 800ae4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae50:	fb02 3311 	mls	r3, r2, r1, r3
 800ae54:	5cc3      	ldrb	r3, [r0, r3]
 800ae56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	2900      	cmp	r1, #0
 800ae5e:	d1f5      	bne.n	800ae4c <_printf_i+0x16c>
 800ae60:	e7b9      	b.n	800add6 <_printf_i+0xf6>
 800ae62:	6813      	ldr	r3, [r2, #0]
 800ae64:	6825      	ldr	r5, [r4, #0]
 800ae66:	1d18      	adds	r0, r3, #4
 800ae68:	6961      	ldr	r1, [r4, #20]
 800ae6a:	6010      	str	r0, [r2, #0]
 800ae6c:	0628      	lsls	r0, r5, #24
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	d501      	bpl.n	800ae76 <_printf_i+0x196>
 800ae72:	6019      	str	r1, [r3, #0]
 800ae74:	e002      	b.n	800ae7c <_printf_i+0x19c>
 800ae76:	066a      	lsls	r2, r5, #25
 800ae78:	d5fb      	bpl.n	800ae72 <_printf_i+0x192>
 800ae7a:	8019      	strh	r1, [r3, #0]
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	4665      	mov	r5, ip
 800ae80:	6123      	str	r3, [r4, #16]
 800ae82:	e7b9      	b.n	800adf8 <_printf_i+0x118>
 800ae84:	6813      	ldr	r3, [r2, #0]
 800ae86:	1d19      	adds	r1, r3, #4
 800ae88:	6011      	str	r1, [r2, #0]
 800ae8a:	681d      	ldr	r5, [r3, #0]
 800ae8c:	6862      	ldr	r2, [r4, #4]
 800ae8e:	2100      	movs	r1, #0
 800ae90:	4628      	mov	r0, r5
 800ae92:	f000 f837 	bl	800af04 <memchr>
 800ae96:	b108      	cbz	r0, 800ae9c <_printf_i+0x1bc>
 800ae98:	1b40      	subs	r0, r0, r5
 800ae9a:	6060      	str	r0, [r4, #4]
 800ae9c:	6863      	ldr	r3, [r4, #4]
 800ae9e:	6123      	str	r3, [r4, #16]
 800aea0:	2300      	movs	r3, #0
 800aea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aea6:	e7a7      	b.n	800adf8 <_printf_i+0x118>
 800aea8:	6923      	ldr	r3, [r4, #16]
 800aeaa:	462a      	mov	r2, r5
 800aeac:	4639      	mov	r1, r7
 800aeae:	4630      	mov	r0, r6
 800aeb0:	47c0      	blx	r8
 800aeb2:	3001      	adds	r0, #1
 800aeb4:	d0aa      	beq.n	800ae0c <_printf_i+0x12c>
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	079b      	lsls	r3, r3, #30
 800aeba:	d413      	bmi.n	800aee4 <_printf_i+0x204>
 800aebc:	68e0      	ldr	r0, [r4, #12]
 800aebe:	9b03      	ldr	r3, [sp, #12]
 800aec0:	4298      	cmp	r0, r3
 800aec2:	bfb8      	it	lt
 800aec4:	4618      	movlt	r0, r3
 800aec6:	e7a3      	b.n	800ae10 <_printf_i+0x130>
 800aec8:	2301      	movs	r3, #1
 800aeca:	464a      	mov	r2, r9
 800aecc:	4639      	mov	r1, r7
 800aece:	4630      	mov	r0, r6
 800aed0:	47c0      	blx	r8
 800aed2:	3001      	adds	r0, #1
 800aed4:	d09a      	beq.n	800ae0c <_printf_i+0x12c>
 800aed6:	3501      	adds	r5, #1
 800aed8:	68e3      	ldr	r3, [r4, #12]
 800aeda:	9a03      	ldr	r2, [sp, #12]
 800aedc:	1a9b      	subs	r3, r3, r2
 800aede:	42ab      	cmp	r3, r5
 800aee0:	dcf2      	bgt.n	800aec8 <_printf_i+0x1e8>
 800aee2:	e7eb      	b.n	800aebc <_printf_i+0x1dc>
 800aee4:	2500      	movs	r5, #0
 800aee6:	f104 0919 	add.w	r9, r4, #25
 800aeea:	e7f5      	b.n	800aed8 <_printf_i+0x1f8>
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d1ac      	bne.n	800ae4a <_printf_i+0x16a>
 800aef0:	7803      	ldrb	r3, [r0, #0]
 800aef2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aef6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aefa:	e76c      	b.n	800add6 <_printf_i+0xf6>
 800aefc:	0800b1ed 	.word	0x0800b1ed
 800af00:	0800b1fe 	.word	0x0800b1fe

0800af04 <memchr>:
 800af04:	b510      	push	{r4, lr}
 800af06:	b2c9      	uxtb	r1, r1
 800af08:	4402      	add	r2, r0
 800af0a:	4290      	cmp	r0, r2
 800af0c:	4603      	mov	r3, r0
 800af0e:	d101      	bne.n	800af14 <memchr+0x10>
 800af10:	2300      	movs	r3, #0
 800af12:	e003      	b.n	800af1c <memchr+0x18>
 800af14:	781c      	ldrb	r4, [r3, #0]
 800af16:	3001      	adds	r0, #1
 800af18:	428c      	cmp	r4, r1
 800af1a:	d1f6      	bne.n	800af0a <memchr+0x6>
 800af1c:	4618      	mov	r0, r3
 800af1e:	bd10      	pop	{r4, pc}

0800af20 <memcpy>:
 800af20:	b510      	push	{r4, lr}
 800af22:	1e43      	subs	r3, r0, #1
 800af24:	440a      	add	r2, r1
 800af26:	4291      	cmp	r1, r2
 800af28:	d100      	bne.n	800af2c <memcpy+0xc>
 800af2a:	bd10      	pop	{r4, pc}
 800af2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af34:	e7f7      	b.n	800af26 <memcpy+0x6>

0800af36 <memmove>:
 800af36:	4288      	cmp	r0, r1
 800af38:	b510      	push	{r4, lr}
 800af3a:	eb01 0302 	add.w	r3, r1, r2
 800af3e:	d807      	bhi.n	800af50 <memmove+0x1a>
 800af40:	1e42      	subs	r2, r0, #1
 800af42:	4299      	cmp	r1, r3
 800af44:	d00a      	beq.n	800af5c <memmove+0x26>
 800af46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af4a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800af4e:	e7f8      	b.n	800af42 <memmove+0xc>
 800af50:	4283      	cmp	r3, r0
 800af52:	d9f5      	bls.n	800af40 <memmove+0xa>
 800af54:	1881      	adds	r1, r0, r2
 800af56:	1ad2      	subs	r2, r2, r3
 800af58:	42d3      	cmn	r3, r2
 800af5a:	d100      	bne.n	800af5e <memmove+0x28>
 800af5c:	bd10      	pop	{r4, pc}
 800af5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af62:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800af66:	e7f7      	b.n	800af58 <memmove+0x22>

0800af68 <_free_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	4605      	mov	r5, r0
 800af6c:	2900      	cmp	r1, #0
 800af6e:	d043      	beq.n	800aff8 <_free_r+0x90>
 800af70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af74:	1f0c      	subs	r4, r1, #4
 800af76:	2b00      	cmp	r3, #0
 800af78:	bfb8      	it	lt
 800af7a:	18e4      	addlt	r4, r4, r3
 800af7c:	f000 f8d0 	bl	800b120 <__malloc_lock>
 800af80:	4a1e      	ldr	r2, [pc, #120]	; (800affc <_free_r+0x94>)
 800af82:	6813      	ldr	r3, [r2, #0]
 800af84:	4610      	mov	r0, r2
 800af86:	b933      	cbnz	r3, 800af96 <_free_r+0x2e>
 800af88:	6063      	str	r3, [r4, #4]
 800af8a:	6014      	str	r4, [r2, #0]
 800af8c:	4628      	mov	r0, r5
 800af8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af92:	f000 b8c6 	b.w	800b122 <__malloc_unlock>
 800af96:	42a3      	cmp	r3, r4
 800af98:	d90b      	bls.n	800afb2 <_free_r+0x4a>
 800af9a:	6821      	ldr	r1, [r4, #0]
 800af9c:	1862      	adds	r2, r4, r1
 800af9e:	4293      	cmp	r3, r2
 800afa0:	bf01      	itttt	eq
 800afa2:	681a      	ldreq	r2, [r3, #0]
 800afa4:	685b      	ldreq	r3, [r3, #4]
 800afa6:	1852      	addeq	r2, r2, r1
 800afa8:	6022      	streq	r2, [r4, #0]
 800afaa:	6063      	str	r3, [r4, #4]
 800afac:	6004      	str	r4, [r0, #0]
 800afae:	e7ed      	b.n	800af8c <_free_r+0x24>
 800afb0:	4613      	mov	r3, r2
 800afb2:	685a      	ldr	r2, [r3, #4]
 800afb4:	b10a      	cbz	r2, 800afba <_free_r+0x52>
 800afb6:	42a2      	cmp	r2, r4
 800afb8:	d9fa      	bls.n	800afb0 <_free_r+0x48>
 800afba:	6819      	ldr	r1, [r3, #0]
 800afbc:	1858      	adds	r0, r3, r1
 800afbe:	42a0      	cmp	r0, r4
 800afc0:	d10b      	bne.n	800afda <_free_r+0x72>
 800afc2:	6820      	ldr	r0, [r4, #0]
 800afc4:	4401      	add	r1, r0
 800afc6:	1858      	adds	r0, r3, r1
 800afc8:	4282      	cmp	r2, r0
 800afca:	6019      	str	r1, [r3, #0]
 800afcc:	d1de      	bne.n	800af8c <_free_r+0x24>
 800afce:	6810      	ldr	r0, [r2, #0]
 800afd0:	6852      	ldr	r2, [r2, #4]
 800afd2:	4401      	add	r1, r0
 800afd4:	6019      	str	r1, [r3, #0]
 800afd6:	605a      	str	r2, [r3, #4]
 800afd8:	e7d8      	b.n	800af8c <_free_r+0x24>
 800afda:	d902      	bls.n	800afe2 <_free_r+0x7a>
 800afdc:	230c      	movs	r3, #12
 800afde:	602b      	str	r3, [r5, #0]
 800afe0:	e7d4      	b.n	800af8c <_free_r+0x24>
 800afe2:	6820      	ldr	r0, [r4, #0]
 800afe4:	1821      	adds	r1, r4, r0
 800afe6:	428a      	cmp	r2, r1
 800afe8:	bf01      	itttt	eq
 800afea:	6811      	ldreq	r1, [r2, #0]
 800afec:	6852      	ldreq	r2, [r2, #4]
 800afee:	1809      	addeq	r1, r1, r0
 800aff0:	6021      	streq	r1, [r4, #0]
 800aff2:	6062      	str	r2, [r4, #4]
 800aff4:	605c      	str	r4, [r3, #4]
 800aff6:	e7c9      	b.n	800af8c <_free_r+0x24>
 800aff8:	bd38      	pop	{r3, r4, r5, pc}
 800affa:	bf00      	nop
 800affc:	20000460 	.word	0x20000460

0800b000 <_malloc_r>:
 800b000:	b570      	push	{r4, r5, r6, lr}
 800b002:	1ccd      	adds	r5, r1, #3
 800b004:	f025 0503 	bic.w	r5, r5, #3
 800b008:	3508      	adds	r5, #8
 800b00a:	2d0c      	cmp	r5, #12
 800b00c:	bf38      	it	cc
 800b00e:	250c      	movcc	r5, #12
 800b010:	2d00      	cmp	r5, #0
 800b012:	4606      	mov	r6, r0
 800b014:	db01      	blt.n	800b01a <_malloc_r+0x1a>
 800b016:	42a9      	cmp	r1, r5
 800b018:	d903      	bls.n	800b022 <_malloc_r+0x22>
 800b01a:	230c      	movs	r3, #12
 800b01c:	6033      	str	r3, [r6, #0]
 800b01e:	2000      	movs	r0, #0
 800b020:	bd70      	pop	{r4, r5, r6, pc}
 800b022:	f000 f87d 	bl	800b120 <__malloc_lock>
 800b026:	4a21      	ldr	r2, [pc, #132]	; (800b0ac <_malloc_r+0xac>)
 800b028:	6814      	ldr	r4, [r2, #0]
 800b02a:	4621      	mov	r1, r4
 800b02c:	b991      	cbnz	r1, 800b054 <_malloc_r+0x54>
 800b02e:	4c20      	ldr	r4, [pc, #128]	; (800b0b0 <_malloc_r+0xb0>)
 800b030:	6823      	ldr	r3, [r4, #0]
 800b032:	b91b      	cbnz	r3, 800b03c <_malloc_r+0x3c>
 800b034:	4630      	mov	r0, r6
 800b036:	f000 f863 	bl	800b100 <_sbrk_r>
 800b03a:	6020      	str	r0, [r4, #0]
 800b03c:	4629      	mov	r1, r5
 800b03e:	4630      	mov	r0, r6
 800b040:	f000 f85e 	bl	800b100 <_sbrk_r>
 800b044:	1c43      	adds	r3, r0, #1
 800b046:	d124      	bne.n	800b092 <_malloc_r+0x92>
 800b048:	230c      	movs	r3, #12
 800b04a:	4630      	mov	r0, r6
 800b04c:	6033      	str	r3, [r6, #0]
 800b04e:	f000 f868 	bl	800b122 <__malloc_unlock>
 800b052:	e7e4      	b.n	800b01e <_malloc_r+0x1e>
 800b054:	680b      	ldr	r3, [r1, #0]
 800b056:	1b5b      	subs	r3, r3, r5
 800b058:	d418      	bmi.n	800b08c <_malloc_r+0x8c>
 800b05a:	2b0b      	cmp	r3, #11
 800b05c:	d90f      	bls.n	800b07e <_malloc_r+0x7e>
 800b05e:	600b      	str	r3, [r1, #0]
 800b060:	18cc      	adds	r4, r1, r3
 800b062:	50cd      	str	r5, [r1, r3]
 800b064:	4630      	mov	r0, r6
 800b066:	f000 f85c 	bl	800b122 <__malloc_unlock>
 800b06a:	f104 000b 	add.w	r0, r4, #11
 800b06e:	1d23      	adds	r3, r4, #4
 800b070:	f020 0007 	bic.w	r0, r0, #7
 800b074:	1ac3      	subs	r3, r0, r3
 800b076:	d0d3      	beq.n	800b020 <_malloc_r+0x20>
 800b078:	425a      	negs	r2, r3
 800b07a:	50e2      	str	r2, [r4, r3]
 800b07c:	e7d0      	b.n	800b020 <_malloc_r+0x20>
 800b07e:	684b      	ldr	r3, [r1, #4]
 800b080:	428c      	cmp	r4, r1
 800b082:	bf16      	itet	ne
 800b084:	6063      	strne	r3, [r4, #4]
 800b086:	6013      	streq	r3, [r2, #0]
 800b088:	460c      	movne	r4, r1
 800b08a:	e7eb      	b.n	800b064 <_malloc_r+0x64>
 800b08c:	460c      	mov	r4, r1
 800b08e:	6849      	ldr	r1, [r1, #4]
 800b090:	e7cc      	b.n	800b02c <_malloc_r+0x2c>
 800b092:	1cc4      	adds	r4, r0, #3
 800b094:	f024 0403 	bic.w	r4, r4, #3
 800b098:	42a0      	cmp	r0, r4
 800b09a:	d005      	beq.n	800b0a8 <_malloc_r+0xa8>
 800b09c:	1a21      	subs	r1, r4, r0
 800b09e:	4630      	mov	r0, r6
 800b0a0:	f000 f82e 	bl	800b100 <_sbrk_r>
 800b0a4:	3001      	adds	r0, #1
 800b0a6:	d0cf      	beq.n	800b048 <_malloc_r+0x48>
 800b0a8:	6025      	str	r5, [r4, #0]
 800b0aa:	e7db      	b.n	800b064 <_malloc_r+0x64>
 800b0ac:	20000460 	.word	0x20000460
 800b0b0:	20000464 	.word	0x20000464

0800b0b4 <_realloc_r>:
 800b0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b6:	4607      	mov	r7, r0
 800b0b8:	4614      	mov	r4, r2
 800b0ba:	460e      	mov	r6, r1
 800b0bc:	b921      	cbnz	r1, 800b0c8 <_realloc_r+0x14>
 800b0be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b0c2:	4611      	mov	r1, r2
 800b0c4:	f7ff bf9c 	b.w	800b000 <_malloc_r>
 800b0c8:	b922      	cbnz	r2, 800b0d4 <_realloc_r+0x20>
 800b0ca:	f7ff ff4d 	bl	800af68 <_free_r>
 800b0ce:	4625      	mov	r5, r4
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0d4:	f000 f826 	bl	800b124 <_malloc_usable_size_r>
 800b0d8:	42a0      	cmp	r0, r4
 800b0da:	d20f      	bcs.n	800b0fc <_realloc_r+0x48>
 800b0dc:	4621      	mov	r1, r4
 800b0de:	4638      	mov	r0, r7
 800b0e0:	f7ff ff8e 	bl	800b000 <_malloc_r>
 800b0e4:	4605      	mov	r5, r0
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d0f2      	beq.n	800b0d0 <_realloc_r+0x1c>
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	4622      	mov	r2, r4
 800b0ee:	f7ff ff17 	bl	800af20 <memcpy>
 800b0f2:	4631      	mov	r1, r6
 800b0f4:	4638      	mov	r0, r7
 800b0f6:	f7ff ff37 	bl	800af68 <_free_r>
 800b0fa:	e7e9      	b.n	800b0d0 <_realloc_r+0x1c>
 800b0fc:	4635      	mov	r5, r6
 800b0fe:	e7e7      	b.n	800b0d0 <_realloc_r+0x1c>

0800b100 <_sbrk_r>:
 800b100:	b538      	push	{r3, r4, r5, lr}
 800b102:	2300      	movs	r3, #0
 800b104:	4c05      	ldr	r4, [pc, #20]	; (800b11c <_sbrk_r+0x1c>)
 800b106:	4605      	mov	r5, r0
 800b108:	4608      	mov	r0, r1
 800b10a:	6023      	str	r3, [r4, #0]
 800b10c:	f7f6 fb44 	bl	8001798 <_sbrk>
 800b110:	1c43      	adds	r3, r0, #1
 800b112:	d102      	bne.n	800b11a <_sbrk_r+0x1a>
 800b114:	6823      	ldr	r3, [r4, #0]
 800b116:	b103      	cbz	r3, 800b11a <_sbrk_r+0x1a>
 800b118:	602b      	str	r3, [r5, #0]
 800b11a:	bd38      	pop	{r3, r4, r5, pc}
 800b11c:	200015b8 	.word	0x200015b8

0800b120 <__malloc_lock>:
 800b120:	4770      	bx	lr

0800b122 <__malloc_unlock>:
 800b122:	4770      	bx	lr

0800b124 <_malloc_usable_size_r>:
 800b124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b128:	1f18      	subs	r0, r3, #4
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	bfbc      	itt	lt
 800b12e:	580b      	ldrlt	r3, [r1, r0]
 800b130:	18c0      	addlt	r0, r0, r3
 800b132:	4770      	bx	lr

0800b134 <_init>:
 800b134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b136:	bf00      	nop
 800b138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b13a:	bc08      	pop	{r3}
 800b13c:	469e      	mov	lr, r3
 800b13e:	4770      	bx	lr

0800b140 <_fini>:
 800b140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b142:	bf00      	nop
 800b144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b146:	bc08      	pop	{r3}
 800b148:	469e      	mov	lr, r3
 800b14a:	4770      	bx	lr
