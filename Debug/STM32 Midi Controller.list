
STM32 Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800b8e0  0800b8e0  0001b8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9a8  0800b9a8  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800b9a8  0800b9a8  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b9a8  0800b9a8  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9a8  0800b9a8  0001b9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9ac  0800b9ac  0001b9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800b9b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001484  20000204  0800bbb4  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001688  0800bbb4  00021688  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eccc  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000040d0  00000000  00000000  0003eef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015d8  00000000  00000000  00042fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013f8  00000000  00000000  000445a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cb55  00000000  00000000  000459a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000172af  00000000  00000000  000624f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095305  00000000  00000000  000797a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010eaa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cb4  00000000  00000000  0010eb24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000204 	.word	0x20000204
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b8c8 	.word	0x0800b8c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000208 	.word	0x20000208
 8000148:	0800b8c8 	.word	0x0800b8c8

0800014c <ADC1ReadVal8>:
 *      Author: yehen
 */
#include "main.h"


int ADC1ReadVal8(uint8_t channel){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]

	//ADC1->CR2 &= ~(1);
	ADC1->SQR3 &= ~(0x1f);
 8000156:	4b12      	ldr	r3, [pc, #72]	; (80001a0 <ADC1ReadVal8+0x54>)
 8000158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800015a:	4a11      	ldr	r2, [pc, #68]	; (80001a0 <ADC1ReadVal8+0x54>)
 800015c:	f023 031f 	bic.w	r3, r3, #31
 8000160:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= channel & 0x1f;
 8000162:	4b0f      	ldr	r3, [pc, #60]	; (80001a0 <ADC1ReadVal8+0x54>)
 8000164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	f003 031f 	and.w	r3, r3, #31
 800016c:	490c      	ldr	r1, [pc, #48]	; (80001a0 <ADC1ReadVal8+0x54>)
 800016e:	4313      	orrs	r3, r2
 8000170:	634b      	str	r3, [r1, #52]	; 0x34
	//ADC1->CR2 |= 1;
	//ADC1->CR2 |= 1;
	ADC1->CR2 |= (1<22);
 8000172:	4b0b      	ldr	r3, [pc, #44]	; (80001a0 <ADC1ReadVal8+0x54>)
 8000174:	689b      	ldr	r3, [r3, #8]
 8000176:	4a0a      	ldr	r2, [pc, #40]	; (80001a0 <ADC1ReadVal8+0x54>)
 8000178:	f043 0301 	orr.w	r3, r3, #1
 800017c:	6093      	str	r3, [r2, #8]
	while((ADC1->SR & (1<<1)) == 0); //wait for EOC
 800017e:	bf00      	nop
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <ADC1ReadVal8+0x54>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	f003 0302 	and.w	r3, r3, #2
 8000188:	2b00      	cmp	r3, #0
 800018a:	d0f9      	beq.n	8000180 <ADC1ReadVal8+0x34>
	return ((ADC1->DR & 0x0fff)>>4);
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <ADC1ReadVal8+0x54>)
 800018e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000190:	091b      	lsrs	r3, r3, #4
 8000192:	b2db      	uxtb	r3, r3



}
 8000194:	4618      	mov	r0, r3
 8000196:	370c      	adds	r7, #12
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	40012400 	.word	0x40012400

080001a4 <DWT_Delay_Init>:

#include "DWT_Delay.h"

/* DWT based delay */
uint32_t DWT_Delay_Init(void)
{
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80001a8:	4b14      	ldr	r3, [pc, #80]	; (80001fc <DWT_Delay_Init+0x58>)
 80001aa:	68db      	ldr	r3, [r3, #12]
 80001ac:	4a13      	ldr	r2, [pc, #76]	; (80001fc <DWT_Delay_Init+0x58>)
 80001ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80001b2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80001b4:	4b11      	ldr	r3, [pc, #68]	; (80001fc <DWT_Delay_Init+0x58>)
 80001b6:	68db      	ldr	r3, [r3, #12]
 80001b8:	4a10      	ldr	r2, [pc, #64]	; (80001fc <DWT_Delay_Init+0x58>)
 80001ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001be:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80001c0:	4b0f      	ldr	r3, [pc, #60]	; (8000200 <DWT_Delay_Init+0x5c>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a0e      	ldr	r2, [pc, #56]	; (8000200 <DWT_Delay_Init+0x5c>)
 80001c6:	f023 0301 	bic.w	r3, r3, #1
 80001ca:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80001cc:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <DWT_Delay_Init+0x5c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a0b      	ldr	r2, [pc, #44]	; (8000200 <DWT_Delay_Init+0x5c>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80001d8:	4b09      	ldr	r3, [pc, #36]	; (8000200 <DWT_Delay_Init+0x5c>)
 80001da:	2200      	movs	r2, #0
 80001dc:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80001de:	bf00      	nop
    __ASM volatile ("NOP");
 80001e0:	bf00      	nop
    __ASM volatile ("NOP");
 80001e2:	bf00      	nop
    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80001e4:	4b06      	ldr	r3, [pc, #24]	; (8000200 <DWT_Delay_Init+0x5c>)
 80001e6:	685b      	ldr	r3, [r3, #4]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80001ec:	2300      	movs	r3, #0
 80001ee:	e000      	b.n	80001f2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80001f0:	2301      	movs	r3, #1
    }
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	e000edf0 	.word	0xe000edf0
 8000200:	e0001000 	.word	0xe0001000

08000204 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800020c:	4b0e      	ldr	r3, [pc, #56]	; (8000248 <DWT_Delay_us+0x44>)
 800020e:	685b      	ldr	r3, [r3, #4]
 8000210:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000212:	f006 f9bd 	bl	8006590 <HAL_RCC_GetHCLKFreq>
 8000216:	4602      	mov	r2, r0
 8000218:	4b0c      	ldr	r3, [pc, #48]	; (800024c <DWT_Delay_us+0x48>)
 800021a:	fba3 2302 	umull	r2, r3, r3, r2
 800021e:	0c9b      	lsrs	r3, r3, #18
 8000220:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	68ba      	ldr	r2, [r7, #8]
 8000226:	fb02 f303 	mul.w	r3, r2, r3
 800022a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 800022c:	bf00      	nop
 800022e:	4b06      	ldr	r3, [pc, #24]	; (8000248 <DWT_Delay_us+0x44>)
 8000230:	685a      	ldr	r2, [r3, #4]
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	1ad2      	subs	r2, r2, r3
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	1acb      	subs	r3, r1, r3
 800023c:	429a      	cmp	r2, r3
 800023e:	d3f6      	bcc.n	800022e <DWT_Delay_us+0x2a>
}
 8000240:	bf00      	nop
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	e0001000 	.word	0xe0001000
 800024c:	431bde83 	.word	0x431bde83

08000250 <DWT_Delay_ms>:

void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000258:	4b0d      	ldr	r3, [pc, #52]	; (8000290 <DWT_Delay_ms+0x40>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 800025e:	f006 f997 	bl	8006590 <HAL_RCC_GetHCLKFreq>
 8000262:	4602      	mov	r2, r0
 8000264:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <DWT_Delay_ms+0x44>)
 8000266:	fba3 2302 	umull	r2, r3, r3, r2
 800026a:	099b      	lsrs	r3, r3, #6
 800026c:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	68ba      	ldr	r2, [r7, #8]
 8000272:	fb02 f303 	mul.w	r3, r2, r3
 8000276:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8000278:	bf00      	nop
 800027a:	4b05      	ldr	r3, [pc, #20]	; (8000290 <DWT_Delay_ms+0x40>)
 800027c:	685a      	ldr	r2, [r3, #4]
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	1ad2      	subs	r2, r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	429a      	cmp	r2, r3
 8000286:	d3f8      	bcc.n	800027a <DWT_Delay_ms+0x2a>
}
 8000288:	bf00      	nop
 800028a:	3710      	adds	r7, #16
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	e0001000 	.word	0xe0001000
 8000294:	10624dd3 	.word	0x10624dd3

08000298 <MCP23017ClearPin>:

	//GPIOA->BRR = (1<<7);

}

void MCP23017ClearPin(uint8_t pin, bank b, uint8_t addr){
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
 80002a2:	460b      	mov	r3, r1
 80002a4:	71bb      	strb	r3, [r7, #6]
 80002a6:	4613      	mov	r3, r2
 80002a8:	717b      	strb	r3, [r7, #5]

	while(blocked); //wait for clearance
 80002aa:	bf00      	nop
 80002ac:	4b40      	ldr	r3, [pc, #256]	; (80003b0 <MCP23017ClearPin+0x118>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d1fa      	bne.n	80002ac <MCP23017ClearPin+0x14>
	//GPIOA->BSRR = (1<<7);

	currentIOState[b] &= ~(1<<pin);
 80002b6:	79bb      	ldrb	r3, [r7, #6]
 80002b8:	4a3e      	ldr	r2, [pc, #248]	; (80003b4 <MCP23017ClearPin+0x11c>)
 80002ba:	5cd3      	ldrb	r3, [r2, r3]
 80002bc:	b25a      	sxtb	r2, r3
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	2101      	movs	r1, #1
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	b25b      	sxtb	r3, r3
 80002c8:	43db      	mvns	r3, r3
 80002ca:	b25b      	sxtb	r3, r3
 80002cc:	4013      	ands	r3, r2
 80002ce:	b25a      	sxtb	r2, r3
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	b2d1      	uxtb	r1, r2
 80002d4:	4a37      	ldr	r2, [pc, #220]	; (80003b4 <MCP23017ClearPin+0x11c>)
 80002d6:	54d1      	strb	r1, [r2, r3]
	//UPDATE: This messses up the BAM Driver... I think it'll be better just to stop TIM2
	//__disable_irq(); //the entire routine will be super duper unhappy unless this is in place

	//potential issue: the other interrupts may cause this crap to fail again...

	TIM2->CR1 &= ~1; //disable BAM Driver
 80002d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002e2:	f023 0301 	bic.w	r3, r3, #1
 80002e6:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 80002e8:	4b33      	ldr	r3, [pc, #204]	; (80003b8 <MCP23017ClearPin+0x120>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a32      	ldr	r2, [pc, #200]	; (80003b8 <MCP23017ClearPin+0x120>)
 80002ee:	f023 0301 	bic.w	r3, r3, #1
 80002f2:	6013      	str	r3, [r2, #0]
	//__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 80002f4:	4b31      	ldr	r3, [pc, #196]	; (80003bc <MCP23017ClearPin+0x124>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a30      	ldr	r2, [pc, #192]	; (80003bc <MCP23017ClearPin+0x124>)
 80002fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002fe:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 8000300:	bf00      	nop
 8000302:	4b2e      	ldr	r3, [pc, #184]	; (80003bc <MCP23017ClearPin+0x124>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d0f9      	beq.n	8000302 <MCP23017ClearPin+0x6a>
	I2C2->DR = addr; //address the MCP23017
 800030e:	4a2b      	ldr	r2, [pc, #172]	; (80003bc <MCP23017ClearPin+0x124>)
 8000310:	797b      	ldrb	r3, [r7, #5]
 8000312:	6113      	str	r3, [r2, #16]
	//__enable_irq(); didn't work here
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000314:	bf00      	nop
 8000316:	4b29      	ldr	r3, [pc, #164]	; (80003bc <MCP23017ClearPin+0x124>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	f003 0302 	and.w	r3, r3, #2
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0f9      	beq.n	8000316 <MCP23017ClearPin+0x7e>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000322:	bf00      	nop
 8000324:	4b25      	ldr	r3, [pc, #148]	; (80003bc <MCP23017ClearPin+0x124>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0304 	and.w	r3, r3, #4
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0f9      	beq.n	8000324 <MCP23017ClearPin+0x8c>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000330:	bf00      	nop
 8000332:	4b22      	ldr	r3, [pc, #136]	; (80003bc <MCP23017ClearPin+0x124>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0f9      	beq.n	8000332 <MCP23017ClearPin+0x9a>
	if(b==A){
 800033e:	79bb      	ldrb	r3, [r7, #6]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d103      	bne.n	800034c <MCP23017ClearPin+0xb4>
		I2C2->DR = 0x14;
 8000344:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <MCP23017ClearPin+0x124>)
 8000346:	2214      	movs	r2, #20
 8000348:	611a      	str	r2, [r3, #16]
 800034a:	e002      	b.n	8000352 <MCP23017ClearPin+0xba>
	}
	else{
		I2C2->DR = 0x15;
 800034c:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <MCP23017ClearPin+0x124>)
 800034e:	2215      	movs	r2, #21
 8000350:	611a      	str	r2, [r3, #16]
	}
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000352:	bf00      	nop
 8000354:	4b19      	ldr	r3, [pc, #100]	; (80003bc <MCP23017ClearPin+0x124>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0f9      	beq.n	8000354 <MCP23017ClearPin+0xbc>
	I2C2->DR = currentIOState[b]; //just pull everything low
 8000360:	79bb      	ldrb	r3, [r7, #6]
 8000362:	4a14      	ldr	r2, [pc, #80]	; (80003b4 <MCP23017ClearPin+0x11c>)
 8000364:	5cd2      	ldrb	r2, [r2, r3]
 8000366:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MCP23017ClearPin+0x124>)
 8000368:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800036a:	bf00      	nop
 800036c:	4b13      	ldr	r3, [pc, #76]	; (80003bc <MCP23017ClearPin+0x124>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000374:	2b00      	cmp	r3, #0
 8000376:	d0f9      	beq.n	800036c <MCP23017ClearPin+0xd4>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 8000378:	4b10      	ldr	r3, [pc, #64]	; (80003bc <MCP23017ClearPin+0x124>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a0f      	ldr	r2, [pc, #60]	; (80003bc <MCP23017ClearPin+0x124>)
 800037e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000382:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 8000384:	bf00      	nop
 8000386:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <MCP23017ClearPin+0x124>)
 8000388:	699b      	ldr	r3, [r3, #24]

	//__enable_irq();
	TIM2->CR1 |= 1; //enable BAM Driver
 800038a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <MCP23017ClearPin+0x120>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a06      	ldr	r2, [pc, #24]	; (80003b8 <MCP23017ClearPin+0x120>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6013      	str	r3, [r2, #0]
	//__enable_irq();
	//GPIOA->BRR = (1<<7);

}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	20000226 	.word	0x20000226
 80003b4:	20000220 	.word	0x20000220
 80003b8:	40000400 	.word	0x40000400
 80003bc:	40005800 	.word	0x40005800

080003c0 <LCDInit>:
 * \fn LCDInit
 * @brief Initialises both the LCD and the MCP23017
 *
 * @param addr Address of the MCP23017
 */
void LCDInit(uint8_t addr){ //interrupts should be disabled here
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ca:	b672      	cpsid	i

	//while(blocked); //wait for clearance anyways just for good measure

	//Initialise the MCP23017 first
	__disable_irq(); //let's allow the init to go down peacefully
	I2C2->CR1 |= (1<<8); //send start condition
 80003cc:	4b49      	ldr	r3, [pc, #292]	; (80004f4 <LCDInit+0x134>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a48      	ldr	r2, [pc, #288]	; (80004f4 <LCDInit+0x134>)
 80003d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d6:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80003d8:	bf00      	nop
 80003da:	4b46      	ldr	r3, [pc, #280]	; (80004f4 <LCDInit+0x134>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d0f9      	beq.n	80003da <LCDInit+0x1a>
	I2C2->DR = addr; //address the MCP23017
 80003e6:	4a43      	ldr	r2, [pc, #268]	; (80004f4 <LCDInit+0x134>)
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80003ec:	bf00      	nop
 80003ee:	4b41      	ldr	r3, [pc, #260]	; (80004f4 <LCDInit+0x134>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f003 0302 	and.w	r3, r3, #2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0f9      	beq.n	80003ee <LCDInit+0x2e>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 80003fa:	bf00      	nop
 80003fc:	4b3d      	ldr	r3, [pc, #244]	; (80004f4 <LCDInit+0x134>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	2b00      	cmp	r3, #0
 8000406:	d0f9      	beq.n	80003fc <LCDInit+0x3c>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000408:	bf00      	nop
 800040a:	4b3a      	ldr	r3, [pc, #232]	; (80004f4 <LCDInit+0x134>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000412:	2b00      	cmp	r3, #0
 8000414:	d0f9      	beq.n	800040a <LCDInit+0x4a>
	I2C2->DR = 0x00; //write to IODIR_A
 8000416:	4b37      	ldr	r3, [pc, #220]	; (80004f4 <LCDInit+0x134>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800041c:	bf00      	nop
 800041e:	4b35      	ldr	r3, [pc, #212]	; (80004f4 <LCDInit+0x134>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000426:	2b00      	cmp	r3, #0
 8000428:	d0f9      	beq.n	800041e <LCDInit+0x5e>
	I2C2->DR = 0x00; //all outputs
 800042a:	4b32      	ldr	r3, [pc, #200]	; (80004f4 <LCDInit+0x134>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000430:	bf00      	nop
 8000432:	4b30      	ldr	r3, [pc, #192]	; (80004f4 <LCDInit+0x134>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800043a:	2b00      	cmp	r3, #0
 800043c:	d0f9      	beq.n	8000432 <LCDInit+0x72>
	I2C2->DR = 0x00; //all outputs for next address which is IODIR_B
 800043e:	4b2d      	ldr	r3, [pc, #180]	; (80004f4 <LCDInit+0x134>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000444:	bf00      	nop
 8000446:	4b2b      	ldr	r3, [pc, #172]	; (80004f4 <LCDInit+0x134>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <LCDInit+0x86>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 8000452:	4b28      	ldr	r3, [pc, #160]	; (80004f4 <LCDInit+0x134>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a27      	ldr	r2, [pc, #156]	; (80004f4 <LCDInit+0x134>)
 8000458:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800045c:	6013      	str	r3, [r2, #0]


	//Pull RS, RW and E pins LOW
	//MCP23017ClearPin(RS_Pin, B, LCD_Address);
	GPIOB->BRR = 1<<1;
 800045e:	4b26      	ldr	r3, [pc, #152]	; (80004f8 <LCDInit+0x138>)
 8000460:	2202      	movs	r2, #2
 8000462:	615a      	str	r2, [r3, #20]
	MCP23017ClearPin(RW_Pin, B, LCD_Address);
 8000464:	224e      	movs	r2, #78	; 0x4e
 8000466:	2101      	movs	r1, #1
 8000468:	2001      	movs	r0, #1
 800046a:	f7ff ff15 	bl	8000298 <MCP23017ClearPin>
	GPIOA->BRR = 1<<8;
 800046e:	4b23      	ldr	r3, [pc, #140]	; (80004fc <LCDInit+0x13c>)
 8000470:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000474:	615a      	str	r2, [r3, #20]



	LCDData(0x00, addr); //clear the data pins as well
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	4619      	mov	r1, r3
 800047a:	2000      	movs	r0, #0
 800047c:	f000 f840 	bl	8000500 <LCDData>
	DWT_Delay_ms(30);
 8000480:	201e      	movs	r0, #30
 8000482:	f7ff fee5 	bl	8000250 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	4619      	mov	r1, r3
 800048a:	2030      	movs	r0, #48	; 0x30
 800048c:	f000 f8b4 	bl	80005f8 <LCDCommand>
	DWT_Delay_ms(5);
 8000490:	2005      	movs	r0, #5
 8000492:	f7ff fedd 	bl	8000250 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	4619      	mov	r1, r3
 800049a:	2030      	movs	r0, #48	; 0x30
 800049c:	f000 f8ac 	bl	80005f8 <LCDCommand>
	DWT_Delay_ms(5);
 80004a0:	2005      	movs	r0, #5
 80004a2:	f7ff fed5 	bl	8000250 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	4619      	mov	r1, r3
 80004aa:	2030      	movs	r0, #48	; 0x30
 80004ac:	f000 f8a4 	bl	80005f8 <LCDCommand>
	DWT_Delay_us(1000);
 80004b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b4:	f7ff fea6 	bl	8000204 <DWT_Delay_us>

	LCDCommand(0x38, addr); //8-bit mode, 2 lines, smaller font
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	4619      	mov	r1, r3
 80004bc:	2038      	movs	r0, #56	; 0x38
 80004be:	f000 f89b 	bl	80005f8 <LCDCommand>

	LCDCommand(0x0C, addr); //display ON
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	4619      	mov	r1, r3
 80004c6:	200c      	movs	r0, #12
 80004c8:	f000 f896 	bl	80005f8 <LCDCommand>

	LCDCommand(0x01, addr); //display clear
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	4619      	mov	r1, r3
 80004d0:	2001      	movs	r0, #1
 80004d2:	f000 f891 	bl	80005f8 <LCDCommand>
	DWT_Delay_us(2000); //clear requires a substantial delay
 80004d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004da:	f7ff fe93 	bl	8000204 <DWT_Delay_us>

	LCDCommand(0x06, addr); //set entry mode
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	4619      	mov	r1, r3
 80004e2:	2006      	movs	r0, #6
 80004e4:	f000 f888 	bl	80005f8 <LCDCommand>
  __ASM volatile ("cpsie i" : : : "memory");
 80004e8:	b662      	cpsie	i

	__enable_irq();


}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40005800 	.word	0x40005800
 80004f8:	40010c00 	.word	0x40010c00
 80004fc:	40010800 	.word	0x40010800

08000500 <LCDData>:
 * @brief Presents the data to D0 to D7 (located on Bank A)
 *
 * @param data Data to send
 * @param addr I2C Address of the MCP23017
 */
void LCDData(char data, uint8_t addr){
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	460a      	mov	r2, r1
 800050a:	71fb      	strb	r3, [r7, #7]
 800050c:	4613      	mov	r3, r2
 800050e:	71bb      	strb	r3, [r7, #6]

	while(blocked); //wait for clearance
 8000510:	bf00      	nop
 8000512:	4b36      	ldr	r3, [pc, #216]	; (80005ec <LCDData+0xec>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	b2db      	uxtb	r3, r3
 8000518:	2b00      	cmp	r3, #0
 800051a:	d1fa      	bne.n	8000512 <LCDData+0x12>

	TIM2->CR1 &= ~1; //disable BAM Driver
 800051c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000526:	f023 0301 	bic.w	r3, r3, #1
 800052a:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 800052c:	4b30      	ldr	r3, [pc, #192]	; (80005f0 <LCDData+0xf0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a2f      	ldr	r2, [pc, #188]	; (80005f0 <LCDData+0xf0>)
 8000532:	f023 0301 	bic.w	r3, r3, #1
 8000536:	6013      	str	r3, [r2, #0]
	//__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 8000538:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <LCDData+0xf4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a2d      	ldr	r2, [pc, #180]	; (80005f4 <LCDData+0xf4>)
 800053e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000542:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 8000544:	bf00      	nop
 8000546:	4b2b      	ldr	r3, [pc, #172]	; (80005f4 <LCDData+0xf4>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0f9      	beq.n	8000546 <LCDData+0x46>
	I2C2->DR = addr; //address the MCP23017
 8000552:	4a28      	ldr	r2, [pc, #160]	; (80005f4 <LCDData+0xf4>)
 8000554:	79bb      	ldrb	r3, [r7, #6]
 8000556:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000558:	bf00      	nop
 800055a:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <LCDData+0xf4>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f003 0302 	and.w	r3, r3, #2
 8000562:	2b00      	cmp	r3, #0
 8000564:	d0f9      	beq.n	800055a <LCDData+0x5a>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000566:	bf00      	nop
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <LCDData+0xf4>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f003 0304 	and.w	r3, r3, #4
 8000570:	2b00      	cmp	r3, #0
 8000572:	d0f9      	beq.n	8000568 <LCDData+0x68>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000574:	bf00      	nop
 8000576:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <LCDData+0xf4>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f9      	beq.n	8000576 <LCDData+0x76>
	I2C2->DR = 0x14; //write to GPIO_A
 8000582:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <LCDData+0xf4>)
 8000584:	2214      	movs	r2, #20
 8000586:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000588:	bf00      	nop
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <LCDData+0xf4>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f9      	beq.n	800058a <LCDData+0x8a>
	I2C2->DR = data; //present data at output bank A
 8000596:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <LCDData+0xf4>)
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800059c:	bf00      	nop
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <LCDData+0xf4>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <LCDData+0x9e>
	while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
 80005aa:	bf00      	nop
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <LCDData+0xf4>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	f003 0304 	and.w	r3, r3, #4
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0f9      	beq.n	80005ac <LCDData+0xac>
	I2C2->CR1 |= (1<<9); //send stop condition
 80005b8:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <LCDData+0xf4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <LCDData+0xf4>)
 80005be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005c2:	6013      	str	r3, [r2, #0]

	//__enable_irq();
	TIM2->CR1 |= 1; //enable BAM Driver
 80005c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <LCDData+0xf0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <LCDData+0xf0>)
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6013      	str	r3, [r2, #0]

}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000226 	.word	0x20000226
 80005f0:	40000400 	.word	0x40000400
 80005f4:	40005800 	.word	0x40005800

080005f8 <LCDCommand>:

void LCDCommand(char data, uint8_t addr){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	460a      	mov	r2, r1
 8000602:	71fb      	strb	r3, [r7, #7]
 8000604:	4613      	mov	r3, r2
 8000606:	71bb      	strb	r3, [r7, #6]


	//MCP23017ClearPin(RS_Pin, B, addr);
	GPIOB->BRR = 1<<1;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <LCDCommand+0x38>)
 800060a:	2202      	movs	r2, #2
 800060c:	615a      	str	r2, [r3, #20]
	LCDData(data, addr);
 800060e:	79ba      	ldrb	r2, [r7, #6]
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	4611      	mov	r1, r2
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff73 	bl	8000500 <LCDData>

	LCDCycleEN(addr);
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	4618      	mov	r0, r3
 800061e:	f000 f809 	bl	8000634 <LCDCycleEN>

	//MCP23017SetPin(RS_Pin, B, addr);
	GPIOB->BSRR = 1<<1;
 8000622:	4b03      	ldr	r3, [pc, #12]	; (8000630 <LCDCommand+0x38>)
 8000624:	2202      	movs	r2, #2
 8000626:	611a      	str	r2, [r3, #16]
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40010c00 	.word	0x40010c00

08000634 <LCDCycleEN>:

void LCDCycleEN(uint8_t addr){
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
	DWT_Delay_us(1);
	MCP23017ClearPin(EN_Pin, B, addr);
	DWT_Delay_us(100);

*/
	GPIOA->BRR = 1<<8;
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <LCDCycleEN+0x3c>)
 8000640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000644:	615a      	str	r2, [r3, #20]
	GPIOA->BSRR = 1<<8; //this pulse is 100ns, aka too short, datasheet specifies min of 230 ns
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <LCDCycleEN+0x3c>)
 8000648:	f44f 7280 	mov.w	r2, #256	; 0x100
 800064c:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = 1<<8;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <LCDCycleEN+0x3c>)
 8000650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000654:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = 1<<8;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <LCDCycleEN+0x3c>)
 8000658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800065c:	611a      	str	r2, [r3, #16]
	GPIOA->BRR = 1<<8;
 800065e:	4b04      	ldr	r3, [pc, #16]	; (8000670 <LCDCycleEN+0x3c>)
 8000660:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000664:	615a      	str	r2, [r3, #20]

}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	40010800 	.word	0x40010800

08000674 <LCDClear>:
		LCDWriteChar(str[i], addr);
	}

}

void LCDClear(uint8_t addr){
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]

	LCDCommand(1, addr);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	4619      	mov	r1, r3
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff ffb8 	bl	80005f8 <LCDCommand>
	DWT_Delay_us(2000);
 8000688:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800068c:	f7ff fdba 	bl	8000204 <DWT_Delay_us>

}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <LCDSetCursor>:

void LCDSetCursor(uint8_t row, uint8_t col, uint8_t addr){
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	460b      	mov	r3, r1
 80006a4:	71bb      	strb	r3, [r7, #6]
 80006a6:	4613      	mov	r3, r2
 80006a8:	717b      	strb	r3, [r7, #5]

	char outbyte;

	if(row == 1){
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d109      	bne.n	80006c4 <LCDSetCursor+0x2c>
		outbyte = 0x80 + col - 1;
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	337f      	adds	r3, #127	; 0x7f
 80006b4:	73fb      	strb	r3, [r7, #15]
		LCDCommand(outbyte, addr);
 80006b6:	797a      	ldrb	r2, [r7, #5]
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	4611      	mov	r1, r2
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff9b 	bl	80005f8 <LCDCommand>
	else if(row == 2){
		outbyte = 0xC0 + col - 1;
		LCDCommand(outbyte, addr);
	}

}
 80006c2:	e00b      	b.n	80006dc <LCDSetCursor+0x44>
	else if(row == 2){
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d108      	bne.n	80006dc <LCDSetCursor+0x44>
		outbyte = 0xC0 + col - 1;
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	3b41      	subs	r3, #65	; 0x41
 80006ce:	73fb      	strb	r3, [r7, #15]
		LCDCommand(outbyte, addr);
 80006d0:	797a      	ldrb	r2, [r7, #5]
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff8e 	bl	80005f8 <LCDCommand>
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <LCDPrepareInt>:
 * \fn LCDPrepareInt
 *
 * @brief this function sets up the MCP23017 so that it can take on the interrupt based auto LCD updating routine
 */
//TODO: might want to convert this to DMA driven code
void LCDPrepareInt(){
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0



	TIM2->CR1 &= ~1; //disable BAM Driver
 80006e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006f2:	f023 0301 	bic.w	r3, r3, #1
 80006f6:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 80006f8:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <LCDPrepareInt+0xd4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a2e      	ldr	r2, [pc, #184]	; (80007b8 <LCDPrepareInt+0xd4>)
 80006fe:	f023 0301 	bic.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
	__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 8000706:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <LCDPrepareInt+0xd8>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a2c      	ldr	r2, [pc, #176]	; (80007bc <LCDPrepareInt+0xd8>)
 800070c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000710:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 8000712:	bf00      	nop
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <LCDPrepareInt+0xd8>)
 8000716:	695b      	ldr	r3, [r3, #20]
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	2b00      	cmp	r3, #0
 800071e:	d0f9      	beq.n	8000714 <LCDPrepareInt+0x30>
	I2C2->DR = LCD_Address; //address the MCP23017
 8000720:	4b26      	ldr	r3, [pc, #152]	; (80007bc <LCDPrepareInt+0xd8>)
 8000722:	224e      	movs	r2, #78	; 0x4e
 8000724:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000726:	bf00      	nop
 8000728:	4b24      	ldr	r3, [pc, #144]	; (80007bc <LCDPrepareInt+0xd8>)
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	f003 0302 	and.w	r3, r3, #2
 8000730:	2b00      	cmp	r3, #0
 8000732:	d0f9      	beq.n	8000728 <LCDPrepareInt+0x44>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000734:	bf00      	nop
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <LCDPrepareInt+0xd8>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f9      	beq.n	8000736 <LCDPrepareInt+0x52>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000742:	bf00      	nop
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <LCDPrepareInt+0xd8>)
 8000746:	695b      	ldr	r3, [r3, #20]
 8000748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074c:	2b00      	cmp	r3, #0
 800074e:	d0f9      	beq.n	8000744 <LCDPrepareInt+0x60>
	I2C2->DR = 0x0A; //write to IOCON
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <LCDPrepareInt+0xd8>)
 8000752:	220a      	movs	r2, #10
 8000754:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000756:	bf00      	nop
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <LCDPrepareInt+0xd8>)
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000760:	2b00      	cmp	r3, #0
 8000762:	d0f9      	beq.n	8000758 <LCDPrepareInt+0x74>
	I2C2->DR = (1<<5)|(1<<7); //disable address incrementation and enable bank = 1
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <LCDPrepareInt+0xd8>)
 8000766:	22a0      	movs	r2, #160	; 0xa0
 8000768:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800076a:	bf00      	nop
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <LCDPrepareInt+0xd8>)
 800076e:	695b      	ldr	r3, [r3, #20]
 8000770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000774:	2b00      	cmp	r3, #0
 8000776:	d0f9      	beq.n	800076c <LCDPrepareInt+0x88>
	while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
 8000778:	bf00      	nop
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <LCDPrepareInt+0xd8>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f9      	beq.n	800077a <LCDPrepareInt+0x96>
	I2C2->CR1 |= (1<<9); //send stop condition
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <LCDPrepareInt+0xd8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <LCDPrepareInt+0xd8>)
 800078c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000790:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000792:	b662      	cpsie	i

	__enable_irq();
	TIM2->CR1 |= 1; //enable BAM Driver
 8000794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800079e:	f043 0301 	orr.w	r3, r3, #1
 80007a2:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <LCDPrepareInt+0xd4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a03      	ldr	r2, [pc, #12]	; (80007b8 <LCDPrepareInt+0xd4>)
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	6013      	str	r3, [r2, #0]


}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	40000400 	.word	0x40000400
 80007bc:	40005800 	.word	0x40005800

080007c0 <LCDPrintStringTop>:
 *
 * Interrupt driven auto printer thing for top line
 *
 * IMPORTANT: always pass a string 16 characters long into this function, any extra will get truncated at best, potential buffer ovf (CTF brain engaged)
 */
void LCDPrintStringTop(char* str){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

	IWDG->KR = 0xAAAA;
 80007c8:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <LCDPrintStringTop+0xb8>)
 80007ca:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80007ce:	601a      	str	r2, [r3, #0]
	snprintf(LCDBufferTop, 17, "%-16s", str); //dash to left pad
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a2a      	ldr	r2, [pc, #168]	; (800087c <LCDPrintStringTop+0xbc>)
 80007d4:	2111      	movs	r1, #17
 80007d6:	482a      	ldr	r0, [pc, #168]	; (8000880 <LCDPrintStringTop+0xc0>)
 80007d8:	f00a fc50 	bl	800b07c <sniprintf>
	IWDG->KR = 0xAAAA;
 80007dc:	4b26      	ldr	r3, [pc, #152]	; (8000878 <LCDPrintStringTop+0xb8>)
 80007de:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80007e2:	601a      	str	r2, [r3, #0]

	currentLCDByte = 0;
 80007e4:	4b27      	ldr	r3, [pc, #156]	; (8000884 <LCDPrintStringTop+0xc4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
	isLCDPrinting = 1; //mark that the LCD is busy
 80007ea:	4b27      	ldr	r3, [pc, #156]	; (8000888 <LCDPrintStringTop+0xc8>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	701a      	strb	r2, [r3, #0]

	GPIOB->BRR = 1<<1;
 80007f0:	4b26      	ldr	r3, [pc, #152]	; (800088c <LCDPrintStringTop+0xcc>)
 80007f2:	2202      	movs	r2, #2
 80007f4:	615a      	str	r2, [r3, #20]
	cycleEN = 1;
 80007f6:	4b26      	ldr	r3, [pc, #152]	; (8000890 <LCDPrintStringTop+0xd0>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i

	__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 80007fe:	4b25      	ldr	r3, [pc, #148]	; (8000894 <LCDPrintStringTop+0xd4>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a24      	ldr	r2, [pc, #144]	; (8000894 <LCDPrintStringTop+0xd4>)
 8000804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000808:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 800080a:	bf00      	nop
 800080c:	4b21      	ldr	r3, [pc, #132]	; (8000894 <LCDPrintStringTop+0xd4>)
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	2b00      	cmp	r3, #0
 8000816:	d0f9      	beq.n	800080c <LCDPrintStringTop+0x4c>
	I2C2->DR = LCD_Address; //address the LCD MCP23017
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <LCDPrintStringTop+0xd4>)
 800081a:	224e      	movs	r2, #78	; 0x4e
 800081c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 800081e:	b662      	cpsie	i
	__enable_irq();
	//I2C2->CR2 |= (1<<11); //enable DMA Requests
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000820:	bf00      	nop
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <LCDPrintStringTop+0xd4>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0f9      	beq.n	8000822 <LCDPrintStringTop+0x62>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 800082e:	bf00      	nop
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <LCDPrintStringTop+0xd4>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0304 	and.w	r3, r3, #4
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0f9      	beq.n	8000830 <LCDPrintStringTop+0x70>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800083c:	bf00      	nop
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <LCDPrintStringTop+0xd4>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0f9      	beq.n	800083e <LCDPrintStringTop+0x7e>
	I2C2->DR = 0x0A; //address OLATA
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <LCDPrintStringTop+0xd4>)
 800084c:	220a      	movs	r2, #10
 800084e:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000850:	bf00      	nop
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <LCDPrintStringTop+0xd4>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0f9      	beq.n	8000852 <LCDPrintStringTop+0x92>
	I2C2->DR = 0x80; //select top row
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <LCDPrintStringTop+0xd4>)
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	611a      	str	r2, [r3, #16]
	I2C2->CR2 |= 1<<9; //enable I2C2 event Interrupts
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <LCDPrintStringTop+0xd4>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <LCDPrintStringTop+0xd4>)
 800086a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800086e:	6053      	str	r3, [r2, #4]



}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40003000 	.word	0x40003000
 800087c:	0800b8e0 	.word	0x0800b8e0
 8000880:	200004a0 	.word	0x200004a0
 8000884:	20000224 	.word	0x20000224
 8000888:	20000222 	.word	0x20000222
 800088c:	40010c00 	.word	0x40010c00
 8000890:	20000223 	.word	0x20000223
 8000894:	40005800 	.word	0x40005800

08000898 <LCDPrintStringBottom>:


void LCDPrintStringBottom(char* str){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

	IWDG->KR = 0xAAAA;
 80008a0:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <LCDPrintStringBottom+0xb8>)
 80008a2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80008a6:	601a      	str	r2, [r3, #0]
	snprintf(LCDBufferTop, 17, "%-16s", str); //dash to left pad
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a2a      	ldr	r2, [pc, #168]	; (8000954 <LCDPrintStringBottom+0xbc>)
 80008ac:	2111      	movs	r1, #17
 80008ae:	482a      	ldr	r0, [pc, #168]	; (8000958 <LCDPrintStringBottom+0xc0>)
 80008b0:	f00a fbe4 	bl	800b07c <sniprintf>
	IWDG->KR = 0xAAAA;
 80008b4:	4b26      	ldr	r3, [pc, #152]	; (8000950 <LCDPrintStringBottom+0xb8>)
 80008b6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80008ba:	601a      	str	r2, [r3, #0]

	currentLCDByte = 0;
 80008bc:	4b27      	ldr	r3, [pc, #156]	; (800095c <LCDPrintStringBottom+0xc4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
	isLCDPrinting = 1; //mark that the LCD is busy
 80008c2:	4b27      	ldr	r3, [pc, #156]	; (8000960 <LCDPrintStringBottom+0xc8>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	701a      	strb	r2, [r3, #0]

	GPIOB->BRR = 1<<1;
 80008c8:	4b26      	ldr	r3, [pc, #152]	; (8000964 <LCDPrintStringBottom+0xcc>)
 80008ca:	2202      	movs	r2, #2
 80008cc:	615a      	str	r2, [r3, #20]
	cycleEN = 1;
 80008ce:	4b26      	ldr	r3, [pc, #152]	; (8000968 <LCDPrintStringBottom+0xd0>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i

	__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 80008d6:	4b25      	ldr	r3, [pc, #148]	; (800096c <LCDPrintStringBottom+0xd4>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a24      	ldr	r2, [pc, #144]	; (800096c <LCDPrintStringBottom+0xd4>)
 80008dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e0:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80008e2:	bf00      	nop
 80008e4:	4b21      	ldr	r3, [pc, #132]	; (800096c <LCDPrintStringBottom+0xd4>)
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0f9      	beq.n	80008e4 <LCDPrintStringBottom+0x4c>
	I2C2->DR = LCD_Address; //address the LCD MCP23017
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <LCDPrintStringBottom+0xd4>)
 80008f2:	224e      	movs	r2, #78	; 0x4e
 80008f4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 80008f6:	b662      	cpsie	i
	__enable_irq();
	//I2C2->CR2 |= (1<<11); //enable DMA Requests
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80008f8:	bf00      	nop
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <LCDPrintStringBottom+0xd4>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	2b00      	cmp	r3, #0
 8000904:	d0f9      	beq.n	80008fa <LCDPrintStringBottom+0x62>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000906:	bf00      	nop
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <LCDPrintStringBottom+0xd4>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	2b00      	cmp	r3, #0
 8000912:	d0f9      	beq.n	8000908 <LCDPrintStringBottom+0x70>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000914:	bf00      	nop
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <LCDPrintStringBottom+0xd4>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	2b00      	cmp	r3, #0
 8000920:	d0f9      	beq.n	8000916 <LCDPrintStringBottom+0x7e>
	I2C2->DR = 0x0A; //address OLATA
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <LCDPrintStringBottom+0xd4>)
 8000924:	220a      	movs	r2, #10
 8000926:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000928:	bf00      	nop
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <LCDPrintStringBottom+0xd4>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	2b00      	cmp	r3, #0
 8000934:	d0f9      	beq.n	800092a <LCDPrintStringBottom+0x92>
	I2C2->DR = 0xC0; //select bottom row
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <LCDPrintStringBottom+0xd4>)
 8000938:	22c0      	movs	r2, #192	; 0xc0
 800093a:	611a      	str	r2, [r3, #16]
	I2C2->CR2 |= 1<<9; //enable I2C2 event Interrupts
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <LCDPrintStringBottom+0xd4>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	4a0a      	ldr	r2, [pc, #40]	; (800096c <LCDPrintStringBottom+0xd4>)
 8000942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000946:	6053      	str	r3, [r2, #4]



}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40003000 	.word	0x40003000
 8000954:	0800b8e0 	.word	0x0800b8e0
 8000958:	200004a0 	.word	0x200004a0
 800095c:	20000224 	.word	0x20000224
 8000960:	20000222 	.word	0x20000222
 8000964:	40010c00 	.word	0x40010c00
 8000968:	20000223 	.word	0x20000223
 800096c:	40005800 	.word	0x40005800

08000970 <LEDMatrixInit>:





void LEDMatrixInit(uint8_t addr){
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800097a:	b672      	cpsid	i
	//note: BTF clearing and stop generation are handled by the Event Interrupt
	__disable_irq();



	I2C1->CR1 |= (1<<8); //send start condition
 800097c:	4b46      	ldr	r3, [pc, #280]	; (8000a98 <LEDMatrixInit+0x128>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a45      	ldr	r2, [pc, #276]	; (8000a98 <LEDMatrixInit+0x128>)
 8000982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000986:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 8000988:	bf00      	nop
 800098a:	4b43      	ldr	r3, [pc, #268]	; (8000a98 <LEDMatrixInit+0x128>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f9      	beq.n	800098a <LEDMatrixInit+0x1a>
	I2C1->DR = addr; //address the MCP23017
 8000996:	4a40      	ldr	r2, [pc, #256]	; (8000a98 <LEDMatrixInit+0x128>)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	6113      	str	r3, [r2, #16]
	while ((I2C1->SR1 & (1<<1)) == 0); //wait for ADDR flag
 800099c:	bf00      	nop
 800099e:	4b3e      	ldr	r3, [pc, #248]	; (8000a98 <LEDMatrixInit+0x128>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d0f9      	beq.n	800099e <LEDMatrixInit+0x2e>
	while ((I2C1->SR2 & (1<<2)) == 0); //read I2C SR2
 80009aa:	bf00      	nop
 80009ac:	4b3a      	ldr	r3, [pc, #232]	; (8000a98 <LEDMatrixInit+0x128>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0304 	and.w	r3, r3, #4
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d0f9      	beq.n	80009ac <LEDMatrixInit+0x3c>
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80009b8:	bf00      	nop
 80009ba:	4b37      	ldr	r3, [pc, #220]	; (8000a98 <LEDMatrixInit+0x128>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0f9      	beq.n	80009ba <LEDMatrixInit+0x4a>
	I2C1->DR = 0x00; //write to IODIR_A
 80009c6:	4b34      	ldr	r3, [pc, #208]	; (8000a98 <LEDMatrixInit+0x128>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80009cc:	bf00      	nop
 80009ce:	4b32      	ldr	r3, [pc, #200]	; (8000a98 <LEDMatrixInit+0x128>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d0f9      	beq.n	80009ce <LEDMatrixInit+0x5e>
	I2C1->DR = 0x00; //all outputs
 80009da:	4b2f      	ldr	r3, [pc, #188]	; (8000a98 <LEDMatrixInit+0x128>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80009e0:	bf00      	nop
 80009e2:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <LEDMatrixInit+0x128>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d0f9      	beq.n	80009e2 <LEDMatrixInit+0x72>
	I2C1->DR = 0x00; //all outputs for next address which is IODIR_B
 80009ee:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <LEDMatrixInit+0x128>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80009f4:	bf00      	nop
 80009f6:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <LEDMatrixInit+0x128>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f9      	beq.n	80009f6 <LEDMatrixInit+0x86>
	//while ((I2C1->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C1->CR1 |= (1<<9); //send stop condition
 8000a02:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <LEDMatrixInit+0x128>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a24      	ldr	r2, [pc, #144]	; (8000a98 <LEDMatrixInit+0x128>)
 8000a08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a0c:	6013      	str	r3, [r2, #0]

	I2C1->CR1 |= (1<<8); //send start condition
 8000a0e:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <LEDMatrixInit+0x128>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a21      	ldr	r2, [pc, #132]	; (8000a98 <LEDMatrixInit+0x128>)
 8000a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a18:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 8000a1a:	bf00      	nop
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <LEDMatrixInit+0x128>)
 8000a1e:	695b      	ldr	r3, [r3, #20]
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d0f9      	beq.n	8000a1c <LEDMatrixInit+0xac>
	I2C1->DR = addr; //address the MCP23017
 8000a28:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <LEDMatrixInit+0x128>)
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	6113      	str	r3, [r2, #16]
	while ((I2C1->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000a2e:	bf00      	nop
 8000a30:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <LEDMatrixInit+0x128>)
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d0f9      	beq.n	8000a30 <LEDMatrixInit+0xc0>
	while ((I2C1->SR2 & (1<<2)) == 0); //read I2C SR2
 8000a3c:	bf00      	nop
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <LEDMatrixInit+0x128>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0f9      	beq.n	8000a3e <LEDMatrixInit+0xce>
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000a4a:	bf00      	nop
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <LEDMatrixInit+0x128>)
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d0f9      	beq.n	8000a4c <LEDMatrixInit+0xdc>
	I2C1->DR = 0x0A; //write to IOCON
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <LEDMatrixInit+0x128>)
 8000a5a:	220a      	movs	r2, #10
 8000a5c:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000a5e:	bf00      	nop
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <LEDMatrixInit+0x128>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d0f9      	beq.n	8000a60 <LEDMatrixInit+0xf0>
	I2C1->DR = (1<<5); //disable sequential operation
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <LEDMatrixInit+0x128>)
 8000a6e:	2220      	movs	r2, #32
 8000a70:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000a72:	bf00      	nop
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <LEDMatrixInit+0x128>)
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d0f9      	beq.n	8000a74 <LEDMatrixInit+0x104>
	//while ((I2C1->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C1->CR1 |= (1<<9); //send stop condition
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <LEDMatrixInit+0x128>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <LEDMatrixInit+0x128>)
 8000a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a8c:	b662      	cpsie	i

	__enable_irq();

}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	40005400 	.word	0x40005400

08000a9c <LEDMatrixStart>:

void LEDMatrixStart(uint8_t addr){
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]

	while(blocked); //just so nothing stupid happens
 8000aa6:	bf00      	nop
 8000aa8:	4b4b      	ldr	r3, [pc, #300]	; (8000bd8 <LEDMatrixStart+0x13c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1fa      	bne.n	8000aa8 <LEDMatrixStart+0xc>


	DMA1_Channel6->CMAR = (uint32_t)LEDMatrixBuffer;
 8000ab2:	4b4a      	ldr	r3, [pc, #296]	; (8000bdc <LEDMatrixStart+0x140>)
 8000ab4:	4a4a      	ldr	r2, [pc, #296]	; (8000be0 <LEDMatrixStart+0x144>)
 8000ab6:	60da      	str	r2, [r3, #12]
	DMA1_Channel6->CPAR = (uint32_t)&(I2C1->DR);
 8000ab8:	4b48      	ldr	r3, [pc, #288]	; (8000bdc <LEDMatrixStart+0x140>)
 8000aba:	4a4a      	ldr	r2, [pc, #296]	; (8000be4 <LEDMatrixStart+0x148>)
 8000abc:	609a      	str	r2, [r3, #8]
	DMA1_Channel6->CNDTR = 16;
 8000abe:	4b47      	ldr	r3, [pc, #284]	; (8000bdc <LEDMatrixStart+0x140>)
 8000ac0:	2210      	movs	r2, #16
 8000ac2:	605a      	str	r2, [r3, #4]
	DMA1_Channel6->CCR |= (0b11<<12); //High Priority
 8000ac4:	4b45      	ldr	r3, [pc, #276]	; (8000bdc <LEDMatrixStart+0x140>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a44      	ldr	r2, [pc, #272]	; (8000bdc <LEDMatrixStart+0x140>)
 8000aca:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000ace:	6013      	str	r3, [r2, #0]
	DMA1_Channel6->CCR |= (1<<4 | 1<<7); //set MINC and Read from Memory
 8000ad0:	4b42      	ldr	r3, [pc, #264]	; (8000bdc <LEDMatrixStart+0x140>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a41      	ldr	r2, [pc, #260]	; (8000bdc <LEDMatrixStart+0x140>)
 8000ad6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000ada:	6013      	str	r3, [r2, #0]
	//DMA1_Channel6->CCR |= (1<<1); //enable transfer complete interrupt

	DMA1_Channel6->CCR |= 1; //activate DMA
 8000adc:	4b3f      	ldr	r3, [pc, #252]	; (8000bdc <LEDMatrixStart+0x140>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a3e      	ldr	r2, [pc, #248]	; (8000bdc <LEDMatrixStart+0x140>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i

	__disable_irq();

	I2C1->CR1 |= (1<<8); //send start condition
 8000aea:	4b3f      	ldr	r3, [pc, #252]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a3e      	ldr	r2, [pc, #248]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af4:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 8000af6:	bf00      	nop
 8000af8:	4b3b      	ldr	r3, [pc, #236]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0f9      	beq.n	8000af8 <LEDMatrixStart+0x5c>
	I2C1->DR = addr; //address the MCP23017
 8000b04:	4a38      	ldr	r2, [pc, #224]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	6113      	str	r3, [r2, #16]
	while ((I2C1->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000b0a:	bf00      	nop
 8000b0c:	4b36      	ldr	r3, [pc, #216]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d0f9      	beq.n	8000b0c <LEDMatrixStart+0x70>
	while ((I2C1->SR2 & (1<<2)) == 0); //read I2C SR2
 8000b18:	bf00      	nop
 8000b1a:	4b33      	ldr	r3, [pc, #204]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d0f9      	beq.n	8000b1a <LEDMatrixStart+0x7e>
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000b26:	bf00      	nop
 8000b28:	4b2f      	ldr	r3, [pc, #188]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d0f9      	beq.n	8000b28 <LEDMatrixStart+0x8c>
	I2C1->DR = 0x12; //write to GPIOA
 8000b34:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000b36:	2212      	movs	r2, #18
 8000b38:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000b3a:	bf00      	nop
 8000b3c:	4b2a      	ldr	r3, [pc, #168]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d0f9      	beq.n	8000b3c <LEDMatrixStart+0xa0>
	while ((I2C1->SR1 & (1<<2)) == 0); //make sure BTF is 1
 8000b48:	bf00      	nop
 8000b4a:	4b27      	ldr	r3, [pc, #156]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d0f9      	beq.n	8000b4a <LEDMatrixStart+0xae>
	I2C1->CR1 |= (1<<9); //send stop condition
 8000b56:	4b24      	ldr	r3, [pc, #144]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a23      	ldr	r2, [pc, #140]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000b5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b60:	6013      	str	r3, [r2, #0]

	//WARNING: the below implementation explicitly goes against RM0008 in that DMAEN is set late
	I2C1->CR2 |= (1<<9); //enable event interrupts
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	4a20      	ldr	r2, [pc, #128]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000b68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6c:	6053      	str	r3, [r2, #4]
	I2C1->CR1 |= (1<<8); //send start condition
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a1d      	ldr	r2, [pc, #116]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b78:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 8000b7a:	bf00      	nop
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d0f9      	beq.n	8000b7c <LEDMatrixStart+0xe0>
	I2C1->DR = addr; //address the MCP23017
 8000b88:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	6113      	str	r3, [r2, #16]
	while ((I2C1->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000b8e:	bf00      	nop
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d0f9      	beq.n	8000b90 <LEDMatrixStart+0xf4>
	while ((I2C1->SR2 & (1<<2)) == 0); //read I2C SR2
 8000b9c:	bf00      	nop
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0f9      	beq.n	8000b9e <LEDMatrixStart+0x102>
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000baa:	bf00      	nop
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d0f9      	beq.n	8000bac <LEDMatrixStart+0x110>
	I2C1->DR = 0x12; //write to GPIOA
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000bba:	2212      	movs	r2, #18
 8000bbc:	611a      	str	r2, [r3, #16]
	I2C1->CR2 |= (1<<11); //enable DMA Requests
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	4a09      	ldr	r2, [pc, #36]	; (8000be8 <LEDMatrixStart+0x14c>)
 8000bc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bc8:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8000bca:	b662      	cpsie	i
	__enable_irq();



}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000226 	.word	0x20000226
 8000bdc:	4002006c 	.word	0x4002006c
 8000be0:	200004b4 	.word	0x200004b4
 8000be4:	40005410 	.word	0x40005410
 8000be8:	40005400 	.word	0x40005400

08000bec <MidiCC>:

#include "usb_device.h"
#include "usbd_cdc_if.h"


void MidiCC(uint8_t channel, uint8_t cc, uint8_t val){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	71bb      	strb	r3, [r7, #6]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	717b      	strb	r3, [r7, #5]

	uint8_t buffer[3];
	buffer[0] = 0b10110000 | channel;
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	733b      	strb	r3, [r7, #12]
	buffer[1] = cc;
 8000c08:	79bb      	ldrb	r3, [r7, #6]
 8000c0a:	737b      	strb	r3, [r7, #13]
	buffer[2] = val;
 8000c0c:	797b      	ldrb	r3, [r7, #5]
 8000c0e:	73bb      	strb	r3, [r7, #14]
	//while(CDC_Transmit_FS(buffer, 3) == USBD_BUSY); //TODO: observe if it causes hangups
	CDC_Transmit_FS(buffer, 3);
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2103      	movs	r1, #3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f009 fe20 	bl	800a85c <CDC_Transmit_FS>

}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <MidiNoteOn>:



void MidiNoteOn(uint8_t channel, uint8_t note, uint8_t velo){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	71bb      	strb	r3, [r7, #6]
 8000c32:	4613      	mov	r3, r2
 8000c34:	717b      	strb	r3, [r7, #5]

	uint8_t buffer[3];
	buffer[0] = 0b10010000 | channel;
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	733b      	strb	r3, [r7, #12]
	buffer[1] = note;
 8000c40:	79bb      	ldrb	r3, [r7, #6]
 8000c42:	737b      	strb	r3, [r7, #13]
	buffer[2] = velo;
 8000c44:	797b      	ldrb	r3, [r7, #5]
 8000c46:	73bb      	strb	r3, [r7, #14]
	while(CDC_Transmit_FS(buffer, 3) == USBD_BUSY);
 8000c48:	bf00      	nop
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	2103      	movs	r1, #3
 8000c50:	4618      	mov	r0, r3
 8000c52:	f009 fe03 	bl	800a85c <CDC_Transmit_FS>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d0f6      	beq.n	8000c4a <MidiNoteOn+0x26>

}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <MidiNoteOff>:


void MidiNoteOff(uint8_t channel, uint8_t note, uint8_t velo){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	71bb      	strb	r3, [r7, #6]
 8000c72:	4613      	mov	r3, r2
 8000c74:	717b      	strb	r3, [r7, #5]

	uint8_t buffer[3];
	buffer[0] = 0b10000000 | channel;
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	733b      	strb	r3, [r7, #12]
	buffer[1] = note;
 8000c80:	79bb      	ldrb	r3, [r7, #6]
 8000c82:	737b      	strb	r3, [r7, #13]
	buffer[2] = velo;
 8000c84:	797b      	ldrb	r3, [r7, #5]
 8000c86:	73bb      	strb	r3, [r7, #14]
	while(CDC_Transmit_FS(buffer, 3) == USBD_BUSY);
 8000c88:	bf00      	nop
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2103      	movs	r1, #3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f009 fde3 	bl	800a85c <CDC_Transmit_FS>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d0f6      	beq.n	8000c8a <MidiNoteOff+0x26>

}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08e      	sub	sp, #56	; 0x38
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf2:	f001 f927 	bl	8001f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf6:	f000 faa5 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfa:	f000 fcad 	bl	8001658 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cfe:	f000 fc95 	bl	800162c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000d02:	f009 fced 	bl	800a6e0 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000d06:	f000 fb21 	bl	800134c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000d0a:	f000 fb63 	bl	80013d4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d0e:	f000 fb8f 	bl	8001430 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000d12:	f000 fbd5 	bl	80014c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d16:	f000 fc2f 	bl	8001578 <MX_TIM3_Init>
  MX_IWDG_Init();
 8000d1a:	f000 fbb7 	bl	800148c <MX_IWDG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000d1e:	f000 faf0 	bl	8001302 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  NVIC_SetPriorityGrouping(0U); //use standard interrupt grouping
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff ffbe 	bl	8000ca4 <__NVIC_SetPriorityGrouping>

  //init stuff
  DWT_Delay_Init();
 8000d28:	f7ff fa3c 	bl	80001a4 <DWT_Delay_Init>


  IWDG->KR = 0xAAAA; //reset the watchdog timer
 8000d2c:	4b91      	ldr	r3, [pc, #580]	; (8000f74 <main+0x288>)
 8000d2e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000d32:	601a      	str	r2, [r3, #0]
  blocked = 0;
 8000d34:	4b90      	ldr	r3, [pc, #576]	; (8000f78 <main+0x28c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
  I2C2->CR1 |= 1; //enable i2c 2 peripheral for LCD and EEPROM
 8000d3a:	4b90      	ldr	r3, [pc, #576]	; (8000f7c <main+0x290>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a8f      	ldr	r2, [pc, #572]	; (8000f7c <main+0x290>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6013      	str	r3, [r2, #0]
  I2C1->CR1 |= 1; //enable i2c 1 peripheral for LED Matrix
 8000d46:	4b8e      	ldr	r3, [pc, #568]	; (8000f80 <main+0x294>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a8d      	ldr	r2, [pc, #564]	; (8000f80 <main+0x294>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6013      	str	r3, [r2, #0]

  LCDInit(LCD_Address);
 8000d52:	204e      	movs	r0, #78	; 0x4e
 8000d54:	f7ff fb34 	bl	80003c0 <LCDInit>
  LEDMatrixInit(LEDMatrix_Address);
 8000d58:	2048      	movs	r0, #72	; 0x48
 8000d5a:	f7ff fe09 	bl	8000970 <LEDMatrixInit>

  LCDClear(LCD_Address);
 8000d5e:	204e      	movs	r0, #78	; 0x4e
 8000d60:	f7ff fc88 	bl	8000674 <LCDClear>

  LCDSetCursor(1, 1, LCD_Address);
 8000d64:	224e      	movs	r2, #78	; 0x4e
 8000d66:	2101      	movs	r1, #1
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff fc95 	bl	8000698 <LCDSetCursor>

  LCDPrepareInt();
 8000d6e:	f7ff fcb9 	bl	80006e4 <LCDPrepareInt>


  TIM2->CR1 |= 1; //enable BAM Driver
 8000d72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6013      	str	r3, [r2, #0]
  TIM3->CR1 |= 1; //enable encoder scan driver
 8000d82:	4b80      	ldr	r3, [pc, #512]	; (8000f84 <main+0x298>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a7f      	ldr	r2, [pc, #508]	; (8000f84 <main+0x298>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6013      	str	r3, [r2, #0]



  for(int i = 0; i < 4; i++){ //function to drive the LED's
 8000d8e:	2300      	movs	r3, #0
 8000d90:	637b      	str	r3, [r7, #52]	; 0x34
 8000d92:	e022      	b.n	8000dda <main+0xee>
	  LEDMatrixBuffer[i*4] = 0b1111; //clear all pins first to prevent ghosting
 8000d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4a7b      	ldr	r2, [pc, #492]	; (8000f88 <main+0x29c>)
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	54d1      	strb	r1, [r2, r3]
	  LEDMatrixBuffer[i*4+1] = 0x00;
 8000d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a78      	ldr	r2, [pc, #480]	; (8000f88 <main+0x29c>)
 8000da6:	2100      	movs	r1, #0
 8000da8:	54d1      	strb	r1, [r2, r3]
	  LEDMatrixBuffer[i*4+2] = ~(1<<i);
 8000daa:	2201      	movs	r2, #1
 8000dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	3302      	adds	r3, #2
 8000dba:	43d2      	mvns	r2, r2
 8000dbc:	b2d1      	uxtb	r1, r2
 8000dbe:	4a72      	ldr	r2, [pc, #456]	; (8000f88 <main+0x29c>)
 8000dc0:	54d1      	strb	r1, [r2, r3]
	  LEDMatrixBuffer[i*4+3] = LEDMatrix[i];
 8000dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	3303      	adds	r3, #3
 8000dc8:	4970      	ldr	r1, [pc, #448]	; (8000f8c <main+0x2a0>)
 8000dca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000dcc:	440a      	add	r2, r1
 8000dce:	7811      	ldrb	r1, [r2, #0]
 8000dd0:	4a6d      	ldr	r2, [pc, #436]	; (8000f88 <main+0x29c>)
 8000dd2:	54d1      	strb	r1, [r2, r3]
  for(int i = 0; i < 4; i++){ //function to drive the LED's
 8000dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8000dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	ddd9      	ble.n	8000d94 <main+0xa8>
  }

  LEDMatrixStart(LEDMatrix_Address);
 8000de0:	2048      	movs	r0, #72	; 0x48
 8000de2:	f7ff fe5b 	bl	8000a9c <LEDMatrixStart>




  for(int i = 0; i < 4; i++){ //function to fill in the MidiNoteLut
 8000de6:	2300      	movs	r3, #0
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
 8000dea:	e022      	b.n	8000e32 <main+0x146>

	  for(int j = 0; j < 4; j++){
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000df0:	e019      	b.n	8000e26 <main+0x13a>

		  MidiNoteLUT[5*(3-i)+j+1] = MidiNoteOffset + (4*i+j); //math...
 8000df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	4413      	add	r3, r2
 8000e00:	b2d8      	uxtb	r0, r3
 8000e02:	4b63      	ldr	r3, [pc, #396]	; (8000f90 <main+0x2a4>)
 8000e04:	7819      	ldrb	r1, [r3, #0]
 8000e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e08:	f1c3 0203 	rsb	r2, r3, #3
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	441a      	add	r2, r3
 8000e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e14:	4413      	add	r3, r2
 8000e16:	3301      	adds	r3, #1
 8000e18:	1842      	adds	r2, r0, r1
 8000e1a:	b2d1      	uxtb	r1, r2
 8000e1c:	4a5d      	ldr	r2, [pc, #372]	; (8000f94 <main+0x2a8>)
 8000e1e:	54d1      	strb	r1, [r2, r3]
	  for(int j = 0; j < 4; j++){
 8000e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e22:	3301      	adds	r3, #1
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	dde2      	ble.n	8000df2 <main+0x106>
  for(int i = 0; i < 4; i++){ //function to fill in the MidiNoteLut
 8000e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2e:	3301      	adds	r3, #1
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
 8000e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	ddd9      	ble.n	8000dec <main+0x100>

	  }

  }

  for(int i = 0; i < 4; i++){
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e3c:	e028      	b.n	8000e90 <main+0x1a4>

	  int currentADC = ADC1ReadVal8(i);
 8000e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff f982 	bl	800014c <ADC1ReadVal8>
 8000e48:	6078      	str	r0, [r7, #4]
	  currentADC += ADC1ReadVal8(i);
 8000e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff f97c 	bl	800014c <ADC1ReadVal8>
 8000e54:	4602      	mov	r2, r0
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	607b      	str	r3, [r7, #4]
	  currentADC += ADC1ReadVal8(i);
 8000e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff f973 	bl	800014c <ADC1ReadVal8>
 8000e66:	4602      	mov	r2, r0
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	607b      	str	r3, [r7, #4]
	  currentADC = currentADC/3;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a49      	ldr	r2, [pc, #292]	; (8000f98 <main+0x2ac>)
 8000e72:	fb82 1203 	smull	r1, r2, r2, r3
 8000e76:	17db      	asrs	r3, r3, #31
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	607b      	str	r3, [r7, #4]

	  lastFaderValues[i] = currentADC;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	b2d9      	uxtb	r1, r3
 8000e80:	4a46      	ldr	r2, [pc, #280]	; (8000f9c <main+0x2b0>)
 8000e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e84:	4413      	add	r3, r2
 8000e86:	460a      	mov	r2, r1
 8000e88:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 4; i++){
 8000e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	ddd3      	ble.n	8000e3e <main+0x152>


  }

  for(int i = 0; i < 5; i++){
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
 8000e9a:	e00c      	b.n	8000eb6 <main+0x1ca>

	  lastEncoderValues[i] = encoderValues[i];
 8000e9c:	4a40      	ldr	r2, [pc, #256]	; (8000fa0 <main+0x2b4>)
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea4:	b2d9      	uxtb	r1, r3
 8000ea6:	4a3f      	ldr	r2, [pc, #252]	; (8000fa4 <main+0x2b8>)
 8000ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eaa:	4413      	add	r3, r2
 8000eac:	460a      	mov	r2, r1
 8000eae:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 5; i++){
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	2b04      	cmp	r3, #4
 8000eba:	ddef      	ble.n	8000e9c <main+0x1b0>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  IWDG->KR = 0xAAAA; //reset the watchdog timer
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <main+0x288>)
 8000ebe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000ec2:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  brightness[0] = encoderValues[3];
 8000ec4:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <main+0x2b4>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <main+0x2bc>)
 8000ecc:	701a      	strb	r2, [r3, #0]
	  brightness[1] = encoderValues[2];
 8000ece:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <main+0x2b4>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <main+0x2bc>)
 8000ed6:	705a      	strb	r2, [r3, #1]
	  brightness[2] = encoderValues[1];
 8000ed8:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <main+0x2b4>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <main+0x2bc>)
 8000ee0:	709a      	strb	r2, [r3, #2]
	  brightness[3] = encoderValues[0];
 8000ee2:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <main+0x2b4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <main+0x2bc>)
 8000eea:	70da      	strb	r2, [r3, #3]




	  for(int i = 0; i < 4; i++){ //send encoder CC Values
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
 8000ef0:	e03a      	b.n	8000f68 <main+0x27c>

		  if(encoderValues[i] != lastEncoderValues[i]){
 8000ef2:	4a2b      	ldr	r2, [pc, #172]	; (8000fa0 <main+0x2b4>)
 8000ef4:	6a3b      	ldr	r3, [r7, #32]
 8000ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efa:	492a      	ldr	r1, [pc, #168]	; (8000fa4 <main+0x2b8>)
 8000efc:	6a3a      	ldr	r2, [r7, #32]
 8000efe:	440a      	add	r2, r1
 8000f00:	7812      	ldrb	r2, [r2, #0]
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d02d      	beq.n	8000f62 <main+0x276>

			  MidiCC(MidiChannel, MidiCCEncoderLUT[i], (encoderValues[i]>>1));
 8000f06:	4b29      	ldr	r3, [pc, #164]	; (8000fac <main+0x2c0>)
 8000f08:	7818      	ldrb	r0, [r3, #0]
 8000f0a:	4a29      	ldr	r2, [pc, #164]	; (8000fb0 <main+0x2c4>)
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	4413      	add	r3, r2
 8000f10:	7819      	ldrb	r1, [r3, #0]
 8000f12:	4a23      	ldr	r2, [pc, #140]	; (8000fa0 <main+0x2b4>)
 8000f14:	6a3b      	ldr	r3, [r7, #32]
 8000f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1a:	105b      	asrs	r3, r3, #1
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	461a      	mov	r2, r3
 8000f20:	f7ff fe64 	bl	8000bec <MidiCC>
			  snprintf(LCDQueueTop, 17, "Encoder %-8d", i);
 8000f24:	6a3b      	ldr	r3, [r7, #32]
 8000f26:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <main+0x2c8>)
 8000f28:	2111      	movs	r1, #17
 8000f2a:	4823      	ldr	r0, [pc, #140]	; (8000fb8 <main+0x2cc>)
 8000f2c:	f00a f8a6 	bl	800b07c <sniprintf>
			  LCDTopQueued = 1;
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <main+0x2d0>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
			  snprintf(LCDQueueBottom, 17, "%-16d", encoderValues[i]);
 8000f36:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <main+0x2b4>)
 8000f38:	6a3b      	ldr	r3, [r7, #32]
 8000f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3e:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <main+0x2d4>)
 8000f40:	2111      	movs	r1, #17
 8000f42:	4820      	ldr	r0, [pc, #128]	; (8000fc4 <main+0x2d8>)
 8000f44:	f00a f89a 	bl	800b07c <sniprintf>
			  LCDBottomQueued = 1;
 8000f48:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <main+0x2dc>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]

			  lastEncoderValues[i] = encoderValues[i];
 8000f4e:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <main+0x2b4>)
 8000f50:	6a3b      	ldr	r3, [r7, #32]
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	b2d9      	uxtb	r1, r3
 8000f58:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <main+0x2b8>)
 8000f5a:	6a3b      	ldr	r3, [r7, #32]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	460a      	mov	r2, r1
 8000f60:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < 4; i++){ //send encoder CC Values
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	3301      	adds	r3, #1
 8000f66:	623b      	str	r3, [r7, #32]
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	ddc1      	ble.n	8000ef2 <main+0x206>

		  }

	  }

	  for(int i = 1; i < 4; i++){
 8000f6e:	2301      	movs	r3, #1
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	e06c      	b.n	800104e <main+0x362>
 8000f74:	40003000 	.word	0x40003000
 8000f78:	20000226 	.word	0x20000226
 8000f7c:	40005800 	.word	0x40005800
 8000f80:	40005400 	.word	0x40005400
 8000f84:	40000400 	.word	0x40000400
 8000f88:	200004b4 	.word	0x200004b4
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000018 	.word	0x20000018
 8000f94:	20000608 	.word	0x20000608
 8000f98:	55555556 	.word	0x55555556
 8000f9c:	2000024c 	.word	0x2000024c
 8000fa0:	20000230 	.word	0x20000230
 8000fa4:	20000244 	.word	0x20000244
 8000fa8:	20000004 	.word	0x20000004
 8000fac:	20000258 	.word	0x20000258
 8000fb0:	20000020 	.word	0x20000020
 8000fb4:	0800b8e8 	.word	0x0800b8e8
 8000fb8:	20000690 	.word	0x20000690
 8000fbc:	200006fd 	.word	0x200006fd
 8000fc0:	0800b8f8 	.word	0x0800b8f8
 8000fc4:	200006ec 	.word	0x200006ec
 8000fc8:	200004c4 	.word	0x200004c4

		  int currentADC = ADC1ReadVal8(i);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff f8bb 	bl	800014c <ADC1ReadVal8>
 8000fd6:	60b8      	str	r0, [r7, #8]
		  currentADC += ADC1ReadVal8(i);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff f8b5 	bl	800014c <ADC1ReadVal8>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60bb      	str	r3, [r7, #8]
		  currentADC += ADC1ReadVal8(i);
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff f8ac 	bl	800014c <ADC1ReadVal8>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
		  currentADC = currentADC/3;
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4a81      	ldr	r2, [pc, #516]	; (8001204 <main+0x518>)
 8001000:	fb82 1203 	smull	r1, r2, r2, r3
 8001004:	17db      	asrs	r3, r3, #31
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	60bb      	str	r3, [r7, #8]

		  if(abs(currentADC - lastFaderValues[i]) > 3){ // this particular ADC Channel has been updated
 800100a:	4a7f      	ldr	r2, [pc, #508]	; (8001208 <main+0x51c>)
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	4413      	add	r3, r2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	1a9b      	subs	r3, r3, r2
 8001018:	2b00      	cmp	r3, #0
 800101a:	bfb8      	it	lt
 800101c:	425b      	neglt	r3, r3
 800101e:	2b03      	cmp	r3, #3
 8001020:	dd12      	ble.n	8001048 <main+0x35c>

			  MidiCC(MidiChannel, MidiCCFaderLUT[i], (currentADC>>1));
 8001022:	4b7a      	ldr	r3, [pc, #488]	; (800120c <main+0x520>)
 8001024:	7818      	ldrb	r0, [r3, #0]
 8001026:	4a7a      	ldr	r2, [pc, #488]	; (8001210 <main+0x524>)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	4413      	add	r3, r2
 800102c:	7819      	ldrb	r1, [r3, #0]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	105b      	asrs	r3, r3, #1
 8001032:	b2db      	uxtb	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	f7ff fdd9 	bl	8000bec <MidiCC>
			  lastFaderValues[i] = currentADC;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	b2d9      	uxtb	r1, r3
 800103e:	4a72      	ldr	r2, [pc, #456]	; (8001208 <main+0x51c>)
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	4413      	add	r3, r2
 8001044:	460a      	mov	r2, r1
 8001046:	701a      	strb	r2, [r3, #0]
	  for(int i = 1; i < 4; i++){
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	3301      	adds	r3, #1
 800104c:	61fb      	str	r3, [r7, #28]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	2b03      	cmp	r3, #3
 8001052:	ddbb      	ble.n	8000fcc <main+0x2e0>




	  //scan key matrix
	  for(int i = 0; i < 4; i++){
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	e01b      	b.n	8001092 <main+0x3a6>

		  GPIOA->BRR = (0b1111 << 4);  //clear all of PA 4,5,6,7
 800105a:	4b6e      	ldr	r3, [pc, #440]	; (8001214 <main+0x528>)
 800105c:	22f0      	movs	r2, #240	; 0xf0
 800105e:	615a      	str	r2, [r3, #20]
		  GPIOA->BSRR = (1 << (4+i));  //energize the ith row
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	3304      	adds	r3, #4
 8001064:	2201      	movs	r2, #1
 8001066:	409a      	lsls	r2, r3
 8001068:	4b6a      	ldr	r3, [pc, #424]	; (8001214 <main+0x528>)
 800106a:	611a      	str	r2, [r3, #16]
		  currentKeyMatrix |= ((((GPIOB->IDR) >> 3) & 0b11111) << (5*i)); //hmmmmmmmmm
 800106c:	4b6a      	ldr	r3, [pc, #424]	; (8001218 <main+0x52c>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	08db      	lsrs	r3, r3, #3
 8001072:	f003 011f 	and.w	r1, r3, #31
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	fa01 f203 	lsl.w	r2, r1, r3
 8001082:	4b66      	ldr	r3, [pc, #408]	; (800121c <main+0x530>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4313      	orrs	r3, r2
 8001088:	4a64      	ldr	r2, [pc, #400]	; (800121c <main+0x530>)
 800108a:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < 4; i++){
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	3301      	adds	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	2b03      	cmp	r3, #3
 8001096:	dde0      	ble.n	800105a <main+0x36e>

	  }

	  //a key was pressed
	  if(currentKeyMatrix != lastKeyMatrix){
 8001098:	4b60      	ldr	r3, [pc, #384]	; (800121c <main+0x530>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b60      	ldr	r3, [pc, #384]	; (8001220 <main+0x534>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	f000 808e 	beq.w	80011c2 <main+0x4d6>

		  //handle keys here
		  for(int i = 0; i < 4; i++){
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	e014      	b.n	80010d6 <main+0x3ea>

			  LEDMatrix[3-i] = (currentKeyMatrix >> ((5*i)+1)) & 0b1111;
 80010ac:	4b5b      	ldr	r3, [pc, #364]	; (800121c <main+0x530>)
 80010ae:	6819      	ldr	r1, [r3, #0]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	3301      	adds	r3, #1
 80010ba:	fa21 f303 	lsr.w	r3, r1, r3
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f1c3 0303 	rsb	r3, r3, #3
 80010c6:	f002 020f 	and.w	r2, r2, #15
 80010ca:	b2d1      	uxtb	r1, r2
 80010cc:	4a55      	ldr	r2, [pc, #340]	; (8001224 <main+0x538>)
 80010ce:	54d1      	strb	r1, [r2, r3]
		  for(int i = 0; i < 4; i++){
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3301      	adds	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2b03      	cmp	r3, #3
 80010da:	dde7      	ble.n	80010ac <main+0x3c0>
			  //LEDMatrix[3-i] = (1<<i); //FRAK ZERO INDEXING alkfjngkjkfla (originally the idiot me had 4-i)
			  //hmmm, but on a more serious note tho, why is this array out of bounds not detected... that's definitely something to keep in mind
		  }

		  for(int i = 0; i < 4; i++){ //function to drive the LED's
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	e022      	b.n	8001128 <main+0x43c>

			  LEDMatrixBuffer[i*4] = 0b1111; //clear all pins first to prevent ghosting
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4a50      	ldr	r2, [pc, #320]	; (8001228 <main+0x53c>)
 80010e8:	210f      	movs	r1, #15
 80010ea:	54d1      	strb	r1, [r2, r3]
			  LEDMatrixBuffer[i*4+1] = 0x00;
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	3301      	adds	r3, #1
 80010f2:	4a4d      	ldr	r2, [pc, #308]	; (8001228 <main+0x53c>)
 80010f4:	2100      	movs	r1, #0
 80010f6:	54d1      	strb	r1, [r2, r3]
			  LEDMatrixBuffer[i*4+2] = ~(1<<i);
 80010f8:	2201      	movs	r2, #1
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	b2da      	uxtb	r2, r3
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	43d2      	mvns	r2, r2
 800110a:	b2d1      	uxtb	r1, r2
 800110c:	4a46      	ldr	r2, [pc, #280]	; (8001228 <main+0x53c>)
 800110e:	54d1      	strb	r1, [r2, r3]
			  LEDMatrixBuffer[i*4+3] = LEDMatrix[i];
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	3303      	adds	r3, #3
 8001116:	4943      	ldr	r1, [pc, #268]	; (8001224 <main+0x538>)
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	440a      	add	r2, r1
 800111c:	7811      	ldrb	r1, [r2, #0]
 800111e:	4a42      	ldr	r2, [pc, #264]	; (8001228 <main+0x53c>)
 8001120:	54d1      	strb	r1, [r2, r3]
		  for(int i = 0; i < 4; i++){ //function to drive the LED's
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	3301      	adds	r3, #1
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	2b03      	cmp	r3, #3
 800112c:	ddd9      	ble.n	80010e2 <main+0x3f6>

		   }

		  for(int i = 0; i < 20; i++){ //iterate through all 20 bits and send out Midi Note messages as necessary
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	e03f      	b.n	80011b4 <main+0x4c8>

			  if((currentKeyMatrix & (1<<i)) && ((lastKeyMatrix & (1<<i)) == 0)){ //this key was pressed
 8001134:	2201      	movs	r2, #1
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	461a      	mov	r2, r3
 800113e:	4b37      	ldr	r3, [pc, #220]	; (800121c <main+0x530>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4013      	ands	r3, r2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d014      	beq.n	8001172 <main+0x486>
 8001148:	2201      	movs	r2, #1
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	461a      	mov	r2, r3
 8001152:	4b33      	ldr	r3, [pc, #204]	; (8001220 <main+0x534>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4013      	ands	r3, r2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10a      	bne.n	8001172 <main+0x486>

				  MidiNoteOn(MidiChannel, MidiNoteLUT[i], 127);
 800115c:	4b2b      	ldr	r3, [pc, #172]	; (800120c <main+0x520>)
 800115e:	7818      	ldrb	r0, [r3, #0]
 8001160:	4a32      	ldr	r2, [pc, #200]	; (800122c <main+0x540>)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4413      	add	r3, r2
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	227f      	movs	r2, #127	; 0x7f
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fd5a 	bl	8000c24 <MidiNoteOn>
 8001170:	e01d      	b.n	80011ae <main+0x4c2>

			  }


			  else if((lastKeyMatrix & (1<<i)) && ((currentKeyMatrix & (1<<i)) == 0)){
 8001172:	2201      	movs	r2, #1
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	461a      	mov	r2, r3
 800117c:	4b28      	ldr	r3, [pc, #160]	; (8001220 <main+0x534>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4013      	ands	r3, r2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d013      	beq.n	80011ae <main+0x4c2>
 8001186:	2201      	movs	r2, #1
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	461a      	mov	r2, r3
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <main+0x530>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4013      	ands	r3, r2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d109      	bne.n	80011ae <main+0x4c2>

				  MidiNoteOff(MidiChannel, MidiNoteLUT[i], 0);
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <main+0x520>)
 800119c:	7818      	ldrb	r0, [r3, #0]
 800119e:	4a23      	ldr	r2, [pc, #140]	; (800122c <main+0x540>)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	f7ff fd5b 	bl	8000c64 <MidiNoteOff>
		  for(int i = 0; i < 20; i++){ //iterate through all 20 bits and send out Midi Note messages as necessary
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	3301      	adds	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b13      	cmp	r3, #19
 80011b8:	ddbc      	ble.n	8001134 <main+0x448>

			  }

		  }

		  lastKeyMatrix = currentKeyMatrix;
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <main+0x530>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <main+0x534>)
 80011c0:	6013      	str	r3, [r2, #0]
	  }

	  currentKeyMatrix = 0; //start afresh
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <main+0x530>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]


	  if(!isLCDPrinting){ //update LCD here
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <main+0x544>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d114      	bne.n	80011fc <main+0x510>
		  if(LCDTopQueued){
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <main+0x548>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d006      	beq.n	80011e8 <main+0x4fc>
			  LCDPrintStringTop(LCDQueueTop);
 80011da:	4817      	ldr	r0, [pc, #92]	; (8001238 <main+0x54c>)
 80011dc:	f7ff faf0 	bl	80007c0 <LCDPrintStringTop>
			  LCDTopQueued = 0;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <main+0x548>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
 80011e6:	e009      	b.n	80011fc <main+0x510>
		  }
		  else if(LCDBottomQueued){
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <main+0x550>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <main+0x510>
			  LCDPrintStringBottom(LCDQueueBottom);
 80011f0:	4813      	ldr	r0, [pc, #76]	; (8001240 <main+0x554>)
 80011f2:	f7ff fb51 	bl	8000898 <LCDPrintStringBottom>
			  LCDBottomQueued = 0;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <main+0x550>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]





	  DWT_Delay_ms(10);
 80011fc:	200a      	movs	r0, #10
 80011fe:	f7ff f827 	bl	8000250 <DWT_Delay_ms>
	  IWDG->KR = 0xAAAA; //reset the watchdog timer
 8001202:	e65b      	b.n	8000ebc <main+0x1d0>
 8001204:	55555556 	.word	0x55555556
 8001208:	2000024c 	.word	0x2000024c
 800120c:	20000258 	.word	0x20000258
 8001210:	2000001c 	.word	0x2000001c
 8001214:	40010800 	.word	0x40010800
 8001218:	40010c00 	.word	0x40010c00
 800121c:	20000254 	.word	0x20000254
 8001220:	20000250 	.word	0x20000250
 8001224:	20000000 	.word	0x20000000
 8001228:	200004b4 	.word	0x200004b4
 800122c:	20000608 	.word	0x20000608
 8001230:	20000222 	.word	0x20000222
 8001234:	200006fd 	.word	0x200006fd
 8001238:	20000690 	.word	0x20000690
 800123c:	200004c4 	.word	0x200004c4
 8001240:	200006ec 	.word	0x200006ec

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b094      	sub	sp, #80	; 0x50
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124e:	2228      	movs	r2, #40	; 0x28
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f009 ff0a 	bl	800b06c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001274:	2309      	movs	r3, #9
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001282:	2301      	movs	r3, #1
 8001284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001286:	2301      	movs	r3, #1
 8001288:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128a:	2302      	movs	r3, #2
 800128c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001292:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001294:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001298:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800129e:	4618      	mov	r0, r3
 80012a0:	f004 fdaa 	bl	8005df8 <HAL_RCC_OscConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80012aa:	f000 fa73 	bl	8001794 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ae:	230f      	movs	r3, #15
 80012b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b2:	2302      	movs	r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2102      	movs	r1, #2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f005 f814 	bl	80062f8 <HAL_RCC_ClockConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012d6:	f000 fa5d 	bl	8001794 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80012da:	2312      	movs	r3, #18
 80012dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80012de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012e2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	4618      	mov	r0, r3
 80012ec:	f005 f98c 	bl	8006608 <HAL_RCCEx_PeriphCLKConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80012f6:	f000 fa4d 	bl	8001794 <Error_Handler>
  }
}
 80012fa:	bf00      	nop
 80012fc:	3750      	adds	r7, #80	; 0x50
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2101      	movs	r1, #1
 800130a:	201c      	movs	r0, #28
 800130c:	f001 f95d 	bl	80025ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001310:	201c      	movs	r0, #28
 8001312:	f001 f976 	bl	8002602 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2102      	movs	r1, #2
 800131a:	201d      	movs	r0, #29
 800131c:	f001 f955 	bl	80025ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001320:	201d      	movs	r0, #29
 8001322:	f001 f96e 	bl	8002602 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	2010      	movs	r0, #16
 800132c:	f001 f94d 	bl	80025ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001330:	2010      	movs	r0, #16
 8001332:	f001 f966 	bl	8002602 <HAL_NVIC_EnableIRQ>
  /* I2C2_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2021      	movs	r0, #33	; 0x21
 800133c:	f001 f945 	bl	80025ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001340:	2021      	movs	r0, #33	; 0x21
 8001342:	f001 f95e 	bl	8002602 <HAL_NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_ADC1_Init+0x80>)
 800135e:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <MX_ADC1_Init+0x84>)
 8001360:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_ADC1_Init+0x80>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_ADC1_Init+0x80>)
 800136a:	2200      	movs	r2, #0
 800136c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_ADC1_Init+0x80>)
 8001370:	2200      	movs	r2, #0
 8001372:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_ADC1_Init+0x80>)
 8001376:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800137a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_ADC1_Init+0x80>)
 800137e:	2200      	movs	r2, #0
 8001380:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_ADC1_Init+0x80>)
 8001384:	2201      	movs	r2, #1
 8001386:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001388:	4810      	ldr	r0, [pc, #64]	; (80013cc <MX_ADC1_Init+0x80>)
 800138a:	f000 fe3d 	bl	8002008 <HAL_ADC_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001394:	f000 f9fe 	bl	8001794 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001398:	2301      	movs	r3, #1
 800139a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800139c:	2301      	movs	r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4619      	mov	r1, r3
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <MX_ADC1_Init+0x80>)
 80013aa:	f000 ff05 	bl	80021b8 <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80013b4:	f000 f9ee 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ADC1->CR2 |= 1; //turn on ADC1
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <MX_ADC1_Init+0x84>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <MX_ADC1_Init+0x84>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC1_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000660 	.word	0x20000660
 80013d0:	40012400 	.word	0x40012400

080013d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <MX_I2C1_Init+0x50>)
 80013da:	4a13      	ldr	r2, [pc, #76]	; (8001428 <MX_I2C1_Init+0x54>)
 80013dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_I2C1_Init+0x50>)
 80013e0:	4a12      	ldr	r2, [pc, #72]	; (800142c <MX_I2C1_Init+0x58>)
 80013e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_I2C1_Init+0x50>)
 80013f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f8:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <MX_I2C1_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_I2C1_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <MX_I2C1_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_I2C1_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001410:	4804      	ldr	r0, [pc, #16]	; (8001424 <MX_I2C1_Init+0x50>)
 8001412:	f001 fc65 	bl	8002ce0 <HAL_I2C_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800141c:	f000 f9ba 	bl	8001794 <Error_Handler>
  //dude, the code generation is evil... doesn't help you all the way!!! Came a gutsa so many times....


  /* USER CODE END I2C1_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2000050c 	.word	0x2000050c
 8001428:	40005400 	.word	0x40005400
 800142c:	00061a80 	.word	0x00061a80

08001430 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_I2C2_Init+0x50>)
 8001436:	4a13      	ldr	r2, [pc, #76]	; (8001484 <MX_I2C2_Init+0x54>)
 8001438:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_I2C2_Init+0x50>)
 800143c:	4a12      	ldr	r2, [pc, #72]	; (8001488 <MX_I2C2_Init+0x58>)
 800143e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_I2C2_Init+0x50>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_I2C2_Init+0x50>)
 8001448:	2200      	movs	r2, #0
 800144a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_I2C2_Init+0x50>)
 800144e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001452:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <MX_I2C2_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_I2C2_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <MX_I2C2_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_I2C2_Init+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <MX_I2C2_Init+0x50>)
 800146e:	f001 fc37 	bl	8002ce0 <HAL_I2C_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001478:	f000 f98c 	bl	8001794 <Error_Handler>
  /* USER CODE BEGIN I2C2_Init 2 */
  //I2C2->CR2 |= (1<<9); //enable event interrupts
  //TODO: this is just temporarily here, might cause issues
  /* USER CODE END I2C2_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	2000056c 	.word	0x2000056c
 8001484:	40005800 	.word	0x40005800
 8001488:	000186a0 	.word	0x000186a0

0800148c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_IWDG_Init+0x2c>)
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <MX_IWDG_Init+0x30>)
 8001494:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <MX_IWDG_Init+0x2c>)
 8001498:	2202      	movs	r2, #2
 800149a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_IWDG_Init+0x2c>)
 800149e:	f640 72ff 	movw	r2, #4095	; 0xfff
 80014a2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <MX_IWDG_Init+0x2c>)
 80014a6:	f003 f8eb 	bl	8004680 <HAL_IWDG_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80014b0:	f000 f970 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000560 	.word	0x20000560
 80014bc:	40003000 	.word	0x40003000

080014c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	463b      	mov	r3, r7
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014dc:	4b25      	ldr	r3, [pc, #148]	; (8001574 <MX_TIM2_Init+0xb4>)
 80014de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80014e4:	4b23      	ldr	r3, [pc, #140]	; (8001574 <MX_TIM2_Init+0xb4>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b22      	ldr	r3, [pc, #136]	; (8001574 <MX_TIM2_Init+0xb4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 511;
 80014f0:	4b20      	ldr	r3, [pc, #128]	; (8001574 <MX_TIM2_Init+0xb4>)
 80014f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80014f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <MX_TIM2_Init+0xb4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <MX_TIM2_Init+0xb4>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001504:	481b      	ldr	r0, [pc, #108]	; (8001574 <MX_TIM2_Init+0xb4>)
 8001506:	f005 f935 	bl	8006774 <HAL_TIM_Base_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001510:	f000 f940 	bl	8001794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001518:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	4619      	mov	r1, r3
 8001520:	4814      	ldr	r0, [pc, #80]	; (8001574 <MX_TIM2_Init+0xb4>)
 8001522:	f005 fa7e 	bl	8006a22 <HAL_TIM_ConfigClockSource>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800152c:	f000 f932 	bl	8001794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	4619      	mov	r1, r3
 800153c:	480d      	ldr	r0, [pc, #52]	; (8001574 <MX_TIM2_Init+0xb4>)
 800153e:	f005 fc4d 	bl	8006ddc <HAL_TIMEx_MasterConfigSynchronization>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001548:	f000 f924 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIM2->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the BAM Interrupt is triggered
 800154c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001556:	f023 0302 	bic.w	r3, r3, #2
 800155a:	6013      	str	r3, [r2, #0]
  TIM2->DIER |= 1; //Update interrupt enable
 800155c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	60d3      	str	r3, [r2, #12]

  /* USER CODE END TIM2_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200006a4 	.word	0x200006a4

08001578 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	463b      	mov	r3, r7
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <MX_TIM3_Init+0xac>)
 8001596:	4a24      	ldr	r2, [pc, #144]	; (8001628 <MX_TIM3_Init+0xb0>)
 8001598:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800159a:	4b22      	ldr	r3, [pc, #136]	; (8001624 <MX_TIM3_Init+0xac>)
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <MX_TIM3_Init+0xac>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16383;
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <MX_TIM3_Init+0xac>)
 80015a8:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80015ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <MX_TIM3_Init+0xac>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <MX_TIM3_Init+0xac>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015ba:	481a      	ldr	r0, [pc, #104]	; (8001624 <MX_TIM3_Init+0xac>)
 80015bc:	f005 f8da 	bl	8006774 <HAL_TIM_Base_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80015c6:	f000 f8e5 	bl	8001794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4619      	mov	r1, r3
 80015d6:	4813      	ldr	r0, [pc, #76]	; (8001624 <MX_TIM3_Init+0xac>)
 80015d8:	f005 fa23 	bl	8006a22 <HAL_TIM_ConfigClockSource>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80015e2:	f000 f8d7 	bl	8001794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015ee:	463b      	mov	r3, r7
 80015f0:	4619      	mov	r1, r3
 80015f2:	480c      	ldr	r0, [pc, #48]	; (8001624 <MX_TIM3_Init+0xac>)
 80015f4:	f005 fbf2 	bl	8006ddc <HAL_TIMEx_MasterConfigSynchronization>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80015fe:	f000 f8c9 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the Encoder Scan Interrupt is triggered
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_TIM3_Init+0xb0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <MX_TIM3_Init+0xb0>)
 8001608:	f023 0302 	bic.w	r3, r3, #2
 800160c:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= 1; //Update interrupt enable
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_TIM3_Init+0xb0>)
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <MX_TIM3_Init+0xb0>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM3_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200005c0 	.word	0x200005c0
 8001628:	40000400 	.word	0x40000400

0800162c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MX_DMA_Init+0x28>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	4a07      	ldr	r2, [pc, #28]	; (8001654 <MX_DMA_Init+0x28>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6153      	str	r3, [r2, #20]
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <MX_DMA_Init+0x28>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	40021000 	.word	0x40021000

08001658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166c:	4b45      	ldr	r3, [pc, #276]	; (8001784 <MX_GPIO_Init+0x12c>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a44      	ldr	r2, [pc, #272]	; (8001784 <MX_GPIO_Init+0x12c>)
 8001672:	f043 0310 	orr.w	r3, r3, #16
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b42      	ldr	r3, [pc, #264]	; (8001784 <MX_GPIO_Init+0x12c>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001684:	4b3f      	ldr	r3, [pc, #252]	; (8001784 <MX_GPIO_Init+0x12c>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a3e      	ldr	r2, [pc, #248]	; (8001784 <MX_GPIO_Init+0x12c>)
 800168a:	f043 0320 	orr.w	r3, r3, #32
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b3c      	ldr	r3, [pc, #240]	; (8001784 <MX_GPIO_Init+0x12c>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0320 	and.w	r3, r3, #32
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	4b39      	ldr	r3, [pc, #228]	; (8001784 <MX_GPIO_Init+0x12c>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a38      	ldr	r2, [pc, #224]	; (8001784 <MX_GPIO_Init+0x12c>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b36      	ldr	r3, [pc, #216]	; (8001784 <MX_GPIO_Init+0x12c>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b4:	4b33      	ldr	r3, [pc, #204]	; (8001784 <MX_GPIO_Init+0x12c>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a32      	ldr	r2, [pc, #200]	; (8001784 <MX_GPIO_Init+0x12c>)
 80016ba:	f043 0308 	orr.w	r3, r3, #8
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b30      	ldr	r3, [pc, #192]	; (8001784 <MX_GPIO_Init+0x12c>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	603b      	str	r3, [r7, #0]
 80016ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80016d2:	482d      	ldr	r0, [pc, #180]	; (8001788 <MX_GPIO_Init+0x130>)
 80016d4:	f001 faec 	bl	8002cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80016d8:	2200      	movs	r2, #0
 80016da:	f248 11f0 	movw	r1, #33264	; 0x81f0
 80016de:	482b      	ldr	r0, [pc, #172]	; (800178c <MX_GPIO_Init+0x134>)
 80016e0:	f001 fae6 	bl	8002cb0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80016e4:	2200      	movs	r2, #0
 80016e6:	f24f 0102 	movw	r1, #61442	; 0xf002
 80016ea:	4829      	ldr	r0, [pc, #164]	; (8001790 <MX_GPIO_Init+0x138>)
 80016ec:	f001 fae0 	bl	8002cb0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80016f0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	4619      	mov	r1, r3
 8001708:	481f      	ldr	r0, [pc, #124]	; (8001788 <MX_GPIO_Init+0x130>)
 800170a:	f001 f977 	bl	80029fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800170e:	f248 13f0 	movw	r3, #33264	; 0x81f0
 8001712:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001714:	2301      	movs	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	4619      	mov	r1, r3
 8001726:	4819      	ldr	r0, [pc, #100]	; (800178c <MX_GPIO_Init+0x134>)
 8001728:	f001 f968 	bl	80029fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800172c:	f24f 0302 	movw	r3, #61442	; 0xf002
 8001730:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	4619      	mov	r1, r3
 8001744:	4812      	ldr	r0, [pc, #72]	; (8001790 <MX_GPIO_Init+0x138>)
 8001746:	f001 f959 	bl	80029fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800174a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800174e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	4619      	mov	r1, r3
 800175e:	480b      	ldr	r0, [pc, #44]	; (800178c <MX_GPIO_Init+0x134>)
 8001760:	f001 f94c 	bl	80029fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001764:	23f8      	movs	r3, #248	; 0xf8
 8001766:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800176c:	2302      	movs	r3, #2
 800176e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4619      	mov	r1, r3
 8001776:	4806      	ldr	r0, [pc, #24]	; (8001790 <MX_GPIO_Init+0x138>)
 8001778:	f001 f940 	bl	80029fc <HAL_GPIO_Init>

}
 800177c:	bf00      	nop
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40021000 	.word	0x40021000
 8001788:	40011000 	.word	0x40011000
 800178c:	40010800 	.word	0x40010800
 8001790:	40010c00 	.word	0x40010c00

08001794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001798:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800179a:	e7fe      	b.n	800179a <Error_Handler+0x6>

0800179c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_MspInit+0x5c>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <HAL_MspInit+0x5c>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6193      	str	r3, [r2, #24]
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_MspInit+0x5c>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_MspInit+0x5c>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <HAL_MspInit+0x5c>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_MspInit+0x5c>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_MspInit+0x60>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_MspInit+0x60>)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010000 	.word	0x40010000

08001800 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a14      	ldr	r2, [pc, #80]	; (800186c <HAL_ADC_MspInit+0x6c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d121      	bne.n	8001864 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_ADC_MspInit+0x70>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a12      	ldr	r2, [pc, #72]	; (8001870 <HAL_ADC_MspInit+0x70>)
 8001826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_ADC_MspInit+0x70>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_ADC_MspInit+0x70>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a0c      	ldr	r2, [pc, #48]	; (8001870 <HAL_ADC_MspInit+0x70>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_ADC_MspInit+0x70>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001850:	230f      	movs	r3, #15
 8001852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001854:	2303      	movs	r3, #3
 8001856:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	4619      	mov	r1, r3
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <HAL_ADC_MspInit+0x74>)
 8001860:	f001 f8cc 	bl	80029fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001864:	bf00      	nop
 8001866:	3720      	adds	r7, #32
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40012400 	.word	0x40012400
 8001870:	40021000 	.word	0x40021000
 8001874:	40010800 	.word	0x40010800

08001878 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08c      	sub	sp, #48	; 0x30
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a58      	ldr	r2, [pc, #352]	; (80019f4 <HAL_I2C_MspInit+0x17c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d159      	bne.n	800194c <HAL_I2C_MspInit+0xd4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001898:	4b57      	ldr	r3, [pc, #348]	; (80019f8 <HAL_I2C_MspInit+0x180>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a56      	ldr	r2, [pc, #344]	; (80019f8 <HAL_I2C_MspInit+0x180>)
 800189e:	f043 0308 	orr.w	r3, r3, #8
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b54      	ldr	r3, [pc, #336]	; (80019f8 <HAL_I2C_MspInit+0x180>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b6:	2312      	movs	r3, #18
 80018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	484d      	ldr	r0, [pc, #308]	; (80019fc <HAL_I2C_MspInit+0x184>)
 80018c6:	f001 f899 	bl	80029fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80018ca:	4b4d      	ldr	r3, [pc, #308]	; (8001a00 <HAL_I2C_MspInit+0x188>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e0:	4a47      	ldr	r2, [pc, #284]	; (8001a00 <HAL_I2C_MspInit+0x188>)
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018e6:	4b44      	ldr	r3, [pc, #272]	; (80019f8 <HAL_I2C_MspInit+0x180>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a43      	ldr	r2, [pc, #268]	; (80019f8 <HAL_I2C_MspInit+0x180>)
 80018ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b41      	ldr	r3, [pc, #260]	; (80019f8 <HAL_I2C_MspInit+0x180>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80018fe:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <HAL_I2C_MspInit+0x18c>)
 8001900:	4a41      	ldr	r2, [pc, #260]	; (8001a08 <HAL_I2C_MspInit+0x190>)
 8001902:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001904:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <HAL_I2C_MspInit+0x18c>)
 8001906:	2210      	movs	r2, #16
 8001908:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800190a:	4b3e      	ldr	r3, [pc, #248]	; (8001a04 <HAL_I2C_MspInit+0x18c>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001910:	4b3c      	ldr	r3, [pc, #240]	; (8001a04 <HAL_I2C_MspInit+0x18c>)
 8001912:	2280      	movs	r2, #128	; 0x80
 8001914:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001916:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <HAL_I2C_MspInit+0x18c>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800191c:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <HAL_I2C_MspInit+0x18c>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 8001922:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_I2C_MspInit+0x18c>)
 8001924:	2220      	movs	r2, #32
 8001926:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001928:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <HAL_I2C_MspInit+0x18c>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800192e:	4835      	ldr	r0, [pc, #212]	; (8001a04 <HAL_I2C_MspInit+0x18c>)
 8001930:	f000 fe82 	bl	8002638 <HAL_DMA_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 800193a:	f7ff ff2b 	bl	8001794 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a30      	ldr	r2, [pc, #192]	; (8001a04 <HAL_I2C_MspInit+0x18c>)
 8001942:	635a      	str	r2, [r3, #52]	; 0x34
 8001944:	4a2f      	ldr	r2, [pc, #188]	; (8001a04 <HAL_I2C_MspInit+0x18c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800194a:	e04f      	b.n	80019ec <HAL_I2C_MspInit+0x174>
  else if(hi2c->Instance==I2C2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a2e      	ldr	r2, [pc, #184]	; (8001a0c <HAL_I2C_MspInit+0x194>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d14a      	bne.n	80019ec <HAL_I2C_MspInit+0x174>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <HAL_I2C_MspInit+0x180>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	4a27      	ldr	r2, [pc, #156]	; (80019f8 <HAL_I2C_MspInit+0x180>)
 800195c:	f043 0308 	orr.w	r3, r3, #8
 8001960:	6193      	str	r3, [r2, #24]
 8001962:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <HAL_I2C_MspInit+0x180>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800196e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001974:	2312      	movs	r3, #18
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	4619      	mov	r1, r3
 8001982:	481e      	ldr	r0, [pc, #120]	; (80019fc <HAL_I2C_MspInit+0x184>)
 8001984:	f001 f83a 	bl	80029fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_I2C_MspInit+0x180>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	4a1a      	ldr	r2, [pc, #104]	; (80019f8 <HAL_I2C_MspInit+0x180>)
 800198e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001992:	61d3      	str	r3, [r2, #28]
 8001994:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <HAL_I2C_MspInit+0x180>)
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_I2C_MspInit+0x198>)
 80019a2:	4a1c      	ldr	r2, [pc, #112]	; (8001a14 <HAL_I2C_MspInit+0x19c>)
 80019a4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <HAL_I2C_MspInit+0x198>)
 80019a8:	2210      	movs	r2, #16
 80019aa:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ac:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_I2C_MspInit+0x198>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_I2C_MspInit+0x198>)
 80019b4:	2280      	movs	r2, #128	; 0x80
 80019b6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_I2C_MspInit+0x198>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <HAL_I2C_MspInit+0x198>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_I2C_MspInit+0x198>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_I2C_MspInit+0x198>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80019d0:	480f      	ldr	r0, [pc, #60]	; (8001a10 <HAL_I2C_MspInit+0x198>)
 80019d2:	f000 fe31 	bl	8002638 <HAL_DMA_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <HAL_I2C_MspInit+0x168>
      Error_Handler();
 80019dc:	f7ff feda 	bl	8001794 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <HAL_I2C_MspInit+0x198>)
 80019e4:	635a      	str	r2, [r3, #52]	; 0x34
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_I2C_MspInit+0x198>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6253      	str	r3, [r2, #36]	; 0x24
}
 80019ec:	bf00      	nop
 80019ee:	3730      	adds	r7, #48	; 0x30
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40005400 	.word	0x40005400
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010c00 	.word	0x40010c00
 8001a00:	40010000 	.word	0x40010000
 8001a04:	200004c8 	.word	0x200004c8
 8001a08:	4002006c 	.word	0x4002006c
 8001a0c:	40005800 	.word	0x40005800
 8001a10:	2000061c 	.word	0x2000061c
 8001a14:	40020044 	.word	0x40020044

08001a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a28:	d10c      	bne.n	8001a44 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_TIM_Base_MspInit+0x58>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a10      	ldr	r2, [pc, #64]	; (8001a70 <HAL_TIM_Base_MspInit+0x58>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	61d3      	str	r3, [r2, #28]
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_TIM_Base_MspInit+0x58>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a42:	e010      	b.n	8001a66 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <HAL_TIM_Base_MspInit+0x5c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d10b      	bne.n	8001a66 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_TIM_Base_MspInit+0x58>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <HAL_TIM_Base_MspInit+0x58>)
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	61d3      	str	r3, [r2, #28]
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_TIM_Base_MspInit+0x58>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40000400 	.word	0x40000400

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <NMI_Handler+0x4>

08001a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001abe:	f000 fa87 	bl	8001fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	//GPIOA->BRR = 1<<6;



  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <DMA1_Channel6_IRQHandler+0x10>)
 8001ace:	f000 fe83 	bl	80027d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  //GPIOA->BSRR = 1<<6;
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200004c8 	.word	0x200004c8

08001adc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001ae2:	f002 ff37 	bl	8004954 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20001398 	.word	0x20001398

08001af0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//GPIOA->BSRR = 1<<6;
	if(BAMIndex == 0){
 8001af4:	4b43      	ldr	r3, [pc, #268]	; (8001c04 <TIM2_IRQHandler+0x114>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d102      	bne.n	8001b04 <TIM2_IRQHandler+0x14>
		blocked = 1; //block to protect the time sensitive LSB's, otherwise it gets pretty flicker-ry
 8001afe:	4b42      	ldr	r3, [pc, #264]	; (8001c08 <TIM2_IRQHandler+0x118>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]


	}

	if(brightness[0] & (1 << BAMIndex))	GPIOB->BSRR = (1<<12);
 8001b04:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <TIM2_IRQHandler+0x11c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <TIM2_IRQHandler+0x114>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	fa42 f303 	asr.w	r3, r2, r3
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d004      	beq.n	8001b28 <TIM2_IRQHandler+0x38>
 8001b1e:	4b3c      	ldr	r3, [pc, #240]	; (8001c10 <TIM2_IRQHandler+0x120>)
 8001b20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b24:	611a      	str	r2, [r3, #16]
 8001b26:	e003      	b.n	8001b30 <TIM2_IRQHandler+0x40>
	else GPIOB->BRR = (1<<12);
 8001b28:	4b39      	ldr	r3, [pc, #228]	; (8001c10 <TIM2_IRQHandler+0x120>)
 8001b2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b2e:	615a      	str	r2, [r3, #20]
	if(brightness[1] & (1 << BAMIndex))	GPIOB->BSRR = (1<<13);
 8001b30:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <TIM2_IRQHandler+0x11c>)
 8001b32:	785b      	ldrb	r3, [r3, #1]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <TIM2_IRQHandler+0x114>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	fa42 f303 	asr.w	r3, r2, r3
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d004      	beq.n	8001b54 <TIM2_IRQHandler+0x64>
 8001b4a:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <TIM2_IRQHandler+0x120>)
 8001b4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b50:	611a      	str	r2, [r3, #16]
 8001b52:	e003      	b.n	8001b5c <TIM2_IRQHandler+0x6c>
	else GPIOB->BRR = (1<<13);
 8001b54:	4b2e      	ldr	r3, [pc, #184]	; (8001c10 <TIM2_IRQHandler+0x120>)
 8001b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b5a:	615a      	str	r2, [r3, #20]
	if(brightness[2] & (1 << BAMIndex))	GPIOB->BSRR = (1<<14);
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <TIM2_IRQHandler+0x11c>)
 8001b5e:	789b      	ldrb	r3, [r3, #2]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	461a      	mov	r2, r3
 8001b64:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <TIM2_IRQHandler+0x114>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	fa42 f303 	asr.w	r3, r2, r3
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d004      	beq.n	8001b80 <TIM2_IRQHandler+0x90>
 8001b76:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <TIM2_IRQHandler+0x120>)
 8001b78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b7c:	611a      	str	r2, [r3, #16]
 8001b7e:	e003      	b.n	8001b88 <TIM2_IRQHandler+0x98>
	else GPIOB->BRR = (1<<14);
 8001b80:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <TIM2_IRQHandler+0x120>)
 8001b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b86:	615a      	str	r2, [r3, #20]
	if(brightness[3] & (1 << BAMIndex))	GPIOB->BSRR = (1<<15);
 8001b88:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <TIM2_IRQHandler+0x11c>)
 8001b8a:	78db      	ldrb	r3, [r3, #3]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <TIM2_IRQHandler+0x114>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	fa42 f303 	asr.w	r3, r2, r3
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <TIM2_IRQHandler+0xbc>
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <TIM2_IRQHandler+0x120>)
 8001ba4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ba8:	611a      	str	r2, [r3, #16]
 8001baa:	e003      	b.n	8001bb4 <TIM2_IRQHandler+0xc4>
	else GPIOB->BRR = (1<<15);
 8001bac:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <TIM2_IRQHandler+0x120>)
 8001bae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bb2:	615a      	str	r2, [r3, #20]


*/

	//FIXME this might potentially cause issues, as it blocks for half of the time
	if(BAMIndex == 5){
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <TIM2_IRQHandler+0x114>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b05      	cmp	r3, #5
 8001bbc:	d102      	bne.n	8001bc4 <TIM2_IRQHandler+0xd4>
		blocked = 0; //Time sensitive LSB's are done, unblock, value of 3 or less gives visible flicker
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <TIM2_IRQHandler+0x118>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]

	}

	if(BAMIndex == 7){ //We've passed one BAM cycle
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <TIM2_IRQHandler+0x114>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b07      	cmp	r3, #7
 8001bcc:	d107      	bne.n	8001bde <TIM2_IRQHandler+0xee>


		BAMIndex = 0;
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <TIM2_IRQHandler+0x114>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = 1;
 8001bd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bd8:	2201      	movs	r2, #1
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
 8001bdc:	e00d      	b.n	8001bfa <TIM2_IRQHandler+0x10a>



	}
	else{
		BAMIndex++;
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <TIM2_IRQHandler+0x114>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	3301      	adds	r3, #1
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <TIM2_IRQHandler+0x114>)
 8001bea:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = (volatile)(TIM2->PSC << 1); //set next write to occupy twice the time of this current write.
 8001bec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	6293      	str	r3, [r2, #40]	; 0x28
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bfa:	4806      	ldr	r0, [pc, #24]	; (8001c14 <TIM2_IRQHandler+0x124>)
 8001bfc:	f004 fe09 	bl	8006812 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000225 	.word	0x20000225
 8001c08:	20000226 	.word	0x20000226
 8001c0c:	20000004 	.word	0x20000004
 8001c10:	40010c00 	.word	0x40010c00
 8001c14:	200006a4 	.word	0x200006a4

08001c18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	//GPIOA->BSRR = 1<<6;
	uint8_t currentReadoff = ((((GPIOA->IDR)>>9) & 1) << 1) | (((GPIOA->IDR)>>10) & 1); //read current encoder state
 8001c1e:	4b46      	ldr	r3, [pc, #280]	; (8001d38 <TIM3_IRQHandler+0x120>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	0a5b      	lsrs	r3, r3, #9
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <TIM3_IRQHandler+0x120>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	0a9b      	lsrs	r3, r3, #10
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	71fb      	strb	r3, [r7, #7]
	uint8_t index = (lastEncoder[currentEncoder]<<2) | currentReadoff;
 8001c42:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <TIM3_IRQHandler+0x124>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <TIM3_IRQHandler+0x128>)
 8001c4c:	5c9b      	ldrb	r3, [r3, r2]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	b25a      	sxtb	r2, r3
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b25b      	sxtb	r3, r3
 8001c5c:	71bb      	strb	r3, [r7, #6]
	encoderValues[currentEncoder] += encoderLUT[index];
 8001c5e:	79bb      	ldrb	r3, [r7, #6]
 8001c60:	4a38      	ldr	r2, [pc, #224]	; (8001d44 <TIM3_IRQHandler+0x12c>)
 8001c62:	5cd3      	ldrb	r3, [r2, r3]
 8001c64:	b259      	sxtb	r1, r3
 8001c66:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <TIM3_IRQHandler+0x124>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <TIM3_IRQHandler+0x130>)
 8001c70:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001c74:	4608      	mov	r0, r1
 8001c76:	4611      	mov	r1, r2
 8001c78:	4403      	add	r3, r0
 8001c7a:	4a33      	ldr	r2, [pc, #204]	; (8001d48 <TIM3_IRQHandler+0x130>)
 8001c7c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//constrain encoderValues
	if(encoderValues[currentEncoder] > 255) encoderValues[currentEncoder] = 255;
 8001c80:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <TIM3_IRQHandler+0x124>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b2f      	ldr	r3, [pc, #188]	; (8001d48 <TIM3_IRQHandler+0x130>)
 8001c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8e:	2bff      	cmp	r3, #255	; 0xff
 8001c90:	dd07      	ble.n	8001ca2 <TIM3_IRQHandler+0x8a>
 8001c92:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <TIM3_IRQHandler+0x124>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <TIM3_IRQHandler+0x130>)
 8001c9c:	22ff      	movs	r2, #255	; 0xff
 8001c9e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	if(encoderValues[currentEncoder] < 0) encoderValues[currentEncoder] = 0;
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <TIM3_IRQHandler+0x124>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <TIM3_IRQHandler+0x130>)
 8001cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	da07      	bge.n	8001cc4 <TIM3_IRQHandler+0xac>
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <TIM3_IRQHandler+0x124>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4b22      	ldr	r3, [pc, #136]	; (8001d48 <TIM3_IRQHandler+0x130>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	lastEncoder[currentEncoder] = currentReadoff;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <TIM3_IRQHandler+0x124>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <TIM3_IRQHandler+0x128>)
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	5453      	strb	r3, [r2, r1]
	//uint8_t buffer[256];
	//sprintf(buffer, "currentReadoff %d index %d encoderValue %d\r\n", currentReadoff, index, encoderValues[0]);
	//CDC_Transmit_FS(buffer, sizeof(buffer));
	//}

	if(currentEncoder == 4) currentEncoder = 0;
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <TIM3_IRQHandler+0x124>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d103      	bne.n	8001ce4 <TIM3_IRQHandler+0xcc>
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <TIM3_IRQHandler+0x124>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
 8001ce2:	e006      	b.n	8001cf2 <TIM3_IRQHandler+0xda>
	else currentEncoder++;
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <TIM3_IRQHandler+0x124>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	3301      	adds	r3, #1
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <TIM3_IRQHandler+0x124>)
 8001cf0:	701a      	strb	r2, [r3, #0]

	//select the nth encoder here to allow the mux time to settle
	GPIOC->BRR = (3<<13); //clear GPIO Pins
 8001cf2:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <TIM3_IRQHandler+0x134>)
 8001cf4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001cf8:	615a      	str	r2, [r3, #20]
	GPIOC->BSRR = ((currentEncoder&3)<<13);
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <TIM3_IRQHandler+0x124>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	035b      	lsls	r3, r3, #13
 8001d02:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <TIM3_IRQHandler+0x134>)
 8001d04:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8001d08:	6113      	str	r3, [r2, #16]
	GPIOA->BRR = (1<<15);
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <TIM3_IRQHandler+0x120>)
 8001d0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d10:	615a      	str	r2, [r3, #20]
	if(currentEncoder&4) GPIOA->BSRR = (1<<15); //BLOODY SOLDER DAG!!! Shorted out the pins giving the result in DS14
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <TIM3_IRQHandler+0x124>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <TIM3_IRQHandler+0x110>
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <TIM3_IRQHandler+0x120>)
 8001d22:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d26:	611a      	str	r2, [r3, #16]

	//GPIOA->BRR = 1<<6;
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d28:	4809      	ldr	r0, [pc, #36]	; (8001d50 <TIM3_IRQHandler+0x138>)
 8001d2a:	f004 fd72 	bl	8006812 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40010800 	.word	0x40010800
 8001d3c:	20000227 	.word	0x20000227
 8001d40:	20000228 	.word	0x20000228
 8001d44:	20000008 	.word	0x20000008
 8001d48:	20000230 	.word	0x20000230
 8001d4c:	40011000 	.word	0x40011000
 8001d50:	200005c0 	.word	0x200005c0

08001d54 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
	if(I2C2->SR1 & (1<<2)){ //BTF is set
 8001d58:	4b41      	ldr	r3, [pc, #260]	; (8001e60 <I2C2_EV_IRQHandler+0x10c>)
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d077      	beq.n	8001e54 <I2C2_EV_IRQHandler+0x100>
		//I2C2->CR2 &= ~(1<<11); //disable I2C2 DMA requesting
		//I2C2->CR1 |= (1<<9); //send stop condition



		if(cycleEN){
 8001d64:	4b3f      	ldr	r3, [pc, #252]	; (8001e64 <I2C2_EV_IRQHandler+0x110>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d033      	beq.n	8001dd6 <I2C2_EV_IRQHandler+0x82>

			GPIOA->BRR = 1<<8; //wait for the MCP23017 to have valid data
 8001d6e:	4b3e      	ldr	r3, [pc, #248]	; (8001e68 <I2C2_EV_IRQHandler+0x114>)
 8001d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d74:	615a      	str	r2, [r3, #20]
			GPIOA->BRR = 1<<8;
 8001d76:	4b3c      	ldr	r3, [pc, #240]	; (8001e68 <I2C2_EV_IRQHandler+0x114>)
 8001d78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d7c:	615a      	str	r2, [r3, #20]
			GPIOA->BRR = 1<<8;
 8001d7e:	4b3a      	ldr	r3, [pc, #232]	; (8001e68 <I2C2_EV_IRQHandler+0x114>)
 8001d80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d84:	615a      	str	r2, [r3, #20]
			GPIOA->BRR = 1<<8;
 8001d86:	4b38      	ldr	r3, [pc, #224]	; (8001e68 <I2C2_EV_IRQHandler+0x114>)
 8001d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d8c:	615a      	str	r2, [r3, #20]
			GPIOA->BRR = 1<<8;
 8001d8e:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <I2C2_EV_IRQHandler+0x114>)
 8001d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d94:	615a      	str	r2, [r3, #20]
			GPIOA->BRR = 1<<8;
 8001d96:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <I2C2_EV_IRQHandler+0x114>)
 8001d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d9c:	615a      	str	r2, [r3, #20]
			GPIOA->BRR = 1<<8;
 8001d9e:	4b32      	ldr	r3, [pc, #200]	; (8001e68 <I2C2_EV_IRQHandler+0x114>)
 8001da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001da4:	615a      	str	r2, [r3, #20]
			GPIOA->BSRR = 1<<8; //this pulse is 100ns, aka too short, datasheet specifies min of 230 ns
 8001da6:	4b30      	ldr	r3, [pc, #192]	; (8001e68 <I2C2_EV_IRQHandler+0x114>)
 8001da8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dac:	611a      	str	r2, [r3, #16]
			GPIOA->BSRR = 1<<8;
 8001dae:	4b2e      	ldr	r3, [pc, #184]	; (8001e68 <I2C2_EV_IRQHandler+0x114>)
 8001db0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001db4:	611a      	str	r2, [r3, #16]
			GPIOA->BSRR = 1<<8;
 8001db6:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <I2C2_EV_IRQHandler+0x114>)
 8001db8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dbc:	611a      	str	r2, [r3, #16]
			GPIOA->BSRR = 1<<8;
 8001dbe:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <I2C2_EV_IRQHandler+0x114>)
 8001dc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dc4:	611a      	str	r2, [r3, #16]
			GPIOA->BSRR = 1<<8;
 8001dc6:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <I2C2_EV_IRQHandler+0x114>)
 8001dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dcc:	611a      	str	r2, [r3, #16]
			GPIOA->BRR = 1<<8;
 8001dce:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <I2C2_EV_IRQHandler+0x114>)
 8001dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd4:	615a      	str	r2, [r3, #20]


		}

		if(currentLCDByte == 0){
 8001dd6:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <I2C2_EV_IRQHandler+0x118>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d112      	bne.n	8001e06 <I2C2_EV_IRQHandler+0xb2>

			// we're done with the command byte, set RS
			GPIOB->BSRR = (1<<1);
 8001de0:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <I2C2_EV_IRQHandler+0x11c>)
 8001de2:	2202      	movs	r2, #2
 8001de4:	611a      	str	r2, [r3, #16]
			currentLCDByte++;
 8001de6:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <I2C2_EV_IRQHandler+0x118>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	3301      	adds	r3, #1
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <I2C2_EV_IRQHandler+0x118>)
 8001df2:	701a      	strb	r2, [r3, #0]
			//I2C2->DR = LCDBuffer[currentLCDByte+currentLCDSection * 9];
			I2C2->DR = LCDBufferTop[currentLCDByte-1];
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <I2C2_EV_IRQHandler+0x118>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	4a1d      	ldr	r2, [pc, #116]	; (8001e74 <I2C2_EV_IRQHandler+0x120>)
 8001dfe:	5cd2      	ldrb	r2, [r2, r3]
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <I2C2_EV_IRQHandler+0x10c>)
 8001e02:	611a      	str	r2, [r3, #16]
 8001e04:	e026      	b.n	8001e54 <I2C2_EV_IRQHandler+0x100>
			//I2C2->DR = 0x42;
		}
		else if(currentLCDByte == 17){
 8001e06:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <I2C2_EV_IRQHandler+0x118>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b11      	cmp	r3, #17
 8001e0e:	d112      	bne.n	8001e36 <I2C2_EV_IRQHandler+0xe2>

			//we're done with all characters, disable cycleEN
			cycleEN = 0;
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <I2C2_EV_IRQHandler+0x110>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]

			I2C2->CR1 |= (1<<9); //send stop condition
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <I2C2_EV_IRQHandler+0x10c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a11      	ldr	r2, [pc, #68]	; (8001e60 <I2C2_EV_IRQHandler+0x10c>)
 8001e1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e20:	6013      	str	r3, [r2, #0]
			I2C2->CR2 &= ~(1<<9); //disable I2C2 Event Interrupt
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <I2C2_EV_IRQHandler+0x10c>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <I2C2_EV_IRQHandler+0x10c>)
 8001e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e2c:	6053      	str	r3, [r2, #4]
			isLCDPrinting = 0;
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <I2C2_EV_IRQHandler+0x124>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
 8001e34:	e00e      	b.n	8001e54 <I2C2_EV_IRQHandler+0x100>

		}
		else{

			currentLCDByte++;
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <I2C2_EV_IRQHandler+0x118>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <I2C2_EV_IRQHandler+0x118>)
 8001e42:	701a      	strb	r2, [r3, #0]
			//load in next byte into DR here
			//I2C2->DR = LCDBuffer[currentLCDByte+currentLCDSection * 9];
			I2C2->DR = LCDBufferTop[currentLCDByte-1];
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <I2C2_EV_IRQHandler+0x118>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <I2C2_EV_IRQHandler+0x120>)
 8001e4e:	5cd2      	ldrb	r2, [r2, r3]
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <I2C2_EV_IRQHandler+0x10c>)
 8001e52:	611a      	str	r2, [r3, #16]


	}

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001e54:	4809      	ldr	r0, [pc, #36]	; (8001e7c <I2C2_EV_IRQHandler+0x128>)
 8001e56:	f001 f87b 	bl	8002f50 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40005800 	.word	0x40005800
 8001e64:	20000223 	.word	0x20000223
 8001e68:	40010800 	.word	0x40010800
 8001e6c:	20000224 	.word	0x20000224
 8001e70:	40010c00 	.word	0x40010c00
 8001e74:	200004a0 	.word	0x200004a0
 8001e78:	20000222 	.word	0x20000222
 8001e7c:	2000056c 	.word	0x2000056c

08001e80 <_sbrk>:
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	4a14      	ldr	r2, [pc, #80]	; (8001edc <_sbrk+0x5c>)
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <_sbrk+0x60>)
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <_sbrk+0x22>
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <_sbrk+0x64>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <_sbrk+0x68>)
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <_sbrk+0x64>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d207      	bcs.n	8001ec0 <_sbrk+0x40>
 8001eb0:	f009 f8b2 	bl	800b018 <__errno>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	230c      	movs	r3, #12
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebe:	e009      	b.n	8001ed4 <_sbrk+0x54>
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <_sbrk+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <_sbrk+0x64>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <_sbrk+0x64>)
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20005000 	.word	0x20005000
 8001ee0:	00000400 	.word	0x00000400
 8001ee4:	2000025c 	.word	0x2000025c
 8001ee8:	20001688 	.word	0x20001688

08001eec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <Reset_Handler>:
 8001ef8:	2100      	movs	r1, #0
 8001efa:	e003      	b.n	8001f04 <LoopCopyDataInit>

08001efc <CopyDataInit>:
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <LoopFillZerobss+0x14>)
 8001efe:	585b      	ldr	r3, [r3, r1]
 8001f00:	5043      	str	r3, [r0, r1]
 8001f02:	3104      	adds	r1, #4

08001f04 <LoopCopyDataInit>:
 8001f04:	480a      	ldr	r0, [pc, #40]	; (8001f30 <LoopFillZerobss+0x18>)
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <LoopFillZerobss+0x1c>)
 8001f08:	1842      	adds	r2, r0, r1
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d3f6      	bcc.n	8001efc <CopyDataInit>
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <LoopFillZerobss+0x20>)
 8001f10:	e002      	b.n	8001f18 <LoopFillZerobss>

08001f12 <FillZerobss>:
 8001f12:	2300      	movs	r3, #0
 8001f14:	f842 3b04 	str.w	r3, [r2], #4

08001f18 <LoopFillZerobss>:
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <LoopFillZerobss+0x24>)
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d3f9      	bcc.n	8001f12 <FillZerobss>
 8001f1e:	f7ff ffe5 	bl	8001eec <SystemInit>
 8001f22:	f009 f87f 	bl	800b024 <__libc_init_array>
 8001f26:	f7fe fee1 	bl	8000cec <main>
 8001f2a:	4770      	bx	lr
 8001f2c:	0800b9b0 	.word	0x0800b9b0
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000204 	.word	0x20000204
 8001f38:	20000204 	.word	0x20000204
 8001f3c:	20001688 	.word	0x20001688

08001f40 <ADC1_2_IRQHandler>:
 8001f40:	e7fe      	b.n	8001f40 <ADC1_2_IRQHandler>
	...

08001f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_Init+0x28>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <HAL_Init+0x28>)
 8001f4e:	f043 0310 	orr.w	r3, r3, #16
 8001f52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f54:	2003      	movs	r0, #3
 8001f56:	f000 fb2d 	bl	80025b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f000 f808 	bl	8001f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f60:	f7ff fc1c 	bl	800179c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40022000 	.word	0x40022000

08001f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_InitTick+0x54>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_InitTick+0x58>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4619      	mov	r1, r3
 8001f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 fb45 	bl	800261e <HAL_SYSTICK_Config>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e00e      	b.n	8001fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b0f      	cmp	r3, #15
 8001fa2:	d80a      	bhi.n	8001fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f000 fb0d 	bl	80025ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb0:	4a06      	ldr	r2, [pc, #24]	; (8001fcc <HAL_InitTick+0x5c>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e000      	b.n	8001fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000024 	.word	0x20000024
 8001fc8:	2000002c 	.word	0x2000002c
 8001fcc:	20000028 	.word	0x20000028

08001fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_IncTick+0x1c>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_IncTick+0x20>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	4a03      	ldr	r2, [pc, #12]	; (8001ff0 <HAL_IncTick+0x20>)
 8001fe2:	6013      	str	r3, [r2, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	2000002c 	.word	0x2000002c
 8001ff0:	20000700 	.word	0x20000700

08001ff4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff8:	4b02      	ldr	r3, [pc, #8]	; (8002004 <HAL_GetTick+0x10>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	20000700 	.word	0x20000700

08002008 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e0be      	b.n	80021a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	2b00      	cmp	r3, #0
 8002036:	d109      	bne.n	800204c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fbda 	bl	8001800 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f9ab 	bl	80023a8 <ADC_ConversionStop_Disable>
 8002052:	4603      	mov	r3, r0
 8002054:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 8099 	bne.w	8002196 <HAL_ADC_Init+0x18e>
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f040 8095 	bne.w	8002196 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002074:	f023 0302 	bic.w	r3, r3, #2
 8002078:	f043 0202 	orr.w	r2, r3, #2
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002088:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7b1b      	ldrb	r3, [r3, #12]
 800208e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002090:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	4313      	orrs	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020a0:	d003      	beq.n	80020aa <HAL_ADC_Init+0xa2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d102      	bne.n	80020b0 <HAL_ADC_Init+0xa8>
 80020aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ae:	e000      	b.n	80020b2 <HAL_ADC_Init+0xaa>
 80020b0:	2300      	movs	r3, #0
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7d1b      	ldrb	r3, [r3, #20]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d119      	bne.n	80020f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	7b1b      	ldrb	r3, [r3, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d109      	bne.n	80020dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	035a      	lsls	r2, r3, #13
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	e00b      	b.n	80020f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	f043 0220 	orr.w	r2, r3, #32
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ec:	f043 0201 	orr.w	r2, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	430a      	orrs	r2, r1
 8002106:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <HAL_ADC_Init+0x1a8>)
 8002110:	4013      	ands	r3, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6812      	ldr	r2, [r2, #0]
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	430b      	orrs	r3, r1
 800211a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002124:	d003      	beq.n	800212e <HAL_ADC_Init+0x126>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d104      	bne.n	8002138 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	3b01      	subs	r3, #1
 8002134:	051b      	lsls	r3, r3, #20
 8002136:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	430a      	orrs	r2, r1
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_ADC_Init+0x1ac>)
 8002154:	4013      	ands	r3, r2
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	429a      	cmp	r2, r3
 800215a:	d10b      	bne.n	8002174 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	f023 0303 	bic.w	r3, r3, #3
 800216a:	f043 0201 	orr.w	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002172:	e018      	b.n	80021a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	f023 0312 	bic.w	r3, r3, #18
 800217c:	f043 0210 	orr.w	r2, r3, #16
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	f043 0201 	orr.w	r2, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002194:	e007      	b.n	80021a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219a:	f043 0210 	orr.w	r2, r3, #16
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	ffe1f7fd 	.word	0xffe1f7fd
 80021b4:	ff1f0efe 	.word	0xff1f0efe

080021b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x20>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e0dc      	b.n	8002392 <HAL_ADC_ConfigChannel+0x1da>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b06      	cmp	r3, #6
 80021e6:	d81c      	bhi.n	8002222 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	3b05      	subs	r3, #5
 80021fa:	221f      	movs	r2, #31
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	4019      	ands	r1, r3
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	3b05      	subs	r3, #5
 8002214:	fa00 f203 	lsl.w	r2, r0, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	635a      	str	r2, [r3, #52]	; 0x34
 8002220:	e03c      	b.n	800229c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d81c      	bhi.n	8002264 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	3b23      	subs	r3, #35	; 0x23
 800223c:	221f      	movs	r2, #31
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	4019      	ands	r1, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	3b23      	subs	r3, #35	; 0x23
 8002256:	fa00 f203 	lsl.w	r2, r0, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	631a      	str	r2, [r3, #48]	; 0x30
 8002262:	e01b      	b.n	800229c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	3b41      	subs	r3, #65	; 0x41
 8002276:	221f      	movs	r2, #31
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	4019      	ands	r1, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	3b41      	subs	r3, #65	; 0x41
 8002290:	fa00 f203 	lsl.w	r2, r0, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b09      	cmp	r3, #9
 80022a2:	d91c      	bls.n	80022de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68d9      	ldr	r1, [r3, #12]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	3b1e      	subs	r3, #30
 80022b6:	2207      	movs	r2, #7
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	4019      	ands	r1, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6898      	ldr	r0, [r3, #8]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4613      	mov	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4413      	add	r3, r2
 80022ce:	3b1e      	subs	r3, #30
 80022d0:	fa00 f203 	lsl.w	r2, r0, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	60da      	str	r2, [r3, #12]
 80022dc:	e019      	b.n	8002312 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6919      	ldr	r1, [r3, #16]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4413      	add	r3, r2
 80022ee:	2207      	movs	r2, #7
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	4019      	ands	r1, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6898      	ldr	r0, [r3, #8]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	fa00 f203 	lsl.w	r2, r0, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b10      	cmp	r3, #16
 8002318:	d003      	beq.n	8002322 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800231e:	2b11      	cmp	r3, #17
 8002320:	d132      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a1d      	ldr	r2, [pc, #116]	; (800239c <HAL_ADC_ConfigChannel+0x1e4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d125      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d126      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002348:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b10      	cmp	r3, #16
 8002350:	d11a      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002358:	fba2 2303 	umull	r2, r3, r2, r3
 800235c:	0c9a      	lsrs	r2, r3, #18
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002368:	e002      	b.n	8002370 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	3b01      	subs	r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f9      	bne.n	800236a <HAL_ADC_ConfigChannel+0x1b2>
 8002376:	e007      	b.n	8002388 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	f043 0220 	orr.w	r2, r3, #32
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002390:	7bfb      	ldrb	r3, [r7, #15]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	40012400 	.word	0x40012400
 80023a0:	20000024 	.word	0x20000024
 80023a4:	431bde83 	.word	0x431bde83

080023a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d127      	bne.n	8002412 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0201 	bic.w	r2, r2, #1
 80023d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023d2:	f7ff fe0f 	bl	8001ff4 <HAL_GetTick>
 80023d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023d8:	e014      	b.n	8002404 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023da:	f7ff fe0b 	bl	8001ff4 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d90d      	bls.n	8002404 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	f043 0210 	orr.w	r2, r3, #16
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	f043 0201 	orr.w	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e007      	b.n	8002414 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b01      	cmp	r3, #1
 8002410:	d0e3      	beq.n	80023da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <__NVIC_SetPriorityGrouping>:
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002438:	4013      	ands	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800244c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244e:	4a04      	ldr	r2, [pc, #16]	; (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	60d3      	str	r3, [r2, #12]
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <__NVIC_GetPriorityGrouping+0x18>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	f003 0307 	and.w	r3, r3, #7
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	2b00      	cmp	r3, #0
 8002490:	db0b      	blt.n	80024aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	f003 021f 	and.w	r2, r3, #31
 8002498:	4906      	ldr	r1, [pc, #24]	; (80024b4 <__NVIC_EnableIRQ+0x34>)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	2001      	movs	r0, #1
 80024a2:	fa00 f202 	lsl.w	r2, r0, r2
 80024a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	e000e100 	.word	0xe000e100

080024b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	db0a      	blt.n	80024e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	490c      	ldr	r1, [pc, #48]	; (8002504 <__NVIC_SetPriority+0x4c>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	0112      	lsls	r2, r2, #4
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	440b      	add	r3, r1
 80024dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e0:	e00a      	b.n	80024f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4908      	ldr	r1, [pc, #32]	; (8002508 <__NVIC_SetPriority+0x50>)
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	3b04      	subs	r3, #4
 80024f0:	0112      	lsls	r2, r2, #4
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	440b      	add	r3, r1
 80024f6:	761a      	strb	r2, [r3, #24]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000e100 	.word	0xe000e100
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f1c3 0307 	rsb	r3, r3, #7
 8002526:	2b04      	cmp	r3, #4
 8002528:	bf28      	it	cs
 800252a:	2304      	movcs	r3, #4
 800252c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3304      	adds	r3, #4
 8002532:	2b06      	cmp	r3, #6
 8002534:	d902      	bls.n	800253c <NVIC_EncodePriority+0x30>
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3b03      	subs	r3, #3
 800253a:	e000      	b.n	800253e <NVIC_EncodePriority+0x32>
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	f04f 32ff 	mov.w	r2, #4294967295
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43da      	mvns	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	401a      	ands	r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002554:	f04f 31ff 	mov.w	r1, #4294967295
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	fa01 f303 	lsl.w	r3, r1, r3
 800255e:	43d9      	mvns	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002564:	4313      	orrs	r3, r2
         );
}
 8002566:	4618      	mov	r0, r3
 8002568:	3724      	adds	r7, #36	; 0x24
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3b01      	subs	r3, #1
 800257c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002580:	d301      	bcc.n	8002586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002582:	2301      	movs	r3, #1
 8002584:	e00f      	b.n	80025a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002586:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <SysTick_Config+0x40>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3b01      	subs	r3, #1
 800258c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258e:	210f      	movs	r1, #15
 8002590:	f04f 30ff 	mov.w	r0, #4294967295
 8002594:	f7ff ff90 	bl	80024b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <SysTick_Config+0x40>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259e:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <SysTick_Config+0x40>)
 80025a0:	2207      	movs	r2, #7
 80025a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	e000e010 	.word	0xe000e010

080025b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ff2d 	bl	800241c <__NVIC_SetPriorityGrouping>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b086      	sub	sp, #24
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4603      	mov	r3, r0
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025dc:	f7ff ff42 	bl	8002464 <__NVIC_GetPriorityGrouping>
 80025e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	6978      	ldr	r0, [r7, #20]
 80025e8:	f7ff ff90 	bl	800250c <NVIC_EncodePriority>
 80025ec:	4602      	mov	r2, r0
 80025ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f2:	4611      	mov	r1, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff5f 	bl	80024b8 <__NVIC_SetPriority>
}
 80025fa:	bf00      	nop
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff35 	bl	8002480 <__NVIC_EnableIRQ>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff ffa2 	bl	8002570 <SysTick_Config>
 800262c:	4603      	mov	r3, r0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e043      	b.n	80026d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <HAL_DMA_Init+0xa8>)
 8002656:	4413      	add	r3, r2
 8002658:	4a22      	ldr	r2, [pc, #136]	; (80026e4 <HAL_DMA_Init+0xac>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	009a      	lsls	r2, r3, #2
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a1f      	ldr	r2, [pc, #124]	; (80026e8 <HAL_DMA_Init+0xb0>)
 800266a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002682:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002686:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002690:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	bffdfff8 	.word	0xbffdfff8
 80026e4:	cccccccd 	.word	0xcccccccd
 80026e8:	40020000 	.word	0x40020000

080026ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d005      	beq.n	800270e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2204      	movs	r2, #4
 8002706:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
 800270c:	e051      	b.n	80027b2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 020e 	bic.w	r2, r2, #14
 800271c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0201 	bic.w	r2, r2, #1
 800272c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a22      	ldr	r2, [pc, #136]	; (80027bc <HAL_DMA_Abort_IT+0xd0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d029      	beq.n	800278c <HAL_DMA_Abort_IT+0xa0>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a20      	ldr	r2, [pc, #128]	; (80027c0 <HAL_DMA_Abort_IT+0xd4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d022      	beq.n	8002788 <HAL_DMA_Abort_IT+0x9c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a1f      	ldr	r2, [pc, #124]	; (80027c4 <HAL_DMA_Abort_IT+0xd8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d01a      	beq.n	8002782 <HAL_DMA_Abort_IT+0x96>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <HAL_DMA_Abort_IT+0xdc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d012      	beq.n	800277c <HAL_DMA_Abort_IT+0x90>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <HAL_DMA_Abort_IT+0xe0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00a      	beq.n	8002776 <HAL_DMA_Abort_IT+0x8a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1a      	ldr	r2, [pc, #104]	; (80027d0 <HAL_DMA_Abort_IT+0xe4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d102      	bne.n	8002770 <HAL_DMA_Abort_IT+0x84>
 800276a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800276e:	e00e      	b.n	800278e <HAL_DMA_Abort_IT+0xa2>
 8002770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002774:	e00b      	b.n	800278e <HAL_DMA_Abort_IT+0xa2>
 8002776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800277a:	e008      	b.n	800278e <HAL_DMA_Abort_IT+0xa2>
 800277c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002780:	e005      	b.n	800278e <HAL_DMA_Abort_IT+0xa2>
 8002782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002786:	e002      	b.n	800278e <HAL_DMA_Abort_IT+0xa2>
 8002788:	2310      	movs	r3, #16
 800278a:	e000      	b.n	800278e <HAL_DMA_Abort_IT+0xa2>
 800278c:	2301      	movs	r3, #1
 800278e:	4a11      	ldr	r2, [pc, #68]	; (80027d4 <HAL_DMA_Abort_IT+0xe8>)
 8002790:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
    } 
  }
  return status;
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40020008 	.word	0x40020008
 80027c0:	4002001c 	.word	0x4002001c
 80027c4:	40020030 	.word	0x40020030
 80027c8:	40020044 	.word	0x40020044
 80027cc:	40020058 	.word	0x40020058
 80027d0:	4002006c 	.word	0x4002006c
 80027d4:	40020000 	.word	0x40020000

080027d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	2204      	movs	r2, #4
 80027f6:	409a      	lsls	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d04f      	beq.n	80028a0 <HAL_DMA_IRQHandler+0xc8>
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d04a      	beq.n	80028a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b00      	cmp	r3, #0
 8002816:	d107      	bne.n	8002828 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0204 	bic.w	r2, r2, #4
 8002826:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a66      	ldr	r2, [pc, #408]	; (80029c8 <HAL_DMA_IRQHandler+0x1f0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d029      	beq.n	8002886 <HAL_DMA_IRQHandler+0xae>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a65      	ldr	r2, [pc, #404]	; (80029cc <HAL_DMA_IRQHandler+0x1f4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d022      	beq.n	8002882 <HAL_DMA_IRQHandler+0xaa>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a63      	ldr	r2, [pc, #396]	; (80029d0 <HAL_DMA_IRQHandler+0x1f8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d01a      	beq.n	800287c <HAL_DMA_IRQHandler+0xa4>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a62      	ldr	r2, [pc, #392]	; (80029d4 <HAL_DMA_IRQHandler+0x1fc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d012      	beq.n	8002876 <HAL_DMA_IRQHandler+0x9e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a60      	ldr	r2, [pc, #384]	; (80029d8 <HAL_DMA_IRQHandler+0x200>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00a      	beq.n	8002870 <HAL_DMA_IRQHandler+0x98>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a5f      	ldr	r2, [pc, #380]	; (80029dc <HAL_DMA_IRQHandler+0x204>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d102      	bne.n	800286a <HAL_DMA_IRQHandler+0x92>
 8002864:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002868:	e00e      	b.n	8002888 <HAL_DMA_IRQHandler+0xb0>
 800286a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800286e:	e00b      	b.n	8002888 <HAL_DMA_IRQHandler+0xb0>
 8002870:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002874:	e008      	b.n	8002888 <HAL_DMA_IRQHandler+0xb0>
 8002876:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800287a:	e005      	b.n	8002888 <HAL_DMA_IRQHandler+0xb0>
 800287c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002880:	e002      	b.n	8002888 <HAL_DMA_IRQHandler+0xb0>
 8002882:	2340      	movs	r3, #64	; 0x40
 8002884:	e000      	b.n	8002888 <HAL_DMA_IRQHandler+0xb0>
 8002886:	2304      	movs	r3, #4
 8002888:	4a55      	ldr	r2, [pc, #340]	; (80029e0 <HAL_DMA_IRQHandler+0x208>)
 800288a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 8094 	beq.w	80029be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800289e:	e08e      	b.n	80029be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	2202      	movs	r2, #2
 80028a6:	409a      	lsls	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d056      	beq.n	800295e <HAL_DMA_IRQHandler+0x186>
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d051      	beq.n	800295e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10b      	bne.n	80028e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 020a 	bic.w	r2, r2, #10
 80028d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a38      	ldr	r2, [pc, #224]	; (80029c8 <HAL_DMA_IRQHandler+0x1f0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d029      	beq.n	800293e <HAL_DMA_IRQHandler+0x166>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a37      	ldr	r2, [pc, #220]	; (80029cc <HAL_DMA_IRQHandler+0x1f4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d022      	beq.n	800293a <HAL_DMA_IRQHandler+0x162>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a35      	ldr	r2, [pc, #212]	; (80029d0 <HAL_DMA_IRQHandler+0x1f8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01a      	beq.n	8002934 <HAL_DMA_IRQHandler+0x15c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a34      	ldr	r2, [pc, #208]	; (80029d4 <HAL_DMA_IRQHandler+0x1fc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d012      	beq.n	800292e <HAL_DMA_IRQHandler+0x156>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a32      	ldr	r2, [pc, #200]	; (80029d8 <HAL_DMA_IRQHandler+0x200>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00a      	beq.n	8002928 <HAL_DMA_IRQHandler+0x150>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a31      	ldr	r2, [pc, #196]	; (80029dc <HAL_DMA_IRQHandler+0x204>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d102      	bne.n	8002922 <HAL_DMA_IRQHandler+0x14a>
 800291c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002920:	e00e      	b.n	8002940 <HAL_DMA_IRQHandler+0x168>
 8002922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002926:	e00b      	b.n	8002940 <HAL_DMA_IRQHandler+0x168>
 8002928:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800292c:	e008      	b.n	8002940 <HAL_DMA_IRQHandler+0x168>
 800292e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002932:	e005      	b.n	8002940 <HAL_DMA_IRQHandler+0x168>
 8002934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002938:	e002      	b.n	8002940 <HAL_DMA_IRQHandler+0x168>
 800293a:	2320      	movs	r3, #32
 800293c:	e000      	b.n	8002940 <HAL_DMA_IRQHandler+0x168>
 800293e:	2302      	movs	r3, #2
 8002940:	4a27      	ldr	r2, [pc, #156]	; (80029e0 <HAL_DMA_IRQHandler+0x208>)
 8002942:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002950:	2b00      	cmp	r3, #0
 8002952:	d034      	beq.n	80029be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800295c:	e02f      	b.n	80029be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	2208      	movs	r2, #8
 8002964:	409a      	lsls	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d028      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x1e8>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d023      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 020e 	bic.w	r2, r2, #14
 8002986:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002990:	2101      	movs	r1, #1
 8002992:	fa01 f202 	lsl.w	r2, r1, r2
 8002996:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d004      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	4798      	blx	r3
    }
  }
  return;
 80029be:	bf00      	nop
 80029c0:	bf00      	nop
}
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40020008 	.word	0x40020008
 80029cc:	4002001c 	.word	0x4002001c
 80029d0:	40020030 	.word	0x40020030
 80029d4:	40020044 	.word	0x40020044
 80029d8:	40020058 	.word	0x40020058
 80029dc:	4002006c 	.word	0x4002006c
 80029e0:	40020000 	.word	0x40020000

080029e4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b08b      	sub	sp, #44	; 0x2c
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a06:	2300      	movs	r3, #0
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a0e:	e127      	b.n	8002c60 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a10:	2201      	movs	r2, #1
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	f040 8116 	bne.w	8002c5a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b12      	cmp	r3, #18
 8002a34:	d034      	beq.n	8002aa0 <HAL_GPIO_Init+0xa4>
 8002a36:	2b12      	cmp	r3, #18
 8002a38:	d80d      	bhi.n	8002a56 <HAL_GPIO_Init+0x5a>
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d02b      	beq.n	8002a96 <HAL_GPIO_Init+0x9a>
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d804      	bhi.n	8002a4c <HAL_GPIO_Init+0x50>
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d031      	beq.n	8002aaa <HAL_GPIO_Init+0xae>
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d01c      	beq.n	8002a84 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a4a:	e048      	b.n	8002ade <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d043      	beq.n	8002ad8 <HAL_GPIO_Init+0xdc>
 8002a50:	2b11      	cmp	r3, #17
 8002a52:	d01b      	beq.n	8002a8c <HAL_GPIO_Init+0x90>
          break;
 8002a54:	e043      	b.n	8002ade <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a56:	4a89      	ldr	r2, [pc, #548]	; (8002c7c <HAL_GPIO_Init+0x280>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d026      	beq.n	8002aaa <HAL_GPIO_Init+0xae>
 8002a5c:	4a87      	ldr	r2, [pc, #540]	; (8002c7c <HAL_GPIO_Init+0x280>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d806      	bhi.n	8002a70 <HAL_GPIO_Init+0x74>
 8002a62:	4a87      	ldr	r2, [pc, #540]	; (8002c80 <HAL_GPIO_Init+0x284>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d020      	beq.n	8002aaa <HAL_GPIO_Init+0xae>
 8002a68:	4a86      	ldr	r2, [pc, #536]	; (8002c84 <HAL_GPIO_Init+0x288>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01d      	beq.n	8002aaa <HAL_GPIO_Init+0xae>
          break;
 8002a6e:	e036      	b.n	8002ade <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a70:	4a85      	ldr	r2, [pc, #532]	; (8002c88 <HAL_GPIO_Init+0x28c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d019      	beq.n	8002aaa <HAL_GPIO_Init+0xae>
 8002a76:	4a85      	ldr	r2, [pc, #532]	; (8002c8c <HAL_GPIO_Init+0x290>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d016      	beq.n	8002aaa <HAL_GPIO_Init+0xae>
 8002a7c:	4a84      	ldr	r2, [pc, #528]	; (8002c90 <HAL_GPIO_Init+0x294>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_GPIO_Init+0xae>
          break;
 8002a82:	e02c      	b.n	8002ade <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	623b      	str	r3, [r7, #32]
          break;
 8002a8a:	e028      	b.n	8002ade <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	3304      	adds	r3, #4
 8002a92:	623b      	str	r3, [r7, #32]
          break;
 8002a94:	e023      	b.n	8002ade <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	3308      	adds	r3, #8
 8002a9c:	623b      	str	r3, [r7, #32]
          break;
 8002a9e:	e01e      	b.n	8002ade <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	623b      	str	r3, [r7, #32]
          break;
 8002aa8:	e019      	b.n	8002ade <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ab2:	2304      	movs	r3, #4
 8002ab4:	623b      	str	r3, [r7, #32]
          break;
 8002ab6:	e012      	b.n	8002ade <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d105      	bne.n	8002acc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ac0:	2308      	movs	r3, #8
 8002ac2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	611a      	str	r2, [r3, #16]
          break;
 8002aca:	e008      	b.n	8002ade <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002acc:	2308      	movs	r3, #8
 8002ace:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	615a      	str	r2, [r3, #20]
          break;
 8002ad6:	e002      	b.n	8002ade <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	623b      	str	r3, [r7, #32]
          break;
 8002adc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2bff      	cmp	r3, #255	; 0xff
 8002ae2:	d801      	bhi.n	8002ae8 <HAL_GPIO_Init+0xec>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	e001      	b.n	8002aec <HAL_GPIO_Init+0xf0>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3304      	adds	r3, #4
 8002aec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	2bff      	cmp	r3, #255	; 0xff
 8002af2:	d802      	bhi.n	8002afa <HAL_GPIO_Init+0xfe>
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	e002      	b.n	8002b00 <HAL_GPIO_Init+0x104>
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	3b08      	subs	r3, #8
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	210f      	movs	r1, #15
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	401a      	ands	r2, r3
 8002b12:	6a39      	ldr	r1, [r7, #32]
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8096 	beq.w	8002c5a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b2e:	4b59      	ldr	r3, [pc, #356]	; (8002c94 <HAL_GPIO_Init+0x298>)
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	4a58      	ldr	r2, [pc, #352]	; (8002c94 <HAL_GPIO_Init+0x298>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6193      	str	r3, [r2, #24]
 8002b3a:	4b56      	ldr	r3, [pc, #344]	; (8002c94 <HAL_GPIO_Init+0x298>)
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b46:	4a54      	ldr	r2, [pc, #336]	; (8002c98 <HAL_GPIO_Init+0x29c>)
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b52:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4013      	ands	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4b      	ldr	r2, [pc, #300]	; (8002c9c <HAL_GPIO_Init+0x2a0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d013      	beq.n	8002b9a <HAL_GPIO_Init+0x19e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4a      	ldr	r2, [pc, #296]	; (8002ca0 <HAL_GPIO_Init+0x2a4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00d      	beq.n	8002b96 <HAL_GPIO_Init+0x19a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a49      	ldr	r2, [pc, #292]	; (8002ca4 <HAL_GPIO_Init+0x2a8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <HAL_GPIO_Init+0x196>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a48      	ldr	r2, [pc, #288]	; (8002ca8 <HAL_GPIO_Init+0x2ac>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d101      	bne.n	8002b8e <HAL_GPIO_Init+0x192>
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e006      	b.n	8002b9c <HAL_GPIO_Init+0x1a0>
 8002b8e:	2304      	movs	r3, #4
 8002b90:	e004      	b.n	8002b9c <HAL_GPIO_Init+0x1a0>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e002      	b.n	8002b9c <HAL_GPIO_Init+0x1a0>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <HAL_GPIO_Init+0x1a0>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9e:	f002 0203 	and.w	r2, r2, #3
 8002ba2:	0092      	lsls	r2, r2, #2
 8002ba4:	4093      	lsls	r3, r2
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bac:	493a      	ldr	r1, [pc, #232]	; (8002c98 <HAL_GPIO_Init+0x29c>)
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	089b      	lsrs	r3, r3, #2
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bc6:	4b39      	ldr	r3, [pc, #228]	; (8002cac <HAL_GPIO_Init+0x2b0>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	4938      	ldr	r1, [pc, #224]	; (8002cac <HAL_GPIO_Init+0x2b0>)
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]
 8002bd2:	e006      	b.n	8002be2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bd4:	4b35      	ldr	r3, [pc, #212]	; (8002cac <HAL_GPIO_Init+0x2b0>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	4933      	ldr	r1, [pc, #204]	; (8002cac <HAL_GPIO_Init+0x2b0>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bee:	4b2f      	ldr	r3, [pc, #188]	; (8002cac <HAL_GPIO_Init+0x2b0>)
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	492e      	ldr	r1, [pc, #184]	; (8002cac <HAL_GPIO_Init+0x2b0>)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	604b      	str	r3, [r1, #4]
 8002bfa:	e006      	b.n	8002c0a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bfc:	4b2b      	ldr	r3, [pc, #172]	; (8002cac <HAL_GPIO_Init+0x2b0>)
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	43db      	mvns	r3, r3
 8002c04:	4929      	ldr	r1, [pc, #164]	; (8002cac <HAL_GPIO_Init+0x2b0>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d006      	beq.n	8002c24 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c16:	4b25      	ldr	r3, [pc, #148]	; (8002cac <HAL_GPIO_Init+0x2b0>)
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	4924      	ldr	r1, [pc, #144]	; (8002cac <HAL_GPIO_Init+0x2b0>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
 8002c22:	e006      	b.n	8002c32 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c24:	4b21      	ldr	r3, [pc, #132]	; (8002cac <HAL_GPIO_Init+0x2b0>)
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	491f      	ldr	r1, [pc, #124]	; (8002cac <HAL_GPIO_Init+0x2b0>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d006      	beq.n	8002c4c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <HAL_GPIO_Init+0x2b0>)
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	491a      	ldr	r1, [pc, #104]	; (8002cac <HAL_GPIO_Init+0x2b0>)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60cb      	str	r3, [r1, #12]
 8002c4a:	e006      	b.n	8002c5a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c4c:	4b17      	ldr	r3, [pc, #92]	; (8002cac <HAL_GPIO_Init+0x2b0>)
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	4915      	ldr	r1, [pc, #84]	; (8002cac <HAL_GPIO_Init+0x2b0>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f47f aed0 	bne.w	8002a10 <HAL_GPIO_Init+0x14>
  }
}
 8002c70:	bf00      	nop
 8002c72:	372c      	adds	r7, #44	; 0x2c
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	10210000 	.word	0x10210000
 8002c80:	10110000 	.word	0x10110000
 8002c84:	10120000 	.word	0x10120000
 8002c88:	10310000 	.word	0x10310000
 8002c8c:	10320000 	.word	0x10320000
 8002c90:	10220000 	.word	0x10220000
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	40010800 	.word	0x40010800
 8002ca0:	40010c00 	.word	0x40010c00
 8002ca4:	40011000 	.word	0x40011000
 8002ca8:	40011400 	.word	0x40011400
 8002cac:	40010400 	.word	0x40010400

08002cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	807b      	strh	r3, [r7, #2]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cc0:	787b      	ldrb	r3, [r7, #1]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cc6:	887a      	ldrh	r2, [r7, #2]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ccc:	e003      	b.n	8002cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cce:	887b      	ldrh	r3, [r7, #2]
 8002cd0:	041a      	lsls	r2, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	611a      	str	r2, [r3, #16]
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e11f      	b.n	8002f32 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fe fdb6 	bl	8001878 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2224      	movs	r2, #36	; 0x24
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0201 	bic.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d44:	f003 fc2e 	bl	80065a4 <HAL_RCC_GetPCLK1Freq>
 8002d48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4a7b      	ldr	r2, [pc, #492]	; (8002f3c <HAL_I2C_Init+0x25c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d807      	bhi.n	8002d64 <HAL_I2C_Init+0x84>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4a7a      	ldr	r2, [pc, #488]	; (8002f40 <HAL_I2C_Init+0x260>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	bf94      	ite	ls
 8002d5c:	2301      	movls	r3, #1
 8002d5e:	2300      	movhi	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	e006      	b.n	8002d72 <HAL_I2C_Init+0x92>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a77      	ldr	r2, [pc, #476]	; (8002f44 <HAL_I2C_Init+0x264>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	bf94      	ite	ls
 8002d6c:	2301      	movls	r3, #1
 8002d6e:	2300      	movhi	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e0db      	b.n	8002f32 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4a72      	ldr	r2, [pc, #456]	; (8002f48 <HAL_I2C_Init+0x268>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	0c9b      	lsrs	r3, r3, #18
 8002d84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4a64      	ldr	r2, [pc, #400]	; (8002f3c <HAL_I2C_Init+0x25c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d802      	bhi.n	8002db4 <HAL_I2C_Init+0xd4>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	3301      	adds	r3, #1
 8002db2:	e009      	b.n	8002dc8 <HAL_I2C_Init+0xe8>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	4a63      	ldr	r2, [pc, #396]	; (8002f4c <HAL_I2C_Init+0x26c>)
 8002dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc4:	099b      	lsrs	r3, r3, #6
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4956      	ldr	r1, [pc, #344]	; (8002f3c <HAL_I2C_Init+0x25c>)
 8002de4:	428b      	cmp	r3, r1
 8002de6:	d80d      	bhi.n	8002e04 <HAL_I2C_Init+0x124>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1e59      	subs	r1, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	bf38      	it	cc
 8002e00:	2304      	movcc	r3, #4
 8002e02:	e04f      	b.n	8002ea4 <HAL_I2C_Init+0x1c4>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d111      	bne.n	8002e30 <HAL_I2C_Init+0x150>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1e58      	subs	r0, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	440b      	add	r3, r1
 8002e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e012      	b.n	8002e56 <HAL_I2C_Init+0x176>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1e58      	subs	r0, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	0099      	lsls	r1, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Init+0x17e>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e022      	b.n	8002ea4 <HAL_I2C_Init+0x1c4>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10e      	bne.n	8002e84 <HAL_I2C_Init+0x1a4>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1e58      	subs	r0, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	440b      	add	r3, r1
 8002e74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e82:	e00f      	b.n	8002ea4 <HAL_I2C_Init+0x1c4>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1e58      	subs	r0, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	0099      	lsls	r1, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	6809      	ldr	r1, [r1, #0]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ed2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6911      	ldr	r1, [r2, #16]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68d2      	ldr	r2, [r2, #12]
 8002ede:	4311      	orrs	r1, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	000186a0 	.word	0x000186a0
 8002f40:	001e847f 	.word	0x001e847f
 8002f44:	003d08ff 	.word	0x003d08ff
 8002f48:	431bde83 	.word	0x431bde83
 8002f4c:	10624dd3 	.word	0x10624dd3

08002f50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f70:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f78:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	d003      	beq.n	8002f88 <HAL_I2C_EV_IRQHandler+0x38>
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	2b40      	cmp	r3, #64	; 0x40
 8002f84:	f040 80bd 	bne.w	8003102 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10d      	bne.n	8002fbe <HAL_I2C_EV_IRQHandler+0x6e>
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002fa8:	d003      	beq.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x62>
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002fb0:	d101      	bne.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x66>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x68>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	f000 812e 	beq.w	800321a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00c      	beq.n	8002fe2 <HAL_I2C_EV_IRQHandler+0x92>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	0a5b      	lsrs	r3, r3, #9
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d006      	beq.n	8002fe2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f001 fb39 	bl	800464c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fcb1 	bl	8003942 <I2C_Master_SB>
 8002fe0:	e08e      	b.n	8003100 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	08db      	lsrs	r3, r3, #3
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_I2C_EV_IRQHandler+0xb2>
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	0a5b      	lsrs	r3, r3, #9
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fd26 	bl	8003a4c <I2C_Master_ADD10>
 8003000:	e07e      	b.n	8003100 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <HAL_I2C_EV_IRQHandler+0xd2>
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	0a5b      	lsrs	r3, r3, #9
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fd3f 	bl	8003a9e <I2C_Master_ADDR>
 8003020:	e06e      	b.n	8003100 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	089b      	lsrs	r3, r3, #2
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d037      	beq.n	800309e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800303c:	f000 80ef 	beq.w	800321e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	09db      	lsrs	r3, r3, #7
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00f      	beq.n	800306c <HAL_I2C_EV_IRQHandler+0x11c>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	0a9b      	lsrs	r3, r3, #10
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d009      	beq.n	800306c <HAL_I2C_EV_IRQHandler+0x11c>
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	089b      	lsrs	r3, r3, #2
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d103      	bne.n	800306c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f93e 	bl	80032e6 <I2C_MasterTransmit_TXE>
 800306a:	e049      	b.n	8003100 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80d2 	beq.w	800321e <HAL_I2C_EV_IRQHandler+0x2ce>
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	0a5b      	lsrs	r3, r3, #9
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80cb 	beq.w	800321e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	2b10      	cmp	r3, #16
 800308c:	d103      	bne.n	8003096 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f9c5 	bl	800341e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003094:	e0c3      	b.n	800321e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fa29 	bl	80034ee <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800309c:	e0bf      	b.n	800321e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ac:	f000 80b7 	beq.w	800321e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00f      	beq.n	80030dc <HAL_I2C_EV_IRQHandler+0x18c>
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	0a9b      	lsrs	r3, r3, #10
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d009      	beq.n	80030dc <HAL_I2C_EV_IRQHandler+0x18c>
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	089b      	lsrs	r3, r3, #2
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d103      	bne.n	80030dc <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fa99 	bl	800360c <I2C_MasterReceive_RXNE>
 80030da:	e011      	b.n	8003100 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	089b      	lsrs	r3, r3, #2
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 809a 	beq.w	800321e <HAL_I2C_EV_IRQHandler+0x2ce>
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	0a5b      	lsrs	r3, r3, #9
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8093 	beq.w	800321e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fb38 	bl	800376e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030fe:	e08e      	b.n	800321e <HAL_I2C_EV_IRQHandler+0x2ce>
 8003100:	e08d      	b.n	800321e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d004      	beq.n	8003114 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	e007      	b.n	8003124 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	085b      	lsrs	r3, r3, #1
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d012      	beq.n	8003156 <HAL_I2C_EV_IRQHandler+0x206>
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	0a5b      	lsrs	r3, r3, #9
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00c      	beq.n	8003156 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800314c:	69b9      	ldr	r1, [r7, #24]
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fefc 	bl	8003f4c <I2C_Slave_ADDR>
 8003154:	e066      	b.n	8003224 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d009      	beq.n	8003176 <HAL_I2C_EV_IRQHandler+0x226>
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	0a5b      	lsrs	r3, r3, #9
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 ff30 	bl	8003fd4 <I2C_Slave_STOPF>
 8003174:	e056      	b.n	8003224 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003176:	7bbb      	ldrb	r3, [r7, #14]
 8003178:	2b21      	cmp	r3, #33	; 0x21
 800317a:	d002      	beq.n	8003182 <HAL_I2C_EV_IRQHandler+0x232>
 800317c:	7bbb      	ldrb	r3, [r7, #14]
 800317e:	2b29      	cmp	r3, #41	; 0x29
 8003180:	d125      	bne.n	80031ce <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	09db      	lsrs	r3, r3, #7
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00f      	beq.n	80031ae <HAL_I2C_EV_IRQHandler+0x25e>
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	0a9b      	lsrs	r3, r3, #10
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <HAL_I2C_EV_IRQHandler+0x25e>
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d103      	bne.n	80031ae <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fe14 	bl	8003dd4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031ac:	e039      	b.n	8003222 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	089b      	lsrs	r3, r3, #2
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d033      	beq.n	8003222 <HAL_I2C_EV_IRQHandler+0x2d2>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	0a5b      	lsrs	r3, r3, #9
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d02d      	beq.n	8003222 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fe41 	bl	8003e4e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031cc:	e029      	b.n	8003222 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00f      	beq.n	80031fa <HAL_I2C_EV_IRQHandler+0x2aa>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	0a9b      	lsrs	r3, r3, #10
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <HAL_I2C_EV_IRQHandler+0x2aa>
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	089b      	lsrs	r3, r3, #2
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d103      	bne.n	80031fa <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fe4b 	bl	8003e8e <I2C_SlaveReceive_RXNE>
 80031f8:	e014      	b.n	8003224 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	089b      	lsrs	r3, r3, #2
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00e      	beq.n	8003224 <HAL_I2C_EV_IRQHandler+0x2d4>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	0a5b      	lsrs	r3, r3, #9
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fe79 	bl	8003f0a <I2C_SlaveReceive_BTF>
 8003218:	e004      	b.n	8003224 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800321a:	bf00      	nop
 800321c:	e002      	b.n	8003224 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800321e:	bf00      	nop
 8003220:	e000      	b.n	8003224 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003222:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	460b      	mov	r3, r1
 800327c:	70fb      	strb	r3, [r7, #3]
 800327e:	4613      	mov	r3, r2
 8003280:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr

0800329e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b084      	sub	sp, #16
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032fc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003308:	2b00      	cmp	r3, #0
 800330a:	d150      	bne.n	80033ae <I2C_MasterTransmit_TXE+0xc8>
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	2b21      	cmp	r3, #33	; 0x21
 8003310:	d14d      	bne.n	80033ae <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b08      	cmp	r3, #8
 8003316:	d01d      	beq.n	8003354 <I2C_MasterTransmit_TXE+0x6e>
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b20      	cmp	r3, #32
 800331c:	d01a      	beq.n	8003354 <I2C_MasterTransmit_TXE+0x6e>
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003324:	d016      	beq.n	8003354 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003334:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2211      	movs	r2, #17
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff ff6c 	bl	800322a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003352:	e060      	b.n	8003416 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003362:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003372:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b40      	cmp	r3, #64	; 0x40
 800338c:	d107      	bne.n	800339e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff ff81 	bl	800329e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800339c:	e03b      	b.n	8003416 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7ff ff3f 	bl	800322a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033ac:	e033      	b.n	8003416 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	2b21      	cmp	r3, #33	; 0x21
 80033b2:	d005      	beq.n	80033c0 <I2C_MasterTransmit_TXE+0xda>
 80033b4:	7bbb      	ldrb	r3, [r7, #14]
 80033b6:	2b40      	cmp	r3, #64	; 0x40
 80033b8:	d12d      	bne.n	8003416 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	2b22      	cmp	r3, #34	; 0x22
 80033be:	d12a      	bne.n	8003416 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d108      	bne.n	80033dc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80033da:	e01c      	b.n	8003416 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b40      	cmp	r3, #64	; 0x40
 80033e6:	d103      	bne.n	80033f0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f880 	bl	80034ee <I2C_MemoryTransmit_TXE_BTF>
}
 80033ee:	e012      	b.n	8003416 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	781a      	ldrb	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003414:	e7ff      	b.n	8003416 <I2C_MasterTransmit_TXE+0x130>
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b21      	cmp	r3, #33	; 0x21
 8003436:	d156      	bne.n	80034e6 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d012      	beq.n	8003468 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	781a      	ldrb	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003466:	e03e      	b.n	80034e6 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b08      	cmp	r3, #8
 800346c:	d01d      	beq.n	80034aa <I2C_MasterTransmit_BTF+0x8c>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b20      	cmp	r3, #32
 8003472:	d01a      	beq.n	80034aa <I2C_MasterTransmit_BTF+0x8c>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800347a:	d016      	beq.n	80034aa <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800348a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2211      	movs	r2, #17
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff fec1 	bl	800322a <HAL_I2C_MasterTxCpltCallback>
}
 80034a8:	e01d      	b.n	80034e6 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034b8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff fea2 	bl	800322a <HAL_I2C_MasterTxCpltCallback>
}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003502:	2b00      	cmp	r3, #0
 8003504:	d11d      	bne.n	8003542 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350a:	2b01      	cmp	r3, #1
 800350c:	d10b      	bne.n	8003526 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003512:	b2da      	uxtb	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351e:	1c9a      	adds	r2, r3, #2
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003524:	e06e      	b.n	8003604 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352a:	b29b      	uxth	r3, r3
 800352c:	121b      	asrs	r3, r3, #8
 800352e:	b2da      	uxtb	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003540:	e060      	b.n	8003604 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003546:	2b01      	cmp	r3, #1
 8003548:	d10b      	bne.n	8003562 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354e:	b2da      	uxtb	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003560:	e050      	b.n	8003604 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003566:	2b02      	cmp	r3, #2
 8003568:	d14c      	bne.n	8003604 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	2b22      	cmp	r3, #34	; 0x22
 800356e:	d108      	bne.n	8003582 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800357e:	601a      	str	r2, [r3, #0]
}
 8003580:	e040      	b.n	8003604 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d015      	beq.n	80035b8 <I2C_MemoryTransmit_TXE_BTF+0xca>
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b21      	cmp	r3, #33	; 0x21
 8003590:	d112      	bne.n	80035b8 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	781a      	ldrb	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035b6:	e025      	b.n	8003604 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d120      	bne.n	8003604 <I2C_MemoryTransmit_TXE_BTF+0x116>
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	2b21      	cmp	r3, #33	; 0x21
 80035c6:	d11d      	bne.n	8003604 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035d6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff fe4d 	bl	800329e <HAL_I2C_MemTxCpltCallback>
}
 8003604:	bf00      	nop
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b22      	cmp	r3, #34	; 0x22
 800361e:	f040 80a2 	bne.w	8003766 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b03      	cmp	r3, #3
 800362e:	d921      	bls.n	8003674 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b03      	cmp	r3, #3
 800365e:	f040 8082 	bne.w	8003766 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003670:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003672:	e078      	b.n	8003766 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	2b02      	cmp	r3, #2
 800367a:	d074      	beq.n	8003766 <I2C_MasterReceive_RXNE+0x15a>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d002      	beq.n	8003688 <I2C_MasterReceive_RXNE+0x7c>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d16e      	bne.n	8003766 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 ffad 	bl	80045e8 <I2C_WaitOnSTOPRequestThroughIT>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d142      	bne.n	800371a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036b2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b40      	cmp	r3, #64	; 0x40
 80036ec:	d10a      	bne.n	8003704 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff fdd7 	bl	80032b0 <HAL_I2C_MemRxCpltCallback>
}
 8003702:	e030      	b.n	8003766 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2212      	movs	r2, #18
 8003710:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff fd92 	bl	800323c <HAL_I2C_MasterRxCpltCallback>
}
 8003718:	e025      	b.n	8003766 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003728:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff fdae 	bl	80032c2 <HAL_I2C_ErrorCallback>
}
 8003766:	bf00      	nop
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b04      	cmp	r3, #4
 8003784:	d11b      	bne.n	80037be <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003794:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80037bc:	e0bd      	b.n	800393a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d129      	bne.n	800381c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d00a      	beq.n	80037f4 <I2C_MasterReceive_BTF+0x86>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d007      	beq.n	80037f4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800381a:	e08e      	b.n	800393a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d176      	bne.n	8003914 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d002      	beq.n	8003832 <I2C_MasterReceive_BTF+0xc4>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b10      	cmp	r3, #16
 8003830:	d108      	bne.n	8003844 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	e019      	b.n	8003878 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b04      	cmp	r3, #4
 8003848:	d002      	beq.n	8003850 <I2C_MasterReceive_BTF+0xe2>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d108      	bne.n	8003862 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e00a      	b.n	8003878 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b10      	cmp	r3, #16
 8003866:	d007      	beq.n	8003878 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003876:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80038d2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b40      	cmp	r3, #64	; 0x40
 80038e6:	d10a      	bne.n	80038fe <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff fcda 	bl	80032b0 <HAL_I2C_MemRxCpltCallback>
}
 80038fc:	e01d      	b.n	800393a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2212      	movs	r2, #18
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff fc95 	bl	800323c <HAL_I2C_MasterRxCpltCallback>
}
 8003912:	e012      	b.n	800393a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800393a:	bf00      	nop
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d117      	bne.n	8003986 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	b2db      	uxtb	r3, r3
 8003964:	461a      	mov	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800396e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003970:	e067      	b.n	8003a42 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	b2db      	uxtb	r3, r3
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	b2da      	uxtb	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	611a      	str	r2, [r3, #16]
}
 8003984:	e05d      	b.n	8003a42 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800398e:	d133      	bne.n	80039f8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b21      	cmp	r3, #33	; 0x21
 800399a:	d109      	bne.n	80039b0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039ac:	611a      	str	r2, [r3, #16]
 80039ae:	e008      	b.n	80039c2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d004      	beq.n	80039d4 <I2C_Master_SB+0x92>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d108      	bne.n	80039e6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d032      	beq.n	8003a42 <I2C_Master_SB+0x100>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d02d      	beq.n	8003a42 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039f4:	605a      	str	r2, [r3, #4]
}
 80039f6:	e024      	b.n	8003a42 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10e      	bne.n	8003a1e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	11db      	asrs	r3, r3, #7
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	f003 0306 	and.w	r3, r3, #6
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	f063 030f 	orn	r3, r3, #15
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	611a      	str	r2, [r3, #16]
}
 8003a1c:	e011      	b.n	8003a42 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d10d      	bne.n	8003a42 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	11db      	asrs	r3, r3, #7
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f003 0306 	and.w	r3, r3, #6
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	f063 030e 	orn	r3, r3, #14
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	611a      	str	r2, [r3, #16]
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d103      	bne.n	8003a70 <I2C_Master_ADD10+0x24>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d011      	beq.n	8003a94 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d104      	bne.n	8003a84 <I2C_Master_ADD10+0x38>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d007      	beq.n	8003a94 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a92:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr

08003a9e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b091      	sub	sp, #68	; 0x44
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b22      	cmp	r3, #34	; 0x22
 8003ac6:	f040 8174 	bne.w	8003db2 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10f      	bne.n	8003af2 <I2C_Master_ADDR+0x54>
 8003ad2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ad6:	2b40      	cmp	r3, #64	; 0x40
 8003ad8:	d10b      	bne.n	8003af2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ada:	2300      	movs	r3, #0
 8003adc:	633b      	str	r3, [r7, #48]	; 0x30
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	633b      	str	r3, [r7, #48]	; 0x30
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	e16b      	b.n	8003dca <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d11d      	bne.n	8003b36 <I2C_Master_ADDR+0x98>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b02:	d118      	bne.n	8003b36 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b04:	2300      	movs	r3, #0
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b28:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	651a      	str	r2, [r3, #80]	; 0x50
 8003b34:	e149      	b.n	8003dca <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d113      	bne.n	8003b68 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b40:	2300      	movs	r3, #0
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	e120      	b.n	8003daa <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	f040 808a 	bne.w	8003c88 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b7a:	d137      	bne.n	8003bec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b8a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b9a:	d113      	bne.n	8003bc4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003baa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bac:	2300      	movs	r3, #0
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	e0f2      	b.n	8003daa <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	623b      	str	r3, [r7, #32]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	623b      	str	r3, [r7, #32]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	623b      	str	r3, [r7, #32]
 8003bd8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	e0de      	b.n	8003daa <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d02e      	beq.n	8003c50 <I2C_Master_ADDR+0x1b2>
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d02b      	beq.n	8003c50 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfa:	2b12      	cmp	r3, #18
 8003bfc:	d102      	bne.n	8003c04 <I2C_Master_ADDR+0x166>
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d125      	bne.n	8003c50 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d00e      	beq.n	8003c28 <I2C_Master_ADDR+0x18a>
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d00b      	beq.n	8003c28 <I2C_Master_ADDR+0x18a>
 8003c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d008      	beq.n	8003c28 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	e007      	b.n	8003c38 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c36:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c38:	2300      	movs	r3, #0
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	61fb      	str	r3, [r7, #28]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	e0ac      	b.n	8003daa <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c5e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c60:	2300      	movs	r3, #0
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	61bb      	str	r3, [r7, #24]
 8003c74:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e090      	b.n	8003daa <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d158      	bne.n	8003d44 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d021      	beq.n	8003cdc <I2C_Master_ADDR+0x23e>
 8003c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d01e      	beq.n	8003cdc <I2C_Master_ADDR+0x23e>
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca0:	2b10      	cmp	r3, #16
 8003ca2:	d01b      	beq.n	8003cdc <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cb2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	e012      	b.n	8003d02 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cec:	2300      	movs	r3, #0
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d10:	d14b      	bne.n	8003daa <I2C_Master_ADDR+0x30c>
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d18:	d00b      	beq.n	8003d32 <I2C_Master_ADDR+0x294>
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d008      	beq.n	8003d32 <I2C_Master_ADDR+0x294>
 8003d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d005      	beq.n	8003d32 <I2C_Master_ADDR+0x294>
 8003d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d002      	beq.n	8003d32 <I2C_Master_ADDR+0x294>
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	d13b      	bne.n	8003daa <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	e032      	b.n	8003daa <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d52:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d62:	d117      	bne.n	8003d94 <I2C_Master_ADDR+0x2f6>
 8003d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d6a:	d00b      	beq.n	8003d84 <I2C_Master_ADDR+0x2e6>
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d008      	beq.n	8003d84 <I2C_Master_ADDR+0x2e6>
 8003d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d005      	beq.n	8003d84 <I2C_Master_ADDR+0x2e6>
 8003d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7a:	2b10      	cmp	r3, #16
 8003d7c:	d002      	beq.n	8003d84 <I2C_Master_ADDR+0x2e6>
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d107      	bne.n	8003d94 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d92:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003db0:	e00b      	b.n	8003dca <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db2:	2300      	movs	r3, #0
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
}
 8003dc8:	e7ff      	b.n	8003dca <I2C_Master_ADDR+0x32c>
 8003dca:	bf00      	nop
 8003dcc:	3744      	adds	r7, #68	; 0x44
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr

08003dd4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d02b      	beq.n	8003e46 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	781a      	ldrb	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d114      	bne.n	8003e46 <I2C_SlaveTransmit_TXE+0x72>
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	2b29      	cmp	r3, #41	; 0x29
 8003e20:	d111      	bne.n	8003e46 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e30:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2221      	movs	r2, #33	; 0x21
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2228      	movs	r2, #40	; 0x28
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff fa04 	bl	800324e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d011      	beq.n	8003e84 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	781a      	ldrb	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d02c      	beq.n	8003f02 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d114      	bne.n	8003f02 <I2C_SlaveReceive_RXNE+0x74>
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	2b2a      	cmp	r3, #42	; 0x2a
 8003edc:	d111      	bne.n	8003f02 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2222      	movs	r2, #34	; 0x22
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2228      	movs	r2, #40	; 0x28
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7ff f9af 	bl	8003260 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f02:	bf00      	nop
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d012      	beq.n	8003f42 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr

08003f4c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003f56:	2300      	movs	r3, #0
 8003f58:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f66:	2b28      	cmp	r3, #40	; 0x28
 8003f68:	d127      	bne.n	8003fba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f78:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	089b      	lsrs	r3, r3, #2
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	09db      	lsrs	r3, r3, #7
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d103      	bne.n	8003f9e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	81bb      	strh	r3, [r7, #12]
 8003f9c:	e002      	b.n	8003fa4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003fac:	89ba      	ldrh	r2, [r7, #12]
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff f95d 	bl	8003272 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003fb8:	e008      	b.n	8003fcc <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f06f 0202 	mvn.w	r2, #2
 8003fc2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003fcc:	bf00      	nop
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ff2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	60bb      	str	r3, [r7, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004020:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004030:	d172      	bne.n	8004118 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	2b22      	cmp	r3, #34	; 0x22
 8004036:	d002      	beq.n	800403e <I2C_Slave_STOPF+0x6a>
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b2a      	cmp	r3, #42	; 0x2a
 800403c:	d135      	bne.n	80040aa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	b29a      	uxth	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d005      	beq.n	8004062 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	f043 0204 	orr.w	r2, r3, #4
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004070:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fcb4 	bl	80029e4 <HAL_DMA_GetState>
 800407c:	4603      	mov	r3, r0
 800407e:	2b01      	cmp	r3, #1
 8004080:	d049      	beq.n	8004116 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	4a69      	ldr	r2, [pc, #420]	; (800422c <I2C_Slave_STOPF+0x258>)
 8004088:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe fb2c 	bl	80026ec <HAL_DMA_Abort_IT>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d03d      	beq.n	8004116 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040a4:	4610      	mov	r0, r2
 80040a6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040a8:	e035      	b.n	8004116 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f043 0204 	orr.w	r2, r3, #4
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe fc7e 	bl	80029e4 <HAL_DMA_GetState>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d014      	beq.n	8004118 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f2:	4a4e      	ldr	r2, [pc, #312]	; (800422c <I2C_Slave_STOPF+0x258>)
 80040f4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe faf6 	bl	80026ec <HAL_DMA_Abort_IT>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d008      	beq.n	8004118 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004110:	4610      	mov	r0, r2
 8004112:	4798      	blx	r3
 8004114:	e000      	b.n	8004118 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004116:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d03e      	beq.n	80041a0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b04      	cmp	r3, #4
 800412e:	d112      	bne.n	8004156 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d112      	bne.n	800418a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	f043 0204 	orr.w	r2, r3, #4
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f843 	bl	8004234 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80041ae:	e039      	b.n	8004224 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	2b2a      	cmp	r3, #42	; 0x2a
 80041b4:	d109      	bne.n	80041ca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2228      	movs	r2, #40	; 0x28
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff f84b 	bl	8003260 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b28      	cmp	r3, #40	; 0x28
 80041d4:	d111      	bne.n	80041fa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a15      	ldr	r2, [pc, #84]	; (8004230 <I2C_Slave_STOPF+0x25c>)
 80041da:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff f84a 	bl	800328c <HAL_I2C_ListenCpltCallback>
}
 80041f8:	e014      	b.n	8004224 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	2b22      	cmp	r3, #34	; 0x22
 8004200:	d002      	beq.n	8004208 <I2C_Slave_STOPF+0x234>
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	2b22      	cmp	r3, #34	; 0x22
 8004206:	d10d      	bne.n	8004224 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff f81e 	bl	8003260 <HAL_I2C_SlaveRxCpltCallback>
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	08004499 	.word	0x08004499
 8004230:	ffff0000 	.word	0xffff0000

08004234 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004242:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800424a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800424c:	7bbb      	ldrb	r3, [r7, #14]
 800424e:	2b10      	cmp	r3, #16
 8004250:	d002      	beq.n	8004258 <I2C_ITError+0x24>
 8004252:	7bbb      	ldrb	r3, [r7, #14]
 8004254:	2b40      	cmp	r3, #64	; 0x40
 8004256:	d10a      	bne.n	800426e <I2C_ITError+0x3a>
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b22      	cmp	r3, #34	; 0x22
 800425c:	d107      	bne.n	800426e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800426c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004274:	2b28      	cmp	r3, #40	; 0x28
 8004276:	d107      	bne.n	8004288 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2228      	movs	r2, #40	; 0x28
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004286:	e015      	b.n	80042b4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004296:	d00a      	beq.n	80042ae <I2C_ITError+0x7a>
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	2b60      	cmp	r3, #96	; 0x60
 800429c:	d007      	beq.n	80042ae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c2:	d161      	bne.n	8004388 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d020      	beq.n	8004322 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e4:	4a6a      	ldr	r2, [pc, #424]	; (8004490 <I2C_ITError+0x25c>)
 80042e6:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fe f9fd 	bl	80026ec <HAL_DMA_Abort_IT>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8089 	beq.w	800440c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0201 	bic.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800431c:	4610      	mov	r0, r2
 800431e:	4798      	blx	r3
 8004320:	e074      	b.n	800440c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	4a5a      	ldr	r2, [pc, #360]	; (8004490 <I2C_ITError+0x25c>)
 8004328:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe f9dc 	bl	80026ec <HAL_DMA_Abort_IT>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d068      	beq.n	800440c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	d10b      	bne.n	8004360 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004382:	4610      	mov	r0, r2
 8004384:	4798      	blx	r3
 8004386:	e041      	b.n	800440c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b60      	cmp	r3, #96	; 0x60
 8004392:	d125      	bne.n	80043e0 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ac:	2b40      	cmp	r3, #64	; 0x40
 80043ae:	d10b      	bne.n	80043c8 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7fe ff7b 	bl	80032d4 <HAL_I2C_AbortCpltCallback>
 80043de:	e015      	b.n	800440c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ea:	2b40      	cmp	r3, #64	; 0x40
 80043ec:	d10b      	bne.n	8004406 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fe ff5b 	bl	80032c2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10e      	bne.n	800443a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800442c:	2b00      	cmp	r3, #0
 800442e:	d104      	bne.n	800443a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004436:	2b00      	cmp	r3, #0
 8004438:	d007      	beq.n	800444a <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004448:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004450:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b04      	cmp	r3, #4
 800445c:	d113      	bne.n	8004486 <I2C_ITError+0x252>
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	2b28      	cmp	r3, #40	; 0x28
 8004462:	d110      	bne.n	8004486 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a0b      	ldr	r2, [pc, #44]	; (8004494 <I2C_ITError+0x260>)
 8004468:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7fe ff03 	bl	800328c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004486:	bf00      	nop
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	08004499 	.word	0x08004499
 8004494:	ffff0000 	.word	0xffff0000

08004498 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80044b2:	4b4b      	ldr	r3, [pc, #300]	; (80045e0 <I2C_DMAAbort+0x148>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	08db      	lsrs	r3, r3, #3
 80044b8:	4a4a      	ldr	r2, [pc, #296]	; (80045e4 <I2C_DMAAbort+0x14c>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	0a1a      	lsrs	r2, r3, #8
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	00da      	lsls	r2, r3, #3
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f043 0220 	orr.w	r2, r3, #32
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80044de:	e00a      	b.n	80044f6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f4:	d0ea      	beq.n	80044cc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004502:	2200      	movs	r2, #0
 8004504:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	2200      	movs	r2, #0
 8004514:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004524:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2200      	movs	r2, #0
 800452a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004538:	2200      	movs	r2, #0
 800453a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	2200      	movs	r2, #0
 800454a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0201 	bic.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b60      	cmp	r3, #96	; 0x60
 8004566:	d10e      	bne.n	8004586 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2200      	movs	r2, #0
 800457c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800457e:	6978      	ldr	r0, [r7, #20]
 8004580:	f7fe fea8 	bl	80032d4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004584:	e027      	b.n	80045d6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004586:	7cfb      	ldrb	r3, [r7, #19]
 8004588:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800458c:	2b28      	cmp	r3, #40	; 0x28
 800458e:	d117      	bne.n	80045c0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2200      	movs	r2, #0
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2228      	movs	r2, #40	; 0x28
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045be:	e007      	b.n	80045d0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80045d0:	6978      	ldr	r0, [r7, #20]
 80045d2:	f7fe fe76 	bl	80032c2 <HAL_I2C_ErrorCallback>
}
 80045d6:	bf00      	nop
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000024 	.word	0x20000024
 80045e4:	14f8b589 	.word	0x14f8b589

080045e8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80045f4:	4b13      	ldr	r3, [pc, #76]	; (8004644 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	08db      	lsrs	r3, r3, #3
 80045fa:	4a13      	ldr	r2, [pc, #76]	; (8004648 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	0a1a      	lsrs	r2, r3, #8
 8004602:	4613      	mov	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	3b01      	subs	r3, #1
 800460e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d107      	bne.n	8004626 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f043 0220 	orr.w	r2, r3, #32
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e008      	b.n	8004638 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004634:	d0e9      	beq.n	800460a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000024 	.word	0x20000024
 8004648:	14f8b589 	.word	0x14f8b589

0800464c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800465c:	d103      	bne.n	8004666 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004664:	e007      	b.n	8004676 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800466e:	d102      	bne.n	8004676 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2208      	movs	r2, #8
 8004674:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr

08004680 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e02b      	b.n	80046ea <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800469a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f245 5255 	movw	r2, #21845	; 0x5555
 80046a4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6852      	ldr	r2, [r2, #4]
 80046ae:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6892      	ldr	r2, [r2, #8]
 80046b8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80046ba:	f7fd fc9b 	bl	8001ff4 <HAL_GetTick>
 80046be:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80046c0:	e008      	b.n	80046d4 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80046c2:	f7fd fc97 	bl	8001ff4 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b26      	cmp	r3, #38	; 0x26
 80046ce:	d901      	bls.n	80046d4 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e00a      	b.n	80046ea <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f1      	bne.n	80046c2 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80046e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80046f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046f4:	b08b      	sub	sp, #44	; 0x2c
 80046f6:	af06      	add	r7, sp, #24
 80046f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0fd      	b.n	8004900 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d106      	bne.n	800471e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f006 f9d3 	bl	800aac4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2203      	movs	r2, #3
 8004722:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f002 fbec 	bl	8006f08 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	603b      	str	r3, [r7, #0]
 8004736:	687e      	ldr	r6, [r7, #4]
 8004738:	466d      	mov	r5, sp
 800473a:	f106 0410 	add.w	r4, r6, #16
 800473e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	602b      	str	r3, [r5, #0]
 8004746:	1d33      	adds	r3, r6, #4
 8004748:	cb0e      	ldmia	r3, {r1, r2, r3}
 800474a:	6838      	ldr	r0, [r7, #0]
 800474c:	f002 fbb6 	bl	8006ebc <USB_CoreInit>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2202      	movs	r2, #2
 800475a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e0ce      	b.n	8004900 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2100      	movs	r1, #0
 8004768:	4618      	mov	r0, r3
 800476a:	f002 fbe7 	bl	8006f3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800476e:	2300      	movs	r3, #0
 8004770:	73fb      	strb	r3, [r7, #15]
 8004772:	e04c      	b.n	800480e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	4613      	mov	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	440b      	add	r3, r1
 8004784:	3301      	adds	r3, #1
 8004786:	2201      	movs	r2, #1
 8004788:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	440b      	add	r3, r1
 800479a:	7bfa      	ldrb	r2, [r7, #15]
 800479c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800479e:	7bfa      	ldrb	r2, [r7, #15]
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	b298      	uxth	r0, r3
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	440b      	add	r3, r1
 80047b0:	3336      	adds	r3, #54	; 0x36
 80047b2:	4602      	mov	r2, r0
 80047b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	440b      	add	r3, r1
 80047c6:	3303      	adds	r3, #3
 80047c8:	2200      	movs	r2, #0
 80047ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047cc:	7bfa      	ldrb	r2, [r7, #15]
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	440b      	add	r3, r1
 80047da:	3338      	adds	r3, #56	; 0x38
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047e0:	7bfa      	ldrb	r2, [r7, #15]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	440b      	add	r3, r1
 80047ee:	333c      	adds	r3, #60	; 0x3c
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047f4:	7bfa      	ldrb	r2, [r7, #15]
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	440b      	add	r3, r1
 8004802:	3340      	adds	r3, #64	; 0x40
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	3301      	adds	r3, #1
 800480c:	73fb      	strb	r3, [r7, #15]
 800480e:	7bfa      	ldrb	r2, [r7, #15]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	429a      	cmp	r2, r3
 8004816:	d3ad      	bcc.n	8004774 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004818:	2300      	movs	r3, #0
 800481a:	73fb      	strb	r3, [r7, #15]
 800481c:	e044      	b.n	80048a8 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800481e:	7bfa      	ldrb	r2, [r7, #15]
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	4613      	mov	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	440b      	add	r3, r1
 800482c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004834:	7bfa      	ldrb	r2, [r7, #15]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	440b      	add	r3, r1
 8004842:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004846:	7bfa      	ldrb	r2, [r7, #15]
 8004848:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800484a:	7bfa      	ldrb	r2, [r7, #15]
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	440b      	add	r3, r1
 8004858:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800485c:	2200      	movs	r2, #0
 800485e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004860:	7bfa      	ldrb	r2, [r7, #15]
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	440b      	add	r3, r1
 800486e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004876:	7bfa      	ldrb	r2, [r7, #15]
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	4613      	mov	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	440b      	add	r3, r1
 8004884:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800488c:	7bfa      	ldrb	r2, [r7, #15]
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	440b      	add	r3, r1
 800489a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800489e:	2200      	movs	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	3301      	adds	r3, #1
 80048a6:	73fb      	strb	r3, [r7, #15]
 80048a8:	7bfa      	ldrb	r2, [r7, #15]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d3b5      	bcc.n	800481e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	687e      	ldr	r6, [r7, #4]
 80048ba:	466d      	mov	r5, sp
 80048bc:	f106 0410 	add.w	r4, r6, #16
 80048c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	602b      	str	r3, [r5, #0]
 80048c8:	1d33      	adds	r3, r6, #4
 80048ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048cc:	6838      	ldr	r0, [r7, #0]
 80048ce:	f002 fb41 	bl	8006f54 <USB_DevInit>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e00d      	b.n	8004900 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f004 fadb 	bl	8008eb4 <USB_DevDisconnect>

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004908 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_PCD_Start+0x16>
 800491a:	2302      	movs	r3, #2
 800491c:	e016      	b.n	800494c <HAL_PCD_Start+0x44>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f002 fad6 	bl	8006edc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004930:	2101      	movs	r1, #1
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f006 fb39 	bl	800afaa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f004 faaf 	bl	8008ea0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f004 fab1 	bl	8008ec8 <USB_ReadInterrupts>
 8004966:	4603      	mov	r3, r0
 8004968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800496c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004970:	d102      	bne.n	8004978 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fb61 	bl	800503a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f004 faa3 	bl	8008ec8 <USB_ReadInterrupts>
 8004982:	4603      	mov	r3, r0
 8004984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800498c:	d112      	bne.n	80049b4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004996:	b29a      	uxth	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a0:	b292      	uxth	r2, r2
 80049a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f006 f907 	bl	800abba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80049ac:	2100      	movs	r1, #0
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f925 	bl	8004bfe <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f004 fa85 	bl	8008ec8 <USB_ReadInterrupts>
 80049be:	4603      	mov	r3, r0
 80049c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049c8:	d10b      	bne.n	80049e2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049dc:	b292      	uxth	r2, r2
 80049de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f004 fa6e 	bl	8008ec8 <USB_ReadInterrupts>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f6:	d10b      	bne.n	8004a10 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a0a:	b292      	uxth	r2, r2
 8004a0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f004 fa57 	bl	8008ec8 <USB_ReadInterrupts>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a24:	d126      	bne.n	8004a74 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0204 	bic.w	r2, r2, #4
 8004a38:	b292      	uxth	r2, r2
 8004a3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0208 	bic.w	r2, r2, #8
 8004a50:	b292      	uxth	r2, r2
 8004a52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f006 f8e8 	bl	800ac2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a6e:	b292      	uxth	r2, r2
 8004a70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f004 fa25 	bl	8008ec8 <USB_ReadInterrupts>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a88:	f040 8084 	bne.w	8004b94 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	e011      	b.n	8004ab6 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	7ffb      	ldrb	r3, [r7, #31]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	441a      	add	r2, r3
 8004a9e:	7ffb      	ldrb	r3, [r7, #31]
 8004aa0:	8812      	ldrh	r2, [r2, #0]
 8004aa2:	b292      	uxth	r2, r2
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	f107 0120 	add.w	r1, r7, #32
 8004aaa:	440b      	add	r3, r1
 8004aac:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004ab0:	7ffb      	ldrb	r3, [r7, #31]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	7ffb      	ldrb	r3, [r7, #31]
 8004ab8:	2b07      	cmp	r3, #7
 8004aba:	d9ea      	bls.n	8004a92 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0201 	orr.w	r2, r2, #1
 8004ace:	b292      	uxth	r2, r2
 8004ad0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0201 	bic.w	r2, r2, #1
 8004ae6:	b292      	uxth	r2, r2
 8004ae8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004aec:	bf00      	nop
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0f6      	beq.n	8004aee <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b12:	b292      	uxth	r2, r2
 8004b14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	77fb      	strb	r3, [r7, #31]
 8004b1c:	e010      	b.n	8004b40 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004b1e:	7ffb      	ldrb	r3, [r7, #31]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6812      	ldr	r2, [r2, #0]
 8004b24:	4611      	mov	r1, r2
 8004b26:	7ffa      	ldrb	r2, [r7, #31]
 8004b28:	0092      	lsls	r2, r2, #2
 8004b2a:	440a      	add	r2, r1
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	f107 0120 	add.w	r1, r7, #32
 8004b32:	440b      	add	r3, r1
 8004b34:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004b38:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004b3a:	7ffb      	ldrb	r3, [r7, #31]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	77fb      	strb	r3, [r7, #31]
 8004b40:	7ffb      	ldrb	r3, [r7, #31]
 8004b42:	2b07      	cmp	r3, #7
 8004b44:	d9eb      	bls.n	8004b1e <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0208 	orr.w	r2, r2, #8
 8004b58:	b292      	uxth	r2, r2
 8004b5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b70:	b292      	uxth	r2, r2
 8004b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0204 	orr.w	r2, r2, #4
 8004b88:	b292      	uxth	r2, r2
 8004b8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f006 f832 	bl	800abf8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f004 f995 	bl	8008ec8 <USB_ReadInterrupts>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba8:	d10e      	bne.n	8004bc8 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004bbc:	b292      	uxth	r2, r2
 8004bbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f005 ffeb 	bl	800ab9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f004 f97b 	bl	8008ec8 <USB_ReadInterrupts>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bdc:	d10b      	bne.n	8004bf6 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bf0:	b292      	uxth	r2, r2
 8004bf2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	3720      	adds	r7, #32
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	460b      	mov	r3, r1
 8004c08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <HAL_PCD_SetAddress+0x1a>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e013      	b.n	8004c40 <HAL_PCD_SetAddress+0x42>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	78fa      	ldrb	r2, [r7, #3]
 8004c2e:	4611      	mov	r1, r2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f004 f922 	bl	8008e7a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	4608      	mov	r0, r1
 8004c52:	4611      	mov	r1, r2
 8004c54:	461a      	mov	r2, r3
 8004c56:	4603      	mov	r3, r0
 8004c58:	70fb      	strb	r3, [r7, #3]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	803b      	strh	r3, [r7, #0]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	da0e      	bge.n	8004c8c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c6e:	78fb      	ldrb	r3, [r7, #3]
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	4413      	add	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	705a      	strb	r2, [r3, #1]
 8004c8a:	e00e      	b.n	8004caa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	f003 0207 	and.w	r2, r3, #7
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004caa:	78fb      	ldrb	r3, [r7, #3]
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004cb6:	883a      	ldrh	r2, [r7, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	78ba      	ldrb	r2, [r7, #2]
 8004cc0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	785b      	ldrb	r3, [r3, #1]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d004      	beq.n	8004cd4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004cd4:	78bb      	ldrb	r3, [r7, #2]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d102      	bne.n	8004ce0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_PCD_EP_Open+0xa6>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e00e      	b.n	8004d0c <HAL_PCD_EP_Open+0xc4>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68f9      	ldr	r1, [r7, #12]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f002 f949 	bl	8006f94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004d0a:	7afb      	ldrb	r3, [r7, #11]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	da0e      	bge.n	8004d46 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	705a      	strb	r2, [r3, #1]
 8004d44:	e00e      	b.n	8004d64 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d46:	78fb      	ldrb	r3, [r7, #3]
 8004d48:	f003 0207 	and.w	r2, r3, #7
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <HAL_PCD_EP_Close+0x6a>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e00e      	b.n	8004d9c <HAL_PCD_EP_Close+0x88>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68f9      	ldr	r1, [r7, #12]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f002 fc6b 	bl	8007668 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	460b      	mov	r3, r1
 8004db2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004db4:	7afb      	ldrb	r3, [r7, #11]
 8004db6:	f003 0207 	and.w	r2, r3, #7
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4413      	add	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2200      	movs	r2, #0
 8004de2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004de4:	7afb      	ldrb	r3, [r7, #11]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004df0:	7afb      	ldrb	r3, [r7, #11]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6979      	ldr	r1, [r7, #20]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f002 fe1d 	bl	8007a40 <USB_EPStartXfer>
 8004e06:	e005      	b.n	8004e14 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6979      	ldr	r1, [r7, #20]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f002 fe16 	bl	8007a40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	460b      	mov	r3, r1
 8004e28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004e2a:	78fb      	ldrb	r3, [r7, #3]
 8004e2c:	f003 0207 	and.w	r2, r3, #7
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	440b      	add	r3, r1
 8004e3c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004e40:	681b      	ldr	r3, [r3, #0]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr

08004e4c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	607a      	str	r2, [r7, #4]
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e5c:	7afb      	ldrb	r3, [r7, #11]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2201      	movs	r2, #1
 8004e96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e98:	7afb      	ldrb	r3, [r7, #11]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ea4:	7afb      	ldrb	r3, [r7, #11]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d106      	bne.n	8004ebc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6979      	ldr	r1, [r7, #20]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f002 fdc3 	bl	8007a40 <USB_EPStartXfer>
 8004eba:	e005      	b.n	8004ec8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6979      	ldr	r1, [r7, #20]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f002 fdbc 	bl	8007a40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	460b      	mov	r3, r1
 8004edc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ede:	78fb      	ldrb	r3, [r7, #3]
 8004ee0:	f003 0207 	and.w	r2, r3, #7
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d901      	bls.n	8004ef0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e04c      	b.n	8004f8a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ef0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	da0e      	bge.n	8004f16 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ef8:	78fb      	ldrb	r3, [r7, #3]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2201      	movs	r2, #1
 8004f12:	705a      	strb	r2, [r3, #1]
 8004f14:	e00c      	b.n	8004f30 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f16:	78fa      	ldrb	r2, [r7, #3]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	4413      	add	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f36:	78fb      	ldrb	r3, [r7, #3]
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_PCD_EP_SetStall+0x7e>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e01c      	b.n	8004f8a <HAL_PCD_EP_SetStall+0xb8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68f9      	ldr	r1, [r7, #12]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f003 fe8e 	bl	8008c80 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f64:	78fb      	ldrb	r3, [r7, #3]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d108      	bne.n	8004f80 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	f003 ffb3 	bl	8008ee6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004f9e:	78fb      	ldrb	r3, [r7, #3]
 8004fa0:	f003 020f 	and.w	r2, r3, #15
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d901      	bls.n	8004fb0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e040      	b.n	8005032 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	da0e      	bge.n	8004fd6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	4413      	add	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	705a      	strb	r2, [r3, #1]
 8004fd4:	e00e      	b.n	8004ff4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fd6:	78fb      	ldrb	r3, [r7, #3]
 8004fd8:	f003 0207 	and.w	r2, r3, #7
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	4413      	add	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	b2da      	uxtb	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_PCD_EP_ClrStall+0x82>
 8005010:	2302      	movs	r3, #2
 8005012:	e00e      	b.n	8005032 <HAL_PCD_EP_ClrStall+0xa0>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68f9      	ldr	r1, [r7, #12]
 8005022:	4618      	mov	r0, r3
 8005024:	f003 fe7c 	bl	8008d20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b08e      	sub	sp, #56	; 0x38
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005042:	e2df      	b.n	8005604 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800504c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800504e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005050:	b2db      	uxtb	r3, r3
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800505a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800505e:	2b00      	cmp	r3, #0
 8005060:	f040 8158 	bne.w	8005314 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005064:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005066:	f003 0310 	and.w	r3, r3, #16
 800506a:	2b00      	cmp	r3, #0
 800506c:	d152      	bne.n	8005114 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	81fb      	strh	r3, [r7, #14]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	89fb      	ldrh	r3, [r7, #14]
 8005086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800508a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800508e:	b29b      	uxth	r3, r3
 8005090:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3328      	adds	r3, #40	; 0x28
 8005096:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	461a      	mov	r2, r3
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	4413      	add	r3, r2
 80050ac:	3302      	adds	r3, #2
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6812      	ldr	r2, [r2, #0]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	695a      	ldr	r2, [r3, #20]
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	441a      	add	r2, r3
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80050d2:	2100      	movs	r1, #0
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f005 fd48 	bl	800ab6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 828e 	beq.w	8005604 <PCD_EP_ISR_Handler+0x5ca>
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f040 8289 	bne.w	8005604 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	b292      	uxth	r2, r2
 8005106:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005112:	e277      	b.n	8005604 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005124:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800512a:	2b00      	cmp	r3, #0
 800512c:	d034      	beq.n	8005198 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005136:	b29b      	uxth	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4413      	add	r3, r2
 8005142:	3306      	adds	r3, #6
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800516c:	b29b      	uxth	r3, r3
 800516e:	f003 ff09 	bl	8008f84 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	b29a      	uxth	r2, r3
 800517a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800517e:	4013      	ands	r3, r2
 8005180:	823b      	strh	r3, [r7, #16]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	8a3a      	ldrh	r2, [r7, #16]
 8005188:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800518c:	b292      	uxth	r2, r2
 800518e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f005 fcbd 	bl	800ab10 <HAL_PCD_SetupStageCallback>
 8005196:	e235      	b.n	8005604 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005198:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800519c:	2b00      	cmp	r3, #0
 800519e:	f280 8231 	bge.w	8005604 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80051ae:	4013      	ands	r3, r2
 80051b0:	83bb      	strh	r3, [r7, #28]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	8bba      	ldrh	r2, [r7, #28]
 80051b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051bc:	b292      	uxth	r2, r2
 80051be:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	4413      	add	r3, r2
 80051d4:	3306      	adds	r3, #6
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d019      	beq.n	8005228 <PCD_EP_ISR_Handler+0x1ee>
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d015      	beq.n	8005228 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6818      	ldr	r0, [r3, #0]
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	6959      	ldr	r1, [r3, #20]
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800520c:	b29b      	uxth	r3, r3
 800520e:	f003 feb9 	bl	8008f84 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	695a      	ldr	r2, [r3, #20]
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	441a      	add	r2, r3
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005220:	2100      	movs	r1, #0
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f005 fc86 	bl	800ab34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	61bb      	str	r3, [r7, #24]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005236:	b29b      	uxth	r3, r3
 8005238:	461a      	mov	r2, r3
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	4413      	add	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d112      	bne.n	8005276 <PCD_EP_ISR_Handler+0x23c>
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	b29b      	uxth	r3, r3
 8005256:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800525a:	b29a      	uxth	r2, r3
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	801a      	strh	r2, [r3, #0]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	b29b      	uxth	r3, r3
 8005266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800526a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800526e:	b29a      	uxth	r2, r3
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	801a      	strh	r2, [r3, #0]
 8005274:	e02f      	b.n	80052d6 <PCD_EP_ISR_Handler+0x29c>
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b3e      	cmp	r3, #62	; 0x3e
 800527c:	d813      	bhi.n	80052a6 <PCD_EP_ISR_Handler+0x26c>
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	085b      	lsrs	r3, r3, #1
 8005284:	633b      	str	r3, [r7, #48]	; 0x30
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <PCD_EP_ISR_Handler+0x25e>
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	3301      	adds	r3, #1
 8005296:	633b      	str	r3, [r7, #48]	; 0x30
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	b29b      	uxth	r3, r3
 800529c:	029b      	lsls	r3, r3, #10
 800529e:	b29a      	uxth	r2, r3
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	801a      	strh	r2, [r3, #0]
 80052a4:	e017      	b.n	80052d6 <PCD_EP_ISR_Handler+0x29c>
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	633b      	str	r3, [r7, #48]	; 0x30
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 031f 	and.w	r3, r3, #31
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d102      	bne.n	80052c0 <PCD_EP_ISR_Handler+0x286>
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	3b01      	subs	r3, #1
 80052be:	633b      	str	r3, [r7, #48]	; 0x30
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	029b      	lsls	r3, r3, #10
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e6:	827b      	strh	r3, [r7, #18]
 80052e8:	8a7b      	ldrh	r3, [r7, #18]
 80052ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052ee:	827b      	strh	r3, [r7, #18]
 80052f0:	8a7b      	ldrh	r3, [r7, #18]
 80052f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052f6:	827b      	strh	r3, [r7, #18]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	8a7b      	ldrh	r3, [r7, #18]
 80052fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800530a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800530e:	b29b      	uxth	r3, r3
 8005310:	8013      	strh	r3, [r2, #0]
 8005312:	e177      	b.n	8005604 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	461a      	mov	r2, r3
 800531a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005326:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800532a:	2b00      	cmp	r3, #0
 800532c:	f280 80ea 	bge.w	8005504 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	461a      	mov	r2, r3
 8005336:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	b29a      	uxth	r2, r3
 8005342:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005346:	4013      	ands	r3, r2
 8005348:	853b      	strh	r3, [r7, #40]	; 0x28
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800535a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800535e:	b292      	uxth	r2, r2
 8005360:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005362:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	4413      	add	r3, r2
 8005376:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	7b1b      	ldrb	r3, [r3, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d122      	bne.n	80053c6 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005388:	b29b      	uxth	r3, r3
 800538a:	461a      	mov	r2, r3
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	4413      	add	r3, r2
 8005394:	3306      	adds	r3, #6
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053a8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80053aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8087 	beq.w	80054c0 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	6959      	ldr	r1, [r3, #20]
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	88da      	ldrh	r2, [r3, #6]
 80053be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053c0:	f003 fde0 	bl	8008f84 <USB_ReadPMA>
 80053c4:	e07c      	b.n	80054c0 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	78db      	ldrb	r3, [r3, #3]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d108      	bne.n	80053e0 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80053ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80053d0:	461a      	mov	r2, r3
 80053d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f923 	bl	8005620 <HAL_PCD_EP_DB_Receive>
 80053da:	4603      	mov	r3, r0
 80053dc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80053de:	e06f      	b.n	80054c0 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	461a      	mov	r2, r3
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	461a      	mov	r2, r3
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	441a      	add	r2, r3
 800540a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800540c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005418:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800541c:	b29b      	uxth	r3, r3
 800541e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	b29b      	uxth	r3, r3
 8005432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d021      	beq.n	800547e <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005442:	b29b      	uxth	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	4413      	add	r3, r2
 800544e:	3302      	adds	r3, #2
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6812      	ldr	r2, [r2, #0]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005462:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005464:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005466:	2b00      	cmp	r3, #0
 8005468:	d02a      	beq.n	80054c0 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	6959      	ldr	r1, [r3, #20]
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	891a      	ldrh	r2, [r3, #8]
 8005476:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005478:	f003 fd84 	bl	8008f84 <USB_ReadPMA>
 800547c:	e020      	b.n	80054c0 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005486:	b29b      	uxth	r3, r3
 8005488:	461a      	mov	r2, r3
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	4413      	add	r3, r2
 8005492:	3306      	adds	r3, #6
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6812      	ldr	r2, [r2, #0]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054a6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80054a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d008      	beq.n	80054c0 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	6959      	ldr	r1, [r3, #20]
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	895a      	ldrh	r2, [r3, #10]
 80054ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054bc:	f003 fd62 	bl	8008f84 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	69da      	ldr	r2, [r3, #28]
 80054c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054c6:	441a      	add	r2, r3
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	695a      	ldr	r2, [r3, #20]
 80054d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054d2:	441a      	add	r2, r3
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d004      	beq.n	80054ea <PCD_EP_ISR_Handler+0x4b0>
 80054e0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d206      	bcs.n	80054f8 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f005 fb1f 	bl	800ab34 <HAL_PCD_DataOutStageCallback>
 80054f6:	e005      	b.n	8005504 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054fe:	4618      	mov	r0, r3
 8005500:	f002 fa9e 	bl	8007a40 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005504:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550a:	2b00      	cmp	r3, #0
 800550c:	d07a      	beq.n	8005604 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800550e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	4413      	add	r3, r2
 8005520:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
 8005534:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553c:	843b      	strh	r3, [r7, #32]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	441a      	add	r2, r3
 800554c:	8c3b      	ldrh	r3, [r7, #32]
 800554e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005556:	b29b      	uxth	r3, r3
 8005558:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	78db      	ldrb	r3, [r3, #3]
 800555e:	2b02      	cmp	r3, #2
 8005560:	d108      	bne.n	8005574 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8005566:	2b02      	cmp	r3, #2
 8005568:	d146      	bne.n	80055f8 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800556a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800556c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005570:	2b00      	cmp	r3, #0
 8005572:	d141      	bne.n	80055f8 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557c:	b29b      	uxth	r3, r3
 800557e:	461a      	mov	r2, r3
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	4413      	add	r3, r2
 8005588:	3302      	adds	r3, #2
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6812      	ldr	r2, [r2, #0]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800559c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	699a      	ldr	r2, [r3, #24]
 80055a2:	8bfb      	ldrh	r3, [r7, #30]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d906      	bls.n	80055b6 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	699a      	ldr	r2, [r3, #24]
 80055ac:	8bfb      	ldrh	r3, [r7, #30]
 80055ae:	1ad2      	subs	r2, r2, r3
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	619a      	str	r2, [r3, #24]
 80055b4:	e002      	b.n	80055bc <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	2200      	movs	r2, #0
 80055ba:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d106      	bne.n	80055d2 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f005 facd 	bl	800ab6a <HAL_PCD_DataInStageCallback>
 80055d0:	e018      	b.n	8005604 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	695a      	ldr	r2, [r3, #20]
 80055d6:	8bfb      	ldrh	r3, [r7, #30]
 80055d8:	441a      	add	r2, r3
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	69da      	ldr	r2, [r3, #28]
 80055e2:	8bfb      	ldrh	r3, [r7, #30]
 80055e4:	441a      	add	r2, r3
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055f0:	4618      	mov	r0, r3
 80055f2:	f002 fa25 	bl	8007a40 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80055f6:	e005      	b.n	8005604 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80055f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055fa:	461a      	mov	r2, r3
 80055fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f91b 	bl	800583a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800560c:	b29b      	uxth	r3, r3
 800560e:	b21b      	sxth	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	f6ff ad17 	blt.w	8005044 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3738      	adds	r7, #56	; 0x38
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	4613      	mov	r3, r2
 800562c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d07e      	beq.n	8005736 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005640:	b29b      	uxth	r3, r3
 8005642:	461a      	mov	r2, r3
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	4413      	add	r3, r2
 800564c:	3302      	adds	r3, #2
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	6812      	ldr	r2, [r2, #0]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005660:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	8b7b      	ldrh	r3, [r7, #26]
 8005668:	429a      	cmp	r2, r3
 800566a:	d306      	bcc.n	800567a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	699a      	ldr	r2, [r3, #24]
 8005670:	8b7b      	ldrh	r3, [r7, #26]
 8005672:	1ad2      	subs	r2, r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	619a      	str	r2, [r3, #24]
 8005678:	e002      	b.n	8005680 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2200      	movs	r2, #0
 800567e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d123      	bne.n	80056d0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	833b      	strh	r3, [r7, #24]
 80056a4:	8b3b      	ldrh	r3, [r7, #24]
 80056a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056aa:	833b      	strh	r3, [r7, #24]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	441a      	add	r2, r3
 80056ba:	8b3b      	ldrh	r3, [r7, #24]
 80056bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80056d0:	88fb      	ldrh	r3, [r7, #6]
 80056d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01f      	beq.n	800571a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f4:	82fb      	strh	r3, [r7, #22]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	441a      	add	r2, r3
 8005704:	8afb      	ldrh	r3, [r7, #22]
 8005706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800570a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800570e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005712:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005716:	b29b      	uxth	r3, r3
 8005718:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800571a:	8b7b      	ldrh	r3, [r7, #26]
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 8087 	beq.w	8005830 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	6959      	ldr	r1, [r3, #20]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	891a      	ldrh	r2, [r3, #8]
 800572e:	8b7b      	ldrh	r3, [r7, #26]
 8005730:	f003 fc28 	bl	8008f84 <USB_ReadPMA>
 8005734:	e07c      	b.n	8005830 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800573e:	b29b      	uxth	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	4413      	add	r3, r2
 800574a:	3306      	adds	r3, #6
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	6812      	ldr	r2, [r2, #0]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800575e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	699a      	ldr	r2, [r3, #24]
 8005764:	8b7b      	ldrh	r3, [r7, #26]
 8005766:	429a      	cmp	r2, r3
 8005768:	d306      	bcc.n	8005778 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	8b7b      	ldrh	r3, [r7, #26]
 8005770:	1ad2      	subs	r2, r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	619a      	str	r2, [r3, #24]
 8005776:	e002      	b.n	800577e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2200      	movs	r2, #0
 800577c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d123      	bne.n	80057ce <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800579c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a0:	83fb      	strh	r3, [r7, #30]
 80057a2:	8bfb      	ldrh	r3, [r7, #30]
 80057a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057a8:	83fb      	strh	r3, [r7, #30]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	441a      	add	r2, r3
 80057b8:	8bfb      	ldrh	r3, [r7, #30]
 80057ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d11f      	bne.n	8005818 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	461a      	mov	r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f2:	83bb      	strh	r3, [r7, #28]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	441a      	add	r2, r3
 8005802:	8bbb      	ldrh	r3, [r7, #28]
 8005804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800580c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005810:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005814:	b29b      	uxth	r3, r3
 8005816:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005818:	8b7b      	ldrh	r3, [r7, #26]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d008      	beq.n	8005830 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	6959      	ldr	r1, [r3, #20]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	895a      	ldrh	r2, [r3, #10]
 800582a:	8b7b      	ldrh	r3, [r7, #26]
 800582c:	f003 fbaa 	bl	8008f84 <USB_ReadPMA>
    }
  }

  return count;
 8005830:	8b7b      	ldrh	r3, [r7, #26]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3720      	adds	r7, #32
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b092      	sub	sp, #72	; 0x48
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	4613      	mov	r3, r2
 8005846:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 8132 	beq.w	8005ab8 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800585c:	b29b      	uxth	r3, r3
 800585e:	461a      	mov	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	4413      	add	r3, r2
 8005868:	3302      	adds	r3, #2
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	6812      	ldr	r2, [r2, #0]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800587c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	699a      	ldr	r2, [r3, #24]
 8005882:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005884:	429a      	cmp	r2, r3
 8005886:	d906      	bls.n	8005896 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800588e:	1ad2      	subs	r2, r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	619a      	str	r2, [r3, #24]
 8005894:	e002      	b.n	800589c <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2200      	movs	r2, #0
 800589a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d12c      	bne.n	80058fe <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	4619      	mov	r1, r3
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f005 f95d 	bl	800ab6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058b0:	88fb      	ldrh	r3, [r7, #6]
 80058b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 822f 	beq.w	8005d1a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d6:	827b      	strh	r3, [r7, #18]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	461a      	mov	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	441a      	add	r2, r3
 80058e6:	8a7b      	ldrh	r3, [r7, #18]
 80058e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	8013      	strh	r3, [r2, #0]
 80058fc:	e20d      	b.n	8005d1a <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01f      	beq.n	8005948 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	461a      	mov	r2, r3
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	b29b      	uxth	r3, r3
 800591a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800591e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005922:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	441a      	add	r2, r3
 8005932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800593c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005944:	b29b      	uxth	r3, r3
 8005946:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800594e:	2b01      	cmp	r3, #1
 8005950:	f040 81e3 	bne.w	8005d1a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	695a      	ldr	r2, [r3, #20]
 8005958:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800595a:	441a      	add	r2, r3
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	69da      	ldr	r2, [r3, #28]
 8005964:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005966:	441a      	add	r2, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	6a1a      	ldr	r2, [r3, #32]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	429a      	cmp	r2, r3
 8005976:	d309      	bcc.n	800598c <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	6a1a      	ldr	r2, [r3, #32]
 8005982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005984:	1ad2      	subs	r2, r2, r3
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	621a      	str	r2, [r3, #32]
 800598a:	e014      	b.n	80059b6 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d106      	bne.n	80059a2 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8005994:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005996:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80059a0:	e009      	b.n	80059b6 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2200      	movs	r2, #0
 80059b4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	785b      	ldrb	r3, [r3, #1]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d155      	bne.n	8005a6a <HAL_PCD_EP_DB_Transmit+0x230>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	61bb      	str	r3, [r7, #24]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	461a      	mov	r2, r3
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	4413      	add	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	011a      	lsls	r2, r3, #4
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	4413      	add	r3, r2
 80059e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d112      	bne.n	8005a12 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	801a      	strh	r2, [r3, #0]
 8005a10:	e047      	b.n	8005aa2 <HAL_PCD_EP_DB_Transmit+0x268>
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	2b3e      	cmp	r3, #62	; 0x3e
 8005a16:	d811      	bhi.n	8005a3c <HAL_PCD_EP_DB_Transmit+0x202>
 8005a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1a:	085b      	lsrs	r3, r3, #1
 8005a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <HAL_PCD_EP_DB_Transmit+0x1f4>
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	029b      	lsls	r3, r3, #10
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	801a      	strh	r2, [r3, #0]
 8005a3a:	e032      	b.n	8005aa2 <HAL_PCD_EP_DB_Transmit+0x268>
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a44:	f003 031f 	and.w	r3, r3, #31
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d102      	bne.n	8005a52 <HAL_PCD_EP_DB_Transmit+0x218>
 8005a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	029b      	lsls	r3, r3, #10
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	801a      	strh	r2, [r3, #0]
 8005a68:	e01b      	b.n	8005aa2 <HAL_PCD_EP_DB_Transmit+0x268>
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	785b      	ldrb	r3, [r3, #1]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d117      	bne.n	8005aa2 <HAL_PCD_EP_DB_Transmit+0x268>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	623b      	str	r3, [r7, #32]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	461a      	mov	r2, r3
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	4413      	add	r3, r2
 8005a88:	623b      	str	r3, [r7, #32]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	011a      	lsls	r2, r3, #4
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	4413      	add	r3, r2
 8005a94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a98:	61fb      	str	r3, [r7, #28]
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6818      	ldr	r0, [r3, #0]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6959      	ldr	r1, [r3, #20]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	891a      	ldrh	r2, [r3, #8]
 8005aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	f003 fa23 	bl	8008efc <USB_WritePMA>
 8005ab6:	e130      	b.n	8005d1a <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	4413      	add	r3, r2
 8005acc:	3306      	adds	r3, #6
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	6812      	ldr	r2, [r2, #0]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ae0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d306      	bcc.n	8005afa <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	699a      	ldr	r2, [r3, #24]
 8005af0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005af2:	1ad2      	subs	r2, r2, r3
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	619a      	str	r2, [r3, #24]
 8005af8:	e002      	b.n	8005b00 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	2200      	movs	r2, #0
 8005afe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d12c      	bne.n	8005b62 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f005 f82b 	bl	800ab6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005b14:	88fb      	ldrh	r3, [r7, #6]
 8005b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f040 80fd 	bne.w	8005d1a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	461a      	mov	r2, r3
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	441a      	add	r2, r3
 8005b4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	8013      	strh	r3, [r2, #0]
 8005b60:	e0db      	b.n	8005d1a <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d11f      	bne.n	8005bac <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b86:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	441a      	add	r2, r3
 8005b96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	f040 80b1 	bne.w	8005d1a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	695a      	ldr	r2, [r3, #20]
 8005bbc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005bbe:	441a      	add	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	69da      	ldr	r2, [r3, #28]
 8005bc8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005bca:	441a      	add	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	6a1a      	ldr	r2, [r3, #32]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d309      	bcc.n	8005bf0 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	6a1a      	ldr	r2, [r3, #32]
 8005be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be8:	1ad2      	subs	r2, r2, r3
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	621a      	str	r2, [r3, #32]
 8005bee:	e014      	b.n	8005c1a <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d106      	bne.n	8005c06 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8005bf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005bfa:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005c04:	e009      	b.n	8005c1a <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	785b      	ldrb	r3, [r3, #1]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d155      	bne.n	8005cd4 <HAL_PCD_EP_DB_Transmit+0x49a>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c3c:	4413      	add	r3, r2
 8005c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	011a      	lsls	r2, r3, #4
 8005c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c48:	4413      	add	r3, r2
 8005c4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c4e:	643b      	str	r3, [r7, #64]	; 0x40
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d112      	bne.n	8005c7c <HAL_PCD_EP_DB_Transmit+0x442>
 8005c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c64:	801a      	strh	r2, [r3, #0]
 8005c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c78:	801a      	strh	r2, [r3, #0]
 8005c7a:	e044      	b.n	8005d06 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c80:	d811      	bhi.n	8005ca6 <HAL_PCD_EP_DB_Transmit+0x46c>
 8005c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c84:	085b      	lsrs	r3, r3, #1
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <HAL_PCD_EP_DB_Transmit+0x45e>
 8005c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c94:	3301      	adds	r3, #1
 8005c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	029b      	lsls	r3, r3, #10
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca2:	801a      	strh	r2, [r3, #0]
 8005ca4:	e02f      	b.n	8005d06 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d102      	bne.n	8005cbc <HAL_PCD_EP_DB_Transmit+0x482>
 8005cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	029b      	lsls	r3, r3, #10
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd0:	801a      	strh	r2, [r3, #0]
 8005cd2:	e018      	b.n	8005d06 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	785b      	ldrb	r3, [r3, #1]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d114      	bne.n	8005d06 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cea:	4413      	add	r3, r2
 8005cec:	637b      	str	r3, [r7, #52]	; 0x34
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	011a      	lsls	r2, r3, #4
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	6959      	ldr	r1, [r3, #20]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	895a      	ldrh	r2, [r3, #10]
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	f003 f8f1 	bl	8008efc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d34:	823b      	strh	r3, [r7, #16]
 8005d36:	8a3b      	ldrh	r3, [r7, #16]
 8005d38:	f083 0310 	eor.w	r3, r3, #16
 8005d3c:	823b      	strh	r3, [r7, #16]
 8005d3e:	8a3b      	ldrh	r3, [r7, #16]
 8005d40:	f083 0320 	eor.w	r3, r3, #32
 8005d44:	823b      	strh	r3, [r7, #16]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	441a      	add	r2, r3
 8005d54:	8a3b      	ldrh	r3, [r7, #16]
 8005d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3748      	adds	r7, #72	; 0x48
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	607b      	str	r3, [r7, #4]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	817b      	strh	r3, [r7, #10]
 8005d82:	4613      	mov	r3, r2
 8005d84:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005d86:	897b      	ldrh	r3, [r7, #10]
 8005d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00b      	beq.n	8005daa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d92:	897b      	ldrh	r3, [r7, #10]
 8005d94:	f003 0307 	and.w	r3, r3, #7
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4413      	add	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]
 8005da8:	e009      	b.n	8005dbe <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005daa:	897a      	ldrh	r2, [r7, #10]
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005dbe:	893b      	ldrh	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d107      	bne.n	8005dd4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	80da      	strh	r2, [r3, #6]
 8005dd2:	e00b      	b.n	8005dec <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	0c1b      	lsrs	r3, r3, #16
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	371c      	adds	r7, #28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr

08005df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e26c      	b.n	80062e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 8087 	beq.w	8005f26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e18:	4b92      	ldr	r3, [pc, #584]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f003 030c 	and.w	r3, r3, #12
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d00c      	beq.n	8005e3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e24:	4b8f      	ldr	r3, [pc, #572]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f003 030c 	and.w	r3, r3, #12
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d112      	bne.n	8005e56 <HAL_RCC_OscConfig+0x5e>
 8005e30:	4b8c      	ldr	r3, [pc, #560]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e3c:	d10b      	bne.n	8005e56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e3e:	4b89      	ldr	r3, [pc, #548]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d06c      	beq.n	8005f24 <HAL_RCC_OscConfig+0x12c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d168      	bne.n	8005f24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e246      	b.n	80062e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5e:	d106      	bne.n	8005e6e <HAL_RCC_OscConfig+0x76>
 8005e60:	4b80      	ldr	r3, [pc, #512]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a7f      	ldr	r2, [pc, #508]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	e02e      	b.n	8005ecc <HAL_RCC_OscConfig+0xd4>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10c      	bne.n	8005e90 <HAL_RCC_OscConfig+0x98>
 8005e76:	4b7b      	ldr	r3, [pc, #492]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a7a      	ldr	r2, [pc, #488]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	4b78      	ldr	r3, [pc, #480]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a77      	ldr	r2, [pc, #476]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	e01d      	b.n	8005ecc <HAL_RCC_OscConfig+0xd4>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e98:	d10c      	bne.n	8005eb4 <HAL_RCC_OscConfig+0xbc>
 8005e9a:	4b72      	ldr	r3, [pc, #456]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a71      	ldr	r2, [pc, #452]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	4b6f      	ldr	r3, [pc, #444]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a6e      	ldr	r2, [pc, #440]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	e00b      	b.n	8005ecc <HAL_RCC_OscConfig+0xd4>
 8005eb4:	4b6b      	ldr	r3, [pc, #428]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a6a      	ldr	r2, [pc, #424]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	4b68      	ldr	r3, [pc, #416]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a67      	ldr	r2, [pc, #412]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d013      	beq.n	8005efc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed4:	f7fc f88e 	bl	8001ff4 <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005edc:	f7fc f88a 	bl	8001ff4 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b64      	cmp	r3, #100	; 0x64
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e1fa      	b.n	80062e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eee:	4b5d      	ldr	r3, [pc, #372]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0f0      	beq.n	8005edc <HAL_RCC_OscConfig+0xe4>
 8005efa:	e014      	b.n	8005f26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005efc:	f7fc f87a 	bl	8001ff4 <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f04:	f7fc f876 	bl	8001ff4 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b64      	cmp	r3, #100	; 0x64
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e1e6      	b.n	80062e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f16:	4b53      	ldr	r3, [pc, #332]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1f0      	bne.n	8005f04 <HAL_RCC_OscConfig+0x10c>
 8005f22:	e000      	b.n	8005f26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d063      	beq.n	8005ffa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f32:	4b4c      	ldr	r3, [pc, #304]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f003 030c 	and.w	r3, r3, #12
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00b      	beq.n	8005f56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005f3e:	4b49      	ldr	r3, [pc, #292]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f003 030c 	and.w	r3, r3, #12
 8005f46:	2b08      	cmp	r3, #8
 8005f48:	d11c      	bne.n	8005f84 <HAL_RCC_OscConfig+0x18c>
 8005f4a:	4b46      	ldr	r3, [pc, #280]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d116      	bne.n	8005f84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f56:	4b43      	ldr	r3, [pc, #268]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d005      	beq.n	8005f6e <HAL_RCC_OscConfig+0x176>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d001      	beq.n	8005f6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e1ba      	b.n	80062e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f6e:	4b3d      	ldr	r3, [pc, #244]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	4939      	ldr	r1, [pc, #228]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f82:	e03a      	b.n	8005ffa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d020      	beq.n	8005fce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f8c:	4b36      	ldr	r3, [pc, #216]	; (8006068 <HAL_RCC_OscConfig+0x270>)
 8005f8e:	2201      	movs	r2, #1
 8005f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f92:	f7fc f82f 	bl	8001ff4 <HAL_GetTick>
 8005f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f98:	e008      	b.n	8005fac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f9a:	f7fc f82b 	bl	8001ff4 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d901      	bls.n	8005fac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e19b      	b.n	80062e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fac:	4b2d      	ldr	r3, [pc, #180]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0f0      	beq.n	8005f9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fb8:	4b2a      	ldr	r3, [pc, #168]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	4927      	ldr	r1, [pc, #156]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	600b      	str	r3, [r1, #0]
 8005fcc:	e015      	b.n	8005ffa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fce:	4b26      	ldr	r3, [pc, #152]	; (8006068 <HAL_RCC_OscConfig+0x270>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd4:	f7fc f80e 	bl	8001ff4 <HAL_GetTick>
 8005fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fda:	e008      	b.n	8005fee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fdc:	f7fc f80a 	bl	8001ff4 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e17a      	b.n	80062e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fee:	4b1d      	ldr	r3, [pc, #116]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1f0      	bne.n	8005fdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0308 	and.w	r3, r3, #8
 8006002:	2b00      	cmp	r3, #0
 8006004:	d03a      	beq.n	800607c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d019      	beq.n	8006042 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800600e:	4b17      	ldr	r3, [pc, #92]	; (800606c <HAL_RCC_OscConfig+0x274>)
 8006010:	2201      	movs	r2, #1
 8006012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006014:	f7fb ffee 	bl	8001ff4 <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800601c:	f7fb ffea 	bl	8001ff4 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e15a      	b.n	80062e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800602e:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <HAL_RCC_OscConfig+0x26c>)
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0f0      	beq.n	800601c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800603a:	2001      	movs	r0, #1
 800603c:	f000 fac6 	bl	80065cc <RCC_Delay>
 8006040:	e01c      	b.n	800607c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006042:	4b0a      	ldr	r3, [pc, #40]	; (800606c <HAL_RCC_OscConfig+0x274>)
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006048:	f7fb ffd4 	bl	8001ff4 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800604e:	e00f      	b.n	8006070 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006050:	f7fb ffd0 	bl	8001ff4 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d908      	bls.n	8006070 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e140      	b.n	80062e4 <HAL_RCC_OscConfig+0x4ec>
 8006062:	bf00      	nop
 8006064:	40021000 	.word	0x40021000
 8006068:	42420000 	.word	0x42420000
 800606c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006070:	4b9e      	ldr	r3, [pc, #632]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1e9      	bne.n	8006050 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 80a6 	beq.w	80061d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800608a:	2300      	movs	r3, #0
 800608c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800608e:	4b97      	ldr	r3, [pc, #604]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10d      	bne.n	80060b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800609a:	4b94      	ldr	r3, [pc, #592]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	4a93      	ldr	r2, [pc, #588]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 80060a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a4:	61d3      	str	r3, [r2, #28]
 80060a6:	4b91      	ldr	r3, [pc, #580]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ae:	60bb      	str	r3, [r7, #8]
 80060b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060b2:	2301      	movs	r3, #1
 80060b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b6:	4b8e      	ldr	r3, [pc, #568]	; (80062f0 <HAL_RCC_OscConfig+0x4f8>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d118      	bne.n	80060f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060c2:	4b8b      	ldr	r3, [pc, #556]	; (80062f0 <HAL_RCC_OscConfig+0x4f8>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a8a      	ldr	r2, [pc, #552]	; (80062f0 <HAL_RCC_OscConfig+0x4f8>)
 80060c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060ce:	f7fb ff91 	bl	8001ff4 <HAL_GetTick>
 80060d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d4:	e008      	b.n	80060e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060d6:	f7fb ff8d 	bl	8001ff4 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	2b64      	cmp	r3, #100	; 0x64
 80060e2:	d901      	bls.n	80060e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e0fd      	b.n	80062e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e8:	4b81      	ldr	r3, [pc, #516]	; (80062f0 <HAL_RCC_OscConfig+0x4f8>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0f0      	beq.n	80060d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d106      	bne.n	800610a <HAL_RCC_OscConfig+0x312>
 80060fc:	4b7b      	ldr	r3, [pc, #492]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	4a7a      	ldr	r2, [pc, #488]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 8006102:	f043 0301 	orr.w	r3, r3, #1
 8006106:	6213      	str	r3, [r2, #32]
 8006108:	e02d      	b.n	8006166 <HAL_RCC_OscConfig+0x36e>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10c      	bne.n	800612c <HAL_RCC_OscConfig+0x334>
 8006112:	4b76      	ldr	r3, [pc, #472]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	4a75      	ldr	r2, [pc, #468]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 8006118:	f023 0301 	bic.w	r3, r3, #1
 800611c:	6213      	str	r3, [r2, #32]
 800611e:	4b73      	ldr	r3, [pc, #460]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	4a72      	ldr	r2, [pc, #456]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 8006124:	f023 0304 	bic.w	r3, r3, #4
 8006128:	6213      	str	r3, [r2, #32]
 800612a:	e01c      	b.n	8006166 <HAL_RCC_OscConfig+0x36e>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	2b05      	cmp	r3, #5
 8006132:	d10c      	bne.n	800614e <HAL_RCC_OscConfig+0x356>
 8006134:	4b6d      	ldr	r3, [pc, #436]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	4a6c      	ldr	r2, [pc, #432]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 800613a:	f043 0304 	orr.w	r3, r3, #4
 800613e:	6213      	str	r3, [r2, #32]
 8006140:	4b6a      	ldr	r3, [pc, #424]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	4a69      	ldr	r2, [pc, #420]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 8006146:	f043 0301 	orr.w	r3, r3, #1
 800614a:	6213      	str	r3, [r2, #32]
 800614c:	e00b      	b.n	8006166 <HAL_RCC_OscConfig+0x36e>
 800614e:	4b67      	ldr	r3, [pc, #412]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	4a66      	ldr	r2, [pc, #408]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 8006154:	f023 0301 	bic.w	r3, r3, #1
 8006158:	6213      	str	r3, [r2, #32]
 800615a:	4b64      	ldr	r3, [pc, #400]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	4a63      	ldr	r2, [pc, #396]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 8006160:	f023 0304 	bic.w	r3, r3, #4
 8006164:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d015      	beq.n	800619a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800616e:	f7fb ff41 	bl	8001ff4 <HAL_GetTick>
 8006172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006174:	e00a      	b.n	800618c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006176:	f7fb ff3d 	bl	8001ff4 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	f241 3288 	movw	r2, #5000	; 0x1388
 8006184:	4293      	cmp	r3, r2
 8006186:	d901      	bls.n	800618c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e0ab      	b.n	80062e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800618c:	4b57      	ldr	r3, [pc, #348]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0ee      	beq.n	8006176 <HAL_RCC_OscConfig+0x37e>
 8006198:	e014      	b.n	80061c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800619a:	f7fb ff2b 	bl	8001ff4 <HAL_GetTick>
 800619e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061a0:	e00a      	b.n	80061b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061a2:	f7fb ff27 	bl	8001ff4 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e095      	b.n	80062e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061b8:	4b4c      	ldr	r3, [pc, #304]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1ee      	bne.n	80061a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80061c4:	7dfb      	ldrb	r3, [r7, #23]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d105      	bne.n	80061d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ca:	4b48      	ldr	r3, [pc, #288]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	4a47      	ldr	r2, [pc, #284]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 80061d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 8081 	beq.w	80062e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061e0:	4b42      	ldr	r3, [pc, #264]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f003 030c 	and.w	r3, r3, #12
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	d061      	beq.n	80062b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d146      	bne.n	8006282 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061f4:	4b3f      	ldr	r3, [pc, #252]	; (80062f4 <HAL_RCC_OscConfig+0x4fc>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061fa:	f7fb fefb 	bl	8001ff4 <HAL_GetTick>
 80061fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006200:	e008      	b.n	8006214 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006202:	f7fb fef7 	bl	8001ff4 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e067      	b.n	80062e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006214:	4b35      	ldr	r3, [pc, #212]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1f0      	bne.n	8006202 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006228:	d108      	bne.n	800623c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800622a:	4b30      	ldr	r3, [pc, #192]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	492d      	ldr	r1, [pc, #180]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 8006238:	4313      	orrs	r3, r2
 800623a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800623c:	4b2b      	ldr	r3, [pc, #172]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a19      	ldr	r1, [r3, #32]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	430b      	orrs	r3, r1
 800624e:	4927      	ldr	r1, [pc, #156]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 8006250:	4313      	orrs	r3, r2
 8006252:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006254:	4b27      	ldr	r3, [pc, #156]	; (80062f4 <HAL_RCC_OscConfig+0x4fc>)
 8006256:	2201      	movs	r2, #1
 8006258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800625a:	f7fb fecb 	bl	8001ff4 <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006262:	f7fb fec7 	bl	8001ff4 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e037      	b.n	80062e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006274:	4b1d      	ldr	r3, [pc, #116]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0f0      	beq.n	8006262 <HAL_RCC_OscConfig+0x46a>
 8006280:	e02f      	b.n	80062e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006282:	4b1c      	ldr	r3, [pc, #112]	; (80062f4 <HAL_RCC_OscConfig+0x4fc>)
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006288:	f7fb feb4 	bl	8001ff4 <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006290:	f7fb feb0 	bl	8001ff4 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e020      	b.n	80062e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062a2:	4b12      	ldr	r3, [pc, #72]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f0      	bne.n	8006290 <HAL_RCC_OscConfig+0x498>
 80062ae:	e018      	b.n	80062e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e013      	b.n	80062e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80062bc:	4b0b      	ldr	r3, [pc, #44]	; (80062ec <HAL_RCC_OscConfig+0x4f4>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d106      	bne.n	80062de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062da:	429a      	cmp	r2, r3
 80062dc:	d001      	beq.n	80062e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40021000 	.word	0x40021000
 80062f0:	40007000 	.word	0x40007000
 80062f4:	42420060 	.word	0x42420060

080062f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e0d0      	b.n	80064ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800630c:	4b6a      	ldr	r3, [pc, #424]	; (80064b8 <HAL_RCC_ClockConfig+0x1c0>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d910      	bls.n	800633c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800631a:	4b67      	ldr	r3, [pc, #412]	; (80064b8 <HAL_RCC_ClockConfig+0x1c0>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f023 0207 	bic.w	r2, r3, #7
 8006322:	4965      	ldr	r1, [pc, #404]	; (80064b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	4313      	orrs	r3, r2
 8006328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800632a:	4b63      	ldr	r3, [pc, #396]	; (80064b8 <HAL_RCC_ClockConfig+0x1c0>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d001      	beq.n	800633c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e0b8      	b.n	80064ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d020      	beq.n	800638a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0304 	and.w	r3, r3, #4
 8006350:	2b00      	cmp	r3, #0
 8006352:	d005      	beq.n	8006360 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006354:	4b59      	ldr	r3, [pc, #356]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	4a58      	ldr	r2, [pc, #352]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 800635a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800635e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0308 	and.w	r3, r3, #8
 8006368:	2b00      	cmp	r3, #0
 800636a:	d005      	beq.n	8006378 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800636c:	4b53      	ldr	r3, [pc, #332]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	4a52      	ldr	r2, [pc, #328]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 8006372:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006376:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006378:	4b50      	ldr	r3, [pc, #320]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	494d      	ldr	r1, [pc, #308]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 8006386:	4313      	orrs	r3, r2
 8006388:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d040      	beq.n	8006418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d107      	bne.n	80063ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800639e:	4b47      	ldr	r3, [pc, #284]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d115      	bne.n	80063d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e07f      	b.n	80064ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d107      	bne.n	80063c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063b6:	4b41      	ldr	r3, [pc, #260]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d109      	bne.n	80063d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e073      	b.n	80064ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063c6:	4b3d      	ldr	r3, [pc, #244]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e06b      	b.n	80064ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063d6:	4b39      	ldr	r3, [pc, #228]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f023 0203 	bic.w	r2, r3, #3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	4936      	ldr	r1, [pc, #216]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063e8:	f7fb fe04 	bl	8001ff4 <HAL_GetTick>
 80063ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ee:	e00a      	b.n	8006406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063f0:	f7fb fe00 	bl	8001ff4 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fe:	4293      	cmp	r3, r2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e053      	b.n	80064ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006406:	4b2d      	ldr	r3, [pc, #180]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f003 020c 	and.w	r2, r3, #12
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	429a      	cmp	r2, r3
 8006416:	d1eb      	bne.n	80063f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006418:	4b27      	ldr	r3, [pc, #156]	; (80064b8 <HAL_RCC_ClockConfig+0x1c0>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	429a      	cmp	r2, r3
 8006424:	d210      	bcs.n	8006448 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006426:	4b24      	ldr	r3, [pc, #144]	; (80064b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f023 0207 	bic.w	r2, r3, #7
 800642e:	4922      	ldr	r1, [pc, #136]	; (80064b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	4313      	orrs	r3, r2
 8006434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006436:	4b20      	ldr	r3, [pc, #128]	; (80064b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	429a      	cmp	r2, r3
 8006442:	d001      	beq.n	8006448 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e032      	b.n	80064ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d008      	beq.n	8006466 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006454:	4b19      	ldr	r3, [pc, #100]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	4916      	ldr	r1, [pc, #88]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 8006462:	4313      	orrs	r3, r2
 8006464:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0308 	and.w	r3, r3, #8
 800646e:	2b00      	cmp	r3, #0
 8006470:	d009      	beq.n	8006486 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006472:	4b12      	ldr	r3, [pc, #72]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	00db      	lsls	r3, r3, #3
 8006480:	490e      	ldr	r1, [pc, #56]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 8006482:	4313      	orrs	r3, r2
 8006484:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006486:	f000 f821 	bl	80064cc <HAL_RCC_GetSysClockFreq>
 800648a:	4601      	mov	r1, r0
 800648c:	4b0b      	ldr	r3, [pc, #44]	; (80064bc <HAL_RCC_ClockConfig+0x1c4>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	091b      	lsrs	r3, r3, #4
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	4a0a      	ldr	r2, [pc, #40]	; (80064c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006498:	5cd3      	ldrb	r3, [r2, r3]
 800649a:	fa21 f303 	lsr.w	r3, r1, r3
 800649e:	4a09      	ldr	r2, [pc, #36]	; (80064c4 <HAL_RCC_ClockConfig+0x1cc>)
 80064a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80064a2:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <HAL_RCC_ClockConfig+0x1d0>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fb fd62 	bl	8001f70 <HAL_InitTick>

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	40022000 	.word	0x40022000
 80064bc:	40021000 	.word	0x40021000
 80064c0:	0800b95c 	.word	0x0800b95c
 80064c4:	20000024 	.word	0x20000024
 80064c8:	20000028 	.word	0x20000028

080064cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064cc:	b490      	push	{r4, r7}
 80064ce:	b08a      	sub	sp, #40	; 0x28
 80064d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80064d2:	4b2a      	ldr	r3, [pc, #168]	; (800657c <HAL_RCC_GetSysClockFreq+0xb0>)
 80064d4:	1d3c      	adds	r4, r7, #4
 80064d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80064dc:	4b28      	ldr	r3, [pc, #160]	; (8006580 <HAL_RCC_GetSysClockFreq+0xb4>)
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
 80064e6:	2300      	movs	r3, #0
 80064e8:	61bb      	str	r3, [r7, #24]
 80064ea:	2300      	movs	r3, #0
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
 80064ee:	2300      	movs	r3, #0
 80064f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80064f6:	4b23      	ldr	r3, [pc, #140]	; (8006584 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f003 030c 	and.w	r3, r3, #12
 8006502:	2b04      	cmp	r3, #4
 8006504:	d002      	beq.n	800650c <HAL_RCC_GetSysClockFreq+0x40>
 8006506:	2b08      	cmp	r3, #8
 8006508:	d003      	beq.n	8006512 <HAL_RCC_GetSysClockFreq+0x46>
 800650a:	e02d      	b.n	8006568 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800650c:	4b1e      	ldr	r3, [pc, #120]	; (8006588 <HAL_RCC_GetSysClockFreq+0xbc>)
 800650e:	623b      	str	r3, [r7, #32]
      break;
 8006510:	e02d      	b.n	800656e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	0c9b      	lsrs	r3, r3, #18
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800651e:	4413      	add	r3, r2
 8006520:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006524:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d013      	beq.n	8006558 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006530:	4b14      	ldr	r3, [pc, #80]	; (8006584 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	0c5b      	lsrs	r3, r3, #17
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800653e:	4413      	add	r3, r2
 8006540:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006544:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	4a0f      	ldr	r2, [pc, #60]	; (8006588 <HAL_RCC_GetSysClockFreq+0xbc>)
 800654a:	fb02 f203 	mul.w	r2, r2, r3
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	fbb2 f3f3 	udiv	r3, r2, r3
 8006554:	627b      	str	r3, [r7, #36]	; 0x24
 8006556:	e004      	b.n	8006562 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	4a0c      	ldr	r2, [pc, #48]	; (800658c <HAL_RCC_GetSysClockFreq+0xc0>)
 800655c:	fb02 f303 	mul.w	r3, r2, r3
 8006560:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	623b      	str	r3, [r7, #32]
      break;
 8006566:	e002      	b.n	800656e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006568:	4b07      	ldr	r3, [pc, #28]	; (8006588 <HAL_RCC_GetSysClockFreq+0xbc>)
 800656a:	623b      	str	r3, [r7, #32]
      break;
 800656c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800656e:	6a3b      	ldr	r3, [r7, #32]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3728      	adds	r7, #40	; 0x28
 8006574:	46bd      	mov	sp, r7
 8006576:	bc90      	pop	{r4, r7}
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	0800b900 	.word	0x0800b900
 8006580:	0800b910 	.word	0x0800b910
 8006584:	40021000 	.word	0x40021000
 8006588:	007a1200 	.word	0x007a1200
 800658c:	003d0900 	.word	0x003d0900

08006590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006594:	4b02      	ldr	r3, [pc, #8]	; (80065a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006596:	681b      	ldr	r3, [r3, #0]
}
 8006598:	4618      	mov	r0, r3
 800659a:	46bd      	mov	sp, r7
 800659c:	bc80      	pop	{r7}
 800659e:	4770      	bx	lr
 80065a0:	20000024 	.word	0x20000024

080065a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065a8:	f7ff fff2 	bl	8006590 <HAL_RCC_GetHCLKFreq>
 80065ac:	4601      	mov	r1, r0
 80065ae:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	0a1b      	lsrs	r3, r3, #8
 80065b4:	f003 0307 	and.w	r3, r3, #7
 80065b8:	4a03      	ldr	r2, [pc, #12]	; (80065c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065ba:	5cd3      	ldrb	r3, [r2, r3]
 80065bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	40021000 	.word	0x40021000
 80065c8:	0800b96c 	.word	0x0800b96c

080065cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80065d4:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <RCC_Delay+0x34>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a0a      	ldr	r2, [pc, #40]	; (8006604 <RCC_Delay+0x38>)
 80065da:	fba2 2303 	umull	r2, r3, r2, r3
 80065de:	0a5b      	lsrs	r3, r3, #9
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	fb02 f303 	mul.w	r3, r2, r3
 80065e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80065e8:	bf00      	nop
  }
  while (Delay --);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	1e5a      	subs	r2, r3, #1
 80065ee:	60fa      	str	r2, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1f9      	bne.n	80065e8 <RCC_Delay+0x1c>
}
 80065f4:	bf00      	nop
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bc80      	pop	{r7}
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	20000024 	.word	0x20000024
 8006604:	10624dd3 	.word	0x10624dd3

08006608 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	2300      	movs	r3, #0
 8006616:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d07d      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006624:	2300      	movs	r3, #0
 8006626:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006628:	4b4f      	ldr	r3, [pc, #316]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10d      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006634:	4b4c      	ldr	r3, [pc, #304]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	4a4b      	ldr	r2, [pc, #300]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800663a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663e:	61d3      	str	r3, [r2, #28]
 8006640:	4b49      	ldr	r3, [pc, #292]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800664c:	2301      	movs	r3, #1
 800664e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006650:	4b46      	ldr	r3, [pc, #280]	; (800676c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006658:	2b00      	cmp	r3, #0
 800665a:	d118      	bne.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800665c:	4b43      	ldr	r3, [pc, #268]	; (800676c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a42      	ldr	r2, [pc, #264]	; (800676c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006666:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006668:	f7fb fcc4 	bl	8001ff4 <HAL_GetTick>
 800666c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666e:	e008      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006670:	f7fb fcc0 	bl	8001ff4 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b64      	cmp	r3, #100	; 0x64
 800667c:	d901      	bls.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e06d      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006682:	4b3a      	ldr	r3, [pc, #232]	; (800676c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0f0      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800668e:	4b36      	ldr	r3, [pc, #216]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006696:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d02e      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d027      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066ac:	4b2e      	ldr	r3, [pc, #184]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066b6:	4b2e      	ldr	r3, [pc, #184]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066bc:	4b2c      	ldr	r3, [pc, #176]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80066c2:	4a29      	ldr	r2, [pc, #164]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d014      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066d2:	f7fb fc8f 	bl	8001ff4 <HAL_GetTick>
 80066d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d8:	e00a      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066da:	f7fb fc8b 	bl	8001ff4 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d901      	bls.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e036      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f0:	4b1d      	ldr	r3, [pc, #116]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d0ee      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066fc:	4b1a      	ldr	r3, [pc, #104]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	4917      	ldr	r1, [pc, #92]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800670a:	4313      	orrs	r3, r2
 800670c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800670e:	7dfb      	ldrb	r3, [r7, #23]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d105      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006714:	4b14      	ldr	r3, [pc, #80]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	4a13      	ldr	r2, [pc, #76]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800671a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800671e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d008      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800672c:	4b0e      	ldr	r3, [pc, #56]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	490b      	ldr	r1, [pc, #44]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800673a:	4313      	orrs	r3, r2
 800673c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0310 	and.w	r3, r3, #16
 8006746:	2b00      	cmp	r3, #0
 8006748:	d008      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800674a:	4b07      	ldr	r3, [pc, #28]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	4904      	ldr	r1, [pc, #16]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006758:	4313      	orrs	r3, r2
 800675a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	40021000 	.word	0x40021000
 800676c:	40007000 	.word	0x40007000
 8006770:	42420440 	.word	0x42420440

08006774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e041      	b.n	800680a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7fb f93c 	bl	8001a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3304      	adds	r3, #4
 80067b0:	4619      	mov	r1, r3
 80067b2:	4610      	mov	r0, r2
 80067b4:	f000 fa1a 	bl	8006bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b02      	cmp	r3, #2
 8006826:	d122      	bne.n	800686e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b02      	cmp	r3, #2
 8006834:	d11b      	bne.n	800686e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f06f 0202 	mvn.w	r2, #2
 800683e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	f003 0303 	and.w	r3, r3, #3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d003      	beq.n	800685c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f9ad 	bl	8006bb4 <HAL_TIM_IC_CaptureCallback>
 800685a:	e005      	b.n	8006868 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f9a0 	bl	8006ba2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f9af 	bl	8006bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b04      	cmp	r3, #4
 800687a:	d122      	bne.n	80068c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f003 0304 	and.w	r3, r3, #4
 8006886:	2b04      	cmp	r3, #4
 8006888:	d11b      	bne.n	80068c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f06f 0204 	mvn.w	r2, #4
 8006892:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f983 	bl	8006bb4 <HAL_TIM_IC_CaptureCallback>
 80068ae:	e005      	b.n	80068bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f976 	bl	8006ba2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f985 	bl	8006bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	f003 0308 	and.w	r3, r3, #8
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d122      	bne.n	8006916 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f003 0308 	and.w	r3, r3, #8
 80068da:	2b08      	cmp	r3, #8
 80068dc:	d11b      	bne.n	8006916 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f06f 0208 	mvn.w	r2, #8
 80068e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2204      	movs	r2, #4
 80068ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	f003 0303 	and.w	r3, r3, #3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f959 	bl	8006bb4 <HAL_TIM_IC_CaptureCallback>
 8006902:	e005      	b.n	8006910 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f94c 	bl	8006ba2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f95b 	bl	8006bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	f003 0310 	and.w	r3, r3, #16
 8006920:	2b10      	cmp	r3, #16
 8006922:	d122      	bne.n	800696a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f003 0310 	and.w	r3, r3, #16
 800692e:	2b10      	cmp	r3, #16
 8006930:	d11b      	bne.n	800696a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f06f 0210 	mvn.w	r2, #16
 800693a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2208      	movs	r2, #8
 8006940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f92f 	bl	8006bb4 <HAL_TIM_IC_CaptureCallback>
 8006956:	e005      	b.n	8006964 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f922 	bl	8006ba2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f931 	bl	8006bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b01      	cmp	r3, #1
 8006976:	d10e      	bne.n	8006996 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b01      	cmp	r3, #1
 8006984:	d107      	bne.n	8006996 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f06f 0201 	mvn.w	r2, #1
 800698e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f8fd 	bl	8006b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a0:	2b80      	cmp	r3, #128	; 0x80
 80069a2:	d10e      	bne.n	80069c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ae:	2b80      	cmp	r3, #128	; 0x80
 80069b0:	d107      	bne.n	80069c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fa74 	bl	8006eaa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069cc:	2b40      	cmp	r3, #64	; 0x40
 80069ce:	d10e      	bne.n	80069ee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d107      	bne.n	80069ee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f8f5 	bl	8006bd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	f003 0320 	and.w	r3, r3, #32
 80069f8:	2b20      	cmp	r3, #32
 80069fa:	d10e      	bne.n	8006a1a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d107      	bne.n	8006a1a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f06f 0220 	mvn.w	r2, #32
 8006a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fa3f 	bl	8006e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a1a:	bf00      	nop
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b084      	sub	sp, #16
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <HAL_TIM_ConfigClockSource+0x18>
 8006a36:	2302      	movs	r3, #2
 8006a38:	e0a6      	b.n	8006b88 <HAL_TIM_ConfigClockSource+0x166>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2202      	movs	r2, #2
 8006a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a58:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a60:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b40      	cmp	r3, #64	; 0x40
 8006a70:	d067      	beq.n	8006b42 <HAL_TIM_ConfigClockSource+0x120>
 8006a72:	2b40      	cmp	r3, #64	; 0x40
 8006a74:	d80b      	bhi.n	8006a8e <HAL_TIM_ConfigClockSource+0x6c>
 8006a76:	2b10      	cmp	r3, #16
 8006a78:	d073      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0x140>
 8006a7a:	2b10      	cmp	r3, #16
 8006a7c:	d802      	bhi.n	8006a84 <HAL_TIM_ConfigClockSource+0x62>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d06f      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006a82:	e078      	b.n	8006b76 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	d06c      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0x140>
 8006a88:	2b30      	cmp	r3, #48	; 0x30
 8006a8a:	d06a      	beq.n	8006b62 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006a8c:	e073      	b.n	8006b76 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006a8e:	2b70      	cmp	r3, #112	; 0x70
 8006a90:	d00d      	beq.n	8006aae <HAL_TIM_ConfigClockSource+0x8c>
 8006a92:	2b70      	cmp	r3, #112	; 0x70
 8006a94:	d804      	bhi.n	8006aa0 <HAL_TIM_ConfigClockSource+0x7e>
 8006a96:	2b50      	cmp	r3, #80	; 0x50
 8006a98:	d033      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0xe0>
 8006a9a:	2b60      	cmp	r3, #96	; 0x60
 8006a9c:	d041      	beq.n	8006b22 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006a9e:	e06a      	b.n	8006b76 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa4:	d066      	beq.n	8006b74 <HAL_TIM_ConfigClockSource+0x152>
 8006aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aaa:	d017      	beq.n	8006adc <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006aac:	e063      	b.n	8006b76 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	6899      	ldr	r1, [r3, #8]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	f000 f96e 	bl	8006d9e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ad0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	609a      	str	r2, [r3, #8]
      break;
 8006ada:	e04c      	b.n	8006b76 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6818      	ldr	r0, [r3, #0]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	6899      	ldr	r1, [r3, #8]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f000 f957 	bl	8006d9e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006afe:	609a      	str	r2, [r3, #8]
      break;
 8006b00:	e039      	b.n	8006b76 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6818      	ldr	r0, [r3, #0]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	6859      	ldr	r1, [r3, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f000 f8ce 	bl	8006cb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2150      	movs	r1, #80	; 0x50
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 f925 	bl	8006d6a <TIM_ITRx_SetConfig>
      break;
 8006b20:	e029      	b.n	8006b76 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6818      	ldr	r0, [r3, #0]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	6859      	ldr	r1, [r3, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f000 f8ec 	bl	8006d0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2160      	movs	r1, #96	; 0x60
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 f915 	bl	8006d6a <TIM_ITRx_SetConfig>
      break;
 8006b40:	e019      	b.n	8006b76 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6818      	ldr	r0, [r3, #0]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	6859      	ldr	r1, [r3, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f000 f8ae 	bl	8006cb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2140      	movs	r1, #64	; 0x40
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 f905 	bl	8006d6a <TIM_ITRx_SetConfig>
      break;
 8006b60:	e009      	b.n	8006b76 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	f000 f8fc 	bl	8006d6a <TIM_ITRx_SetConfig>
        break;
 8006b72:	e000      	b.n	8006b76 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006b74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	4770      	bx	lr

08006ba2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bc80      	pop	{r7}
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bc80      	pop	{r7}
 8006bc4:	4770      	bx	lr

08006bc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bce:	bf00      	nop
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bc80      	pop	{r7}
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bc80      	pop	{r7}
 8006be8:	4770      	bx	lr
	...

08006bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a29      	ldr	r2, [pc, #164]	; (8006ca4 <TIM_Base_SetConfig+0xb8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d00b      	beq.n	8006c1c <TIM_Base_SetConfig+0x30>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0a:	d007      	beq.n	8006c1c <TIM_Base_SetConfig+0x30>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a26      	ldr	r2, [pc, #152]	; (8006ca8 <TIM_Base_SetConfig+0xbc>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d003      	beq.n	8006c1c <TIM_Base_SetConfig+0x30>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a25      	ldr	r2, [pc, #148]	; (8006cac <TIM_Base_SetConfig+0xc0>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d108      	bne.n	8006c2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a1c      	ldr	r2, [pc, #112]	; (8006ca4 <TIM_Base_SetConfig+0xb8>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d00b      	beq.n	8006c4e <TIM_Base_SetConfig+0x62>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3c:	d007      	beq.n	8006c4e <TIM_Base_SetConfig+0x62>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a19      	ldr	r2, [pc, #100]	; (8006ca8 <TIM_Base_SetConfig+0xbc>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d003      	beq.n	8006c4e <TIM_Base_SetConfig+0x62>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a18      	ldr	r2, [pc, #96]	; (8006cac <TIM_Base_SetConfig+0xc0>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d108      	bne.n	8006c60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a07      	ldr	r2, [pc, #28]	; (8006ca4 <TIM_Base_SetConfig+0xb8>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d103      	bne.n	8006c94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	691a      	ldr	r2, [r3, #16]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	615a      	str	r2, [r3, #20]
}
 8006c9a:	bf00      	nop
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bc80      	pop	{r7}
 8006ca2:	4770      	bx	lr
 8006ca4:	40012c00 	.word	0x40012c00
 8006ca8:	40000400 	.word	0x40000400
 8006cac:	40000800 	.word	0x40000800

08006cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	f023 0201 	bic.w	r2, r3, #1
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f023 030a 	bic.w	r3, r3, #10
 8006cec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	621a      	str	r2, [r3, #32]
}
 8006d02:	bf00      	nop
 8006d04:	371c      	adds	r7, #28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bc80      	pop	{r7}
 8006d0a:	4770      	bx	lr

08006d0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	f023 0210 	bic.w	r2, r3, #16
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	031b      	lsls	r3, r3, #12
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	621a      	str	r2, [r3, #32]
}
 8006d60:	bf00      	nop
 8006d62:	371c      	adds	r7, #28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bc80      	pop	{r7}
 8006d68:	4770      	bx	lr

08006d6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b085      	sub	sp, #20
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	f043 0307 	orr.w	r3, r3, #7
 8006d8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	609a      	str	r2, [r3, #8]
}
 8006d94:	bf00      	nop
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bc80      	pop	{r7}
 8006d9c:	4770      	bx	lr

08006d9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b087      	sub	sp, #28
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	60f8      	str	r0, [r7, #12]
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	607a      	str	r2, [r7, #4]
 8006daa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006db8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	021a      	lsls	r2, r3, #8
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	609a      	str	r2, [r3, #8]
}
 8006dd2:	bf00      	nop
 8006dd4:	371c      	adds	r7, #28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d101      	bne.n	8006df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006df0:	2302      	movs	r3, #2
 8006df2:	e046      	b.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a16      	ldr	r2, [pc, #88]	; (8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00e      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e40:	d009      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a12      	ldr	r2, [pc, #72]	; (8006e90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d004      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a10      	ldr	r2, [pc, #64]	; (8006e94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d10c      	bne.n	8006e70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bc80      	pop	{r7}
 8006e8a:	4770      	bx	lr
 8006e8c:	40012c00 	.word	0x40012c00
 8006e90:	40000400 	.word	0x40000400
 8006e94:	40000800 	.word	0x40000800

08006e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bc80      	pop	{r7}
 8006ea8:	4770      	bx	lr

08006eaa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006eb2:	bf00      	nop
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr

08006ebc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	b480      	push	{r7}
 8006ec0:	b083      	sub	sp, #12
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	f107 0014 	add.w	r0, r7, #20
 8006eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bc80      	pop	{r7}
 8006ed8:	b004      	add	sp, #16
 8006eda:	4770      	bx	lr

08006edc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006eec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006ef0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bc80      	pop	{r7}
 8006f06:	4770      	bx	lr

08006f08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006f10:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006f14:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	43db      	mvns	r3, r3
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	4013      	ands	r3, r2
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bc80      	pop	{r7}
 8006f3a:	4770      	bx	lr

08006f3c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bc80      	pop	{r7}
 8006f52:	4770      	bx	lr

08006f54 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006f54:	b084      	sub	sp, #16
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	f107 0014 	add.w	r0, r7, #20
 8006f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bc80      	pop	{r7}
 8006f90:	b004      	add	sp, #16
 8006f92:	4770      	bx	lr

08006f94 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b09b      	sub	sp, #108	; 0x6c
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	78db      	ldrb	r3, [r3, #3]
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d81f      	bhi.n	8007006 <USB_ActivateEndpoint+0x72>
 8006fc6:	a201      	add	r2, pc, #4	; (adr r2, 8006fcc <USB_ActivateEndpoint+0x38>)
 8006fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fcc:	08006fdd 	.word	0x08006fdd
 8006fd0:	08006ff9 	.word	0x08006ff9
 8006fd4:	0800700f 	.word	0x0800700f
 8006fd8:	08006feb 	.word	0x08006feb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006fdc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006fe0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fe4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006fe8:	e012      	b.n	8007010 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006fea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006fee:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006ff2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006ff6:	e00b      	b.n	8007010 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006ff8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006ffc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007000:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007004:	e004      	b.n	8007010 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800700c:	e000      	b.n	8007010 <USB_ActivateEndpoint+0x7c>
      break;
 800700e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	441a      	add	r2, r3
 800701a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800701e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800702a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800702e:	b29b      	uxth	r3, r3
 8007030:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	b29b      	uxth	r3, r3
 8007040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007048:	b29a      	uxth	r2, r3
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	b29b      	uxth	r3, r3
 8007050:	4313      	orrs	r3, r2
 8007052:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	441a      	add	r2, r3
 8007060:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800706c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007074:	b29b      	uxth	r3, r3
 8007076:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	7b1b      	ldrb	r3, [r3, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	f040 8149 	bne.w	8007314 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	785b      	ldrb	r3, [r3, #1]
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 8084 	beq.w	8007194 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	617b      	str	r3, [r7, #20]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007096:	b29b      	uxth	r3, r3
 8007098:	461a      	mov	r2, r3
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	4413      	add	r3, r2
 800709e:	617b      	str	r3, [r7, #20]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	011a      	lsls	r2, r3, #4
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070ae:	613b      	str	r3, [r7, #16]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	88db      	ldrh	r3, [r3, #6]
 80070b4:	085b      	lsrs	r3, r3, #1
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	005b      	lsls	r3, r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	81fb      	strh	r3, [r7, #14]
 80070ce:	89fb      	ldrh	r3, [r7, #14]
 80070d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d01b      	beq.n	8007110 <USB_ActivateEndpoint+0x17c>
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ee:	81bb      	strh	r3, [r7, #12]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	441a      	add	r2, r3
 80070fa:	89bb      	ldrh	r3, [r7, #12]
 80070fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007108:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800710c:	b29b      	uxth	r3, r3
 800710e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	78db      	ldrb	r3, [r3, #3]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d020      	beq.n	800715a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	b29b      	uxth	r3, r3
 8007126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800712a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800712e:	813b      	strh	r3, [r7, #8]
 8007130:	893b      	ldrh	r3, [r7, #8]
 8007132:	f083 0320 	eor.w	r3, r3, #32
 8007136:	813b      	strh	r3, [r7, #8]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	441a      	add	r2, r3
 8007142:	893b      	ldrh	r3, [r7, #8]
 8007144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800714c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007154:	b29b      	uxth	r3, r3
 8007156:	8013      	strh	r3, [r2, #0]
 8007158:	e27f      	b.n	800765a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	b29b      	uxth	r3, r3
 8007168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800716c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007170:	817b      	strh	r3, [r7, #10]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	441a      	add	r2, r3
 800717c:	897b      	ldrh	r3, [r7, #10]
 800717e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800718a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800718e:	b29b      	uxth	r3, r3
 8007190:	8013      	strh	r3, [r2, #0]
 8007192:	e262      	b.n	800765a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800719e:	b29b      	uxth	r3, r3
 80071a0:	461a      	mov	r2, r3
 80071a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a4:	4413      	add	r3, r2
 80071a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	011a      	lsls	r2, r3, #4
 80071ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80071b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	88db      	ldrh	r3, [r3, #6]
 80071bc:	085b      	lsrs	r3, r3, #1
 80071be:	b29b      	uxth	r3, r3
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	627b      	str	r3, [r7, #36]	; 0x24
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	461a      	mov	r2, r3
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	4413      	add	r3, r2
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	011a      	lsls	r2, r3, #4
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	4413      	add	r3, r2
 80071e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071ea:	623b      	str	r3, [r7, #32]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d112      	bne.n	800721a <USB_ActivateEndpoint+0x286>
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071fe:	b29a      	uxth	r2, r3
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	801a      	strh	r2, [r3, #0]
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	b29b      	uxth	r3, r3
 800720a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800720e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007212:	b29a      	uxth	r2, r3
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	801a      	strh	r2, [r3, #0]
 8007218:	e02f      	b.n	800727a <USB_ActivateEndpoint+0x2e6>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	2b3e      	cmp	r3, #62	; 0x3e
 8007220:	d813      	bhi.n	800724a <USB_ActivateEndpoint+0x2b6>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	085b      	lsrs	r3, r3, #1
 8007228:	663b      	str	r3, [r7, #96]	; 0x60
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <USB_ActivateEndpoint+0x2a8>
 8007236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007238:	3301      	adds	r3, #1
 800723a:	663b      	str	r3, [r7, #96]	; 0x60
 800723c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800723e:	b29b      	uxth	r3, r3
 8007240:	029b      	lsls	r3, r3, #10
 8007242:	b29a      	uxth	r2, r3
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	801a      	strh	r2, [r3, #0]
 8007248:	e017      	b.n	800727a <USB_ActivateEndpoint+0x2e6>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	095b      	lsrs	r3, r3, #5
 8007250:	663b      	str	r3, [r7, #96]	; 0x60
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f003 031f 	and.w	r3, r3, #31
 800725a:	2b00      	cmp	r3, #0
 800725c:	d102      	bne.n	8007264 <USB_ActivateEndpoint+0x2d0>
 800725e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007260:	3b01      	subs	r3, #1
 8007262:	663b      	str	r3, [r7, #96]	; 0x60
 8007264:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007266:	b29b      	uxth	r3, r3
 8007268:	029b      	lsls	r3, r3, #10
 800726a:	b29b      	uxth	r3, r3
 800726c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007274:	b29a      	uxth	r2, r3
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	83fb      	strh	r3, [r7, #30]
 8007288:	8bfb      	ldrh	r3, [r7, #30]
 800728a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d01b      	beq.n	80072ca <USB_ActivateEndpoint+0x336>
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	b29b      	uxth	r3, r3
 80072a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a8:	83bb      	strh	r3, [r7, #28]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	441a      	add	r2, r3
 80072b4:	8bbb      	ldrh	r3, [r7, #28]
 80072b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e0:	837b      	strh	r3, [r7, #26]
 80072e2:	8b7b      	ldrh	r3, [r7, #26]
 80072e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80072e8:	837b      	strh	r3, [r7, #26]
 80072ea:	8b7b      	ldrh	r3, [r7, #26]
 80072ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80072f0:	837b      	strh	r3, [r7, #26]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	441a      	add	r2, r3
 80072fc:	8b7b      	ldrh	r3, [r7, #26]
 80072fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800730a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730e:	b29b      	uxth	r3, r3
 8007310:	8013      	strh	r3, [r2, #0]
 8007312:	e1a2      	b.n	800765a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4413      	add	r3, r2
 800731e:	881b      	ldrh	r3, [r3, #0]
 8007320:	b29b      	uxth	r3, r3
 8007322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	441a      	add	r2, r3
 8007338:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800733c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007344:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800734c:	b29b      	uxth	r3, r3
 800734e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	65bb      	str	r3, [r7, #88]	; 0x58
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800735a:	b29b      	uxth	r3, r3
 800735c:	461a      	mov	r2, r3
 800735e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007360:	4413      	add	r3, r2
 8007362:	65bb      	str	r3, [r7, #88]	; 0x58
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	011a      	lsls	r2, r3, #4
 800736a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800736c:	4413      	add	r3, r2
 800736e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007372:	657b      	str	r3, [r7, #84]	; 0x54
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	891b      	ldrh	r3, [r3, #8]
 8007378:	085b      	lsrs	r3, r3, #1
 800737a:	b29b      	uxth	r3, r3
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007382:	801a      	strh	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	653b      	str	r3, [r7, #80]	; 0x50
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800738e:	b29b      	uxth	r3, r3
 8007390:	461a      	mov	r2, r3
 8007392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007394:	4413      	add	r3, r2
 8007396:	653b      	str	r3, [r7, #80]	; 0x50
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	011a      	lsls	r2, r3, #4
 800739e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80073a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	895b      	ldrh	r3, [r3, #10]
 80073ac:	085b      	lsrs	r3, r3, #1
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	785b      	ldrb	r3, [r3, #1]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f040 8091 	bne.w	80074e4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80073d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80073d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d01b      	beq.n	8007412 <USB_ActivateEndpoint+0x47e>
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	441a      	add	r2, r3
 80073fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80073fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007406:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800740a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800740e:	b29b      	uxth	r3, r3
 8007410:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	873b      	strh	r3, [r7, #56]	; 0x38
 8007420:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007426:	2b00      	cmp	r3, #0
 8007428:	d01b      	beq.n	8007462 <USB_ActivateEndpoint+0x4ce>
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800743c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007440:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	441a      	add	r2, r3
 800744c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800744e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800745a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800745e:	b29b      	uxth	r3, r3
 8007460:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	b29b      	uxth	r3, r3
 8007470:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007478:	86bb      	strh	r3, [r7, #52]	; 0x34
 800747a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800747c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007480:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007482:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007484:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007488:	86bb      	strh	r3, [r7, #52]	; 0x34
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	441a      	add	r2, r3
 8007494:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800749a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800749e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074c0:	867b      	strh	r3, [r7, #50]	; 0x32
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	441a      	add	r2, r3
 80074cc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80074ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074de:	b29b      	uxth	r3, r3
 80074e0:	8013      	strh	r3, [r2, #0]
 80074e2:	e0ba      	b.n	800765a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	881b      	ldrh	r3, [r3, #0]
 80074f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80074f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80074f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d01d      	beq.n	800753c <USB_ActivateEndpoint+0x5a8>
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29b      	uxth	r3, r3
 800750e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007516:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	441a      	add	r2, r3
 8007524:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800752c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007530:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007538:	b29b      	uxth	r3, r3
 800753a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800754c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007554:	2b00      	cmp	r3, #0
 8007556:	d01d      	beq.n	8007594 <USB_ActivateEndpoint+0x600>
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	b29b      	uxth	r3, r3
 8007566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800756a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800756e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	441a      	add	r2, r3
 800757c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800758c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007590:	b29b      	uxth	r3, r3
 8007592:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	78db      	ldrb	r3, [r3, #3]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d024      	beq.n	80075e6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80075b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80075ba:	f083 0320 	eor.w	r3, r3, #32
 80075be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	441a      	add	r2, r3
 80075cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80075d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	8013      	strh	r3, [r2, #0]
 80075e4:	e01d      	b.n	8007622 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	441a      	add	r2, r3
 800760a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800760e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800761a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800761e:	b29b      	uxth	r3, r3
 8007620:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	b29b      	uxth	r3, r3
 8007630:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007638:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	441a      	add	r2, r3
 8007644:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800764a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800764e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007656:	b29b      	uxth	r3, r3
 8007658:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800765a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800765e:	4618      	mov	r0, r3
 8007660:	376c      	adds	r7, #108	; 0x6c
 8007662:	46bd      	mov	sp, r7
 8007664:	bc80      	pop	{r7}
 8007666:	4770      	bx	lr

08007668 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007668:	b480      	push	{r7}
 800766a:	b08d      	sub	sp, #52	; 0x34
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	7b1b      	ldrb	r3, [r3, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	f040 808e 	bne.w	8007798 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	785b      	ldrb	r3, [r3, #1]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d044      	beq.n	800770e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	81bb      	strh	r3, [r7, #12]
 8007692:	89bb      	ldrh	r3, [r7, #12]
 8007694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01b      	beq.n	80076d4 <USB_DeactivateEndpoint+0x6c>
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b2:	817b      	strh	r3, [r7, #10]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	441a      	add	r2, r3
 80076be:	897b      	ldrh	r3, [r7, #10]
 80076c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ea:	813b      	strh	r3, [r7, #8]
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	441a      	add	r2, r3
 80076f6:	893b      	ldrh	r3, [r7, #8]
 80076f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007708:	b29b      	uxth	r3, r3
 800770a:	8013      	strh	r3, [r2, #0]
 800770c:	e192      	b.n	8007a34 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	827b      	strh	r3, [r7, #18]
 800771c:	8a7b      	ldrh	r3, [r7, #18]
 800771e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d01b      	beq.n	800775e <USB_DeactivateEndpoint+0xf6>
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	b29b      	uxth	r3, r3
 8007734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773c:	823b      	strh	r3, [r7, #16]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	441a      	add	r2, r3
 8007748:	8a3b      	ldrh	r3, [r7, #16]
 800774a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800774e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800775a:	b29b      	uxth	r3, r3
 800775c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	b29b      	uxth	r3, r3
 800776c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007774:	81fb      	strh	r3, [r7, #14]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	441a      	add	r2, r3
 8007780:	89fb      	ldrh	r3, [r7, #14]
 8007782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800778e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007792:	b29b      	uxth	r3, r3
 8007794:	8013      	strh	r3, [r2, #0]
 8007796:	e14d      	b.n	8007a34 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	785b      	ldrb	r3, [r3, #1]
 800779c:	2b00      	cmp	r3, #0
 800779e:	f040 80a5 	bne.w	80078ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	843b      	strh	r3, [r7, #32]
 80077b0:	8c3b      	ldrh	r3, [r7, #32]
 80077b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d01b      	beq.n	80077f2 <USB_DeactivateEndpoint+0x18a>
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d0:	83fb      	strh	r3, [r7, #30]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	441a      	add	r2, r3
 80077dc:	8bfb      	ldrh	r3, [r7, #30]
 80077de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	83bb      	strh	r3, [r7, #28]
 8007800:	8bbb      	ldrh	r3, [r7, #28]
 8007802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007806:	2b00      	cmp	r3, #0
 8007808:	d01b      	beq.n	8007842 <USB_DeactivateEndpoint+0x1da>
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	b29b      	uxth	r3, r3
 8007818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800781c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007820:	837b      	strh	r3, [r7, #26]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	441a      	add	r2, r3
 800782c:	8b7b      	ldrh	r3, [r7, #26]
 800782e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800783a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800783e:	b29b      	uxth	r3, r3
 8007840:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	4413      	add	r3, r2
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	b29b      	uxth	r3, r3
 8007850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007858:	833b      	strh	r3, [r7, #24]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	441a      	add	r2, r3
 8007864:	8b3b      	ldrh	r3, [r7, #24]
 8007866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800786a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800786e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007872:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007876:	b29b      	uxth	r3, r3
 8007878:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	b29b      	uxth	r3, r3
 8007888:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800788c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007890:	82fb      	strh	r3, [r7, #22]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	441a      	add	r2, r3
 800789c:	8afb      	ldrh	r3, [r7, #22]
 800789e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c8:	82bb      	strh	r3, [r7, #20]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	441a      	add	r2, r3
 80078d4:	8abb      	ldrh	r3, [r7, #20]
 80078d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	8013      	strh	r3, [r2, #0]
 80078ea:	e0a3      	b.n	8007a34 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	881b      	ldrh	r3, [r3, #0]
 80078f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80078fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80078fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d01b      	beq.n	800793c <USB_DeactivateEndpoint+0x2d4>
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	b29b      	uxth	r3, r3
 8007912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800791a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	441a      	add	r2, r3
 8007926:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800792c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007930:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007938:	b29b      	uxth	r3, r3
 800793a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	881b      	ldrh	r3, [r3, #0]
 8007948:	857b      	strh	r3, [r7, #42]	; 0x2a
 800794a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800794c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007950:	2b00      	cmp	r3, #0
 8007952:	d01b      	beq.n	800798c <USB_DeactivateEndpoint+0x324>
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	b29b      	uxth	r3, r3
 8007962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796a:	853b      	strh	r3, [r7, #40]	; 0x28
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	441a      	add	r2, r3
 8007976:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800797c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007984:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007988:	b29b      	uxth	r3, r3
 800798a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	b29b      	uxth	r3, r3
 800799a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800799e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	441a      	add	r2, r3
 80079ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	441a      	add	r2, r3
 80079e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4413      	add	r3, r2
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a12:	847b      	strh	r3, [r7, #34]	; 0x22
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	441a      	add	r2, r3
 8007a1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3734      	adds	r7, #52	; 0x34
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bc80      	pop	{r7}
 8007a3e:	4770      	bx	lr

08007a40 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b0c4      	sub	sp, #272	; 0x110
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	1d3b      	adds	r3, r7, #4
 8007a48:	6018      	str	r0, [r3, #0]
 8007a4a:	463b      	mov	r3, r7
 8007a4c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a4e:	463b      	mov	r3, r7
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	785b      	ldrb	r3, [r3, #1]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	f040 8557 	bne.w	8008508 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007a5a:	463b      	mov	r3, r7
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	699a      	ldr	r2, [r3, #24]
 8007a60:	463b      	mov	r3, r7
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d905      	bls.n	8007a76 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007a6a:	463b      	mov	r3, r7
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007a74:	e004      	b.n	8007a80 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007a76:	463b      	mov	r3, r7
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007a80:	463b      	mov	r3, r7
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	7b1b      	ldrb	r3, [r3, #12]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d12c      	bne.n	8007ae4 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007a8a:	463b      	mov	r3, r7
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6959      	ldr	r1, [r3, #20]
 8007a90:	463b      	mov	r3, r7
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	88da      	ldrh	r2, [r3, #6]
 8007a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	1d38      	adds	r0, r7, #4
 8007a9e:	6800      	ldr	r0, [r0, #0]
 8007aa0:	f001 fa2c 	bl	8008efc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007aa4:	1d3b      	adds	r3, r7, #4
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	617b      	str	r3, [r7, #20]
 8007aaa:	1d3b      	adds	r3, r7, #4
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	4413      	add	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]
 8007abc:	463b      	mov	r3, r7
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	011a      	lsls	r2, r3, #4
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007acc:	f107 0310 	add.w	r3, r7, #16
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	f107 0310 	add.w	r3, r7, #16
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	801a      	strh	r2, [r3, #0]
 8007ae0:	f000 bcdd 	b.w	800849e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007ae4:	463b      	mov	r3, r7
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	78db      	ldrb	r3, [r3, #3]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	f040 8347 	bne.w	800817e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007af0:	463b      	mov	r3, r7
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6a1a      	ldr	r2, [r3, #32]
 8007af6:	463b      	mov	r3, r7
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	f240 82eb 	bls.w	80080d8 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007b02:	1d3b      	adds	r3, r7, #4
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	463b      	mov	r3, r7
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	881b      	ldrh	r3, [r3, #0]
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8007b20:	1d3b      	adds	r3, r7, #4
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	463b      	mov	r3, r7
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	441a      	add	r2, r3
 8007b2e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b3a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007b46:	463b      	mov	r3, r7
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6a1a      	ldr	r2, [r3, #32]
 8007b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b50:	1ad2      	subs	r2, r2, r3
 8007b52:	463b      	mov	r3, r7
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007b58:	1d3b      	adds	r3, r7, #4
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	463b      	mov	r3, r7
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f000 8159 	beq.w	8007e26 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b74:	1d3b      	adds	r3, r7, #4
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	637b      	str	r3, [r7, #52]	; 0x34
 8007b7a:	463b      	mov	r3, r7
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	785b      	ldrb	r3, [r3, #1]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d164      	bne.n	8007c4e <USB_EPStartXfer+0x20e>
 8007b84:	1d3b      	adds	r3, r7, #4
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b8a:	1d3b      	adds	r3, r7, #4
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	461a      	mov	r2, r3
 8007b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b98:	4413      	add	r3, r2
 8007b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b9c:	463b      	mov	r3, r7
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	011a      	lsls	r2, r3, #4
 8007ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d112      	bne.n	8007bdc <USB_EPStartXfer+0x19c>
 8007bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc4:	801a      	strh	r2, [r3, #0]
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd8:	801a      	strh	r2, [r3, #0]
 8007bda:	e054      	b.n	8007c86 <USB_EPStartXfer+0x246>
 8007bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007be0:	2b3e      	cmp	r3, #62	; 0x3e
 8007be2:	d817      	bhi.n	8007c14 <USB_EPStartXfer+0x1d4>
 8007be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007be8:	085b      	lsrs	r3, r3, #1
 8007bea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d004      	beq.n	8007c04 <USB_EPStartXfer+0x1c4>
 8007bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bfe:	3301      	adds	r3, #1
 8007c00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	029b      	lsls	r3, r3, #10
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c10:	801a      	strh	r2, [r3, #0]
 8007c12:	e038      	b.n	8007c86 <USB_EPStartXfer+0x246>
 8007c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c18:	095b      	lsrs	r3, r3, #5
 8007c1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c22:	f003 031f 	and.w	r3, r3, #31
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d104      	bne.n	8007c34 <USB_EPStartXfer+0x1f4>
 8007c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	029b      	lsls	r3, r3, #10
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	801a      	strh	r2, [r3, #0]
 8007c4c:	e01b      	b.n	8007c86 <USB_EPStartXfer+0x246>
 8007c4e:	463b      	mov	r3, r7
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	785b      	ldrb	r3, [r3, #1]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d116      	bne.n	8007c86 <USB_EPStartXfer+0x246>
 8007c58:	1d3b      	adds	r3, r7, #4
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	461a      	mov	r2, r3
 8007c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c66:	4413      	add	r3, r2
 8007c68:	637b      	str	r3, [r7, #52]	; 0x34
 8007c6a:	463b      	mov	r3, r7
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	011a      	lsls	r2, r3, #4
 8007c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c74:	4413      	add	r3, r2
 8007c76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c7a:	633b      	str	r3, [r7, #48]	; 0x30
 8007c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c86:	463b      	mov	r3, r7
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	895b      	ldrh	r3, [r3, #10]
 8007c8c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c90:	463b      	mov	r3, r7
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6959      	ldr	r1, [r3, #20]
 8007c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007ca0:	1d38      	adds	r0, r7, #4
 8007ca2:	6800      	ldr	r0, [r0, #0]
 8007ca4:	f001 f92a 	bl	8008efc <USB_WritePMA>
            ep->xfer_buff += len;
 8007ca8:	463b      	mov	r3, r7
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	695a      	ldr	r2, [r3, #20]
 8007cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cb2:	441a      	add	r2, r3
 8007cb4:	463b      	mov	r3, r7
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007cba:	463b      	mov	r3, r7
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	6a1a      	ldr	r2, [r3, #32]
 8007cc0:	463b      	mov	r3, r7
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d909      	bls.n	8007cde <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8007cca:	463b      	mov	r3, r7
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6a1a      	ldr	r2, [r3, #32]
 8007cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cd4:	1ad2      	subs	r2, r2, r3
 8007cd6:	463b      	mov	r3, r7
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	621a      	str	r2, [r3, #32]
 8007cdc:	e008      	b.n	8007cf0 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8007cde:	463b      	mov	r3, r7
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007ce8:	463b      	mov	r3, r7
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2200      	movs	r2, #0
 8007cee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007cf0:	463b      	mov	r3, r7
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	785b      	ldrb	r3, [r3, #1]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d164      	bne.n	8007dc4 <USB_EPStartXfer+0x384>
 8007cfa:	1d3b      	adds	r3, r7, #4
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	61fb      	str	r3, [r7, #28]
 8007d00:	1d3b      	adds	r3, r7, #4
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	4413      	add	r3, r2
 8007d10:	61fb      	str	r3, [r7, #28]
 8007d12:	463b      	mov	r3, r7
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	011a      	lsls	r2, r3, #4
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d22:	61bb      	str	r3, [r7, #24]
 8007d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d112      	bne.n	8007d52 <USB_EPStartXfer+0x312>
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	881b      	ldrh	r3, [r3, #0]
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	801a      	strh	r2, [r3, #0]
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	801a      	strh	r2, [r3, #0]
 8007d50:	e057      	b.n	8007e02 <USB_EPStartXfer+0x3c2>
 8007d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d56:	2b3e      	cmp	r3, #62	; 0x3e
 8007d58:	d817      	bhi.n	8007d8a <USB_EPStartXfer+0x34a>
 8007d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d5e:	085b      	lsrs	r3, r3, #1
 8007d60:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d004      	beq.n	8007d7a <USB_EPStartXfer+0x33a>
 8007d70:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d74:	3301      	adds	r3, #1
 8007d76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	029b      	lsls	r3, r3, #10
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	801a      	strh	r2, [r3, #0]
 8007d88:	e03b      	b.n	8007e02 <USB_EPStartXfer+0x3c2>
 8007d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d8e:	095b      	lsrs	r3, r3, #5
 8007d90:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d98:	f003 031f 	and.w	r3, r3, #31
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d104      	bne.n	8007daa <USB_EPStartXfer+0x36a>
 8007da0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007da4:	3b01      	subs	r3, #1
 8007da6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007daa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	029b      	lsls	r3, r3, #10
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	801a      	strh	r2, [r3, #0]
 8007dc2:	e01e      	b.n	8007e02 <USB_EPStartXfer+0x3c2>
 8007dc4:	463b      	mov	r3, r7
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	785b      	ldrb	r3, [r3, #1]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d119      	bne.n	8007e02 <USB_EPStartXfer+0x3c2>
 8007dce:	1d3b      	adds	r3, r7, #4
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd4:	1d3b      	adds	r3, r7, #4
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	461a      	mov	r2, r3
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	4413      	add	r3, r2
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
 8007de6:	463b      	mov	r3, r7
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	011a      	lsls	r2, r3, #4
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	4413      	add	r3, r2
 8007df2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007df6:	623b      	str	r3, [r7, #32]
 8007df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007e02:	463b      	mov	r3, r7
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	891b      	ldrh	r3, [r3, #8]
 8007e08:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e0c:	463b      	mov	r3, r7
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6959      	ldr	r1, [r3, #20]
 8007e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007e1c:	1d38      	adds	r0, r7, #4
 8007e1e:	6800      	ldr	r0, [r0, #0]
 8007e20:	f001 f86c 	bl	8008efc <USB_WritePMA>
 8007e24:	e33b      	b.n	800849e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e26:	463b      	mov	r3, r7
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	785b      	ldrb	r3, [r3, #1]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d164      	bne.n	8007efa <USB_EPStartXfer+0x4ba>
 8007e30:	1d3b      	adds	r3, r7, #4
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e36:	1d3b      	adds	r3, r7, #4
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	461a      	mov	r2, r3
 8007e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e44:	4413      	add	r3, r2
 8007e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e48:	463b      	mov	r3, r7
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	011a      	lsls	r2, r3, #4
 8007e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e52:	4413      	add	r3, r2
 8007e54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e58:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d112      	bne.n	8007e88 <USB_EPStartXfer+0x448>
 8007e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e70:	801a      	strh	r2, [r3, #0]
 8007e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e84:	801a      	strh	r2, [r3, #0]
 8007e86:	e057      	b.n	8007f38 <USB_EPStartXfer+0x4f8>
 8007e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e8c:	2b3e      	cmp	r3, #62	; 0x3e
 8007e8e:	d817      	bhi.n	8007ec0 <USB_EPStartXfer+0x480>
 8007e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e94:	085b      	lsrs	r3, r3, #1
 8007e96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d004      	beq.n	8007eb0 <USB_EPStartXfer+0x470>
 8007ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eaa:	3301      	adds	r3, #1
 8007eac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	029b      	lsls	r3, r3, #10
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ebc:	801a      	strh	r2, [r3, #0]
 8007ebe:	e03b      	b.n	8007f38 <USB_EPStartXfer+0x4f8>
 8007ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ec4:	095b      	lsrs	r3, r3, #5
 8007ec6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007eca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ece:	f003 031f 	and.w	r3, r3, #31
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d104      	bne.n	8007ee0 <USB_EPStartXfer+0x4a0>
 8007ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eda:	3b01      	subs	r3, #1
 8007edc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	029b      	lsls	r3, r3, #10
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ef6:	801a      	strh	r2, [r3, #0]
 8007ef8:	e01e      	b.n	8007f38 <USB_EPStartXfer+0x4f8>
 8007efa:	463b      	mov	r3, r7
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	785b      	ldrb	r3, [r3, #1]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d119      	bne.n	8007f38 <USB_EPStartXfer+0x4f8>
 8007f04:	1d3b      	adds	r3, r7, #4
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	657b      	str	r3, [r7, #84]	; 0x54
 8007f0a:	1d3b      	adds	r3, r7, #4
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	461a      	mov	r2, r3
 8007f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f18:	4413      	add	r3, r2
 8007f1a:	657b      	str	r3, [r7, #84]	; 0x54
 8007f1c:	463b      	mov	r3, r7
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	011a      	lsls	r2, r3, #4
 8007f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f26:	4413      	add	r3, r2
 8007f28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f2c:	653b      	str	r3, [r7, #80]	; 0x50
 8007f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007f38:	463b      	mov	r3, r7
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	891b      	ldrh	r3, [r3, #8]
 8007f3e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f42:	463b      	mov	r3, r7
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6959      	ldr	r1, [r3, #20]
 8007f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007f52:	1d38      	adds	r0, r7, #4
 8007f54:	6800      	ldr	r0, [r0, #0]
 8007f56:	f000 ffd1 	bl	8008efc <USB_WritePMA>
            ep->xfer_buff += len;
 8007f5a:	463b      	mov	r3, r7
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	695a      	ldr	r2, [r3, #20]
 8007f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f64:	441a      	add	r2, r3
 8007f66:	463b      	mov	r3, r7
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007f6c:	463b      	mov	r3, r7
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6a1a      	ldr	r2, [r3, #32]
 8007f72:	463b      	mov	r3, r7
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d909      	bls.n	8007f90 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8007f7c:	463b      	mov	r3, r7
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6a1a      	ldr	r2, [r3, #32]
 8007f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f86:	1ad2      	subs	r2, r2, r3
 8007f88:	463b      	mov	r3, r7
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	621a      	str	r2, [r3, #32]
 8007f8e:	e008      	b.n	8007fa2 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8007f90:	463b      	mov	r3, r7
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007f9a:	463b      	mov	r3, r7
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007fa2:	1d3b      	adds	r3, r7, #4
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8007fa8:	463b      	mov	r3, r7
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	785b      	ldrb	r3, [r3, #1]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d164      	bne.n	800807c <USB_EPStartXfer+0x63c>
 8007fb2:	1d3b      	adds	r3, r7, #4
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fb8:	1d3b      	adds	r3, r7, #4
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc6:	4413      	add	r3, r2
 8007fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fca:	463b      	mov	r3, r7
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	011a      	lsls	r2, r3, #4
 8007fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fda:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d112      	bne.n	800800a <USB_EPStartXfer+0x5ca>
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff2:	801a      	strh	r2, [r3, #0]
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008002:	b29a      	uxth	r2, r3
 8008004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008006:	801a      	strh	r2, [r3, #0]
 8008008:	e054      	b.n	80080b4 <USB_EPStartXfer+0x674>
 800800a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800800e:	2b3e      	cmp	r3, #62	; 0x3e
 8008010:	d817      	bhi.n	8008042 <USB_EPStartXfer+0x602>
 8008012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008016:	085b      	lsrs	r3, r3, #1
 8008018:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800801c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008020:	f003 0301 	and.w	r3, r3, #1
 8008024:	2b00      	cmp	r3, #0
 8008026:	d004      	beq.n	8008032 <USB_EPStartXfer+0x5f2>
 8008028:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800802c:	3301      	adds	r3, #1
 800802e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008032:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008036:	b29b      	uxth	r3, r3
 8008038:	029b      	lsls	r3, r3, #10
 800803a:	b29a      	uxth	r2, r3
 800803c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803e:	801a      	strh	r2, [r3, #0]
 8008040:	e038      	b.n	80080b4 <USB_EPStartXfer+0x674>
 8008042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008046:	095b      	lsrs	r3, r3, #5
 8008048:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800804c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008050:	f003 031f 	and.w	r3, r3, #31
 8008054:	2b00      	cmp	r3, #0
 8008056:	d104      	bne.n	8008062 <USB_EPStartXfer+0x622>
 8008058:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800805c:	3b01      	subs	r3, #1
 800805e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008062:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008066:	b29b      	uxth	r3, r3
 8008068:	029b      	lsls	r3, r3, #10
 800806a:	b29b      	uxth	r3, r3
 800806c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008074:	b29a      	uxth	r2, r3
 8008076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008078:	801a      	strh	r2, [r3, #0]
 800807a:	e01b      	b.n	80080b4 <USB_EPStartXfer+0x674>
 800807c:	463b      	mov	r3, r7
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	785b      	ldrb	r3, [r3, #1]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d116      	bne.n	80080b4 <USB_EPStartXfer+0x674>
 8008086:	1d3b      	adds	r3, r7, #4
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800808e:	b29b      	uxth	r3, r3
 8008090:	461a      	mov	r2, r3
 8008092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008094:	4413      	add	r3, r2
 8008096:	647b      	str	r3, [r7, #68]	; 0x44
 8008098:	463b      	mov	r3, r7
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	011a      	lsls	r2, r3, #4
 80080a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080a2:	4413      	add	r3, r2
 80080a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080a8:	643b      	str	r3, [r7, #64]	; 0x40
 80080aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80080b4:	463b      	mov	r3, r7
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	895b      	ldrh	r3, [r3, #10]
 80080ba:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080be:	463b      	mov	r3, r7
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6959      	ldr	r1, [r3, #20]
 80080c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80080ce:	1d38      	adds	r0, r7, #4
 80080d0:	6800      	ldr	r0, [r0, #0]
 80080d2:	f000 ff13 	bl	8008efc <USB_WritePMA>
 80080d6:	e1e2      	b.n	800849e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80080d8:	463b      	mov	r3, r7
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80080e2:	1d3b      	adds	r3, r7, #4
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	463b      	mov	r3, r7
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80080f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080fc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008100:	1d3b      	adds	r3, r7, #4
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	463b      	mov	r3, r7
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	441a      	add	r2, r3
 800810e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800811a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800811e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008122:	b29b      	uxth	r3, r3
 8008124:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008126:	1d3b      	adds	r3, r7, #4
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	663b      	str	r3, [r7, #96]	; 0x60
 800812c:	1d3b      	adds	r3, r7, #4
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008134:	b29b      	uxth	r3, r3
 8008136:	461a      	mov	r2, r3
 8008138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800813a:	4413      	add	r3, r2
 800813c:	663b      	str	r3, [r7, #96]	; 0x60
 800813e:	463b      	mov	r3, r7
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	011a      	lsls	r2, r3, #4
 8008146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008148:	4413      	add	r3, r2
 800814a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800814e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008154:	b29a      	uxth	r2, r3
 8008156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008158:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800815a:	463b      	mov	r3, r7
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	891b      	ldrh	r3, [r3, #8]
 8008160:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008164:	463b      	mov	r3, r7
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6959      	ldr	r1, [r3, #20]
 800816a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800816e:	b29b      	uxth	r3, r3
 8008170:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008174:	1d38      	adds	r0, r7, #4
 8008176:	6800      	ldr	r0, [r0, #0]
 8008178:	f000 fec0 	bl	8008efc <USB_WritePMA>
 800817c:	e18f      	b.n	800849e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800817e:	1d3b      	adds	r3, r7, #4
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	463b      	mov	r3, r7
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	b29b      	uxth	r3, r3
 8008190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 808f 	beq.w	80082b8 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800819a:	1d3b      	adds	r3, r7, #4
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	67bb      	str	r3, [r7, #120]	; 0x78
 80081a0:	463b      	mov	r3, r7
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	785b      	ldrb	r3, [r3, #1]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d164      	bne.n	8008274 <USB_EPStartXfer+0x834>
 80081aa:	1d3b      	adds	r3, r7, #4
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	673b      	str	r3, [r7, #112]	; 0x70
 80081b0:	1d3b      	adds	r3, r7, #4
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	461a      	mov	r2, r3
 80081bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081be:	4413      	add	r3, r2
 80081c0:	673b      	str	r3, [r7, #112]	; 0x70
 80081c2:	463b      	mov	r3, r7
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	011a      	lsls	r2, r3, #4
 80081ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081cc:	4413      	add	r3, r2
 80081ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d112      	bne.n	8008202 <USB_EPStartXfer+0x7c2>
 80081dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081de:	881b      	ldrh	r3, [r3, #0]
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ea:	801a      	strh	r2, [r3, #0]
 80081ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081fe:	801a      	strh	r2, [r3, #0]
 8008200:	e054      	b.n	80082ac <USB_EPStartXfer+0x86c>
 8008202:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008206:	2b3e      	cmp	r3, #62	; 0x3e
 8008208:	d817      	bhi.n	800823a <USB_EPStartXfer+0x7fa>
 800820a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800820e:	085b      	lsrs	r3, r3, #1
 8008210:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	2b00      	cmp	r3, #0
 800821e:	d004      	beq.n	800822a <USB_EPStartXfer+0x7ea>
 8008220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008224:	3301      	adds	r3, #1
 8008226:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800822a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800822e:	b29b      	uxth	r3, r3
 8008230:	029b      	lsls	r3, r3, #10
 8008232:	b29a      	uxth	r2, r3
 8008234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008236:	801a      	strh	r2, [r3, #0]
 8008238:	e038      	b.n	80082ac <USB_EPStartXfer+0x86c>
 800823a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008248:	f003 031f 	and.w	r3, r3, #31
 800824c:	2b00      	cmp	r3, #0
 800824e:	d104      	bne.n	800825a <USB_EPStartXfer+0x81a>
 8008250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008254:	3b01      	subs	r3, #1
 8008256:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800825a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800825e:	b29b      	uxth	r3, r3
 8008260:	029b      	lsls	r3, r3, #10
 8008262:	b29b      	uxth	r3, r3
 8008264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800826c:	b29a      	uxth	r2, r3
 800826e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008270:	801a      	strh	r2, [r3, #0]
 8008272:	e01b      	b.n	80082ac <USB_EPStartXfer+0x86c>
 8008274:	463b      	mov	r3, r7
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	785b      	ldrb	r3, [r3, #1]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d116      	bne.n	80082ac <USB_EPStartXfer+0x86c>
 800827e:	1d3b      	adds	r3, r7, #4
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008286:	b29b      	uxth	r3, r3
 8008288:	461a      	mov	r2, r3
 800828a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800828c:	4413      	add	r3, r2
 800828e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008290:	463b      	mov	r3, r7
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	011a      	lsls	r2, r3, #4
 8008298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800829a:	4413      	add	r3, r2
 800829c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082a0:	677b      	str	r3, [r7, #116]	; 0x74
 80082a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80082ac:	463b      	mov	r3, r7
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	895b      	ldrh	r3, [r3, #10]
 80082b2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80082b6:	e097      	b.n	80083e8 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80082b8:	463b      	mov	r3, r7
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d168      	bne.n	8008394 <USB_EPStartXfer+0x954>
 80082c2:	1d3b      	adds	r3, r7, #4
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082ca:	1d3b      	adds	r3, r7, #4
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	461a      	mov	r2, r3
 80082d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80082da:	4413      	add	r3, r2
 80082dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082e0:	463b      	mov	r3, r7
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	011a      	lsls	r2, r3, #4
 80082e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80082ec:	4413      	add	r3, r2
 80082ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80082f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d112      	bne.n	8008322 <USB_EPStartXfer+0x8e2>
 80082fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	b29b      	uxth	r3, r3
 8008302:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008306:	b29a      	uxth	r2, r3
 8008308:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800830a:	801a      	strh	r2, [r3, #0]
 800830c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	b29b      	uxth	r3, r3
 8008312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800831a:	b29a      	uxth	r2, r3
 800831c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800831e:	801a      	strh	r2, [r3, #0]
 8008320:	e05d      	b.n	80083de <USB_EPStartXfer+0x99e>
 8008322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008326:	2b3e      	cmp	r3, #62	; 0x3e
 8008328:	d817      	bhi.n	800835a <USB_EPStartXfer+0x91a>
 800832a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800832e:	085b      	lsrs	r3, r3, #1
 8008330:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008338:	f003 0301 	and.w	r3, r3, #1
 800833c:	2b00      	cmp	r3, #0
 800833e:	d004      	beq.n	800834a <USB_EPStartXfer+0x90a>
 8008340:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008344:	3301      	adds	r3, #1
 8008346:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800834a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800834e:	b29b      	uxth	r3, r3
 8008350:	029b      	lsls	r3, r3, #10
 8008352:	b29a      	uxth	r2, r3
 8008354:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008356:	801a      	strh	r2, [r3, #0]
 8008358:	e041      	b.n	80083de <USB_EPStartXfer+0x99e>
 800835a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800835e:	095b      	lsrs	r3, r3, #5
 8008360:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008368:	f003 031f 	and.w	r3, r3, #31
 800836c:	2b00      	cmp	r3, #0
 800836e:	d104      	bne.n	800837a <USB_EPStartXfer+0x93a>
 8008370:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008374:	3b01      	subs	r3, #1
 8008376:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800837a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800837e:	b29b      	uxth	r3, r3
 8008380:	029b      	lsls	r3, r3, #10
 8008382:	b29b      	uxth	r3, r3
 8008384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800838c:	b29a      	uxth	r2, r3
 800838e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008390:	801a      	strh	r2, [r3, #0]
 8008392:	e024      	b.n	80083de <USB_EPStartXfer+0x99e>
 8008394:	463b      	mov	r3, r7
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	785b      	ldrb	r3, [r3, #1]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d11f      	bne.n	80083de <USB_EPStartXfer+0x99e>
 800839e:	1d3b      	adds	r3, r7, #4
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80083a6:	1d3b      	adds	r3, r7, #4
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	461a      	mov	r2, r3
 80083b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083b6:	4413      	add	r3, r2
 80083b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80083bc:	463b      	mov	r3, r7
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	011a      	lsls	r2, r3, #4
 80083c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083c8:	4413      	add	r3, r2
 80083ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083dc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80083de:	463b      	mov	r3, r7
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	891b      	ldrh	r3, [r3, #8]
 80083e4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083e8:	463b      	mov	r3, r7
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6959      	ldr	r1, [r3, #20]
 80083ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80083f8:	1d38      	adds	r0, r7, #4
 80083fa:	6800      	ldr	r0, [r0, #0]
 80083fc:	f000 fd7e 	bl	8008efc <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008400:	463b      	mov	r3, r7
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	785b      	ldrb	r3, [r3, #1]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d122      	bne.n	8008450 <USB_EPStartXfer+0xa10>
 800840a:	1d3b      	adds	r3, r7, #4
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	463b      	mov	r3, r7
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	b29b      	uxth	r3, r3
 800841c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008424:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8008428:	1d3b      	adds	r3, r7, #4
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	463b      	mov	r3, r7
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	441a      	add	r2, r3
 8008436:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800843a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800843e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008446:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800844a:	b29b      	uxth	r3, r3
 800844c:	8013      	strh	r3, [r2, #0]
 800844e:	e026      	b.n	800849e <USB_EPStartXfer+0xa5e>
 8008450:	463b      	mov	r3, r7
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	785b      	ldrb	r3, [r3, #1]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d121      	bne.n	800849e <USB_EPStartXfer+0xa5e>
 800845a:	1d3b      	adds	r3, r7, #4
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	463b      	mov	r3, r7
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	b29b      	uxth	r3, r3
 800846c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008474:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8008478:	1d3b      	adds	r3, r7, #4
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	463b      	mov	r3, r7
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	441a      	add	r2, r3
 8008486:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800848a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800848e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008492:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800849a:	b29b      	uxth	r3, r3
 800849c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800849e:	1d3b      	adds	r3, r7, #4
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	463b      	mov	r3, r7
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4413      	add	r3, r2
 80084ac:	881b      	ldrh	r3, [r3, #0]
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	f107 020e 	add.w	r2, r7, #14
 80084b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084bc:	8013      	strh	r3, [r2, #0]
 80084be:	f107 030e 	add.w	r3, r7, #14
 80084c2:	f107 020e 	add.w	r2, r7, #14
 80084c6:	8812      	ldrh	r2, [r2, #0]
 80084c8:	f082 0210 	eor.w	r2, r2, #16
 80084cc:	801a      	strh	r2, [r3, #0]
 80084ce:	f107 030e 	add.w	r3, r7, #14
 80084d2:	f107 020e 	add.w	r2, r7, #14
 80084d6:	8812      	ldrh	r2, [r2, #0]
 80084d8:	f082 0220 	eor.w	r2, r2, #32
 80084dc:	801a      	strh	r2, [r3, #0]
 80084de:	1d3b      	adds	r3, r7, #4
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	463b      	mov	r3, r7
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	441a      	add	r2, r3
 80084ec:	f107 030e 	add.w	r3, r7, #14
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008502:	b29b      	uxth	r3, r3
 8008504:	8013      	strh	r3, [r2, #0]
 8008506:	e3b5      	b.n	8008c74 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008508:	463b      	mov	r3, r7
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	7b1b      	ldrb	r3, [r3, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	f040 8090 	bne.w	8008634 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008514:	463b      	mov	r3, r7
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	699a      	ldr	r2, [r3, #24]
 800851a:	463b      	mov	r3, r7
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	429a      	cmp	r2, r3
 8008522:	d90e      	bls.n	8008542 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8008524:	463b      	mov	r3, r7
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800852e:	463b      	mov	r3, r7
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	699a      	ldr	r2, [r3, #24]
 8008534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008538:	1ad2      	subs	r2, r2, r3
 800853a:	463b      	mov	r3, r7
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	619a      	str	r2, [r3, #24]
 8008540:	e008      	b.n	8008554 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8008542:	463b      	mov	r3, r7
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800854c:	463b      	mov	r3, r7
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2200      	movs	r2, #0
 8008552:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008554:	1d3b      	adds	r3, r7, #4
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800855c:	1d3b      	adds	r3, r7, #4
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008564:	b29b      	uxth	r3, r3
 8008566:	461a      	mov	r2, r3
 8008568:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800856c:	4413      	add	r3, r2
 800856e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008572:	463b      	mov	r3, r7
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	011a      	lsls	r2, r3, #4
 800857a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800857e:	4413      	add	r3, r2
 8008580:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008584:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800858c:	2b00      	cmp	r3, #0
 800858e:	d116      	bne.n	80085be <USB_EPStartXfer+0xb7e>
 8008590:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	b29b      	uxth	r3, r3
 8008598:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800859c:	b29a      	uxth	r2, r3
 800859e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085a2:	801a      	strh	r2, [r3, #0]
 80085a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085ba:	801a      	strh	r2, [r3, #0]
 80085bc:	e32c      	b.n	8008c18 <USB_EPStartXfer+0x11d8>
 80085be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085c2:	2b3e      	cmp	r3, #62	; 0x3e
 80085c4:	d818      	bhi.n	80085f8 <USB_EPStartXfer+0xbb8>
 80085c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085ca:	085b      	lsrs	r3, r3, #1
 80085cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80085d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d004      	beq.n	80085e6 <USB_EPStartXfer+0xba6>
 80085dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80085e0:	3301      	adds	r3, #1
 80085e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80085e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	029b      	lsls	r3, r3, #10
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085f4:	801a      	strh	r2, [r3, #0]
 80085f6:	e30f      	b.n	8008c18 <USB_EPStartXfer+0x11d8>
 80085f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085fc:	095b      	lsrs	r3, r3, #5
 80085fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008606:	f003 031f 	and.w	r3, r3, #31
 800860a:	2b00      	cmp	r3, #0
 800860c:	d104      	bne.n	8008618 <USB_EPStartXfer+0xbd8>
 800860e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008612:	3b01      	subs	r3, #1
 8008614:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008618:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800861c:	b29b      	uxth	r3, r3
 800861e:	029b      	lsls	r3, r3, #10
 8008620:	b29b      	uxth	r3, r3
 8008622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800862a:	b29a      	uxth	r2, r3
 800862c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008630:	801a      	strh	r2, [r3, #0]
 8008632:	e2f1      	b.n	8008c18 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008634:	463b      	mov	r3, r7
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	78db      	ldrb	r3, [r3, #3]
 800863a:	2b02      	cmp	r3, #2
 800863c:	f040 818f 	bne.w	800895e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008640:	463b      	mov	r3, r7
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	785b      	ldrb	r3, [r3, #1]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d175      	bne.n	8008736 <USB_EPStartXfer+0xcf6>
 800864a:	1d3b      	adds	r3, r7, #4
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008652:	1d3b      	adds	r3, r7, #4
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800865a:	b29b      	uxth	r3, r3
 800865c:	461a      	mov	r2, r3
 800865e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008662:	4413      	add	r3, r2
 8008664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008668:	463b      	mov	r3, r7
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	011a      	lsls	r2, r3, #4
 8008670:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008674:	4413      	add	r3, r2
 8008676:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800867a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800867e:	463b      	mov	r3, r7
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d116      	bne.n	80086b6 <USB_EPStartXfer+0xc76>
 8008688:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	b29b      	uxth	r3, r3
 8008690:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008694:	b29a      	uxth	r2, r3
 8008696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800869a:	801a      	strh	r2, [r3, #0]
 800869c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086a0:	881b      	ldrh	r3, [r3, #0]
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086b2:	801a      	strh	r2, [r3, #0]
 80086b4:	e065      	b.n	8008782 <USB_EPStartXfer+0xd42>
 80086b6:	463b      	mov	r3, r7
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	2b3e      	cmp	r3, #62	; 0x3e
 80086be:	d81a      	bhi.n	80086f6 <USB_EPStartXfer+0xcb6>
 80086c0:	463b      	mov	r3, r7
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	085b      	lsrs	r3, r3, #1
 80086c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086cc:	463b      	mov	r3, r7
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d004      	beq.n	80086e4 <USB_EPStartXfer+0xca4>
 80086da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086de:	3301      	adds	r3, #1
 80086e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	029b      	lsls	r3, r3, #10
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086f2:	801a      	strh	r2, [r3, #0]
 80086f4:	e045      	b.n	8008782 <USB_EPStartXfer+0xd42>
 80086f6:	463b      	mov	r3, r7
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	095b      	lsrs	r3, r3, #5
 80086fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008702:	463b      	mov	r3, r7
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	f003 031f 	and.w	r3, r3, #31
 800870c:	2b00      	cmp	r3, #0
 800870e:	d104      	bne.n	800871a <USB_EPStartXfer+0xcda>
 8008710:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008714:	3b01      	subs	r3, #1
 8008716:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800871a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800871e:	b29b      	uxth	r3, r3
 8008720:	029b      	lsls	r3, r3, #10
 8008722:	b29b      	uxth	r3, r3
 8008724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800872c:	b29a      	uxth	r2, r3
 800872e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008732:	801a      	strh	r2, [r3, #0]
 8008734:	e025      	b.n	8008782 <USB_EPStartXfer+0xd42>
 8008736:	463b      	mov	r3, r7
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	785b      	ldrb	r3, [r3, #1]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d120      	bne.n	8008782 <USB_EPStartXfer+0xd42>
 8008740:	1d3b      	adds	r3, r7, #4
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008748:	1d3b      	adds	r3, r7, #4
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008750:	b29b      	uxth	r3, r3
 8008752:	461a      	mov	r2, r3
 8008754:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008758:	4413      	add	r3, r2
 800875a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800875e:	463b      	mov	r3, r7
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	011a      	lsls	r2, r3, #4
 8008766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800876a:	4413      	add	r3, r2
 800876c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008770:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008774:	463b      	mov	r3, r7
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	b29a      	uxth	r2, r3
 800877c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008780:	801a      	strh	r2, [r3, #0]
 8008782:	1d3b      	adds	r3, r7, #4
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800878a:	463b      	mov	r3, r7
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	785b      	ldrb	r3, [r3, #1]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d175      	bne.n	8008880 <USB_EPStartXfer+0xe40>
 8008794:	1d3b      	adds	r3, r7, #4
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800879c:	1d3b      	adds	r3, r7, #4
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	461a      	mov	r2, r3
 80087a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087ac:	4413      	add	r3, r2
 80087ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80087b2:	463b      	mov	r3, r7
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	011a      	lsls	r2, r3, #4
 80087ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087be:	4413      	add	r3, r2
 80087c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087c8:	463b      	mov	r3, r7
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d116      	bne.n	8008800 <USB_EPStartXfer+0xdc0>
 80087d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087d6:	881b      	ldrh	r3, [r3, #0]
 80087d8:	b29b      	uxth	r3, r3
 80087da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087de:	b29a      	uxth	r2, r3
 80087e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087e4:	801a      	strh	r2, [r3, #0]
 80087e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087fc:	801a      	strh	r2, [r3, #0]
 80087fe:	e061      	b.n	80088c4 <USB_EPStartXfer+0xe84>
 8008800:	463b      	mov	r3, r7
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	2b3e      	cmp	r3, #62	; 0x3e
 8008808:	d81a      	bhi.n	8008840 <USB_EPStartXfer+0xe00>
 800880a:	463b      	mov	r3, r7
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	085b      	lsrs	r3, r3, #1
 8008812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008816:	463b      	mov	r3, r7
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	d004      	beq.n	800882e <USB_EPStartXfer+0xdee>
 8008824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008828:	3301      	adds	r3, #1
 800882a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800882e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008832:	b29b      	uxth	r3, r3
 8008834:	029b      	lsls	r3, r3, #10
 8008836:	b29a      	uxth	r2, r3
 8008838:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800883c:	801a      	strh	r2, [r3, #0]
 800883e:	e041      	b.n	80088c4 <USB_EPStartXfer+0xe84>
 8008840:	463b      	mov	r3, r7
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	095b      	lsrs	r3, r3, #5
 8008848:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800884c:	463b      	mov	r3, r7
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	f003 031f 	and.w	r3, r3, #31
 8008856:	2b00      	cmp	r3, #0
 8008858:	d104      	bne.n	8008864 <USB_EPStartXfer+0xe24>
 800885a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800885e:	3b01      	subs	r3, #1
 8008860:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008868:	b29b      	uxth	r3, r3
 800886a:	029b      	lsls	r3, r3, #10
 800886c:	b29b      	uxth	r3, r3
 800886e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008876:	b29a      	uxth	r2, r3
 8008878:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800887c:	801a      	strh	r2, [r3, #0]
 800887e:	e021      	b.n	80088c4 <USB_EPStartXfer+0xe84>
 8008880:	463b      	mov	r3, r7
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	785b      	ldrb	r3, [r3, #1]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d11c      	bne.n	80088c4 <USB_EPStartXfer+0xe84>
 800888a:	1d3b      	adds	r3, r7, #4
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008892:	b29b      	uxth	r3, r3
 8008894:	461a      	mov	r2, r3
 8008896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800889a:	4413      	add	r3, r2
 800889c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80088a0:	463b      	mov	r3, r7
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	011a      	lsls	r2, r3, #4
 80088a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088ac:	4413      	add	r3, r2
 80088ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80088b6:	463b      	mov	r3, r7
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	b29a      	uxth	r2, r3
 80088be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80088c2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80088c4:	463b      	mov	r3, r7
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	69db      	ldr	r3, [r3, #28]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 81a4 	beq.w	8008c18 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80088d0:	1d3b      	adds	r3, r7, #4
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	463b      	mov	r3, r7
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	881b      	ldrh	r3, [r3, #0]
 80088e0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80088e4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80088e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d005      	beq.n	80088fc <USB_EPStartXfer+0xebc>
 80088f0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80088f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10d      	bne.n	8008918 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80088fc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008904:	2b00      	cmp	r3, #0
 8008906:	f040 8187 	bne.w	8008c18 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800890a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800890e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008912:	2b00      	cmp	r3, #0
 8008914:	f040 8180 	bne.w	8008c18 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008918:	1d3b      	adds	r3, r7, #4
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	463b      	mov	r3, r7
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4413      	add	r3, r2
 8008926:	881b      	ldrh	r3, [r3, #0]
 8008928:	b29b      	uxth	r3, r3
 800892a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800892e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008932:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8008936:	1d3b      	adds	r3, r7, #4
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	463b      	mov	r3, r7
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	441a      	add	r2, r3
 8008944:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8008948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800894c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008954:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008958:	b29b      	uxth	r3, r3
 800895a:	8013      	strh	r3, [r2, #0]
 800895c:	e15c      	b.n	8008c18 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800895e:	463b      	mov	r3, r7
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	78db      	ldrb	r3, [r3, #3]
 8008964:	2b01      	cmp	r3, #1
 8008966:	f040 8155 	bne.w	8008c14 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800896a:	463b      	mov	r3, r7
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	699a      	ldr	r2, [r3, #24]
 8008970:	463b      	mov	r3, r7
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	429a      	cmp	r2, r3
 8008978:	d90e      	bls.n	8008998 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800897a:	463b      	mov	r3, r7
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8008984:	463b      	mov	r3, r7
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	699a      	ldr	r2, [r3, #24]
 800898a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800898e:	1ad2      	subs	r2, r2, r3
 8008990:	463b      	mov	r3, r7
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	619a      	str	r2, [r3, #24]
 8008996:	e008      	b.n	80089aa <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8008998:	463b      	mov	r3, r7
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80089a2:	463b      	mov	r3, r7
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2200      	movs	r2, #0
 80089a8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80089aa:	463b      	mov	r3, r7
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	785b      	ldrb	r3, [r3, #1]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d16f      	bne.n	8008a94 <USB_EPStartXfer+0x1054>
 80089b4:	1d3b      	adds	r3, r7, #4
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80089bc:	1d3b      	adds	r3, r7, #4
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	461a      	mov	r2, r3
 80089c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80089cc:	4413      	add	r3, r2
 80089ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80089d2:	463b      	mov	r3, r7
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	011a      	lsls	r2, r3, #4
 80089da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80089de:	4413      	add	r3, r2
 80089e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80089e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d116      	bne.n	8008a1e <USB_EPStartXfer+0xfde>
 80089f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a02:	801a      	strh	r2, [r3, #0]
 8008a04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a08:	881b      	ldrh	r3, [r3, #0]
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a1a:	801a      	strh	r2, [r3, #0]
 8008a1c:	e05f      	b.n	8008ade <USB_EPStartXfer+0x109e>
 8008a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a22:	2b3e      	cmp	r3, #62	; 0x3e
 8008a24:	d818      	bhi.n	8008a58 <USB_EPStartXfer+0x1018>
 8008a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a2a:	085b      	lsrs	r3, r3, #1
 8008a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d004      	beq.n	8008a46 <USB_EPStartXfer+0x1006>
 8008a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a40:	3301      	adds	r3, #1
 8008a42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	029b      	lsls	r3, r3, #10
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a54:	801a      	strh	r2, [r3, #0]
 8008a56:	e042      	b.n	8008ade <USB_EPStartXfer+0x109e>
 8008a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a5c:	095b      	lsrs	r3, r3, #5
 8008a5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a66:	f003 031f 	and.w	r3, r3, #31
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d104      	bne.n	8008a78 <USB_EPStartXfer+0x1038>
 8008a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a72:	3b01      	subs	r3, #1
 8008a74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	029b      	lsls	r3, r3, #10
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008a90:	801a      	strh	r2, [r3, #0]
 8008a92:	e024      	b.n	8008ade <USB_EPStartXfer+0x109e>
 8008a94:	463b      	mov	r3, r7
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	785b      	ldrb	r3, [r3, #1]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d11f      	bne.n	8008ade <USB_EPStartXfer+0x109e>
 8008a9e:	1d3b      	adds	r3, r7, #4
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008aa6:	1d3b      	adds	r3, r7, #4
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008abc:	463b      	mov	r3, r7
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	011a      	lsls	r2, r3, #4
 8008ac4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ac8:	4413      	add	r3, r2
 8008aca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008adc:	801a      	strh	r2, [r3, #0]
 8008ade:	1d3b      	adds	r3, r7, #4
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ae6:	463b      	mov	r3, r7
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	785b      	ldrb	r3, [r3, #1]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d16f      	bne.n	8008bd0 <USB_EPStartXfer+0x1190>
 8008af0:	1d3b      	adds	r3, r7, #4
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008af8:	1d3b      	adds	r3, r7, #4
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	461a      	mov	r2, r3
 8008b04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008b08:	4413      	add	r3, r2
 8008b0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b0e:	463b      	mov	r3, r7
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	011a      	lsls	r2, r3, #4
 8008b16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d116      	bne.n	8008b5a <USB_EPStartXfer+0x111a>
 8008b2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b30:	881b      	ldrh	r3, [r3, #0]
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b3e:	801a      	strh	r2, [r3, #0]
 8008b40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b56:	801a      	strh	r2, [r3, #0]
 8008b58:	e05e      	b.n	8008c18 <USB_EPStartXfer+0x11d8>
 8008b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b5e:	2b3e      	cmp	r3, #62	; 0x3e
 8008b60:	d818      	bhi.n	8008b94 <USB_EPStartXfer+0x1154>
 8008b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b66:	085b      	lsrs	r3, r3, #1
 8008b68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b70:	f003 0301 	and.w	r3, r3, #1
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d004      	beq.n	8008b82 <USB_EPStartXfer+0x1142>
 8008b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	029b      	lsls	r3, r3, #10
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b90:	801a      	strh	r2, [r3, #0]
 8008b92:	e041      	b.n	8008c18 <USB_EPStartXfer+0x11d8>
 8008b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b98:	095b      	lsrs	r3, r3, #5
 8008b9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ba2:	f003 031f 	and.w	r3, r3, #31
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d104      	bne.n	8008bb4 <USB_EPStartXfer+0x1174>
 8008baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	029b      	lsls	r3, r3, #10
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008bcc:	801a      	strh	r2, [r3, #0]
 8008bce:	e023      	b.n	8008c18 <USB_EPStartXfer+0x11d8>
 8008bd0:	463b      	mov	r3, r7
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	785b      	ldrb	r3, [r3, #1]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d11e      	bne.n	8008c18 <USB_EPStartXfer+0x11d8>
 8008bda:	1d3b      	adds	r3, r7, #4
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	461a      	mov	r2, r3
 8008be6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bea:	4413      	add	r3, r2
 8008bec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bf0:	463b      	mov	r3, r7
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	011a      	lsls	r2, r3, #4
 8008bf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c10:	801a      	strh	r2, [r3, #0]
 8008c12:	e001      	b.n	8008c18 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e02e      	b.n	8008c76 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c18:	1d3b      	adds	r3, r7, #4
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	463b      	mov	r3, r7
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4413      	add	r3, r2
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c32:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008c36:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008c3a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c3e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008c42:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008c46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c4a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008c4e:	1d3b      	adds	r3, r7, #4
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	463b      	mov	r3, r7
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	441a      	add	r2, r3
 8008c5c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	785b      	ldrb	r3, [r3, #1]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d020      	beq.n	8008cd4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ca8:	81bb      	strh	r3, [r7, #12]
 8008caa:	89bb      	ldrh	r3, [r7, #12]
 8008cac:	f083 0310 	eor.w	r3, r3, #16
 8008cb0:	81bb      	strh	r3, [r7, #12]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	441a      	add	r2, r3
 8008cbc:	89bb      	ldrh	r3, [r7, #12]
 8008cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	8013      	strh	r3, [r2, #0]
 8008cd2:	e01f      	b.n	8008d14 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	881b      	ldrh	r3, [r3, #0]
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cea:	81fb      	strh	r3, [r7, #14]
 8008cec:	89fb      	ldrh	r3, [r7, #14]
 8008cee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008cf2:	81fb      	strh	r3, [r7, #14]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	441a      	add	r2, r3
 8008cfe:	89fb      	ldrh	r3, [r7, #14]
 8008d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bc80      	pop	{r7}
 8008d1e:	4770      	bx	lr

08008d20 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	7b1b      	ldrb	r3, [r3, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f040 809d 	bne.w	8008e6e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	785b      	ldrb	r3, [r3, #1]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d04c      	beq.n	8008dd6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4413      	add	r3, r2
 8008d46:	881b      	ldrh	r3, [r3, #0]
 8008d48:	823b      	strh	r3, [r7, #16]
 8008d4a:	8a3b      	ldrh	r3, [r7, #16]
 8008d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d01b      	beq.n	8008d8c <USB_EPClearStall+0x6c>
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	881b      	ldrh	r3, [r3, #0]
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d6a:	81fb      	strh	r3, [r7, #14]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	441a      	add	r2, r3
 8008d76:	89fb      	ldrh	r3, [r7, #14]
 8008d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	78db      	ldrb	r3, [r3, #3]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d06c      	beq.n	8008e6e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	4413      	add	r3, r2
 8008d9e:	881b      	ldrh	r3, [r3, #0]
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008daa:	81bb      	strh	r3, [r7, #12]
 8008dac:	89bb      	ldrh	r3, [r7, #12]
 8008dae:	f083 0320 	eor.w	r3, r3, #32
 8008db2:	81bb      	strh	r3, [r7, #12]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	441a      	add	r2, r3
 8008dbe:	89bb      	ldrh	r3, [r7, #12]
 8008dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	8013      	strh	r3, [r2, #0]
 8008dd4:	e04b      	b.n	8008e6e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	82fb      	strh	r3, [r7, #22]
 8008de4:	8afb      	ldrh	r3, [r7, #22]
 8008de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d01b      	beq.n	8008e26 <USB_EPClearStall+0x106>
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e04:	82bb      	strh	r3, [r7, #20]
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	441a      	add	r2, r3
 8008e10:	8abb      	ldrh	r3, [r7, #20]
 8008e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4413      	add	r3, r2
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3c:	827b      	strh	r3, [r7, #18]
 8008e3e:	8a7b      	ldrh	r3, [r7, #18]
 8008e40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e44:	827b      	strh	r3, [r7, #18]
 8008e46:	8a7b      	ldrh	r3, [r7, #18]
 8008e48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e4c:	827b      	strh	r3, [r7, #18]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	441a      	add	r2, r3
 8008e58:	8a7b      	ldrh	r3, [r7, #18]
 8008e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	371c      	adds	r7, #28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bc80      	pop	{r7}
 8008e78:	4770      	bx	lr

08008e7a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008e7a:	b480      	push	{r7}
 8008e7c:	b083      	sub	sp, #12
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	460b      	mov	r3, r1
 8008e84:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d103      	bne.n	8008e94 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2280      	movs	r2, #128	; 0x80
 8008e90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bc80      	pop	{r7}
 8008e9e:	4770      	bx	lr

08008ea0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	370c      	adds	r7, #12
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bc80      	pop	{r7}
 8008eb2:	4770      	bx	lr

08008eb4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bc80      	pop	{r7}
 8008ec6:	4770      	bx	lr

08008ec8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008eda:	68fb      	ldr	r3, [r7, #12]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bc80      	pop	{r7}
 8008ee4:	4770      	bx	lr

08008ee6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b083      	sub	sp, #12
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	370c      	adds	r7, #12
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bc80      	pop	{r7}
 8008efa:	4770      	bx	lr

08008efc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b08d      	sub	sp, #52	; 0x34
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	4611      	mov	r1, r2
 8008f08:	461a      	mov	r2, r3
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	80fb      	strh	r3, [r7, #6]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f12:	88bb      	ldrh	r3, [r7, #4]
 8008f14:	3301      	adds	r3, #1
 8008f16:	085b      	lsrs	r3, r3, #1
 8008f18:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f22:	88fb      	ldrh	r3, [r7, #6]
 8008f24:	005a      	lsls	r2, r3, #1
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	4413      	add	r3, r2
 8008f2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f2e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008f30:	6a3b      	ldr	r3, [r7, #32]
 8008f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f34:	e01e      	b.n	8008f74 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	3301      	adds	r3, #1
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	021b      	lsls	r3, r3, #8
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5e:	3302      	adds	r3, #2
 8008f60:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f64:	3302      	adds	r3, #2
 8008f66:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f70:	3b01      	subs	r3, #1
 8008f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1dd      	bne.n	8008f36 <USB_WritePMA+0x3a>
  }
}
 8008f7a:	bf00      	nop
 8008f7c:	3734      	adds	r7, #52	; 0x34
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bc80      	pop	{r7}
 8008f82:	4770      	bx	lr

08008f84 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b08b      	sub	sp, #44	; 0x2c
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	4611      	mov	r1, r2
 8008f90:	461a      	mov	r2, r3
 8008f92:	460b      	mov	r3, r1
 8008f94:	80fb      	strh	r3, [r7, #6]
 8008f96:	4613      	mov	r3, r2
 8008f98:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008f9a:	88bb      	ldrh	r3, [r7, #4]
 8008f9c:	085b      	lsrs	r3, r3, #1
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008faa:	88fb      	ldrh	r3, [r7, #6]
 8008fac:	005a      	lsls	r2, r3, #1
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fb6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	627b      	str	r3, [r7, #36]	; 0x24
 8008fbc:	e01b      	b.n	8008ff6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008fc6:	6a3b      	ldr	r3, [r7, #32]
 8008fc8:	3302      	adds	r3, #2
 8008fca:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	0a1b      	lsrs	r3, r3, #8
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	3302      	adds	r3, #2
 8008fee:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1e0      	bne.n	8008fbe <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008ffc:	88bb      	ldrh	r3, [r7, #4]
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	b29b      	uxth	r3, r3
 8009004:	2b00      	cmp	r3, #0
 8009006:	d007      	beq.n	8009018 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	881b      	ldrh	r3, [r3, #0]
 800900c:	b29b      	uxth	r3, r3
 800900e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	b2da      	uxtb	r2, r3
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	701a      	strb	r2, [r3, #0]
  }
}
 8009018:	bf00      	nop
 800901a:	372c      	adds	r7, #44	; 0x2c
 800901c:	46bd      	mov	sp, r7
 800901e:	bc80      	pop	{r7}
 8009020:	4770      	bx	lr

08009022 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	460b      	mov	r3, r1
 800902c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800902e:	2300      	movs	r3, #0
 8009030:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	7c1b      	ldrb	r3, [r3, #16]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d115      	bne.n	8009066 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800903a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800903e:	2202      	movs	r2, #2
 8009040:	2181      	movs	r1, #129	; 0x81
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f001 fe75 	bl	800ad32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800904e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009052:	2202      	movs	r2, #2
 8009054:	2101      	movs	r1, #1
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f001 fe6b 	bl	800ad32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009064:	e012      	b.n	800908c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009066:	2340      	movs	r3, #64	; 0x40
 8009068:	2202      	movs	r2, #2
 800906a:	2181      	movs	r1, #129	; 0x81
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f001 fe60 	bl	800ad32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009078:	2340      	movs	r3, #64	; 0x40
 800907a:	2202      	movs	r2, #2
 800907c:	2101      	movs	r1, #1
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f001 fe57 	bl	800ad32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800908c:	2308      	movs	r3, #8
 800908e:	2203      	movs	r2, #3
 8009090:	2182      	movs	r1, #130	; 0x82
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f001 fe4d 	bl	800ad32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800909e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80090a2:	f001 ff6d 	bl	800af80 <USBD_static_malloc>
 80090a6:	4602      	mov	r2, r0
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d102      	bne.n	80090be <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80090b8:	2301      	movs	r3, #1
 80090ba:	73fb      	strb	r3, [r7, #15]
 80090bc:	e026      	b.n	800910c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2200      	movs	r2, #0
 80090dc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	7c1b      	ldrb	r3, [r3, #16]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d109      	bne.n	80090fc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090f2:	2101      	movs	r1, #1
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f001 ff0d 	bl	800af14 <USBD_LL_PrepareReceive>
 80090fa:	e007      	b.n	800910c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009102:	2340      	movs	r3, #64	; 0x40
 8009104:	2101      	movs	r1, #1
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f001 ff04 	bl	800af14 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800910c:	7bfb      	ldrb	r3, [r7, #15]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b084      	sub	sp, #16
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	460b      	mov	r3, r1
 8009120:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009126:	2181      	movs	r1, #129	; 0x81
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f001 fe28 	bl	800ad7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009134:	2101      	movs	r1, #1
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f001 fe21 	bl	800ad7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009144:	2182      	movs	r1, #130	; 0x82
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f001 fe19 	bl	800ad7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00e      	beq.n	800917a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800916c:	4618      	mov	r0, r3
 800916e:	f001 ff13 	bl	800af98 <USBD_static_free>
    pdev->pClassData = NULL;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800917a:	7bfb      	ldrb	r3, [r7, #15]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009194:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800919a:	2300      	movs	r3, #0
 800919c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d039      	beq.n	8009222 <USBD_CDC_Setup+0x9e>
 80091ae:	2b20      	cmp	r3, #32
 80091b0:	d17c      	bne.n	80092ac <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	88db      	ldrh	r3, [r3, #6]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d029      	beq.n	800920e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	b25b      	sxtb	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	da11      	bge.n	80091e8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	683a      	ldr	r2, [r7, #0]
 80091ce:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80091d0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	88d2      	ldrh	r2, [r2, #6]
 80091d6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80091d8:	6939      	ldr	r1, [r7, #16]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	88db      	ldrh	r3, [r3, #6]
 80091de:	461a      	mov	r2, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f001 f9f9 	bl	800a5d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80091e6:	e068      	b.n	80092ba <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	785a      	ldrb	r2, [r3, #1]
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	88db      	ldrh	r3, [r3, #6]
 80091f6:	b2da      	uxtb	r2, r3
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80091fe:	6939      	ldr	r1, [r7, #16]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	88db      	ldrh	r3, [r3, #6]
 8009204:	461a      	mov	r2, r3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f001 fa14 	bl	800a634 <USBD_CtlPrepareRx>
      break;
 800920c:	e055      	b.n	80092ba <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	7850      	ldrb	r0, [r2, #1]
 800921a:	2200      	movs	r2, #0
 800921c:	6839      	ldr	r1, [r7, #0]
 800921e:	4798      	blx	r3
      break;
 8009220:	e04b      	b.n	80092ba <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	785b      	ldrb	r3, [r3, #1]
 8009226:	2b0a      	cmp	r3, #10
 8009228:	d017      	beq.n	800925a <USBD_CDC_Setup+0xd6>
 800922a:	2b0b      	cmp	r3, #11
 800922c:	d029      	beq.n	8009282 <USBD_CDC_Setup+0xfe>
 800922e:	2b00      	cmp	r3, #0
 8009230:	d133      	bne.n	800929a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009238:	2b03      	cmp	r3, #3
 800923a:	d107      	bne.n	800924c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800923c:	f107 030c 	add.w	r3, r7, #12
 8009240:	2202      	movs	r2, #2
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f001 f9c7 	bl	800a5d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800924a:	e02e      	b.n	80092aa <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f001 f958 	bl	800a504 <USBD_CtlError>
            ret = USBD_FAIL;
 8009254:	2302      	movs	r3, #2
 8009256:	75fb      	strb	r3, [r7, #23]
          break;
 8009258:	e027      	b.n	80092aa <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009260:	2b03      	cmp	r3, #3
 8009262:	d107      	bne.n	8009274 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009264:	f107 030f 	add.w	r3, r7, #15
 8009268:	2201      	movs	r2, #1
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f001 f9b3 	bl	800a5d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009272:	e01a      	b.n	80092aa <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f001 f944 	bl	800a504 <USBD_CtlError>
            ret = USBD_FAIL;
 800927c:	2302      	movs	r3, #2
 800927e:	75fb      	strb	r3, [r7, #23]
          break;
 8009280:	e013      	b.n	80092aa <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009288:	2b03      	cmp	r3, #3
 800928a:	d00d      	beq.n	80092a8 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f001 f938 	bl	800a504 <USBD_CtlError>
            ret = USBD_FAIL;
 8009294:	2302      	movs	r3, #2
 8009296:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009298:	e006      	b.n	80092a8 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f001 f931 	bl	800a504 <USBD_CtlError>
          ret = USBD_FAIL;
 80092a2:	2302      	movs	r3, #2
 80092a4:	75fb      	strb	r3, [r7, #23]
          break;
 80092a6:	e000      	b.n	80092aa <USBD_CDC_Setup+0x126>
          break;
 80092a8:	bf00      	nop
      }
      break;
 80092aa:	e006      	b.n	80092ba <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f001 f928 	bl	800a504 <USBD_CtlError>
      ret = USBD_FAIL;
 80092b4:	2302      	movs	r3, #2
 80092b6:	75fb      	strb	r3, [r7, #23]
      break;
 80092b8:	bf00      	nop
  }

  return ret;
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	460b      	mov	r3, r1
 80092ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092d6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092de:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d03a      	beq.n	8009360 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80092ea:	78fa      	ldrb	r2, [r7, #3]
 80092ec:	6879      	ldr	r1, [r7, #4]
 80092ee:	4613      	mov	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	440b      	add	r3, r1
 80092f8:	331c      	adds	r3, #28
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d029      	beq.n	8009354 <USBD_CDC_DataIn+0x90>
 8009300:	78fa      	ldrb	r2, [r7, #3]
 8009302:	6879      	ldr	r1, [r7, #4]
 8009304:	4613      	mov	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	440b      	add	r3, r1
 800930e:	331c      	adds	r3, #28
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	78f9      	ldrb	r1, [r7, #3]
 8009314:	68b8      	ldr	r0, [r7, #8]
 8009316:	460b      	mov	r3, r1
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	440b      	add	r3, r1
 800931c:	00db      	lsls	r3, r3, #3
 800931e:	4403      	add	r3, r0
 8009320:	3338      	adds	r3, #56	; 0x38
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	fbb2 f1f3 	udiv	r1, r2, r3
 8009328:	fb03 f301 	mul.w	r3, r3, r1
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	2b00      	cmp	r3, #0
 8009330:	d110      	bne.n	8009354 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009332:	78fa      	ldrb	r2, [r7, #3]
 8009334:	6879      	ldr	r1, [r7, #4]
 8009336:	4613      	mov	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	440b      	add	r3, r1
 8009340:	331c      	adds	r3, #28
 8009342:	2200      	movs	r2, #0
 8009344:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009346:	78f9      	ldrb	r1, [r7, #3]
 8009348:	2300      	movs	r3, #0
 800934a:	2200      	movs	r2, #0
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f001 fdbe 	bl	800aece <USBD_LL_Transmit>
 8009352:	e003      	b.n	800935c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	e000      	b.n	8009362 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009360:	2302      	movs	r3, #2
  }
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b084      	sub	sp, #16
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	460b      	mov	r3, r1
 8009374:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800937c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800937e:	78fb      	ldrb	r3, [r7, #3]
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f001 fde9 	bl	800af5a <USBD_LL_GetRxDataSize>
 8009388:	4602      	mov	r2, r0
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00d      	beq.n	80093b6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80093ae:	4611      	mov	r1, r2
 80093b0:	4798      	blx	r3

    return USBD_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	e000      	b.n	80093b8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80093b6:	2302      	movs	r3, #2
  }
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ce:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d015      	beq.n	8009406 <USBD_CDC_EP0_RxReady+0x46>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80093e0:	2bff      	cmp	r3, #255	; 0xff
 80093e2:	d010      	beq.n	8009406 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80093f2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80093fa:	b292      	uxth	r2, r2
 80093fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	22ff      	movs	r2, #255	; 0xff
 8009402:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2243      	movs	r2, #67	; 0x43
 800941c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800941e:	4b03      	ldr	r3, [pc, #12]	; (800942c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009420:	4618      	mov	r0, r3
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	bc80      	pop	{r7}
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	200000b8 	.word	0x200000b8

08009430 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2243      	movs	r2, #67	; 0x43
 800943c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800943e:	4b03      	ldr	r3, [pc, #12]	; (800944c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009440:	4618      	mov	r0, r3
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	bc80      	pop	{r7}
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	20000074 	.word	0x20000074

08009450 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2243      	movs	r2, #67	; 0x43
 800945c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800945e:	4b03      	ldr	r3, [pc, #12]	; (800946c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009460:	4618      	mov	r0, r3
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	bc80      	pop	{r7}
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	200000fc 	.word	0x200000fc

08009470 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	220a      	movs	r2, #10
 800947c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800947e:	4b03      	ldr	r3, [pc, #12]	; (800948c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009480:	4618      	mov	r0, r3
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	bc80      	pop	{r7}
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	20000030 	.word	0x20000030

08009490 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800949a:	2302      	movs	r3, #2
 800949c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d005      	beq.n	80094b0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bc80      	pop	{r7}
 80094ba:	4770      	bx	lr

080094bc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80094bc:	b480      	push	{r7}
 80094be:	b087      	sub	sp, #28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	4613      	mov	r3, r2
 80094c8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094d0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80094da:	88fa      	ldrh	r2, [r7, #6]
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	371c      	adds	r7, #28
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bc80      	pop	{r7}
 80094ec:	4770      	bx	lr

080094ee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b085      	sub	sp, #20
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094fe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	bc80      	pop	{r7}
 8009512:	4770      	bx	lr

08009514 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009522:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800952a:	2b00      	cmp	r3, #0
 800952c:	d01c      	beq.n	8009568 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009534:	2b00      	cmp	r3, #0
 8009536:	d115      	bne.n	8009564 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2201      	movs	r2, #1
 800953c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009556:	b29b      	uxth	r3, r3
 8009558:	2181      	movs	r1, #129	; 0x81
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f001 fcb7 	bl	800aece <USBD_LL_Transmit>

      return USBD_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	e002      	b.n	800956a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009564:	2301      	movs	r3, #1
 8009566:	e000      	b.n	800956a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009568:	2302      	movs	r3, #2
  }
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009580:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009588:	2b00      	cmp	r3, #0
 800958a:	d017      	beq.n	80095bc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	7c1b      	ldrb	r3, [r3, #16]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d109      	bne.n	80095a8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800959a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800959e:	2101      	movs	r1, #1
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f001 fcb7 	bl	800af14 <USBD_LL_PrepareReceive>
 80095a6:	e007      	b.n	80095b8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80095ae:	2340      	movs	r3, #64	; 0x40
 80095b0:	2101      	movs	r1, #1
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f001 fcae 	bl	800af14 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	e000      	b.n	80095be <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80095bc:	2302      	movs	r3, #2
  }
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	60f8      	str	r0, [r7, #12]
 80095ce:	60b9      	str	r1, [r7, #8]
 80095d0:	4613      	mov	r3, r2
 80095d2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d101      	bne.n	80095de <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80095da:	2302      	movs	r3, #2
 80095dc:	e01a      	b.n	8009614 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d003      	beq.n	80095f0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	79fa      	ldrb	r2, [r7, #7]
 800960a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f001 fb1b 	bl	800ac48 <USBD_LL_Init>

  return USBD_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d006      	beq.n	800963e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009638:	2300      	movs	r3, #0
 800963a:	73fb      	strb	r3, [r7, #15]
 800963c:	e001      	b.n	8009642 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800963e:	2302      	movs	r3, #2
 8009640:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009642:	7bfb      	ldrb	r3, [r7, #15]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3714      	adds	r7, #20
 8009648:	46bd      	mov	sp, r7
 800964a:	bc80      	pop	{r7}
 800964c:	4770      	bx	lr

0800964e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b082      	sub	sp, #8
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f001 fb50 	bl	800acfc <USBD_LL_Start>

  return USBD_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	bc80      	pop	{r7}
 8009678:	4770      	bx	lr

0800967a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	460b      	mov	r3, r1
 8009684:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009686:	2302      	movs	r3, #2
 8009688:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00c      	beq.n	80096ae <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	78fa      	ldrb	r2, [r7, #3]
 800969e:	4611      	mov	r1, r2
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	4798      	blx	r3
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	460b      	mov	r3, r1
 80096c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	78fa      	ldrb	r2, [r7, #3]
 80096ce:	4611      	mov	r1, r2
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	4798      	blx	r3

  return USBD_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b082      	sub	sp, #8
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80096ee:	6839      	ldr	r1, [r7, #0]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f000 fecb 	bl	800a48c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009704:	461a      	mov	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009712:	f003 031f 	and.w	r3, r3, #31
 8009716:	2b01      	cmp	r3, #1
 8009718:	d00c      	beq.n	8009734 <USBD_LL_SetupStage+0x56>
 800971a:	2b01      	cmp	r3, #1
 800971c:	d302      	bcc.n	8009724 <USBD_LL_SetupStage+0x46>
 800971e:	2b02      	cmp	r3, #2
 8009720:	d010      	beq.n	8009744 <USBD_LL_SetupStage+0x66>
 8009722:	e017      	b.n	8009754 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800972a:	4619      	mov	r1, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f9cb 	bl	8009ac8 <USBD_StdDevReq>
      break;
 8009732:	e01a      	b.n	800976a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800973a:	4619      	mov	r1, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fa2d 	bl	8009b9c <USBD_StdItfReq>
      break;
 8009742:	e012      	b.n	800976a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800974a:	4619      	mov	r1, r3
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fa6b 	bl	8009c28 <USBD_StdEPReq>
      break;
 8009752:	e00a      	b.n	800976a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800975a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800975e:	b2db      	uxtb	r3, r3
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f001 fb2a 	bl	800adbc <USBD_LL_StallEP>
      break;
 8009768:	bf00      	nop
  }

  return USBD_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	460b      	mov	r3, r1
 800977e:	607a      	str	r2, [r7, #4]
 8009780:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009782:	7afb      	ldrb	r3, [r7, #11]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d14b      	bne.n	8009820 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800978e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009796:	2b03      	cmp	r3, #3
 8009798:	d134      	bne.n	8009804 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	68da      	ldr	r2, [r3, #12]
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d919      	bls.n	80097da <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	1ad2      	subs	r2, r2, r3
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	68da      	ldr	r2, [r3, #12]
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80097bc:	429a      	cmp	r2, r3
 80097be:	d203      	bcs.n	80097c8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	e002      	b.n	80097ce <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	461a      	mov	r2, r3
 80097d0:	6879      	ldr	r1, [r7, #4]
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 ff4c 	bl	800a670 <USBD_CtlContinueRx>
 80097d8:	e038      	b.n	800984c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00a      	beq.n	80097fc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d105      	bne.n	80097fc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 ff49 	bl	800a694 <USBD_CtlSendStatus>
 8009802:	e023      	b.n	800984c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800980a:	2b05      	cmp	r3, #5
 800980c:	d11e      	bne.n	800984c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009816:	2100      	movs	r1, #0
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f001 facf 	bl	800adbc <USBD_LL_StallEP>
 800981e:	e015      	b.n	800984c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00d      	beq.n	8009848 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009832:	2b03      	cmp	r3, #3
 8009834:	d108      	bne.n	8009848 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	7afa      	ldrb	r2, [r7, #11]
 8009840:	4611      	mov	r1, r2
 8009842:	68f8      	ldr	r0, [r7, #12]
 8009844:	4798      	blx	r3
 8009846:	e001      	b.n	800984c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009848:	2302      	movs	r3, #2
 800984a:	e000      	b.n	800984e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3718      	adds	r7, #24
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b086      	sub	sp, #24
 800985a:	af00      	add	r7, sp, #0
 800985c:	60f8      	str	r0, [r7, #12]
 800985e:	460b      	mov	r3, r1
 8009860:	607a      	str	r2, [r7, #4]
 8009862:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009864:	7afb      	ldrb	r3, [r7, #11]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d17f      	bne.n	800996a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	3314      	adds	r3, #20
 800986e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009876:	2b02      	cmp	r3, #2
 8009878:	d15c      	bne.n	8009934 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	68da      	ldr	r2, [r3, #12]
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	429a      	cmp	r2, r3
 8009884:	d915      	bls.n	80098b2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	68da      	ldr	r2, [r3, #12]
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	1ad2      	subs	r2, r2, r3
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	b29b      	uxth	r3, r3
 800989a:	461a      	mov	r2, r3
 800989c:	6879      	ldr	r1, [r7, #4]
 800989e:	68f8      	ldr	r0, [r7, #12]
 80098a0:	f000 feb6 	bl	800a610 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098a4:	2300      	movs	r3, #0
 80098a6:	2200      	movs	r2, #0
 80098a8:	2100      	movs	r1, #0
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f001 fb32 	bl	800af14 <USBD_LL_PrepareReceive>
 80098b0:	e04e      	b.n	8009950 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	6912      	ldr	r2, [r2, #16]
 80098ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80098be:	fb02 f201 	mul.w	r2, r2, r1
 80098c2:	1a9b      	subs	r3, r3, r2
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d11c      	bne.n	8009902 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	689a      	ldr	r2, [r3, #8]
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d316      	bcc.n	8009902 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	689a      	ldr	r2, [r3, #8]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80098de:	429a      	cmp	r2, r3
 80098e0:	d20f      	bcs.n	8009902 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80098e2:	2200      	movs	r2, #0
 80098e4:	2100      	movs	r1, #0
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f000 fe92 	bl	800a610 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098f4:	2300      	movs	r3, #0
 80098f6:	2200      	movs	r2, #0
 80098f8:	2100      	movs	r1, #0
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f001 fb0a 	bl	800af14 <USBD_LL_PrepareReceive>
 8009900:	e026      	b.n	8009950 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00a      	beq.n	8009924 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009914:	2b03      	cmp	r3, #3
 8009916:	d105      	bne.n	8009924 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009924:	2180      	movs	r1, #128	; 0x80
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f001 fa48 	bl	800adbc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f000 fec4 	bl	800a6ba <USBD_CtlReceiveStatus>
 8009932:	e00d      	b.n	8009950 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800993a:	2b04      	cmp	r3, #4
 800993c:	d004      	beq.n	8009948 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009944:	2b00      	cmp	r3, #0
 8009946:	d103      	bne.n	8009950 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009948:	2180      	movs	r1, #128	; 0x80
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f001 fa36 	bl	800adbc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009956:	2b01      	cmp	r3, #1
 8009958:	d11d      	bne.n	8009996 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f7ff fe83 	bl	8009666 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009968:	e015      	b.n	8009996 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00d      	beq.n	8009992 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800997c:	2b03      	cmp	r3, #3
 800997e:	d108      	bne.n	8009992 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009986:	695b      	ldr	r3, [r3, #20]
 8009988:	7afa      	ldrb	r2, [r7, #11]
 800998a:	4611      	mov	r1, r2
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	4798      	blx	r3
 8009990:	e001      	b.n	8009996 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009992:	2302      	movs	r3, #2
 8009994:	e000      	b.n	8009998 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3718      	adds	r7, #24
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80099a8:	2340      	movs	r3, #64	; 0x40
 80099aa:	2200      	movs	r2, #0
 80099ac:	2100      	movs	r1, #0
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f001 f9bf 	bl	800ad32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2240      	movs	r2, #64	; 0x40
 80099c0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80099c4:	2340      	movs	r3, #64	; 0x40
 80099c6:	2200      	movs	r2, #0
 80099c8:	2180      	movs	r1, #128	; 0x80
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f001 f9b1 	bl	800ad32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2240      	movs	r2, #64	; 0x40
 80099da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d009      	beq.n	8009a18 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	6852      	ldr	r2, [r2, #4]
 8009a10:	b2d2      	uxtb	r2, r2
 8009a12:	4611      	mov	r1, r2
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	4798      	blx	r3
  }

  return USBD_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009a22:	b480      	push	{r7}
 8009a24:	b083      	sub	sp, #12
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	78fa      	ldrb	r2, [r7, #3]
 8009a32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bc80      	pop	{r7}
 8009a3e:	4770      	bx	lr

08009a40 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2204      	movs	r2, #4
 8009a58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bc80      	pop	{r7}
 8009a66:	4770      	bx	lr

08009a68 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a76:	2b04      	cmp	r3, #4
 8009a78:	d105      	bne.n	8009a86 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bc80      	pop	{r7}
 8009a90:	4770      	bx	lr

08009a92 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b082      	sub	sp, #8
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa0:	2b03      	cmp	r3, #3
 8009aa2:	d10b      	bne.n	8009abc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aaa:	69db      	ldr	r3, [r3, #28]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d005      	beq.n	8009abc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab6:	69db      	ldr	r3, [r3, #28]
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
	...

08009ac8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ade:	2b20      	cmp	r3, #32
 8009ae0:	d004      	beq.n	8009aec <USBD_StdDevReq+0x24>
 8009ae2:	2b40      	cmp	r3, #64	; 0x40
 8009ae4:	d002      	beq.n	8009aec <USBD_StdDevReq+0x24>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d008      	beq.n	8009afc <USBD_StdDevReq+0x34>
 8009aea:	e04c      	b.n	8009b86 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	6839      	ldr	r1, [r7, #0]
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	4798      	blx	r3
      break;
 8009afa:	e049      	b.n	8009b90 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	785b      	ldrb	r3, [r3, #1]
 8009b00:	2b09      	cmp	r3, #9
 8009b02:	d83a      	bhi.n	8009b7a <USBD_StdDevReq+0xb2>
 8009b04:	a201      	add	r2, pc, #4	; (adr r2, 8009b0c <USBD_StdDevReq+0x44>)
 8009b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0a:	bf00      	nop
 8009b0c:	08009b5d 	.word	0x08009b5d
 8009b10:	08009b71 	.word	0x08009b71
 8009b14:	08009b7b 	.word	0x08009b7b
 8009b18:	08009b67 	.word	0x08009b67
 8009b1c:	08009b7b 	.word	0x08009b7b
 8009b20:	08009b3f 	.word	0x08009b3f
 8009b24:	08009b35 	.word	0x08009b35
 8009b28:	08009b7b 	.word	0x08009b7b
 8009b2c:	08009b53 	.word	0x08009b53
 8009b30:	08009b49 	.word	0x08009b49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b34:	6839      	ldr	r1, [r7, #0]
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f9d4 	bl	8009ee4 <USBD_GetDescriptor>
          break;
 8009b3c:	e022      	b.n	8009b84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fb37 	bl	800a1b4 <USBD_SetAddress>
          break;
 8009b46:	e01d      	b.n	8009b84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fb74 	bl	800a238 <USBD_SetConfig>
          break;
 8009b50:	e018      	b.n	8009b84 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b52:	6839      	ldr	r1, [r7, #0]
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fbfd 	bl	800a354 <USBD_GetConfig>
          break;
 8009b5a:	e013      	b.n	8009b84 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fc2c 	bl	800a3bc <USBD_GetStatus>
          break;
 8009b64:	e00e      	b.n	8009b84 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b66:	6839      	ldr	r1, [r7, #0]
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 fc5a 	bl	800a422 <USBD_SetFeature>
          break;
 8009b6e:	e009      	b.n	8009b84 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fc69 	bl	800a44a <USBD_ClrFeature>
          break;
 8009b78:	e004      	b.n	8009b84 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fcc1 	bl	800a504 <USBD_CtlError>
          break;
 8009b82:	bf00      	nop
      }
      break;
 8009b84:	e004      	b.n	8009b90 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009b86:	6839      	ldr	r1, [r7, #0]
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 fcbb 	bl	800a504 <USBD_CtlError>
      break;
 8009b8e:	bf00      	nop
  }

  return ret;
 8009b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop

08009b9c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bb2:	2b20      	cmp	r3, #32
 8009bb4:	d003      	beq.n	8009bbe <USBD_StdItfReq+0x22>
 8009bb6:	2b40      	cmp	r3, #64	; 0x40
 8009bb8:	d001      	beq.n	8009bbe <USBD_StdItfReq+0x22>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d12a      	bne.n	8009c14 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d81d      	bhi.n	8009c06 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	889b      	ldrh	r3, [r3, #4]
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d813      	bhi.n	8009bfc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	4798      	blx	r3
 8009be2:	4603      	mov	r3, r0
 8009be4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	88db      	ldrh	r3, [r3, #6]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d110      	bne.n	8009c10 <USBD_StdItfReq+0x74>
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10d      	bne.n	8009c10 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 fd4d 	bl	800a694 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009bfa:	e009      	b.n	8009c10 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8009bfc:	6839      	ldr	r1, [r7, #0]
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fc80 	bl	800a504 <USBD_CtlError>
          break;
 8009c04:	e004      	b.n	8009c10 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8009c06:	6839      	ldr	r1, [r7, #0]
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 fc7b 	bl	800a504 <USBD_CtlError>
          break;
 8009c0e:	e000      	b.n	8009c12 <USBD_StdItfReq+0x76>
          break;
 8009c10:	bf00      	nop
      }
      break;
 8009c12:	e004      	b.n	8009c1e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fc74 	bl	800a504 <USBD_CtlError>
      break;
 8009c1c:	bf00      	nop
  }

  return USBD_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c32:	2300      	movs	r3, #0
 8009c34:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	889b      	ldrh	r3, [r3, #4]
 8009c3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c44:	2b20      	cmp	r3, #32
 8009c46:	d004      	beq.n	8009c52 <USBD_StdEPReq+0x2a>
 8009c48:	2b40      	cmp	r3, #64	; 0x40
 8009c4a:	d002      	beq.n	8009c52 <USBD_StdEPReq+0x2a>
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d008      	beq.n	8009c62 <USBD_StdEPReq+0x3a>
 8009c50:	e13d      	b.n	8009ece <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	6839      	ldr	r1, [r7, #0]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	4798      	blx	r3
      break;
 8009c60:	e13a      	b.n	8009ed8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c6a:	2b20      	cmp	r3, #32
 8009c6c:	d10a      	bne.n	8009c84 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	6839      	ldr	r1, [r7, #0]
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	4798      	blx	r3
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
 8009c82:	e12a      	b.n	8009eda <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	785b      	ldrb	r3, [r3, #1]
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d03e      	beq.n	8009d0a <USBD_StdEPReq+0xe2>
 8009c8c:	2b03      	cmp	r3, #3
 8009c8e:	d002      	beq.n	8009c96 <USBD_StdEPReq+0x6e>
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d070      	beq.n	8009d76 <USBD_StdEPReq+0x14e>
 8009c94:	e115      	b.n	8009ec2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d002      	beq.n	8009ca6 <USBD_StdEPReq+0x7e>
 8009ca0:	2b03      	cmp	r3, #3
 8009ca2:	d015      	beq.n	8009cd0 <USBD_StdEPReq+0xa8>
 8009ca4:	e02b      	b.n	8009cfe <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ca6:	7bbb      	ldrb	r3, [r7, #14]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00c      	beq.n	8009cc6 <USBD_StdEPReq+0x9e>
 8009cac:	7bbb      	ldrb	r3, [r7, #14]
 8009cae:	2b80      	cmp	r3, #128	; 0x80
 8009cb0:	d009      	beq.n	8009cc6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009cb2:	7bbb      	ldrb	r3, [r7, #14]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f001 f880 	bl	800adbc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009cbc:	2180      	movs	r1, #128	; 0x80
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f001 f87c 	bl	800adbc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009cc4:	e020      	b.n	8009d08 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fc1b 	bl	800a504 <USBD_CtlError>
              break;
 8009cce:	e01b      	b.n	8009d08 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	885b      	ldrh	r3, [r3, #2]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10e      	bne.n	8009cf6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00b      	beq.n	8009cf6 <USBD_StdEPReq+0xce>
 8009cde:	7bbb      	ldrb	r3, [r7, #14]
 8009ce0:	2b80      	cmp	r3, #128	; 0x80
 8009ce2:	d008      	beq.n	8009cf6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	88db      	ldrh	r3, [r3, #6]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d104      	bne.n	8009cf6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009cec:	7bbb      	ldrb	r3, [r7, #14]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f001 f863 	bl	800adbc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fccc 	bl	800a694 <USBD_CtlSendStatus>

              break;
 8009cfc:	e004      	b.n	8009d08 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fbff 	bl	800a504 <USBD_CtlError>
              break;
 8009d06:	bf00      	nop
          }
          break;
 8009d08:	e0e0      	b.n	8009ecc <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d002      	beq.n	8009d1a <USBD_StdEPReq+0xf2>
 8009d14:	2b03      	cmp	r3, #3
 8009d16:	d015      	beq.n	8009d44 <USBD_StdEPReq+0x11c>
 8009d18:	e026      	b.n	8009d68 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d1a:	7bbb      	ldrb	r3, [r7, #14]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d00c      	beq.n	8009d3a <USBD_StdEPReq+0x112>
 8009d20:	7bbb      	ldrb	r3, [r7, #14]
 8009d22:	2b80      	cmp	r3, #128	; 0x80
 8009d24:	d009      	beq.n	8009d3a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009d26:	7bbb      	ldrb	r3, [r7, #14]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f001 f846 	bl	800adbc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009d30:	2180      	movs	r1, #128	; 0x80
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f001 f842 	bl	800adbc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d38:	e01c      	b.n	8009d74 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8009d3a:	6839      	ldr	r1, [r7, #0]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 fbe1 	bl	800a504 <USBD_CtlError>
              break;
 8009d42:	e017      	b.n	8009d74 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	885b      	ldrh	r3, [r3, #2]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d112      	bne.n	8009d72 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
 8009d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d004      	beq.n	8009d60 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d56:	7bbb      	ldrb	r3, [r7, #14]
 8009d58:	4619      	mov	r1, r3
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f001 f84d 	bl	800adfa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fc97 	bl	800a694 <USBD_CtlSendStatus>
              }
              break;
 8009d66:	e004      	b.n	8009d72 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8009d68:	6839      	ldr	r1, [r7, #0]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fbca 	bl	800a504 <USBD_CtlError>
              break;
 8009d70:	e000      	b.n	8009d74 <USBD_StdEPReq+0x14c>
              break;
 8009d72:	bf00      	nop
          }
          break;
 8009d74:	e0aa      	b.n	8009ecc <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d002      	beq.n	8009d86 <USBD_StdEPReq+0x15e>
 8009d80:	2b03      	cmp	r3, #3
 8009d82:	d032      	beq.n	8009dea <USBD_StdEPReq+0x1c2>
 8009d84:	e097      	b.n	8009eb6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d86:	7bbb      	ldrb	r3, [r7, #14]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d007      	beq.n	8009d9c <USBD_StdEPReq+0x174>
 8009d8c:	7bbb      	ldrb	r3, [r7, #14]
 8009d8e:	2b80      	cmp	r3, #128	; 0x80
 8009d90:	d004      	beq.n	8009d9c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fbb5 	bl	800a504 <USBD_CtlError>
                break;
 8009d9a:	e091      	b.n	8009ec0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	da0b      	bge.n	8009dbc <USBD_StdEPReq+0x194>
 8009da4:	7bbb      	ldrb	r3, [r7, #14]
 8009da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009daa:	4613      	mov	r3, r2
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	4413      	add	r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	3310      	adds	r3, #16
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	4413      	add	r3, r2
 8009db8:	3304      	adds	r3, #4
 8009dba:	e00b      	b.n	8009dd4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
 8009dbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4413      	add	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	2202      	movs	r2, #2
 8009de0:	4619      	mov	r1, r3
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 fbf8 	bl	800a5d8 <USBD_CtlSendData>
              break;
 8009de8:	e06a      	b.n	8009ec0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009dea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	da11      	bge.n	8009e16 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009df2:	7bbb      	ldrb	r3, [r7, #14]
 8009df4:	f003 020f 	and.w	r2, r3, #15
 8009df8:	6879      	ldr	r1, [r7, #4]
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4413      	add	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	440b      	add	r3, r1
 8009e04:	3318      	adds	r3, #24
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d117      	bne.n	8009e3c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fb78 	bl	800a504 <USBD_CtlError>
                  break;
 8009e14:	e054      	b.n	8009ec0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	f003 020f 	and.w	r2, r3, #15
 8009e1c:	6879      	ldr	r1, [r7, #4]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4413      	add	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	440b      	add	r3, r1
 8009e28:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d104      	bne.n	8009e3c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009e32:	6839      	ldr	r1, [r7, #0]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fb65 	bl	800a504 <USBD_CtlError>
                  break;
 8009e3a:	e041      	b.n	8009ec0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	da0b      	bge.n	8009e5c <USBD_StdEPReq+0x234>
 8009e44:	7bbb      	ldrb	r3, [r7, #14]
 8009e46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	3310      	adds	r3, #16
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	4413      	add	r3, r2
 8009e58:	3304      	adds	r3, #4
 8009e5a:	e00b      	b.n	8009e74 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e5c:	7bbb      	ldrb	r3, [r7, #14]
 8009e5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e62:	4613      	mov	r3, r2
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	4413      	add	r3, r2
 8009e72:	3304      	adds	r3, #4
 8009e74:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e76:	7bbb      	ldrb	r3, [r7, #14]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <USBD_StdEPReq+0x25a>
 8009e7c:	7bbb      	ldrb	r3, [r7, #14]
 8009e7e:	2b80      	cmp	r3, #128	; 0x80
 8009e80:	d103      	bne.n	8009e8a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	2200      	movs	r2, #0
 8009e86:	601a      	str	r2, [r3, #0]
 8009e88:	e00e      	b.n	8009ea8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009e8a:	7bbb      	ldrb	r3, [r7, #14]
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 ffd2 	bl	800ae38 <USBD_LL_IsStallEP>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d003      	beq.n	8009ea2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	601a      	str	r2, [r3, #0]
 8009ea0:	e002      	b.n	8009ea8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	2202      	movs	r2, #2
 8009eac:	4619      	mov	r1, r3
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fb92 	bl	800a5d8 <USBD_CtlSendData>
              break;
 8009eb4:	e004      	b.n	8009ec0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fb23 	bl	800a504 <USBD_CtlError>
              break;
 8009ebe:	bf00      	nop
          }
          break;
 8009ec0:	e004      	b.n	8009ecc <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8009ec2:	6839      	ldr	r1, [r7, #0]
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fb1d 	bl	800a504 <USBD_CtlError>
          break;
 8009eca:	bf00      	nop
      }
      break;
 8009ecc:	e004      	b.n	8009ed8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fb17 	bl	800a504 <USBD_CtlError>
      break;
 8009ed6:	bf00      	nop
  }

  return ret;
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
	...

08009ee4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	885b      	ldrh	r3, [r3, #2]
 8009efe:	0a1b      	lsrs	r3, r3, #8
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	3b01      	subs	r3, #1
 8009f04:	2b06      	cmp	r3, #6
 8009f06:	f200 8128 	bhi.w	800a15a <USBD_GetDescriptor+0x276>
 8009f0a:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <USBD_GetDescriptor+0x2c>)
 8009f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f10:	08009f2d 	.word	0x08009f2d
 8009f14:	08009f45 	.word	0x08009f45
 8009f18:	08009f85 	.word	0x08009f85
 8009f1c:	0800a15b 	.word	0x0800a15b
 8009f20:	0800a15b 	.word	0x0800a15b
 8009f24:	0800a0fb 	.word	0x0800a0fb
 8009f28:	0800a127 	.word	0x0800a127
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	7c12      	ldrb	r2, [r2, #16]
 8009f38:	f107 0108 	add.w	r1, r7, #8
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	4798      	blx	r3
 8009f40:	60f8      	str	r0, [r7, #12]
      break;
 8009f42:	e112      	b.n	800a16a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	7c1b      	ldrb	r3, [r3, #16]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10d      	bne.n	8009f68 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f54:	f107 0208 	add.w	r2, r7, #8
 8009f58:	4610      	mov	r0, r2
 8009f5a:	4798      	blx	r3
 8009f5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	3301      	adds	r3, #1
 8009f62:	2202      	movs	r2, #2
 8009f64:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009f66:	e100      	b.n	800a16a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f70:	f107 0208 	add.w	r2, r7, #8
 8009f74:	4610      	mov	r0, r2
 8009f76:	4798      	blx	r3
 8009f78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	2202      	movs	r2, #2
 8009f80:	701a      	strb	r2, [r3, #0]
      break;
 8009f82:	e0f2      	b.n	800a16a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	885b      	ldrh	r3, [r3, #2]
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b05      	cmp	r3, #5
 8009f8c:	f200 80ac 	bhi.w	800a0e8 <USBD_GetDescriptor+0x204>
 8009f90:	a201      	add	r2, pc, #4	; (adr r2, 8009f98 <USBD_GetDescriptor+0xb4>)
 8009f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f96:	bf00      	nop
 8009f98:	08009fb1 	.word	0x08009fb1
 8009f9c:	08009fe5 	.word	0x08009fe5
 8009fa0:	0800a019 	.word	0x0800a019
 8009fa4:	0800a04d 	.word	0x0800a04d
 8009fa8:	0800a081 	.word	0x0800a081
 8009fac:	0800a0b5 	.word	0x0800a0b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00b      	beq.n	8009fd4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	7c12      	ldrb	r2, [r2, #16]
 8009fc8:	f107 0108 	add.w	r1, r7, #8
 8009fcc:	4610      	mov	r0, r2
 8009fce:	4798      	blx	r3
 8009fd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fd2:	e091      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fd4:	6839      	ldr	r1, [r7, #0]
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 fa94 	bl	800a504 <USBD_CtlError>
            err++;
 8009fdc:	7afb      	ldrb	r3, [r7, #11]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	72fb      	strb	r3, [r7, #11]
          break;
 8009fe2:	e089      	b.n	800a0f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00b      	beq.n	800a008 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	7c12      	ldrb	r2, [r2, #16]
 8009ffc:	f107 0108 	add.w	r1, r7, #8
 800a000:	4610      	mov	r0, r2
 800a002:	4798      	blx	r3
 800a004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a006:	e077      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fa7a 	bl	800a504 <USBD_CtlError>
            err++;
 800a010:	7afb      	ldrb	r3, [r7, #11]
 800a012:	3301      	adds	r3, #1
 800a014:	72fb      	strb	r3, [r7, #11]
          break;
 800a016:	e06f      	b.n	800a0f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00b      	beq.n	800a03c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	7c12      	ldrb	r2, [r2, #16]
 800a030:	f107 0108 	add.w	r1, r7, #8
 800a034:	4610      	mov	r0, r2
 800a036:	4798      	blx	r3
 800a038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a03a:	e05d      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a03c:	6839      	ldr	r1, [r7, #0]
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fa60 	bl	800a504 <USBD_CtlError>
            err++;
 800a044:	7afb      	ldrb	r3, [r7, #11]
 800a046:	3301      	adds	r3, #1
 800a048:	72fb      	strb	r3, [r7, #11]
          break;
 800a04a:	e055      	b.n	800a0f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00b      	beq.n	800a070 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	7c12      	ldrb	r2, [r2, #16]
 800a064:	f107 0108 	add.w	r1, r7, #8
 800a068:	4610      	mov	r0, r2
 800a06a:	4798      	blx	r3
 800a06c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a06e:	e043      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fa46 	bl	800a504 <USBD_CtlError>
            err++;
 800a078:	7afb      	ldrb	r3, [r7, #11]
 800a07a:	3301      	adds	r3, #1
 800a07c:	72fb      	strb	r3, [r7, #11]
          break;
 800a07e:	e03b      	b.n	800a0f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00b      	beq.n	800a0a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a092:	695b      	ldr	r3, [r3, #20]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	7c12      	ldrb	r2, [r2, #16]
 800a098:	f107 0108 	add.w	r1, r7, #8
 800a09c:	4610      	mov	r0, r2
 800a09e:	4798      	blx	r3
 800a0a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0a2:	e029      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0a4:	6839      	ldr	r1, [r7, #0]
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fa2c 	bl	800a504 <USBD_CtlError>
            err++;
 800a0ac:	7afb      	ldrb	r3, [r7, #11]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0b2:	e021      	b.n	800a0f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00b      	beq.n	800a0d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	7c12      	ldrb	r2, [r2, #16]
 800a0cc:	f107 0108 	add.w	r1, r7, #8
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4798      	blx	r3
 800a0d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0d6:	e00f      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fa12 	bl	800a504 <USBD_CtlError>
            err++;
 800a0e0:	7afb      	ldrb	r3, [r7, #11]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0e6:	e007      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fa0a 	bl	800a504 <USBD_CtlError>
          err++;
 800a0f0:	7afb      	ldrb	r3, [r7, #11]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a0f6:	e038      	b.n	800a16a <USBD_GetDescriptor+0x286>
 800a0f8:	e037      	b.n	800a16a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	7c1b      	ldrb	r3, [r3, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d109      	bne.n	800a116 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a10a:	f107 0208 	add.w	r2, r7, #8
 800a10e:	4610      	mov	r0, r2
 800a110:	4798      	blx	r3
 800a112:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a114:	e029      	b.n	800a16a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a116:	6839      	ldr	r1, [r7, #0]
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 f9f3 	bl	800a504 <USBD_CtlError>
        err++;
 800a11e:	7afb      	ldrb	r3, [r7, #11]
 800a120:	3301      	adds	r3, #1
 800a122:	72fb      	strb	r3, [r7, #11]
      break;
 800a124:	e021      	b.n	800a16a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	7c1b      	ldrb	r3, [r3, #16]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10d      	bne.n	800a14a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a136:	f107 0208 	add.w	r2, r7, #8
 800a13a:	4610      	mov	r0, r2
 800a13c:	4798      	blx	r3
 800a13e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	3301      	adds	r3, #1
 800a144:	2207      	movs	r2, #7
 800a146:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a148:	e00f      	b.n	800a16a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a14a:	6839      	ldr	r1, [r7, #0]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 f9d9 	bl	800a504 <USBD_CtlError>
        err++;
 800a152:	7afb      	ldrb	r3, [r7, #11]
 800a154:	3301      	adds	r3, #1
 800a156:	72fb      	strb	r3, [r7, #11]
      break;
 800a158:	e007      	b.n	800a16a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a15a:	6839      	ldr	r1, [r7, #0]
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f9d1 	bl	800a504 <USBD_CtlError>
      err++;
 800a162:	7afb      	ldrb	r3, [r7, #11]
 800a164:	3301      	adds	r3, #1
 800a166:	72fb      	strb	r3, [r7, #11]
      break;
 800a168:	bf00      	nop
  }

  if (err != 0U)
 800a16a:	7afb      	ldrb	r3, [r7, #11]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d11c      	bne.n	800a1aa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a170:	893b      	ldrh	r3, [r7, #8]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d011      	beq.n	800a19a <USBD_GetDescriptor+0x2b6>
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	88db      	ldrh	r3, [r3, #6]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00d      	beq.n	800a19a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	88da      	ldrh	r2, [r3, #6]
 800a182:	893b      	ldrh	r3, [r7, #8]
 800a184:	4293      	cmp	r3, r2
 800a186:	bf28      	it	cs
 800a188:	4613      	movcs	r3, r2
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a18e:	893b      	ldrh	r3, [r7, #8]
 800a190:	461a      	mov	r2, r3
 800a192:	68f9      	ldr	r1, [r7, #12]
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 fa1f 	bl	800a5d8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	88db      	ldrh	r3, [r3, #6]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d104      	bne.n	800a1ac <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fa76 	bl	800a694 <USBD_CtlSendStatus>
 800a1a8:	e000      	b.n	800a1ac <USBD_GetDescriptor+0x2c8>
    return;
 800a1aa:	bf00      	nop
    }
  }
}
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop

0800a1b4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	889b      	ldrh	r3, [r3, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d130      	bne.n	800a228 <USBD_SetAddress+0x74>
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	88db      	ldrh	r3, [r3, #6]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d12c      	bne.n	800a228 <USBD_SetAddress+0x74>
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	885b      	ldrh	r3, [r3, #2]
 800a1d2:	2b7f      	cmp	r3, #127	; 0x7f
 800a1d4:	d828      	bhi.n	800a228 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	885b      	ldrh	r3, [r3, #2]
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1e8:	2b03      	cmp	r3, #3
 800a1ea:	d104      	bne.n	800a1f6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f988 	bl	800a504 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f4:	e01c      	b.n	800a230 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	7bfa      	ldrb	r2, [r7, #15]
 800a1fa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a1fe:	7bfb      	ldrb	r3, [r7, #15]
 800a200:	4619      	mov	r1, r3
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fe44 	bl	800ae90 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fa43 	bl	800a694 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d004      	beq.n	800a21e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2202      	movs	r2, #2
 800a218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a21c:	e008      	b.n	800a230 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a226:	e003      	b.n	800a230 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a228:	6839      	ldr	r1, [r7, #0]
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 f96a 	bl	800a504 <USBD_CtlError>
  }
}
 800a230:	bf00      	nop
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	885b      	ldrh	r3, [r3, #2]
 800a246:	b2da      	uxtb	r2, r3
 800a248:	4b41      	ldr	r3, [pc, #260]	; (800a350 <USBD_SetConfig+0x118>)
 800a24a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a24c:	4b40      	ldr	r3, [pc, #256]	; (800a350 <USBD_SetConfig+0x118>)
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d904      	bls.n	800a25e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a254:	6839      	ldr	r1, [r7, #0]
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 f954 	bl	800a504 <USBD_CtlError>
 800a25c:	e075      	b.n	800a34a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a264:	2b02      	cmp	r3, #2
 800a266:	d002      	beq.n	800a26e <USBD_SetConfig+0x36>
 800a268:	2b03      	cmp	r3, #3
 800a26a:	d023      	beq.n	800a2b4 <USBD_SetConfig+0x7c>
 800a26c:	e062      	b.n	800a334 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a26e:	4b38      	ldr	r3, [pc, #224]	; (800a350 <USBD_SetConfig+0x118>)
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d01a      	beq.n	800a2ac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a276:	4b36      	ldr	r3, [pc, #216]	; (800a350 <USBD_SetConfig+0x118>)
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	461a      	mov	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2203      	movs	r2, #3
 800a284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a288:	4b31      	ldr	r3, [pc, #196]	; (800a350 <USBD_SetConfig+0x118>)
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	4619      	mov	r1, r3
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f7ff f9f3 	bl	800967a <USBD_SetClassConfig>
 800a294:	4603      	mov	r3, r0
 800a296:	2b02      	cmp	r3, #2
 800a298:	d104      	bne.n	800a2a4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a29a:	6839      	ldr	r1, [r7, #0]
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 f931 	bl	800a504 <USBD_CtlError>
            return;
 800a2a2:	e052      	b.n	800a34a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 f9f5 	bl	800a694 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a2aa:	e04e      	b.n	800a34a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f9f1 	bl	800a694 <USBD_CtlSendStatus>
        break;
 800a2b2:	e04a      	b.n	800a34a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a2b4:	4b26      	ldr	r3, [pc, #152]	; (800a350 <USBD_SetConfig+0x118>)
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d112      	bne.n	800a2e2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2202      	movs	r2, #2
 800a2c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a2c4:	4b22      	ldr	r3, [pc, #136]	; (800a350 <USBD_SetConfig+0x118>)
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a2ce:	4b20      	ldr	r3, [pc, #128]	; (800a350 <USBD_SetConfig+0x118>)
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f7ff f9ef 	bl	80096b8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f9da 	bl	800a694 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a2e0:	e033      	b.n	800a34a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a2e2:	4b1b      	ldr	r3, [pc, #108]	; (800a350 <USBD_SetConfig+0x118>)
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d01d      	beq.n	800a32c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7ff f9dd 	bl	80096b8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a2fe:	4b14      	ldr	r3, [pc, #80]	; (800a350 <USBD_SetConfig+0x118>)
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a308:	4b11      	ldr	r3, [pc, #68]	; (800a350 <USBD_SetConfig+0x118>)
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	4619      	mov	r1, r3
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7ff f9b3 	bl	800967a <USBD_SetClassConfig>
 800a314:	4603      	mov	r3, r0
 800a316:	2b02      	cmp	r3, #2
 800a318:	d104      	bne.n	800a324 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a31a:	6839      	ldr	r1, [r7, #0]
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 f8f1 	bl	800a504 <USBD_CtlError>
            return;
 800a322:	e012      	b.n	800a34a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 f9b5 	bl	800a694 <USBD_CtlSendStatus>
        break;
 800a32a:	e00e      	b.n	800a34a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f9b1 	bl	800a694 <USBD_CtlSendStatus>
        break;
 800a332:	e00a      	b.n	800a34a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 f8e4 	bl	800a504 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a33c:	4b04      	ldr	r3, [pc, #16]	; (800a350 <USBD_SetConfig+0x118>)
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	4619      	mov	r1, r3
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f7ff f9b8 	bl	80096b8 <USBD_ClrClassConfig>
        break;
 800a348:	bf00      	nop
    }
  }
}
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20000260 	.word	0x20000260

0800a354 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	88db      	ldrh	r3, [r3, #6]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d004      	beq.n	800a370 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a366:	6839      	ldr	r1, [r7, #0]
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f8cb 	bl	800a504 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a36e:	e021      	b.n	800a3b4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a376:	2b01      	cmp	r3, #1
 800a378:	db17      	blt.n	800a3aa <USBD_GetConfig+0x56>
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	dd02      	ble.n	800a384 <USBD_GetConfig+0x30>
 800a37e:	2b03      	cmp	r3, #3
 800a380:	d00b      	beq.n	800a39a <USBD_GetConfig+0x46>
 800a382:	e012      	b.n	800a3aa <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	3308      	adds	r3, #8
 800a38e:	2201      	movs	r2, #1
 800a390:	4619      	mov	r1, r3
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 f920 	bl	800a5d8 <USBD_CtlSendData>
        break;
 800a398:	e00c      	b.n	800a3b4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	3304      	adds	r3, #4
 800a39e:	2201      	movs	r2, #1
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f918 	bl	800a5d8 <USBD_CtlSendData>
        break;
 800a3a8:	e004      	b.n	800a3b4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f8a9 	bl	800a504 <USBD_CtlError>
        break;
 800a3b2:	bf00      	nop
}
 800a3b4:	bf00      	nop
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d81e      	bhi.n	800a410 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	88db      	ldrh	r3, [r3, #6]
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d004      	beq.n	800a3e4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a3da:	6839      	ldr	r1, [r7, #0]
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 f891 	bl	800a504 <USBD_CtlError>
        break;
 800a3e2:	e01a      	b.n	800a41a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d005      	beq.n	800a400 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	f043 0202 	orr.w	r2, r3, #2
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	330c      	adds	r3, #12
 800a404:	2202      	movs	r2, #2
 800a406:	4619      	mov	r1, r3
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 f8e5 	bl	800a5d8 <USBD_CtlSendData>
      break;
 800a40e:	e004      	b.n	800a41a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a410:	6839      	ldr	r1, [r7, #0]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f876 	bl	800a504 <USBD_CtlError>
      break;
 800a418:	bf00      	nop
  }
}
 800a41a:	bf00      	nop
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b082      	sub	sp, #8
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	885b      	ldrh	r3, [r3, #2]
 800a430:	2b01      	cmp	r3, #1
 800a432:	d106      	bne.n	800a442 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f929 	bl	800a694 <USBD_CtlSendStatus>
  }
}
 800a442:	bf00      	nop
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b082      	sub	sp, #8
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a45a:	3b01      	subs	r3, #1
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d80b      	bhi.n	800a478 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	885b      	ldrh	r3, [r3, #2]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d10c      	bne.n	800a482 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 f90f 	bl	800a694 <USBD_CtlSendStatus>
      }
      break;
 800a476:	e004      	b.n	800a482 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f842 	bl	800a504 <USBD_CtlError>
      break;
 800a480:	e000      	b.n	800a484 <USBD_ClrFeature+0x3a>
      break;
 800a482:	bf00      	nop
  }
}
 800a484:	bf00      	nop
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	781a      	ldrb	r2, [r3, #0]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	785a      	ldrb	r2, [r3, #1]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	3302      	adds	r3, #2
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	3303      	adds	r3, #3
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	021b      	lsls	r3, r3, #8
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	4413      	add	r3, r2
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	3305      	adds	r3, #5
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	021b      	lsls	r3, r3, #8
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	4413      	add	r3, r2
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	3306      	adds	r3, #6
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	3307      	adds	r3, #7
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	021b      	lsls	r3, r3, #8
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	4413      	add	r3, r2
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	80da      	strh	r2, [r3, #6]

}
 800a4fa:	bf00      	nop
 800a4fc:	370c      	adds	r7, #12
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bc80      	pop	{r7}
 800a502:	4770      	bx	lr

0800a504 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a50e:	2180      	movs	r1, #128	; 0x80
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 fc53 	bl	800adbc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a516:	2100      	movs	r1, #0
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 fc4f 	bl	800adbc <USBD_LL_StallEP>
}
 800a51e:	bf00      	nop
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b086      	sub	sp, #24
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	60f8      	str	r0, [r7, #12]
 800a52e:	60b9      	str	r1, [r7, #8]
 800a530:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a532:	2300      	movs	r3, #0
 800a534:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d032      	beq.n	800a5a2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f000 f834 	bl	800a5aa <USBD_GetLen>
 800a542:	4603      	mov	r3, r0
 800a544:	3301      	adds	r3, #1
 800a546:	b29b      	uxth	r3, r3
 800a548:	005b      	lsls	r3, r3, #1
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a550:	7dfb      	ldrb	r3, [r7, #23]
 800a552:	1c5a      	adds	r2, r3, #1
 800a554:	75fa      	strb	r2, [r7, #23]
 800a556:	461a      	mov	r2, r3
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	4413      	add	r3, r2
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	7812      	ldrb	r2, [r2, #0]
 800a560:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a562:	7dfb      	ldrb	r3, [r7, #23]
 800a564:	1c5a      	adds	r2, r3, #1
 800a566:	75fa      	strb	r2, [r7, #23]
 800a568:	461a      	mov	r2, r3
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	4413      	add	r3, r2
 800a56e:	2203      	movs	r2, #3
 800a570:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a572:	e012      	b.n	800a59a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	1c5a      	adds	r2, r3, #1
 800a578:	60fa      	str	r2, [r7, #12]
 800a57a:	7dfa      	ldrb	r2, [r7, #23]
 800a57c:	1c51      	adds	r1, r2, #1
 800a57e:	75f9      	strb	r1, [r7, #23]
 800a580:	4611      	mov	r1, r2
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	440a      	add	r2, r1
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a58a:	7dfb      	ldrb	r3, [r7, #23]
 800a58c:	1c5a      	adds	r2, r3, #1
 800a58e:	75fa      	strb	r2, [r7, #23]
 800a590:	461a      	mov	r2, r3
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	4413      	add	r3, r2
 800a596:	2200      	movs	r2, #0
 800a598:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1e8      	bne.n	800a574 <USBD_GetString+0x4e>
    }
  }
}
 800a5a2:	bf00      	nop
 800a5a4:	3718      	adds	r7, #24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b085      	sub	sp, #20
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a5b6:	e005      	b.n	800a5c4 <USBD_GetLen+0x1a>
  {
    len++;
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1f5      	bne.n	800a5b8 <USBD_GetLen+0xe>
  }

  return len;
 800a5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bc80      	pop	{r7}
 800a5d6:	4770      	bx	lr

0800a5d8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2202      	movs	r2, #2
 800a5ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a5ee:	88fa      	ldrh	r2, [r7, #6]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a5f4:	88fa      	ldrh	r2, [r7, #6]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5fa:	88fb      	ldrh	r3, [r7, #6]
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	2100      	movs	r1, #0
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f000 fc64 	bl	800aece <USBD_LL_Transmit>

  return USBD_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	4613      	mov	r3, r2
 800a61c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a61e:	88fb      	ldrh	r3, [r7, #6]
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	2100      	movs	r1, #0
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f000 fc52 	bl	800aece <USBD_LL_Transmit>

  return USBD_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	4613      	mov	r3, r2
 800a640:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2203      	movs	r2, #3
 800a646:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a64a:	88fa      	ldrh	r2, [r7, #6]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a652:	88fa      	ldrh	r2, [r7, #6]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a65a:	88fb      	ldrh	r3, [r7, #6]
 800a65c:	68ba      	ldr	r2, [r7, #8]
 800a65e:	2100      	movs	r1, #0
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f000 fc57 	bl	800af14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	4613      	mov	r3, r2
 800a67c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a67e:	88fb      	ldrh	r3, [r7, #6]
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	2100      	movs	r1, #0
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f000 fc45 	bl	800af14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2204      	movs	r2, #4
 800a6a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fc0f 	bl	800aece <USBD_LL_Transmit>

  return USBD_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b082      	sub	sp, #8
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2205      	movs	r2, #5
 800a6c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fc1f 	bl	800af14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	4912      	ldr	r1, [pc, #72]	; (800a730 <MX_USB_DEVICE_Init+0x50>)
 800a6e8:	4812      	ldr	r0, [pc, #72]	; (800a734 <MX_USB_DEVICE_Init+0x54>)
 800a6ea:	f7fe ff6c 	bl	80095c6 <USBD_Init>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d001      	beq.n	800a6f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a6f4:	f7f7 f84e 	bl	8001794 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a6f8:	490f      	ldr	r1, [pc, #60]	; (800a738 <MX_USB_DEVICE_Init+0x58>)
 800a6fa:	480e      	ldr	r0, [pc, #56]	; (800a734 <MX_USB_DEVICE_Init+0x54>)
 800a6fc:	f7fe ff8e 	bl	800961c <USBD_RegisterClass>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d001      	beq.n	800a70a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a706:	f7f7 f845 	bl	8001794 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a70a:	490c      	ldr	r1, [pc, #48]	; (800a73c <MX_USB_DEVICE_Init+0x5c>)
 800a70c:	4809      	ldr	r0, [pc, #36]	; (800a734 <MX_USB_DEVICE_Init+0x54>)
 800a70e:	f7fe febf 	bl	8009490 <USBD_CDC_RegisterInterface>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d001      	beq.n	800a71c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a718:	f7f7 f83c 	bl	8001794 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a71c:	4805      	ldr	r0, [pc, #20]	; (800a734 <MX_USB_DEVICE_Init+0x54>)
 800a71e:	f7fe ff96 	bl	800964e <USBD_Start>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d001      	beq.n	800a72c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a728:	f7f7 f834 	bl	8001794 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a72c:	bf00      	nop
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	20000150 	.word	0x20000150
 800a734:	20000704 	.word	0x20000704
 800a738:	2000003c 	.word	0x2000003c
 800a73c:	20000140 	.word	0x20000140

0800a740 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a744:	2200      	movs	r2, #0
 800a746:	4905      	ldr	r1, [pc, #20]	; (800a75c <CDC_Init_FS+0x1c>)
 800a748:	4805      	ldr	r0, [pc, #20]	; (800a760 <CDC_Init_FS+0x20>)
 800a74a:	f7fe feb7 	bl	80094bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a74e:	4905      	ldr	r1, [pc, #20]	; (800a764 <CDC_Init_FS+0x24>)
 800a750:	4803      	ldr	r0, [pc, #12]	; (800a760 <CDC_Init_FS+0x20>)
 800a752:	f7fe fecc 	bl	80094ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a756:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a758:	4618      	mov	r0, r3
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	20000db0 	.word	0x20000db0
 800a760:	20000704 	.word	0x20000704
 800a764:	200009c8 	.word	0x200009c8

0800a768 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a768:	b480      	push	{r7}
 800a76a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a76c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a76e:	4618      	mov	r0, r3
 800a770:	46bd      	mov	sp, r7
 800a772:	bc80      	pop	{r7}
 800a774:	4770      	bx	lr
	...

0800a778 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	4603      	mov	r3, r0
 800a780:	6039      	str	r1, [r7, #0]
 800a782:	71fb      	strb	r3, [r7, #7]
 800a784:	4613      	mov	r3, r2
 800a786:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a788:	79fb      	ldrb	r3, [r7, #7]
 800a78a:	2b23      	cmp	r3, #35	; 0x23
 800a78c:	d84a      	bhi.n	800a824 <CDC_Control_FS+0xac>
 800a78e:	a201      	add	r2, pc, #4	; (adr r2, 800a794 <CDC_Control_FS+0x1c>)
 800a790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a794:	0800a825 	.word	0x0800a825
 800a798:	0800a825 	.word	0x0800a825
 800a79c:	0800a825 	.word	0x0800a825
 800a7a0:	0800a825 	.word	0x0800a825
 800a7a4:	0800a825 	.word	0x0800a825
 800a7a8:	0800a825 	.word	0x0800a825
 800a7ac:	0800a825 	.word	0x0800a825
 800a7b0:	0800a825 	.word	0x0800a825
 800a7b4:	0800a825 	.word	0x0800a825
 800a7b8:	0800a825 	.word	0x0800a825
 800a7bc:	0800a825 	.word	0x0800a825
 800a7c0:	0800a825 	.word	0x0800a825
 800a7c4:	0800a825 	.word	0x0800a825
 800a7c8:	0800a825 	.word	0x0800a825
 800a7cc:	0800a825 	.word	0x0800a825
 800a7d0:	0800a825 	.word	0x0800a825
 800a7d4:	0800a825 	.word	0x0800a825
 800a7d8:	0800a825 	.word	0x0800a825
 800a7dc:	0800a825 	.word	0x0800a825
 800a7e0:	0800a825 	.word	0x0800a825
 800a7e4:	0800a825 	.word	0x0800a825
 800a7e8:	0800a825 	.word	0x0800a825
 800a7ec:	0800a825 	.word	0x0800a825
 800a7f0:	0800a825 	.word	0x0800a825
 800a7f4:	0800a825 	.word	0x0800a825
 800a7f8:	0800a825 	.word	0x0800a825
 800a7fc:	0800a825 	.word	0x0800a825
 800a800:	0800a825 	.word	0x0800a825
 800a804:	0800a825 	.word	0x0800a825
 800a808:	0800a825 	.word	0x0800a825
 800a80c:	0800a825 	.word	0x0800a825
 800a810:	0800a825 	.word	0x0800a825
 800a814:	0800a825 	.word	0x0800a825
 800a818:	0800a825 	.word	0x0800a825
 800a81c:	0800a825 	.word	0x0800a825
 800a820:	0800a825 	.word	0x0800a825
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a824:	bf00      	nop
  }

  return (USBD_OK);
 800a826:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a828:	4618      	mov	r0, r3
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bc80      	pop	{r7}
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop

0800a834 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a83e:	6879      	ldr	r1, [r7, #4]
 800a840:	4805      	ldr	r0, [pc, #20]	; (800a858 <CDC_Receive_FS+0x24>)
 800a842:	f7fe fe54 	bl	80094ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a846:	4804      	ldr	r0, [pc, #16]	; (800a858 <CDC_Receive_FS+0x24>)
 800a848:	f7fe fe93 	bl	8009572 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a84c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	20000704 	.word	0x20000704

0800a85c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	460b      	mov	r3, r1
 800a866:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a868:	2300      	movs	r3, #0
 800a86a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a86c:	4b0d      	ldr	r3, [pc, #52]	; (800a8a4 <CDC_Transmit_FS+0x48>)
 800a86e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a872:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d001      	beq.n	800a882 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a87e:	2301      	movs	r3, #1
 800a880:	e00b      	b.n	800a89a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a882:	887b      	ldrh	r3, [r7, #2]
 800a884:	461a      	mov	r2, r3
 800a886:	6879      	ldr	r1, [r7, #4]
 800a888:	4806      	ldr	r0, [pc, #24]	; (800a8a4 <CDC_Transmit_FS+0x48>)
 800a88a:	f7fe fe17 	bl	80094bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a88e:	4805      	ldr	r0, [pc, #20]	; (800a8a4 <CDC_Transmit_FS+0x48>)
 800a890:	f7fe fe40 	bl	8009514 <USBD_CDC_TransmitPacket>
 800a894:	4603      	mov	r3, r0
 800a896:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a898:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	20000704 	.word	0x20000704

0800a8a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	6039      	str	r1, [r7, #0]
 800a8b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	2212      	movs	r2, #18
 800a8b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a8ba:	4b03      	ldr	r3, [pc, #12]	; (800a8c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bc80      	pop	{r7}
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	2000016c 	.word	0x2000016c

0800a8cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	6039      	str	r1, [r7, #0]
 800a8d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	2204      	movs	r2, #4
 800a8dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a8de:	4b03      	ldr	r3, [pc, #12]	; (800a8ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bc80      	pop	{r7}
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	20000180 	.word	0x20000180

0800a8f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	6039      	str	r1, [r7, #0]
 800a8fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8fc:	79fb      	ldrb	r3, [r7, #7]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d105      	bne.n	800a90e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a902:	683a      	ldr	r2, [r7, #0]
 800a904:	4907      	ldr	r1, [pc, #28]	; (800a924 <USBD_FS_ProductStrDescriptor+0x34>)
 800a906:	4808      	ldr	r0, [pc, #32]	; (800a928 <USBD_FS_ProductStrDescriptor+0x38>)
 800a908:	f7ff fe0d 	bl	800a526 <USBD_GetString>
 800a90c:	e004      	b.n	800a918 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a90e:	683a      	ldr	r2, [r7, #0]
 800a910:	4904      	ldr	r1, [pc, #16]	; (800a924 <USBD_FS_ProductStrDescriptor+0x34>)
 800a912:	4805      	ldr	r0, [pc, #20]	; (800a928 <USBD_FS_ProductStrDescriptor+0x38>)
 800a914:	f7ff fe07 	bl	800a526 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a918:	4b02      	ldr	r3, [pc, #8]	; (800a924 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	20001198 	.word	0x20001198
 800a928:	0800b914 	.word	0x0800b914

0800a92c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	4603      	mov	r3, r0
 800a934:	6039      	str	r1, [r7, #0]
 800a936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a938:	683a      	ldr	r2, [r7, #0]
 800a93a:	4904      	ldr	r1, [pc, #16]	; (800a94c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a93c:	4804      	ldr	r0, [pc, #16]	; (800a950 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a93e:	f7ff fdf2 	bl	800a526 <USBD_GetString>
  return USBD_StrDesc;
 800a942:	4b02      	ldr	r3, [pc, #8]	; (800a94c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a944:	4618      	mov	r0, r3
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	20001198 	.word	0x20001198
 800a950:	0800b92c 	.word	0x0800b92c

0800a954 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	4603      	mov	r3, r0
 800a95c:	6039      	str	r1, [r7, #0]
 800a95e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	221a      	movs	r2, #26
 800a964:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a966:	f000 f843 	bl	800a9f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a96a:	4b02      	ldr	r3, [pc, #8]	; (800a974 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	20000184 	.word	0x20000184

0800a978 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	4603      	mov	r3, r0
 800a980:	6039      	str	r1, [r7, #0]
 800a982:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a984:	79fb      	ldrb	r3, [r7, #7]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d105      	bne.n	800a996 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a98a:	683a      	ldr	r2, [r7, #0]
 800a98c:	4907      	ldr	r1, [pc, #28]	; (800a9ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800a98e:	4808      	ldr	r0, [pc, #32]	; (800a9b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a990:	f7ff fdc9 	bl	800a526 <USBD_GetString>
 800a994:	e004      	b.n	800a9a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	4904      	ldr	r1, [pc, #16]	; (800a9ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800a99a:	4805      	ldr	r0, [pc, #20]	; (800a9b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a99c:	f7ff fdc3 	bl	800a526 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9a0:	4b02      	ldr	r3, [pc, #8]	; (800a9ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	20001198 	.word	0x20001198
 800a9b0:	0800b940 	.word	0x0800b940

0800a9b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	6039      	str	r1, [r7, #0]
 800a9be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9c0:	79fb      	ldrb	r3, [r7, #7]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d105      	bne.n	800a9d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	4907      	ldr	r1, [pc, #28]	; (800a9e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9ca:	4808      	ldr	r0, [pc, #32]	; (800a9ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9cc:	f7ff fdab 	bl	800a526 <USBD_GetString>
 800a9d0:	e004      	b.n	800a9dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	4904      	ldr	r1, [pc, #16]	; (800a9e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9d6:	4805      	ldr	r0, [pc, #20]	; (800a9ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9d8:	f7ff fda5 	bl	800a526 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9dc:	4b02      	ldr	r3, [pc, #8]	; (800a9e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	20001198 	.word	0x20001198
 800a9ec:	0800b94c 	.word	0x0800b94c

0800a9f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a9f6:	4b0f      	ldr	r3, [pc, #60]	; (800aa34 <Get_SerialNum+0x44>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a9fc:	4b0e      	ldr	r3, [pc, #56]	; (800aa38 <Get_SerialNum+0x48>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa02:	4b0e      	ldr	r3, [pc, #56]	; (800aa3c <Get_SerialNum+0x4c>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d009      	beq.n	800aa2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa16:	2208      	movs	r2, #8
 800aa18:	4909      	ldr	r1, [pc, #36]	; (800aa40 <Get_SerialNum+0x50>)
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f000 f814 	bl	800aa48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa20:	2204      	movs	r2, #4
 800aa22:	4908      	ldr	r1, [pc, #32]	; (800aa44 <Get_SerialNum+0x54>)
 800aa24:	68b8      	ldr	r0, [r7, #8]
 800aa26:	f000 f80f 	bl	800aa48 <IntToUnicode>
  }
}
 800aa2a:	bf00      	nop
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	1ffff7e8 	.word	0x1ffff7e8
 800aa38:	1ffff7ec 	.word	0x1ffff7ec
 800aa3c:	1ffff7f0 	.word	0x1ffff7f0
 800aa40:	20000186 	.word	0x20000186
 800aa44:	20000196 	.word	0x20000196

0800aa48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b087      	sub	sp, #28
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	4613      	mov	r3, r2
 800aa54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aa56:	2300      	movs	r3, #0
 800aa58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	75fb      	strb	r3, [r7, #23]
 800aa5e:	e027      	b.n	800aab0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	0f1b      	lsrs	r3, r3, #28
 800aa64:	2b09      	cmp	r3, #9
 800aa66:	d80b      	bhi.n	800aa80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	0f1b      	lsrs	r3, r3, #28
 800aa6c:	b2da      	uxtb	r2, r3
 800aa6e:	7dfb      	ldrb	r3, [r7, #23]
 800aa70:	005b      	lsls	r3, r3, #1
 800aa72:	4619      	mov	r1, r3
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	440b      	add	r3, r1
 800aa78:	3230      	adds	r2, #48	; 0x30
 800aa7a:	b2d2      	uxtb	r2, r2
 800aa7c:	701a      	strb	r2, [r3, #0]
 800aa7e:	e00a      	b.n	800aa96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	0f1b      	lsrs	r3, r3, #28
 800aa84:	b2da      	uxtb	r2, r3
 800aa86:	7dfb      	ldrb	r3, [r7, #23]
 800aa88:	005b      	lsls	r3, r3, #1
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	440b      	add	r3, r1
 800aa90:	3237      	adds	r2, #55	; 0x37
 800aa92:	b2d2      	uxtb	r2, r2
 800aa94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	011b      	lsls	r3, r3, #4
 800aa9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aa9c:	7dfb      	ldrb	r3, [r7, #23]
 800aa9e:	005b      	lsls	r3, r3, #1
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	68ba      	ldr	r2, [r7, #8]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aaaa:	7dfb      	ldrb	r3, [r7, #23]
 800aaac:	3301      	adds	r3, #1
 800aaae:	75fb      	strb	r3, [r7, #23]
 800aab0:	7dfa      	ldrb	r2, [r7, #23]
 800aab2:	79fb      	ldrb	r3, [r7, #7]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d3d3      	bcc.n	800aa60 <IntToUnicode+0x18>
  }
}
 800aab8:	bf00      	nop
 800aaba:	371c      	adds	r7, #28
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bc80      	pop	{r7}
 800aac0:	4770      	bx	lr
	...

0800aac4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a0d      	ldr	r2, [pc, #52]	; (800ab08 <HAL_PCD_MspInit+0x44>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d113      	bne.n	800aafe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800aad6:	4b0d      	ldr	r3, [pc, #52]	; (800ab0c <HAL_PCD_MspInit+0x48>)
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	4a0c      	ldr	r2, [pc, #48]	; (800ab0c <HAL_PCD_MspInit+0x48>)
 800aadc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aae0:	61d3      	str	r3, [r2, #28]
 800aae2:	4b0a      	ldr	r3, [pc, #40]	; (800ab0c <HAL_PCD_MspInit+0x48>)
 800aae4:	69db      	ldr	r3, [r3, #28]
 800aae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aaea:	60fb      	str	r3, [r7, #12]
 800aaec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800aaee:	2200      	movs	r2, #0
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	2014      	movs	r0, #20
 800aaf4:	f7f7 fd69 	bl	80025ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800aaf8:	2014      	movs	r0, #20
 800aafa:	f7f7 fd82 	bl	8002602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800aafe:	bf00      	nop
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	40005c00 	.word	0x40005c00
 800ab0c:	40021000 	.word	0x40021000

0800ab10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ab24:	4619      	mov	r1, r3
 800ab26:	4610      	mov	r0, r2
 800ab28:	f7fe fdd9 	bl	80096de <USBD_LL_SetupStage>
}
 800ab2c:	bf00      	nop
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b082      	sub	sp, #8
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ab46:	78fa      	ldrb	r2, [r7, #3]
 800ab48:	6879      	ldr	r1, [r7, #4]
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	4413      	add	r3, r2
 800ab50:	00db      	lsls	r3, r3, #3
 800ab52:	440b      	add	r3, r1
 800ab54:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	78fb      	ldrb	r3, [r7, #3]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	f7fe fe09 	bl	8009774 <USBD_LL_DataOutStage>
}
 800ab62:	bf00      	nop
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b082      	sub	sp, #8
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
 800ab72:	460b      	mov	r3, r1
 800ab74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ab7c:	78fa      	ldrb	r2, [r7, #3]
 800ab7e:	6879      	ldr	r1, [r7, #4]
 800ab80:	4613      	mov	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4413      	add	r3, r2
 800ab86:	00db      	lsls	r3, r3, #3
 800ab88:	440b      	add	r3, r1
 800ab8a:	333c      	adds	r3, #60	; 0x3c
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	78fb      	ldrb	r3, [r7, #3]
 800ab90:	4619      	mov	r1, r3
 800ab92:	f7fe fe60 	bl	8009856 <USBD_LL_DataInStage>
}
 800ab96:	bf00      	nop
 800ab98:	3708      	adds	r7, #8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b082      	sub	sp, #8
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800abac:	4618      	mov	r0, r3
 800abae:	f7fe ff70 	bl	8009a92 <USBD_LL_SOF>
}
 800abb2:	bf00      	nop
 800abb4:	3708      	adds	r7, #8
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b084      	sub	sp, #16
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800abc2:	2301      	movs	r3, #1
 800abc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d001      	beq.n	800abd2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800abce:	f7f6 fde1 	bl	8001794 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800abd8:	7bfa      	ldrb	r2, [r7, #15]
 800abda:	4611      	mov	r1, r2
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fe ff20 	bl	8009a22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800abe8:	4618      	mov	r0, r3
 800abea:	f7fe fed9 	bl	80099a0 <USBD_LL_Reset>
}
 800abee:	bf00      	nop
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
	...

0800abf8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fe ff1a 	bl	8009a40 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d005      	beq.n	800ac20 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac14:	4b04      	ldr	r3, [pc, #16]	; (800ac28 <HAL_PCD_SuspendCallback+0x30>)
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	4a03      	ldr	r2, [pc, #12]	; (800ac28 <HAL_PCD_SuspendCallback+0x30>)
 800ac1a:	f043 0306 	orr.w	r3, r3, #6
 800ac1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ac20:	bf00      	nop
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	e000ed00 	.word	0xe000ed00

0800ac2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fe ff14 	bl	8009a68 <USBD_LL_Resume>
}
 800ac40:	bf00      	nop
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ac50:	4a28      	ldr	r2, [pc, #160]	; (800acf4 <USBD_LL_Init+0xac>)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a26      	ldr	r2, [pc, #152]	; (800acf4 <USBD_LL_Init+0xac>)
 800ac5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ac60:	4b24      	ldr	r3, [pc, #144]	; (800acf4 <USBD_LL_Init+0xac>)
 800ac62:	4a25      	ldr	r2, [pc, #148]	; (800acf8 <USBD_LL_Init+0xb0>)
 800ac64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ac66:	4b23      	ldr	r3, [pc, #140]	; (800acf4 <USBD_LL_Init+0xac>)
 800ac68:	2208      	movs	r2, #8
 800ac6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ac6c:	4b21      	ldr	r3, [pc, #132]	; (800acf4 <USBD_LL_Init+0xac>)
 800ac6e:	2202      	movs	r2, #2
 800ac70:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ac72:	4b20      	ldr	r3, [pc, #128]	; (800acf4 <USBD_LL_Init+0xac>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ac78:	4b1e      	ldr	r3, [pc, #120]	; (800acf4 <USBD_LL_Init+0xac>)
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ac7e:	4b1d      	ldr	r3, [pc, #116]	; (800acf4 <USBD_LL_Init+0xac>)
 800ac80:	2200      	movs	r2, #0
 800ac82:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ac84:	481b      	ldr	r0, [pc, #108]	; (800acf4 <USBD_LL_Init+0xac>)
 800ac86:	f7f9 fd34 	bl	80046f2 <HAL_PCD_Init>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d001      	beq.n	800ac94 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ac90:	f7f6 fd80 	bl	8001794 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac9a:	2318      	movs	r3, #24
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	2100      	movs	r1, #0
 800aca0:	f7fb f868 	bl	8005d74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acaa:	2358      	movs	r3, #88	; 0x58
 800acac:	2200      	movs	r2, #0
 800acae:	2180      	movs	r1, #128	; 0x80
 800acb0:	f7fb f860 	bl	8005d74 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acba:	23c0      	movs	r3, #192	; 0xc0
 800acbc:	2200      	movs	r2, #0
 800acbe:	2181      	movs	r1, #129	; 0x81
 800acc0:	f7fb f858 	bl	8005d74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acca:	f44f 7388 	mov.w	r3, #272	; 0x110
 800acce:	2200      	movs	r2, #0
 800acd0:	2101      	movs	r1, #1
 800acd2:	f7fb f84f 	bl	8005d74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ace0:	2200      	movs	r2, #0
 800ace2:	2182      	movs	r1, #130	; 0x82
 800ace4:	f7fb f846 	bl	8005d74 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3708      	adds	r7, #8
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	20001398 	.word	0x20001398
 800acf8:	40005c00 	.word	0x40005c00

0800acfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad04:	2300      	movs	r3, #0
 800ad06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7f9 fdf8 	bl	8004908 <HAL_PCD_Start>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f000 f94e 	bl	800afc0 <USBD_Get_USB_Status>
 800ad24:	4603      	mov	r3, r0
 800ad26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad28:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b084      	sub	sp, #16
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	4608      	mov	r0, r1
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	461a      	mov	r2, r3
 800ad40:	4603      	mov	r3, r0
 800ad42:	70fb      	strb	r3, [r7, #3]
 800ad44:	460b      	mov	r3, r1
 800ad46:	70bb      	strb	r3, [r7, #2]
 800ad48:	4613      	mov	r3, r2
 800ad4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad50:	2300      	movs	r3, #0
 800ad52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad5a:	78bb      	ldrb	r3, [r7, #2]
 800ad5c:	883a      	ldrh	r2, [r7, #0]
 800ad5e:	78f9      	ldrb	r1, [r7, #3]
 800ad60:	f7f9 ff72 	bl	8004c48 <HAL_PCD_EP_Open>
 800ad64:	4603      	mov	r3, r0
 800ad66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad68:	7bfb      	ldrb	r3, [r7, #15]
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f000 f928 	bl	800afc0 <USBD_Get_USB_Status>
 800ad70:	4603      	mov	r3, r0
 800ad72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b084      	sub	sp, #16
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
 800ad86:	460b      	mov	r3, r1
 800ad88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad98:	78fa      	ldrb	r2, [r7, #3]
 800ad9a:	4611      	mov	r1, r2
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7f9 ffb9 	bl	8004d14 <HAL_PCD_EP_Close>
 800ada2:	4603      	mov	r3, r0
 800ada4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ada6:	7bfb      	ldrb	r3, [r7, #15]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 f909 	bl	800afc0 <USBD_Get_USB_Status>
 800adae:	4603      	mov	r3, r0
 800adb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	460b      	mov	r3, r1
 800adc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adcc:	2300      	movs	r3, #0
 800adce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800add6:	78fa      	ldrb	r2, [r7, #3]
 800add8:	4611      	mov	r1, r2
 800adda:	4618      	mov	r0, r3
 800addc:	f7fa f879 	bl	8004ed2 <HAL_PCD_EP_SetStall>
 800ade0:	4603      	mov	r3, r0
 800ade2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
 800ade6:	4618      	mov	r0, r3
 800ade8:	f000 f8ea 	bl	800afc0 <USBD_Get_USB_Status>
 800adec:	4603      	mov	r3, r0
 800adee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b084      	sub	sp, #16
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
 800ae02:	460b      	mov	r3, r1
 800ae04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae06:	2300      	movs	r3, #0
 800ae08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae14:	78fa      	ldrb	r2, [r7, #3]
 800ae16:	4611      	mov	r1, r2
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7fa f8ba 	bl	8004f92 <HAL_PCD_EP_ClrStall>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae22:	7bfb      	ldrb	r3, [r7, #15]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f000 f8cb 	bl	800afc0 <USBD_Get_USB_Status>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	460b      	mov	r3, r1
 800ae42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ae4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	da0c      	bge.n	800ae6e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ae54:	78fb      	ldrb	r3, [r7, #3]
 800ae56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae5a:	68f9      	ldr	r1, [r7, #12]
 800ae5c:	1c5a      	adds	r2, r3, #1
 800ae5e:	4613      	mov	r3, r2
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4413      	add	r3, r2
 800ae64:	00db      	lsls	r3, r3, #3
 800ae66:	440b      	add	r3, r1
 800ae68:	3302      	adds	r3, #2
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	e00b      	b.n	800ae86 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ae6e:	78fb      	ldrb	r3, [r7, #3]
 800ae70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae74:	68f9      	ldr	r1, [r7, #12]
 800ae76:	4613      	mov	r3, r2
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	4413      	add	r3, r2
 800ae7c:	00db      	lsls	r3, r3, #3
 800ae7e:	440b      	add	r3, r1
 800ae80:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ae84:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3714      	adds	r7, #20
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bc80      	pop	{r7}
 800ae8e:	4770      	bx	lr

0800ae90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	460b      	mov	r3, r1
 800ae9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aea0:	2300      	movs	r3, #0
 800aea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aeaa:	78fa      	ldrb	r2, [r7, #3]
 800aeac:	4611      	mov	r1, r2
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7f9 fea5 	bl	8004bfe <HAL_PCD_SetAddress>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeb8:	7bfb      	ldrb	r3, [r7, #15]
 800aeba:	4618      	mov	r0, r3
 800aebc:	f000 f880 	bl	800afc0 <USBD_Get_USB_Status>
 800aec0:	4603      	mov	r3, r0
 800aec2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aec4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3710      	adds	r7, #16
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b086      	sub	sp, #24
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	60f8      	str	r0, [r7, #12]
 800aed6:	607a      	str	r2, [r7, #4]
 800aed8:	461a      	mov	r2, r3
 800aeda:	460b      	mov	r3, r1
 800aedc:	72fb      	strb	r3, [r7, #11]
 800aede:	4613      	mov	r3, r2
 800aee0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aee2:	2300      	movs	r3, #0
 800aee4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aee6:	2300      	movs	r3, #0
 800aee8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aef0:	893b      	ldrh	r3, [r7, #8]
 800aef2:	7af9      	ldrb	r1, [r7, #11]
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	f7f9 ffa9 	bl	8004e4c <HAL_PCD_EP_Transmit>
 800aefa:	4603      	mov	r3, r0
 800aefc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aefe:	7dfb      	ldrb	r3, [r7, #23]
 800af00:	4618      	mov	r0, r3
 800af02:	f000 f85d 	bl	800afc0 <USBD_Get_USB_Status>
 800af06:	4603      	mov	r3, r0
 800af08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af0a:	7dbb      	ldrb	r3, [r7, #22]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3718      	adds	r7, #24
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	607a      	str	r2, [r7, #4]
 800af1e:	461a      	mov	r2, r3
 800af20:	460b      	mov	r3, r1
 800af22:	72fb      	strb	r3, [r7, #11]
 800af24:	4613      	mov	r3, r2
 800af26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af2c:	2300      	movs	r3, #0
 800af2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af36:	893b      	ldrh	r3, [r7, #8]
 800af38:	7af9      	ldrb	r1, [r7, #11]
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	f7f9 ff32 	bl	8004da4 <HAL_PCD_EP_Receive>
 800af40:	4603      	mov	r3, r0
 800af42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af44:	7dfb      	ldrb	r3, [r7, #23]
 800af46:	4618      	mov	r0, r3
 800af48:	f000 f83a 	bl	800afc0 <USBD_Get_USB_Status>
 800af4c:	4603      	mov	r3, r0
 800af4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af50:	7dbb      	ldrb	r3, [r7, #22]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3718      	adds	r7, #24
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b082      	sub	sp, #8
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
 800af62:	460b      	mov	r3, r1
 800af64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af6c:	78fa      	ldrb	r2, [r7, #3]
 800af6e:	4611      	mov	r1, r2
 800af70:	4618      	mov	r0, r3
 800af72:	f7f9 ff54 	bl	8004e1e <HAL_PCD_EP_GetRxCount>
 800af76:	4603      	mov	r3, r0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3708      	adds	r7, #8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800af88:	4b02      	ldr	r3, [pc, #8]	; (800af94 <USBD_static_malloc+0x14>)
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	370c      	adds	r7, #12
 800af8e:	46bd      	mov	sp, r7
 800af90:	bc80      	pop	{r7}
 800af92:	4770      	bx	lr
 800af94:	20000264 	.word	0x20000264

0800af98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]

}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bc80      	pop	{r7}
 800afa8:	4770      	bx	lr

0800afaa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afaa:	b480      	push	{r7}
 800afac:	b083      	sub	sp, #12
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
 800afb2:	460b      	mov	r3, r1
 800afb4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800afb6:	bf00      	nop
 800afb8:	370c      	adds	r7, #12
 800afba:	46bd      	mov	sp, r7
 800afbc:	bc80      	pop	{r7}
 800afbe:	4770      	bx	lr

0800afc0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	4603      	mov	r3, r0
 800afc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afca:	2300      	movs	r3, #0
 800afcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800afce:	79fb      	ldrb	r3, [r7, #7]
 800afd0:	2b03      	cmp	r3, #3
 800afd2:	d817      	bhi.n	800b004 <USBD_Get_USB_Status+0x44>
 800afd4:	a201      	add	r2, pc, #4	; (adr r2, 800afdc <USBD_Get_USB_Status+0x1c>)
 800afd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afda:	bf00      	nop
 800afdc:	0800afed 	.word	0x0800afed
 800afe0:	0800aff3 	.word	0x0800aff3
 800afe4:	0800aff9 	.word	0x0800aff9
 800afe8:	0800afff 	.word	0x0800afff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	73fb      	strb	r3, [r7, #15]
    break;
 800aff0:	e00b      	b.n	800b00a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aff2:	2302      	movs	r3, #2
 800aff4:	73fb      	strb	r3, [r7, #15]
    break;
 800aff6:	e008      	b.n	800b00a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aff8:	2301      	movs	r3, #1
 800affa:	73fb      	strb	r3, [r7, #15]
    break;
 800affc:	e005      	b.n	800b00a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800affe:	2302      	movs	r3, #2
 800b000:	73fb      	strb	r3, [r7, #15]
    break;
 800b002:	e002      	b.n	800b00a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b004:	2302      	movs	r3, #2
 800b006:	73fb      	strb	r3, [r7, #15]
    break;
 800b008:	bf00      	nop
  }
  return usb_status;
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3714      	adds	r7, #20
 800b010:	46bd      	mov	sp, r7
 800b012:	bc80      	pop	{r7}
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop

0800b018 <__errno>:
 800b018:	4b01      	ldr	r3, [pc, #4]	; (800b020 <__errno+0x8>)
 800b01a:	6818      	ldr	r0, [r3, #0]
 800b01c:	4770      	bx	lr
 800b01e:	bf00      	nop
 800b020:	200001a0 	.word	0x200001a0

0800b024 <__libc_init_array>:
 800b024:	b570      	push	{r4, r5, r6, lr}
 800b026:	2500      	movs	r5, #0
 800b028:	4e0c      	ldr	r6, [pc, #48]	; (800b05c <__libc_init_array+0x38>)
 800b02a:	4c0d      	ldr	r4, [pc, #52]	; (800b060 <__libc_init_array+0x3c>)
 800b02c:	1ba4      	subs	r4, r4, r6
 800b02e:	10a4      	asrs	r4, r4, #2
 800b030:	42a5      	cmp	r5, r4
 800b032:	d109      	bne.n	800b048 <__libc_init_array+0x24>
 800b034:	f000 fc48 	bl	800b8c8 <_init>
 800b038:	2500      	movs	r5, #0
 800b03a:	4e0a      	ldr	r6, [pc, #40]	; (800b064 <__libc_init_array+0x40>)
 800b03c:	4c0a      	ldr	r4, [pc, #40]	; (800b068 <__libc_init_array+0x44>)
 800b03e:	1ba4      	subs	r4, r4, r6
 800b040:	10a4      	asrs	r4, r4, #2
 800b042:	42a5      	cmp	r5, r4
 800b044:	d105      	bne.n	800b052 <__libc_init_array+0x2e>
 800b046:	bd70      	pop	{r4, r5, r6, pc}
 800b048:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b04c:	4798      	blx	r3
 800b04e:	3501      	adds	r5, #1
 800b050:	e7ee      	b.n	800b030 <__libc_init_array+0xc>
 800b052:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b056:	4798      	blx	r3
 800b058:	3501      	adds	r5, #1
 800b05a:	e7f2      	b.n	800b042 <__libc_init_array+0x1e>
 800b05c:	0800b9a8 	.word	0x0800b9a8
 800b060:	0800b9a8 	.word	0x0800b9a8
 800b064:	0800b9a8 	.word	0x0800b9a8
 800b068:	0800b9ac 	.word	0x0800b9ac

0800b06c <memset>:
 800b06c:	4603      	mov	r3, r0
 800b06e:	4402      	add	r2, r0
 800b070:	4293      	cmp	r3, r2
 800b072:	d100      	bne.n	800b076 <memset+0xa>
 800b074:	4770      	bx	lr
 800b076:	f803 1b01 	strb.w	r1, [r3], #1
 800b07a:	e7f9      	b.n	800b070 <memset+0x4>

0800b07c <sniprintf>:
 800b07c:	b40c      	push	{r2, r3}
 800b07e:	b530      	push	{r4, r5, lr}
 800b080:	4b17      	ldr	r3, [pc, #92]	; (800b0e0 <sniprintf+0x64>)
 800b082:	1e0c      	subs	r4, r1, #0
 800b084:	b09d      	sub	sp, #116	; 0x74
 800b086:	681d      	ldr	r5, [r3, #0]
 800b088:	da08      	bge.n	800b09c <sniprintf+0x20>
 800b08a:	238b      	movs	r3, #139	; 0x8b
 800b08c:	f04f 30ff 	mov.w	r0, #4294967295
 800b090:	602b      	str	r3, [r5, #0]
 800b092:	b01d      	add	sp, #116	; 0x74
 800b094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b098:	b002      	add	sp, #8
 800b09a:	4770      	bx	lr
 800b09c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b0a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b0a4:	bf0c      	ite	eq
 800b0a6:	4623      	moveq	r3, r4
 800b0a8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b0ac:	9304      	str	r3, [sp, #16]
 800b0ae:	9307      	str	r3, [sp, #28]
 800b0b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b0b4:	9002      	str	r0, [sp, #8]
 800b0b6:	9006      	str	r0, [sp, #24]
 800b0b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b0bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b0be:	ab21      	add	r3, sp, #132	; 0x84
 800b0c0:	a902      	add	r1, sp, #8
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	9301      	str	r3, [sp, #4]
 800b0c6:	f000 f867 	bl	800b198 <_svfiprintf_r>
 800b0ca:	1c43      	adds	r3, r0, #1
 800b0cc:	bfbc      	itt	lt
 800b0ce:	238b      	movlt	r3, #139	; 0x8b
 800b0d0:	602b      	strlt	r3, [r5, #0]
 800b0d2:	2c00      	cmp	r4, #0
 800b0d4:	d0dd      	beq.n	800b092 <sniprintf+0x16>
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	9b02      	ldr	r3, [sp, #8]
 800b0da:	701a      	strb	r2, [r3, #0]
 800b0dc:	e7d9      	b.n	800b092 <sniprintf+0x16>
 800b0de:	bf00      	nop
 800b0e0:	200001a0 	.word	0x200001a0

0800b0e4 <__ssputs_r>:
 800b0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e8:	688e      	ldr	r6, [r1, #8]
 800b0ea:	4682      	mov	sl, r0
 800b0ec:	429e      	cmp	r6, r3
 800b0ee:	460c      	mov	r4, r1
 800b0f0:	4690      	mov	r8, r2
 800b0f2:	4699      	mov	r9, r3
 800b0f4:	d837      	bhi.n	800b166 <__ssputs_r+0x82>
 800b0f6:	898a      	ldrh	r2, [r1, #12]
 800b0f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b0fc:	d031      	beq.n	800b162 <__ssputs_r+0x7e>
 800b0fe:	2302      	movs	r3, #2
 800b100:	6825      	ldr	r5, [r4, #0]
 800b102:	6909      	ldr	r1, [r1, #16]
 800b104:	1a6f      	subs	r7, r5, r1
 800b106:	6965      	ldr	r5, [r4, #20]
 800b108:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b10c:	fb95 f5f3 	sdiv	r5, r5, r3
 800b110:	f109 0301 	add.w	r3, r9, #1
 800b114:	443b      	add	r3, r7
 800b116:	429d      	cmp	r5, r3
 800b118:	bf38      	it	cc
 800b11a:	461d      	movcc	r5, r3
 800b11c:	0553      	lsls	r3, r2, #21
 800b11e:	d530      	bpl.n	800b182 <__ssputs_r+0x9e>
 800b120:	4629      	mov	r1, r5
 800b122:	f000 fb37 	bl	800b794 <_malloc_r>
 800b126:	4606      	mov	r6, r0
 800b128:	b950      	cbnz	r0, 800b140 <__ssputs_r+0x5c>
 800b12a:	230c      	movs	r3, #12
 800b12c:	f04f 30ff 	mov.w	r0, #4294967295
 800b130:	f8ca 3000 	str.w	r3, [sl]
 800b134:	89a3      	ldrh	r3, [r4, #12]
 800b136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b13a:	81a3      	strh	r3, [r4, #12]
 800b13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b140:	463a      	mov	r2, r7
 800b142:	6921      	ldr	r1, [r4, #16]
 800b144:	f000 fab6 	bl	800b6b4 <memcpy>
 800b148:	89a3      	ldrh	r3, [r4, #12]
 800b14a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b14e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b152:	81a3      	strh	r3, [r4, #12]
 800b154:	6126      	str	r6, [r4, #16]
 800b156:	443e      	add	r6, r7
 800b158:	6026      	str	r6, [r4, #0]
 800b15a:	464e      	mov	r6, r9
 800b15c:	6165      	str	r5, [r4, #20]
 800b15e:	1bed      	subs	r5, r5, r7
 800b160:	60a5      	str	r5, [r4, #8]
 800b162:	454e      	cmp	r6, r9
 800b164:	d900      	bls.n	800b168 <__ssputs_r+0x84>
 800b166:	464e      	mov	r6, r9
 800b168:	4632      	mov	r2, r6
 800b16a:	4641      	mov	r1, r8
 800b16c:	6820      	ldr	r0, [r4, #0]
 800b16e:	f000 faac 	bl	800b6ca <memmove>
 800b172:	68a3      	ldr	r3, [r4, #8]
 800b174:	2000      	movs	r0, #0
 800b176:	1b9b      	subs	r3, r3, r6
 800b178:	60a3      	str	r3, [r4, #8]
 800b17a:	6823      	ldr	r3, [r4, #0]
 800b17c:	441e      	add	r6, r3
 800b17e:	6026      	str	r6, [r4, #0]
 800b180:	e7dc      	b.n	800b13c <__ssputs_r+0x58>
 800b182:	462a      	mov	r2, r5
 800b184:	f000 fb60 	bl	800b848 <_realloc_r>
 800b188:	4606      	mov	r6, r0
 800b18a:	2800      	cmp	r0, #0
 800b18c:	d1e2      	bne.n	800b154 <__ssputs_r+0x70>
 800b18e:	6921      	ldr	r1, [r4, #16]
 800b190:	4650      	mov	r0, sl
 800b192:	f000 fab3 	bl	800b6fc <_free_r>
 800b196:	e7c8      	b.n	800b12a <__ssputs_r+0x46>

0800b198 <_svfiprintf_r>:
 800b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19c:	461d      	mov	r5, r3
 800b19e:	898b      	ldrh	r3, [r1, #12]
 800b1a0:	b09d      	sub	sp, #116	; 0x74
 800b1a2:	061f      	lsls	r7, r3, #24
 800b1a4:	4680      	mov	r8, r0
 800b1a6:	460c      	mov	r4, r1
 800b1a8:	4616      	mov	r6, r2
 800b1aa:	d50f      	bpl.n	800b1cc <_svfiprintf_r+0x34>
 800b1ac:	690b      	ldr	r3, [r1, #16]
 800b1ae:	b96b      	cbnz	r3, 800b1cc <_svfiprintf_r+0x34>
 800b1b0:	2140      	movs	r1, #64	; 0x40
 800b1b2:	f000 faef 	bl	800b794 <_malloc_r>
 800b1b6:	6020      	str	r0, [r4, #0]
 800b1b8:	6120      	str	r0, [r4, #16]
 800b1ba:	b928      	cbnz	r0, 800b1c8 <_svfiprintf_r+0x30>
 800b1bc:	230c      	movs	r3, #12
 800b1be:	f8c8 3000 	str.w	r3, [r8]
 800b1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c6:	e0c8      	b.n	800b35a <_svfiprintf_r+0x1c2>
 800b1c8:	2340      	movs	r3, #64	; 0x40
 800b1ca:	6163      	str	r3, [r4, #20]
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b1d0:	2320      	movs	r3, #32
 800b1d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1d6:	2330      	movs	r3, #48	; 0x30
 800b1d8:	f04f 0b01 	mov.w	fp, #1
 800b1dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1e0:	9503      	str	r5, [sp, #12]
 800b1e2:	4637      	mov	r7, r6
 800b1e4:	463d      	mov	r5, r7
 800b1e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b1ea:	b10b      	cbz	r3, 800b1f0 <_svfiprintf_r+0x58>
 800b1ec:	2b25      	cmp	r3, #37	; 0x25
 800b1ee:	d13e      	bne.n	800b26e <_svfiprintf_r+0xd6>
 800b1f0:	ebb7 0a06 	subs.w	sl, r7, r6
 800b1f4:	d00b      	beq.n	800b20e <_svfiprintf_r+0x76>
 800b1f6:	4653      	mov	r3, sl
 800b1f8:	4632      	mov	r2, r6
 800b1fa:	4621      	mov	r1, r4
 800b1fc:	4640      	mov	r0, r8
 800b1fe:	f7ff ff71 	bl	800b0e4 <__ssputs_r>
 800b202:	3001      	adds	r0, #1
 800b204:	f000 80a4 	beq.w	800b350 <_svfiprintf_r+0x1b8>
 800b208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b20a:	4453      	add	r3, sl
 800b20c:	9309      	str	r3, [sp, #36]	; 0x24
 800b20e:	783b      	ldrb	r3, [r7, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	f000 809d 	beq.w	800b350 <_svfiprintf_r+0x1b8>
 800b216:	2300      	movs	r3, #0
 800b218:	f04f 32ff 	mov.w	r2, #4294967295
 800b21c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b220:	9304      	str	r3, [sp, #16]
 800b222:	9307      	str	r3, [sp, #28]
 800b224:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b228:	931a      	str	r3, [sp, #104]	; 0x68
 800b22a:	462f      	mov	r7, r5
 800b22c:	2205      	movs	r2, #5
 800b22e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b232:	4850      	ldr	r0, [pc, #320]	; (800b374 <_svfiprintf_r+0x1dc>)
 800b234:	f000 fa30 	bl	800b698 <memchr>
 800b238:	9b04      	ldr	r3, [sp, #16]
 800b23a:	b9d0      	cbnz	r0, 800b272 <_svfiprintf_r+0xda>
 800b23c:	06d9      	lsls	r1, r3, #27
 800b23e:	bf44      	itt	mi
 800b240:	2220      	movmi	r2, #32
 800b242:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b246:	071a      	lsls	r2, r3, #28
 800b248:	bf44      	itt	mi
 800b24a:	222b      	movmi	r2, #43	; 0x2b
 800b24c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b250:	782a      	ldrb	r2, [r5, #0]
 800b252:	2a2a      	cmp	r2, #42	; 0x2a
 800b254:	d015      	beq.n	800b282 <_svfiprintf_r+0xea>
 800b256:	462f      	mov	r7, r5
 800b258:	2000      	movs	r0, #0
 800b25a:	250a      	movs	r5, #10
 800b25c:	9a07      	ldr	r2, [sp, #28]
 800b25e:	4639      	mov	r1, r7
 800b260:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b264:	3b30      	subs	r3, #48	; 0x30
 800b266:	2b09      	cmp	r3, #9
 800b268:	d94d      	bls.n	800b306 <_svfiprintf_r+0x16e>
 800b26a:	b1b8      	cbz	r0, 800b29c <_svfiprintf_r+0x104>
 800b26c:	e00f      	b.n	800b28e <_svfiprintf_r+0xf6>
 800b26e:	462f      	mov	r7, r5
 800b270:	e7b8      	b.n	800b1e4 <_svfiprintf_r+0x4c>
 800b272:	4a40      	ldr	r2, [pc, #256]	; (800b374 <_svfiprintf_r+0x1dc>)
 800b274:	463d      	mov	r5, r7
 800b276:	1a80      	subs	r0, r0, r2
 800b278:	fa0b f000 	lsl.w	r0, fp, r0
 800b27c:	4318      	orrs	r0, r3
 800b27e:	9004      	str	r0, [sp, #16]
 800b280:	e7d3      	b.n	800b22a <_svfiprintf_r+0x92>
 800b282:	9a03      	ldr	r2, [sp, #12]
 800b284:	1d11      	adds	r1, r2, #4
 800b286:	6812      	ldr	r2, [r2, #0]
 800b288:	9103      	str	r1, [sp, #12]
 800b28a:	2a00      	cmp	r2, #0
 800b28c:	db01      	blt.n	800b292 <_svfiprintf_r+0xfa>
 800b28e:	9207      	str	r2, [sp, #28]
 800b290:	e004      	b.n	800b29c <_svfiprintf_r+0x104>
 800b292:	4252      	negs	r2, r2
 800b294:	f043 0302 	orr.w	r3, r3, #2
 800b298:	9207      	str	r2, [sp, #28]
 800b29a:	9304      	str	r3, [sp, #16]
 800b29c:	783b      	ldrb	r3, [r7, #0]
 800b29e:	2b2e      	cmp	r3, #46	; 0x2e
 800b2a0:	d10c      	bne.n	800b2bc <_svfiprintf_r+0x124>
 800b2a2:	787b      	ldrb	r3, [r7, #1]
 800b2a4:	2b2a      	cmp	r3, #42	; 0x2a
 800b2a6:	d133      	bne.n	800b310 <_svfiprintf_r+0x178>
 800b2a8:	9b03      	ldr	r3, [sp, #12]
 800b2aa:	3702      	adds	r7, #2
 800b2ac:	1d1a      	adds	r2, r3, #4
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	9203      	str	r2, [sp, #12]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	bfb8      	it	lt
 800b2b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2ba:	9305      	str	r3, [sp, #20]
 800b2bc:	4d2e      	ldr	r5, [pc, #184]	; (800b378 <_svfiprintf_r+0x1e0>)
 800b2be:	2203      	movs	r2, #3
 800b2c0:	7839      	ldrb	r1, [r7, #0]
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	f000 f9e8 	bl	800b698 <memchr>
 800b2c8:	b138      	cbz	r0, 800b2da <_svfiprintf_r+0x142>
 800b2ca:	2340      	movs	r3, #64	; 0x40
 800b2cc:	1b40      	subs	r0, r0, r5
 800b2ce:	fa03 f000 	lsl.w	r0, r3, r0
 800b2d2:	9b04      	ldr	r3, [sp, #16]
 800b2d4:	3701      	adds	r7, #1
 800b2d6:	4303      	orrs	r3, r0
 800b2d8:	9304      	str	r3, [sp, #16]
 800b2da:	7839      	ldrb	r1, [r7, #0]
 800b2dc:	2206      	movs	r2, #6
 800b2de:	4827      	ldr	r0, [pc, #156]	; (800b37c <_svfiprintf_r+0x1e4>)
 800b2e0:	1c7e      	adds	r6, r7, #1
 800b2e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2e6:	f000 f9d7 	bl	800b698 <memchr>
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	d038      	beq.n	800b360 <_svfiprintf_r+0x1c8>
 800b2ee:	4b24      	ldr	r3, [pc, #144]	; (800b380 <_svfiprintf_r+0x1e8>)
 800b2f0:	bb13      	cbnz	r3, 800b338 <_svfiprintf_r+0x1a0>
 800b2f2:	9b03      	ldr	r3, [sp, #12]
 800b2f4:	3307      	adds	r3, #7
 800b2f6:	f023 0307 	bic.w	r3, r3, #7
 800b2fa:	3308      	adds	r3, #8
 800b2fc:	9303      	str	r3, [sp, #12]
 800b2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b300:	444b      	add	r3, r9
 800b302:	9309      	str	r3, [sp, #36]	; 0x24
 800b304:	e76d      	b.n	800b1e2 <_svfiprintf_r+0x4a>
 800b306:	fb05 3202 	mla	r2, r5, r2, r3
 800b30a:	2001      	movs	r0, #1
 800b30c:	460f      	mov	r7, r1
 800b30e:	e7a6      	b.n	800b25e <_svfiprintf_r+0xc6>
 800b310:	2300      	movs	r3, #0
 800b312:	250a      	movs	r5, #10
 800b314:	4619      	mov	r1, r3
 800b316:	3701      	adds	r7, #1
 800b318:	9305      	str	r3, [sp, #20]
 800b31a:	4638      	mov	r0, r7
 800b31c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b320:	3a30      	subs	r2, #48	; 0x30
 800b322:	2a09      	cmp	r2, #9
 800b324:	d903      	bls.n	800b32e <_svfiprintf_r+0x196>
 800b326:	2b00      	cmp	r3, #0
 800b328:	d0c8      	beq.n	800b2bc <_svfiprintf_r+0x124>
 800b32a:	9105      	str	r1, [sp, #20]
 800b32c:	e7c6      	b.n	800b2bc <_svfiprintf_r+0x124>
 800b32e:	fb05 2101 	mla	r1, r5, r1, r2
 800b332:	2301      	movs	r3, #1
 800b334:	4607      	mov	r7, r0
 800b336:	e7f0      	b.n	800b31a <_svfiprintf_r+0x182>
 800b338:	ab03      	add	r3, sp, #12
 800b33a:	9300      	str	r3, [sp, #0]
 800b33c:	4622      	mov	r2, r4
 800b33e:	4b11      	ldr	r3, [pc, #68]	; (800b384 <_svfiprintf_r+0x1ec>)
 800b340:	a904      	add	r1, sp, #16
 800b342:	4640      	mov	r0, r8
 800b344:	f3af 8000 	nop.w
 800b348:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b34c:	4681      	mov	r9, r0
 800b34e:	d1d6      	bne.n	800b2fe <_svfiprintf_r+0x166>
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	065b      	lsls	r3, r3, #25
 800b354:	f53f af35 	bmi.w	800b1c2 <_svfiprintf_r+0x2a>
 800b358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b35a:	b01d      	add	sp, #116	; 0x74
 800b35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b360:	ab03      	add	r3, sp, #12
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	4622      	mov	r2, r4
 800b366:	4b07      	ldr	r3, [pc, #28]	; (800b384 <_svfiprintf_r+0x1ec>)
 800b368:	a904      	add	r1, sp, #16
 800b36a:	4640      	mov	r0, r8
 800b36c:	f000 f882 	bl	800b474 <_printf_i>
 800b370:	e7ea      	b.n	800b348 <_svfiprintf_r+0x1b0>
 800b372:	bf00      	nop
 800b374:	0800b974 	.word	0x0800b974
 800b378:	0800b97a 	.word	0x0800b97a
 800b37c:	0800b97e 	.word	0x0800b97e
 800b380:	00000000 	.word	0x00000000
 800b384:	0800b0e5 	.word	0x0800b0e5

0800b388 <_printf_common>:
 800b388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b38c:	4691      	mov	r9, r2
 800b38e:	461f      	mov	r7, r3
 800b390:	688a      	ldr	r2, [r1, #8]
 800b392:	690b      	ldr	r3, [r1, #16]
 800b394:	4606      	mov	r6, r0
 800b396:	4293      	cmp	r3, r2
 800b398:	bfb8      	it	lt
 800b39a:	4613      	movlt	r3, r2
 800b39c:	f8c9 3000 	str.w	r3, [r9]
 800b3a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3a4:	460c      	mov	r4, r1
 800b3a6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3aa:	b112      	cbz	r2, 800b3b2 <_printf_common+0x2a>
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	f8c9 3000 	str.w	r3, [r9]
 800b3b2:	6823      	ldr	r3, [r4, #0]
 800b3b4:	0699      	lsls	r1, r3, #26
 800b3b6:	bf42      	ittt	mi
 800b3b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b3bc:	3302      	addmi	r3, #2
 800b3be:	f8c9 3000 	strmi.w	r3, [r9]
 800b3c2:	6825      	ldr	r5, [r4, #0]
 800b3c4:	f015 0506 	ands.w	r5, r5, #6
 800b3c8:	d107      	bne.n	800b3da <_printf_common+0x52>
 800b3ca:	f104 0a19 	add.w	sl, r4, #25
 800b3ce:	68e3      	ldr	r3, [r4, #12]
 800b3d0:	f8d9 2000 	ldr.w	r2, [r9]
 800b3d4:	1a9b      	subs	r3, r3, r2
 800b3d6:	42ab      	cmp	r3, r5
 800b3d8:	dc29      	bgt.n	800b42e <_printf_common+0xa6>
 800b3da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b3de:	6822      	ldr	r2, [r4, #0]
 800b3e0:	3300      	adds	r3, #0
 800b3e2:	bf18      	it	ne
 800b3e4:	2301      	movne	r3, #1
 800b3e6:	0692      	lsls	r2, r2, #26
 800b3e8:	d42e      	bmi.n	800b448 <_printf_common+0xc0>
 800b3ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3ee:	4639      	mov	r1, r7
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	47c0      	blx	r8
 800b3f4:	3001      	adds	r0, #1
 800b3f6:	d021      	beq.n	800b43c <_printf_common+0xb4>
 800b3f8:	6823      	ldr	r3, [r4, #0]
 800b3fa:	68e5      	ldr	r5, [r4, #12]
 800b3fc:	f003 0306 	and.w	r3, r3, #6
 800b400:	2b04      	cmp	r3, #4
 800b402:	bf18      	it	ne
 800b404:	2500      	movne	r5, #0
 800b406:	f8d9 2000 	ldr.w	r2, [r9]
 800b40a:	f04f 0900 	mov.w	r9, #0
 800b40e:	bf08      	it	eq
 800b410:	1aad      	subeq	r5, r5, r2
 800b412:	68a3      	ldr	r3, [r4, #8]
 800b414:	6922      	ldr	r2, [r4, #16]
 800b416:	bf08      	it	eq
 800b418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b41c:	4293      	cmp	r3, r2
 800b41e:	bfc4      	itt	gt
 800b420:	1a9b      	subgt	r3, r3, r2
 800b422:	18ed      	addgt	r5, r5, r3
 800b424:	341a      	adds	r4, #26
 800b426:	454d      	cmp	r5, r9
 800b428:	d11a      	bne.n	800b460 <_printf_common+0xd8>
 800b42a:	2000      	movs	r0, #0
 800b42c:	e008      	b.n	800b440 <_printf_common+0xb8>
 800b42e:	2301      	movs	r3, #1
 800b430:	4652      	mov	r2, sl
 800b432:	4639      	mov	r1, r7
 800b434:	4630      	mov	r0, r6
 800b436:	47c0      	blx	r8
 800b438:	3001      	adds	r0, #1
 800b43a:	d103      	bne.n	800b444 <_printf_common+0xbc>
 800b43c:	f04f 30ff 	mov.w	r0, #4294967295
 800b440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b444:	3501      	adds	r5, #1
 800b446:	e7c2      	b.n	800b3ce <_printf_common+0x46>
 800b448:	2030      	movs	r0, #48	; 0x30
 800b44a:	18e1      	adds	r1, r4, r3
 800b44c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b450:	1c5a      	adds	r2, r3, #1
 800b452:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b456:	4422      	add	r2, r4
 800b458:	3302      	adds	r3, #2
 800b45a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b45e:	e7c4      	b.n	800b3ea <_printf_common+0x62>
 800b460:	2301      	movs	r3, #1
 800b462:	4622      	mov	r2, r4
 800b464:	4639      	mov	r1, r7
 800b466:	4630      	mov	r0, r6
 800b468:	47c0      	blx	r8
 800b46a:	3001      	adds	r0, #1
 800b46c:	d0e6      	beq.n	800b43c <_printf_common+0xb4>
 800b46e:	f109 0901 	add.w	r9, r9, #1
 800b472:	e7d8      	b.n	800b426 <_printf_common+0x9e>

0800b474 <_printf_i>:
 800b474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b478:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b47c:	460c      	mov	r4, r1
 800b47e:	7e09      	ldrb	r1, [r1, #24]
 800b480:	b085      	sub	sp, #20
 800b482:	296e      	cmp	r1, #110	; 0x6e
 800b484:	4617      	mov	r7, r2
 800b486:	4606      	mov	r6, r0
 800b488:	4698      	mov	r8, r3
 800b48a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b48c:	f000 80b3 	beq.w	800b5f6 <_printf_i+0x182>
 800b490:	d822      	bhi.n	800b4d8 <_printf_i+0x64>
 800b492:	2963      	cmp	r1, #99	; 0x63
 800b494:	d036      	beq.n	800b504 <_printf_i+0x90>
 800b496:	d80a      	bhi.n	800b4ae <_printf_i+0x3a>
 800b498:	2900      	cmp	r1, #0
 800b49a:	f000 80b9 	beq.w	800b610 <_printf_i+0x19c>
 800b49e:	2958      	cmp	r1, #88	; 0x58
 800b4a0:	f000 8083 	beq.w	800b5aa <_printf_i+0x136>
 800b4a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b4ac:	e032      	b.n	800b514 <_printf_i+0xa0>
 800b4ae:	2964      	cmp	r1, #100	; 0x64
 800b4b0:	d001      	beq.n	800b4b6 <_printf_i+0x42>
 800b4b2:	2969      	cmp	r1, #105	; 0x69
 800b4b4:	d1f6      	bne.n	800b4a4 <_printf_i+0x30>
 800b4b6:	6820      	ldr	r0, [r4, #0]
 800b4b8:	6813      	ldr	r3, [r2, #0]
 800b4ba:	0605      	lsls	r5, r0, #24
 800b4bc:	f103 0104 	add.w	r1, r3, #4
 800b4c0:	d52a      	bpl.n	800b518 <_printf_i+0xa4>
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	6011      	str	r1, [r2, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	da03      	bge.n	800b4d2 <_printf_i+0x5e>
 800b4ca:	222d      	movs	r2, #45	; 0x2d
 800b4cc:	425b      	negs	r3, r3
 800b4ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b4d2:	486f      	ldr	r0, [pc, #444]	; (800b690 <_printf_i+0x21c>)
 800b4d4:	220a      	movs	r2, #10
 800b4d6:	e039      	b.n	800b54c <_printf_i+0xd8>
 800b4d8:	2973      	cmp	r1, #115	; 0x73
 800b4da:	f000 809d 	beq.w	800b618 <_printf_i+0x1a4>
 800b4de:	d808      	bhi.n	800b4f2 <_printf_i+0x7e>
 800b4e0:	296f      	cmp	r1, #111	; 0x6f
 800b4e2:	d020      	beq.n	800b526 <_printf_i+0xb2>
 800b4e4:	2970      	cmp	r1, #112	; 0x70
 800b4e6:	d1dd      	bne.n	800b4a4 <_printf_i+0x30>
 800b4e8:	6823      	ldr	r3, [r4, #0]
 800b4ea:	f043 0320 	orr.w	r3, r3, #32
 800b4ee:	6023      	str	r3, [r4, #0]
 800b4f0:	e003      	b.n	800b4fa <_printf_i+0x86>
 800b4f2:	2975      	cmp	r1, #117	; 0x75
 800b4f4:	d017      	beq.n	800b526 <_printf_i+0xb2>
 800b4f6:	2978      	cmp	r1, #120	; 0x78
 800b4f8:	d1d4      	bne.n	800b4a4 <_printf_i+0x30>
 800b4fa:	2378      	movs	r3, #120	; 0x78
 800b4fc:	4865      	ldr	r0, [pc, #404]	; (800b694 <_printf_i+0x220>)
 800b4fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b502:	e055      	b.n	800b5b0 <_printf_i+0x13c>
 800b504:	6813      	ldr	r3, [r2, #0]
 800b506:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b50a:	1d19      	adds	r1, r3, #4
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	6011      	str	r1, [r2, #0]
 800b510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b514:	2301      	movs	r3, #1
 800b516:	e08c      	b.n	800b632 <_printf_i+0x1be>
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b51e:	6011      	str	r1, [r2, #0]
 800b520:	bf18      	it	ne
 800b522:	b21b      	sxthne	r3, r3
 800b524:	e7cf      	b.n	800b4c6 <_printf_i+0x52>
 800b526:	6813      	ldr	r3, [r2, #0]
 800b528:	6825      	ldr	r5, [r4, #0]
 800b52a:	1d18      	adds	r0, r3, #4
 800b52c:	6010      	str	r0, [r2, #0]
 800b52e:	0628      	lsls	r0, r5, #24
 800b530:	d501      	bpl.n	800b536 <_printf_i+0xc2>
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	e002      	b.n	800b53c <_printf_i+0xc8>
 800b536:	0668      	lsls	r0, r5, #25
 800b538:	d5fb      	bpl.n	800b532 <_printf_i+0xbe>
 800b53a:	881b      	ldrh	r3, [r3, #0]
 800b53c:	296f      	cmp	r1, #111	; 0x6f
 800b53e:	bf14      	ite	ne
 800b540:	220a      	movne	r2, #10
 800b542:	2208      	moveq	r2, #8
 800b544:	4852      	ldr	r0, [pc, #328]	; (800b690 <_printf_i+0x21c>)
 800b546:	2100      	movs	r1, #0
 800b548:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b54c:	6865      	ldr	r5, [r4, #4]
 800b54e:	2d00      	cmp	r5, #0
 800b550:	60a5      	str	r5, [r4, #8]
 800b552:	f2c0 8095 	blt.w	800b680 <_printf_i+0x20c>
 800b556:	6821      	ldr	r1, [r4, #0]
 800b558:	f021 0104 	bic.w	r1, r1, #4
 800b55c:	6021      	str	r1, [r4, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d13d      	bne.n	800b5de <_printf_i+0x16a>
 800b562:	2d00      	cmp	r5, #0
 800b564:	f040 808e 	bne.w	800b684 <_printf_i+0x210>
 800b568:	4665      	mov	r5, ip
 800b56a:	2a08      	cmp	r2, #8
 800b56c:	d10b      	bne.n	800b586 <_printf_i+0x112>
 800b56e:	6823      	ldr	r3, [r4, #0]
 800b570:	07db      	lsls	r3, r3, #31
 800b572:	d508      	bpl.n	800b586 <_printf_i+0x112>
 800b574:	6923      	ldr	r3, [r4, #16]
 800b576:	6862      	ldr	r2, [r4, #4]
 800b578:	429a      	cmp	r2, r3
 800b57a:	bfde      	ittt	le
 800b57c:	2330      	movle	r3, #48	; 0x30
 800b57e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b582:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b586:	ebac 0305 	sub.w	r3, ip, r5
 800b58a:	6123      	str	r3, [r4, #16]
 800b58c:	f8cd 8000 	str.w	r8, [sp]
 800b590:	463b      	mov	r3, r7
 800b592:	aa03      	add	r2, sp, #12
 800b594:	4621      	mov	r1, r4
 800b596:	4630      	mov	r0, r6
 800b598:	f7ff fef6 	bl	800b388 <_printf_common>
 800b59c:	3001      	adds	r0, #1
 800b59e:	d14d      	bne.n	800b63c <_printf_i+0x1c8>
 800b5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a4:	b005      	add	sp, #20
 800b5a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5aa:	4839      	ldr	r0, [pc, #228]	; (800b690 <_printf_i+0x21c>)
 800b5ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b5b0:	6813      	ldr	r3, [r2, #0]
 800b5b2:	6821      	ldr	r1, [r4, #0]
 800b5b4:	1d1d      	adds	r5, r3, #4
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6015      	str	r5, [r2, #0]
 800b5ba:	060a      	lsls	r2, r1, #24
 800b5bc:	d50b      	bpl.n	800b5d6 <_printf_i+0x162>
 800b5be:	07ca      	lsls	r2, r1, #31
 800b5c0:	bf44      	itt	mi
 800b5c2:	f041 0120 	orrmi.w	r1, r1, #32
 800b5c6:	6021      	strmi	r1, [r4, #0]
 800b5c8:	b91b      	cbnz	r3, 800b5d2 <_printf_i+0x15e>
 800b5ca:	6822      	ldr	r2, [r4, #0]
 800b5cc:	f022 0220 	bic.w	r2, r2, #32
 800b5d0:	6022      	str	r2, [r4, #0]
 800b5d2:	2210      	movs	r2, #16
 800b5d4:	e7b7      	b.n	800b546 <_printf_i+0xd2>
 800b5d6:	064d      	lsls	r5, r1, #25
 800b5d8:	bf48      	it	mi
 800b5da:	b29b      	uxthmi	r3, r3
 800b5dc:	e7ef      	b.n	800b5be <_printf_i+0x14a>
 800b5de:	4665      	mov	r5, ip
 800b5e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5e4:	fb02 3311 	mls	r3, r2, r1, r3
 800b5e8:	5cc3      	ldrb	r3, [r0, r3]
 800b5ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	2900      	cmp	r1, #0
 800b5f2:	d1f5      	bne.n	800b5e0 <_printf_i+0x16c>
 800b5f4:	e7b9      	b.n	800b56a <_printf_i+0xf6>
 800b5f6:	6813      	ldr	r3, [r2, #0]
 800b5f8:	6825      	ldr	r5, [r4, #0]
 800b5fa:	1d18      	adds	r0, r3, #4
 800b5fc:	6961      	ldr	r1, [r4, #20]
 800b5fe:	6010      	str	r0, [r2, #0]
 800b600:	0628      	lsls	r0, r5, #24
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	d501      	bpl.n	800b60a <_printf_i+0x196>
 800b606:	6019      	str	r1, [r3, #0]
 800b608:	e002      	b.n	800b610 <_printf_i+0x19c>
 800b60a:	066a      	lsls	r2, r5, #25
 800b60c:	d5fb      	bpl.n	800b606 <_printf_i+0x192>
 800b60e:	8019      	strh	r1, [r3, #0]
 800b610:	2300      	movs	r3, #0
 800b612:	4665      	mov	r5, ip
 800b614:	6123      	str	r3, [r4, #16]
 800b616:	e7b9      	b.n	800b58c <_printf_i+0x118>
 800b618:	6813      	ldr	r3, [r2, #0]
 800b61a:	1d19      	adds	r1, r3, #4
 800b61c:	6011      	str	r1, [r2, #0]
 800b61e:	681d      	ldr	r5, [r3, #0]
 800b620:	6862      	ldr	r2, [r4, #4]
 800b622:	2100      	movs	r1, #0
 800b624:	4628      	mov	r0, r5
 800b626:	f000 f837 	bl	800b698 <memchr>
 800b62a:	b108      	cbz	r0, 800b630 <_printf_i+0x1bc>
 800b62c:	1b40      	subs	r0, r0, r5
 800b62e:	6060      	str	r0, [r4, #4]
 800b630:	6863      	ldr	r3, [r4, #4]
 800b632:	6123      	str	r3, [r4, #16]
 800b634:	2300      	movs	r3, #0
 800b636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b63a:	e7a7      	b.n	800b58c <_printf_i+0x118>
 800b63c:	6923      	ldr	r3, [r4, #16]
 800b63e:	462a      	mov	r2, r5
 800b640:	4639      	mov	r1, r7
 800b642:	4630      	mov	r0, r6
 800b644:	47c0      	blx	r8
 800b646:	3001      	adds	r0, #1
 800b648:	d0aa      	beq.n	800b5a0 <_printf_i+0x12c>
 800b64a:	6823      	ldr	r3, [r4, #0]
 800b64c:	079b      	lsls	r3, r3, #30
 800b64e:	d413      	bmi.n	800b678 <_printf_i+0x204>
 800b650:	68e0      	ldr	r0, [r4, #12]
 800b652:	9b03      	ldr	r3, [sp, #12]
 800b654:	4298      	cmp	r0, r3
 800b656:	bfb8      	it	lt
 800b658:	4618      	movlt	r0, r3
 800b65a:	e7a3      	b.n	800b5a4 <_printf_i+0x130>
 800b65c:	2301      	movs	r3, #1
 800b65e:	464a      	mov	r2, r9
 800b660:	4639      	mov	r1, r7
 800b662:	4630      	mov	r0, r6
 800b664:	47c0      	blx	r8
 800b666:	3001      	adds	r0, #1
 800b668:	d09a      	beq.n	800b5a0 <_printf_i+0x12c>
 800b66a:	3501      	adds	r5, #1
 800b66c:	68e3      	ldr	r3, [r4, #12]
 800b66e:	9a03      	ldr	r2, [sp, #12]
 800b670:	1a9b      	subs	r3, r3, r2
 800b672:	42ab      	cmp	r3, r5
 800b674:	dcf2      	bgt.n	800b65c <_printf_i+0x1e8>
 800b676:	e7eb      	b.n	800b650 <_printf_i+0x1dc>
 800b678:	2500      	movs	r5, #0
 800b67a:	f104 0919 	add.w	r9, r4, #25
 800b67e:	e7f5      	b.n	800b66c <_printf_i+0x1f8>
 800b680:	2b00      	cmp	r3, #0
 800b682:	d1ac      	bne.n	800b5de <_printf_i+0x16a>
 800b684:	7803      	ldrb	r3, [r0, #0]
 800b686:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b68a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b68e:	e76c      	b.n	800b56a <_printf_i+0xf6>
 800b690:	0800b985 	.word	0x0800b985
 800b694:	0800b996 	.word	0x0800b996

0800b698 <memchr>:
 800b698:	b510      	push	{r4, lr}
 800b69a:	b2c9      	uxtb	r1, r1
 800b69c:	4402      	add	r2, r0
 800b69e:	4290      	cmp	r0, r2
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	d101      	bne.n	800b6a8 <memchr+0x10>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	e003      	b.n	800b6b0 <memchr+0x18>
 800b6a8:	781c      	ldrb	r4, [r3, #0]
 800b6aa:	3001      	adds	r0, #1
 800b6ac:	428c      	cmp	r4, r1
 800b6ae:	d1f6      	bne.n	800b69e <memchr+0x6>
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	bd10      	pop	{r4, pc}

0800b6b4 <memcpy>:
 800b6b4:	b510      	push	{r4, lr}
 800b6b6:	1e43      	subs	r3, r0, #1
 800b6b8:	440a      	add	r2, r1
 800b6ba:	4291      	cmp	r1, r2
 800b6bc:	d100      	bne.n	800b6c0 <memcpy+0xc>
 800b6be:	bd10      	pop	{r4, pc}
 800b6c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6c8:	e7f7      	b.n	800b6ba <memcpy+0x6>

0800b6ca <memmove>:
 800b6ca:	4288      	cmp	r0, r1
 800b6cc:	b510      	push	{r4, lr}
 800b6ce:	eb01 0302 	add.w	r3, r1, r2
 800b6d2:	d807      	bhi.n	800b6e4 <memmove+0x1a>
 800b6d4:	1e42      	subs	r2, r0, #1
 800b6d6:	4299      	cmp	r1, r3
 800b6d8:	d00a      	beq.n	800b6f0 <memmove+0x26>
 800b6da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6de:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b6e2:	e7f8      	b.n	800b6d6 <memmove+0xc>
 800b6e4:	4283      	cmp	r3, r0
 800b6e6:	d9f5      	bls.n	800b6d4 <memmove+0xa>
 800b6e8:	1881      	adds	r1, r0, r2
 800b6ea:	1ad2      	subs	r2, r2, r3
 800b6ec:	42d3      	cmn	r3, r2
 800b6ee:	d100      	bne.n	800b6f2 <memmove+0x28>
 800b6f0:	bd10      	pop	{r4, pc}
 800b6f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b6fa:	e7f7      	b.n	800b6ec <memmove+0x22>

0800b6fc <_free_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4605      	mov	r5, r0
 800b700:	2900      	cmp	r1, #0
 800b702:	d043      	beq.n	800b78c <_free_r+0x90>
 800b704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b708:	1f0c      	subs	r4, r1, #4
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	bfb8      	it	lt
 800b70e:	18e4      	addlt	r4, r4, r3
 800b710:	f000 f8d0 	bl	800b8b4 <__malloc_lock>
 800b714:	4a1e      	ldr	r2, [pc, #120]	; (800b790 <_free_r+0x94>)
 800b716:	6813      	ldr	r3, [r2, #0]
 800b718:	4610      	mov	r0, r2
 800b71a:	b933      	cbnz	r3, 800b72a <_free_r+0x2e>
 800b71c:	6063      	str	r3, [r4, #4]
 800b71e:	6014      	str	r4, [r2, #0]
 800b720:	4628      	mov	r0, r5
 800b722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b726:	f000 b8c6 	b.w	800b8b6 <__malloc_unlock>
 800b72a:	42a3      	cmp	r3, r4
 800b72c:	d90b      	bls.n	800b746 <_free_r+0x4a>
 800b72e:	6821      	ldr	r1, [r4, #0]
 800b730:	1862      	adds	r2, r4, r1
 800b732:	4293      	cmp	r3, r2
 800b734:	bf01      	itttt	eq
 800b736:	681a      	ldreq	r2, [r3, #0]
 800b738:	685b      	ldreq	r3, [r3, #4]
 800b73a:	1852      	addeq	r2, r2, r1
 800b73c:	6022      	streq	r2, [r4, #0]
 800b73e:	6063      	str	r3, [r4, #4]
 800b740:	6004      	str	r4, [r0, #0]
 800b742:	e7ed      	b.n	800b720 <_free_r+0x24>
 800b744:	4613      	mov	r3, r2
 800b746:	685a      	ldr	r2, [r3, #4]
 800b748:	b10a      	cbz	r2, 800b74e <_free_r+0x52>
 800b74a:	42a2      	cmp	r2, r4
 800b74c:	d9fa      	bls.n	800b744 <_free_r+0x48>
 800b74e:	6819      	ldr	r1, [r3, #0]
 800b750:	1858      	adds	r0, r3, r1
 800b752:	42a0      	cmp	r0, r4
 800b754:	d10b      	bne.n	800b76e <_free_r+0x72>
 800b756:	6820      	ldr	r0, [r4, #0]
 800b758:	4401      	add	r1, r0
 800b75a:	1858      	adds	r0, r3, r1
 800b75c:	4282      	cmp	r2, r0
 800b75e:	6019      	str	r1, [r3, #0]
 800b760:	d1de      	bne.n	800b720 <_free_r+0x24>
 800b762:	6810      	ldr	r0, [r2, #0]
 800b764:	6852      	ldr	r2, [r2, #4]
 800b766:	4401      	add	r1, r0
 800b768:	6019      	str	r1, [r3, #0]
 800b76a:	605a      	str	r2, [r3, #4]
 800b76c:	e7d8      	b.n	800b720 <_free_r+0x24>
 800b76e:	d902      	bls.n	800b776 <_free_r+0x7a>
 800b770:	230c      	movs	r3, #12
 800b772:	602b      	str	r3, [r5, #0]
 800b774:	e7d4      	b.n	800b720 <_free_r+0x24>
 800b776:	6820      	ldr	r0, [r4, #0]
 800b778:	1821      	adds	r1, r4, r0
 800b77a:	428a      	cmp	r2, r1
 800b77c:	bf01      	itttt	eq
 800b77e:	6811      	ldreq	r1, [r2, #0]
 800b780:	6852      	ldreq	r2, [r2, #4]
 800b782:	1809      	addeq	r1, r1, r0
 800b784:	6021      	streq	r1, [r4, #0]
 800b786:	6062      	str	r2, [r4, #4]
 800b788:	605c      	str	r4, [r3, #4]
 800b78a:	e7c9      	b.n	800b720 <_free_r+0x24>
 800b78c:	bd38      	pop	{r3, r4, r5, pc}
 800b78e:	bf00      	nop
 800b790:	20000484 	.word	0x20000484

0800b794 <_malloc_r>:
 800b794:	b570      	push	{r4, r5, r6, lr}
 800b796:	1ccd      	adds	r5, r1, #3
 800b798:	f025 0503 	bic.w	r5, r5, #3
 800b79c:	3508      	adds	r5, #8
 800b79e:	2d0c      	cmp	r5, #12
 800b7a0:	bf38      	it	cc
 800b7a2:	250c      	movcc	r5, #12
 800b7a4:	2d00      	cmp	r5, #0
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	db01      	blt.n	800b7ae <_malloc_r+0x1a>
 800b7aa:	42a9      	cmp	r1, r5
 800b7ac:	d903      	bls.n	800b7b6 <_malloc_r+0x22>
 800b7ae:	230c      	movs	r3, #12
 800b7b0:	6033      	str	r3, [r6, #0]
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	bd70      	pop	{r4, r5, r6, pc}
 800b7b6:	f000 f87d 	bl	800b8b4 <__malloc_lock>
 800b7ba:	4a21      	ldr	r2, [pc, #132]	; (800b840 <_malloc_r+0xac>)
 800b7bc:	6814      	ldr	r4, [r2, #0]
 800b7be:	4621      	mov	r1, r4
 800b7c0:	b991      	cbnz	r1, 800b7e8 <_malloc_r+0x54>
 800b7c2:	4c20      	ldr	r4, [pc, #128]	; (800b844 <_malloc_r+0xb0>)
 800b7c4:	6823      	ldr	r3, [r4, #0]
 800b7c6:	b91b      	cbnz	r3, 800b7d0 <_malloc_r+0x3c>
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	f000 f863 	bl	800b894 <_sbrk_r>
 800b7ce:	6020      	str	r0, [r4, #0]
 800b7d0:	4629      	mov	r1, r5
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	f000 f85e 	bl	800b894 <_sbrk_r>
 800b7d8:	1c43      	adds	r3, r0, #1
 800b7da:	d124      	bne.n	800b826 <_malloc_r+0x92>
 800b7dc:	230c      	movs	r3, #12
 800b7de:	4630      	mov	r0, r6
 800b7e0:	6033      	str	r3, [r6, #0]
 800b7e2:	f000 f868 	bl	800b8b6 <__malloc_unlock>
 800b7e6:	e7e4      	b.n	800b7b2 <_malloc_r+0x1e>
 800b7e8:	680b      	ldr	r3, [r1, #0]
 800b7ea:	1b5b      	subs	r3, r3, r5
 800b7ec:	d418      	bmi.n	800b820 <_malloc_r+0x8c>
 800b7ee:	2b0b      	cmp	r3, #11
 800b7f0:	d90f      	bls.n	800b812 <_malloc_r+0x7e>
 800b7f2:	600b      	str	r3, [r1, #0]
 800b7f4:	18cc      	adds	r4, r1, r3
 800b7f6:	50cd      	str	r5, [r1, r3]
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	f000 f85c 	bl	800b8b6 <__malloc_unlock>
 800b7fe:	f104 000b 	add.w	r0, r4, #11
 800b802:	1d23      	adds	r3, r4, #4
 800b804:	f020 0007 	bic.w	r0, r0, #7
 800b808:	1ac3      	subs	r3, r0, r3
 800b80a:	d0d3      	beq.n	800b7b4 <_malloc_r+0x20>
 800b80c:	425a      	negs	r2, r3
 800b80e:	50e2      	str	r2, [r4, r3]
 800b810:	e7d0      	b.n	800b7b4 <_malloc_r+0x20>
 800b812:	684b      	ldr	r3, [r1, #4]
 800b814:	428c      	cmp	r4, r1
 800b816:	bf16      	itet	ne
 800b818:	6063      	strne	r3, [r4, #4]
 800b81a:	6013      	streq	r3, [r2, #0]
 800b81c:	460c      	movne	r4, r1
 800b81e:	e7eb      	b.n	800b7f8 <_malloc_r+0x64>
 800b820:	460c      	mov	r4, r1
 800b822:	6849      	ldr	r1, [r1, #4]
 800b824:	e7cc      	b.n	800b7c0 <_malloc_r+0x2c>
 800b826:	1cc4      	adds	r4, r0, #3
 800b828:	f024 0403 	bic.w	r4, r4, #3
 800b82c:	42a0      	cmp	r0, r4
 800b82e:	d005      	beq.n	800b83c <_malloc_r+0xa8>
 800b830:	1a21      	subs	r1, r4, r0
 800b832:	4630      	mov	r0, r6
 800b834:	f000 f82e 	bl	800b894 <_sbrk_r>
 800b838:	3001      	adds	r0, #1
 800b83a:	d0cf      	beq.n	800b7dc <_malloc_r+0x48>
 800b83c:	6025      	str	r5, [r4, #0]
 800b83e:	e7db      	b.n	800b7f8 <_malloc_r+0x64>
 800b840:	20000484 	.word	0x20000484
 800b844:	20000488 	.word	0x20000488

0800b848 <_realloc_r>:
 800b848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84a:	4607      	mov	r7, r0
 800b84c:	4614      	mov	r4, r2
 800b84e:	460e      	mov	r6, r1
 800b850:	b921      	cbnz	r1, 800b85c <_realloc_r+0x14>
 800b852:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b856:	4611      	mov	r1, r2
 800b858:	f7ff bf9c 	b.w	800b794 <_malloc_r>
 800b85c:	b922      	cbnz	r2, 800b868 <_realloc_r+0x20>
 800b85e:	f7ff ff4d 	bl	800b6fc <_free_r>
 800b862:	4625      	mov	r5, r4
 800b864:	4628      	mov	r0, r5
 800b866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b868:	f000 f826 	bl	800b8b8 <_malloc_usable_size_r>
 800b86c:	42a0      	cmp	r0, r4
 800b86e:	d20f      	bcs.n	800b890 <_realloc_r+0x48>
 800b870:	4621      	mov	r1, r4
 800b872:	4638      	mov	r0, r7
 800b874:	f7ff ff8e 	bl	800b794 <_malloc_r>
 800b878:	4605      	mov	r5, r0
 800b87a:	2800      	cmp	r0, #0
 800b87c:	d0f2      	beq.n	800b864 <_realloc_r+0x1c>
 800b87e:	4631      	mov	r1, r6
 800b880:	4622      	mov	r2, r4
 800b882:	f7ff ff17 	bl	800b6b4 <memcpy>
 800b886:	4631      	mov	r1, r6
 800b888:	4638      	mov	r0, r7
 800b88a:	f7ff ff37 	bl	800b6fc <_free_r>
 800b88e:	e7e9      	b.n	800b864 <_realloc_r+0x1c>
 800b890:	4635      	mov	r5, r6
 800b892:	e7e7      	b.n	800b864 <_realloc_r+0x1c>

0800b894 <_sbrk_r>:
 800b894:	b538      	push	{r3, r4, r5, lr}
 800b896:	2300      	movs	r3, #0
 800b898:	4c05      	ldr	r4, [pc, #20]	; (800b8b0 <_sbrk_r+0x1c>)
 800b89a:	4605      	mov	r5, r0
 800b89c:	4608      	mov	r0, r1
 800b89e:	6023      	str	r3, [r4, #0]
 800b8a0:	f7f6 faee 	bl	8001e80 <_sbrk>
 800b8a4:	1c43      	adds	r3, r0, #1
 800b8a6:	d102      	bne.n	800b8ae <_sbrk_r+0x1a>
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	b103      	cbz	r3, 800b8ae <_sbrk_r+0x1a>
 800b8ac:	602b      	str	r3, [r5, #0]
 800b8ae:	bd38      	pop	{r3, r4, r5, pc}
 800b8b0:	20001684 	.word	0x20001684

0800b8b4 <__malloc_lock>:
 800b8b4:	4770      	bx	lr

0800b8b6 <__malloc_unlock>:
 800b8b6:	4770      	bx	lr

0800b8b8 <_malloc_usable_size_r>:
 800b8b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8bc:	1f18      	subs	r0, r3, #4
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	bfbc      	itt	lt
 800b8c2:	580b      	ldrlt	r3, [r1, r0]
 800b8c4:	18c0      	addlt	r0, r0, r3
 800b8c6:	4770      	bx	lr

0800b8c8 <_init>:
 800b8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ca:	bf00      	nop
 800b8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ce:	bc08      	pop	{r3}
 800b8d0:	469e      	mov	lr, r3
 800b8d2:	4770      	bx	lr

0800b8d4 <_fini>:
 800b8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d6:	bf00      	nop
 800b8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8da:	bc08      	pop	{r3}
 800b8dc:	469e      	mov	lr, r3
 800b8de:	4770      	bx	lr
