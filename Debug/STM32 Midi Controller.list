
STM32 Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000816c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008278  08008278  00018278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082ec  080082ec  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  080082ec  080082ec  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082ec  080082ec  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082ec  080082ec  000182ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082f0  080082f0  000182f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080082f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f4  20000190  08008484  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001484  08008484  00021484  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a82f  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034b3  00000000  00000000  0003a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001408  00000000  00000000  0003dea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a8  00000000  00000000  0003f2a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b52b  00000000  00000000  00040550  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012cd3  00000000  00000000  0005ba7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000942fb  00000000  00000000  0006e74e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00102a49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053cc  00000000  00000000  00102ac4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000190 	.word	0x20000190
 8000128:	00000000 	.word	0x00000000
 800012c:	08008260 	.word	0x08008260

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000194 	.word	0x20000194
 8000148:	08008260 	.word	0x08008260

0800014c <debug>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void debug(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	GPIOA->BSRR = (1<<7);
 8000150:	4b04      	ldr	r3, [pc, #16]	; (8000164 <debug+0x18>)
 8000152:	2280      	movs	r2, #128	; 0x80
 8000154:	611a      	str	r2, [r3, #16]
	GPIOA->BRR = (1<<7);
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <debug+0x18>)
 8000158:	2280      	movs	r2, #128	; 0x80
 800015a:	615a      	str	r2, [r3, #20]
}
 800015c:	bf00      	nop
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr
 8000164:	40010800 	.word	0x40010800

08000168 <DWT_Delay_Init>:

/* DWT based delay */
uint32_t DWT_Delay_Init(void)
{
 8000168:	b480      	push	{r7}
 800016a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800016c:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <DWT_Delay_Init+0x58>)
 800016e:	68db      	ldr	r3, [r3, #12]
 8000170:	4a13      	ldr	r2, [pc, #76]	; (80001c0 <DWT_Delay_Init+0x58>)
 8000172:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000176:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000178:	4b11      	ldr	r3, [pc, #68]	; (80001c0 <DWT_Delay_Init+0x58>)
 800017a:	68db      	ldr	r3, [r3, #12]
 800017c:	4a10      	ldr	r2, [pc, #64]	; (80001c0 <DWT_Delay_Init+0x58>)
 800017e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000182:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000184:	4b0f      	ldr	r3, [pc, #60]	; (80001c4 <DWT_Delay_Init+0x5c>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a0e      	ldr	r2, [pc, #56]	; (80001c4 <DWT_Delay_Init+0x5c>)
 800018a:	f023 0301 	bic.w	r3, r3, #1
 800018e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000190:	4b0c      	ldr	r3, [pc, #48]	; (80001c4 <DWT_Delay_Init+0x5c>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a0b      	ldr	r2, [pc, #44]	; (80001c4 <DWT_Delay_Init+0x5c>)
 8000196:	f043 0301 	orr.w	r3, r3, #1
 800019a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800019c:	4b09      	ldr	r3, [pc, #36]	; (80001c4 <DWT_Delay_Init+0x5c>)
 800019e:	2200      	movs	r2, #0
 80001a0:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80001a2:	bf00      	nop
    __ASM volatile ("NOP");
 80001a4:	bf00      	nop
    __ASM volatile ("NOP");
 80001a6:	bf00      	nop
    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80001a8:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <DWT_Delay_Init+0x5c>)
 80001aa:	685b      	ldr	r3, [r3, #4]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d001      	beq.n	80001b4 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80001b0:	2300      	movs	r3, #0
 80001b2:	e000      	b.n	80001b6 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80001b4:	2301      	movs	r3, #1
    }
}
 80001b6:	4618      	mov	r0, r3
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	e000edf0 	.word	0xe000edf0
 80001c4:	e0001000 	.word	0xe0001000

080001c8 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	; (800020c <DWT_Delay_us+0x44>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80001d6:	f003 fb29 	bl	800382c <HAL_RCC_GetHCLKFreq>
 80001da:	4602      	mov	r2, r0
 80001dc:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <DWT_Delay_us+0x48>)
 80001de:	fba3 2302 	umull	r2, r3, r3, r2
 80001e2:	0c9b      	lsrs	r3, r3, #18
 80001e4:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	68ba      	ldr	r2, [r7, #8]
 80001ea:	fb02 f303 	mul.w	r3, r2, r3
 80001ee:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80001f0:	bf00      	nop
 80001f2:	4b06      	ldr	r3, [pc, #24]	; (800020c <DWT_Delay_us+0x44>)
 80001f4:	685a      	ldr	r2, [r3, #4]
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	1ad2      	subs	r2, r2, r3
 80001fa:	6879      	ldr	r1, [r7, #4]
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	1acb      	subs	r3, r1, r3
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f6      	bcc.n	80001f2 <DWT_Delay_us+0x2a>
}
 8000204:	bf00      	nop
 8000206:	3710      	adds	r7, #16
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	e0001000 	.word	0xe0001000
 8000210:	431bde83 	.word	0x431bde83

08000214 <MCP23017SetPin>:

//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

/* MCP23017 Defines */

void __attribute__((optimize("O0"))) MCP23017SetPin(uint8_t pin, bank b, uint8_t addr){
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
 800021e:	460b      	mov	r3, r1
 8000220:	71bb      	strb	r3, [r7, #6]
 8000222:	4613      	mov	r3, r2
 8000224:	717b      	strb	r3, [r7, #5]

	//__disable_irq();
	debug();
 8000226:	f7ff ff91 	bl	800014c <debug>
	debug();
 800022a:	f7ff ff8f 	bl	800014c <debug>
	debug();
 800022e:	f7ff ff8d 	bl	800014c <debug>
	//first, read current state of Bank B so we can safely toggle pins
	uint8_t current = 0; //current state of bank b
 8000232:	2300      	movs	r3, #0
 8000234:	73fb      	strb	r3, [r7, #15]
	//select register
	I2C2->CR1 |= (1<<8); //send start condition
 8000236:	4b70      	ldr	r3, [pc, #448]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a6f      	ldr	r2, [pc, #444]	; (80003f8 <MCP23017SetPin+0x1e4>)
 800023c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000240:	6013      	str	r3, [r2, #0]
	while ((volatile uint32_t)(I2C2->SR1 & 1) == 0); //clear SB
 8000242:	bf00      	nop
 8000244:	4b6c      	ldr	r3, [pc, #432]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	f003 0301 	and.w	r3, r3, #1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d0f9      	beq.n	8000244 <MCP23017SetPin+0x30>
	I2C2->DR = addr; //address the MCP23017
 8000250:	4a69      	ldr	r2, [pc, #420]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000252:	797b      	ldrb	r3, [r7, #5]
 8000254:	6113      	str	r3, [r2, #16]
	while ((volatile uint32_t)(I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000256:	bf00      	nop
 8000258:	4b67      	ldr	r3, [pc, #412]	; (80003f8 <MCP23017SetPin+0x1e4>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	f003 0302 	and.w	r3, r3, #2
 8000260:	2b00      	cmp	r3, #0
 8000262:	d0f9      	beq.n	8000258 <MCP23017SetPin+0x44>
	while ((volatile uint32_t)(I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000264:	bf00      	nop
 8000266:	4b64      	ldr	r3, [pc, #400]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	f003 0304 	and.w	r3, r3, #4
 800026e:	2b00      	cmp	r3, #0
 8000270:	d0f9      	beq.n	8000266 <MCP23017SetPin+0x52>
	while ((volatile uint32_t)(I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000272:	bf00      	nop
 8000274:	4b60      	ldr	r3, [pc, #384]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800027c:	2b00      	cmp	r3, #0
 800027e:	d0f9      	beq.n	8000274 <MCP23017SetPin+0x60>
	if(b==A){
 8000280:	79bb      	ldrb	r3, [r7, #6]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d103      	bne.n	800028e <MCP23017SetPin+0x7a>
		I2C2->DR = 0x12; //read from bank A
 8000286:	4b5c      	ldr	r3, [pc, #368]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000288:	2212      	movs	r2, #18
 800028a:	611a      	str	r2, [r3, #16]
 800028c:	e002      	b.n	8000294 <MCP23017SetPin+0x80>
	}
	else{
		I2C2->DR = 0x13;
 800028e:	4b5a      	ldr	r3, [pc, #360]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000290:	2213      	movs	r2, #19
 8000292:	611a      	str	r2, [r3, #16]
	}
	while ((volatile uint32_t)(I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000294:	bf00      	nop
 8000296:	4b58      	ldr	r3, [pc, #352]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d0f9      	beq.n	8000296 <MCP23017SetPin+0x82>
	while ((volatile uint32_t)(I2C2->SR1 & (1<<7)) == 0); //make sure BTF is 1
 80002a2:	bf00      	nop
 80002a4:	4b54      	ldr	r3, [pc, #336]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d0f9      	beq.n	80002a4 <MCP23017SetPin+0x90>
	I2C2->CR1 |= (1<<9); //send stop condition
 80002b0:	4b51      	ldr	r3, [pc, #324]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a50      	ldr	r2, [pc, #320]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80002b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ba:	6013      	str	r3, [r2, #0]

	while ((volatile uint32_t)(I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 80002bc:	bf00      	nop
 80002be:	4b4e      	ldr	r3, [pc, #312]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80002c0:	699b      	ldr	r3, [r3, #24]

	//read in register contents
	I2C2->CR1 |= (1<<8); //send start condition
 80002c2:	4b4d      	ldr	r3, [pc, #308]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a4c      	ldr	r2, [pc, #304]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80002c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002cc:	6013      	str	r3, [r2, #0]
	while ((volatile uint32_t)(I2C2->SR1 & 1) == 0); //clear SB
 80002ce:	bf00      	nop
 80002d0:	4b49      	ldr	r3, [pc, #292]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f003 0301 	and.w	r3, r3, #1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d0f9      	beq.n	80002d0 <MCP23017SetPin+0xbc>
	I2C2->DR = addr | 1; //address the MCP23017 and READ from it
 80002dc:	797b      	ldrb	r3, [r7, #5]
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	4b44      	ldr	r3, [pc, #272]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80002e6:	611a      	str	r2, [r3, #16]
	while ((volatile uint32_t)(I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80002e8:	bf00      	nop
 80002ea:	4b43      	ldr	r3, [pc, #268]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f003 0302 	and.w	r3, r3, #2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f9      	beq.n	80002ea <MCP23017SetPin+0xd6>
	if(I2C2->SR2); //read I2C SR2, Note: Can't check for busyness, results in spurious extra byte read
 80002f6:	4b40      	ldr	r3, [pc, #256]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80002f8:	699b      	ldr	r3, [r3, #24]
	I2C2->CR1 &= ~(1 << 10); //Disable ACK and
 80002fa:	4b3f      	ldr	r3, [pc, #252]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a3e      	ldr	r2, [pc, #248]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000300:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000304:	6013      	str	r3, [r2, #0]
	I2C2->CR1 |= (1 << 9); //queue stop condition here (Just after EV6)
 8000306:	4b3c      	ldr	r3, [pc, #240]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a3b      	ldr	r2, [pc, #236]	; (80003f8 <MCP23017SetPin+0x1e4>)
 800030c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000310:	6013      	str	r3, [r2, #0]
	while ((volatile uint32_t)(I2C2->SR1 & (1<<6)) == 0); //while RxNE is low, ie data is still being read
 8000312:	bf00      	nop
 8000314:	4b38      	ldr	r3, [pc, #224]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800031c:	2b00      	cmp	r3, #0
 800031e:	d0f9      	beq.n	8000314 <MCP23017SetPin+0x100>
	current = I2C2->DR; //read current state of Bank B
 8000320:	4b35      	ldr	r3, [pc, #212]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000322:	691b      	ldr	r3, [r3, #16]
 8000324:	73fb      	strb	r3, [r7, #15]
	I2C2->CR1 |= (1<<10); //Re-enable ACK
 8000326:	4b34      	ldr	r3, [pc, #208]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a33      	ldr	r2, [pc, #204]	; (80003f8 <MCP23017SetPin+0x1e4>)
 800032c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000330:	6013      	str	r3, [r2, #0]


	while ((volatile uint32_t)(I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 8000332:	bf00      	nop
 8000334:	4b30      	ldr	r3, [pc, #192]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000336:	699b      	ldr	r3, [r3, #24]


	current |= (1<<pin);
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	2201      	movs	r2, #1
 800033c:	fa02 f303 	lsl.w	r3, r2, r3
 8000340:	b25a      	sxtb	r2, r3
 8000342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000346:	4313      	orrs	r3, r2
 8000348:	b25b      	sxtb	r3, r3
 800034a:	73fb      	strb	r3, [r7, #15]

	//write out the new state
	I2C2->CR1 |= (1<<8); //send start condition
 800034c:	4b2a      	ldr	r3, [pc, #168]	; (80003f8 <MCP23017SetPin+0x1e4>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a29      	ldr	r2, [pc, #164]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000356:	6013      	str	r3, [r2, #0]
	while ((volatile uint32_t)(I2C2->SR1 & 1) == 0) debug(); //clear SB
 8000358:	e001      	b.n	800035e <MCP23017SetPin+0x14a>
 800035a:	f7ff fef7 	bl	800014c <debug>
 800035e:	4b26      	ldr	r3, [pc, #152]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0f7      	beq.n	800035a <MCP23017SetPin+0x146>
	I2C2->DR = addr; //address the MCP23017
 800036a:	4a23      	ldr	r2, [pc, #140]	; (80003f8 <MCP23017SetPin+0x1e4>)
 800036c:	797b      	ldrb	r3, [r7, #5]
 800036e:	6113      	str	r3, [r2, #16]
	while ((volatile uint32_t)(I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000370:	bf00      	nop
 8000372:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	f003 0302 	and.w	r3, r3, #2
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0f9      	beq.n	8000372 <MCP23017SetPin+0x15e>
	while ((volatile uint32_t)(I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 800037e:	bf00      	nop
 8000380:	4b1d      	ldr	r3, [pc, #116]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0304 	and.w	r3, r3, #4
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0f9      	beq.n	8000380 <MCP23017SetPin+0x16c>
	while ((volatile uint32_t)(I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800038c:	bf00      	nop
 800038e:	4b1a      	ldr	r3, [pc, #104]	; (80003f8 <MCP23017SetPin+0x1e4>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f9      	beq.n	800038e <MCP23017SetPin+0x17a>
	if(b==A){
 800039a:	79bb      	ldrb	r3, [r7, #6]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d103      	bne.n	80003a8 <MCP23017SetPin+0x194>
		I2C2->DR = 0x14;
 80003a0:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80003a2:	2214      	movs	r2, #20
 80003a4:	611a      	str	r2, [r3, #16]
 80003a6:	e002      	b.n	80003ae <MCP23017SetPin+0x19a>
	}
	else{
		I2C2->DR = 0x15;
 80003a8:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80003aa:	2215      	movs	r2, #21
 80003ac:	611a      	str	r2, [r3, #16]
	}
	while ((volatile uint32_t)(I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80003ae:	bf00      	nop
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d0f9      	beq.n	80003b0 <MCP23017SetPin+0x19c>
	I2C2->DR = current; //just pull everything low
 80003bc:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80003be:	7bfb      	ldrb	r3, [r7, #15]
 80003c0:	6113      	str	r3, [r2, #16]
	while ((volatile uint32_t)(I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80003c2:	bf00      	nop
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d0f9      	beq.n	80003c4 <MCP23017SetPin+0x1b0>
	while ((volatile uint32_t)(I2C2->SR1 & (1<<7)) == 0); //make sure BTF is 1
 80003d0:	bf00      	nop
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0f9      	beq.n	80003d2 <MCP23017SetPin+0x1be>
	I2C2->CR1 |= (1<<9); //send stop condition
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a05      	ldr	r2, [pc, #20]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80003e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003e8:	6013      	str	r3, [r2, #0]

	while ((volatile uint32_t)(I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 80003ea:	bf00      	nop
 80003ec:	4b02      	ldr	r3, [pc, #8]	; (80003f8 <MCP23017SetPin+0x1e4>)
 80003ee:	699b      	ldr	r3, [r3, #24]
	//__enable_irq();

}
 80003f0:	bf00      	nop
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40005800 	.word	0x40005800

080003fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000400:	f000 fca0 	bl	8000d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000404:	f000 f88a 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000408:	f000 f9f0 	bl	80007ec <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800040c:	f007 fa86 	bl	800791c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000410:	f000 f8ee 	bl	80005f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000414:	f000 f92a 	bl	800066c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000418:	f000 f956 	bl	80006c8 <MX_I2C2_Init>
  MX_TIM2_Init();
 800041c:	f000 f982 	bl	8000724 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000420:	f000 f8d9 	bl	80005d6 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8000424:	f7ff fea0 	bl	8000168 <DWT_Delay_Init>

  I2C2->CR1 |= 1; //enable i2c 2 peripheral for LCD and EEPROM
 8000428:	4b39      	ldr	r3, [pc, #228]	; (8000510 <main+0x114>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a38      	ldr	r2, [pc, #224]	; (8000510 <main+0x114>)
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6013      	str	r3, [r2, #0]

  //Initialise the MCP23017 first
  	I2C2->CR1 |= (1<<8); //send start condition
 8000434:	4b36      	ldr	r3, [pc, #216]	; (8000510 <main+0x114>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a35      	ldr	r2, [pc, #212]	; (8000510 <main+0x114>)
 800043a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800043e:	6013      	str	r3, [r2, #0]
  	while ((I2C2->SR1 & 1) == 0); //clear SB
 8000440:	bf00      	nop
 8000442:	4b33      	ldr	r3, [pc, #204]	; (8000510 <main+0x114>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	2b00      	cmp	r3, #0
 800044c:	d0f9      	beq.n	8000442 <main+0x46>
  	I2C2->DR = LCD_Address; //address the MCP23017
 800044e:	4b30      	ldr	r3, [pc, #192]	; (8000510 <main+0x114>)
 8000450:	224e      	movs	r2, #78	; 0x4e
 8000452:	611a      	str	r2, [r3, #16]
  	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000454:	bf00      	nop
 8000456:	4b2e      	ldr	r3, [pc, #184]	; (8000510 <main+0x114>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f003 0302 	and.w	r3, r3, #2
 800045e:	2b00      	cmp	r3, #0
 8000460:	d0f9      	beq.n	8000456 <main+0x5a>
  	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000462:	bf00      	nop
 8000464:	4b2a      	ldr	r3, [pc, #168]	; (8000510 <main+0x114>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	2b00      	cmp	r3, #0
 800046e:	d0f9      	beq.n	8000464 <main+0x68>
  	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000470:	bf00      	nop
 8000472:	4b27      	ldr	r3, [pc, #156]	; (8000510 <main+0x114>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0f9      	beq.n	8000472 <main+0x76>
  	I2C2->DR = 0x00; //write to IODIR_A
 800047e:	4b24      	ldr	r3, [pc, #144]	; (8000510 <main+0x114>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000484:	bf00      	nop
 8000486:	4b22      	ldr	r3, [pc, #136]	; (8000510 <main+0x114>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800048e:	2b00      	cmp	r3, #0
 8000490:	d0f9      	beq.n	8000486 <main+0x8a>
  	I2C2->DR = 0x00; //all outputs
 8000492:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <main+0x114>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000498:	bf00      	nop
 800049a:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <main+0x114>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d0f9      	beq.n	800049a <main+0x9e>
  	I2C2->DR = 0x00; //all outputs for next address which is IODIR_B
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <main+0x114>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	611a      	str	r2, [r3, #16]
  	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80004ac:	bf00      	nop
 80004ae:	4b18      	ldr	r3, [pc, #96]	; (8000510 <main+0x114>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d0f9      	beq.n	80004ae <main+0xb2>
  	while ((I2C2->SR1 & (1<<7)) == 0); //make sure BTF is 1
 80004ba:	bf00      	nop
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <main+0x114>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d0f9      	beq.n	80004bc <main+0xc0>
  	I2C2->CR1 |= (1<<9); //send stop condition
 80004c8:	4b11      	ldr	r3, [pc, #68]	; (8000510 <main+0x114>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a10      	ldr	r2, [pc, #64]	; (8000510 <main+0x114>)
 80004ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d2:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  brightness[0] = encoderValues[3];
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <main+0x118>)
 80004d6:	78db      	ldrb	r3, [r3, #3]
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <main+0x11c>)
 80004dc:	701a      	strb	r2, [r3, #0]
	  brightness[1] = encoderValues[2];
 80004de:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <main+0x118>)
 80004e0:	789b      	ldrb	r3, [r3, #2]
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <main+0x11c>)
 80004e6:	705a      	strb	r2, [r3, #1]
	  brightness[2] = encoderValues[1];
 80004e8:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <main+0x118>)
 80004ea:	785b      	ldrb	r3, [r3, #1]
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <main+0x11c>)
 80004f0:	709a      	strb	r2, [r3, #2]
	  brightness[3] = encoderValues[0];
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <main+0x118>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <main+0x11c>)
 80004fa:	70da      	strb	r2, [r3, #3]

	  //LCDShiftLeft(LCD_Address);
	  DWT_Delay_us(500);
 80004fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000500:	f7ff fe62 	bl	80001c8 <DWT_Delay_us>
	  MCP23017SetPin(0, B, LCD_Address);
 8000504:	224e      	movs	r2, #78	; 0x4e
 8000506:	2101      	movs	r1, #1
 8000508:	2000      	movs	r0, #0
 800050a:	f7ff fe83 	bl	8000214 <MCP23017SetPin>
	  brightness[0] = encoderValues[3];
 800050e:	e7e1      	b.n	80004d4 <main+0xd8>
 8000510:	40005800 	.word	0x40005800
 8000514:	200001b8 	.word	0x200001b8
 8000518:	20000000 	.word	0x20000000

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000526:	2228      	movs	r2, #40	; 0x28
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f007 fe90 	bl	8008250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054c:	2301      	movs	r3, #1
 800054e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000554:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	2301      	movs	r3, #1
 800055c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000568:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800056c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000572:	4618      	mov	r0, r3
 8000574:	f002 fd8e 	bl	8003094 <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800057e:	f000 f9c7 	bl	8000910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	230f      	movs	r3, #15
 8000584:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000586:	2302      	movs	r3, #2
 8000588:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800058e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000592:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	2102      	movs	r1, #2
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 fff8 	bl	8003594 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005aa:	f000 f9b1 	bl	8000910 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80005ae:	2312      	movs	r3, #18
 80005b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80005b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005b6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 f970 	bl	80038a4 <HAL_RCCEx_PeriphCLKConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005ca:	f000 f9a1 	bl	8000910 <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3750      	adds	r7, #80	; 0x50
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	201c      	movs	r0, #28
 80005e0:	f000 fef3 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005e4:	201c      	movs	r0, #28
 80005e6:	f000 ff0c 	bl	8001402 <HAL_NVIC_EnableIRQ>
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_ADC1_Init+0x74>)
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <MX_ADC1_Init+0x78>)
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_ADC1_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_ADC1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_ADC1_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_ADC1_Init+0x74>)
 800061a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800061e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_ADC1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_ADC1_Init+0x74>)
 8000628:	2201      	movs	r2, #1
 800062a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <MX_ADC1_Init+0x74>)
 800062e:	f000 fbeb 	bl	8000e08 <HAL_ADC_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000638:	f000 f96a 	bl	8000910 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000640:	2301      	movs	r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	4619      	mov	r1, r3
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_ADC1_Init+0x74>)
 800064e:	f000 fcb3 	bl	8000fb8 <HAL_ADC_ConfigChannel>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000658:	f000 f95a 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000488 	.word	0x20000488
 8000668:	40012400 	.word	0x40012400

0800066c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_I2C1_Init+0x50>)
 8000672:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <MX_I2C1_Init+0x54>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_I2C1_Init+0x50>)
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x58>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_I2C1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_I2C1_Init+0x50>)
 800068a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800068e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_I2C1_Init+0x50>)
 80006aa:	f001 f837 	bl	800171c <HAL_I2C_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f000 f92c 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200003e0 	.word	0x200003e0
 80006c0:	40005400 	.word	0x40005400
 80006c4:	00061a80 	.word	0x00061a80

080006c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_I2C2_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <MX_I2C2_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_I2C2_Init+0x50>)
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_I2C2_Init+0x58>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_I2C2_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_I2C2_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_I2C2_Init+0x50>)
 80006e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_I2C2_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_I2C2_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_I2C2_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_I2C2_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_I2C2_Init+0x50>)
 8000706:	f001 f809 	bl	800171c <HAL_I2C_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 f8fe 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000434 	.word	0x20000434
 800071c:	40005800 	.word	0x40005800
 8000720:	00061a80 	.word	0x00061a80

08000724 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000740:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <MX_TIM2_Init+0xc4>)
 8000742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000746:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000748:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <MX_TIM2_Init+0xc4>)
 800074a:	2201      	movs	r2, #1
 800074c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <MX_TIM2_Init+0xc4>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 8000754:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <MX_TIM2_Init+0xc4>)
 8000756:	223f      	movs	r2, #63	; 0x3f
 8000758:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <MX_TIM2_Init+0xc4>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000760:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MX_TIM2_Init+0xc4>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000766:	4820      	ldr	r0, [pc, #128]	; (80007e8 <MX_TIM2_Init+0xc4>)
 8000768:	f003 f952 	bl	8003a10 <HAL_TIM_Base_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000772:	f000 f8cd 	bl	8000910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	4619      	mov	r1, r3
 8000782:	4819      	ldr	r0, [pc, #100]	; (80007e8 <MX_TIM2_Init+0xc4>)
 8000784:	f003 fa9b 	bl	8003cbe <HAL_TIM_ConfigClockSource>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800078e:	f000 f8bf 	bl	8000910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4812      	ldr	r0, [pc, #72]	; (80007e8 <MX_TIM2_Init+0xc4>)
 80007a0:	f003 fc6a 	bl	8004078 <HAL_TIMEx_MasterConfigSynchronization>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80007aa:	f000 f8b1 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIM2->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the BAM Interrupt is triggered
 80007ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007b8:	f023 0302 	bic.w	r3, r3, #2
 80007bc:	6013      	str	r3, [r2, #0]
  TIM2->DIER |= 1; //Update interrupt enable
 80007be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	60d3      	str	r3, [r2, #12]
  TIM2->CR1 |= 1; //enable BAM Driver
 80007ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200004b8 	.word	0x200004b8

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000800:	4b3f      	ldr	r3, [pc, #252]	; (8000900 <MX_GPIO_Init+0x114>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a3e      	ldr	r2, [pc, #248]	; (8000900 <MX_GPIO_Init+0x114>)
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b3c      	ldr	r3, [pc, #240]	; (8000900 <MX_GPIO_Init+0x114>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0310 	and.w	r3, r3, #16
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000818:	4b39      	ldr	r3, [pc, #228]	; (8000900 <MX_GPIO_Init+0x114>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a38      	ldr	r2, [pc, #224]	; (8000900 <MX_GPIO_Init+0x114>)
 800081e:	f043 0320 	orr.w	r3, r3, #32
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b36      	ldr	r3, [pc, #216]	; (8000900 <MX_GPIO_Init+0x114>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0320 	and.w	r3, r3, #32
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	4b33      	ldr	r3, [pc, #204]	; (8000900 <MX_GPIO_Init+0x114>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a32      	ldr	r2, [pc, #200]	; (8000900 <MX_GPIO_Init+0x114>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b30      	ldr	r3, [pc, #192]	; (8000900 <MX_GPIO_Init+0x114>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <MX_GPIO_Init+0x114>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a2c      	ldr	r2, [pc, #176]	; (8000900 <MX_GPIO_Init+0x114>)
 800084e:	f043 0308 	orr.w	r3, r3, #8
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <MX_GPIO_Init+0x114>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0308 	and.w	r3, r3, #8
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000866:	4827      	ldr	r0, [pc, #156]	; (8000904 <MX_GPIO_Init+0x118>)
 8000868:	f000 ff40 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f248 1180 	movw	r1, #33152	; 0x8180
 8000872:	4825      	ldr	r0, [pc, #148]	; (8000908 <MX_GPIO_Init+0x11c>)
 8000874:	f000 ff3a 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800087e:	4823      	ldr	r0, [pc, #140]	; (800090c <MX_GPIO_Init+0x120>)
 8000880:	f000 ff34 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000884:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	4619      	mov	r1, r3
 800089c:	4819      	ldr	r0, [pc, #100]	; (8000904 <MX_GPIO_Init+0x118>)
 800089e:	f000 fdcb 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
 80008a2:	f248 1380 	movw	r3, #33152	; 0x8180
 80008a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	4619      	mov	r1, r3
 80008ba:	4813      	ldr	r0, [pc, #76]	; (8000908 <MX_GPIO_Init+0x11c>)
 80008bc:	f000 fdbc 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008c0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4619      	mov	r1, r3
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <MX_GPIO_Init+0x120>)
 80008da:	f000 fdad 	bl	8001438 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_GPIO_Init+0x11c>)
 80008f4:	f000 fda0 	bl	8001438 <HAL_GPIO_Init>

}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40021000 	.word	0x40021000
 8000904:	40011000 	.word	0x40011000
 8000908:	40010800 	.word	0x40010800
 800090c:	40010c00 	.word	0x40010c00

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000916:	e7fe      	b.n	8000916 <Error_Handler+0x6>

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_MspInit+0x5c>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	4a14      	ldr	r2, [pc, #80]	; (8000974 <HAL_MspInit+0x5c>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6193      	str	r3, [r2, #24]
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_MspInit+0x5c>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_MspInit+0x5c>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_MspInit+0x5c>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	61d3      	str	r3, [r2, #28]
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_MspInit+0x5c>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_MspInit+0x60>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	4a04      	ldr	r2, [pc, #16]	; (8000978 <HAL_MspInit+0x60>)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	40021000 	.word	0x40021000
 8000978:	40010000 	.word	0x40010000

0800097c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <HAL_ADC_MspInit+0x6c>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d121      	bne.n	80009e0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <HAL_ADC_MspInit+0x70>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a12      	ldr	r2, [pc, #72]	; (80009ec <HAL_ADC_MspInit+0x70>)
 80009a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <HAL_ADC_MspInit+0x70>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <HAL_ADC_MspInit+0x70>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <HAL_ADC_MspInit+0x70>)
 80009ba:	f043 0304 	orr.w	r3, r3, #4
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_ADC_MspInit+0x70>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80009cc:	230f      	movs	r3, #15
 80009ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d0:	2303      	movs	r3, #3
 80009d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	4619      	mov	r1, r3
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <HAL_ADC_MspInit+0x74>)
 80009dc:	f000 fd2c 	bl	8001438 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40012400 	.word	0x40012400
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40010800 	.word	0x40010800

080009f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	; 0x30
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a32      	ldr	r2, [pc, #200]	; (8000ad8 <HAL_I2C_MspInit+0xe4>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d133      	bne.n	8000a7c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	4b31      	ldr	r3, [pc, #196]	; (8000adc <HAL_I2C_MspInit+0xe8>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a30      	ldr	r2, [pc, #192]	; (8000adc <HAL_I2C_MspInit+0xe8>)
 8000a1a:	f043 0308 	orr.w	r3, r3, #8
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <HAL_I2C_MspInit+0xe8>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0308 	and.w	r3, r3, #8
 8000a28:	61bb      	str	r3, [r7, #24]
 8000a2a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a32:	2312      	movs	r3, #18
 8000a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4827      	ldr	r0, [pc, #156]	; (8000ae0 <HAL_I2C_MspInit+0xec>)
 8000a42:	f000 fcf9 	bl	8001438 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000a46:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <HAL_I2C_MspInit+0xf0>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a56:	f043 0302 	orr.w	r3, r3, #2
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a5c:	4a21      	ldr	r2, [pc, #132]	; (8000ae4 <HAL_I2C_MspInit+0xf0>)
 8000a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a60:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a62:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <HAL_I2C_MspInit+0xe8>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <HAL_I2C_MspInit+0xe8>)
 8000a68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <HAL_I2C_MspInit+0xe8>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a7a:	e029      	b.n	8000ad0 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <HAL_I2C_MspInit+0xf4>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d124      	bne.n	8000ad0 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_I2C_MspInit+0xe8>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	4a14      	ldr	r2, [pc, #80]	; (8000adc <HAL_I2C_MspInit+0xe8>)
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	6193      	str	r3, [r2, #24]
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_I2C_MspInit+0xe8>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f003 0308 	and.w	r3, r3, #8
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa4:	2312      	movs	r3, #18
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <HAL_I2C_MspInit+0xec>)
 8000ab4:	f000 fcc0 	bl	8001438 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_I2C_MspInit+0xe8>)
 8000aba:	69db      	ldr	r3, [r3, #28]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_I2C_MspInit+0xe8>)
 8000abe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ac2:	61d3      	str	r3, [r2, #28]
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_I2C_MspInit+0xe8>)
 8000ac6:	69db      	ldr	r3, [r3, #28]
 8000ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3730      	adds	r7, #48	; 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40005400 	.word	0x40005400
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40010c00 	.word	0x40010c00
 8000ae4:	40010000 	.word	0x40010000
 8000ae8:	40005800 	.word	0x40005800

08000aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000afc:	d10b      	bne.n	8000b16 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_TIM_Base_MspInit+0x34>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_TIM_Base_MspInit+0x34>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	61d3      	str	r3, [r2, #28]
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_TIM_Base_MspInit+0x34>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40021000 	.word	0x40021000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler+0x4>

08000b36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr

08000b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr

08000b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr

08000b66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6a:	f000 f931 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b7a:	f001 f838 	bl	8001bee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20001198 	.word	0x20001198

08000b88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	for(int i = 0; i < 4; i++){ //BAM all 4 LED's
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	e01c      	b.n	8000bce <TIM2_IRQHandler+0x46>

		if(brightness[i] & (1 << BAMIndex)){
 8000b94:	4a4b      	ldr	r2, [pc, #300]	; (8000cc4 <TIM2_IRQHandler+0x13c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b4a      	ldr	r3, [pc, #296]	; (8000cc8 <TIM2_IRQHandler+0x140>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	fa42 f303 	asr.w	r3, r2, r3
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d006      	beq.n	8000bbc <TIM2_IRQHandler+0x34>
			GPIOB->BSRR = (1<<(i+12));
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	330c      	adds	r3, #12
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	409a      	lsls	r2, r3
 8000bb6:	4b45      	ldr	r3, [pc, #276]	; (8000ccc <TIM2_IRQHandler+0x144>)
 8000bb8:	611a      	str	r2, [r3, #16]
 8000bba:	e005      	b.n	8000bc8 <TIM2_IRQHandler+0x40>
		}
		else{
			GPIOB->BRR = (1<<(i+12));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	330c      	adds	r3, #12
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	409a      	lsls	r2, r3
 8000bc4:	4b41      	ldr	r3, [pc, #260]	; (8000ccc <TIM2_IRQHandler+0x144>)
 8000bc6:	615a      	str	r2, [r3, #20]
	for(int i = 0; i < 4; i++){ //BAM all 4 LED's
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	dddf      	ble.n	8000b94 <TIM2_IRQHandler+0xc>
		}

	}

	if(BAMIndex == 7){ //We've passed one BAM cycle
 8000bd4:	4b3c      	ldr	r3, [pc, #240]	; (8000cc8 <TIM2_IRQHandler+0x140>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b07      	cmp	r3, #7
 8000bda:	d15e      	bne.n	8000c9a <TIM2_IRQHandler+0x112>
		BAMIndex = 0;
 8000bdc:	4b3a      	ldr	r3, [pc, #232]	; (8000cc8 <TIM2_IRQHandler+0x140>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = 1;
 8000be2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000be6:	2201      	movs	r2, #1
 8000be8:	629a      	str	r2, [r3, #40]	; 0x28



		uint8_t currentReadoff = ((((GPIOA->IDR)>>9) & 1) << 1) | (((GPIOA->IDR)>>10) & 1); //read current encoder state
 8000bea:	4b39      	ldr	r3, [pc, #228]	; (8000cd0 <TIM2_IRQHandler+0x148>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	0a5b      	lsrs	r3, r3, #9
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b34      	ldr	r3, [pc, #208]	; (8000cd0 <TIM2_IRQHandler+0x148>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	0a9b      	lsrs	r3, r3, #10
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	70fb      	strb	r3, [r7, #3]
		uint8_t index = (lastEncoder[currentEncoder]<<2) | currentReadoff;
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <TIM2_IRQHandler+0x14c>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <TIM2_IRQHandler+0x150>)
 8000c16:	5c9b      	ldrb	r3, [r3, r2]
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	b25a      	sxtb	r2, r3
 8000c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b25b      	sxtb	r3, r3
 8000c24:	70bb      	strb	r3, [r7, #2]
		encoderValues[currentEncoder] += encoderLUT[index];
 8000c26:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <TIM2_IRQHandler+0x14c>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <TIM2_IRQHandler+0x154>)
 8000c2e:	5c9a      	ldrb	r2, [r3, r2]
 8000c30:	78bb      	ldrb	r3, [r7, #2]
 8000c32:	492b      	ldr	r1, [pc, #172]	; (8000ce0 <TIM2_IRQHandler+0x158>)
 8000c34:	56cb      	ldrsb	r3, [r1, r3]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	4926      	ldr	r1, [pc, #152]	; (8000cd4 <TIM2_IRQHandler+0x14c>)
 8000c3a:	7809      	ldrb	r1, [r1, #0]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <TIM2_IRQHandler+0x154>)
 8000c42:	545a      	strb	r2, [r3, r1]
		lastEncoder[currentEncoder] = currentReadoff;
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <TIM2_IRQHandler+0x14c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4a23      	ldr	r2, [pc, #140]	; (8000cd8 <TIM2_IRQHandler+0x150>)
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	5453      	strb	r3, [r2, r1]
		//uint8_t buffer[256];
		//sprintf(buffer, "currentReadoff %d index %d encoderValue %d\r\n", currentReadoff, index, encoderValues[0]);
		//CDC_Transmit_FS(buffer, sizeof(buffer));
		//}

		if(currentEncoder == 4) currentEncoder = 0;
 8000c50:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <TIM2_IRQHandler+0x14c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d103      	bne.n	8000c60 <TIM2_IRQHandler+0xd8>
 8000c58:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <TIM2_IRQHandler+0x14c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e005      	b.n	8000c6c <TIM2_IRQHandler+0xe4>
		else currentEncoder++;
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <TIM2_IRQHandler+0x14c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <TIM2_IRQHandler+0x14c>)
 8000c6a:	701a      	strb	r2, [r3, #0]

		//select the nth encoder here to allow the mux time to settle
		GPIOC->BRR = (3<<13); //clear GPIO Pins
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <TIM2_IRQHandler+0x15c>)
 8000c6e:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000c72:	615a      	str	r2, [r3, #20]
		GPIOC->BSRR = ((currentEncoder&3)<<13);
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <TIM2_IRQHandler+0x14c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	035b      	lsls	r3, r3, #13
 8000c7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ce4 <TIM2_IRQHandler+0x15c>)
 8000c7c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8000c80:	6113      	str	r3, [r2, #16]
		GPIOA->BRR = (1<<15);
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <TIM2_IRQHandler+0x148>)
 8000c84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c88:	615a      	str	r2, [r3, #20]
		GPIOA->BSRR = ((currentEncoder&4)<<13);
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <TIM2_IRQHandler+0x14c>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	035b      	lsls	r3, r3, #13
 8000c90:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <TIM2_IRQHandler+0x148>)
 8000c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c96:	6113      	str	r3, [r2, #16]
 8000c98:	e00c      	b.n	8000cb4 <TIM2_IRQHandler+0x12c>

	}
	else{
		BAMIndex++;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <TIM2_IRQHandler+0x140>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <TIM2_IRQHandler+0x140>)
 8000ca4:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = TIM2->PSC << 1; //set next write to occupy twice the time of this current write.
 8000ca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	6293      	str	r3, [r2, #40]	; 0x28
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <TIM2_IRQHandler+0x160>)
 8000cb6:	f002 fefa 	bl	8003aae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	200001ac 	.word	0x200001ac
 8000ccc:	40010c00 	.word	0x40010c00
 8000cd0:	40010800 	.word	0x40010800
 8000cd4:	200001ad 	.word	0x200001ad
 8000cd8:	200001b0 	.word	0x200001b0
 8000cdc:	200001b8 	.word	0x200001b8
 8000ce0:	20000004 	.word	0x20000004
 8000ce4:	40011000 	.word	0x40011000
 8000ce8:	200004b8 	.word	0x200004b8

08000cec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <Reset_Handler>:
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	e003      	b.n	8000d04 <LoopCopyDataInit>

08000cfc <CopyDataInit>:
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <LoopFillZerobss+0x14>)
 8000cfe:	585b      	ldr	r3, [r3, r1]
 8000d00:	5043      	str	r3, [r0, r1]
 8000d02:	3104      	adds	r1, #4

08000d04 <LoopCopyDataInit>:
 8000d04:	480a      	ldr	r0, [pc, #40]	; (8000d30 <LoopFillZerobss+0x18>)
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <LoopFillZerobss+0x1c>)
 8000d08:	1842      	adds	r2, r0, r1
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d3f6      	bcc.n	8000cfc <CopyDataInit>
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <LoopFillZerobss+0x20>)
 8000d10:	e002      	b.n	8000d18 <LoopFillZerobss>

08000d12 <FillZerobss>:
 8000d12:	2300      	movs	r3, #0
 8000d14:	f842 3b04 	str.w	r3, [r2], #4

08000d18 <LoopFillZerobss>:
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <LoopFillZerobss+0x24>)
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d3f9      	bcc.n	8000d12 <FillZerobss>
 8000d1e:	f7ff ffe5 	bl	8000cec <SystemInit>
 8000d22:	f007 fa71 	bl	8008208 <__libc_init_array>
 8000d26:	f7ff fb69 	bl	80003fc <main>
 8000d2a:	4770      	bx	lr
 8000d2c:	080082f4 	.word	0x080082f4
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000190 	.word	0x20000190
 8000d38:	20000190 	.word	0x20000190
 8000d3c:	20001484 	.word	0x20001484

08000d40 <ADC1_2_IRQHandler>:
 8000d40:	e7fe      	b.n	8000d40 <ADC1_2_IRQHandler>
	...

08000d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_Init+0x28>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_Init+0x28>)
 8000d4e:	f043 0310 	orr.w	r3, r3, #16
 8000d52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 fb2d 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f000 f808 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d60:	f7ff fdda 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40022000 	.word	0x40022000

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x54>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x58>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fb45 	bl	800141e <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 fb0d 	bl	80013ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_InitTick+0x5c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000014 	.word	0x20000014
 8000dc8:	2000001c 	.word	0x2000001c
 8000dcc:	20000018 	.word	0x20000018

08000dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_IncTick+0x1c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_IncTick+0x20>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a03      	ldr	r2, [pc, #12]	; (8000df0 <HAL_IncTick+0x20>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	2000001c 	.word	0x2000001c
 8000df0:	20000500 	.word	0x20000500

08000df4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b02      	ldr	r3, [pc, #8]	; (8000e04 <HAL_GetTick+0x10>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	20000500 	.word	0x20000500

08000e08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d101      	bne.n	8000e2a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e0be      	b.n	8000fa8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d109      	bne.n	8000e4c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff fd98 	bl	800097c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f000 f9ab 	bl	80011a8 <ADC_ConversionStop_Disable>
 8000e52:	4603      	mov	r3, r0
 8000e54:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8099 	bne.w	8000f96 <HAL_ADC_Init+0x18e>
 8000e64:	7dfb      	ldrb	r3, [r7, #23]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f040 8095 	bne.w	8000f96 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e74:	f023 0302 	bic.w	r3, r3, #2
 8000e78:	f043 0202 	orr.w	r2, r3, #2
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e88:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7b1b      	ldrb	r3, [r3, #12]
 8000e8e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e90:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ea0:	d003      	beq.n	8000eaa <HAL_ADC_Init+0xa2>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d102      	bne.n	8000eb0 <HAL_ADC_Init+0xa8>
 8000eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eae:	e000      	b.n	8000eb2 <HAL_ADC_Init+0xaa>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	7d1b      	ldrb	r3, [r3, #20]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d119      	bne.n	8000ef4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7b1b      	ldrb	r3, [r3, #12]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d109      	bne.n	8000edc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	035a      	lsls	r2, r3, #13
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	e00b      	b.n	8000ef4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee0:	f043 0220 	orr.w	r2, r3, #32
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eec:	f043 0201 	orr.w	r2, r3, #1
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <HAL_ADC_Init+0x1a8>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	6812      	ldr	r2, [r2, #0]
 8000f16:	68b9      	ldr	r1, [r7, #8]
 8000f18:	430b      	orrs	r3, r1
 8000f1a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f24:	d003      	beq.n	8000f2e <HAL_ADC_Init+0x126>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d104      	bne.n	8000f38 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	051b      	lsls	r3, r3, #20
 8000f36:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <HAL_ADC_Init+0x1ac>)
 8000f54:	4013      	ands	r3, r2
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d10b      	bne.n	8000f74 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f66:	f023 0303 	bic.w	r3, r3, #3
 8000f6a:	f043 0201 	orr.w	r2, r3, #1
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f72:	e018      	b.n	8000fa6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f78:	f023 0312 	bic.w	r3, r3, #18
 8000f7c:	f043 0210 	orr.w	r2, r3, #16
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f88:	f043 0201 	orr.w	r2, r3, #1
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f94:	e007      	b.n	8000fa6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9a:	f043 0210 	orr.w	r2, r3, #16
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	ffe1f7fd 	.word	0xffe1f7fd
 8000fb4:	ff1f0efe 	.word	0xff1f0efe

08000fb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d101      	bne.n	8000fd8 <HAL_ADC_ConfigChannel+0x20>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e0dc      	b.n	8001192 <HAL_ADC_ConfigChannel+0x1da>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b06      	cmp	r3, #6
 8000fe6:	d81c      	bhi.n	8001022 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	3b05      	subs	r3, #5
 8000ffa:	221f      	movs	r2, #31
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	4019      	ands	r1, r3
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	3b05      	subs	r3, #5
 8001014:	fa00 f203 	lsl.w	r2, r0, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	635a      	str	r2, [r3, #52]	; 0x34
 8001020:	e03c      	b.n	800109c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b0c      	cmp	r3, #12
 8001028:	d81c      	bhi.n	8001064 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	3b23      	subs	r3, #35	; 0x23
 800103c:	221f      	movs	r2, #31
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	4019      	ands	r1, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	3b23      	subs	r3, #35	; 0x23
 8001056:	fa00 f203 	lsl.w	r2, r0, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	430a      	orrs	r2, r1
 8001060:	631a      	str	r2, [r3, #48]	; 0x30
 8001062:	e01b      	b.n	800109c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	3b41      	subs	r3, #65	; 0x41
 8001076:	221f      	movs	r2, #31
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	4019      	ands	r1, r3
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	3b41      	subs	r3, #65	; 0x41
 8001090:	fa00 f203 	lsl.w	r2, r0, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	430a      	orrs	r2, r1
 800109a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b09      	cmp	r3, #9
 80010a2:	d91c      	bls.n	80010de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	68d9      	ldr	r1, [r3, #12]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	3b1e      	subs	r3, #30
 80010b6:	2207      	movs	r2, #7
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	4019      	ands	r1, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	6898      	ldr	r0, [r3, #8]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	3b1e      	subs	r3, #30
 80010d0:	fa00 f203 	lsl.w	r2, r0, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	430a      	orrs	r2, r1
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	e019      	b.n	8001112 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6919      	ldr	r1, [r3, #16]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	2207      	movs	r2, #7
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	4019      	ands	r1, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	6898      	ldr	r0, [r3, #8]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	fa00 f203 	lsl.w	r2, r0, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b10      	cmp	r3, #16
 8001118:	d003      	beq.n	8001122 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800111e:	2b11      	cmp	r3, #17
 8001120:	d132      	bne.n	8001188 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_ADC_ConfigChannel+0x1e4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d125      	bne.n	8001178 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d126      	bne.n	8001188 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001148:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b10      	cmp	r3, #16
 8001150:	d11a      	bne.n	8001188 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001158:	fba2 2303 	umull	r2, r3, r2, r3
 800115c:	0c9a      	lsrs	r2, r3, #18
 800115e:	4613      	mov	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001168:	e002      	b.n	8001170 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	3b01      	subs	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f9      	bne.n	800116a <HAL_ADC_ConfigChannel+0x1b2>
 8001176:	e007      	b.n	8001188 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117c:	f043 0220 	orr.w	r2, r3, #32
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	40012400 	.word	0x40012400
 80011a0:	20000014 	.word	0x20000014
 80011a4:	431bde83 	.word	0x431bde83

080011a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d127      	bne.n	8001212 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0201 	bic.w	r2, r2, #1
 80011d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011d2:	f7ff fe0f 	bl	8000df4 <HAL_GetTick>
 80011d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011d8:	e014      	b.n	8001204 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011da:	f7ff fe0b 	bl	8000df4 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d90d      	bls.n	8001204 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ec:	f043 0210 	orr.w	r2, r3, #16
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f8:	f043 0201 	orr.w	r2, r3, #1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e007      	b.n	8001214 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b01      	cmp	r3, #1
 8001210:	d0e3      	beq.n	80011da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4906      	ldr	r1, [pc, #24]	; (80012b4 <__NVIC_EnableIRQ+0x34>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	; (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <SysTick_Config+0x40>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138e:	210f      	movs	r1, #15
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f7ff ff90 	bl	80012b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff2d 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013dc:	f7ff ff42 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	f7ff ff90 	bl	800130c <NVIC_EncodePriority>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff5f 	bl	80012b8 <__NVIC_SetPriority>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff35 	bl	8001280 <__NVIC_EnableIRQ>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ffa2 	bl	8001370 <SysTick_Config>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001438:	b480      	push	{r7}
 800143a:	b08b      	sub	sp, #44	; 0x2c
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144a:	e127      	b.n	800169c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800144c:	2201      	movs	r2, #1
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	429a      	cmp	r2, r3
 8001466:	f040 8116 	bne.w	8001696 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b12      	cmp	r3, #18
 8001470:	d034      	beq.n	80014dc <HAL_GPIO_Init+0xa4>
 8001472:	2b12      	cmp	r3, #18
 8001474:	d80d      	bhi.n	8001492 <HAL_GPIO_Init+0x5a>
 8001476:	2b02      	cmp	r3, #2
 8001478:	d02b      	beq.n	80014d2 <HAL_GPIO_Init+0x9a>
 800147a:	2b02      	cmp	r3, #2
 800147c:	d804      	bhi.n	8001488 <HAL_GPIO_Init+0x50>
 800147e:	2b00      	cmp	r3, #0
 8001480:	d031      	beq.n	80014e6 <HAL_GPIO_Init+0xae>
 8001482:	2b01      	cmp	r3, #1
 8001484:	d01c      	beq.n	80014c0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001486:	e048      	b.n	800151a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001488:	2b03      	cmp	r3, #3
 800148a:	d043      	beq.n	8001514 <HAL_GPIO_Init+0xdc>
 800148c:	2b11      	cmp	r3, #17
 800148e:	d01b      	beq.n	80014c8 <HAL_GPIO_Init+0x90>
          break;
 8001490:	e043      	b.n	800151a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001492:	4a89      	ldr	r2, [pc, #548]	; (80016b8 <HAL_GPIO_Init+0x280>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d026      	beq.n	80014e6 <HAL_GPIO_Init+0xae>
 8001498:	4a87      	ldr	r2, [pc, #540]	; (80016b8 <HAL_GPIO_Init+0x280>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d806      	bhi.n	80014ac <HAL_GPIO_Init+0x74>
 800149e:	4a87      	ldr	r2, [pc, #540]	; (80016bc <HAL_GPIO_Init+0x284>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d020      	beq.n	80014e6 <HAL_GPIO_Init+0xae>
 80014a4:	4a86      	ldr	r2, [pc, #536]	; (80016c0 <HAL_GPIO_Init+0x288>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01d      	beq.n	80014e6 <HAL_GPIO_Init+0xae>
          break;
 80014aa:	e036      	b.n	800151a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014ac:	4a85      	ldr	r2, [pc, #532]	; (80016c4 <HAL_GPIO_Init+0x28c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d019      	beq.n	80014e6 <HAL_GPIO_Init+0xae>
 80014b2:	4a85      	ldr	r2, [pc, #532]	; (80016c8 <HAL_GPIO_Init+0x290>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d016      	beq.n	80014e6 <HAL_GPIO_Init+0xae>
 80014b8:	4a84      	ldr	r2, [pc, #528]	; (80016cc <HAL_GPIO_Init+0x294>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d013      	beq.n	80014e6 <HAL_GPIO_Init+0xae>
          break;
 80014be:	e02c      	b.n	800151a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	623b      	str	r3, [r7, #32]
          break;
 80014c6:	e028      	b.n	800151a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	3304      	adds	r3, #4
 80014ce:	623b      	str	r3, [r7, #32]
          break;
 80014d0:	e023      	b.n	800151a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	3308      	adds	r3, #8
 80014d8:	623b      	str	r3, [r7, #32]
          break;
 80014da:	e01e      	b.n	800151a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	330c      	adds	r3, #12
 80014e2:	623b      	str	r3, [r7, #32]
          break;
 80014e4:	e019      	b.n	800151a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ee:	2304      	movs	r3, #4
 80014f0:	623b      	str	r3, [r7, #32]
          break;
 80014f2:	e012      	b.n	800151a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d105      	bne.n	8001508 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014fc:	2308      	movs	r3, #8
 80014fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	611a      	str	r2, [r3, #16]
          break;
 8001506:	e008      	b.n	800151a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001508:	2308      	movs	r3, #8
 800150a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	615a      	str	r2, [r3, #20]
          break;
 8001512:	e002      	b.n	800151a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
          break;
 8001518:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	2bff      	cmp	r3, #255	; 0xff
 800151e:	d801      	bhi.n	8001524 <HAL_GPIO_Init+0xec>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	e001      	b.n	8001528 <HAL_GPIO_Init+0xf0>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3304      	adds	r3, #4
 8001528:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	2bff      	cmp	r3, #255	; 0xff
 800152e:	d802      	bhi.n	8001536 <HAL_GPIO_Init+0xfe>
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	e002      	b.n	800153c <HAL_GPIO_Init+0x104>
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	3b08      	subs	r3, #8
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	210f      	movs	r1, #15
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	401a      	ands	r2, r3
 800154e:	6a39      	ldr	r1, [r7, #32]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	431a      	orrs	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 8096 	beq.w	8001696 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800156a:	4b59      	ldr	r3, [pc, #356]	; (80016d0 <HAL_GPIO_Init+0x298>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	4a58      	ldr	r2, [pc, #352]	; (80016d0 <HAL_GPIO_Init+0x298>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6193      	str	r3, [r2, #24]
 8001576:	4b56      	ldr	r3, [pc, #344]	; (80016d0 <HAL_GPIO_Init+0x298>)
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001582:	4a54      	ldr	r2, [pc, #336]	; (80016d4 <HAL_GPIO_Init+0x29c>)
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	089b      	lsrs	r3, r3, #2
 8001588:	3302      	adds	r3, #2
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	220f      	movs	r2, #15
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	4013      	ands	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4b      	ldr	r2, [pc, #300]	; (80016d8 <HAL_GPIO_Init+0x2a0>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_GPIO_Init+0x19e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4a      	ldr	r2, [pc, #296]	; (80016dc <HAL_GPIO_Init+0x2a4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00d      	beq.n	80015d2 <HAL_GPIO_Init+0x19a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a49      	ldr	r2, [pc, #292]	; (80016e0 <HAL_GPIO_Init+0x2a8>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d007      	beq.n	80015ce <HAL_GPIO_Init+0x196>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a48      	ldr	r2, [pc, #288]	; (80016e4 <HAL_GPIO_Init+0x2ac>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_GPIO_Init+0x192>
 80015c6:	2303      	movs	r3, #3
 80015c8:	e006      	b.n	80015d8 <HAL_GPIO_Init+0x1a0>
 80015ca:	2304      	movs	r3, #4
 80015cc:	e004      	b.n	80015d8 <HAL_GPIO_Init+0x1a0>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e002      	b.n	80015d8 <HAL_GPIO_Init+0x1a0>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <HAL_GPIO_Init+0x1a0>
 80015d6:	2300      	movs	r3, #0
 80015d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015da:	f002 0203 	and.w	r2, r2, #3
 80015de:	0092      	lsls	r2, r2, #2
 80015e0:	4093      	lsls	r3, r2
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015e8:	493a      	ldr	r1, [pc, #232]	; (80016d4 <HAL_GPIO_Init+0x29c>)
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d006      	beq.n	8001610 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001602:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4938      	ldr	r1, [pc, #224]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	600b      	str	r3, [r1, #0]
 800160e:	e006      	b.n	800161e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001610:	4b35      	ldr	r3, [pc, #212]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	43db      	mvns	r3, r3
 8001618:	4933      	ldr	r1, [pc, #204]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 800161a:	4013      	ands	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800162a:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	492e      	ldr	r1, [pc, #184]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	604b      	str	r3, [r1, #4]
 8001636:	e006      	b.n	8001646 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001638:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	43db      	mvns	r3, r3
 8001640:	4929      	ldr	r1, [pc, #164]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001642:	4013      	ands	r3, r2
 8001644:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001652:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	4924      	ldr	r1, [pc, #144]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
 800165e:	e006      	b.n	800166e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001660:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	43db      	mvns	r3, r3
 8001668:	491f      	ldr	r1, [pc, #124]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 800166a:	4013      	ands	r3, r2
 800166c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d006      	beq.n	8001688 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	491a      	ldr	r1, [pc, #104]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	60cb      	str	r3, [r1, #12]
 8001686:	e006      	b.n	8001696 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001688:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	43db      	mvns	r3, r3
 8001690:	4915      	ldr	r1, [pc, #84]	; (80016e8 <HAL_GPIO_Init+0x2b0>)
 8001692:	4013      	ands	r3, r2
 8001694:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	3301      	adds	r3, #1
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	fa22 f303 	lsr.w	r3, r2, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f47f aed0 	bne.w	800144c <HAL_GPIO_Init+0x14>
  }
}
 80016ac:	bf00      	nop
 80016ae:	372c      	adds	r7, #44	; 0x2c
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	10210000 	.word	0x10210000
 80016bc:	10110000 	.word	0x10110000
 80016c0:	10120000 	.word	0x10120000
 80016c4:	10310000 	.word	0x10310000
 80016c8:	10320000 	.word	0x10320000
 80016cc:	10220000 	.word	0x10220000
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010000 	.word	0x40010000
 80016d8:	40010800 	.word	0x40010800
 80016dc:	40010c00 	.word	0x40010c00
 80016e0:	40011000 	.word	0x40011000
 80016e4:	40011400 	.word	0x40011400
 80016e8:	40010400 	.word	0x40010400

080016ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001708:	e003      	b.n	8001712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	041a      	lsls	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	611a      	str	r2, [r3, #16]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e11f      	b.n	800196e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff f956 	bl	80009f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2224      	movs	r2, #36	; 0x24
 800174c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0201 	bic.w	r2, r2, #1
 800175e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800176e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800177e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001780:	f002 f85e 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8001784:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4a7b      	ldr	r2, [pc, #492]	; (8001978 <HAL_I2C_Init+0x25c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d807      	bhi.n	80017a0 <HAL_I2C_Init+0x84>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4a7a      	ldr	r2, [pc, #488]	; (800197c <HAL_I2C_Init+0x260>)
 8001794:	4293      	cmp	r3, r2
 8001796:	bf94      	ite	ls
 8001798:	2301      	movls	r3, #1
 800179a:	2300      	movhi	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	e006      	b.n	80017ae <HAL_I2C_Init+0x92>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4a77      	ldr	r2, [pc, #476]	; (8001980 <HAL_I2C_Init+0x264>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	bf94      	ite	ls
 80017a8:	2301      	movls	r3, #1
 80017aa:	2300      	movhi	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e0db      	b.n	800196e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4a72      	ldr	r2, [pc, #456]	; (8001984 <HAL_I2C_Init+0x268>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	0c9b      	lsrs	r3, r3, #18
 80017c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4a64      	ldr	r2, [pc, #400]	; (8001978 <HAL_I2C_Init+0x25c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d802      	bhi.n	80017f0 <HAL_I2C_Init+0xd4>
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	3301      	adds	r3, #1
 80017ee:	e009      	b.n	8001804 <HAL_I2C_Init+0xe8>
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017f6:	fb02 f303 	mul.w	r3, r2, r3
 80017fa:	4a63      	ldr	r2, [pc, #396]	; (8001988 <HAL_I2C_Init+0x26c>)
 80017fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001800:	099b      	lsrs	r3, r3, #6
 8001802:	3301      	adds	r3, #1
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	430b      	orrs	r3, r1
 800180a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001816:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4956      	ldr	r1, [pc, #344]	; (8001978 <HAL_I2C_Init+0x25c>)
 8001820:	428b      	cmp	r3, r1
 8001822:	d80d      	bhi.n	8001840 <HAL_I2C_Init+0x124>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1e59      	subs	r1, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001832:	3301      	adds	r3, #1
 8001834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001838:	2b04      	cmp	r3, #4
 800183a:	bf38      	it	cc
 800183c:	2304      	movcc	r3, #4
 800183e:	e04f      	b.n	80018e0 <HAL_I2C_Init+0x1c4>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d111      	bne.n	800186c <HAL_I2C_Init+0x150>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1e58      	subs	r0, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	440b      	add	r3, r1
 8001856:	fbb0 f3f3 	udiv	r3, r0, r3
 800185a:	3301      	adds	r3, #1
 800185c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001860:	2b00      	cmp	r3, #0
 8001862:	bf0c      	ite	eq
 8001864:	2301      	moveq	r3, #1
 8001866:	2300      	movne	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	e012      	b.n	8001892 <HAL_I2C_Init+0x176>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	1e58      	subs	r0, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6859      	ldr	r1, [r3, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	0099      	lsls	r1, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001882:	3301      	adds	r3, #1
 8001884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001888:	2b00      	cmp	r3, #0
 800188a:	bf0c      	ite	eq
 800188c:	2301      	moveq	r3, #1
 800188e:	2300      	movne	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_I2C_Init+0x17e>
 8001896:	2301      	movs	r3, #1
 8001898:	e022      	b.n	80018e0 <HAL_I2C_Init+0x1c4>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10e      	bne.n	80018c0 <HAL_I2C_Init+0x1a4>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	1e58      	subs	r0, r3, #1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6859      	ldr	r1, [r3, #4]
 80018aa:	460b      	mov	r3, r1
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	440b      	add	r3, r1
 80018b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b4:	3301      	adds	r3, #1
 80018b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018be:	e00f      	b.n	80018e0 <HAL_I2C_Init+0x1c4>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	1e58      	subs	r0, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6859      	ldr	r1, [r3, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	0099      	lsls	r1, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018d6:	3301      	adds	r3, #1
 80018d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	6809      	ldr	r1, [r1, #0]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69da      	ldr	r2, [r3, #28]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800190e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6911      	ldr	r1, [r2, #16]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68d2      	ldr	r2, [r2, #12]
 800191a:	4311      	orrs	r1, r2
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	430b      	orrs	r3, r1
 8001922:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695a      	ldr	r2, [r3, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0201 	orr.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2220      	movs	r2, #32
 800195a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	000186a0 	.word	0x000186a0
 800197c:	001e847f 	.word	0x001e847f
 8001980:	003d08ff 	.word	0x003d08ff
 8001984:	431bde83 	.word	0x431bde83
 8001988:	10624dd3 	.word	0x10624dd3

0800198c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800198c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198e:	b08b      	sub	sp, #44	; 0x2c
 8001990:	af06      	add	r7, sp, #24
 8001992:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e0fd      	b.n	8001b9a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d106      	bne.n	80019b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f006 f97e 	bl	8007cb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2203      	movs	r2, #3
 80019bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 fbed 	bl	80041a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	687e      	ldr	r6, [r7, #4]
 80019d2:	466d      	mov	r5, sp
 80019d4:	f106 0410 	add.w	r4, r6, #16
 80019d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019dc:	6823      	ldr	r3, [r4, #0]
 80019de:	602b      	str	r3, [r5, #0]
 80019e0:	1d33      	adds	r3, r6, #4
 80019e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019e4:	6838      	ldr	r0, [r7, #0]
 80019e6:	f002 fbb7 	bl	8004158 <USB_CoreInit>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0ce      	b.n	8001b9a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 fbe8 	bl	80041d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	e04c      	b.n	8001aa8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	440b      	add	r3, r1
 8001a34:	7bfa      	ldrb	r2, [r7, #15]
 8001a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	b298      	uxth	r0, r3
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	440b      	add	r3, r1
 8001a4a:	3336      	adds	r3, #54	; 0x36
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	440b      	add	r3, r1
 8001a60:	3303      	adds	r3, #3
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	440b      	add	r3, r1
 8001a74:	3338      	adds	r3, #56	; 0x38
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	440b      	add	r3, r1
 8001a88:	333c      	adds	r3, #60	; 0x3c
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3340      	adds	r3, #64	; 0x40
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	7bfa      	ldrb	r2, [r7, #15]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d3ad      	bcc.n	8001a0e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]
 8001ab6:	e044      	b.n	8001b42 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	440b      	add	r3, r1
 8001ac6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ace:	7bfa      	ldrb	r2, [r7, #15]
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	440b      	add	r3, r1
 8001adc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ae4:	7bfa      	ldrb	r2, [r7, #15]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	440b      	add	r3, r1
 8001af2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001afa:	7bfa      	ldrb	r2, [r7, #15]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	440b      	add	r3, r1
 8001b08:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	440b      	add	r3, r1
 8001b1e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b26:	7bfa      	ldrb	r2, [r7, #15]
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	440b      	add	r3, r1
 8001b34:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
 8001b42:	7bfa      	ldrb	r2, [r7, #15]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d3b5      	bcc.n	8001ab8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	687e      	ldr	r6, [r7, #4]
 8001b54:	466d      	mov	r5, sp
 8001b56:	f106 0410 	add.w	r4, r6, #16
 8001b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5e:	6823      	ldr	r3, [r4, #0]
 8001b60:	602b      	str	r3, [r5, #0]
 8001b62:	1d33      	adds	r3, r6, #4
 8001b64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b66:	6838      	ldr	r0, [r7, #0]
 8001b68:	f002 fb42 	bl	80041f0 <USB_DevInit>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2202      	movs	r2, #2
 8001b76:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00d      	b.n	8001b9a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f004 fadc 	bl	8006150 <USB_DevDisconnect>

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ba2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_PCD_Start+0x16>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e016      	b.n	8001be6 <HAL_PCD_Start+0x44>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 fad7 	bl	8004178 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001bca:	2101      	movs	r1, #1
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f006 fae4 	bl	800819a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f004 fab0 	bl	800613c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b088      	sub	sp, #32
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f004 fab2 	bl	8006164 <USB_ReadInterrupts>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c0a:	d102      	bne.n	8001c12 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 fb61 	bl	80022d4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f004 faa4 	bl	8006164 <USB_ReadInterrupts>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c26:	d112      	bne.n	8001c4e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c3a:	b292      	uxth	r2, r2
 8001c3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f006 f8b2 	bl	8007daa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c46:	2100      	movs	r1, #0
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f925 	bl	8001e98 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f004 fa86 	bl	8006164 <USB_ReadInterrupts>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c62:	d10b      	bne.n	8001c7c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c76:	b292      	uxth	r2, r2
 8001c78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f004 fa6f 	bl	8006164 <USB_ReadInterrupts>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c90:	d10b      	bne.n	8001caa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ca4:	b292      	uxth	r2, r2
 8001ca6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f004 fa58 	bl	8006164 <USB_ReadInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cbe:	d126      	bne.n	8001d0e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0204 	bic.w	r2, r2, #4
 8001cd2:	b292      	uxth	r2, r2
 8001cd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0208 	bic.w	r2, r2, #8
 8001cea:	b292      	uxth	r2, r2
 8001cec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f006 f893 	bl	8007e1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d08:	b292      	uxth	r2, r2
 8001d0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f004 fa26 	bl	8006164 <USB_ReadInterrupts>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d22:	f040 8084 	bne.w	8001e2e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	77fb      	strb	r3, [r7, #31]
 8001d2a:	e011      	b.n	8001d50 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	7ffb      	ldrb	r3, [r7, #31]
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	441a      	add	r2, r3
 8001d38:	7ffb      	ldrb	r3, [r7, #31]
 8001d3a:	8812      	ldrh	r2, [r2, #0]
 8001d3c:	b292      	uxth	r2, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	f107 0120 	add.w	r1, r7, #32
 8001d44:	440b      	add	r3, r1
 8001d46:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001d4a:	7ffb      	ldrb	r3, [r7, #31]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	77fb      	strb	r3, [r7, #31]
 8001d50:	7ffb      	ldrb	r3, [r7, #31]
 8001d52:	2b07      	cmp	r3, #7
 8001d54:	d9ea      	bls.n	8001d2c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	b292      	uxth	r2, r2
 8001d6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	b292      	uxth	r2, r2
 8001d82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001d86:	bf00      	nop
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f6      	beq.n	8001d88 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dac:	b292      	uxth	r2, r2
 8001dae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	77fb      	strb	r3, [r7, #31]
 8001db6:	e010      	b.n	8001dda <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001db8:	7ffb      	ldrb	r3, [r7, #31]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	7ffa      	ldrb	r2, [r7, #31]
 8001dc2:	0092      	lsls	r2, r2, #2
 8001dc4:	440a      	add	r2, r1
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	f107 0120 	add.w	r1, r7, #32
 8001dcc:	440b      	add	r3, r1
 8001dce:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001dd2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001dd4:	7ffb      	ldrb	r3, [r7, #31]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	77fb      	strb	r3, [r7, #31]
 8001dda:	7ffb      	ldrb	r3, [r7, #31]
 8001ddc:	2b07      	cmp	r3, #7
 8001dde:	d9eb      	bls.n	8001db8 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0208 	orr.w	r2, r2, #8
 8001df2:	b292      	uxth	r2, r2
 8001df4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e0a:	b292      	uxth	r2, r2
 8001e0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0204 	orr.w	r2, r2, #4
 8001e22:	b292      	uxth	r2, r2
 8001e24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f005 ffdd 	bl	8007de8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f004 f996 	bl	8006164 <USB_ReadInterrupts>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e42:	d10e      	bne.n	8001e62 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e56:	b292      	uxth	r2, r2
 8001e58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f005 ff96 	bl	8007d8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f004 f97c 	bl	8006164 <USB_ReadInterrupts>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e76:	d10b      	bne.n	8001e90 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e8a:	b292      	uxth	r2, r2
 8001e8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001e90:	bf00      	nop
 8001e92:	3720      	adds	r7, #32
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_PCD_SetAddress+0x1a>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e013      	b.n	8001eda <HAL_PCD_SetAddress+0x42>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	78fa      	ldrb	r2, [r7, #3]
 8001ebe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	78fa      	ldrb	r2, [r7, #3]
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f004 f923 	bl	8006116 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	4608      	mov	r0, r1
 8001eec:	4611      	mov	r1, r2
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	70fb      	strb	r3, [r7, #3]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	803b      	strh	r3, [r7, #0]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	da0e      	bge.n	8001f26 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	705a      	strb	r2, [r3, #1]
 8001f24:	e00e      	b.n	8001f44 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 0207 	and.w	r2, r3, #7
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f50:	883a      	ldrh	r2, [r7, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	78ba      	ldrb	r2, [r7, #2]
 8001f5a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	785b      	ldrb	r3, [r3, #1]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d004      	beq.n	8001f6e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f6e:	78bb      	ldrb	r3, [r7, #2]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d102      	bne.n	8001f7a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_PCD_EP_Open+0xa6>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e00e      	b.n	8001fa6 <HAL_PCD_EP_Open+0xc4>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68f9      	ldr	r1, [r7, #12]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f002 f94a 	bl	8004230 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001fa4:	7afb      	ldrb	r3, [r7, #11]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b084      	sub	sp, #16
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	da0e      	bge.n	8001fe0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	705a      	strb	r2, [r3, #1]
 8001fde:	e00e      	b.n	8001ffe <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	f003 0207 	and.w	r2, r3, #7
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	b2da      	uxtb	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_PCD_EP_Close+0x6a>
 8002014:	2302      	movs	r3, #2
 8002016:	e00e      	b.n	8002036 <HAL_PCD_EP_Close+0x88>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68f9      	ldr	r1, [r7, #12]
 8002026:	4618      	mov	r0, r3
 8002028:	f002 fc6c 	bl	8004904 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	460b      	mov	r3, r1
 800204c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800204e:	7afb      	ldrb	r3, [r7, #11]
 8002050:	f003 0207 	and.w	r2, r3, #7
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2200      	movs	r2, #0
 8002076:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	2200      	movs	r2, #0
 800207c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800207e:	7afb      	ldrb	r3, [r7, #11]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	b2da      	uxtb	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800208a:	7afb      	ldrb	r3, [r7, #11]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	2b00      	cmp	r3, #0
 8002092:	d106      	bne.n	80020a2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6979      	ldr	r1, [r7, #20]
 800209a:	4618      	mov	r0, r3
 800209c:	f002 fe1e 	bl	8004cdc <USB_EPStartXfer>
 80020a0:	e005      	b.n	80020ae <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6979      	ldr	r1, [r7, #20]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f002 fe17 	bl	8004cdc <USB_EPStartXfer>
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	f003 0207 	and.w	r2, r3, #7
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	440b      	add	r3, r1
 80020d6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	603b      	str	r3, [r7, #0]
 80020f2:	460b      	mov	r3, r1
 80020f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f6:	7afb      	ldrb	r3, [r7, #11]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4413      	add	r3, r2
 800210a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2200      	movs	r2, #0
 800212a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2201      	movs	r2, #1
 8002130:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002132:	7afb      	ldrb	r3, [r7, #11]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	b2da      	uxtb	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800213e:	7afb      	ldrb	r3, [r7, #11]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	2b00      	cmp	r3, #0
 8002146:	d106      	bne.n	8002156 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6979      	ldr	r1, [r7, #20]
 800214e:	4618      	mov	r0, r3
 8002150:	f002 fdc4 	bl	8004cdc <USB_EPStartXfer>
 8002154:	e005      	b.n	8002162 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6979      	ldr	r1, [r7, #20]
 800215c:	4618      	mov	r0, r3
 800215e:	f002 fdbd 	bl	8004cdc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	f003 0207 	and.w	r2, r3, #7
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	429a      	cmp	r2, r3
 8002184:	d901      	bls.n	800218a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e04c      	b.n	8002224 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800218a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800218e:	2b00      	cmp	r3, #0
 8002190:	da0e      	bge.n	80021b0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	705a      	strb	r2, [r3, #1]
 80021ae:	e00c      	b.n	80021ca <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2201      	movs	r2, #1
 80021ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_PCD_EP_SetStall+0x7e>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e01c      	b.n	8002224 <HAL_PCD_EP_SetStall+0xb8>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68f9      	ldr	r1, [r7, #12]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 fe8f 	bl	8005f1c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	2b00      	cmp	r3, #0
 8002206:	d108      	bne.n	800221a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002212:	4619      	mov	r1, r3
 8002214:	4610      	mov	r0, r2
 8002216:	f003 ffb4 	bl	8006182 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	f003 020f 	and.w	r2, r3, #15
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	429a      	cmp	r2, r3
 8002244:	d901      	bls.n	800224a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e040      	b.n	80022cc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800224a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800224e:	2b00      	cmp	r3, #0
 8002250:	da0e      	bge.n	8002270 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	705a      	strb	r2, [r3, #1]
 800226e:	e00e      	b.n	800228e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	f003 0207 	and.w	r2, r3, #7
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	b2da      	uxtb	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_PCD_EP_ClrStall+0x82>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e00e      	b.n	80022cc <HAL_PCD_EP_ClrStall+0xa0>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68f9      	ldr	r1, [r7, #12]
 80022bc:	4618      	mov	r0, r3
 80022be:	f003 fe7d 	bl	8005fbc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08e      	sub	sp, #56	; 0x38
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022dc:	e2df      	b.n	800289e <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022e6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80022e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80022f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 8158 	bne.w	80025ae <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80022fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b00      	cmp	r3, #0
 8002306:	d152      	bne.n	80023ae <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002318:	81fb      	strh	r3, [r7, #14]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	89fb      	ldrh	r3, [r7, #14]
 8002320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002328:	b29b      	uxth	r3, r3
 800232a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3328      	adds	r3, #40	; 0x28
 8002330:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233a:	b29b      	uxth	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	3302      	adds	r3, #2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	4413      	add	r3, r2
 8002350:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	441a      	add	r2, r3
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800236c:	2100      	movs	r1, #0
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f005 fcf3 	bl	8007d5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 828e 	beq.w	800289e <PCD_EP_ISR_Handler+0x5ca>
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 8289 	bne.w	800289e <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002398:	b2da      	uxtb	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	b292      	uxth	r2, r2
 80023a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023ac:	e277      	b.n	800289e <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80023be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d034      	beq.n	8002432 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4413      	add	r3, r2
 80023dc:	3306      	adds	r3, #6
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002406:	b29b      	uxth	r3, r3
 8002408:	f003 ff0a 	bl	8006220 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	b29a      	uxth	r2, r3
 8002414:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002418:	4013      	ands	r3, r2
 800241a:	823b      	strh	r3, [r7, #16]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	8a3a      	ldrh	r2, [r7, #16]
 8002422:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002426:	b292      	uxth	r2, r2
 8002428:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f005 fc68 	bl	8007d00 <HAL_PCD_SetupStageCallback>
 8002430:	e235      	b.n	800289e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002432:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002436:	2b00      	cmp	r3, #0
 8002438:	f280 8231 	bge.w	800289e <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	b29a      	uxth	r2, r3
 8002444:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002448:	4013      	ands	r3, r2
 800244a:	83bb      	strh	r3, [r7, #28]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	8bba      	ldrh	r2, [r7, #28]
 8002452:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002456:	b292      	uxth	r2, r2
 8002458:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002462:	b29b      	uxth	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	3306      	adds	r3, #6
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	4413      	add	r3, r2
 8002478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d019      	beq.n	80024c2 <PCD_EP_ISR_Handler+0x1ee>
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d015      	beq.n	80024c2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	6959      	ldr	r1, [r3, #20]
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	f003 feba 	bl	8006220 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	695a      	ldr	r2, [r3, #20]
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	441a      	add	r2, r3
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024ba:	2100      	movs	r1, #0
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f005 fc31 	bl	8007d24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	4413      	add	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d112      	bne.n	8002510 <PCD_EP_ISR_Handler+0x23c>
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	801a      	strh	r2, [r3, #0]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002508:	b29a      	uxth	r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	801a      	strh	r2, [r3, #0]
 800250e:	e02f      	b.n	8002570 <PCD_EP_ISR_Handler+0x29c>
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b3e      	cmp	r3, #62	; 0x3e
 8002516:	d813      	bhi.n	8002540 <PCD_EP_ISR_Handler+0x26c>
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	085b      	lsrs	r3, r3, #1
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <PCD_EP_ISR_Handler+0x25e>
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	3301      	adds	r3, #1
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	b29b      	uxth	r3, r3
 8002536:	029b      	lsls	r3, r3, #10
 8002538:	b29a      	uxth	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	801a      	strh	r2, [r3, #0]
 800253e:	e017      	b.n	8002570 <PCD_EP_ISR_Handler+0x29c>
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	633b      	str	r3, [r7, #48]	; 0x30
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <PCD_EP_ISR_Handler+0x286>
 8002554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002556:	3b01      	subs	r3, #1
 8002558:	633b      	str	r3, [r7, #48]	; 0x30
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	b29b      	uxth	r3, r3
 800255e:	029b      	lsls	r3, r3, #10
 8002560:	b29b      	uxth	r3, r3
 8002562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800256a:	b29a      	uxth	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	b29b      	uxth	r3, r3
 8002578:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800257c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002580:	827b      	strh	r3, [r7, #18]
 8002582:	8a7b      	ldrh	r3, [r7, #18]
 8002584:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002588:	827b      	strh	r3, [r7, #18]
 800258a:	8a7b      	ldrh	r3, [r7, #18]
 800258c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002590:	827b      	strh	r3, [r7, #18]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	8a7b      	ldrh	r3, [r7, #18]
 8002598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800259c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	8013      	strh	r3, [r2, #0]
 80025ac:	e177      	b.n	800289e <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025c0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f280 80ea 	bge.w	800279e <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025e0:	4013      	ands	r3, r2
 80025e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80025f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025f8:	b292      	uxth	r2, r2
 80025fa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80025fc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	7b1b      	ldrb	r3, [r3, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d122      	bne.n	8002660 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002622:	b29b      	uxth	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	3306      	adds	r3, #6
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002642:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002644:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 8087 	beq.w	800275a <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	6959      	ldr	r1, [r3, #20]
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	88da      	ldrh	r2, [r3, #6]
 8002658:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800265a:	f003 fde1 	bl	8006220 <USB_ReadPMA>
 800265e:	e07c      	b.n	800275a <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	78db      	ldrb	r3, [r3, #3]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d108      	bne.n	800267a <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002668:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800266a:	461a      	mov	r2, r3
 800266c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f923 	bl	80028ba <HAL_PCD_EP_DB_Receive>
 8002674:	4603      	mov	r3, r0
 8002676:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002678:	e06f      	b.n	800275a <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002694:	847b      	strh	r3, [r7, #34]	; 0x22
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	441a      	add	r2, r3
 80026a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d021      	beq.n	8002718 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026dc:	b29b      	uxth	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	3302      	adds	r3, #2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026fc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002700:	2b00      	cmp	r3, #0
 8002702:	d02a      	beq.n	800275a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	6959      	ldr	r1, [r3, #20]
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	891a      	ldrh	r2, [r3, #8]
 8002710:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002712:	f003 fd85 	bl	8006220 <USB_ReadPMA>
 8002716:	e020      	b.n	800275a <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002720:	b29b      	uxth	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	3306      	adds	r3, #6
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002740:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002742:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6818      	ldr	r0, [r3, #0]
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	6959      	ldr	r1, [r3, #20]
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	895a      	ldrh	r2, [r3, #10]
 8002754:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002756:	f003 fd63 	bl	8006220 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	69da      	ldr	r2, [r3, #28]
 800275e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002760:	441a      	add	r2, r3
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800276c:	441a      	add	r2, r3
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <PCD_EP_ISR_Handler+0x4b0>
 800277a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	429a      	cmp	r2, r3
 8002782:	d206      	bcs.n	8002792 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	4619      	mov	r1, r3
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f005 faca 	bl	8007d24 <HAL_PCD_DataOutStageCallback>
 8002790:	e005      	b.n	800279e <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002798:	4618      	mov	r0, r3
 800279a:	f002 fa9f 	bl	8004cdc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800279e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d07a      	beq.n	800289e <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80027a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4413      	add	r3, r2
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80027d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d6:	843b      	strh	r3, [r7, #32]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	441a      	add	r2, r3
 80027e6:	8c3b      	ldrh	r3, [r7, #32]
 80027e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	78db      	ldrb	r3, [r3, #3]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d108      	bne.n	800280e <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002800:	2b02      	cmp	r3, #2
 8002802:	d146      	bne.n	8002892 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002804:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d141      	bne.n	8002892 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002816:	b29b      	uxth	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	3302      	adds	r3, #2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	4413      	add	r3, r2
 800282c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002836:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	699a      	ldr	r2, [r3, #24]
 800283c:	8bfb      	ldrh	r3, [r7, #30]
 800283e:	429a      	cmp	r2, r3
 8002840:	d906      	bls.n	8002850 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	8bfb      	ldrh	r3, [r7, #30]
 8002848:	1ad2      	subs	r2, r2, r3
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	619a      	str	r2, [r3, #24]
 800284e:	e002      	b.n	8002856 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	4619      	mov	r1, r3
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f005 fa78 	bl	8007d5a <HAL_PCD_DataInStageCallback>
 800286a:	e018      	b.n	800289e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	8bfb      	ldrh	r3, [r7, #30]
 8002872:	441a      	add	r2, r3
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	69da      	ldr	r2, [r3, #28]
 800287c:	8bfb      	ldrh	r3, [r7, #30]
 800287e:	441a      	add	r2, r3
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800288a:	4618      	mov	r0, r3
 800288c:	f002 fa26 	bl	8004cdc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002890:	e005      	b.n	800289e <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002892:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002894:	461a      	mov	r2, r3
 8002896:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f91b 	bl	8002ad4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	b21b      	sxth	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f6ff ad17 	blt.w	80022de <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3738      	adds	r7, #56	; 0x38
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b088      	sub	sp, #32
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	4613      	mov	r3, r2
 80028c6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d07e      	beq.n	80029d0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028da:	b29b      	uxth	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4413      	add	r3, r2
 80028e6:	3302      	adds	r3, #2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	6812      	ldr	r2, [r2, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028fa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	699a      	ldr	r2, [r3, #24]
 8002900:	8b7b      	ldrh	r3, [r7, #26]
 8002902:	429a      	cmp	r2, r3
 8002904:	d306      	bcc.n	8002914 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	699a      	ldr	r2, [r3, #24]
 800290a:	8b7b      	ldrh	r3, [r7, #26]
 800290c:	1ad2      	subs	r2, r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	619a      	str	r2, [r3, #24]
 8002912:	e002      	b.n	800291a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2200      	movs	r2, #0
 8002918:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d123      	bne.n	800296a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	b29b      	uxth	r3, r3
 8002934:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293c:	833b      	strh	r3, [r7, #24]
 800293e:	8b3b      	ldrh	r3, [r7, #24]
 8002940:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002944:	833b      	strh	r3, [r7, #24]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	441a      	add	r2, r3
 8002954:	8b3b      	ldrh	r3, [r7, #24]
 8002956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800295a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800295e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002966:	b29b      	uxth	r3, r3
 8002968:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01f      	beq.n	80029b4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	b29b      	uxth	r3, r3
 8002986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800298a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298e:	82fb      	strh	r3, [r7, #22]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	441a      	add	r2, r3
 800299e:	8afb      	ldrh	r3, [r7, #22]
 80029a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80029b4:	8b7b      	ldrh	r3, [r7, #26]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 8087 	beq.w	8002aca <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	6959      	ldr	r1, [r3, #20]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	891a      	ldrh	r2, [r3, #8]
 80029c8:	8b7b      	ldrh	r3, [r7, #26]
 80029ca:	f003 fc29 	bl	8006220 <USB_ReadPMA>
 80029ce:	e07c      	b.n	8002aca <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d8:	b29b      	uxth	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	3306      	adds	r3, #6
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	8b7b      	ldrh	r3, [r7, #26]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d306      	bcc.n	8002a12 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	699a      	ldr	r2, [r3, #24]
 8002a08:	8b7b      	ldrh	r3, [r7, #26]
 8002a0a:	1ad2      	subs	r2, r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	619a      	str	r2, [r3, #24]
 8002a10:	e002      	b.n	8002a18 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2200      	movs	r2, #0
 8002a16:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d123      	bne.n	8002a68 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3a:	83fb      	strh	r3, [r7, #30]
 8002a3c:	8bfb      	ldrh	r3, [r7, #30]
 8002a3e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a42:	83fb      	strh	r3, [r7, #30]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	441a      	add	r2, r3
 8002a52:	8bfb      	ldrh	r3, [r7, #30]
 8002a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d11f      	bne.n	8002ab2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8c:	83bb      	strh	r3, [r7, #28]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	441a      	add	r2, r3
 8002a9c:	8bbb      	ldrh	r3, [r7, #28]
 8002a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aaa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ab2:	8b7b      	ldrh	r3, [r7, #26]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	6959      	ldr	r1, [r3, #20]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	895a      	ldrh	r2, [r3, #10]
 8002ac4:	8b7b      	ldrh	r3, [r7, #26]
 8002ac6:	f003 fbab 	bl	8006220 <USB_ReadPMA>
    }
  }

  return count;
 8002aca:	8b7b      	ldrh	r3, [r7, #26]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3720      	adds	r7, #32
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b092      	sub	sp, #72	; 0x48
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8132 	beq.w	8002d52 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4413      	add	r3, r2
 8002b02:	3302      	adds	r3, #2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b16:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	699a      	ldr	r2, [r3, #24]
 8002b1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d906      	bls.n	8002b30 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	699a      	ldr	r2, [r3, #24]
 8002b26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b28:	1ad2      	subs	r2, r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	619a      	str	r2, [r3, #24]
 8002b2e:	e002      	b.n	8002b36 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2200      	movs	r2, #0
 8002b34:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d12c      	bne.n	8002b98 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	4619      	mov	r1, r3
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f005 f908 	bl	8007d5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b4a:	88fb      	ldrh	r3, [r7, #6]
 8002b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 822f 	beq.w	8002fb4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b70:	827b      	strh	r3, [r7, #18]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	441a      	add	r2, r3
 8002b80:	8a7b      	ldrh	r3, [r7, #18]
 8002b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	8013      	strh	r3, [r2, #0]
 8002b96:	e20d      	b.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01f      	beq.n	8002be2 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbc:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	441a      	add	r2, r3
 8002bcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	f040 81e3 	bne.w	8002fb4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bf4:	441a      	add	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	69da      	ldr	r2, [r3, #28]
 8002bfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c00:	441a      	add	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	6a1a      	ldr	r2, [r3, #32]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d309      	bcc.n	8002c26 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	6a1a      	ldr	r2, [r3, #32]
 8002c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1e:	1ad2      	subs	r2, r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	621a      	str	r2, [r3, #32]
 8002c24:	e014      	b.n	8002c50 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002c2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c30:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c3a:	e009      	b.n	8002c50 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	785b      	ldrb	r3, [r3, #1]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d155      	bne.n	8002d04 <HAL_PCD_EP_DB_Transmit+0x230>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	011a      	lsls	r2, r3, #4
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d112      	bne.n	8002cac <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	801a      	strh	r2, [r3, #0]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	801a      	strh	r2, [r3, #0]
 8002caa:	e047      	b.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x268>
 8002cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cae:	2b3e      	cmp	r3, #62	; 0x3e
 8002cb0:	d811      	bhi.n	8002cd6 <HAL_PCD_EP_DB_Transmit+0x202>
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	029b      	lsls	r3, r3, #10
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	801a      	strh	r2, [r3, #0]
 8002cd4:	e032      	b.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x268>
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <HAL_PCD_EP_DB_Transmit+0x218>
 8002ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	029b      	lsls	r3, r3, #10
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	801a      	strh	r2, [r3, #0]
 8002d02:	e01b      	b.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x268>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	785b      	ldrb	r3, [r3, #1]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d117      	bne.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x268>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	623b      	str	r3, [r7, #32]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	4413      	add	r3, r2
 8002d22:	623b      	str	r3, [r7, #32]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	011a      	lsls	r2, r3, #4
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d32:	61fb      	str	r3, [r7, #28]
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	6959      	ldr	r1, [r3, #20]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	891a      	ldrh	r2, [r3, #8]
 8002d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f003 fa24 	bl	8006198 <USB_WritePMA>
 8002d50:	e130      	b.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4413      	add	r3, r2
 8002d66:	3306      	adds	r3, #6
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d7a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	699a      	ldr	r2, [r3, #24]
 8002d80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d306      	bcc.n	8002d94 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d8c:	1ad2      	subs	r2, r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	619a      	str	r2, [r3, #24]
 8002d92:	e002      	b.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2200      	movs	r2, #0
 8002d98:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d12c      	bne.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	4619      	mov	r1, r3
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f004 ffd6 	bl	8007d5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f040 80fd 	bne.w	8002fb4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	441a      	add	r2, r3
 8002de4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	8013      	strh	r3, [r2, #0]
 8002dfa:	e0db      	b.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d11f      	bne.n	8002e46 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e20:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	441a      	add	r2, r3
 8002e30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	f040 80b1 	bne.w	8002fb4 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e58:	441a      	add	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	69da      	ldr	r2, [r3, #28]
 8002e62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e64:	441a      	add	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	6a1a      	ldr	r2, [r3, #32]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d309      	bcc.n	8002e8a <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	6a1a      	ldr	r2, [r3, #32]
 8002e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e82:	1ad2      	subs	r2, r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	621a      	str	r2, [r3, #32]
 8002e88:	e014      	b.n	8002eb4 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002e92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e94:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e9e:	e009      	b.n	8002eb4 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	785b      	ldrb	r3, [r3, #1]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d155      	bne.n	8002f6e <HAL_PCD_EP_DB_Transmit+0x49a>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed6:	4413      	add	r3, r2
 8002ed8:	647b      	str	r3, [r7, #68]	; 0x44
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	011a      	lsls	r2, r3, #4
 8002ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8002eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d112      	bne.n	8002f16 <HAL_PCD_EP_DB_Transmit+0x442>
 8002ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efe:	801a      	strh	r2, [r3, #0]
 8002f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f12:	801a      	strh	r2, [r3, #0]
 8002f14:	e044      	b.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f18:	2b3e      	cmp	r3, #62	; 0x3e
 8002f1a:	d811      	bhi.n	8002f40 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1e:	085b      	lsrs	r3, r3, #1
 8002f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2e:	3301      	adds	r3, #1
 8002f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	029b      	lsls	r3, r3, #10
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f3c:	801a      	strh	r2, [r3, #0]
 8002f3e:	e02f      	b.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <HAL_PCD_EP_DB_Transmit+0x482>
 8002f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f52:	3b01      	subs	r3, #1
 8002f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	029b      	lsls	r3, r3, #10
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f6a:	801a      	strh	r2, [r3, #0]
 8002f6c:	e018      	b.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d114      	bne.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	4413      	add	r3, r2
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	011a      	lsls	r2, r3, #4
 8002f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f90:	4413      	add	r3, r2
 8002f92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f96:	633b      	str	r3, [r7, #48]	; 0x30
 8002f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	6959      	ldr	r1, [r3, #20]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	895a      	ldrh	r2, [r3, #10]
 8002fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	f003 f8f2 	bl	8006198 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fce:	823b      	strh	r3, [r7, #16]
 8002fd0:	8a3b      	ldrh	r3, [r7, #16]
 8002fd2:	f083 0310 	eor.w	r3, r3, #16
 8002fd6:	823b      	strh	r3, [r7, #16]
 8002fd8:	8a3b      	ldrh	r3, [r7, #16]
 8002fda:	f083 0320 	eor.w	r3, r3, #32
 8002fde:	823b      	strh	r3, [r7, #16]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	441a      	add	r2, r3
 8002fee:	8a3b      	ldrh	r3, [r7, #16]
 8002ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003000:	b29b      	uxth	r3, r3
 8003002:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3748      	adds	r7, #72	; 0x48
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800300e:	b480      	push	{r7}
 8003010:	b087      	sub	sp, #28
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	817b      	strh	r3, [r7, #10]
 800301c:	4613      	mov	r3, r2
 800301e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003020:	897b      	ldrh	r3, [r7, #10]
 8003022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00b      	beq.n	8003044 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800302c:	897b      	ldrh	r3, [r7, #10]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4413      	add	r3, r2
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	e009      	b.n	8003058 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003044:	897a      	ldrh	r2, [r7, #10]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4413      	add	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003058:	893b      	ldrh	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d107      	bne.n	800306e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2200      	movs	r2, #0
 8003062:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	b29a      	uxth	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	80da      	strh	r2, [r3, #6]
 800306c:	e00b      	b.n	8003086 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2201      	movs	r2, #1
 8003072:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	b29a      	uxth	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	0c1b      	lsrs	r3, r3, #16
 8003080:	b29a      	uxth	r2, r3
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
	...

08003094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e26c      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 8087 	beq.w	80031c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030b4:	4b92      	ldr	r3, [pc, #584]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 030c 	and.w	r3, r3, #12
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d00c      	beq.n	80030da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030c0:	4b8f      	ldr	r3, [pc, #572]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 030c 	and.w	r3, r3, #12
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d112      	bne.n	80030f2 <HAL_RCC_OscConfig+0x5e>
 80030cc:	4b8c      	ldr	r3, [pc, #560]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d8:	d10b      	bne.n	80030f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030da:	4b89      	ldr	r3, [pc, #548]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d06c      	beq.n	80031c0 <HAL_RCC_OscConfig+0x12c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d168      	bne.n	80031c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e246      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0x76>
 80030fc:	4b80      	ldr	r3, [pc, #512]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a7f      	ldr	r2, [pc, #508]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	e02e      	b.n	8003168 <HAL_RCC_OscConfig+0xd4>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0x98>
 8003112:	4b7b      	ldr	r3, [pc, #492]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a7a      	ldr	r2, [pc, #488]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	4b78      	ldr	r3, [pc, #480]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a77      	ldr	r2, [pc, #476]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e01d      	b.n	8003168 <HAL_RCC_OscConfig+0xd4>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003134:	d10c      	bne.n	8003150 <HAL_RCC_OscConfig+0xbc>
 8003136:	4b72      	ldr	r3, [pc, #456]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a71      	ldr	r2, [pc, #452]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 800313c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	4b6f      	ldr	r3, [pc, #444]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a6e      	ldr	r2, [pc, #440]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e00b      	b.n	8003168 <HAL_RCC_OscConfig+0xd4>
 8003150:	4b6b      	ldr	r3, [pc, #428]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a6a      	ldr	r2, [pc, #424]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4b68      	ldr	r3, [pc, #416]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a67      	ldr	r2, [pc, #412]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003166:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d013      	beq.n	8003198 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fd fe40 	bl	8000df4 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003178:	f7fd fe3c 	bl	8000df4 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b64      	cmp	r3, #100	; 0x64
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e1fa      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	4b5d      	ldr	r3, [pc, #372]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0xe4>
 8003196:	e014      	b.n	80031c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fd fe2c 	bl	8000df4 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a0:	f7fd fe28 	bl	8000df4 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	; 0x64
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e1e6      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b2:	4b53      	ldr	r3, [pc, #332]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x10c>
 80031be:	e000      	b.n	80031c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d063      	beq.n	8003296 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ce:	4b4c      	ldr	r3, [pc, #304]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031da:	4b49      	ldr	r3, [pc, #292]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d11c      	bne.n	8003220 <HAL_RCC_OscConfig+0x18c>
 80031e6:	4b46      	ldr	r3, [pc, #280]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d116      	bne.n	8003220 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f2:	4b43      	ldr	r3, [pc, #268]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_RCC_OscConfig+0x176>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d001      	beq.n	800320a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e1ba      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320a:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4939      	ldr	r1, [pc, #228]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321e:	e03a      	b.n	8003296 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003228:	4b36      	ldr	r3, [pc, #216]	; (8003304 <HAL_RCC_OscConfig+0x270>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322e:	f7fd fde1 	bl	8000df4 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003236:	f7fd fddd 	bl	8000df4 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e19b      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003248:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003254:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4927      	ldr	r1, [pc, #156]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 8003264:	4313      	orrs	r3, r2
 8003266:	600b      	str	r3, [r1, #0]
 8003268:	e015      	b.n	8003296 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800326a:	4b26      	ldr	r3, [pc, #152]	; (8003304 <HAL_RCC_OscConfig+0x270>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fd fdc0 	bl	8000df4 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003278:	f7fd fdbc 	bl	8000df4 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e17a      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328a:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d03a      	beq.n	8003318 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d019      	beq.n	80032de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032aa:	4b17      	ldr	r3, [pc, #92]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b0:	f7fd fda0 	bl	8000df4 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b8:	f7fd fd9c 	bl	8000df4 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e15a      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ca:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032d6:	2001      	movs	r0, #1
 80032d8:	f000 fac6 	bl	8003868 <RCC_Delay>
 80032dc:	e01c      	b.n	8003318 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032de:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <HAL_RCC_OscConfig+0x274>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e4:	f7fd fd86 	bl	8000df4 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ea:	e00f      	b.n	800330c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ec:	f7fd fd82 	bl	8000df4 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d908      	bls.n	800330c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e140      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
 8003304:	42420000 	.word	0x42420000
 8003308:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330c:	4b9e      	ldr	r3, [pc, #632]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e9      	bne.n	80032ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80a6 	beq.w	8003472 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003326:	2300      	movs	r3, #0
 8003328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800332a:	4b97      	ldr	r3, [pc, #604]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10d      	bne.n	8003352 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003336:	4b94      	ldr	r3, [pc, #592]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	4a93      	ldr	r2, [pc, #588]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 800333c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003340:	61d3      	str	r3, [r2, #28]
 8003342:	4b91      	ldr	r3, [pc, #580]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334e:	2301      	movs	r3, #1
 8003350:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003352:	4b8e      	ldr	r3, [pc, #568]	; (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d118      	bne.n	8003390 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335e:	4b8b      	ldr	r3, [pc, #556]	; (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a8a      	ldr	r2, [pc, #552]	; (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800336a:	f7fd fd43 	bl	8000df4 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003372:	f7fd fd3f 	bl	8000df4 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b64      	cmp	r3, #100	; 0x64
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e0fd      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003384:	4b81      	ldr	r3, [pc, #516]	; (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d106      	bne.n	80033a6 <HAL_RCC_OscConfig+0x312>
 8003398:	4b7b      	ldr	r3, [pc, #492]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	4a7a      	ldr	r2, [pc, #488]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	6213      	str	r3, [r2, #32]
 80033a4:	e02d      	b.n	8003402 <HAL_RCC_OscConfig+0x36e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x334>
 80033ae:	4b76      	ldr	r3, [pc, #472]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	4a75      	ldr	r2, [pc, #468]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	6213      	str	r3, [r2, #32]
 80033ba:	4b73      	ldr	r3, [pc, #460]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4a72      	ldr	r2, [pc, #456]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033c0:	f023 0304 	bic.w	r3, r3, #4
 80033c4:	6213      	str	r3, [r2, #32]
 80033c6:	e01c      	b.n	8003402 <HAL_RCC_OscConfig+0x36e>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b05      	cmp	r3, #5
 80033ce:	d10c      	bne.n	80033ea <HAL_RCC_OscConfig+0x356>
 80033d0:	4b6d      	ldr	r3, [pc, #436]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	4a6c      	ldr	r2, [pc, #432]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033d6:	f043 0304 	orr.w	r3, r3, #4
 80033da:	6213      	str	r3, [r2, #32]
 80033dc:	4b6a      	ldr	r3, [pc, #424]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4a69      	ldr	r2, [pc, #420]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	6213      	str	r3, [r2, #32]
 80033e8:	e00b      	b.n	8003402 <HAL_RCC_OscConfig+0x36e>
 80033ea:	4b67      	ldr	r3, [pc, #412]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	4a66      	ldr	r2, [pc, #408]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	6213      	str	r3, [r2, #32]
 80033f6:	4b64      	ldr	r3, [pc, #400]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	4a63      	ldr	r2, [pc, #396]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80033fc:	f023 0304 	bic.w	r3, r3, #4
 8003400:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d015      	beq.n	8003436 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340a:	f7fd fcf3 	bl	8000df4 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003410:	e00a      	b.n	8003428 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003412:	f7fd fcef 	bl	8000df4 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003420:	4293      	cmp	r3, r2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e0ab      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003428:	4b57      	ldr	r3, [pc, #348]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ee      	beq.n	8003412 <HAL_RCC_OscConfig+0x37e>
 8003434:	e014      	b.n	8003460 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003436:	f7fd fcdd 	bl	8000df4 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343c:	e00a      	b.n	8003454 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343e:	f7fd fcd9 	bl	8000df4 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f241 3288 	movw	r2, #5000	; 0x1388
 800344c:	4293      	cmp	r3, r2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e095      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003454:	4b4c      	ldr	r3, [pc, #304]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1ee      	bne.n	800343e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003460:	7dfb      	ldrb	r3, [r7, #23]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d105      	bne.n	8003472 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003466:	4b48      	ldr	r3, [pc, #288]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4a47      	ldr	r2, [pc, #284]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 800346c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003470:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 8081 	beq.w	800357e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800347c:	4b42      	ldr	r3, [pc, #264]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 030c 	and.w	r3, r3, #12
 8003484:	2b08      	cmp	r3, #8
 8003486:	d061      	beq.n	800354c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d146      	bne.n	800351e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003490:	4b3f      	ldr	r3, [pc, #252]	; (8003590 <HAL_RCC_OscConfig+0x4fc>)
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003496:	f7fd fcad 	bl	8000df4 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349e:	f7fd fca9 	bl	8000df4 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e067      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b0:	4b35      	ldr	r3, [pc, #212]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f0      	bne.n	800349e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c4:	d108      	bne.n	80034d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034c6:	4b30      	ldr	r3, [pc, #192]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	492d      	ldr	r1, [pc, #180]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034d8:	4b2b      	ldr	r3, [pc, #172]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a19      	ldr	r1, [r3, #32]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	430b      	orrs	r3, r1
 80034ea:	4927      	ldr	r1, [pc, #156]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f0:	4b27      	ldr	r3, [pc, #156]	; (8003590 <HAL_RCC_OscConfig+0x4fc>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f6:	f7fd fc7d 	bl	8000df4 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fe:	f7fd fc79 	bl	8000df4 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e037      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003510:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x46a>
 800351c:	e02f      	b.n	800357e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351e:	4b1c      	ldr	r3, [pc, #112]	; (8003590 <HAL_RCC_OscConfig+0x4fc>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7fd fc66 	bl	8000df4 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352c:	f7fd fc62 	bl	8000df4 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e020      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0x498>
 800354a:	e018      	b.n	800357e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e013      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_OscConfig+0x4f4>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	429a      	cmp	r2, r3
 800356a:	d106      	bne.n	800357a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d001      	beq.n	800357e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40021000 	.word	0x40021000
 800358c:	40007000 	.word	0x40007000
 8003590:	42420060 	.word	0x42420060

08003594 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0d0      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035a8:	4b6a      	ldr	r3, [pc, #424]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d910      	bls.n	80035d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b67      	ldr	r3, [pc, #412]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f023 0207 	bic.w	r2, r3, #7
 80035be:	4965      	ldr	r1, [pc, #404]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b63      	ldr	r3, [pc, #396]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0b8      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d020      	beq.n	8003626 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f0:	4b59      	ldr	r3, [pc, #356]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	4a58      	ldr	r2, [pc, #352]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80035f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003608:	4b53      	ldr	r3, [pc, #332]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	4a52      	ldr	r2, [pc, #328]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800360e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003612:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003614:	4b50      	ldr	r3, [pc, #320]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	494d      	ldr	r1, [pc, #308]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d040      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	4b47      	ldr	r3, [pc, #284]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d115      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e07f      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	4b41      	ldr	r3, [pc, #260]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e073      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003662:	4b3d      	ldr	r3, [pc, #244]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06b      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003672:	4b39      	ldr	r3, [pc, #228]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f023 0203 	bic.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4936      	ldr	r1, [pc, #216]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	4313      	orrs	r3, r2
 8003682:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003684:	f7fd fbb6 	bl	8000df4 <HAL_GetTick>
 8003688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368c:	f7fd fbb2 	bl	8000df4 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	; 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e053      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	4b2d      	ldr	r3, [pc, #180]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 020c 	and.w	r2, r3, #12
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1eb      	bne.n	800368c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036b4:	4b27      	ldr	r3, [pc, #156]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d210      	bcs.n	80036e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b24      	ldr	r3, [pc, #144]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 0207 	bic.w	r2, r3, #7
 80036ca:	4922      	ldr	r1, [pc, #136]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d2:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e032      	b.n	800374a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f0:	4b19      	ldr	r3, [pc, #100]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4916      	ldr	r1, [pc, #88]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800370e:	4b12      	ldr	r3, [pc, #72]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	490e      	ldr	r1, [pc, #56]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003722:	f000 f821 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 8003726:	4601      	mov	r1, r0
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	4a0a      	ldr	r2, [pc, #40]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003734:	5cd3      	ldrb	r3, [r2, r3]
 8003736:	fa21 f303 	lsr.w	r3, r1, r3
 800373a:	4a09      	ldr	r2, [pc, #36]	; (8003760 <HAL_RCC_ClockConfig+0x1cc>)
 800373c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_RCC_ClockConfig+0x1d0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fd fb14 	bl	8000d70 <HAL_InitTick>

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40022000 	.word	0x40022000
 8003758:	40021000 	.word	0x40021000
 800375c:	080082d4 	.word	0x080082d4
 8003760:	20000014 	.word	0x20000014
 8003764:	20000018 	.word	0x20000018

08003768 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003768:	b490      	push	{r4, r7}
 800376a:	b08a      	sub	sp, #40	; 0x28
 800376c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800376e:	4b2a      	ldr	r3, [pc, #168]	; (8003818 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003770:	1d3c      	adds	r4, r7, #4
 8003772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003778:	4b28      	ldr	r3, [pc, #160]	; (800381c <HAL_RCC_GetSysClockFreq+0xb4>)
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	2300      	movs	r3, #0
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	2300      	movs	r3, #0
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003792:	4b23      	ldr	r3, [pc, #140]	; (8003820 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d002      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x40>
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d003      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0x46>
 80037a6:	e02d      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037a8:	4b1e      	ldr	r3, [pc, #120]	; (8003824 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037aa:	623b      	str	r3, [r7, #32]
      break;
 80037ac:	e02d      	b.n	800380a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	0c9b      	lsrs	r3, r3, #18
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037ba:	4413      	add	r3, r2
 80037bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d013      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037cc:	4b14      	ldr	r3, [pc, #80]	; (8003820 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	0c5b      	lsrs	r3, r3, #17
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037da:	4413      	add	r3, r2
 80037dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	4a0f      	ldr	r2, [pc, #60]	; (8003824 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037e6:	fb02 f203 	mul.w	r2, r2, r3
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
 80037f2:	e004      	b.n	80037fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	4a0c      	ldr	r2, [pc, #48]	; (8003828 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037f8:	fb02 f303 	mul.w	r3, r2, r3
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	623b      	str	r3, [r7, #32]
      break;
 8003802:	e002      	b.n	800380a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003804:	4b07      	ldr	r3, [pc, #28]	; (8003824 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003806:	623b      	str	r3, [r7, #32]
      break;
 8003808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800380a:	6a3b      	ldr	r3, [r7, #32]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3728      	adds	r7, #40	; 0x28
 8003810:	46bd      	mov	sp, r7
 8003812:	bc90      	pop	{r4, r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	08008278 	.word	0x08008278
 800381c:	08008288 	.word	0x08008288
 8003820:	40021000 	.word	0x40021000
 8003824:	007a1200 	.word	0x007a1200
 8003828:	003d0900 	.word	0x003d0900

0800382c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003830:	4b02      	ldr	r3, [pc, #8]	; (800383c <HAL_RCC_GetHCLKFreq+0x10>)
 8003832:	681b      	ldr	r3, [r3, #0]
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr
 800383c:	20000014 	.word	0x20000014

08003840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003844:	f7ff fff2 	bl	800382c <HAL_RCC_GetHCLKFreq>
 8003848:	4601      	mov	r1, r0
 800384a:	4b05      	ldr	r3, [pc, #20]	; (8003860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	0a1b      	lsrs	r3, r3, #8
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	4a03      	ldr	r2, [pc, #12]	; (8003864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003856:	5cd3      	ldrb	r3, [r2, r3]
 8003858:	fa21 f303 	lsr.w	r3, r1, r3
}
 800385c:	4618      	mov	r0, r3
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40021000 	.word	0x40021000
 8003864:	080082e4 	.word	0x080082e4

08003868 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003870:	4b0a      	ldr	r3, [pc, #40]	; (800389c <RCC_Delay+0x34>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a0a      	ldr	r2, [pc, #40]	; (80038a0 <RCC_Delay+0x38>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	0a5b      	lsrs	r3, r3, #9
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	fb02 f303 	mul.w	r3, r2, r3
 8003882:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003884:	bf00      	nop
  }
  while (Delay --);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1e5a      	subs	r2, r3, #1
 800388a:	60fa      	str	r2, [r7, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1f9      	bne.n	8003884 <RCC_Delay+0x1c>
}
 8003890:	bf00      	nop
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20000014 	.word	0x20000014
 80038a0:	10624dd3 	.word	0x10624dd3

080038a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d07d      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80038c0:	2300      	movs	r3, #0
 80038c2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038c4:	4b4f      	ldr	r3, [pc, #316]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10d      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d0:	4b4c      	ldr	r3, [pc, #304]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	4a4b      	ldr	r2, [pc, #300]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038da:	61d3      	str	r3, [r2, #28]
 80038dc:	4b49      	ldr	r3, [pc, #292]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e4:	60bb      	str	r3, [r7, #8]
 80038e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e8:	2301      	movs	r3, #1
 80038ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ec:	4b46      	ldr	r3, [pc, #280]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d118      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f8:	4b43      	ldr	r3, [pc, #268]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a42      	ldr	r2, [pc, #264]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003902:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003904:	f7fd fa76 	bl	8000df4 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390a:	e008      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390c:	f7fd fa72 	bl	8000df4 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	; 0x64
 8003918:	d901      	bls.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e06d      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391e:	4b3a      	ldr	r3, [pc, #232]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800392a:	4b36      	ldr	r3, [pc, #216]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003932:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d02e      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	429a      	cmp	r2, r3
 8003946:	d027      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003948:	4b2e      	ldr	r3, [pc, #184]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003950:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003952:	4b2e      	ldr	r3, [pc, #184]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003954:	2201      	movs	r2, #1
 8003956:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003958:	4b2c      	ldr	r3, [pc, #176]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800395e:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d014      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396e:	f7fd fa41 	bl	8000df4 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003974:	e00a      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003976:	f7fd fa3d 	bl	8000df4 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f241 3288 	movw	r2, #5000	; 0x1388
 8003984:	4293      	cmp	r3, r2
 8003986:	d901      	bls.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e036      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398c:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0ee      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003998:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4917      	ldr	r1, [pc, #92]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d105      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039c8:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	490b      	ldr	r1, [pc, #44]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	4904      	ldr	r1, [pc, #16]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40007000 	.word	0x40007000
 8003a0c:	42420440 	.word	0x42420440

08003a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e041      	b.n	8003aa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fd f858 	bl	8000aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f000 fa1a 	bl	8003e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d122      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d11b      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f06f 0202 	mvn.w	r2, #2
 8003ada:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f9ad 	bl	8003e50 <HAL_TIM_IC_CaptureCallback>
 8003af6:	e005      	b.n	8003b04 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f9a0 	bl	8003e3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f9af 	bl	8003e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d122      	bne.n	8003b5e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d11b      	bne.n	8003b5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f06f 0204 	mvn.w	r2, #4
 8003b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f983 	bl	8003e50 <HAL_TIM_IC_CaptureCallback>
 8003b4a:	e005      	b.n	8003b58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f976 	bl	8003e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f985 	bl	8003e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d122      	bne.n	8003bb2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d11b      	bne.n	8003bb2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f06f 0208 	mvn.w	r2, #8
 8003b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2204      	movs	r2, #4
 8003b88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f959 	bl	8003e50 <HAL_TIM_IC_CaptureCallback>
 8003b9e:	e005      	b.n	8003bac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f94c 	bl	8003e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f95b 	bl	8003e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b10      	cmp	r3, #16
 8003bbe:	d122      	bne.n	8003c06 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f003 0310 	and.w	r3, r3, #16
 8003bca:	2b10      	cmp	r3, #16
 8003bcc:	d11b      	bne.n	8003c06 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f06f 0210 	mvn.w	r2, #16
 8003bd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2208      	movs	r2, #8
 8003bdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f92f 	bl	8003e50 <HAL_TIM_IC_CaptureCallback>
 8003bf2:	e005      	b.n	8003c00 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f922 	bl	8003e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f931 	bl	8003e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d10e      	bne.n	8003c32 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d107      	bne.n	8003c32 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f06f 0201 	mvn.w	r2, #1
 8003c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f8fd 	bl	8003e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3c:	2b80      	cmp	r3, #128	; 0x80
 8003c3e:	d10e      	bne.n	8003c5e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4a:	2b80      	cmp	r3, #128	; 0x80
 8003c4c:	d107      	bne.n	8003c5e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fa74 	bl	8004146 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c68:	2b40      	cmp	r3, #64	; 0x40
 8003c6a:	d10e      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b40      	cmp	r3, #64	; 0x40
 8003c78:	d107      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f8f5 	bl	8003e74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f003 0320 	and.w	r3, r3, #32
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d10e      	bne.n	8003cb6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d107      	bne.n	8003cb6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f06f 0220 	mvn.w	r2, #32
 8003cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fa3f 	bl	8004134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_TIM_ConfigClockSource+0x18>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e0a6      	b.n	8003e24 <HAL_TIM_ConfigClockSource+0x166>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cf4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cfc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b40      	cmp	r3, #64	; 0x40
 8003d0c:	d067      	beq.n	8003dde <HAL_TIM_ConfigClockSource+0x120>
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	d80b      	bhi.n	8003d2a <HAL_TIM_ConfigClockSource+0x6c>
 8003d12:	2b10      	cmp	r3, #16
 8003d14:	d073      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x140>
 8003d16:	2b10      	cmp	r3, #16
 8003d18:	d802      	bhi.n	8003d20 <HAL_TIM_ConfigClockSource+0x62>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d06f      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d1e:	e078      	b.n	8003e12 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d06c      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x140>
 8003d24:	2b30      	cmp	r3, #48	; 0x30
 8003d26:	d06a      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d28:	e073      	b.n	8003e12 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d2a:	2b70      	cmp	r3, #112	; 0x70
 8003d2c:	d00d      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0x8c>
 8003d2e:	2b70      	cmp	r3, #112	; 0x70
 8003d30:	d804      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x7e>
 8003d32:	2b50      	cmp	r3, #80	; 0x50
 8003d34:	d033      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0xe0>
 8003d36:	2b60      	cmp	r3, #96	; 0x60
 8003d38:	d041      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d3a:	e06a      	b.n	8003e12 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d40:	d066      	beq.n	8003e10 <HAL_TIM_ConfigClockSource+0x152>
 8003d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d46:	d017      	beq.n	8003d78 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d48:	e063      	b.n	8003e12 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6899      	ldr	r1, [r3, #8]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f000 f96e 	bl	800403a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	609a      	str	r2, [r3, #8]
      break;
 8003d76:	e04c      	b.n	8003e12 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	6899      	ldr	r1, [r3, #8]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f000 f957 	bl	800403a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d9a:	609a      	str	r2, [r3, #8]
      break;
 8003d9c:	e039      	b.n	8003e12 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	6859      	ldr	r1, [r3, #4]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	461a      	mov	r2, r3
 8003dac:	f000 f8ce 	bl	8003f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2150      	movs	r1, #80	; 0x50
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 f925 	bl	8004006 <TIM_ITRx_SetConfig>
      break;
 8003dbc:	e029      	b.n	8003e12 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	6859      	ldr	r1, [r3, #4]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f000 f8ec 	bl	8003fa8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2160      	movs	r1, #96	; 0x60
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 f915 	bl	8004006 <TIM_ITRx_SetConfig>
      break;
 8003ddc:	e019      	b.n	8003e12 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6859      	ldr	r1, [r3, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	461a      	mov	r2, r3
 8003dec:	f000 f8ae 	bl	8003f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2140      	movs	r1, #64	; 0x40
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 f905 	bl	8004006 <TIM_ITRx_SetConfig>
      break;
 8003dfc:	e009      	b.n	8003e12 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4619      	mov	r1, r3
 8003e08:	4610      	mov	r0, r2
 8003e0a:	f000 f8fc 	bl	8004006 <TIM_ITRx_SetConfig>
        break;
 8003e0e:	e000      	b.n	8003e12 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr

08003e3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr

08003e62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr

08003e74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr
	...

08003e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a29      	ldr	r2, [pc, #164]	; (8003f40 <TIM_Base_SetConfig+0xb8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00b      	beq.n	8003eb8 <TIM_Base_SetConfig+0x30>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea6:	d007      	beq.n	8003eb8 <TIM_Base_SetConfig+0x30>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a26      	ldr	r2, [pc, #152]	; (8003f44 <TIM_Base_SetConfig+0xbc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d003      	beq.n	8003eb8 <TIM_Base_SetConfig+0x30>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a25      	ldr	r2, [pc, #148]	; (8003f48 <TIM_Base_SetConfig+0xc0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d108      	bne.n	8003eca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a1c      	ldr	r2, [pc, #112]	; (8003f40 <TIM_Base_SetConfig+0xb8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00b      	beq.n	8003eea <TIM_Base_SetConfig+0x62>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed8:	d007      	beq.n	8003eea <TIM_Base_SetConfig+0x62>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a19      	ldr	r2, [pc, #100]	; (8003f44 <TIM_Base_SetConfig+0xbc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d003      	beq.n	8003eea <TIM_Base_SetConfig+0x62>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a18      	ldr	r2, [pc, #96]	; (8003f48 <TIM_Base_SetConfig+0xc0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d108      	bne.n	8003efc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a07      	ldr	r2, [pc, #28]	; (8003f40 <TIM_Base_SetConfig+0xb8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d103      	bne.n	8003f30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	615a      	str	r2, [r3, #20]
}
 8003f36:	bf00      	nop
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr
 8003f40:	40012c00 	.word	0x40012c00
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800

08003f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	f023 0201 	bic.w	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f023 030a 	bic.w	r3, r3, #10
 8003f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	621a      	str	r2, [r3, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr

08003fa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f023 0210 	bic.w	r2, r3, #16
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	031b      	lsls	r3, r3, #12
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fe4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	621a      	str	r2, [r3, #32]
}
 8003ffc:	bf00      	nop
 8003ffe:	371c      	adds	r7, #28
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr

08004006 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004006:	b480      	push	{r7}
 8004008:	b085      	sub	sp, #20
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	f043 0307 	orr.w	r3, r3, #7
 8004028:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	609a      	str	r2, [r3, #8]
}
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800403a:	b480      	push	{r7}
 800403c:	b087      	sub	sp, #28
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004054:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	021a      	lsls	r2, r3, #8
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	431a      	orrs	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4313      	orrs	r3, r2
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	609a      	str	r2, [r3, #8]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800408c:	2302      	movs	r3, #2
 800408e:	e046      	b.n	800411e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a16      	ldr	r2, [pc, #88]	; (8004128 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00e      	beq.n	80040f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040dc:	d009      	beq.n	80040f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a12      	ldr	r2, [pc, #72]	; (800412c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a10      	ldr	r2, [pc, #64]	; (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d10c      	bne.n	800410c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	4313      	orrs	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr
 8004128:	40012c00 	.word	0x40012c00
 800412c:	40000400 	.word	0x40000400
 8004130:	40000800 	.word	0x40000800

08004134 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr

08004146 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr

08004158 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004158:	b084      	sub	sp, #16
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	f107 0014 	add.w	r0, r7, #20
 8004166:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	b004      	add	sp, #16
 8004176:	4770      	bx	lr

08004178 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004188:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800418c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	b29a      	uxth	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr

080041a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80041b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	43db      	mvns	r3, r3
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	4013      	ands	r3, r2
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr

080041f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041f0:	b084      	sub	sp, #16
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	f107 0014 	add.w	r0, r7, #20
 80041fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	b004      	add	sp, #16
 800422e:	4770      	bx	lr

08004230 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004230:	b480      	push	{r7}
 8004232:	b09b      	sub	sp, #108	; 0x6c
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	b29b      	uxth	r3, r3
 800424e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	78db      	ldrb	r3, [r3, #3]
 800425e:	2b03      	cmp	r3, #3
 8004260:	d81f      	bhi.n	80042a2 <USB_ActivateEndpoint+0x72>
 8004262:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <USB_ActivateEndpoint+0x38>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	08004279 	.word	0x08004279
 800426c:	08004295 	.word	0x08004295
 8004270:	080042ab 	.word	0x080042ab
 8004274:	08004287 	.word	0x08004287
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004278:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800427c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004280:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004284:	e012      	b.n	80042ac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004286:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800428a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800428e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004292:	e00b      	b.n	80042ac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004294:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004298:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800429c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80042a0:	e004      	b.n	80042ac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80042a8:	e000      	b.n	80042ac <USB_ActivateEndpoint+0x7c>
      break;
 80042aa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	441a      	add	r2, r3
 80042b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	441a      	add	r2, r3
 80042fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800430c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004310:	b29b      	uxth	r3, r3
 8004312:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	7b1b      	ldrb	r3, [r3, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	f040 8149 	bne.w	80045b0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	785b      	ldrb	r3, [r3, #1]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 8084 	beq.w	8004430 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004332:	b29b      	uxth	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	4413      	add	r3, r2
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	011a      	lsls	r2, r3, #4
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	88db      	ldrh	r3, [r3, #6]
 8004350:	085b      	lsrs	r3, r3, #1
 8004352:	b29b      	uxth	r3, r3
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	81fb      	strh	r3, [r7, #14]
 800436a:	89fb      	ldrh	r3, [r7, #14]
 800436c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01b      	beq.n	80043ac <USB_ActivateEndpoint+0x17c>
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	b29b      	uxth	r3, r3
 8004382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	81bb      	strh	r3, [r7, #12]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	441a      	add	r2, r3
 8004396:	89bb      	ldrh	r3, [r7, #12]
 8004398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800439c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	78db      	ldrb	r3, [r3, #3]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d020      	beq.n	80043f6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ca:	813b      	strh	r3, [r7, #8]
 80043cc:	893b      	ldrh	r3, [r7, #8]
 80043ce:	f083 0320 	eor.w	r3, r3, #32
 80043d2:	813b      	strh	r3, [r7, #8]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	441a      	add	r2, r3
 80043de:	893b      	ldrh	r3, [r7, #8]
 80043e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	8013      	strh	r3, [r2, #0]
 80043f4:	e27f      	b.n	80048f6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440c:	817b      	strh	r3, [r7, #10]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	441a      	add	r2, r3
 8004418:	897b      	ldrh	r3, [r7, #10]
 800441a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800441e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800442a:	b29b      	uxth	r3, r3
 800442c:	8013      	strh	r3, [r2, #0]
 800442e:	e262      	b.n	80048f6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800443a:	b29b      	uxth	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	4413      	add	r3, r2
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	011a      	lsls	r2, r3, #4
 800444a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444c:	4413      	add	r3, r2
 800444e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004452:	62bb      	str	r3, [r7, #40]	; 0x28
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	88db      	ldrh	r3, [r3, #6]
 8004458:	085b      	lsrs	r3, r3, #1
 800445a:	b29b      	uxth	r3, r3
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800446e:	b29b      	uxth	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	4413      	add	r3, r2
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	011a      	lsls	r2, r3, #4
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	4413      	add	r3, r2
 8004482:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004486:	623b      	str	r3, [r7, #32]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d112      	bne.n	80044b6 <USB_ActivateEndpoint+0x286>
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800449a:	b29a      	uxth	r2, r3
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	801a      	strh	r2, [r3, #0]
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	801a      	strh	r2, [r3, #0]
 80044b4:	e02f      	b.n	8004516 <USB_ActivateEndpoint+0x2e6>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b3e      	cmp	r3, #62	; 0x3e
 80044bc:	d813      	bhi.n	80044e6 <USB_ActivateEndpoint+0x2b6>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	085b      	lsrs	r3, r3, #1
 80044c4:	663b      	str	r3, [r7, #96]	; 0x60
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <USB_ActivateEndpoint+0x2a8>
 80044d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044d4:	3301      	adds	r3, #1
 80044d6:	663b      	str	r3, [r7, #96]	; 0x60
 80044d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044da:	b29b      	uxth	r3, r3
 80044dc:	029b      	lsls	r3, r3, #10
 80044de:	b29a      	uxth	r2, r3
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	801a      	strh	r2, [r3, #0]
 80044e4:	e017      	b.n	8004516 <USB_ActivateEndpoint+0x2e6>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	663b      	str	r3, [r7, #96]	; 0x60
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <USB_ActivateEndpoint+0x2d0>
 80044fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044fc:	3b01      	subs	r3, #1
 80044fe:	663b      	str	r3, [r7, #96]	; 0x60
 8004500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004502:	b29b      	uxth	r3, r3
 8004504:	029b      	lsls	r3, r3, #10
 8004506:	b29b      	uxth	r3, r3
 8004508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800450c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004510:	b29a      	uxth	r2, r3
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	83fb      	strh	r3, [r7, #30]
 8004524:	8bfb      	ldrh	r3, [r7, #30]
 8004526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d01b      	beq.n	8004566 <USB_ActivateEndpoint+0x336>
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	b29b      	uxth	r3, r3
 800453c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004544:	83bb      	strh	r3, [r7, #28]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	441a      	add	r2, r3
 8004550:	8bbb      	ldrh	r3, [r7, #28]
 8004552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800455a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800455e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004562:	b29b      	uxth	r3, r3
 8004564:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457c:	837b      	strh	r3, [r7, #26]
 800457e:	8b7b      	ldrh	r3, [r7, #26]
 8004580:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004584:	837b      	strh	r3, [r7, #26]
 8004586:	8b7b      	ldrh	r3, [r7, #26]
 8004588:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800458c:	837b      	strh	r3, [r7, #26]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	441a      	add	r2, r3
 8004598:	8b7b      	ldrh	r3, [r7, #26]
 800459a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800459e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	8013      	strh	r3, [r2, #0]
 80045ae:	e1a2      	b.n	80048f6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	441a      	add	r2, r3
 80045d4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80045d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80045e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045fc:	4413      	add	r3, r2
 80045fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	011a      	lsls	r2, r3, #4
 8004606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004608:	4413      	add	r3, r2
 800460a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800460e:	657b      	str	r3, [r7, #84]	; 0x54
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	891b      	ldrh	r3, [r3, #8]
 8004614:	085b      	lsrs	r3, r3, #1
 8004616:	b29b      	uxth	r3, r3
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800461e:	801a      	strh	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	653b      	str	r3, [r7, #80]	; 0x50
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800462a:	b29b      	uxth	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004630:	4413      	add	r3, r2
 8004632:	653b      	str	r3, [r7, #80]	; 0x50
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	011a      	lsls	r2, r3, #4
 800463a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800463c:	4413      	add	r3, r2
 800463e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	895b      	ldrh	r3, [r3, #10]
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	b29b      	uxth	r3, r3
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004652:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	785b      	ldrb	r3, [r3, #1]
 8004658:	2b00      	cmp	r3, #0
 800465a:	f040 8091 	bne.w	8004780 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800466c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800466e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d01b      	beq.n	80046ae <USB_ActivateEndpoint+0x47e>
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	b29b      	uxth	r3, r3
 8004684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	441a      	add	r2, r3
 8004698:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800469a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800469e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	873b      	strh	r3, [r7, #56]	; 0x38
 80046bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80046be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d01b      	beq.n	80046fe <USB_ActivateEndpoint+0x4ce>
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046dc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	441a      	add	r2, r3
 80046e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80046ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004714:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004716:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004718:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800471c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800471e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004720:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004724:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	441a      	add	r2, r3
 8004730:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800473a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800473e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004742:	b29b      	uxth	r3, r3
 8004744:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	b29b      	uxth	r3, r3
 8004754:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800475c:	867b      	strh	r3, [r7, #50]	; 0x32
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	441a      	add	r2, r3
 8004768:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800476a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800476e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477a:	b29b      	uxth	r3, r3
 800477c:	8013      	strh	r3, [r2, #0]
 800477e:	e0ba      	b.n	80048f6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004790:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01d      	beq.n	80047d8 <USB_ActivateEndpoint+0x5a8>
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	441a      	add	r2, r3
 80047c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80047c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80047e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80047ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d01d      	beq.n	8004830 <USB_ActivateEndpoint+0x600>
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	441a      	add	r2, r3
 8004818:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800481c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004828:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800482c:	b29b      	uxth	r3, r3
 800482e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	78db      	ldrb	r3, [r3, #3]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d024      	beq.n	8004882 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	b29b      	uxth	r3, r3
 8004846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800484a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800484e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004852:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004856:	f083 0320 	eor.w	r3, r3, #32
 800485a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	441a      	add	r2, r3
 8004868:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800486c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487c:	b29b      	uxth	r3, r3
 800487e:	8013      	strh	r3, [r2, #0]
 8004880:	e01d      	b.n	80048be <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004898:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	441a      	add	r2, r3
 80048a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80048aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	441a      	add	r2, r3
 80048e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80048e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80048f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	376c      	adds	r7, #108	; 0x6c
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004904:	b480      	push	{r7}
 8004906:	b08d      	sub	sp, #52	; 0x34
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	7b1b      	ldrb	r3, [r3, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f040 808e 	bne.w	8004a34 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	785b      	ldrb	r3, [r3, #1]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d044      	beq.n	80049aa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	81bb      	strh	r3, [r7, #12]
 800492e:	89bb      	ldrh	r3, [r7, #12]
 8004930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01b      	beq.n	8004970 <USB_DeactivateEndpoint+0x6c>
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	b29b      	uxth	r3, r3
 8004946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494e:	817b      	strh	r3, [r7, #10]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	441a      	add	r2, r3
 800495a:	897b      	ldrh	r3, [r7, #10]
 800495c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004968:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800496c:	b29b      	uxth	r3, r3
 800496e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	b29b      	uxth	r3, r3
 800497e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004986:	813b      	strh	r3, [r7, #8]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	441a      	add	r2, r3
 8004992:	893b      	ldrh	r3, [r7, #8]
 8004994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800499c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	8013      	strh	r3, [r2, #0]
 80049a8:	e192      	b.n	8004cd0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	827b      	strh	r3, [r7, #18]
 80049b8:	8a7b      	ldrh	r3, [r7, #18]
 80049ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d01b      	beq.n	80049fa <USB_DeactivateEndpoint+0xf6>
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d8:	823b      	strh	r3, [r7, #16]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	441a      	add	r2, r3
 80049e4:	8a3b      	ldrh	r3, [r7, #16]
 80049e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a10:	81fb      	strh	r3, [r7, #14]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	441a      	add	r2, r3
 8004a1c:	89fb      	ldrh	r3, [r7, #14]
 8004a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	8013      	strh	r3, [r2, #0]
 8004a32:	e14d      	b.n	8004cd0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	785b      	ldrb	r3, [r3, #1]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f040 80a5 	bne.w	8004b88 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	843b      	strh	r3, [r7, #32]
 8004a4c:	8c3b      	ldrh	r3, [r7, #32]
 8004a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01b      	beq.n	8004a8e <USB_DeactivateEndpoint+0x18a>
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6c:	83fb      	strh	r3, [r7, #30]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	441a      	add	r2, r3
 8004a78:	8bfb      	ldrh	r3, [r7, #30]
 8004a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	83bb      	strh	r3, [r7, #28]
 8004a9c:	8bbb      	ldrh	r3, [r7, #28]
 8004a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d01b      	beq.n	8004ade <USB_DeactivateEndpoint+0x1da>
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abc:	837b      	strh	r3, [r7, #26]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	8b7b      	ldrh	r3, [r7, #26]
 8004aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af4:	833b      	strh	r3, [r7, #24]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	441a      	add	r2, r3
 8004b00:	8b3b      	ldrh	r3, [r7, #24]
 8004b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2c:	82fb      	strh	r3, [r7, #22]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	8afb      	ldrh	r3, [r7, #22]
 8004b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b64:	82bb      	strh	r3, [r7, #20]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	441a      	add	r2, r3
 8004b70:	8abb      	ldrh	r3, [r7, #20]
 8004b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	8013      	strh	r3, [r2, #0]
 8004b86:	e0a3      	b.n	8004cd0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01b      	beq.n	8004bd8 <USB_DeactivateEndpoint+0x2d4>
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	441a      	add	r2, r3
 8004bc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004be6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01b      	beq.n	8004c28 <USB_DeactivateEndpoint+0x324>
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c06:	853b      	strh	r3, [r7, #40]	; 0x28
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	441a      	add	r2, r3
 8004c12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	441a      	add	r2, r3
 8004c4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c76:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cae:	847b      	strh	r3, [r7, #34]	; 0x22
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	441a      	add	r2, r3
 8004cba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3734      	adds	r7, #52	; 0x34
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr

08004cdc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b0c4      	sub	sp, #272	; 0x110
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	1d3b      	adds	r3, r7, #4
 8004ce4:	6018      	str	r0, [r3, #0]
 8004ce6:	463b      	mov	r3, r7
 8004ce8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cea:	463b      	mov	r3, r7
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	f040 8557 	bne.w	80057a4 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004cf6:	463b      	mov	r3, r7
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699a      	ldr	r2, [r3, #24]
 8004cfc:	463b      	mov	r3, r7
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d905      	bls.n	8004d12 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004d06:	463b      	mov	r3, r7
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004d10:	e004      	b.n	8004d1c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004d12:	463b      	mov	r3, r7
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004d1c:	463b      	mov	r3, r7
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	7b1b      	ldrb	r3, [r3, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d12c      	bne.n	8004d80 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d26:	463b      	mov	r3, r7
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6959      	ldr	r1, [r3, #20]
 8004d2c:	463b      	mov	r3, r7
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	88da      	ldrh	r2, [r3, #6]
 8004d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	1d38      	adds	r0, r7, #4
 8004d3a:	6800      	ldr	r0, [r0, #0]
 8004d3c:	f001 fa2c 	bl	8006198 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d40:	1d3b      	adds	r3, r7, #4
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	1d3b      	adds	r3, r7, #4
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	4413      	add	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	463b      	mov	r3, r7
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	011a      	lsls	r2, r3, #4
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	4413      	add	r3, r2
 8004d64:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004d68:	f107 0310 	add.w	r3, r7, #16
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	f107 0310 	add.w	r3, r7, #16
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	801a      	strh	r2, [r3, #0]
 8004d7c:	f000 bcdd 	b.w	800573a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004d80:	463b      	mov	r3, r7
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	78db      	ldrb	r3, [r3, #3]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	f040 8347 	bne.w	800541a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d8c:	463b      	mov	r3, r7
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6a1a      	ldr	r2, [r3, #32]
 8004d92:	463b      	mov	r3, r7
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	f240 82eb 	bls.w	8005374 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004d9e:	1d3b      	adds	r3, r7, #4
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	463b      	mov	r3, r7
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004dbc:	1d3b      	adds	r3, r7, #4
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	463b      	mov	r3, r7
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	441a      	add	r2, r3
 8004dca:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004de2:	463b      	mov	r3, r7
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6a1a      	ldr	r2, [r3, #32]
 8004de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dec:	1ad2      	subs	r2, r2, r3
 8004dee:	463b      	mov	r3, r7
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004df4:	1d3b      	adds	r3, r7, #4
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	463b      	mov	r3, r7
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 8159 	beq.w	80050c2 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e10:	1d3b      	adds	r3, r7, #4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34
 8004e16:	463b      	mov	r3, r7
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	785b      	ldrb	r3, [r3, #1]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d164      	bne.n	8004eea <USB_EPStartXfer+0x20e>
 8004e20:	1d3b      	adds	r3, r7, #4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e26:	1d3b      	adds	r3, r7, #4
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	4413      	add	r3, r2
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e38:	463b      	mov	r3, r7
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	011a      	lsls	r2, r3, #4
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e42:	4413      	add	r3, r2
 8004e44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d112      	bne.n	8004e78 <USB_EPStartXfer+0x19c>
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	801a      	strh	r2, [r3, #0]
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	801a      	strh	r2, [r3, #0]
 8004e76:	e054      	b.n	8004f22 <USB_EPStartXfer+0x246>
 8004e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e7c:	2b3e      	cmp	r3, #62	; 0x3e
 8004e7e:	d817      	bhi.n	8004eb0 <USB_EPStartXfer+0x1d4>
 8004e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e84:	085b      	lsrs	r3, r3, #1
 8004e86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d004      	beq.n	8004ea0 <USB_EPStartXfer+0x1c4>
 8004e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	029b      	lsls	r3, r3, #10
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	801a      	strh	r2, [r3, #0]
 8004eae:	e038      	b.n	8004f22 <USB_EPStartXfer+0x246>
 8004eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ebe:	f003 031f 	and.w	r3, r3, #31
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d104      	bne.n	8004ed0 <USB_EPStartXfer+0x1f4>
 8004ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	029b      	lsls	r3, r3, #10
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	801a      	strh	r2, [r3, #0]
 8004ee8:	e01b      	b.n	8004f22 <USB_EPStartXfer+0x246>
 8004eea:	463b      	mov	r3, r7
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	785b      	ldrb	r3, [r3, #1]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d116      	bne.n	8004f22 <USB_EPStartXfer+0x246>
 8004ef4:	1d3b      	adds	r3, r7, #4
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f02:	4413      	add	r3, r2
 8004f04:	637b      	str	r3, [r7, #52]	; 0x34
 8004f06:	463b      	mov	r3, r7
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	011a      	lsls	r2, r3, #4
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f10:	4413      	add	r3, r2
 8004f12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f16:	633b      	str	r3, [r7, #48]	; 0x30
 8004f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f22:	463b      	mov	r3, r7
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	895b      	ldrh	r3, [r3, #10]
 8004f28:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f2c:	463b      	mov	r3, r7
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6959      	ldr	r1, [r3, #20]
 8004f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004f3c:	1d38      	adds	r0, r7, #4
 8004f3e:	6800      	ldr	r0, [r0, #0]
 8004f40:	f001 f92a 	bl	8006198 <USB_WritePMA>
            ep->xfer_buff += len;
 8004f44:	463b      	mov	r3, r7
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	695a      	ldr	r2, [r3, #20]
 8004f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f4e:	441a      	add	r2, r3
 8004f50:	463b      	mov	r3, r7
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f56:	463b      	mov	r3, r7
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6a1a      	ldr	r2, [r3, #32]
 8004f5c:	463b      	mov	r3, r7
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d909      	bls.n	8004f7a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004f66:	463b      	mov	r3, r7
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6a1a      	ldr	r2, [r3, #32]
 8004f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f70:	1ad2      	subs	r2, r2, r3
 8004f72:	463b      	mov	r3, r7
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	621a      	str	r2, [r3, #32]
 8004f78:	e008      	b.n	8004f8c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f7a:	463b      	mov	r3, r7
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004f84:	463b      	mov	r3, r7
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f8c:	463b      	mov	r3, r7
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	785b      	ldrb	r3, [r3, #1]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d164      	bne.n	8005060 <USB_EPStartXfer+0x384>
 8004f96:	1d3b      	adds	r3, r7, #4
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	61fb      	str	r3, [r7, #28]
 8004f9c:	1d3b      	adds	r3, r7, #4
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	4413      	add	r3, r2
 8004fac:	61fb      	str	r3, [r7, #28]
 8004fae:	463b      	mov	r3, r7
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	011a      	lsls	r2, r3, #4
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fbe:	61bb      	str	r3, [r7, #24]
 8004fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d112      	bne.n	8004fee <USB_EPStartXfer+0x312>
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	801a      	strh	r2, [r3, #0]
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	801a      	strh	r2, [r3, #0]
 8004fec:	e057      	b.n	800509e <USB_EPStartXfer+0x3c2>
 8004fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff2:	2b3e      	cmp	r3, #62	; 0x3e
 8004ff4:	d817      	bhi.n	8005026 <USB_EPStartXfer+0x34a>
 8004ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ffa:	085b      	lsrs	r3, r3, #1
 8004ffc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005000:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d004      	beq.n	8005016 <USB_EPStartXfer+0x33a>
 800500c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005010:	3301      	adds	r3, #1
 8005012:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005016:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800501a:	b29b      	uxth	r3, r3
 800501c:	029b      	lsls	r3, r3, #10
 800501e:	b29a      	uxth	r2, r3
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	e03b      	b.n	800509e <USB_EPStartXfer+0x3c2>
 8005026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005034:	f003 031f 	and.w	r3, r3, #31
 8005038:	2b00      	cmp	r3, #0
 800503a:	d104      	bne.n	8005046 <USB_EPStartXfer+0x36a>
 800503c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005040:	3b01      	subs	r3, #1
 8005042:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005046:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800504a:	b29b      	uxth	r3, r3
 800504c:	029b      	lsls	r3, r3, #10
 800504e:	b29b      	uxth	r3, r3
 8005050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005058:	b29a      	uxth	r2, r3
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	801a      	strh	r2, [r3, #0]
 800505e:	e01e      	b.n	800509e <USB_EPStartXfer+0x3c2>
 8005060:	463b      	mov	r3, r7
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	785b      	ldrb	r3, [r3, #1]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d119      	bne.n	800509e <USB_EPStartXfer+0x3c2>
 800506a:	1d3b      	adds	r3, r7, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
 8005070:	1d3b      	adds	r3, r7, #4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005078:	b29b      	uxth	r3, r3
 800507a:	461a      	mov	r2, r3
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	4413      	add	r3, r2
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
 8005082:	463b      	mov	r3, r7
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	011a      	lsls	r2, r3, #4
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	4413      	add	r3, r2
 800508e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005092:	623b      	str	r3, [r7, #32]
 8005094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005098:	b29a      	uxth	r2, r3
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800509e:	463b      	mov	r3, r7
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	891b      	ldrh	r3, [r3, #8]
 80050a4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050a8:	463b      	mov	r3, r7
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6959      	ldr	r1, [r3, #20]
 80050ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80050b8:	1d38      	adds	r0, r7, #4
 80050ba:	6800      	ldr	r0, [r0, #0]
 80050bc:	f001 f86c 	bl	8006198 <USB_WritePMA>
 80050c0:	e33b      	b.n	800573a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050c2:	463b      	mov	r3, r7
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	785b      	ldrb	r3, [r3, #1]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d164      	bne.n	8005196 <USB_EPStartXfer+0x4ba>
 80050cc:	1d3b      	adds	r3, r7, #4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d2:	1d3b      	adds	r3, r7, #4
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050da:	b29b      	uxth	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e0:	4413      	add	r3, r2
 80050e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050e4:	463b      	mov	r3, r7
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	011a      	lsls	r2, r3, #4
 80050ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ee:	4413      	add	r3, r2
 80050f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80050f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d112      	bne.n	8005124 <USB_EPStartXfer+0x448>
 80050fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005108:	b29a      	uxth	r2, r3
 800510a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800510c:	801a      	strh	r2, [r3, #0]
 800510e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	b29b      	uxth	r3, r3
 8005114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800511c:	b29a      	uxth	r2, r3
 800511e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005120:	801a      	strh	r2, [r3, #0]
 8005122:	e057      	b.n	80051d4 <USB_EPStartXfer+0x4f8>
 8005124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005128:	2b3e      	cmp	r3, #62	; 0x3e
 800512a:	d817      	bhi.n	800515c <USB_EPStartXfer+0x480>
 800512c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005130:	085b      	lsrs	r3, r3, #1
 8005132:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d004      	beq.n	800514c <USB_EPStartXfer+0x470>
 8005142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005146:	3301      	adds	r3, #1
 8005148:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800514c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005150:	b29b      	uxth	r3, r3
 8005152:	029b      	lsls	r3, r3, #10
 8005154:	b29a      	uxth	r2, r3
 8005156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005158:	801a      	strh	r2, [r3, #0]
 800515a:	e03b      	b.n	80051d4 <USB_EPStartXfer+0x4f8>
 800515c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800516a:	f003 031f 	and.w	r3, r3, #31
 800516e:	2b00      	cmp	r3, #0
 8005170:	d104      	bne.n	800517c <USB_EPStartXfer+0x4a0>
 8005172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005176:	3b01      	subs	r3, #1
 8005178:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800517c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005180:	b29b      	uxth	r3, r3
 8005182:	029b      	lsls	r3, r3, #10
 8005184:	b29b      	uxth	r3, r3
 8005186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800518a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800518e:	b29a      	uxth	r2, r3
 8005190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005192:	801a      	strh	r2, [r3, #0]
 8005194:	e01e      	b.n	80051d4 <USB_EPStartXfer+0x4f8>
 8005196:	463b      	mov	r3, r7
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	785b      	ldrb	r3, [r3, #1]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d119      	bne.n	80051d4 <USB_EPStartXfer+0x4f8>
 80051a0:	1d3b      	adds	r3, r7, #4
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	657b      	str	r3, [r7, #84]	; 0x54
 80051a6:	1d3b      	adds	r3, r7, #4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051b4:	4413      	add	r3, r2
 80051b6:	657b      	str	r3, [r7, #84]	; 0x54
 80051b8:	463b      	mov	r3, r7
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	011a      	lsls	r2, r3, #4
 80051c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051c2:	4413      	add	r3, r2
 80051c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051c8:	653b      	str	r3, [r7, #80]	; 0x50
 80051ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80051d4:	463b      	mov	r3, r7
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	891b      	ldrh	r3, [r3, #8]
 80051da:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051de:	463b      	mov	r3, r7
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6959      	ldr	r1, [r3, #20]
 80051e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80051ee:	1d38      	adds	r0, r7, #4
 80051f0:	6800      	ldr	r0, [r0, #0]
 80051f2:	f000 ffd1 	bl	8006198 <USB_WritePMA>
            ep->xfer_buff += len;
 80051f6:	463b      	mov	r3, r7
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695a      	ldr	r2, [r3, #20]
 80051fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005200:	441a      	add	r2, r3
 8005202:	463b      	mov	r3, r7
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005208:	463b      	mov	r3, r7
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6a1a      	ldr	r2, [r3, #32]
 800520e:	463b      	mov	r3, r7
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	429a      	cmp	r2, r3
 8005216:	d909      	bls.n	800522c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005218:	463b      	mov	r3, r7
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6a1a      	ldr	r2, [r3, #32]
 800521e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005222:	1ad2      	subs	r2, r2, r3
 8005224:	463b      	mov	r3, r7
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	621a      	str	r2, [r3, #32]
 800522a:	e008      	b.n	800523e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800522c:	463b      	mov	r3, r7
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005236:	463b      	mov	r3, r7
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2200      	movs	r2, #0
 800523c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800523e:	1d3b      	adds	r3, r7, #4
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	647b      	str	r3, [r7, #68]	; 0x44
 8005244:	463b      	mov	r3, r7
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	785b      	ldrb	r3, [r3, #1]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d164      	bne.n	8005318 <USB_EPStartXfer+0x63c>
 800524e:	1d3b      	adds	r3, r7, #4
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005254:	1d3b      	adds	r3, r7, #4
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800525c:	b29b      	uxth	r3, r3
 800525e:	461a      	mov	r2, r3
 8005260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005262:	4413      	add	r3, r2
 8005264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005266:	463b      	mov	r3, r7
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	011a      	lsls	r2, r3, #4
 800526e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005270:	4413      	add	r3, r2
 8005272:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005276:	63bb      	str	r3, [r7, #56]	; 0x38
 8005278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d112      	bne.n	80052a6 <USB_EPStartXfer+0x5ca>
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800528a:	b29a      	uxth	r2, r3
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	801a      	strh	r2, [r3, #0]
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	b29b      	uxth	r3, r3
 8005296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800529a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800529e:	b29a      	uxth	r2, r3
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	801a      	strh	r2, [r3, #0]
 80052a4:	e054      	b.n	8005350 <USB_EPStartXfer+0x674>
 80052a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052aa:	2b3e      	cmp	r3, #62	; 0x3e
 80052ac:	d817      	bhi.n	80052de <USB_EPStartXfer+0x602>
 80052ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b2:	085b      	lsrs	r3, r3, #1
 80052b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d004      	beq.n	80052ce <USB_EPStartXfer+0x5f2>
 80052c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052c8:	3301      	adds	r3, #1
 80052ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	029b      	lsls	r3, r3, #10
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052da:	801a      	strh	r2, [r3, #0]
 80052dc:	e038      	b.n	8005350 <USB_EPStartXfer+0x674>
 80052de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052e2:	095b      	lsrs	r3, r3, #5
 80052e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ec:	f003 031f 	and.w	r3, r3, #31
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d104      	bne.n	80052fe <USB_EPStartXfer+0x622>
 80052f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052f8:	3b01      	subs	r3, #1
 80052fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005302:	b29b      	uxth	r3, r3
 8005304:	029b      	lsls	r3, r3, #10
 8005306:	b29b      	uxth	r3, r3
 8005308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800530c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005310:	b29a      	uxth	r2, r3
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	801a      	strh	r2, [r3, #0]
 8005316:	e01b      	b.n	8005350 <USB_EPStartXfer+0x674>
 8005318:	463b      	mov	r3, r7
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	785b      	ldrb	r3, [r3, #1]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d116      	bne.n	8005350 <USB_EPStartXfer+0x674>
 8005322:	1d3b      	adds	r3, r7, #4
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800532a:	b29b      	uxth	r3, r3
 800532c:	461a      	mov	r2, r3
 800532e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005330:	4413      	add	r3, r2
 8005332:	647b      	str	r3, [r7, #68]	; 0x44
 8005334:	463b      	mov	r3, r7
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	011a      	lsls	r2, r3, #4
 800533c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533e:	4413      	add	r3, r2
 8005340:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005344:	643b      	str	r3, [r7, #64]	; 0x40
 8005346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800534a:	b29a      	uxth	r2, r3
 800534c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800534e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005350:	463b      	mov	r3, r7
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	895b      	ldrh	r3, [r3, #10]
 8005356:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800535a:	463b      	mov	r3, r7
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6959      	ldr	r1, [r3, #20]
 8005360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005364:	b29b      	uxth	r3, r3
 8005366:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800536a:	1d38      	adds	r0, r7, #4
 800536c:	6800      	ldr	r0, [r0, #0]
 800536e:	f000 ff13 	bl	8006198 <USB_WritePMA>
 8005372:	e1e2      	b.n	800573a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005374:	463b      	mov	r3, r7
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800537e:	1d3b      	adds	r3, r7, #4
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	463b      	mov	r3, r7
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	b29b      	uxth	r3, r3
 8005390:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005398:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800539c:	1d3b      	adds	r3, r7, #4
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	463b      	mov	r3, r7
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	441a      	add	r2, r3
 80053aa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80053ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053be:	b29b      	uxth	r3, r3
 80053c0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80053c2:	1d3b      	adds	r3, r7, #4
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	663b      	str	r3, [r7, #96]	; 0x60
 80053c8:	1d3b      	adds	r3, r7, #4
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	461a      	mov	r2, r3
 80053d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053d6:	4413      	add	r3, r2
 80053d8:	663b      	str	r3, [r7, #96]	; 0x60
 80053da:	463b      	mov	r3, r7
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	011a      	lsls	r2, r3, #4
 80053e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053e4:	4413      	add	r3, r2
 80053e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053f6:	463b      	mov	r3, r7
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	891b      	ldrh	r3, [r3, #8]
 80053fc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005400:	463b      	mov	r3, r7
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6959      	ldr	r1, [r3, #20]
 8005406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800540a:	b29b      	uxth	r3, r3
 800540c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005410:	1d38      	adds	r0, r7, #4
 8005412:	6800      	ldr	r0, [r0, #0]
 8005414:	f000 fec0 	bl	8006198 <USB_WritePMA>
 8005418:	e18f      	b.n	800573a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800541a:	1d3b      	adds	r3, r7, #4
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	463b      	mov	r3, r7
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b29b      	uxth	r3, r3
 800542c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 808f 	beq.w	8005554 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005436:	1d3b      	adds	r3, r7, #4
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	67bb      	str	r3, [r7, #120]	; 0x78
 800543c:	463b      	mov	r3, r7
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	785b      	ldrb	r3, [r3, #1]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d164      	bne.n	8005510 <USB_EPStartXfer+0x834>
 8005446:	1d3b      	adds	r3, r7, #4
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	673b      	str	r3, [r7, #112]	; 0x70
 800544c:	1d3b      	adds	r3, r7, #4
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005454:	b29b      	uxth	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800545a:	4413      	add	r3, r2
 800545c:	673b      	str	r3, [r7, #112]	; 0x70
 800545e:	463b      	mov	r3, r7
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	011a      	lsls	r2, r3, #4
 8005466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005468:	4413      	add	r3, r2
 800546a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800546e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d112      	bne.n	800549e <USB_EPStartXfer+0x7c2>
 8005478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	b29b      	uxth	r3, r3
 800547e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005482:	b29a      	uxth	r2, r3
 8005484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005486:	801a      	strh	r2, [r3, #0]
 8005488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29b      	uxth	r3, r3
 800548e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005492:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005496:	b29a      	uxth	r2, r3
 8005498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549a:	801a      	strh	r2, [r3, #0]
 800549c:	e054      	b.n	8005548 <USB_EPStartXfer+0x86c>
 800549e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054a2:	2b3e      	cmp	r3, #62	; 0x3e
 80054a4:	d817      	bhi.n	80054d6 <USB_EPStartXfer+0x7fa>
 80054a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d004      	beq.n	80054c6 <USB_EPStartXfer+0x7ea>
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c0:	3301      	adds	r3, #1
 80054c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	029b      	lsls	r3, r3, #10
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d2:	801a      	strh	r2, [r3, #0]
 80054d4:	e038      	b.n	8005548 <USB_EPStartXfer+0x86c>
 80054d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054e4:	f003 031f 	and.w	r3, r3, #31
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d104      	bne.n	80054f6 <USB_EPStartXfer+0x81a>
 80054ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f0:	3b01      	subs	r3, #1
 80054f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	029b      	lsls	r3, r3, #10
 80054fe:	b29b      	uxth	r3, r3
 8005500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005508:	b29a      	uxth	r2, r3
 800550a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550c:	801a      	strh	r2, [r3, #0]
 800550e:	e01b      	b.n	8005548 <USB_EPStartXfer+0x86c>
 8005510:	463b      	mov	r3, r7
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	785b      	ldrb	r3, [r3, #1]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d116      	bne.n	8005548 <USB_EPStartXfer+0x86c>
 800551a:	1d3b      	adds	r3, r7, #4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005522:	b29b      	uxth	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005528:	4413      	add	r3, r2
 800552a:	67bb      	str	r3, [r7, #120]	; 0x78
 800552c:	463b      	mov	r3, r7
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	011a      	lsls	r2, r3, #4
 8005534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005536:	4413      	add	r3, r2
 8005538:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800553c:	677b      	str	r3, [r7, #116]	; 0x74
 800553e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005542:	b29a      	uxth	r2, r3
 8005544:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005546:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005548:	463b      	mov	r3, r7
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	895b      	ldrh	r3, [r3, #10]
 800554e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005552:	e097      	b.n	8005684 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005554:	463b      	mov	r3, r7
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	785b      	ldrb	r3, [r3, #1]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d168      	bne.n	8005630 <USB_EPStartXfer+0x954>
 800555e:	1d3b      	adds	r3, r7, #4
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005566:	1d3b      	adds	r3, r7, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800556e:	b29b      	uxth	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005576:	4413      	add	r3, r2
 8005578:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800557c:	463b      	mov	r3, r7
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	011a      	lsls	r2, r3, #4
 8005584:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005588:	4413      	add	r3, r2
 800558a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800558e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d112      	bne.n	80055be <USB_EPStartXfer+0x8e2>
 8005598:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055a6:	801a      	strh	r2, [r3, #0]
 80055a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055ba:	801a      	strh	r2, [r3, #0]
 80055bc:	e05d      	b.n	800567a <USB_EPStartXfer+0x99e>
 80055be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c2:	2b3e      	cmp	r3, #62	; 0x3e
 80055c4:	d817      	bhi.n	80055f6 <USB_EPStartXfer+0x91a>
 80055c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ca:	085b      	lsrs	r3, r3, #1
 80055cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d004      	beq.n	80055e6 <USB_EPStartXfer+0x90a>
 80055dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055e0:	3301      	adds	r3, #1
 80055e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	029b      	lsls	r3, r3, #10
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055f2:	801a      	strh	r2, [r3, #0]
 80055f4:	e041      	b.n	800567a <USB_EPStartXfer+0x99e>
 80055f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005604:	f003 031f 	and.w	r3, r3, #31
 8005608:	2b00      	cmp	r3, #0
 800560a:	d104      	bne.n	8005616 <USB_EPStartXfer+0x93a>
 800560c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005610:	3b01      	subs	r3, #1
 8005612:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005616:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800561a:	b29b      	uxth	r3, r3
 800561c:	029b      	lsls	r3, r3, #10
 800561e:	b29b      	uxth	r3, r3
 8005620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005628:	b29a      	uxth	r2, r3
 800562a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800562c:	801a      	strh	r2, [r3, #0]
 800562e:	e024      	b.n	800567a <USB_EPStartXfer+0x99e>
 8005630:	463b      	mov	r3, r7
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	785b      	ldrb	r3, [r3, #1]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d11f      	bne.n	800567a <USB_EPStartXfer+0x99e>
 800563a:	1d3b      	adds	r3, r7, #4
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005642:	1d3b      	adds	r3, r7, #4
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800564a:	b29b      	uxth	r3, r3
 800564c:	461a      	mov	r2, r3
 800564e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005652:	4413      	add	r3, r2
 8005654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005658:	463b      	mov	r3, r7
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	011a      	lsls	r2, r3, #4
 8005660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005664:	4413      	add	r3, r2
 8005666:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800566a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800566e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005672:	b29a      	uxth	r2, r3
 8005674:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005678:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800567a:	463b      	mov	r3, r7
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	891b      	ldrh	r3, [r3, #8]
 8005680:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005684:	463b      	mov	r3, r7
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6959      	ldr	r1, [r3, #20]
 800568a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800568e:	b29b      	uxth	r3, r3
 8005690:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005694:	1d38      	adds	r0, r7, #4
 8005696:	6800      	ldr	r0, [r0, #0]
 8005698:	f000 fd7e 	bl	8006198 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800569c:	463b      	mov	r3, r7
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d122      	bne.n	80056ec <USB_EPStartXfer+0xa10>
 80056a6:	1d3b      	adds	r3, r7, #4
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	463b      	mov	r3, r7
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80056c4:	1d3b      	adds	r3, r7, #4
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	463b      	mov	r3, r7
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	441a      	add	r2, r3
 80056d2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80056d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	8013      	strh	r3, [r2, #0]
 80056ea:	e026      	b.n	800573a <USB_EPStartXfer+0xa5e>
 80056ec:	463b      	mov	r3, r7
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d121      	bne.n	800573a <USB_EPStartXfer+0xa5e>
 80056f6:	1d3b      	adds	r3, r7, #4
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	463b      	mov	r3, r7
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	b29b      	uxth	r3, r3
 8005708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005710:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005714:	1d3b      	adds	r3, r7, #4
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	463b      	mov	r3, r7
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	441a      	add	r2, r3
 8005722:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800572a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800572e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005736:	b29b      	uxth	r3, r3
 8005738:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800573a:	1d3b      	adds	r3, r7, #4
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	463b      	mov	r3, r7
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	f107 020e 	add.w	r2, r7, #14
 8005750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005758:	8013      	strh	r3, [r2, #0]
 800575a:	f107 030e 	add.w	r3, r7, #14
 800575e:	f107 020e 	add.w	r2, r7, #14
 8005762:	8812      	ldrh	r2, [r2, #0]
 8005764:	f082 0210 	eor.w	r2, r2, #16
 8005768:	801a      	strh	r2, [r3, #0]
 800576a:	f107 030e 	add.w	r3, r7, #14
 800576e:	f107 020e 	add.w	r2, r7, #14
 8005772:	8812      	ldrh	r2, [r2, #0]
 8005774:	f082 0220 	eor.w	r2, r2, #32
 8005778:	801a      	strh	r2, [r3, #0]
 800577a:	1d3b      	adds	r3, r7, #4
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	463b      	mov	r3, r7
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	441a      	add	r2, r3
 8005788:	f107 030e 	add.w	r3, r7, #14
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800579a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800579e:	b29b      	uxth	r3, r3
 80057a0:	8013      	strh	r3, [r2, #0]
 80057a2:	e3b5      	b.n	8005f10 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80057a4:	463b      	mov	r3, r7
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	7b1b      	ldrb	r3, [r3, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f040 8090 	bne.w	80058d0 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80057b0:	463b      	mov	r3, r7
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699a      	ldr	r2, [r3, #24]
 80057b6:	463b      	mov	r3, r7
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d90e      	bls.n	80057de <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80057c0:	463b      	mov	r3, r7
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80057ca:	463b      	mov	r3, r7
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699a      	ldr	r2, [r3, #24]
 80057d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d4:	1ad2      	subs	r2, r2, r3
 80057d6:	463b      	mov	r3, r7
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	619a      	str	r2, [r3, #24]
 80057dc:	e008      	b.n	80057f0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80057de:	463b      	mov	r3, r7
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80057e8:	463b      	mov	r3, r7
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2200      	movs	r2, #0
 80057ee:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80057f0:	1d3b      	adds	r3, r7, #4
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057f8:	1d3b      	adds	r3, r7, #4
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005800:	b29b      	uxth	r3, r3
 8005802:	461a      	mov	r2, r3
 8005804:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005808:	4413      	add	r3, r2
 800580a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800580e:	463b      	mov	r3, r7
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	011a      	lsls	r2, r3, #4
 8005816:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800581a:	4413      	add	r3, r2
 800581c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005820:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005828:	2b00      	cmp	r3, #0
 800582a:	d116      	bne.n	800585a <USB_EPStartXfer+0xb7e>
 800582c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	b29b      	uxth	r3, r3
 8005834:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005838:	b29a      	uxth	r2, r3
 800583a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800583e:	801a      	strh	r2, [r3, #0]
 8005840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	b29b      	uxth	r3, r3
 8005848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800584c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005850:	b29a      	uxth	r2, r3
 8005852:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005856:	801a      	strh	r2, [r3, #0]
 8005858:	e32c      	b.n	8005eb4 <USB_EPStartXfer+0x11d8>
 800585a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800585e:	2b3e      	cmp	r3, #62	; 0x3e
 8005860:	d818      	bhi.n	8005894 <USB_EPStartXfer+0xbb8>
 8005862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800586c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d004      	beq.n	8005882 <USB_EPStartXfer+0xba6>
 8005878:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800587c:	3301      	adds	r3, #1
 800587e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005882:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005886:	b29b      	uxth	r3, r3
 8005888:	029b      	lsls	r3, r3, #10
 800588a:	b29a      	uxth	r2, r3
 800588c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	e30f      	b.n	8005eb4 <USB_EPStartXfer+0x11d8>
 8005894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005898:	095b      	lsrs	r3, r3, #5
 800589a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800589e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a2:	f003 031f 	and.w	r3, r3, #31
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d104      	bne.n	80058b4 <USB_EPStartXfer+0xbd8>
 80058aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058ae:	3b01      	subs	r3, #1
 80058b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	029b      	lsls	r3, r3, #10
 80058bc:	b29b      	uxth	r3, r3
 80058be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	e2f1      	b.n	8005eb4 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80058d0:	463b      	mov	r3, r7
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	78db      	ldrb	r3, [r3, #3]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	f040 818f 	bne.w	8005bfa <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80058dc:	463b      	mov	r3, r7
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	785b      	ldrb	r3, [r3, #1]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d175      	bne.n	80059d2 <USB_EPStartXfer+0xcf6>
 80058e6:	1d3b      	adds	r3, r7, #4
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058ee:	1d3b      	adds	r3, r7, #4
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80058fe:	4413      	add	r3, r2
 8005900:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005904:	463b      	mov	r3, r7
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	011a      	lsls	r2, r3, #4
 800590c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005910:	4413      	add	r3, r2
 8005912:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800591a:	463b      	mov	r3, r7
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d116      	bne.n	8005952 <USB_EPStartXfer+0xc76>
 8005924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005930:	b29a      	uxth	r2, r3
 8005932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005936:	801a      	strh	r2, [r3, #0]
 8005938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	b29b      	uxth	r3, r3
 8005940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005948:	b29a      	uxth	r2, r3
 800594a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800594e:	801a      	strh	r2, [r3, #0]
 8005950:	e065      	b.n	8005a1e <USB_EPStartXfer+0xd42>
 8005952:	463b      	mov	r3, r7
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2b3e      	cmp	r3, #62	; 0x3e
 800595a:	d81a      	bhi.n	8005992 <USB_EPStartXfer+0xcb6>
 800595c:	463b      	mov	r3, r7
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	085b      	lsrs	r3, r3, #1
 8005964:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005968:	463b      	mov	r3, r7
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d004      	beq.n	8005980 <USB_EPStartXfer+0xca4>
 8005976:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800597a:	3301      	adds	r3, #1
 800597c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005980:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005984:	b29b      	uxth	r3, r3
 8005986:	029b      	lsls	r3, r3, #10
 8005988:	b29a      	uxth	r2, r3
 800598a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800598e:	801a      	strh	r2, [r3, #0]
 8005990:	e045      	b.n	8005a1e <USB_EPStartXfer+0xd42>
 8005992:	463b      	mov	r3, r7
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800599e:	463b      	mov	r3, r7
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d104      	bne.n	80059b6 <USB_EPStartXfer+0xcda>
 80059ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059b0:	3b01      	subs	r3, #1
 80059b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	029b      	lsls	r3, r3, #10
 80059be:	b29b      	uxth	r3, r3
 80059c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059ce:	801a      	strh	r2, [r3, #0]
 80059d0:	e025      	b.n	8005a1e <USB_EPStartXfer+0xd42>
 80059d2:	463b      	mov	r3, r7
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d120      	bne.n	8005a1e <USB_EPStartXfer+0xd42>
 80059dc:	1d3b      	adds	r3, r7, #4
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059e4:	1d3b      	adds	r3, r7, #4
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	461a      	mov	r2, r3
 80059f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059f4:	4413      	add	r3, r2
 80059f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059fa:	463b      	mov	r3, r7
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	011a      	lsls	r2, r3, #4
 8005a02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a06:	4413      	add	r3, r2
 8005a08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a10:	463b      	mov	r3, r7
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a1c:	801a      	strh	r2, [r3, #0]
 8005a1e:	1d3b      	adds	r3, r7, #4
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a26:	463b      	mov	r3, r7
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	785b      	ldrb	r3, [r3, #1]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d175      	bne.n	8005b1c <USB_EPStartXfer+0xe40>
 8005a30:	1d3b      	adds	r3, r7, #4
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a38:	1d3b      	adds	r3, r7, #4
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	461a      	mov	r2, r3
 8005a44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a48:	4413      	add	r3, r2
 8005a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a4e:	463b      	mov	r3, r7
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	011a      	lsls	r2, r3, #4
 8005a56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a64:	463b      	mov	r3, r7
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d116      	bne.n	8005a9c <USB_EPStartXfer+0xdc0>
 8005a6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a80:	801a      	strh	r2, [r3, #0]
 8005a82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	e061      	b.n	8005b60 <USB_EPStartXfer+0xe84>
 8005a9c:	463b      	mov	r3, r7
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b3e      	cmp	r3, #62	; 0x3e
 8005aa4:	d81a      	bhi.n	8005adc <USB_EPStartXfer+0xe00>
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	085b      	lsrs	r3, r3, #1
 8005aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ab2:	463b      	mov	r3, r7
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d004      	beq.n	8005aca <USB_EPStartXfer+0xdee>
 8005ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	029b      	lsls	r3, r3, #10
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ad8:	801a      	strh	r2, [r3, #0]
 8005ada:	e041      	b.n	8005b60 <USB_EPStartXfer+0xe84>
 8005adc:	463b      	mov	r3, r7
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	095b      	lsrs	r3, r3, #5
 8005ae4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ae8:	463b      	mov	r3, r7
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f003 031f 	and.w	r3, r3, #31
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d104      	bne.n	8005b00 <USB_EPStartXfer+0xe24>
 8005af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afa:	3b01      	subs	r3, #1
 8005afc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	029b      	lsls	r3, r3, #10
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b18:	801a      	strh	r2, [r3, #0]
 8005b1a:	e021      	b.n	8005b60 <USB_EPStartXfer+0xe84>
 8005b1c:	463b      	mov	r3, r7
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	785b      	ldrb	r3, [r3, #1]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d11c      	bne.n	8005b60 <USB_EPStartXfer+0xe84>
 8005b26:	1d3b      	adds	r3, r7, #4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	461a      	mov	r2, r3
 8005b32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b36:	4413      	add	r3, r2
 8005b38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	011a      	lsls	r2, r3, #4
 8005b44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b48:	4413      	add	r3, r2
 8005b4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b52:	463b      	mov	r3, r7
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b5e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b60:	463b      	mov	r3, r7
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 81a4 	beq.w	8005eb4 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005b6c:	1d3b      	adds	r3, r7, #4
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	463b      	mov	r3, r7
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b80:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d005      	beq.n	8005b98 <USB_EPStartXfer+0xebc>
 8005b8c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10d      	bne.n	8005bb4 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b98:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f040 8187 	bne.w	8005eb4 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ba6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f040 8180 	bne.w	8005eb4 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005bb4:	1d3b      	adds	r3, r7, #4
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	463b      	mov	r3, r7
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bce:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005bd2:	1d3b      	adds	r3, r7, #4
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	463b      	mov	r3, r7
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	441a      	add	r2, r3
 8005be0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	8013      	strh	r3, [r2, #0]
 8005bf8:	e15c      	b.n	8005eb4 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005bfa:	463b      	mov	r3, r7
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	78db      	ldrb	r3, [r3, #3]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	f040 8155 	bne.w	8005eb0 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005c06:	463b      	mov	r3, r7
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	699a      	ldr	r2, [r3, #24]
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d90e      	bls.n	8005c34 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005c16:	463b      	mov	r3, r7
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005c20:	463b      	mov	r3, r7
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699a      	ldr	r2, [r3, #24]
 8005c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c2a:	1ad2      	subs	r2, r2, r3
 8005c2c:	463b      	mov	r3, r7
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	619a      	str	r2, [r3, #24]
 8005c32:	e008      	b.n	8005c46 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005c34:	463b      	mov	r3, r7
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005c3e:	463b      	mov	r3, r7
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2200      	movs	r2, #0
 8005c44:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c46:	463b      	mov	r3, r7
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	785b      	ldrb	r3, [r3, #1]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d16f      	bne.n	8005d30 <USB_EPStartXfer+0x1054>
 8005c50:	1d3b      	adds	r3, r7, #4
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c58:	1d3b      	adds	r3, r7, #4
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	461a      	mov	r2, r3
 8005c64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c68:	4413      	add	r3, r2
 8005c6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c6e:	463b      	mov	r3, r7
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	011a      	lsls	r2, r3, #4
 8005c76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d116      	bne.n	8005cba <USB_EPStartXfer+0xfde>
 8005c8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c9e:	801a      	strh	r2, [r3, #0]
 8005ca0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cb6:	801a      	strh	r2, [r3, #0]
 8005cb8:	e05f      	b.n	8005d7a <USB_EPStartXfer+0x109e>
 8005cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cbe:	2b3e      	cmp	r3, #62	; 0x3e
 8005cc0:	d818      	bhi.n	8005cf4 <USB_EPStartXfer+0x1018>
 8005cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc6:	085b      	lsrs	r3, r3, #1
 8005cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d004      	beq.n	8005ce2 <USB_EPStartXfer+0x1006>
 8005cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cdc:	3301      	adds	r3, #1
 8005cde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	029b      	lsls	r3, r3, #10
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	e042      	b.n	8005d7a <USB_EPStartXfer+0x109e>
 8005cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf8:	095b      	lsrs	r3, r3, #5
 8005cfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d104      	bne.n	8005d14 <USB_EPStartXfer+0x1038>
 8005d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	029b      	lsls	r3, r3, #10
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d2c:	801a      	strh	r2, [r3, #0]
 8005d2e:	e024      	b.n	8005d7a <USB_EPStartXfer+0x109e>
 8005d30:	463b      	mov	r3, r7
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	785b      	ldrb	r3, [r3, #1]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d11f      	bne.n	8005d7a <USB_EPStartXfer+0x109e>
 8005d3a:	1d3b      	adds	r3, r7, #4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d42:	1d3b      	adds	r3, r7, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d52:	4413      	add	r3, r2
 8005d54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d58:	463b      	mov	r3, r7
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	011a      	lsls	r2, r3, #4
 8005d60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d64:	4413      	add	r3, r2
 8005d66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d78:	801a      	strh	r2, [r3, #0]
 8005d7a:	1d3b      	adds	r3, r7, #4
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d82:	463b      	mov	r3, r7
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	785b      	ldrb	r3, [r3, #1]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d16f      	bne.n	8005e6c <USB_EPStartXfer+0x1190>
 8005d8c:	1d3b      	adds	r3, r7, #4
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d94:	1d3b      	adds	r3, r7, #4
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005da4:	4413      	add	r3, r2
 8005da6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005daa:	463b      	mov	r3, r7
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	011a      	lsls	r2, r3, #4
 8005db2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005db6:	4413      	add	r3, r2
 8005db8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d116      	bne.n	8005df6 <USB_EPStartXfer+0x111a>
 8005dc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005dda:	801a      	strh	r2, [r3, #0]
 8005ddc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005df2:	801a      	strh	r2, [r3, #0]
 8005df4:	e05e      	b.n	8005eb4 <USB_EPStartXfer+0x11d8>
 8005df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dfa:	2b3e      	cmp	r3, #62	; 0x3e
 8005dfc:	d818      	bhi.n	8005e30 <USB_EPStartXfer+0x1154>
 8005dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e02:	085b      	lsrs	r3, r3, #1
 8005e04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d004      	beq.n	8005e1e <USB_EPStartXfer+0x1142>
 8005e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e18:	3301      	adds	r3, #1
 8005e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	029b      	lsls	r3, r3, #10
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e2c:	801a      	strh	r2, [r3, #0]
 8005e2e:	e041      	b.n	8005eb4 <USB_EPStartXfer+0x11d8>
 8005e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e3e:	f003 031f 	and.w	r3, r3, #31
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d104      	bne.n	8005e50 <USB_EPStartXfer+0x1174>
 8005e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	029b      	lsls	r3, r3, #10
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e68:	801a      	strh	r2, [r3, #0]
 8005e6a:	e023      	b.n	8005eb4 <USB_EPStartXfer+0x11d8>
 8005e6c:	463b      	mov	r3, r7
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	785b      	ldrb	r3, [r3, #1]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d11e      	bne.n	8005eb4 <USB_EPStartXfer+0x11d8>
 8005e76:	1d3b      	adds	r3, r7, #4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	461a      	mov	r2, r3
 8005e82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e86:	4413      	add	r3, r2
 8005e88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e8c:	463b      	mov	r3, r7
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	011a      	lsls	r2, r3, #4
 8005e94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e98:	4413      	add	r3, r2
 8005e9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005eac:	801a      	strh	r2, [r3, #0]
 8005eae:	e001      	b.n	8005eb4 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e02e      	b.n	8005f12 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005eb4:	1d3b      	adds	r3, r7, #4
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	463b      	mov	r3, r7
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ece:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005ed2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005ed6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005eda:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005ede:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005ee2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ee6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005eea:	1d3b      	adds	r3, r7, #4
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	463b      	mov	r3, r7
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	441a      	add	r2, r3
 8005ef8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	785b      	ldrb	r3, [r3, #1]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d020      	beq.n	8005f70 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f44:	81bb      	strh	r3, [r7, #12]
 8005f46:	89bb      	ldrh	r3, [r7, #12]
 8005f48:	f083 0310 	eor.w	r3, r3, #16
 8005f4c:	81bb      	strh	r3, [r7, #12]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	441a      	add	r2, r3
 8005f58:	89bb      	ldrh	r3, [r7, #12]
 8005f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	8013      	strh	r3, [r2, #0]
 8005f6e:	e01f      	b.n	8005fb0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f86:	81fb      	strh	r3, [r7, #14]
 8005f88:	89fb      	ldrh	r3, [r7, #14]
 8005f8a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f8e:	81fb      	strh	r3, [r7, #14]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	441a      	add	r2, r3
 8005f9a:	89fb      	ldrh	r3, [r7, #14]
 8005f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bc80      	pop	{r7}
 8005fba:	4770      	bx	lr

08005fbc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	7b1b      	ldrb	r3, [r3, #12]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f040 809d 	bne.w	800610a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d04c      	beq.n	8006072 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	823b      	strh	r3, [r7, #16]
 8005fe6:	8a3b      	ldrh	r3, [r7, #16]
 8005fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01b      	beq.n	8006028 <USB_EPClearStall+0x6c>
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	81fb      	strh	r3, [r7, #14]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	441a      	add	r2, r3
 8006012:	89fb      	ldrh	r3, [r7, #14]
 8006014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006020:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006024:	b29b      	uxth	r3, r3
 8006026:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	78db      	ldrb	r3, [r3, #3]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d06c      	beq.n	800610a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006046:	81bb      	strh	r3, [r7, #12]
 8006048:	89bb      	ldrh	r3, [r7, #12]
 800604a:	f083 0320 	eor.w	r3, r3, #32
 800604e:	81bb      	strh	r3, [r7, #12]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	441a      	add	r2, r3
 800605a:	89bb      	ldrh	r3, [r7, #12]
 800605c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606c:	b29b      	uxth	r3, r3
 800606e:	8013      	strh	r3, [r2, #0]
 8006070:	e04b      	b.n	800610a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	82fb      	strh	r3, [r7, #22]
 8006080:	8afb      	ldrh	r3, [r7, #22]
 8006082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d01b      	beq.n	80060c2 <USB_EPClearStall+0x106>
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b29b      	uxth	r3, r3
 8006098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800609c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a0:	82bb      	strh	r3, [r7, #20]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	441a      	add	r2, r3
 80060ac:	8abb      	ldrh	r3, [r7, #20]
 80060ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060be:	b29b      	uxth	r3, r3
 80060c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d8:	827b      	strh	r3, [r7, #18]
 80060da:	8a7b      	ldrh	r3, [r7, #18]
 80060dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060e0:	827b      	strh	r3, [r7, #18]
 80060e2:	8a7b      	ldrh	r3, [r7, #18]
 80060e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060e8:	827b      	strh	r3, [r7, #18]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	441a      	add	r2, r3
 80060f4:	8a7b      	ldrh	r3, [r7, #18]
 80060f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006106:	b29b      	uxth	r3, r3
 8006108:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	371c      	adds	r7, #28
 8006110:	46bd      	mov	sp, r7
 8006112:	bc80      	pop	{r7}
 8006114:	4770      	bx	lr

08006116 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
 800611e:	460b      	mov	r3, r1
 8006120:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006122:	78fb      	ldrb	r3, [r7, #3]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d103      	bne.n	8006130 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2280      	movs	r2, #128	; 0x80
 800612c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr

0800613c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr

08006150 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	bc80      	pop	{r7}
 8006162:	4770      	bx	lr

08006164 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006172:	b29b      	uxth	r3, r3
 8006174:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006176:	68fb      	ldr	r3, [r7, #12]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	bc80      	pop	{r7}
 8006180:	4770      	bx	lr

08006182 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	bc80      	pop	{r7}
 8006196:	4770      	bx	lr

08006198 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006198:	b480      	push	{r7}
 800619a:	b08d      	sub	sp, #52	; 0x34
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	4611      	mov	r1, r2
 80061a4:	461a      	mov	r2, r3
 80061a6:	460b      	mov	r3, r1
 80061a8:	80fb      	strh	r3, [r7, #6]
 80061aa:	4613      	mov	r3, r2
 80061ac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80061ae:	88bb      	ldrh	r3, [r7, #4]
 80061b0:	3301      	adds	r3, #1
 80061b2:	085b      	lsrs	r3, r3, #1
 80061b4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80061be:	88fb      	ldrh	r3, [r7, #6]
 80061c0:	005a      	lsls	r2, r3, #1
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ca:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d0:	e01e      	b.n	8006210 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	3301      	adds	r3, #1
 80061dc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	021b      	lsls	r3, r3, #8
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	461a      	mov	r2, r3
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	3302      	adds	r3, #2
 80061fc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	3302      	adds	r3, #2
 8006202:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	3301      	adds	r3, #1
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620c:	3b01      	subs	r3, #1
 800620e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1dd      	bne.n	80061d2 <USB_WritePMA+0x3a>
  }
}
 8006216:	bf00      	nop
 8006218:	3734      	adds	r7, #52	; 0x34
 800621a:	46bd      	mov	sp, r7
 800621c:	bc80      	pop	{r7}
 800621e:	4770      	bx	lr

08006220 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006220:	b480      	push	{r7}
 8006222:	b08b      	sub	sp, #44	; 0x2c
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	4611      	mov	r1, r2
 800622c:	461a      	mov	r2, r3
 800622e:	460b      	mov	r3, r1
 8006230:	80fb      	strh	r3, [r7, #6]
 8006232:	4613      	mov	r3, r2
 8006234:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006236:	88bb      	ldrh	r3, [r7, #4]
 8006238:	085b      	lsrs	r3, r3, #1
 800623a:	b29b      	uxth	r3, r3
 800623c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006246:	88fb      	ldrh	r3, [r7, #6]
 8006248:	005a      	lsls	r2, r3, #1
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006252:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	627b      	str	r3, [r7, #36]	; 0x24
 8006258:	e01b      	b.n	8006292 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	b29b      	uxth	r3, r3
 8006260:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	3302      	adds	r3, #2
 8006266:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	b2da      	uxtb	r2, r3
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	3301      	adds	r3, #1
 8006274:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	0a1b      	lsrs	r3, r3, #8
 800627a:	b2da      	uxtb	r2, r3
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	3301      	adds	r3, #1
 8006284:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	3302      	adds	r3, #2
 800628a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	3b01      	subs	r3, #1
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e0      	bne.n	800625a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006298:	88bb      	ldrh	r3, [r7, #4]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	b29b      	uxth	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d007      	beq.n	80062b4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	701a      	strb	r2, [r3, #0]
  }
}
 80062b4:	bf00      	nop
 80062b6:	372c      	adds	r7, #44	; 0x2c
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bc80      	pop	{r7}
 80062bc:	4770      	bx	lr

080062be <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	460b      	mov	r3, r1
 80062c8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	7c1b      	ldrb	r3, [r3, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d115      	bne.n	8006302 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062da:	2202      	movs	r2, #2
 80062dc:	2181      	movs	r1, #129	; 0x81
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f001 fe1f 	bl	8007f22 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062ee:	2202      	movs	r2, #2
 80062f0:	2101      	movs	r1, #1
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f001 fe15 	bl	8007f22 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006300:	e012      	b.n	8006328 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006302:	2340      	movs	r3, #64	; 0x40
 8006304:	2202      	movs	r2, #2
 8006306:	2181      	movs	r1, #129	; 0x81
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f001 fe0a 	bl	8007f22 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006314:	2340      	movs	r3, #64	; 0x40
 8006316:	2202      	movs	r2, #2
 8006318:	2101      	movs	r1, #1
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f001 fe01 	bl	8007f22 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006328:	2308      	movs	r3, #8
 800632a:	2203      	movs	r2, #3
 800632c:	2182      	movs	r1, #130	; 0x82
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f001 fdf7 	bl	8007f22 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800633a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800633e:	f001 ff17 	bl	8008170 <USBD_static_malloc>
 8006342:	4602      	mov	r2, r0
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006350:	2b00      	cmp	r3, #0
 8006352:	d102      	bne.n	800635a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006354:	2301      	movs	r3, #1
 8006356:	73fb      	strb	r3, [r7, #15]
 8006358:	e026      	b.n	80063a8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006360:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	2200      	movs	r2, #0
 8006370:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2200      	movs	r2, #0
 8006378:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	7c1b      	ldrb	r3, [r3, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d109      	bne.n	8006398 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800638a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800638e:	2101      	movs	r1, #1
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f001 feb7 	bl	8008104 <USBD_LL_PrepareReceive>
 8006396:	e007      	b.n	80063a8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800639e:	2340      	movs	r3, #64	; 0x40
 80063a0:	2101      	movs	r1, #1
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f001 feae 	bl	8008104 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	460b      	mov	r3, r1
 80063bc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80063c2:	2181      	movs	r1, #129	; 0x81
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 fdd2 	bl	8007f6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80063d0:	2101      	movs	r1, #1
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 fdcb 	bl	8007f6e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80063e0:	2182      	movs	r1, #130	; 0x82
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 fdc3 	bl	8007f6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00e      	beq.n	8006416 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006408:	4618      	mov	r0, r3
 800640a:	f001 febd 	bl	8008188 <USBD_static_free>
    pdev->pClassData = NULL;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006416:	7bfb      	ldrb	r3, [r7, #15]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006430:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006446:	2b00      	cmp	r3, #0
 8006448:	d039      	beq.n	80064be <USBD_CDC_Setup+0x9e>
 800644a:	2b20      	cmp	r3, #32
 800644c:	d17c      	bne.n	8006548 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	88db      	ldrh	r3, [r3, #6]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d029      	beq.n	80064aa <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	b25b      	sxtb	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	da11      	bge.n	8006484 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800646c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	88d2      	ldrh	r2, [r2, #6]
 8006472:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006474:	6939      	ldr	r1, [r7, #16]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	88db      	ldrh	r3, [r3, #6]
 800647a:	461a      	mov	r2, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 f9c9 	bl	8007814 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006482:	e068      	b.n	8006556 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	785a      	ldrb	r2, [r3, #1]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	88db      	ldrh	r3, [r3, #6]
 8006492:	b2da      	uxtb	r2, r3
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800649a:	6939      	ldr	r1, [r7, #16]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	88db      	ldrh	r3, [r3, #6]
 80064a0:	461a      	mov	r2, r3
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f001 f9e4 	bl	8007870 <USBD_CtlPrepareRx>
      break;
 80064a8:	e055      	b.n	8006556 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	7850      	ldrb	r0, [r2, #1]
 80064b6:	2200      	movs	r2, #0
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	4798      	blx	r3
      break;
 80064bc:	e04b      	b.n	8006556 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	785b      	ldrb	r3, [r3, #1]
 80064c2:	2b0a      	cmp	r3, #10
 80064c4:	d017      	beq.n	80064f6 <USBD_CDC_Setup+0xd6>
 80064c6:	2b0b      	cmp	r3, #11
 80064c8:	d029      	beq.n	800651e <USBD_CDC_Setup+0xfe>
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d133      	bne.n	8006536 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d4:	2b03      	cmp	r3, #3
 80064d6:	d107      	bne.n	80064e8 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80064d8:	f107 030c 	add.w	r3, r7, #12
 80064dc:	2202      	movs	r2, #2
 80064de:	4619      	mov	r1, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 f997 	bl	8007814 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064e6:	e02e      	b.n	8006546 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f001 f928 	bl	8007740 <USBD_CtlError>
            ret = USBD_FAIL;
 80064f0:	2302      	movs	r3, #2
 80064f2:	75fb      	strb	r3, [r7, #23]
          break;
 80064f4:	e027      	b.n	8006546 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d107      	bne.n	8006510 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006500:	f107 030f 	add.w	r3, r7, #15
 8006504:	2201      	movs	r2, #1
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f001 f983 	bl	8007814 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800650e:	e01a      	b.n	8006546 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f001 f914 	bl	8007740 <USBD_CtlError>
            ret = USBD_FAIL;
 8006518:	2302      	movs	r3, #2
 800651a:	75fb      	strb	r3, [r7, #23]
          break;
 800651c:	e013      	b.n	8006546 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006524:	2b03      	cmp	r3, #3
 8006526:	d00d      	beq.n	8006544 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 f908 	bl	8007740 <USBD_CtlError>
            ret = USBD_FAIL;
 8006530:	2302      	movs	r3, #2
 8006532:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006534:	e006      	b.n	8006544 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 f901 	bl	8007740 <USBD_CtlError>
          ret = USBD_FAIL;
 800653e:	2302      	movs	r3, #2
 8006540:	75fb      	strb	r3, [r7, #23]
          break;
 8006542:	e000      	b.n	8006546 <USBD_CDC_Setup+0x126>
          break;
 8006544:	bf00      	nop
      }
      break;
 8006546:	e006      	b.n	8006556 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 f8f8 	bl	8007740 <USBD_CtlError>
      ret = USBD_FAIL;
 8006550:	2302      	movs	r3, #2
 8006552:	75fb      	strb	r3, [r7, #23]
      break;
 8006554:	bf00      	nop
  }

  return ret;
 8006556:	7dfb      	ldrb	r3, [r7, #23]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006572:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800657a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006582:	2b00      	cmp	r3, #0
 8006584:	d03a      	beq.n	80065fc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006586:	78fa      	ldrb	r2, [r7, #3]
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	4613      	mov	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	331c      	adds	r3, #28
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d029      	beq.n	80065f0 <USBD_CDC_DataIn+0x90>
 800659c:	78fa      	ldrb	r2, [r7, #3]
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	4613      	mov	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	440b      	add	r3, r1
 80065aa:	331c      	adds	r3, #28
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	78f9      	ldrb	r1, [r7, #3]
 80065b0:	68b8      	ldr	r0, [r7, #8]
 80065b2:	460b      	mov	r3, r1
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	440b      	add	r3, r1
 80065b8:	00db      	lsls	r3, r3, #3
 80065ba:	4403      	add	r3, r0
 80065bc:	3338      	adds	r3, #56	; 0x38
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80065c4:	fb03 f301 	mul.w	r3, r3, r1
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d110      	bne.n	80065f0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80065ce:	78fa      	ldrb	r2, [r7, #3]
 80065d0:	6879      	ldr	r1, [r7, #4]
 80065d2:	4613      	mov	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	440b      	add	r3, r1
 80065dc:	331c      	adds	r3, #28
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80065e2:	78f9      	ldrb	r1, [r7, #3]
 80065e4:	2300      	movs	r3, #0
 80065e6:	2200      	movs	r2, #0
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f001 fd68 	bl	80080be <USBD_LL_Transmit>
 80065ee:	e003      	b.n	80065f8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	e000      	b.n	80065fe <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80065fc:	2302      	movs	r3, #2
  }
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
 800660e:	460b      	mov	r3, r1
 8006610:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006618:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f001 fd93 	bl	800814a <USBD_LL_GetRxDataSize>
 8006624:	4602      	mov	r2, r0
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00d      	beq.n	8006652 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800664a:	4611      	mov	r1, r2
 800664c:	4798      	blx	r3

    return USBD_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	e000      	b.n	8006654 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006652:	2302      	movs	r3, #2
  }
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800666a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006672:	2b00      	cmp	r3, #0
 8006674:	d015      	beq.n	80066a2 <USBD_CDC_EP0_RxReady+0x46>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800667c:	2bff      	cmp	r3, #255	; 0xff
 800667e:	d010      	beq.n	80066a2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800668e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006696:	b292      	uxth	r2, r2
 8006698:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	22ff      	movs	r2, #255	; 0xff
 800669e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2243      	movs	r2, #67	; 0x43
 80066b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80066ba:	4b03      	ldr	r3, [pc, #12]	; (80066c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80066bc:	4618      	mov	r0, r3
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	200000a8 	.word	0x200000a8

080066cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2243      	movs	r2, #67	; 0x43
 80066d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80066da:	4b03      	ldr	r3, [pc, #12]	; (80066e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	20000064 	.word	0x20000064

080066ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2243      	movs	r2, #67	; 0x43
 80066f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80066fa:	4b03      	ldr	r3, [pc, #12]	; (8006708 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	200000ec 	.word	0x200000ec

0800670c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	220a      	movs	r2, #10
 8006718:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800671a:	4b03      	ldr	r3, [pc, #12]	; (8006728 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800671c:	4618      	mov	r0, r3
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	bc80      	pop	{r7}
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	20000020 	.word	0x20000020

0800672c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006736:	2302      	movs	r3, #2
 8006738:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	4613      	mov	r3, r2
 8006764:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006776:	88fa      	ldrh	r2, [r7, #6]
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	371c      	adds	r7, #28
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr

0800678a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800678a:	b480      	push	{r7}
 800678c:	b085      	sub	sp, #20
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bc80      	pop	{r7}
 80067ae:	4770      	bx	lr

080067b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067be:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d017      	beq.n	80067fa <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	7c1b      	ldrb	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d109      	bne.n	80067e6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067dc:	2101      	movs	r1, #1
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 fc90 	bl	8008104 <USBD_LL_PrepareReceive>
 80067e4:	e007      	b.n	80067f6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067ec:	2340      	movs	r3, #64	; 0x40
 80067ee:	2101      	movs	r1, #1
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f001 fc87 	bl	8008104 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	e000      	b.n	80067fc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80067fa:	2302      	movs	r3, #2
  }
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	4613      	mov	r3, r2
 8006810:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006818:	2302      	movs	r3, #2
 800681a:	e01a      	b.n	8006852 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	79fa      	ldrb	r2, [r7, #7]
 8006848:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f001 faf4 	bl	8007e38 <USBD_LL_Init>

  return USBD_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800685a:	b480      	push	{r7}
 800685c:	b085      	sub	sp, #20
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d006      	beq.n	800687c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006876:	2300      	movs	r3, #0
 8006878:	73fb      	strb	r3, [r7, #15]
 800687a:	e001      	b.n	8006880 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800687c:	2302      	movs	r3, #2
 800687e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006880:	7bfb      	ldrb	r3, [r7, #15]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	bc80      	pop	{r7}
 800688a:	4770      	bx	lr

0800688c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f001 fb29 	bl	8007eec <USBD_LL_Start>

  return USBD_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bc80      	pop	{r7}
 80068b6:	4770      	bx	lr

080068b8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80068c4:	2302      	movs	r3, #2
 80068c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00c      	beq.n	80068ec <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	78fa      	ldrb	r2, [r7, #3]
 80068dc:	4611      	mov	r1, r2
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	4798      	blx	r3
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	460b      	mov	r3, r1
 8006900:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	78fa      	ldrb	r2, [r7, #3]
 800690c:	4611      	mov	r1, r2
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	4798      	blx	r3

  return USBD_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f000 feca 	bl	80076c8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006942:	461a      	mov	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006950:	f003 031f 	and.w	r3, r3, #31
 8006954:	2b01      	cmp	r3, #1
 8006956:	d00c      	beq.n	8006972 <USBD_LL_SetupStage+0x56>
 8006958:	2b01      	cmp	r3, #1
 800695a:	d302      	bcc.n	8006962 <USBD_LL_SetupStage+0x46>
 800695c:	2b02      	cmp	r3, #2
 800695e:	d010      	beq.n	8006982 <USBD_LL_SetupStage+0x66>
 8006960:	e017      	b.n	8006992 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f9ca 	bl	8006d04 <USBD_StdDevReq>
      break;
 8006970:	e01a      	b.n	80069a8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa2c 	bl	8006dd8 <USBD_StdItfReq>
      break;
 8006980:	e012      	b.n	80069a8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006988:	4619      	mov	r1, r3
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fa6a 	bl	8006e64 <USBD_StdEPReq>
      break;
 8006990:	e00a      	b.n	80069a8 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006998:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800699c:	b2db      	uxtb	r3, r3
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 fb03 	bl	8007fac <USBD_LL_StallEP>
      break;
 80069a6:	bf00      	nop
  }

  return USBD_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b086      	sub	sp, #24
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	460b      	mov	r3, r1
 80069bc:	607a      	str	r2, [r7, #4]
 80069be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80069c0:	7afb      	ldrb	r3, [r7, #11]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d14b      	bne.n	8006a5e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80069cc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d134      	bne.n	8006a42 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	68da      	ldr	r2, [r3, #12]
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d919      	bls.n	8006a18 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	1ad2      	subs	r2, r2, r3
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d203      	bcs.n	8006a06 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	e002      	b.n	8006a0c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 ff4b 	bl	80078ac <USBD_CtlContinueRx>
 8006a16:	e038      	b.n	8006a8a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00a      	beq.n	8006a3a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d105      	bne.n	8006a3a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 ff48 	bl	80078d0 <USBD_CtlSendStatus>
 8006a40:	e023      	b.n	8006a8a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a48:	2b05      	cmp	r3, #5
 8006a4a:	d11e      	bne.n	8006a8a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006a54:	2100      	movs	r1, #0
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f001 faa8 	bl	8007fac <USBD_LL_StallEP>
 8006a5c:	e015      	b.n	8006a8a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00d      	beq.n	8006a86 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a70:	2b03      	cmp	r3, #3
 8006a72:	d108      	bne.n	8006a86 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	7afa      	ldrb	r2, [r7, #11]
 8006a7e:	4611      	mov	r1, r2
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	4798      	blx	r3
 8006a84:	e001      	b.n	8006a8a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a86:	2302      	movs	r3, #2
 8006a88:	e000      	b.n	8006a8c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006aa2:	7afb      	ldrb	r3, [r7, #11]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d17f      	bne.n	8006ba8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3314      	adds	r3, #20
 8006aac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d15c      	bne.n	8006b72 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	68da      	ldr	r2, [r3, #12]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d915      	bls.n	8006af0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	68da      	ldr	r2, [r3, #12]
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	1ad2      	subs	r2, r2, r3
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	461a      	mov	r2, r3
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 feb5 	bl	800784c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f001 fb0b 	bl	8008104 <USBD_LL_PrepareReceive>
 8006aee:	e04e      	b.n	8006b8e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	6912      	ldr	r2, [r2, #16]
 8006af8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006afc:	fb02 f201 	mul.w	r2, r2, r1
 8006b00:	1a9b      	subs	r3, r3, r2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d11c      	bne.n	8006b40 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	689a      	ldr	r2, [r3, #8]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d316      	bcc.n	8006b40 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d20f      	bcs.n	8006b40 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b20:	2200      	movs	r2, #0
 8006b22:	2100      	movs	r1, #0
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 fe91 	bl	800784c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b32:	2300      	movs	r3, #0
 8006b34:	2200      	movs	r2, #0
 8006b36:	2100      	movs	r1, #0
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f001 fae3 	bl	8008104 <USBD_LL_PrepareReceive>
 8006b3e:	e026      	b.n	8006b8e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d105      	bne.n	8006b62 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006b62:	2180      	movs	r1, #128	; 0x80
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f001 fa21 	bl	8007fac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 fec3 	bl	80078f6 <USBD_CtlReceiveStatus>
 8006b70:	e00d      	b.n	8006b8e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d004      	beq.n	8006b86 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d103      	bne.n	8006b8e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006b86:	2180      	movs	r1, #128	; 0x80
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f001 fa0f 	bl	8007fac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d11d      	bne.n	8006bd4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f7ff fe83 	bl	80068a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ba6:	e015      	b.n	8006bd4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00d      	beq.n	8006bd0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d108      	bne.n	8006bd0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	7afa      	ldrb	r2, [r7, #11]
 8006bc8:	4611      	mov	r1, r2
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	4798      	blx	r3
 8006bce:	e001      	b.n	8006bd4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e000      	b.n	8006bd6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b082      	sub	sp, #8
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006be6:	2340      	movs	r3, #64	; 0x40
 8006be8:	2200      	movs	r2, #0
 8006bea:	2100      	movs	r1, #0
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f001 f998 	bl	8007f22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2240      	movs	r2, #64	; 0x40
 8006bfe:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c02:	2340      	movs	r3, #64	; 0x40
 8006c04:	2200      	movs	r2, #0
 8006c06:	2180      	movs	r1, #128	; 0x80
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f001 f98a 	bl	8007f22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2240      	movs	r2, #64	; 0x40
 8006c18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d009      	beq.n	8006c56 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6852      	ldr	r2, [r2, #4]
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	4611      	mov	r1, r2
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	4798      	blx	r3
  }

  return USBD_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	78fa      	ldrb	r2, [r7, #3]
 8006c70:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr

08006c7e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2204      	movs	r2, #4
 8006c96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bc80      	pop	{r7}
 8006ca4:	4770      	bx	lr

08006ca6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb4:	2b04      	cmp	r3, #4
 8006cb6:	d105      	bne.n	8006cc4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bc80      	pop	{r7}
 8006cce:	4770      	bx	lr

08006cd0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d10b      	bne.n	8006cfa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d005      	beq.n	8006cfa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	d004      	beq.n	8006d28 <USBD_StdDevReq+0x24>
 8006d1e:	2b40      	cmp	r3, #64	; 0x40
 8006d20:	d002      	beq.n	8006d28 <USBD_StdDevReq+0x24>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d008      	beq.n	8006d38 <USBD_StdDevReq+0x34>
 8006d26:	e04c      	b.n	8006dc2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	4798      	blx	r3
      break;
 8006d36:	e049      	b.n	8006dcc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	2b09      	cmp	r3, #9
 8006d3e:	d83a      	bhi.n	8006db6 <USBD_StdDevReq+0xb2>
 8006d40:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <USBD_StdDevReq+0x44>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006d99 	.word	0x08006d99
 8006d4c:	08006dad 	.word	0x08006dad
 8006d50:	08006db7 	.word	0x08006db7
 8006d54:	08006da3 	.word	0x08006da3
 8006d58:	08006db7 	.word	0x08006db7
 8006d5c:	08006d7b 	.word	0x08006d7b
 8006d60:	08006d71 	.word	0x08006d71
 8006d64:	08006db7 	.word	0x08006db7
 8006d68:	08006d8f 	.word	0x08006d8f
 8006d6c:	08006d85 	.word	0x08006d85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f9d4 	bl	8007120 <USBD_GetDescriptor>
          break;
 8006d78:	e022      	b.n	8006dc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fb37 	bl	80073f0 <USBD_SetAddress>
          break;
 8006d82:	e01d      	b.n	8006dc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fb74 	bl	8007474 <USBD_SetConfig>
          break;
 8006d8c:	e018      	b.n	8006dc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fbfd 	bl	8007590 <USBD_GetConfig>
          break;
 8006d96:	e013      	b.n	8006dc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fc2c 	bl	80075f8 <USBD_GetStatus>
          break;
 8006da0:	e00e      	b.n	8006dc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fc5a 	bl	800765e <USBD_SetFeature>
          break;
 8006daa:	e009      	b.n	8006dc0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fc69 	bl	8007686 <USBD_ClrFeature>
          break;
 8006db4:	e004      	b.n	8006dc0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fcc1 	bl	8007740 <USBD_CtlError>
          break;
 8006dbe:	bf00      	nop
      }
      break;
 8006dc0:	e004      	b.n	8006dcc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fcbb 	bl	8007740 <USBD_CtlError>
      break;
 8006dca:	bf00      	nop
  }

  return ret;
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop

08006dd8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dee:	2b20      	cmp	r3, #32
 8006df0:	d003      	beq.n	8006dfa <USBD_StdItfReq+0x22>
 8006df2:	2b40      	cmp	r3, #64	; 0x40
 8006df4:	d001      	beq.n	8006dfa <USBD_StdItfReq+0x22>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d12a      	bne.n	8006e50 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e00:	3b01      	subs	r3, #1
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d81d      	bhi.n	8006e42 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	889b      	ldrh	r3, [r3, #4]
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d813      	bhi.n	8006e38 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	6839      	ldr	r1, [r7, #0]
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	4798      	blx	r3
 8006e1e:	4603      	mov	r3, r0
 8006e20:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	88db      	ldrh	r3, [r3, #6]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d110      	bne.n	8006e4c <USBD_StdItfReq+0x74>
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10d      	bne.n	8006e4c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fd4d 	bl	80078d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e36:	e009      	b.n	8006e4c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006e38:	6839      	ldr	r1, [r7, #0]
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fc80 	bl	8007740 <USBD_CtlError>
          break;
 8006e40:	e004      	b.n	8006e4c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fc7b 	bl	8007740 <USBD_CtlError>
          break;
 8006e4a:	e000      	b.n	8006e4e <USBD_StdItfReq+0x76>
          break;
 8006e4c:	bf00      	nop
      }
      break;
 8006e4e:	e004      	b.n	8006e5a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fc74 	bl	8007740 <USBD_CtlError>
      break;
 8006e58:	bf00      	nop
  }

  return USBD_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	889b      	ldrh	r3, [r3, #4]
 8006e76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e80:	2b20      	cmp	r3, #32
 8006e82:	d004      	beq.n	8006e8e <USBD_StdEPReq+0x2a>
 8006e84:	2b40      	cmp	r3, #64	; 0x40
 8006e86:	d002      	beq.n	8006e8e <USBD_StdEPReq+0x2a>
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d008      	beq.n	8006e9e <USBD_StdEPReq+0x3a>
 8006e8c:	e13d      	b.n	800710a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	4798      	blx	r3
      break;
 8006e9c:	e13a      	b.n	8007114 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ea6:	2b20      	cmp	r3, #32
 8006ea8:	d10a      	bne.n	8006ec0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	4798      	blx	r3
 8006eb8:	4603      	mov	r3, r0
 8006eba:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	e12a      	b.n	8007116 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d03e      	beq.n	8006f46 <USBD_StdEPReq+0xe2>
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d002      	beq.n	8006ed2 <USBD_StdEPReq+0x6e>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d070      	beq.n	8006fb2 <USBD_StdEPReq+0x14e>
 8006ed0:	e115      	b.n	80070fe <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d002      	beq.n	8006ee2 <USBD_StdEPReq+0x7e>
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d015      	beq.n	8006f0c <USBD_StdEPReq+0xa8>
 8006ee0:	e02b      	b.n	8006f3a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00c      	beq.n	8006f02 <USBD_StdEPReq+0x9e>
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	2b80      	cmp	r3, #128	; 0x80
 8006eec:	d009      	beq.n	8006f02 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006eee:	7bbb      	ldrb	r3, [r7, #14]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 f85a 	bl	8007fac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ef8:	2180      	movs	r1, #128	; 0x80
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 f856 	bl	8007fac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f00:	e020      	b.n	8006f44 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fc1b 	bl	8007740 <USBD_CtlError>
              break;
 8006f0a:	e01b      	b.n	8006f44 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	885b      	ldrh	r3, [r3, #2]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10e      	bne.n	8006f32 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00b      	beq.n	8006f32 <USBD_StdEPReq+0xce>
 8006f1a:	7bbb      	ldrb	r3, [r7, #14]
 8006f1c:	2b80      	cmp	r3, #128	; 0x80
 8006f1e:	d008      	beq.n	8006f32 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	88db      	ldrh	r3, [r3, #6]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d104      	bne.n	8006f32 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006f28:	7bbb      	ldrb	r3, [r7, #14]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 f83d 	bl	8007fac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fccc 	bl	80078d0 <USBD_CtlSendStatus>

              break;
 8006f38:	e004      	b.n	8006f44 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fbff 	bl	8007740 <USBD_CtlError>
              break;
 8006f42:	bf00      	nop
          }
          break;
 8006f44:	e0e0      	b.n	8007108 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d002      	beq.n	8006f56 <USBD_StdEPReq+0xf2>
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d015      	beq.n	8006f80 <USBD_StdEPReq+0x11c>
 8006f54:	e026      	b.n	8006fa4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f56:	7bbb      	ldrb	r3, [r7, #14]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00c      	beq.n	8006f76 <USBD_StdEPReq+0x112>
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	2b80      	cmp	r3, #128	; 0x80
 8006f60:	d009      	beq.n	8006f76 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f62:	7bbb      	ldrb	r3, [r7, #14]
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 f820 	bl	8007fac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f6c:	2180      	movs	r1, #128	; 0x80
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f001 f81c 	bl	8007fac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f74:	e01c      	b.n	8006fb0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fbe1 	bl	8007740 <USBD_CtlError>
              break;
 8006f7e:	e017      	b.n	8006fb0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	885b      	ldrh	r3, [r3, #2]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d112      	bne.n	8006fae <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f88:	7bbb      	ldrb	r3, [r7, #14]
 8006f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d004      	beq.n	8006f9c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f001 f827 	bl	8007fea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fc97 	bl	80078d0 <USBD_CtlSendStatus>
              }
              break;
 8006fa2:	e004      	b.n	8006fae <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fbca 	bl	8007740 <USBD_CtlError>
              break;
 8006fac:	e000      	b.n	8006fb0 <USBD_StdEPReq+0x14c>
              break;
 8006fae:	bf00      	nop
          }
          break;
 8006fb0:	e0aa      	b.n	8007108 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d002      	beq.n	8006fc2 <USBD_StdEPReq+0x15e>
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d032      	beq.n	8007026 <USBD_StdEPReq+0x1c2>
 8006fc0:	e097      	b.n	80070f2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d007      	beq.n	8006fd8 <USBD_StdEPReq+0x174>
 8006fc8:	7bbb      	ldrb	r3, [r7, #14]
 8006fca:	2b80      	cmp	r3, #128	; 0x80
 8006fcc:	d004      	beq.n	8006fd8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006fce:	6839      	ldr	r1, [r7, #0]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fbb5 	bl	8007740 <USBD_CtlError>
                break;
 8006fd6:	e091      	b.n	80070fc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	da0b      	bge.n	8006ff8 <USBD_StdEPReq+0x194>
 8006fe0:	7bbb      	ldrb	r3, [r7, #14]
 8006fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	3310      	adds	r3, #16
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	e00b      	b.n	8007010 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ff8:	7bbb      	ldrb	r3, [r7, #14]
 8006ffa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ffe:	4613      	mov	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	4413      	add	r3, r2
 800700e:	3304      	adds	r3, #4
 8007010:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2200      	movs	r2, #0
 8007016:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	2202      	movs	r2, #2
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fbf8 	bl	8007814 <USBD_CtlSendData>
              break;
 8007024:	e06a      	b.n	80070fc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007026:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800702a:	2b00      	cmp	r3, #0
 800702c:	da11      	bge.n	8007052 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800702e:	7bbb      	ldrb	r3, [r7, #14]
 8007030:	f003 020f 	and.w	r2, r3, #15
 8007034:	6879      	ldr	r1, [r7, #4]
 8007036:	4613      	mov	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	440b      	add	r3, r1
 8007040:	3318      	adds	r3, #24
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d117      	bne.n	8007078 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fb78 	bl	8007740 <USBD_CtlError>
                  break;
 8007050:	e054      	b.n	80070fc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007052:	7bbb      	ldrb	r3, [r7, #14]
 8007054:	f003 020f 	and.w	r2, r3, #15
 8007058:	6879      	ldr	r1, [r7, #4]
 800705a:	4613      	mov	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	440b      	add	r3, r1
 8007064:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d104      	bne.n	8007078 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fb65 	bl	8007740 <USBD_CtlError>
                  break;
 8007076:	e041      	b.n	80070fc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007078:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800707c:	2b00      	cmp	r3, #0
 800707e:	da0b      	bge.n	8007098 <USBD_StdEPReq+0x234>
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	3310      	adds	r3, #16
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	4413      	add	r3, r2
 8007094:	3304      	adds	r3, #4
 8007096:	e00b      	b.n	80070b0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007098:	7bbb      	ldrb	r3, [r7, #14]
 800709a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800709e:	4613      	mov	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	4413      	add	r3, r2
 80070ae:	3304      	adds	r3, #4
 80070b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <USBD_StdEPReq+0x25a>
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	2b80      	cmp	r3, #128	; 0x80
 80070bc:	d103      	bne.n	80070c6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2200      	movs	r2, #0
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	e00e      	b.n	80070e4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80070c6:	7bbb      	ldrb	r3, [r7, #14]
 80070c8:	4619      	mov	r1, r3
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 ffac 	bl	8008028 <USBD_LL_IsStallEP>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2201      	movs	r2, #1
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	e002      	b.n	80070e4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2200      	movs	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2202      	movs	r2, #2
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fb92 	bl	8007814 <USBD_CtlSendData>
              break;
 80070f0:	e004      	b.n	80070fc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fb23 	bl	8007740 <USBD_CtlError>
              break;
 80070fa:	bf00      	nop
          }
          break;
 80070fc:	e004      	b.n	8007108 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fb1d 	bl	8007740 <USBD_CtlError>
          break;
 8007106:	bf00      	nop
      }
      break;
 8007108:	e004      	b.n	8007114 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fb17 	bl	8007740 <USBD_CtlError>
      break;
 8007112:	bf00      	nop
  }

  return ret;
 8007114:	7bfb      	ldrb	r3, [r7, #15]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
	...

08007120 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800712e:	2300      	movs	r3, #0
 8007130:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	885b      	ldrh	r3, [r3, #2]
 800713a:	0a1b      	lsrs	r3, r3, #8
 800713c:	b29b      	uxth	r3, r3
 800713e:	3b01      	subs	r3, #1
 8007140:	2b06      	cmp	r3, #6
 8007142:	f200 8128 	bhi.w	8007396 <USBD_GetDescriptor+0x276>
 8007146:	a201      	add	r2, pc, #4	; (adr r2, 800714c <USBD_GetDescriptor+0x2c>)
 8007148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714c:	08007169 	.word	0x08007169
 8007150:	08007181 	.word	0x08007181
 8007154:	080071c1 	.word	0x080071c1
 8007158:	08007397 	.word	0x08007397
 800715c:	08007397 	.word	0x08007397
 8007160:	08007337 	.word	0x08007337
 8007164:	08007363 	.word	0x08007363
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	7c12      	ldrb	r2, [r2, #16]
 8007174:	f107 0108 	add.w	r1, r7, #8
 8007178:	4610      	mov	r0, r2
 800717a:	4798      	blx	r3
 800717c:	60f8      	str	r0, [r7, #12]
      break;
 800717e:	e112      	b.n	80073a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	7c1b      	ldrb	r3, [r3, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10d      	bne.n	80071a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007190:	f107 0208 	add.w	r2, r7, #8
 8007194:	4610      	mov	r0, r2
 8007196:	4798      	blx	r3
 8007198:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	3301      	adds	r3, #1
 800719e:	2202      	movs	r2, #2
 80071a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80071a2:	e100      	b.n	80073a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ac:	f107 0208 	add.w	r2, r7, #8
 80071b0:	4610      	mov	r0, r2
 80071b2:	4798      	blx	r3
 80071b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3301      	adds	r3, #1
 80071ba:	2202      	movs	r2, #2
 80071bc:	701a      	strb	r2, [r3, #0]
      break;
 80071be:	e0f2      	b.n	80073a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	885b      	ldrh	r3, [r3, #2]
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b05      	cmp	r3, #5
 80071c8:	f200 80ac 	bhi.w	8007324 <USBD_GetDescriptor+0x204>
 80071cc:	a201      	add	r2, pc, #4	; (adr r2, 80071d4 <USBD_GetDescriptor+0xb4>)
 80071ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d2:	bf00      	nop
 80071d4:	080071ed 	.word	0x080071ed
 80071d8:	08007221 	.word	0x08007221
 80071dc:	08007255 	.word	0x08007255
 80071e0:	08007289 	.word	0x08007289
 80071e4:	080072bd 	.word	0x080072bd
 80071e8:	080072f1 	.word	0x080072f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00b      	beq.n	8007210 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	7c12      	ldrb	r2, [r2, #16]
 8007204:	f107 0108 	add.w	r1, r7, #8
 8007208:	4610      	mov	r0, r2
 800720a:	4798      	blx	r3
 800720c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800720e:	e091      	b.n	8007334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fa94 	bl	8007740 <USBD_CtlError>
            err++;
 8007218:	7afb      	ldrb	r3, [r7, #11]
 800721a:	3301      	adds	r3, #1
 800721c:	72fb      	strb	r3, [r7, #11]
          break;
 800721e:	e089      	b.n	8007334 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00b      	beq.n	8007244 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	7c12      	ldrb	r2, [r2, #16]
 8007238:	f107 0108 	add.w	r1, r7, #8
 800723c:	4610      	mov	r0, r2
 800723e:	4798      	blx	r3
 8007240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007242:	e077      	b.n	8007334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fa7a 	bl	8007740 <USBD_CtlError>
            err++;
 800724c:	7afb      	ldrb	r3, [r7, #11]
 800724e:	3301      	adds	r3, #1
 8007250:	72fb      	strb	r3, [r7, #11]
          break;
 8007252:	e06f      	b.n	8007334 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00b      	beq.n	8007278 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	7c12      	ldrb	r2, [r2, #16]
 800726c:	f107 0108 	add.w	r1, r7, #8
 8007270:	4610      	mov	r0, r2
 8007272:	4798      	blx	r3
 8007274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007276:	e05d      	b.n	8007334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fa60 	bl	8007740 <USBD_CtlError>
            err++;
 8007280:	7afb      	ldrb	r3, [r7, #11]
 8007282:	3301      	adds	r3, #1
 8007284:	72fb      	strb	r3, [r7, #11]
          break;
 8007286:	e055      	b.n	8007334 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00b      	beq.n	80072ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	7c12      	ldrb	r2, [r2, #16]
 80072a0:	f107 0108 	add.w	r1, r7, #8
 80072a4:	4610      	mov	r0, r2
 80072a6:	4798      	blx	r3
 80072a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072aa:	e043      	b.n	8007334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fa46 	bl	8007740 <USBD_CtlError>
            err++;
 80072b4:	7afb      	ldrb	r3, [r7, #11]
 80072b6:	3301      	adds	r3, #1
 80072b8:	72fb      	strb	r3, [r7, #11]
          break;
 80072ba:	e03b      	b.n	8007334 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00b      	beq.n	80072e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	7c12      	ldrb	r2, [r2, #16]
 80072d4:	f107 0108 	add.w	r1, r7, #8
 80072d8:	4610      	mov	r0, r2
 80072da:	4798      	blx	r3
 80072dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072de:	e029      	b.n	8007334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fa2c 	bl	8007740 <USBD_CtlError>
            err++;
 80072e8:	7afb      	ldrb	r3, [r7, #11]
 80072ea:	3301      	adds	r3, #1
 80072ec:	72fb      	strb	r3, [r7, #11]
          break;
 80072ee:	e021      	b.n	8007334 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00b      	beq.n	8007314 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	7c12      	ldrb	r2, [r2, #16]
 8007308:	f107 0108 	add.w	r1, r7, #8
 800730c:	4610      	mov	r0, r2
 800730e:	4798      	blx	r3
 8007310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007312:	e00f      	b.n	8007334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fa12 	bl	8007740 <USBD_CtlError>
            err++;
 800731c:	7afb      	ldrb	r3, [r7, #11]
 800731e:	3301      	adds	r3, #1
 8007320:	72fb      	strb	r3, [r7, #11]
          break;
 8007322:	e007      	b.n	8007334 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fa0a 	bl	8007740 <USBD_CtlError>
          err++;
 800732c:	7afb      	ldrb	r3, [r7, #11]
 800732e:	3301      	adds	r3, #1
 8007330:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007332:	e038      	b.n	80073a6 <USBD_GetDescriptor+0x286>
 8007334:	e037      	b.n	80073a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	7c1b      	ldrb	r3, [r3, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d109      	bne.n	8007352 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007346:	f107 0208 	add.w	r2, r7, #8
 800734a:	4610      	mov	r0, r2
 800734c:	4798      	blx	r3
 800734e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007350:	e029      	b.n	80073a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f9f3 	bl	8007740 <USBD_CtlError>
        err++;
 800735a:	7afb      	ldrb	r3, [r7, #11]
 800735c:	3301      	adds	r3, #1
 800735e:	72fb      	strb	r3, [r7, #11]
      break;
 8007360:	e021      	b.n	80073a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	7c1b      	ldrb	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10d      	bne.n	8007386 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007372:	f107 0208 	add.w	r2, r7, #8
 8007376:	4610      	mov	r0, r2
 8007378:	4798      	blx	r3
 800737a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3301      	adds	r3, #1
 8007380:	2207      	movs	r2, #7
 8007382:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007384:	e00f      	b.n	80073a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f9d9 	bl	8007740 <USBD_CtlError>
        err++;
 800738e:	7afb      	ldrb	r3, [r7, #11]
 8007390:	3301      	adds	r3, #1
 8007392:	72fb      	strb	r3, [r7, #11]
      break;
 8007394:	e007      	b.n	80073a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f9d1 	bl	8007740 <USBD_CtlError>
      err++;
 800739e:	7afb      	ldrb	r3, [r7, #11]
 80073a0:	3301      	adds	r3, #1
 80073a2:	72fb      	strb	r3, [r7, #11]
      break;
 80073a4:	bf00      	nop
  }

  if (err != 0U)
 80073a6:	7afb      	ldrb	r3, [r7, #11]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d11c      	bne.n	80073e6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80073ac:	893b      	ldrh	r3, [r7, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d011      	beq.n	80073d6 <USBD_GetDescriptor+0x2b6>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	88db      	ldrh	r3, [r3, #6]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00d      	beq.n	80073d6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	88da      	ldrh	r2, [r3, #6]
 80073be:	893b      	ldrh	r3, [r7, #8]
 80073c0:	4293      	cmp	r3, r2
 80073c2:	bf28      	it	cs
 80073c4:	4613      	movcs	r3, r2
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80073ca:	893b      	ldrh	r3, [r7, #8]
 80073cc:	461a      	mov	r2, r3
 80073ce:	68f9      	ldr	r1, [r7, #12]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fa1f 	bl	8007814 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	88db      	ldrh	r3, [r3, #6]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d104      	bne.n	80073e8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fa76 	bl	80078d0 <USBD_CtlSendStatus>
 80073e4:	e000      	b.n	80073e8 <USBD_GetDescriptor+0x2c8>
    return;
 80073e6:	bf00      	nop
    }
  }
}
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop

080073f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	889b      	ldrh	r3, [r3, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d130      	bne.n	8007464 <USBD_SetAddress+0x74>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	88db      	ldrh	r3, [r3, #6]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d12c      	bne.n	8007464 <USBD_SetAddress+0x74>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	885b      	ldrh	r3, [r3, #2]
 800740e:	2b7f      	cmp	r3, #127	; 0x7f
 8007410:	d828      	bhi.n	8007464 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	885b      	ldrh	r3, [r3, #2]
 8007416:	b2db      	uxtb	r3, r3
 8007418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800741c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007424:	2b03      	cmp	r3, #3
 8007426:	d104      	bne.n	8007432 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007428:	6839      	ldr	r1, [r7, #0]
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f988 	bl	8007740 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007430:	e01c      	b.n	800746c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	7bfa      	ldrb	r2, [r7, #15]
 8007436:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fe1e 	bl	8008080 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fa43 	bl	80078d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d004      	beq.n	800745a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007458:	e008      	b.n	800746c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007462:	e003      	b.n	800746c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f96a 	bl	8007740 <USBD_CtlError>
  }
}
 800746c:	bf00      	nop
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	885b      	ldrh	r3, [r3, #2]
 8007482:	b2da      	uxtb	r2, r3
 8007484:	4b41      	ldr	r3, [pc, #260]	; (800758c <USBD_SetConfig+0x118>)
 8007486:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007488:	4b40      	ldr	r3, [pc, #256]	; (800758c <USBD_SetConfig+0x118>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d904      	bls.n	800749a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f954 	bl	8007740 <USBD_CtlError>
 8007498:	e075      	b.n	8007586 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d002      	beq.n	80074aa <USBD_SetConfig+0x36>
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d023      	beq.n	80074f0 <USBD_SetConfig+0x7c>
 80074a8:	e062      	b.n	8007570 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80074aa:	4b38      	ldr	r3, [pc, #224]	; (800758c <USBD_SetConfig+0x118>)
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d01a      	beq.n	80074e8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80074b2:	4b36      	ldr	r3, [pc, #216]	; (800758c <USBD_SetConfig+0x118>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	461a      	mov	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2203      	movs	r2, #3
 80074c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80074c4:	4b31      	ldr	r3, [pc, #196]	; (800758c <USBD_SetConfig+0x118>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7ff f9f4 	bl	80068b8 <USBD_SetClassConfig>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d104      	bne.n	80074e0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f931 	bl	8007740 <USBD_CtlError>
            return;
 80074de:	e052      	b.n	8007586 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f9f5 	bl	80078d0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80074e6:	e04e      	b.n	8007586 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f9f1 	bl	80078d0 <USBD_CtlSendStatus>
        break;
 80074ee:	e04a      	b.n	8007586 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80074f0:	4b26      	ldr	r3, [pc, #152]	; (800758c <USBD_SetConfig+0x118>)
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d112      	bne.n	800751e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007500:	4b22      	ldr	r3, [pc, #136]	; (800758c <USBD_SetConfig+0x118>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	461a      	mov	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800750a:	4b20      	ldr	r3, [pc, #128]	; (800758c <USBD_SetConfig+0x118>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7ff f9f0 	bl	80068f6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f9da 	bl	80078d0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800751c:	e033      	b.n	8007586 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800751e:	4b1b      	ldr	r3, [pc, #108]	; (800758c <USBD_SetConfig+0x118>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	429a      	cmp	r2, r3
 800752a:	d01d      	beq.n	8007568 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	b2db      	uxtb	r3, r3
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff f9de 	bl	80068f6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800753a:	4b14      	ldr	r3, [pc, #80]	; (800758c <USBD_SetConfig+0x118>)
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007544:	4b11      	ldr	r3, [pc, #68]	; (800758c <USBD_SetConfig+0x118>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	4619      	mov	r1, r3
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff f9b4 	bl	80068b8 <USBD_SetClassConfig>
 8007550:	4603      	mov	r3, r0
 8007552:	2b02      	cmp	r3, #2
 8007554:	d104      	bne.n	8007560 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f8f1 	bl	8007740 <USBD_CtlError>
            return;
 800755e:	e012      	b.n	8007586 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f9b5 	bl	80078d0 <USBD_CtlSendStatus>
        break;
 8007566:	e00e      	b.n	8007586 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f9b1 	bl	80078d0 <USBD_CtlSendStatus>
        break;
 800756e:	e00a      	b.n	8007586 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f8e4 	bl	8007740 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007578:	4b04      	ldr	r3, [pc, #16]	; (800758c <USBD_SetConfig+0x118>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7ff f9b9 	bl	80068f6 <USBD_ClrClassConfig>
        break;
 8007584:	bf00      	nop
    }
  }
}
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	200001bd 	.word	0x200001bd

08007590 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	88db      	ldrh	r3, [r3, #6]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d004      	beq.n	80075ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f8cb 	bl	8007740 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80075aa:	e021      	b.n	80075f0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	db17      	blt.n	80075e6 <USBD_GetConfig+0x56>
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	dd02      	ble.n	80075c0 <USBD_GetConfig+0x30>
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d00b      	beq.n	80075d6 <USBD_GetConfig+0x46>
 80075be:	e012      	b.n	80075e6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	3308      	adds	r3, #8
 80075ca:	2201      	movs	r2, #1
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f920 	bl	8007814 <USBD_CtlSendData>
        break;
 80075d4:	e00c      	b.n	80075f0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	3304      	adds	r3, #4
 80075da:	2201      	movs	r2, #1
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f918 	bl	8007814 <USBD_CtlSendData>
        break;
 80075e4:	e004      	b.n	80075f0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f8a9 	bl	8007740 <USBD_CtlError>
        break;
 80075ee:	bf00      	nop
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007608:	3b01      	subs	r3, #1
 800760a:	2b02      	cmp	r3, #2
 800760c:	d81e      	bhi.n	800764c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	88db      	ldrh	r3, [r3, #6]
 8007612:	2b02      	cmp	r3, #2
 8007614:	d004      	beq.n	8007620 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007616:	6839      	ldr	r1, [r7, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f891 	bl	8007740 <USBD_CtlError>
        break;
 800761e:	e01a      	b.n	8007656 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800762c:	2b00      	cmp	r3, #0
 800762e:	d005      	beq.n	800763c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	f043 0202 	orr.w	r2, r3, #2
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	330c      	adds	r3, #12
 8007640:	2202      	movs	r2, #2
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f8e5 	bl	8007814 <USBD_CtlSendData>
      break;
 800764a:	e004      	b.n	8007656 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f876 	bl	8007740 <USBD_CtlError>
      break;
 8007654:	bf00      	nop
  }
}
 8007656:	bf00      	nop
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	885b      	ldrh	r3, [r3, #2]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d106      	bne.n	800767e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f929 	bl	80078d0 <USBD_CtlSendStatus>
  }
}
 800767e:	bf00      	nop
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007696:	3b01      	subs	r3, #1
 8007698:	2b02      	cmp	r3, #2
 800769a:	d80b      	bhi.n	80076b4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	885b      	ldrh	r3, [r3, #2]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d10c      	bne.n	80076be <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f90f 	bl	80078d0 <USBD_CtlSendStatus>
      }
      break;
 80076b2:	e004      	b.n	80076be <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f842 	bl	8007740 <USBD_CtlError>
      break;
 80076bc:	e000      	b.n	80076c0 <USBD_ClrFeature+0x3a>
      break;
 80076be:	bf00      	nop
  }
}
 80076c0:	bf00      	nop
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781a      	ldrb	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	785a      	ldrb	r2, [r3, #1]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	3302      	adds	r3, #2
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	3303      	adds	r3, #3
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	021b      	lsls	r3, r3, #8
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	4413      	add	r3, r2
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	3304      	adds	r3, #4
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	b29a      	uxth	r2, r3
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	3305      	adds	r3, #5
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	b29b      	uxth	r3, r3
 800770e:	021b      	lsls	r3, r3, #8
 8007710:	b29b      	uxth	r3, r3
 8007712:	4413      	add	r3, r2
 8007714:	b29a      	uxth	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	3306      	adds	r3, #6
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	b29a      	uxth	r2, r3
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	3307      	adds	r3, #7
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	b29b      	uxth	r3, r3
 800772a:	021b      	lsls	r3, r3, #8
 800772c:	b29b      	uxth	r3, r3
 800772e:	4413      	add	r3, r2
 8007730:	b29a      	uxth	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	80da      	strh	r2, [r3, #6]

}
 8007736:	bf00      	nop
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	bc80      	pop	{r7}
 800773e:	4770      	bx	lr

08007740 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800774a:	2180      	movs	r1, #128	; 0x80
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fc2d 	bl	8007fac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007752:	2100      	movs	r1, #0
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fc29 	bl	8007fac <USBD_LL_StallEP>
}
 800775a:	bf00      	nop
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b086      	sub	sp, #24
 8007766:	af00      	add	r7, sp, #0
 8007768:	60f8      	str	r0, [r7, #12]
 800776a:	60b9      	str	r1, [r7, #8]
 800776c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d032      	beq.n	80077de <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 f834 	bl	80077e6 <USBD_GetLen>
 800777e:	4603      	mov	r3, r0
 8007780:	3301      	adds	r3, #1
 8007782:	b29b      	uxth	r3, r3
 8007784:	005b      	lsls	r3, r3, #1
 8007786:	b29a      	uxth	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800778c:	7dfb      	ldrb	r3, [r7, #23]
 800778e:	1c5a      	adds	r2, r3, #1
 8007790:	75fa      	strb	r2, [r7, #23]
 8007792:	461a      	mov	r2, r3
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	4413      	add	r3, r2
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	7812      	ldrb	r2, [r2, #0]
 800779c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800779e:	7dfb      	ldrb	r3, [r7, #23]
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	75fa      	strb	r2, [r7, #23]
 80077a4:	461a      	mov	r2, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	4413      	add	r3, r2
 80077aa:	2203      	movs	r2, #3
 80077ac:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80077ae:	e012      	b.n	80077d6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	1c5a      	adds	r2, r3, #1
 80077b4:	60fa      	str	r2, [r7, #12]
 80077b6:	7dfa      	ldrb	r2, [r7, #23]
 80077b8:	1c51      	adds	r1, r2, #1
 80077ba:	75f9      	strb	r1, [r7, #23]
 80077bc:	4611      	mov	r1, r2
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	440a      	add	r2, r1
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	75fa      	strb	r2, [r7, #23]
 80077cc:	461a      	mov	r2, r3
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	4413      	add	r3, r2
 80077d2:	2200      	movs	r2, #0
 80077d4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e8      	bne.n	80077b0 <USBD_GetString+0x4e>
    }
  }
}
 80077de:	bf00      	nop
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b085      	sub	sp, #20
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80077f2:	e005      	b.n	8007800 <USBD_GetLen+0x1a>
  {
    len++;
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	3301      	adds	r3, #1
 80077f8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	3301      	adds	r3, #1
 80077fe:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1f5      	bne.n	80077f4 <USBD_GetLen+0xe>
  }

  return len;
 8007808:	7bfb      	ldrb	r3, [r7, #15]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	bc80      	pop	{r7}
 8007812:	4770      	bx	lr

08007814 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	4613      	mov	r3, r2
 8007820:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2202      	movs	r2, #2
 8007826:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800782a:	88fa      	ldrh	r2, [r7, #6]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007830:	88fa      	ldrh	r2, [r7, #6]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007836:	88fb      	ldrh	r3, [r7, #6]
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	2100      	movs	r1, #0
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 fc3e 	bl	80080be <USBD_LL_Transmit>

  return USBD_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	4613      	mov	r3, r2
 8007858:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800785a:	88fb      	ldrh	r3, [r7, #6]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	2100      	movs	r1, #0
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 fc2c 	bl	80080be <USBD_LL_Transmit>

  return USBD_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	4613      	mov	r3, r2
 800787c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2203      	movs	r2, #3
 8007882:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007886:	88fa      	ldrh	r2, [r7, #6]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800788e:	88fa      	ldrh	r2, [r7, #6]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007896:	88fb      	ldrh	r3, [r7, #6]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	2100      	movs	r1, #0
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 fc31 	bl	8008104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	4613      	mov	r3, r2
 80078b8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078ba:	88fb      	ldrh	r3, [r7, #6]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	2100      	movs	r1, #0
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 fc1f 	bl	8008104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2204      	movs	r2, #4
 80078dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078e0:	2300      	movs	r3, #0
 80078e2:	2200      	movs	r2, #0
 80078e4:	2100      	movs	r1, #0
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fbe9 	bl	80080be <USBD_LL_Transmit>

  return USBD_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b082      	sub	sp, #8
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2205      	movs	r2, #5
 8007902:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007906:	2300      	movs	r3, #0
 8007908:	2200      	movs	r2, #0
 800790a:	2100      	movs	r1, #0
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fbf9 	bl	8008104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007920:	2200      	movs	r2, #0
 8007922:	4912      	ldr	r1, [pc, #72]	; (800796c <MX_USB_DEVICE_Init+0x50>)
 8007924:	4812      	ldr	r0, [pc, #72]	; (8007970 <MX_USB_DEVICE_Init+0x54>)
 8007926:	f7fe ff6d 	bl	8006804 <USBD_Init>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007930:	f7f8 ffee 	bl	8000910 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007934:	490f      	ldr	r1, [pc, #60]	; (8007974 <MX_USB_DEVICE_Init+0x58>)
 8007936:	480e      	ldr	r0, [pc, #56]	; (8007970 <MX_USB_DEVICE_Init+0x54>)
 8007938:	f7fe ff8f 	bl	800685a <USBD_RegisterClass>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007942:	f7f8 ffe5 	bl	8000910 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007946:	490c      	ldr	r1, [pc, #48]	; (8007978 <MX_USB_DEVICE_Init+0x5c>)
 8007948:	4809      	ldr	r0, [pc, #36]	; (8007970 <MX_USB_DEVICE_Init+0x54>)
 800794a:	f7fe feef 	bl	800672c <USBD_CDC_RegisterInterface>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007954:	f7f8 ffdc 	bl	8000910 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007958:	4805      	ldr	r0, [pc, #20]	; (8007970 <MX_USB_DEVICE_Init+0x54>)
 800795a:	f7fe ff97 	bl	800688c <USBD_Start>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007964:	f7f8 ffd4 	bl	8000910 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007968:	bf00      	nop
 800796a:	bd80      	pop	{r7, pc}
 800796c:	20000140 	.word	0x20000140
 8007970:	20000504 	.word	0x20000504
 8007974:	2000002c 	.word	0x2000002c
 8007978:	20000130 	.word	0x20000130

0800797c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007980:	2200      	movs	r2, #0
 8007982:	4905      	ldr	r1, [pc, #20]	; (8007998 <CDC_Init_FS+0x1c>)
 8007984:	4805      	ldr	r0, [pc, #20]	; (800799c <CDC_Init_FS+0x20>)
 8007986:	f7fe fee7 	bl	8006758 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800798a:	4905      	ldr	r1, [pc, #20]	; (80079a0 <CDC_Init_FS+0x24>)
 800798c:	4803      	ldr	r0, [pc, #12]	; (800799c <CDC_Init_FS+0x20>)
 800798e:	f7fe fefc 	bl	800678a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007992:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007994:	4618      	mov	r0, r3
 8007996:	bd80      	pop	{r7, pc}
 8007998:	20000bb0 	.word	0x20000bb0
 800799c:	20000504 	.word	0x20000504
 80079a0:	200007c8 	.word	0x200007c8

080079a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80079a4:	b480      	push	{r7}
 80079a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bc80      	pop	{r7}
 80079b0:	4770      	bx	lr
	...

080079b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	4603      	mov	r3, r0
 80079bc:	6039      	str	r1, [r7, #0]
 80079be:	71fb      	strb	r3, [r7, #7]
 80079c0:	4613      	mov	r3, r2
 80079c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80079c4:	79fb      	ldrb	r3, [r7, #7]
 80079c6:	2b23      	cmp	r3, #35	; 0x23
 80079c8:	d84a      	bhi.n	8007a60 <CDC_Control_FS+0xac>
 80079ca:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <CDC_Control_FS+0x1c>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	08007a61 	.word	0x08007a61
 80079d4:	08007a61 	.word	0x08007a61
 80079d8:	08007a61 	.word	0x08007a61
 80079dc:	08007a61 	.word	0x08007a61
 80079e0:	08007a61 	.word	0x08007a61
 80079e4:	08007a61 	.word	0x08007a61
 80079e8:	08007a61 	.word	0x08007a61
 80079ec:	08007a61 	.word	0x08007a61
 80079f0:	08007a61 	.word	0x08007a61
 80079f4:	08007a61 	.word	0x08007a61
 80079f8:	08007a61 	.word	0x08007a61
 80079fc:	08007a61 	.word	0x08007a61
 8007a00:	08007a61 	.word	0x08007a61
 8007a04:	08007a61 	.word	0x08007a61
 8007a08:	08007a61 	.word	0x08007a61
 8007a0c:	08007a61 	.word	0x08007a61
 8007a10:	08007a61 	.word	0x08007a61
 8007a14:	08007a61 	.word	0x08007a61
 8007a18:	08007a61 	.word	0x08007a61
 8007a1c:	08007a61 	.word	0x08007a61
 8007a20:	08007a61 	.word	0x08007a61
 8007a24:	08007a61 	.word	0x08007a61
 8007a28:	08007a61 	.word	0x08007a61
 8007a2c:	08007a61 	.word	0x08007a61
 8007a30:	08007a61 	.word	0x08007a61
 8007a34:	08007a61 	.word	0x08007a61
 8007a38:	08007a61 	.word	0x08007a61
 8007a3c:	08007a61 	.word	0x08007a61
 8007a40:	08007a61 	.word	0x08007a61
 8007a44:	08007a61 	.word	0x08007a61
 8007a48:	08007a61 	.word	0x08007a61
 8007a4c:	08007a61 	.word	0x08007a61
 8007a50:	08007a61 	.word	0x08007a61
 8007a54:	08007a61 	.word	0x08007a61
 8007a58:	08007a61 	.word	0x08007a61
 8007a5c:	08007a61 	.word	0x08007a61
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a60:	bf00      	nop
  }

  return (USBD_OK);
 8007a62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bc80      	pop	{r7}
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop

08007a70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a7a:	6879      	ldr	r1, [r7, #4]
 8007a7c:	4805      	ldr	r0, [pc, #20]	; (8007a94 <CDC_Receive_FS+0x24>)
 8007a7e:	f7fe fe84 	bl	800678a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a82:	4804      	ldr	r0, [pc, #16]	; (8007a94 <CDC_Receive_FS+0x24>)
 8007a84:	f7fe fe94 	bl	80067b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	20000504 	.word	0x20000504

08007a98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	6039      	str	r1, [r7, #0]
 8007aa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2212      	movs	r2, #18
 8007aa8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007aaa:	4b03      	ldr	r3, [pc, #12]	; (8007ab8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bc80      	pop	{r7}
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	2000015c 	.word	0x2000015c

08007abc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	6039      	str	r1, [r7, #0]
 8007ac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	2204      	movs	r2, #4
 8007acc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ace:	4b03      	ldr	r3, [pc, #12]	; (8007adc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bc80      	pop	{r7}
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	20000170 	.word	0x20000170

08007ae0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	6039      	str	r1, [r7, #0]
 8007aea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007aec:	79fb      	ldrb	r3, [r7, #7]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d105      	bne.n	8007afe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	4907      	ldr	r1, [pc, #28]	; (8007b14 <USBD_FS_ProductStrDescriptor+0x34>)
 8007af6:	4808      	ldr	r0, [pc, #32]	; (8007b18 <USBD_FS_ProductStrDescriptor+0x38>)
 8007af8:	f7ff fe33 	bl	8007762 <USBD_GetString>
 8007afc:	e004      	b.n	8007b08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	4904      	ldr	r1, [pc, #16]	; (8007b14 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b02:	4805      	ldr	r0, [pc, #20]	; (8007b18 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b04:	f7ff fe2d 	bl	8007762 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b08:	4b02      	ldr	r3, [pc, #8]	; (8007b14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20000f98 	.word	0x20000f98
 8007b18:	0800828c 	.word	0x0800828c

08007b1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	4603      	mov	r3, r0
 8007b24:	6039      	str	r1, [r7, #0]
 8007b26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	4904      	ldr	r1, [pc, #16]	; (8007b3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b2c:	4804      	ldr	r0, [pc, #16]	; (8007b40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b2e:	f7ff fe18 	bl	8007762 <USBD_GetString>
  return USBD_StrDesc;
 8007b32:	4b02      	ldr	r3, [pc, #8]	; (8007b3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	20000f98 	.word	0x20000f98
 8007b40:	080082a4 	.word	0x080082a4

08007b44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	6039      	str	r1, [r7, #0]
 8007b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	221a      	movs	r2, #26
 8007b54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b56:	f000 f843 	bl	8007be0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b5a:	4b02      	ldr	r3, [pc, #8]	; (8007b64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	20000174 	.word	0x20000174

08007b68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	6039      	str	r1, [r7, #0]
 8007b72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b74:	79fb      	ldrb	r3, [r7, #7]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d105      	bne.n	8007b86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	4907      	ldr	r1, [pc, #28]	; (8007b9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b7e:	4808      	ldr	r0, [pc, #32]	; (8007ba0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b80:	f7ff fdef 	bl	8007762 <USBD_GetString>
 8007b84:	e004      	b.n	8007b90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	4904      	ldr	r1, [pc, #16]	; (8007b9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b8a:	4805      	ldr	r0, [pc, #20]	; (8007ba0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b8c:	f7ff fde9 	bl	8007762 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b90:	4b02      	ldr	r3, [pc, #8]	; (8007b9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	20000f98 	.word	0x20000f98
 8007ba0:	080082b8 	.word	0x080082b8

08007ba4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	4603      	mov	r3, r0
 8007bac:	6039      	str	r1, [r7, #0]
 8007bae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d105      	bne.n	8007bc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	4907      	ldr	r1, [pc, #28]	; (8007bd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bba:	4808      	ldr	r0, [pc, #32]	; (8007bdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bbc:	f7ff fdd1 	bl	8007762 <USBD_GetString>
 8007bc0:	e004      	b.n	8007bcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	4904      	ldr	r1, [pc, #16]	; (8007bd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bc6:	4805      	ldr	r0, [pc, #20]	; (8007bdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bc8:	f7ff fdcb 	bl	8007762 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bcc:	4b02      	ldr	r3, [pc, #8]	; (8007bd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20000f98 	.word	0x20000f98
 8007bdc:	080082c4 	.word	0x080082c4

08007be0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007be6:	4b0f      	ldr	r3, [pc, #60]	; (8007c24 <Get_SerialNum+0x44>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bec:	4b0e      	ldr	r3, [pc, #56]	; (8007c28 <Get_SerialNum+0x48>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007bf2:	4b0e      	ldr	r3, [pc, #56]	; (8007c2c <Get_SerialNum+0x4c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d009      	beq.n	8007c1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c06:	2208      	movs	r2, #8
 8007c08:	4909      	ldr	r1, [pc, #36]	; (8007c30 <Get_SerialNum+0x50>)
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 f814 	bl	8007c38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c10:	2204      	movs	r2, #4
 8007c12:	4908      	ldr	r1, [pc, #32]	; (8007c34 <Get_SerialNum+0x54>)
 8007c14:	68b8      	ldr	r0, [r7, #8]
 8007c16:	f000 f80f 	bl	8007c38 <IntToUnicode>
  }
}
 8007c1a:	bf00      	nop
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	1ffff7e8 	.word	0x1ffff7e8
 8007c28:	1ffff7ec 	.word	0x1ffff7ec
 8007c2c:	1ffff7f0 	.word	0x1ffff7f0
 8007c30:	20000176 	.word	0x20000176
 8007c34:	20000186 	.word	0x20000186

08007c38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4613      	mov	r3, r2
 8007c44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c46:	2300      	movs	r3, #0
 8007c48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	75fb      	strb	r3, [r7, #23]
 8007c4e:	e027      	b.n	8007ca0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	0f1b      	lsrs	r3, r3, #28
 8007c54:	2b09      	cmp	r3, #9
 8007c56:	d80b      	bhi.n	8007c70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	0f1b      	lsrs	r3, r3, #28
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	7dfb      	ldrb	r3, [r7, #23]
 8007c60:	005b      	lsls	r3, r3, #1
 8007c62:	4619      	mov	r1, r3
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	440b      	add	r3, r1
 8007c68:	3230      	adds	r2, #48	; 0x30
 8007c6a:	b2d2      	uxtb	r2, r2
 8007c6c:	701a      	strb	r2, [r3, #0]
 8007c6e:	e00a      	b.n	8007c86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	0f1b      	lsrs	r3, r3, #28
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	440b      	add	r3, r1
 8007c80:	3237      	adds	r2, #55	; 0x37
 8007c82:	b2d2      	uxtb	r2, r2
 8007c84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	011b      	lsls	r3, r3, #4
 8007c8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	005b      	lsls	r3, r3, #1
 8007c90:	3301      	adds	r3, #1
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	4413      	add	r3, r2
 8007c96:	2200      	movs	r2, #0
 8007c98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c9a:	7dfb      	ldrb	r3, [r7, #23]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	75fb      	strb	r3, [r7, #23]
 8007ca0:	7dfa      	ldrb	r2, [r7, #23]
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d3d3      	bcc.n	8007c50 <IntToUnicode+0x18>
  }
}
 8007ca8:	bf00      	nop
 8007caa:	371c      	adds	r7, #28
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bc80      	pop	{r7}
 8007cb0:	4770      	bx	lr
	...

08007cb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a0d      	ldr	r2, [pc, #52]	; (8007cf8 <HAL_PCD_MspInit+0x44>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d113      	bne.n	8007cee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007cc6:	4b0d      	ldr	r3, [pc, #52]	; (8007cfc <HAL_PCD_MspInit+0x48>)
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	4a0c      	ldr	r2, [pc, #48]	; (8007cfc <HAL_PCD_MspInit+0x48>)
 8007ccc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007cd0:	61d3      	str	r3, [r2, #28]
 8007cd2:	4b0a      	ldr	r3, [pc, #40]	; (8007cfc <HAL_PCD_MspInit+0x48>)
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	2014      	movs	r0, #20
 8007ce4:	f7f9 fb71 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007ce8:	2014      	movs	r0, #20
 8007cea:	f7f9 fb8a 	bl	8001402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007cee:	bf00      	nop
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	40005c00 	.word	0x40005c00
 8007cfc:	40021000 	.word	0x40021000

08007d00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007d14:	4619      	mov	r1, r3
 8007d16:	4610      	mov	r0, r2
 8007d18:	f7fe fe00 	bl	800691c <USBD_LL_SetupStage>
}
 8007d1c:	bf00      	nop
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007d36:	78fa      	ldrb	r2, [r7, #3]
 8007d38:	6879      	ldr	r1, [r7, #4]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4413      	add	r3, r2
 8007d40:	00db      	lsls	r3, r3, #3
 8007d42:	440b      	add	r3, r1
 8007d44:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	78fb      	ldrb	r3, [r7, #3]
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	f7fe fe30 	bl	80069b2 <USBD_LL_DataOutStage>
}
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b082      	sub	sp, #8
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	460b      	mov	r3, r1
 8007d64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007d6c:	78fa      	ldrb	r2, [r7, #3]
 8007d6e:	6879      	ldr	r1, [r7, #4]
 8007d70:	4613      	mov	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	00db      	lsls	r3, r3, #3
 8007d78:	440b      	add	r3, r1
 8007d7a:	333c      	adds	r3, #60	; 0x3c
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	78fb      	ldrb	r3, [r7, #3]
 8007d80:	4619      	mov	r1, r3
 8007d82:	f7fe fe87 	bl	8006a94 <USBD_LL_DataInStage>
}
 8007d86:	bf00      	nop
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fe ff97 	bl	8006cd0 <USBD_LL_SOF>
}
 8007da2:	bf00      	nop
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007db2:	2301      	movs	r3, #1
 8007db4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d001      	beq.n	8007dc2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007dbe:	f7f8 fda7 	bl	8000910 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007dc8:	7bfa      	ldrb	r2, [r7, #15]
 8007dca:	4611      	mov	r1, r2
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fe ff47 	bl	8006c60 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fe ff00 	bl	8006bde <USBD_LL_Reset>
}
 8007dde:	bf00      	nop
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fe ff41 	bl	8006c7e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d005      	beq.n	8007e10 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e04:	4b04      	ldr	r3, [pc, #16]	; (8007e18 <HAL_PCD_SuspendCallback+0x30>)
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	4a03      	ldr	r2, [pc, #12]	; (8007e18 <HAL_PCD_SuspendCallback+0x30>)
 8007e0a:	f043 0306 	orr.w	r3, r3, #6
 8007e0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e10:	bf00      	nop
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	e000ed00 	.word	0xe000ed00

08007e1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fe ff3b 	bl	8006ca6 <USBD_LL_Resume>
}
 8007e30:	bf00      	nop
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007e40:	4a28      	ldr	r2, [pc, #160]	; (8007ee4 <USBD_LL_Init+0xac>)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a26      	ldr	r2, [pc, #152]	; (8007ee4 <USBD_LL_Init+0xac>)
 8007e4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007e50:	4b24      	ldr	r3, [pc, #144]	; (8007ee4 <USBD_LL_Init+0xac>)
 8007e52:	4a25      	ldr	r2, [pc, #148]	; (8007ee8 <USBD_LL_Init+0xb0>)
 8007e54:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007e56:	4b23      	ldr	r3, [pc, #140]	; (8007ee4 <USBD_LL_Init+0xac>)
 8007e58:	2208      	movs	r2, #8
 8007e5a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007e5c:	4b21      	ldr	r3, [pc, #132]	; (8007ee4 <USBD_LL_Init+0xac>)
 8007e5e:	2202      	movs	r2, #2
 8007e60:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007e62:	4b20      	ldr	r3, [pc, #128]	; (8007ee4 <USBD_LL_Init+0xac>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007e68:	4b1e      	ldr	r3, [pc, #120]	; (8007ee4 <USBD_LL_Init+0xac>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007e6e:	4b1d      	ldr	r3, [pc, #116]	; (8007ee4 <USBD_LL_Init+0xac>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007e74:	481b      	ldr	r0, [pc, #108]	; (8007ee4 <USBD_LL_Init+0xac>)
 8007e76:	f7f9 fd89 	bl	800198c <HAL_PCD_Init>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007e80:	f7f8 fd46 	bl	8000910 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e8a:	2318      	movs	r3, #24
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2100      	movs	r1, #0
 8007e90:	f7fb f8bd 	bl	800300e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e9a:	2358      	movs	r3, #88	; 0x58
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2180      	movs	r1, #128	; 0x80
 8007ea0:	f7fb f8b5 	bl	800300e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eaa:	23c0      	movs	r3, #192	; 0xc0
 8007eac:	2200      	movs	r2, #0
 8007eae:	2181      	movs	r1, #129	; 0x81
 8007eb0:	f7fb f8ad 	bl	800300e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eba:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	f7fb f8a4 	bl	800300e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	2182      	movs	r1, #130	; 0x82
 8007ed4:	f7fb f89b 	bl	800300e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20001198 	.word	0x20001198
 8007ee8:	40005c00 	.word	0x40005c00

08007eec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7f9 fe4d 	bl	8001ba2 <HAL_PCD_Start>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f94e 	bl	80081b0 <USBD_Get_USB_Status>
 8007f14:	4603      	mov	r3, r0
 8007f16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	4608      	mov	r0, r1
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	461a      	mov	r2, r3
 8007f30:	4603      	mov	r3, r0
 8007f32:	70fb      	strb	r3, [r7, #3]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70bb      	strb	r3, [r7, #2]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f4a:	78bb      	ldrb	r3, [r7, #2]
 8007f4c:	883a      	ldrh	r2, [r7, #0]
 8007f4e:	78f9      	ldrb	r1, [r7, #3]
 8007f50:	f7f9 ffc7 	bl	8001ee2 <HAL_PCD_EP_Open>
 8007f54:	4603      	mov	r3, r0
 8007f56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 f928 	bl	80081b0 <USBD_Get_USB_Status>
 8007f60:	4603      	mov	r3, r0
 8007f62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	460b      	mov	r3, r1
 8007f78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f88:	78fa      	ldrb	r2, [r7, #3]
 8007f8a:	4611      	mov	r1, r2
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fa f80e 	bl	8001fae <HAL_PCD_EP_Close>
 8007f92:	4603      	mov	r3, r0
 8007f94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 f909 	bl	80081b0 <USBD_Get_USB_Status>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fc6:	78fa      	ldrb	r2, [r7, #3]
 8007fc8:	4611      	mov	r1, r2
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fa f8ce 	bl	800216c <HAL_PCD_EP_SetStall>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 f8ea 	bl	80081b0 <USBD_Get_USB_Status>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008004:	78fa      	ldrb	r2, [r7, #3]
 8008006:	4611      	mov	r1, r2
 8008008:	4618      	mov	r0, r3
 800800a:	f7fa f90f 	bl	800222c <HAL_PCD_EP_ClrStall>
 800800e:	4603      	mov	r3, r0
 8008010:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008012:	7bfb      	ldrb	r3, [r7, #15]
 8008014:	4618      	mov	r0, r3
 8008016:	f000 f8cb 	bl	80081b0 <USBD_Get_USB_Status>
 800801a:	4603      	mov	r3, r0
 800801c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800801e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800803a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800803c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008040:	2b00      	cmp	r3, #0
 8008042:	da0c      	bge.n	800805e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800804a:	68f9      	ldr	r1, [r7, #12]
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	4613      	mov	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	00db      	lsls	r3, r3, #3
 8008056:	440b      	add	r3, r1
 8008058:	3302      	adds	r3, #2
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	e00b      	b.n	8008076 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800805e:	78fb      	ldrb	r3, [r7, #3]
 8008060:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008064:	68f9      	ldr	r1, [r7, #12]
 8008066:	4613      	mov	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	00db      	lsls	r3, r3, #3
 800806e:	440b      	add	r3, r1
 8008070:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008074:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008076:	4618      	mov	r0, r3
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	bc80      	pop	{r7}
 800807e:	4770      	bx	lr

08008080 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008090:	2300      	movs	r3, #0
 8008092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800809a:	78fa      	ldrb	r2, [r7, #3]
 800809c:	4611      	mov	r1, r2
 800809e:	4618      	mov	r0, r3
 80080a0:	f7f9 fefa 	bl	8001e98 <HAL_PCD_SetAddress>
 80080a4:	4603      	mov	r3, r0
 80080a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 f880 	bl	80081b0 <USBD_Get_USB_Status>
 80080b0:	4603      	mov	r3, r0
 80080b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b086      	sub	sp, #24
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	60f8      	str	r0, [r7, #12]
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	461a      	mov	r2, r3
 80080ca:	460b      	mov	r3, r1
 80080cc:	72fb      	strb	r3, [r7, #11]
 80080ce:	4613      	mov	r3, r2
 80080d0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080e0:	893b      	ldrh	r3, [r7, #8]
 80080e2:	7af9      	ldrb	r1, [r7, #11]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	f7f9 fffe 	bl	80020e6 <HAL_PCD_EP_Transmit>
 80080ea:	4603      	mov	r3, r0
 80080ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f000 f85d 	bl	80081b0 <USBD_Get_USB_Status>
 80080f6:	4603      	mov	r3, r0
 80080f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3718      	adds	r7, #24
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	607a      	str	r2, [r7, #4]
 800810e:	461a      	mov	r2, r3
 8008110:	460b      	mov	r3, r1
 8008112:	72fb      	strb	r3, [r7, #11]
 8008114:	4613      	mov	r3, r2
 8008116:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008126:	893b      	ldrh	r3, [r7, #8]
 8008128:	7af9      	ldrb	r1, [r7, #11]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	f7f9 ff87 	bl	800203e <HAL_PCD_EP_Receive>
 8008130:	4603      	mov	r3, r0
 8008132:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008134:	7dfb      	ldrb	r3, [r7, #23]
 8008136:	4618      	mov	r0, r3
 8008138:	f000 f83a 	bl	80081b0 <USBD_Get_USB_Status>
 800813c:	4603      	mov	r3, r0
 800813e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008140:	7dbb      	ldrb	r3, [r7, #22]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3718      	adds	r7, #24
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b082      	sub	sp, #8
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800815c:	78fa      	ldrb	r2, [r7, #3]
 800815e:	4611      	mov	r1, r2
 8008160:	4618      	mov	r0, r3
 8008162:	f7f9 ffa9 	bl	80020b8 <HAL_PCD_EP_GetRxCount>
 8008166:	4603      	mov	r3, r0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008178:	4b02      	ldr	r3, [pc, #8]	; (8008184 <USBD_static_malloc+0x14>)
}
 800817a:	4618      	mov	r0, r3
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	bc80      	pop	{r7}
 8008182:	4770      	bx	lr
 8008184:	200001c0 	.word	0x200001c0

08008188 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]

}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	bc80      	pop	{r7}
 8008198:	4770      	bx	lr

0800819a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800819a:	b480      	push	{r7}
 800819c:	b083      	sub	sp, #12
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	460b      	mov	r3, r1
 80081a4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80081a6:	bf00      	nop
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bc80      	pop	{r7}
 80081ae:	4770      	bx	lr

080081b0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	4603      	mov	r3, r0
 80081b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081be:	79fb      	ldrb	r3, [r7, #7]
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d817      	bhi.n	80081f4 <USBD_Get_USB_Status+0x44>
 80081c4:	a201      	add	r2, pc, #4	; (adr r2, 80081cc <USBD_Get_USB_Status+0x1c>)
 80081c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ca:	bf00      	nop
 80081cc:	080081dd 	.word	0x080081dd
 80081d0:	080081e3 	.word	0x080081e3
 80081d4:	080081e9 	.word	0x080081e9
 80081d8:	080081ef 	.word	0x080081ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	73fb      	strb	r3, [r7, #15]
    break;
 80081e0:	e00b      	b.n	80081fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081e2:	2302      	movs	r3, #2
 80081e4:	73fb      	strb	r3, [r7, #15]
    break;
 80081e6:	e008      	b.n	80081fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081e8:	2301      	movs	r3, #1
 80081ea:	73fb      	strb	r3, [r7, #15]
    break;
 80081ec:	e005      	b.n	80081fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081ee:	2302      	movs	r3, #2
 80081f0:	73fb      	strb	r3, [r7, #15]
    break;
 80081f2:	e002      	b.n	80081fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081f4:	2302      	movs	r3, #2
 80081f6:	73fb      	strb	r3, [r7, #15]
    break;
 80081f8:	bf00      	nop
  }
  return usb_status;
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	bc80      	pop	{r7}
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop

08008208 <__libc_init_array>:
 8008208:	b570      	push	{r4, r5, r6, lr}
 800820a:	2500      	movs	r5, #0
 800820c:	4e0c      	ldr	r6, [pc, #48]	; (8008240 <__libc_init_array+0x38>)
 800820e:	4c0d      	ldr	r4, [pc, #52]	; (8008244 <__libc_init_array+0x3c>)
 8008210:	1ba4      	subs	r4, r4, r6
 8008212:	10a4      	asrs	r4, r4, #2
 8008214:	42a5      	cmp	r5, r4
 8008216:	d109      	bne.n	800822c <__libc_init_array+0x24>
 8008218:	f000 f822 	bl	8008260 <_init>
 800821c:	2500      	movs	r5, #0
 800821e:	4e0a      	ldr	r6, [pc, #40]	; (8008248 <__libc_init_array+0x40>)
 8008220:	4c0a      	ldr	r4, [pc, #40]	; (800824c <__libc_init_array+0x44>)
 8008222:	1ba4      	subs	r4, r4, r6
 8008224:	10a4      	asrs	r4, r4, #2
 8008226:	42a5      	cmp	r5, r4
 8008228:	d105      	bne.n	8008236 <__libc_init_array+0x2e>
 800822a:	bd70      	pop	{r4, r5, r6, pc}
 800822c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008230:	4798      	blx	r3
 8008232:	3501      	adds	r5, #1
 8008234:	e7ee      	b.n	8008214 <__libc_init_array+0xc>
 8008236:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800823a:	4798      	blx	r3
 800823c:	3501      	adds	r5, #1
 800823e:	e7f2      	b.n	8008226 <__libc_init_array+0x1e>
 8008240:	080082ec 	.word	0x080082ec
 8008244:	080082ec 	.word	0x080082ec
 8008248:	080082ec 	.word	0x080082ec
 800824c:	080082f0 	.word	0x080082f0

08008250 <memset>:
 8008250:	4603      	mov	r3, r0
 8008252:	4402      	add	r2, r0
 8008254:	4293      	cmp	r3, r2
 8008256:	d100      	bne.n	800825a <memset+0xa>
 8008258:	4770      	bx	lr
 800825a:	f803 1b01 	strb.w	r1, [r3], #1
 800825e:	e7f9      	b.n	8008254 <memset+0x4>

08008260 <_init>:
 8008260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008262:	bf00      	nop
 8008264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008266:	bc08      	pop	{r3}
 8008268:	469e      	mov	lr, r3
 800826a:	4770      	bx	lr

0800826c <_fini>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	bf00      	nop
 8008270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008272:	bc08      	pop	{r3}
 8008274:	469e      	mov	lr, r3
 8008276:	4770      	bx	lr
