
STM32 Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800ac74  0800ac74  0001ac74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acf0  0800acf0  00020194  2**0
                  CONTENTS
  4 .ARM          00000000  0800acf0  0800acf0  00020194  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800acf0  0800acf0  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acf0  0800acf0  0001acf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acf4  0800acf4  0001acf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0800acf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001428  20000194  0800ae8c  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015bc  0800ae8c  000215bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7da  00000000  00000000  000201bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bba  00000000  00000000  0003c997  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001568  00000000  00000000  00040558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013b8  00000000  00000000  00041ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c0b8  00000000  00000000  00042e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000159f0  00000000  00000000  0005ef30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094cde  00000000  00000000  00074920  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001095fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005854  00000000  00000000  0010967c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000194 	.word	0x20000194
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ac5c 	.word	0x0800ac5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000198 	.word	0x20000198
 8000148:	0800ac5c 	.word	0x0800ac5c

0800014c <DWT_Delay_Init>:

#include "DWT_Delay.h"

/* DWT based delay */
uint32_t DWT_Delay_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000150:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800015a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800015c:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <DWT_Delay_Init+0x58>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	4a10      	ldr	r2, [pc, #64]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000166:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000168:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0e      	ldr	r2, [pc, #56]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016e:	f023 0301 	bic.w	r3, r3, #1
 8000172:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a0b      	ldr	r2, [pc, #44]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000186:	bf00      	nop
    __ASM volatile ("NOP");
 8000188:	bf00      	nop
    __ASM volatile ("NOP");
 800018a:	bf00      	nop
    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000194:	2300      	movs	r3, #0
 8000196:	e000      	b.n	800019a <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000198:	2301      	movs	r3, #1
    }
}
 800019a:	4618      	mov	r0, r3
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	e000edf0 	.word	0xe000edf0
 80001a8:	e0001000 	.word	0xe0001000

080001ac <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80001b4:	4b0e      	ldr	r3, [pc, #56]	; (80001f0 <DWT_Delay_us+0x44>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80001ba:	f006 f835 	bl	8006228 <HAL_RCC_GetHCLKFreq>
 80001be:	4602      	mov	r2, r0
 80001c0:	4b0c      	ldr	r3, [pc, #48]	; (80001f4 <DWT_Delay_us+0x48>)
 80001c2:	fba3 2302 	umull	r2, r3, r3, r2
 80001c6:	0c9b      	lsrs	r3, r3, #18
 80001c8:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	68ba      	ldr	r2, [r7, #8]
 80001ce:	fb02 f303 	mul.w	r3, r2, r3
 80001d2:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80001d4:	bf00      	nop
 80001d6:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <DWT_Delay_us+0x44>)
 80001d8:	685a      	ldr	r2, [r3, #4]
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	1ad2      	subs	r2, r2, r3
 80001de:	6879      	ldr	r1, [r7, #4]
 80001e0:	68bb      	ldr	r3, [r7, #8]
 80001e2:	1acb      	subs	r3, r1, r3
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d3f6      	bcc.n	80001d6 <DWT_Delay_us+0x2a>
}
 80001e8:	bf00      	nop
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	e0001000 	.word	0xe0001000
 80001f4:	431bde83 	.word	0x431bde83

080001f8 <DWT_Delay_ms>:

void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <DWT_Delay_ms+0x40>)
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8000206:	f006 f80f 	bl	8006228 <HAL_RCC_GetHCLKFreq>
 800020a:	4602      	mov	r2, r0
 800020c:	4b0b      	ldr	r3, [pc, #44]	; (800023c <DWT_Delay_ms+0x44>)
 800020e:	fba3 2302 	umull	r2, r3, r3, r2
 8000212:	099b      	lsrs	r3, r3, #6
 8000214:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	68ba      	ldr	r2, [r7, #8]
 800021a:	fb02 f303 	mul.w	r3, r2, r3
 800021e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8000220:	bf00      	nop
 8000222:	4b05      	ldr	r3, [pc, #20]	; (8000238 <DWT_Delay_ms+0x40>)
 8000224:	685a      	ldr	r2, [r3, #4]
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	1ad2      	subs	r2, r2, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	429a      	cmp	r2, r3
 800022e:	d3f8      	bcc.n	8000222 <DWT_Delay_ms+0x2a>
}
 8000230:	bf00      	nop
 8000232:	3710      	adds	r7, #16
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	e0001000 	.word	0xe0001000
 800023c:	10624dd3 	.word	0x10624dd3

08000240 <debugLCD>:
volatile uint8_t cycleEN = 0; //does the enable pin need to be cycled in I2C2 BTF?
volatile uint8_t currentLCDByte = 0; //which byte are we at (out of 9)


/* MCP23017 Defines */
void debugLCD(){
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	GPIOB->BRR = 1<<1;
 8000244:	4b04      	ldr	r3, [pc, #16]	; (8000258 <debugLCD+0x18>)
 8000246:	2202      	movs	r2, #2
 8000248:	615a      	str	r2, [r3, #20]
	GPIOB->BSRR = 1<<1;
 800024a:	4b03      	ldr	r3, [pc, #12]	; (8000258 <debugLCD+0x18>)
 800024c:	2202      	movs	r2, #2
 800024e:	611a      	str	r2, [r3, #16]
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	40010c00 	.word	0x40010c00

0800025c <MCP23017SetPin>:
void MCP23017SetPin(uint8_t pin, bank b, uint8_t addr){
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
 8000266:	460b      	mov	r3, r1
 8000268:	71bb      	strb	r3, [r7, #6]
 800026a:	4613      	mov	r3, r2
 800026c:	717b      	strb	r3, [r7, #5]

	while(blocked); //wait for clearance
 800026e:	bf00      	nop
 8000270:	4b3f      	ldr	r3, [pc, #252]	; (8000370 <MCP23017SetPin+0x114>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	b2db      	uxtb	r3, r3
 8000276:	2b00      	cmp	r3, #0
 8000278:	d1fa      	bne.n	8000270 <MCP23017SetPin+0x14>
	//GPIOA->BSRR = (1<<7);

	currentIOState[b] |= (1<<pin);
 800027a:	79bb      	ldrb	r3, [r7, #6]
 800027c:	4a3d      	ldr	r2, [pc, #244]	; (8000374 <MCP23017SetPin+0x118>)
 800027e:	5cd3      	ldrb	r3, [r2, r3]
 8000280:	b25a      	sxtb	r2, r3
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	2101      	movs	r1, #1
 8000286:	fa01 f303 	lsl.w	r3, r1, r3
 800028a:	b25b      	sxtb	r3, r3
 800028c:	4313      	orrs	r3, r2
 800028e:	b25a      	sxtb	r2, r3
 8000290:	79bb      	ldrb	r3, [r7, #6]
 8000292:	b2d1      	uxtb	r1, r2
 8000294:	4a37      	ldr	r2, [pc, #220]	; (8000374 <MCP23017SetPin+0x118>)
 8000296:	54d1      	strb	r1, [r2, r3]
	//write out the new state
	//UPDATE: This messes up the BAM Driver because it causes the BAM to skip entire steps... its better just to pause TIM2
	//__disable_irq(); //the entire routine will be super duper unhappy unless this is in place


	TIM2->CR1 &= ~1; //disable BAM Driver
 8000298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002a2:	f023 0301 	bic.w	r3, r3, #1
 80002a6:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 80002a8:	4b33      	ldr	r3, [pc, #204]	; (8000378 <MCP23017SetPin+0x11c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a32      	ldr	r2, [pc, #200]	; (8000378 <MCP23017SetPin+0x11c>)
 80002ae:	f023 0301 	bic.w	r3, r3, #1
 80002b2:	6013      	str	r3, [r2, #0]
	//__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 80002b4:	4b31      	ldr	r3, [pc, #196]	; (800037c <MCP23017SetPin+0x120>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a30      	ldr	r2, [pc, #192]	; (800037c <MCP23017SetPin+0x120>)
 80002ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002be:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80002c0:	bf00      	nop
 80002c2:	4b2e      	ldr	r3, [pc, #184]	; (800037c <MCP23017SetPin+0x120>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	f003 0301 	and.w	r3, r3, #1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d0f9      	beq.n	80002c2 <MCP23017SetPin+0x66>
	I2C2->DR = addr; //address the MCP23017
 80002ce:	4a2b      	ldr	r2, [pc, #172]	; (800037c <MCP23017SetPin+0x120>)
 80002d0:	797b      	ldrb	r3, [r7, #5]
 80002d2:	6113      	str	r3, [r2, #16]
	//__enable_irq(); didn't work here
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80002d4:	bf00      	nop
 80002d6:	4b29      	ldr	r3, [pc, #164]	; (800037c <MCP23017SetPin+0x120>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	f003 0302 	and.w	r3, r3, #2
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0f9      	beq.n	80002d6 <MCP23017SetPin+0x7a>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 80002e2:	bf00      	nop
 80002e4:	4b25      	ldr	r3, [pc, #148]	; (800037c <MCP23017SetPin+0x120>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0304 	and.w	r3, r3, #4
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d0f9      	beq.n	80002e4 <MCP23017SetPin+0x88>

	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80002f0:	bf00      	nop
 80002f2:	4b22      	ldr	r3, [pc, #136]	; (800037c <MCP23017SetPin+0x120>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d0f9      	beq.n	80002f2 <MCP23017SetPin+0x96>
	if(b==A){
 80002fe:	79bb      	ldrb	r3, [r7, #6]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d103      	bne.n	800030c <MCP23017SetPin+0xb0>
		I2C2->DR = 0x14;
 8000304:	4b1d      	ldr	r3, [pc, #116]	; (800037c <MCP23017SetPin+0x120>)
 8000306:	2214      	movs	r2, #20
 8000308:	611a      	str	r2, [r3, #16]
 800030a:	e002      	b.n	8000312 <MCP23017SetPin+0xb6>
	}
	else{
		I2C2->DR = 0x15;
 800030c:	4b1b      	ldr	r3, [pc, #108]	; (800037c <MCP23017SetPin+0x120>)
 800030e:	2215      	movs	r2, #21
 8000310:	611a      	str	r2, [r3, #16]
	}
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000312:	bf00      	nop
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <MCP23017SetPin+0x120>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800031c:	2b00      	cmp	r3, #0
 800031e:	d0f9      	beq.n	8000314 <MCP23017SetPin+0xb8>
	I2C2->DR = currentIOState[b]; //just pull everything low
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	4a14      	ldr	r2, [pc, #80]	; (8000374 <MCP23017SetPin+0x118>)
 8000324:	5cd2      	ldrb	r2, [r2, r3]
 8000326:	4b15      	ldr	r3, [pc, #84]	; (800037c <MCP23017SetPin+0x120>)
 8000328:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800032a:	bf00      	nop
 800032c:	4b13      	ldr	r3, [pc, #76]	; (800037c <MCP23017SetPin+0x120>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0f9      	beq.n	800032c <MCP23017SetPin+0xd0>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 8000338:	4b10      	ldr	r3, [pc, #64]	; (800037c <MCP23017SetPin+0x120>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a0f      	ldr	r2, [pc, #60]	; (800037c <MCP23017SetPin+0x120>)
 800033e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000342:	6013      	str	r3, [r2, #0]

	while ((I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 8000344:	bf00      	nop
 8000346:	4b0d      	ldr	r3, [pc, #52]	; (800037c <MCP23017SetPin+0x120>)
 8000348:	699b      	ldr	r3, [r3, #24]

	//__enable_irq();
	TIM2->CR1 |= 1; //enable BAM Driver
 800034a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 800035a:	4b07      	ldr	r3, [pc, #28]	; (8000378 <MCP23017SetPin+0x11c>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a06      	ldr	r2, [pc, #24]	; (8000378 <MCP23017SetPin+0x11c>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	6013      	str	r3, [r2, #0]

	//GPIOA->BRR = (1<<7);

}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	200001b6 	.word	0x200001b6
 8000374:	200001b0 	.word	0x200001b0
 8000378:	40000400 	.word	0x40000400
 800037c:	40005800 	.word	0x40005800

08000380 <MCP23017ClearPin>:

void MCP23017ClearPin(uint8_t pin, bank b, uint8_t addr){
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
 800038a:	460b      	mov	r3, r1
 800038c:	71bb      	strb	r3, [r7, #6]
 800038e:	4613      	mov	r3, r2
 8000390:	717b      	strb	r3, [r7, #5]

	while(blocked); //wait for clearance
 8000392:	bf00      	nop
 8000394:	4b40      	ldr	r3, [pc, #256]	; (8000498 <MCP23017ClearPin+0x118>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	b2db      	uxtb	r3, r3
 800039a:	2b00      	cmp	r3, #0
 800039c:	d1fa      	bne.n	8000394 <MCP23017ClearPin+0x14>
	//GPIOA->BSRR = (1<<7);

	currentIOState[b] &= ~(1<<pin);
 800039e:	79bb      	ldrb	r3, [r7, #6]
 80003a0:	4a3e      	ldr	r2, [pc, #248]	; (800049c <MCP23017ClearPin+0x11c>)
 80003a2:	5cd3      	ldrb	r3, [r2, r3]
 80003a4:	b25a      	sxtb	r2, r3
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	2101      	movs	r1, #1
 80003aa:	fa01 f303 	lsl.w	r3, r1, r3
 80003ae:	b25b      	sxtb	r3, r3
 80003b0:	43db      	mvns	r3, r3
 80003b2:	b25b      	sxtb	r3, r3
 80003b4:	4013      	ands	r3, r2
 80003b6:	b25a      	sxtb	r2, r3
 80003b8:	79bb      	ldrb	r3, [r7, #6]
 80003ba:	b2d1      	uxtb	r1, r2
 80003bc:	4a37      	ldr	r2, [pc, #220]	; (800049c <MCP23017ClearPin+0x11c>)
 80003be:	54d1      	strb	r1, [r2, r3]
	//UPDATE: This messses up the BAM Driver... I think it'll be better just to stop TIM2
	//__disable_irq(); //the entire routine will be super duper unhappy unless this is in place

	//potential issue: the other interrupts may cause this crap to fail again...

	TIM2->CR1 &= ~1; //disable BAM Driver
 80003c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ca:	f023 0301 	bic.w	r3, r3, #1
 80003ce:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 80003d0:	4b33      	ldr	r3, [pc, #204]	; (80004a0 <MCP23017ClearPin+0x120>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a32      	ldr	r2, [pc, #200]	; (80004a0 <MCP23017ClearPin+0x120>)
 80003d6:	f023 0301 	bic.w	r3, r3, #1
 80003da:	6013      	str	r3, [r2, #0]
	//__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 80003dc:	4b31      	ldr	r3, [pc, #196]	; (80004a4 <MCP23017ClearPin+0x124>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a30      	ldr	r2, [pc, #192]	; (80004a4 <MCP23017ClearPin+0x124>)
 80003e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003e6:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80003e8:	bf00      	nop
 80003ea:	4b2e      	ldr	r3, [pc, #184]	; (80004a4 <MCP23017ClearPin+0x124>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0f9      	beq.n	80003ea <MCP23017ClearPin+0x6a>
	I2C2->DR = addr; //address the MCP23017
 80003f6:	4a2b      	ldr	r2, [pc, #172]	; (80004a4 <MCP23017ClearPin+0x124>)
 80003f8:	797b      	ldrb	r3, [r7, #5]
 80003fa:	6113      	str	r3, [r2, #16]
	//__enable_irq(); didn't work here
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80003fc:	bf00      	nop
 80003fe:	4b29      	ldr	r3, [pc, #164]	; (80004a4 <MCP23017ClearPin+0x124>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f003 0302 	and.w	r3, r3, #2
 8000406:	2b00      	cmp	r3, #0
 8000408:	d0f9      	beq.n	80003fe <MCP23017ClearPin+0x7e>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 800040a:	bf00      	nop
 800040c:	4b25      	ldr	r3, [pc, #148]	; (80004a4 <MCP23017ClearPin+0x124>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0f9      	beq.n	800040c <MCP23017ClearPin+0x8c>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000418:	bf00      	nop
 800041a:	4b22      	ldr	r3, [pc, #136]	; (80004a4 <MCP23017ClearPin+0x124>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000422:	2b00      	cmp	r3, #0
 8000424:	d0f9      	beq.n	800041a <MCP23017ClearPin+0x9a>
	if(b==A){
 8000426:	79bb      	ldrb	r3, [r7, #6]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d103      	bne.n	8000434 <MCP23017ClearPin+0xb4>
		I2C2->DR = 0x14;
 800042c:	4b1d      	ldr	r3, [pc, #116]	; (80004a4 <MCP23017ClearPin+0x124>)
 800042e:	2214      	movs	r2, #20
 8000430:	611a      	str	r2, [r3, #16]
 8000432:	e002      	b.n	800043a <MCP23017ClearPin+0xba>
	}
	else{
		I2C2->DR = 0x15;
 8000434:	4b1b      	ldr	r3, [pc, #108]	; (80004a4 <MCP23017ClearPin+0x124>)
 8000436:	2215      	movs	r2, #21
 8000438:	611a      	str	r2, [r3, #16]
	}
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800043a:	bf00      	nop
 800043c:	4b19      	ldr	r3, [pc, #100]	; (80004a4 <MCP23017ClearPin+0x124>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000444:	2b00      	cmp	r3, #0
 8000446:	d0f9      	beq.n	800043c <MCP23017ClearPin+0xbc>
	I2C2->DR = currentIOState[b]; //just pull everything low
 8000448:	79bb      	ldrb	r3, [r7, #6]
 800044a:	4a14      	ldr	r2, [pc, #80]	; (800049c <MCP23017ClearPin+0x11c>)
 800044c:	5cd2      	ldrb	r2, [r2, r3]
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <MCP23017ClearPin+0x124>)
 8000450:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000452:	bf00      	nop
 8000454:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <MCP23017ClearPin+0x124>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800045c:	2b00      	cmp	r3, #0
 800045e:	d0f9      	beq.n	8000454 <MCP23017ClearPin+0xd4>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 8000460:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <MCP23017ClearPin+0x124>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a0f      	ldr	r2, [pc, #60]	; (80004a4 <MCP23017ClearPin+0x124>)
 8000466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800046a:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 800046c:	bf00      	nop
 800046e:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <MCP23017ClearPin+0x124>)
 8000470:	699b      	ldr	r3, [r3, #24]

	//__enable_irq();
	TIM2->CR1 |= 1; //enable BAM Driver
 8000472:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 8000482:	4b07      	ldr	r3, [pc, #28]	; (80004a0 <MCP23017ClearPin+0x120>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a06      	ldr	r2, [pc, #24]	; (80004a0 <MCP23017ClearPin+0x120>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6013      	str	r3, [r2, #0]
	//__enable_irq();
	//GPIOA->BRR = (1<<7);

}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	200001b6 	.word	0x200001b6
 800049c:	200001b0 	.word	0x200001b0
 80004a0:	40000400 	.word	0x40000400
 80004a4:	40005800 	.word	0x40005800

080004a8 <LCDInit>:
 * \fn LCDInit
 * @brief Initialises both the LCD and the MCP23017
 *
 * @param addr Address of the MCP23017
 */
void LCDInit(uint8_t addr){ //interrupts should be disabled here
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b2:	b672      	cpsid	i

	//while(blocked); //wait for clearance anyways just for good measure

	//Initialise the MCP23017 first
	__disable_irq(); //let's allow the init to go down peacefully
	I2C2->CR1 |= (1<<8); //send start condition
 80004b4:	4b4a      	ldr	r3, [pc, #296]	; (80005e0 <LCDInit+0x138>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a49      	ldr	r2, [pc, #292]	; (80005e0 <LCDInit+0x138>)
 80004ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004be:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80004c0:	bf00      	nop
 80004c2:	4b47      	ldr	r3, [pc, #284]	; (80005e0 <LCDInit+0x138>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d0f9      	beq.n	80004c2 <LCDInit+0x1a>
	I2C2->DR = addr; //address the MCP23017
 80004ce:	4a44      	ldr	r2, [pc, #272]	; (80005e0 <LCDInit+0x138>)
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80004d4:	bf00      	nop
 80004d6:	4b42      	ldr	r3, [pc, #264]	; (80005e0 <LCDInit+0x138>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f003 0302 	and.w	r3, r3, #2
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d0f9      	beq.n	80004d6 <LCDInit+0x2e>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 80004e2:	bf00      	nop
 80004e4:	4b3e      	ldr	r3, [pc, #248]	; (80005e0 <LCDInit+0x138>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0304 	and.w	r3, r3, #4
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d0f9      	beq.n	80004e4 <LCDInit+0x3c>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80004f0:	bf00      	nop
 80004f2:	4b3b      	ldr	r3, [pc, #236]	; (80005e0 <LCDInit+0x138>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d0f9      	beq.n	80004f2 <LCDInit+0x4a>
	I2C2->DR = 0x00; //write to IODIR_A
 80004fe:	4b38      	ldr	r3, [pc, #224]	; (80005e0 <LCDInit+0x138>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000504:	bf00      	nop
 8000506:	4b36      	ldr	r3, [pc, #216]	; (80005e0 <LCDInit+0x138>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0f9      	beq.n	8000506 <LCDInit+0x5e>
	I2C2->DR = 0x00; //all outputs
 8000512:	4b33      	ldr	r3, [pc, #204]	; (80005e0 <LCDInit+0x138>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000518:	bf00      	nop
 800051a:	4b31      	ldr	r3, [pc, #196]	; (80005e0 <LCDInit+0x138>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0f9      	beq.n	800051a <LCDInit+0x72>
	I2C2->DR = 0x00; //all outputs for next address which is IODIR_B
 8000526:	4b2e      	ldr	r3, [pc, #184]	; (80005e0 <LCDInit+0x138>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800052c:	bf00      	nop
 800052e:	4b2c      	ldr	r3, [pc, #176]	; (80005e0 <LCDInit+0x138>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0f9      	beq.n	800052e <LCDInit+0x86>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 800053a:	4b29      	ldr	r3, [pc, #164]	; (80005e0 <LCDInit+0x138>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a28      	ldr	r2, [pc, #160]	; (80005e0 <LCDInit+0x138>)
 8000540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000544:	6013      	str	r3, [r2, #0]


	//Pull RS, RW and E pins LOW
	MCP23017ClearPin(RS_Pin, B, LCD_Address);
 8000546:	224e      	movs	r2, #78	; 0x4e
 8000548:	2101      	movs	r1, #1
 800054a:	2002      	movs	r0, #2
 800054c:	f7ff ff18 	bl	8000380 <MCP23017ClearPin>
	MCP23017ClearPin(RW_Pin, B, LCD_Address);
 8000550:	224e      	movs	r2, #78	; 0x4e
 8000552:	2101      	movs	r1, #1
 8000554:	2001      	movs	r0, #1
 8000556:	f7ff ff13 	bl	8000380 <MCP23017ClearPin>
	GPIOA->BRR = 1<<8;
 800055a:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <LCDInit+0x13c>)
 800055c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000560:	615a      	str	r2, [r3, #20]



	LCDData(0x00, addr); //clear the data pins as well
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	4619      	mov	r1, r3
 8000566:	2000      	movs	r0, #0
 8000568:	f000 f83e 	bl	80005e8 <LCDData>
	DWT_Delay_ms(30);
 800056c:	201e      	movs	r0, #30
 800056e:	f7ff fe43 	bl	80001f8 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	4619      	mov	r1, r3
 8000576:	2030      	movs	r0, #48	; 0x30
 8000578:	f000 f8b2 	bl	80006e0 <LCDCommand>
	DWT_Delay_ms(5);
 800057c:	2005      	movs	r0, #5
 800057e:	f7ff fe3b 	bl	80001f8 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	4619      	mov	r1, r3
 8000586:	2030      	movs	r0, #48	; 0x30
 8000588:	f000 f8aa 	bl	80006e0 <LCDCommand>
	DWT_Delay_ms(5);
 800058c:	2005      	movs	r0, #5
 800058e:	f7ff fe33 	bl	80001f8 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	4619      	mov	r1, r3
 8000596:	2030      	movs	r0, #48	; 0x30
 8000598:	f000 f8a2 	bl	80006e0 <LCDCommand>
	DWT_Delay_us(1000);
 800059c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a0:	f7ff fe04 	bl	80001ac <DWT_Delay_us>

	LCDCommand(0x38, addr); //8-bit mode, 2 lines, smaller font
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	4619      	mov	r1, r3
 80005a8:	2038      	movs	r0, #56	; 0x38
 80005aa:	f000 f899 	bl	80006e0 <LCDCommand>

	LCDCommand(0x0C, addr); //display ON
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	4619      	mov	r1, r3
 80005b2:	200c      	movs	r0, #12
 80005b4:	f000 f894 	bl	80006e0 <LCDCommand>

	LCDCommand(0x01, addr); //display clear
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	4619      	mov	r1, r3
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 f88f 	bl	80006e0 <LCDCommand>
	DWT_Delay_us(2000); //clear requires a substantial delay
 80005c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005c6:	f7ff fdf1 	bl	80001ac <DWT_Delay_us>

	LCDCommand(0x06, addr); //set entry mode
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4619      	mov	r1, r3
 80005ce:	2006      	movs	r0, #6
 80005d0:	f000 f886 	bl	80006e0 <LCDCommand>
  __ASM volatile ("cpsie i" : : : "memory");
 80005d4:	b662      	cpsie	i

	__enable_irq();


}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40005800 	.word	0x40005800
 80005e4:	40010800 	.word	0x40010800

080005e8 <LCDData>:
 * @brief Presents the data to D0 to D7 (located on Bank A)
 *
 * @param data Data to send
 * @param addr I2C Address of the MCP23017
 */
void LCDData(char data, uint8_t addr){
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	4613      	mov	r3, r2
 80005f6:	71bb      	strb	r3, [r7, #6]

	while(blocked); //wait for clearance
 80005f8:	bf00      	nop
 80005fa:	4b36      	ldr	r3, [pc, #216]	; (80006d4 <LCDData+0xec>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1fa      	bne.n	80005fa <LCDData+0x12>

	TIM2->CR1 &= ~1; //disable BAM Driver
 8000604:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800060e:	f023 0301 	bic.w	r3, r3, #1
 8000612:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 8000614:	4b30      	ldr	r3, [pc, #192]	; (80006d8 <LCDData+0xf0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a2f      	ldr	r2, [pc, #188]	; (80006d8 <LCDData+0xf0>)
 800061a:	f023 0301 	bic.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]
	//__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 8000620:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <LCDData+0xf4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a2d      	ldr	r2, [pc, #180]	; (80006dc <LCDData+0xf4>)
 8000626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800062a:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 800062c:	bf00      	nop
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <LCDData+0xf4>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	2b00      	cmp	r3, #0
 8000638:	d0f9      	beq.n	800062e <LCDData+0x46>
	I2C2->DR = addr; //address the MCP23017
 800063a:	4a28      	ldr	r2, [pc, #160]	; (80006dc <LCDData+0xf4>)
 800063c:	79bb      	ldrb	r3, [r7, #6]
 800063e:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000640:	bf00      	nop
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <LCDData+0xf4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0f9      	beq.n	8000642 <LCDData+0x5a>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 800064e:	bf00      	nop
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <LCDData+0xf4>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0f9      	beq.n	8000650 <LCDData+0x68>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800065c:	bf00      	nop
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <LCDData+0xf4>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0f9      	beq.n	800065e <LCDData+0x76>
	I2C2->DR = 0x14; //write to GPIO_A
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <LCDData+0xf4>)
 800066c:	2214      	movs	r2, #20
 800066e:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000670:	bf00      	nop
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <LCDData+0xf4>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067a:	2b00      	cmp	r3, #0
 800067c:	d0f9      	beq.n	8000672 <LCDData+0x8a>
	I2C2->DR = data; //present data at output bank A
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <LCDData+0xf4>)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000684:	bf00      	nop
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <LCDData+0xf4>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068e:	2b00      	cmp	r3, #0
 8000690:	d0f9      	beq.n	8000686 <LCDData+0x9e>
	while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
 8000692:	bf00      	nop
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <LCDData+0xf4>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	2b00      	cmp	r3, #0
 800069e:	d0f9      	beq.n	8000694 <LCDData+0xac>
	I2C2->CR1 |= (1<<9); //send stop condition
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <LCDData+0xf4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <LCDData+0xf4>)
 80006a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006aa:	6013      	str	r3, [r2, #0]

	//__enable_irq();
	TIM2->CR1 |= 1; //enable BAM Driver
 80006ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <LCDData+0xf0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <LCDData+0xf0>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	200001b6 	.word	0x200001b6
 80006d8:	40000400 	.word	0x40000400
 80006dc:	40005800 	.word	0x40005800

080006e0 <LCDCommand>:

void LCDCommand(char data, uint8_t addr){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	460a      	mov	r2, r1
 80006ea:	71fb      	strb	r3, [r7, #7]
 80006ec:	4613      	mov	r3, r2
 80006ee:	71bb      	strb	r3, [r7, #6]


	MCP23017ClearPin(RS_Pin, B, addr);
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	461a      	mov	r2, r3
 80006f4:	2101      	movs	r1, #1
 80006f6:	2002      	movs	r0, #2
 80006f8:	f7ff fe42 	bl	8000380 <MCP23017ClearPin>

	LCDData(data, addr);
 80006fc:	79ba      	ldrb	r2, [r7, #6]
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4611      	mov	r1, r2
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff70 	bl	80005e8 <LCDData>

	LCDCycleEN(addr);
 8000708:	79bb      	ldrb	r3, [r7, #6]
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f80a 	bl	8000724 <LCDCycleEN>

	MCP23017SetPin(RS_Pin, B, addr);
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	461a      	mov	r2, r3
 8000714:	2101      	movs	r1, #1
 8000716:	2002      	movs	r0, #2
 8000718:	f7ff fda0 	bl	800025c <MCP23017SetPin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <LCDCycleEN>:

void LCDCycleEN(uint8_t addr){
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	DWT_Delay_us(1);
	MCP23017ClearPin(EN_Pin, B, addr);
	DWT_Delay_us(100);

*/
	GPIOA->BRR = 1<<8;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <LCDCycleEN+0x3c>)
 8000730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000734:	615a      	str	r2, [r3, #20]
	GPIOA->BSRR = 1<<8; //this pulse is 100ns, aka too short, datasheet specifies min of 230 ns
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <LCDCycleEN+0x3c>)
 8000738:	f44f 7280 	mov.w	r2, #256	; 0x100
 800073c:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = 1<<8;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <LCDCycleEN+0x3c>)
 8000740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000744:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = 1<<8;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <LCDCycleEN+0x3c>)
 8000748:	f44f 7280 	mov.w	r2, #256	; 0x100
 800074c:	611a      	str	r2, [r3, #16]
	GPIOA->BRR = 1<<8;
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <LCDCycleEN+0x3c>)
 8000750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000754:	615a      	str	r2, [r3, #20]

}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	40010800 	.word	0x40010800

08000764 <LCDWriteChar>:

void LCDWriteChar(char data, uint8_t addr){
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	460a      	mov	r2, r1
 800076e:	71fb      	strb	r3, [r7, #7]
 8000770:	4613      	mov	r3, r2
 8000772:	71bb      	strb	r3, [r7, #6]

	//MCP23017SetPin(RS_Pin, B, addr);
	//I2C2->CR2 |= (1<<9); //enable event interrupts
	LCDData(data, addr);
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff34 	bl	80005e8 <LCDData>
	LCDCycleEN(addr);
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ffce 	bl	8000724 <LCDCycleEN>

}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <LCDWriteString>:

void LCDWriteString(char *str, uint8_t addr){
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	70fb      	strb	r3, [r7, #3]

	for(int i = 0; (volatile char)str[i] != '\x00' ; i++){ //Nice touch: take advantage of null byte terminated strings
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	e00b      	b.n	80007ba <LCDWriteString+0x2a>
		LCDWriteChar(str[i], addr);
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	78fa      	ldrb	r2, [r7, #3]
 80007ac:	4611      	mov	r1, r2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ffd8 	bl	8000764 <LCDWriteChar>
	for(int i = 0; (volatile char)str[i] != '\x00' ; i++){ //Nice touch: take advantage of null byte terminated strings
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	3301      	adds	r3, #1
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	4413      	add	r3, r2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d1ed      	bne.n	80007a2 <LCDWriteString+0x12>
	}

}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <LCDClear>:

void LCDClear(uint8_t addr){
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	71fb      	strb	r3, [r7, #7]

	LCDCommand(1, addr);
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	4619      	mov	r1, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff ff7f 	bl	80006e0 <LCDCommand>
	DWT_Delay_us(2000);
 80007e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007e6:	f7ff fce1 	bl	80001ac <DWT_Delay_us>

}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <LCDSetCursor>:

void LCDSetCursor(uint8_t row, uint8_t col, uint8_t addr){
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b084      	sub	sp, #16
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	71fb      	strb	r3, [r7, #7]
 80007fc:	460b      	mov	r3, r1
 80007fe:	71bb      	strb	r3, [r7, #6]
 8000800:	4613      	mov	r3, r2
 8000802:	717b      	strb	r3, [r7, #5]

	char outbyte;

	if(row == 1){
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d109      	bne.n	800081e <LCDSetCursor+0x2c>
		outbyte = 0x80 + col - 1;
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	337f      	adds	r3, #127	; 0x7f
 800080e:	73fb      	strb	r3, [r7, #15]
		LCDCommand(outbyte, addr);
 8000810:	797a      	ldrb	r2, [r7, #5]
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	4611      	mov	r1, r2
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff62 	bl	80006e0 <LCDCommand>
	else if(row == 2){
		outbyte = 0xC0 + col - 1;
		LCDCommand(outbyte, addr);
	}

}
 800081c:	e00b      	b.n	8000836 <LCDSetCursor+0x44>
	else if(row == 2){
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b02      	cmp	r3, #2
 8000822:	d108      	bne.n	8000836 <LCDSetCursor+0x44>
		outbyte = 0xC0 + col - 1;
 8000824:	79bb      	ldrb	r3, [r7, #6]
 8000826:	3b41      	subs	r3, #65	; 0x41
 8000828:	73fb      	strb	r3, [r7, #15]
		LCDCommand(outbyte, addr);
 800082a:	797a      	ldrb	r2, [r7, #5]
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	4611      	mov	r1, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff55 	bl	80006e0 <LCDCommand>
}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <LCDPrepareInt>:
 * \fn LCDPrepareInt
 *
 * @brief this function sets up the MCP23017 so that it can take on the interrupt based auto LCD updating routine
 */
//TODO: might want to convert this to DMA driven code
void LCDPrepareInt(){
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

	//initialise the buffer for the DMA by inserting all the requisite stuff
	LCDBuffer[0] = 0x80; //line 1 col 1
 8000844:	4b4a      	ldr	r3, [pc, #296]	; (8000970 <LCDPrepareInt+0x130>)
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	701a      	strb	r2, [r3, #0]
	LCDBuffer[9] = 0x88; //line 1 col 9
 800084a:	4b49      	ldr	r3, [pc, #292]	; (8000970 <LCDPrepareInt+0x130>)
 800084c:	2288      	movs	r2, #136	; 0x88
 800084e:	725a      	strb	r2, [r3, #9]
	LCDBuffer[18] = 0xC0; //line 2 col 1
 8000850:	4b47      	ldr	r3, [pc, #284]	; (8000970 <LCDPrepareInt+0x130>)
 8000852:	22c0      	movs	r2, #192	; 0xc0
 8000854:	749a      	strb	r2, [r3, #18]
	LCDBuffer[27] = 0xC8; //line 2 col 2
 8000856:	4b46      	ldr	r3, [pc, #280]	; (8000970 <LCDPrepareInt+0x130>)
 8000858:	22c8      	movs	r2, #200	; 0xc8
 800085a:	76da      	strb	r2, [r3, #27]

	while(blocked); //wait for clearance
 800085c:	bf00      	nop
 800085e:	4b45      	ldr	r3, [pc, #276]	; (8000974 <LCDPrepareInt+0x134>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1fa      	bne.n	800085e <LCDPrepareInt+0x1e>

	TIM2->CR1 &= ~1; //disable BAM Driver
 8000868:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000872:	f023 0301 	bic.w	r3, r3, #1
 8000876:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 8000878:	4b3f      	ldr	r3, [pc, #252]	; (8000978 <LCDPrepareInt+0x138>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a3e      	ldr	r2, [pc, #248]	; (8000978 <LCDPrepareInt+0x138>)
 800087e:	f023 0301 	bic.w	r3, r3, #1
 8000882:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
	__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 8000886:	4b3d      	ldr	r3, [pc, #244]	; (800097c <LCDPrepareInt+0x13c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a3c      	ldr	r2, [pc, #240]	; (800097c <LCDPrepareInt+0x13c>)
 800088c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000890:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 8000892:	bf00      	nop
 8000894:	4b39      	ldr	r3, [pc, #228]	; (800097c <LCDPrepareInt+0x13c>)
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	2b00      	cmp	r3, #0
 800089e:	d0f9      	beq.n	8000894 <LCDPrepareInt+0x54>
	I2C2->DR = LCD_Address; //address the MCP23017
 80008a0:	4b36      	ldr	r3, [pc, #216]	; (800097c <LCDPrepareInt+0x13c>)
 80008a2:	224e      	movs	r2, #78	; 0x4e
 80008a4:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80008a6:	bf00      	nop
 80008a8:	4b34      	ldr	r3, [pc, #208]	; (800097c <LCDPrepareInt+0x13c>)
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	f003 0302 	and.w	r3, r3, #2
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d0f9      	beq.n	80008a8 <LCDPrepareInt+0x68>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 80008b4:	bf00      	nop
 80008b6:	4b31      	ldr	r3, [pc, #196]	; (800097c <LCDPrepareInt+0x13c>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f9      	beq.n	80008b6 <LCDPrepareInt+0x76>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80008c2:	bf00      	nop
 80008c4:	4b2d      	ldr	r3, [pc, #180]	; (800097c <LCDPrepareInt+0x13c>)
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d0f9      	beq.n	80008c4 <LCDPrepareInt+0x84>
	I2C2->DR = 0x0A; //write to IOCON
 80008d0:	4b2a      	ldr	r3, [pc, #168]	; (800097c <LCDPrepareInt+0x13c>)
 80008d2:	220a      	movs	r2, #10
 80008d4:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80008d6:	bf00      	nop
 80008d8:	4b28      	ldr	r3, [pc, #160]	; (800097c <LCDPrepareInt+0x13c>)
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0f9      	beq.n	80008d8 <LCDPrepareInt+0x98>
	I2C2->DR = (1<<5)|(1<<7); //disable address incrementation and enable bank = 1
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <LCDPrepareInt+0x13c>)
 80008e6:	22a0      	movs	r2, #160	; 0xa0
 80008e8:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80008ea:	bf00      	nop
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <LCDPrepareInt+0x13c>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d0f9      	beq.n	80008ec <LCDPrepareInt+0xac>
	while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
 80008f8:	bf00      	nop
 80008fa:	4b20      	ldr	r3, [pc, #128]	; (800097c <LCDPrepareInt+0x13c>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	2b00      	cmp	r3, #0
 8000904:	d0f9      	beq.n	80008fa <LCDPrepareInt+0xba>
	I2C2->CR1 |= (1<<9); //send stop condition
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <LCDPrepareInt+0x13c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a1c      	ldr	r2, [pc, #112]	; (800097c <LCDPrepareInt+0x13c>)
 800090c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000910:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000912:	b662      	cpsie	i

	__enable_irq();
	TIM2->CR1 |= 1; //enable BAM Driver
 8000914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <LCDPrepareInt+0x138>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a13      	ldr	r2, [pc, #76]	; (8000978 <LCDPrepareInt+0x138>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6013      	str	r3, [r2, #0]

	//I2C2->CR2 |= 1<<9; //enable I2C2 event Interrupts

	//prepare DMA1 Channel 4

	DMA1_Channel4->CMAR = (uint32_t)LCDBuffer;
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <LCDPrepareInt+0x140>)
 8000932:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <LCDPrepareInt+0x130>)
 8000934:	60da      	str	r2, [r3, #12]
	DMA1_Channel4->CPAR = (uint32_t)&(I2C2->DR);
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <LCDPrepareInt+0x140>)
 8000938:	4a12      	ldr	r2, [pc, #72]	; (8000984 <LCDPrepareInt+0x144>)
 800093a:	609a      	str	r2, [r3, #8]
	DMA1_Channel4->CNDTR = 1; //this is just for the sake of having to wait for all the I2C data to be shifted out
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <LCDPrepareInt+0x140>)
 800093e:	2201      	movs	r2, #1
 8000940:	605a      	str	r2, [r3, #4]
	DMA1_Channel4->CCR |= (0b10<<12); //High Priority
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <LCDPrepareInt+0x140>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <LCDPrepareInt+0x140>)
 8000948:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800094c:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CCR |= (1<<4 | 1<<7); //set MINC and Read from Memory
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <LCDPrepareInt+0x140>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <LCDPrepareInt+0x140>)
 8000954:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000958:	6013      	str	r3, [r2, #0]

	DMA1_Channel4->CCR |= 1; //activate DMA
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <LCDPrepareInt+0x140>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <LCDPrepareInt+0x140>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6013      	str	r3, [r2, #0]

}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000400 	.word	0x20000400
 8000974:	200001b6 	.word	0x200001b6
 8000978:	40000400 	.word	0x40000400
 800097c:	40005800 	.word	0x40005800
 8000980:	40020044 	.word	0x40020044
 8000984:	40005810 	.word	0x40005810

08000988 <LCDWriteStringInt>:
 * call this in the TIM 2 ISR
 * update the variable currentLCDSection before calling this function
 * @brief This function sets up an interrupt based transfer routine, which is to be driven by TIM 2 every BAM cycle to update a quarter of the LCD
 */
//this code must be DMA driven since its called inside the TIM 2 interrupt, which is enough of a mess already
void LCDWriteStringInt(uint8_t section){
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]

	//TODO: code now worry later - implement the line setting code, maybe just set it to run nevertheless for more straightforward timing control
	//TODO: Set dma to transfer only 1 byte; we are using the DMA to avoid tying up the cpu only, coz we need the BTF signal...

	currentLCDByte = 0; //reset the byte counter
 8000992:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <LCDWriteStringInt+0xcc>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]

	//__disable_irq(); //this part is set to run after each LED Matrix next row, so I think we will not face any lockups

	DMA1_Channel4->CCR &= ~1; //disable DMA1 Channel 4 for reconfiguring
 8000998:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <LCDWriteStringInt+0xd0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a2e      	ldr	r2, [pc, #184]	; (8000a58 <LCDWriteStringInt+0xd0>)
 800099e:	f023 0301 	bic.w	r3, r3, #1
 80009a2:	6013      	str	r3, [r2, #0]

	DMA1_Channel4->CNDTR = 1; //reload
 80009a4:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <LCDWriteStringInt+0xd0>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	605a      	str	r2, [r3, #4]
	DMA1_Channel4->CMAR = (uint32_t)&(LCDBuffer[section*9]); //set target
 80009aa:	79fa      	ldrb	r2, [r7, #7]
 80009ac:	4613      	mov	r3, r2
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	4413      	add	r3, r2
 80009b2:	4a2a      	ldr	r2, [pc, #168]	; (8000a5c <LCDWriteStringInt+0xd4>)
 80009b4:	441a      	add	r2, r3
 80009b6:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <LCDWriteStringInt+0xd0>)
 80009b8:	60da      	str	r2, [r3, #12]

	DMA1_Channel4->CCR |= 1; //enable DMA1 Channel 4
 80009ba:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <LCDWriteStringInt+0xd0>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a26      	ldr	r2, [pc, #152]	; (8000a58 <LCDWriteStringInt+0xd0>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6013      	str	r3, [r2, #0]


	//clear RS
	GPIOB->BRR = 1<1;
 80009c6:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <LCDWriteStringInt+0xd8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
	cycleEN = 1; //indicate that the subsequent I2C byte transfers should be followed by cycling EN
 80009cc:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <LCDWriteStringInt+0xdc>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80009d2:	b672      	cpsid	i

	__disable_irq();

	for(int i = 0; i<100; i++){
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	e004      	b.n	80009e4 <LCDWriteStringInt+0x5c>
		debugLCD();
 80009da:	f7ff fc31 	bl	8000240 <debugLCD>
	for(int i = 0; i<100; i++){
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	3301      	adds	r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2b63      	cmp	r3, #99	; 0x63
 80009e8:	ddf7      	ble.n	80009da <LCDWriteStringInt+0x52>
	}

	I2C2->CR1 |= (1<<8); //send start condition
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <LCDWriteStringInt+0xe0>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a1e      	ldr	r2, [pc, #120]	; (8000a68 <LCDWriteStringInt+0xe0>)
 80009f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f4:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80009f6:	bf00      	nop
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <LCDWriteStringInt+0xe0>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0f9      	beq.n	80009f8 <LCDWriteStringInt+0x70>
	I2C2->DR = LCD_Address; //address the LCD MCP23017
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <LCDWriteStringInt+0xe0>)
 8000a06:	224e      	movs	r2, #78	; 0x4e
 8000a08:	611a      	str	r2, [r3, #16]
	//I2C2->CR2 |= (1<<11); //enable DMA Requests
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000a0a:	bf00      	nop
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <LCDWriteStringInt+0xe0>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d0f9      	beq.n	8000a0c <LCDWriteStringInt+0x84>
	while ((I2C2->SR2 & (1<<2)) == 0) debugLCD(); //read I2C SR2
 8000a18:	e001      	b.n	8000a1e <LCDWriteStringInt+0x96>
 8000a1a:	f7ff fc11 	bl	8000240 <debugLCD>
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <LCDWriteStringInt+0xe0>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0f7      	beq.n	8000a1a <LCDWriteStringInt+0x92>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000a2a:	bf00      	nop
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <LCDWriteStringInt+0xe0>)
 8000a2e:	695b      	ldr	r3, [r3, #20]
 8000a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d0f9      	beq.n	8000a2c <LCDWriteStringInt+0xa4>
	I2C2->DR = 0x0A; //address OLATA
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <LCDWriteStringInt+0xe0>)
 8000a3a:	220a      	movs	r2, #10
 8000a3c:	611a      	str	r2, [r3, #16]
	I2C2->CR2 |= 1<<9; //enable I2C2 event Interrupts
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <LCDWriteStringInt+0xe0>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <LCDWriteStringInt+0xe0>)
 8000a44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a48:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a4a:	b662      	cpsie	i

	__enable_irq();


}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200001b4 	.word	0x200001b4
 8000a58:	40020044 	.word	0x40020044
 8000a5c:	20000400 	.word	0x20000400
 8000a60:	40010c00 	.word	0x40010c00
 8000a64:	200001b3 	.word	0x200001b3
 8000a68:	40005800 	.word	0x40005800

08000a6c <LEDMatrixInit>:





void LEDMatrixInit(uint8_t addr){
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a76:	b672      	cpsid	i
	//note: BTF clearing and stop generation are handled by the Event Interrupt
	__disable_irq();



	I2C1->CR1 |= (1<<8); //send start condition
 8000a78:	4b46      	ldr	r3, [pc, #280]	; (8000b94 <LEDMatrixInit+0x128>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a45      	ldr	r2, [pc, #276]	; (8000b94 <LEDMatrixInit+0x128>)
 8000a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a82:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 8000a84:	bf00      	nop
 8000a86:	4b43      	ldr	r3, [pc, #268]	; (8000b94 <LEDMatrixInit+0x128>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f9      	beq.n	8000a86 <LEDMatrixInit+0x1a>
	I2C1->DR = addr; //address the MCP23017
 8000a92:	4a40      	ldr	r2, [pc, #256]	; (8000b94 <LEDMatrixInit+0x128>)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	6113      	str	r3, [r2, #16]
	while ((I2C1->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000a98:	bf00      	nop
 8000a9a:	4b3e      	ldr	r3, [pc, #248]	; (8000b94 <LEDMatrixInit+0x128>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d0f9      	beq.n	8000a9a <LEDMatrixInit+0x2e>
	while ((I2C1->SR2 & (1<<2)) == 0); //read I2C SR2
 8000aa6:	bf00      	nop
 8000aa8:	4b3a      	ldr	r3, [pc, #232]	; (8000b94 <LEDMatrixInit+0x128>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d0f9      	beq.n	8000aa8 <LEDMatrixInit+0x3c>
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000ab4:	bf00      	nop
 8000ab6:	4b37      	ldr	r3, [pc, #220]	; (8000b94 <LEDMatrixInit+0x128>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d0f9      	beq.n	8000ab6 <LEDMatrixInit+0x4a>
	I2C1->DR = 0x00; //write to IODIR_A
 8000ac2:	4b34      	ldr	r3, [pc, #208]	; (8000b94 <LEDMatrixInit+0x128>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000ac8:	bf00      	nop
 8000aca:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <LEDMatrixInit+0x128>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0f9      	beq.n	8000aca <LEDMatrixInit+0x5e>
	I2C1->DR = 0x00; //all outputs
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <LEDMatrixInit+0x128>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000adc:	bf00      	nop
 8000ade:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <LEDMatrixInit+0x128>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d0f9      	beq.n	8000ade <LEDMatrixInit+0x72>
	I2C1->DR = 0x00; //all outputs for next address which is IODIR_B
 8000aea:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <LEDMatrixInit+0x128>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000af0:	bf00      	nop
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <LEDMatrixInit+0x128>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0f9      	beq.n	8000af2 <LEDMatrixInit+0x86>
	//while ((I2C1->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C1->CR1 |= (1<<9); //send stop condition
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <LEDMatrixInit+0x128>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a24      	ldr	r2, [pc, #144]	; (8000b94 <LEDMatrixInit+0x128>)
 8000b04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b08:	6013      	str	r3, [r2, #0]

	I2C1->CR1 |= (1<<8); //send start condition
 8000b0a:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <LEDMatrixInit+0x128>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <LEDMatrixInit+0x128>)
 8000b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b14:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 8000b16:	bf00      	nop
 8000b18:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <LEDMatrixInit+0x128>)
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0f9      	beq.n	8000b18 <LEDMatrixInit+0xac>
	I2C1->DR = addr; //address the MCP23017
 8000b24:	4a1b      	ldr	r2, [pc, #108]	; (8000b94 <LEDMatrixInit+0x128>)
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	6113      	str	r3, [r2, #16]
	while ((I2C1->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000b2a:	bf00      	nop
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <LEDMatrixInit+0x128>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d0f9      	beq.n	8000b2c <LEDMatrixInit+0xc0>
	while ((I2C1->SR2 & (1<<2)) == 0); //read I2C SR2
 8000b38:	bf00      	nop
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <LEDMatrixInit+0x128>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0f9      	beq.n	8000b3a <LEDMatrixInit+0xce>
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000b46:	bf00      	nop
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <LEDMatrixInit+0x128>)
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0f9      	beq.n	8000b48 <LEDMatrixInit+0xdc>
	I2C1->DR = 0x0A; //write to IOCON
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <LEDMatrixInit+0x128>)
 8000b56:	220a      	movs	r2, #10
 8000b58:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000b5a:	bf00      	nop
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <LEDMatrixInit+0x128>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d0f9      	beq.n	8000b5c <LEDMatrixInit+0xf0>
	I2C1->DR = (1<<5); //disable sequential operation
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <LEDMatrixInit+0x128>)
 8000b6a:	2220      	movs	r2, #32
 8000b6c:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000b6e:	bf00      	nop
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <LEDMatrixInit+0x128>)
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d0f9      	beq.n	8000b70 <LEDMatrixInit+0x104>
	//while ((I2C1->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C1->CR1 |= (1<<9); //send stop condition
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <LEDMatrixInit+0x128>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <LEDMatrixInit+0x128>)
 8000b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b86:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b88:	b662      	cpsie	i

	__enable_irq();

}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	40005400 	.word	0x40005400

08000b98 <LEDMatrixStart>:

void LEDMatrixStart(uint8_t addr){
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]

	while(blocked); //just so nothing stupid happens
 8000ba2:	bf00      	nop
 8000ba4:	4b4b      	ldr	r3, [pc, #300]	; (8000cd4 <LEDMatrixStart+0x13c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1fa      	bne.n	8000ba4 <LEDMatrixStart+0xc>


	DMA1_Channel6->CMAR = (uint32_t)LEDMatrixBuffer;
 8000bae:	4b4a      	ldr	r3, [pc, #296]	; (8000cd8 <LEDMatrixStart+0x140>)
 8000bb0:	4a4a      	ldr	r2, [pc, #296]	; (8000cdc <LEDMatrixStart+0x144>)
 8000bb2:	60da      	str	r2, [r3, #12]
	DMA1_Channel6->CPAR = (uint32_t)&(I2C1->DR);
 8000bb4:	4b48      	ldr	r3, [pc, #288]	; (8000cd8 <LEDMatrixStart+0x140>)
 8000bb6:	4a4a      	ldr	r2, [pc, #296]	; (8000ce0 <LEDMatrixStart+0x148>)
 8000bb8:	609a      	str	r2, [r3, #8]
	DMA1_Channel6->CNDTR = 16;
 8000bba:	4b47      	ldr	r3, [pc, #284]	; (8000cd8 <LEDMatrixStart+0x140>)
 8000bbc:	2210      	movs	r2, #16
 8000bbe:	605a      	str	r2, [r3, #4]
	DMA1_Channel6->CCR |= (0b11<<12); //High Priority
 8000bc0:	4b45      	ldr	r3, [pc, #276]	; (8000cd8 <LEDMatrixStart+0x140>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a44      	ldr	r2, [pc, #272]	; (8000cd8 <LEDMatrixStart+0x140>)
 8000bc6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000bca:	6013      	str	r3, [r2, #0]
	DMA1_Channel6->CCR |= (1<<4 | 1<<7); //set MINC and Read from Memory
 8000bcc:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <LEDMatrixStart+0x140>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a41      	ldr	r2, [pc, #260]	; (8000cd8 <LEDMatrixStart+0x140>)
 8000bd2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000bd6:	6013      	str	r3, [r2, #0]
	//DMA1_Channel6->CCR |= (1<<1); //enable transfer complete interrupt

	DMA1_Channel6->CCR |= 1; //activate DMA
 8000bd8:	4b3f      	ldr	r3, [pc, #252]	; (8000cd8 <LEDMatrixStart+0x140>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a3e      	ldr	r2, [pc, #248]	; (8000cd8 <LEDMatrixStart+0x140>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i

	__disable_irq();

	I2C1->CR1 |= (1<<8); //send start condition
 8000be6:	4b3f      	ldr	r3, [pc, #252]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a3e      	ldr	r2, [pc, #248]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf0:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 8000bf2:	bf00      	nop
 8000bf4:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d0f9      	beq.n	8000bf4 <LEDMatrixStart+0x5c>
	I2C1->DR = addr; //address the MCP23017
 8000c00:	4a38      	ldr	r2, [pc, #224]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	6113      	str	r3, [r2, #16]
	while ((I2C1->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000c06:	bf00      	nop
 8000c08:	4b36      	ldr	r3, [pc, #216]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	f003 0302 	and.w	r3, r3, #2
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d0f9      	beq.n	8000c08 <LEDMatrixStart+0x70>
	while ((I2C1->SR2 & (1<<2)) == 0); //read I2C SR2
 8000c14:	bf00      	nop
 8000c16:	4b33      	ldr	r3, [pc, #204]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0f9      	beq.n	8000c16 <LEDMatrixStart+0x7e>
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000c22:	bf00      	nop
 8000c24:	4b2f      	ldr	r3, [pc, #188]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0f9      	beq.n	8000c24 <LEDMatrixStart+0x8c>
	I2C1->DR = 0x12; //write to GPIOA
 8000c30:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000c32:	2212      	movs	r2, #18
 8000c34:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000c36:	bf00      	nop
 8000c38:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d0f9      	beq.n	8000c38 <LEDMatrixStart+0xa0>
	while ((I2C1->SR1 & (1<<2)) == 0); //make sure BTF is 1
 8000c44:	bf00      	nop
 8000c46:	4b27      	ldr	r3, [pc, #156]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d0f9      	beq.n	8000c46 <LEDMatrixStart+0xae>
	I2C1->CR1 |= (1<<9); //send stop condition
 8000c52:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a23      	ldr	r2, [pc, #140]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000c58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5c:	6013      	str	r3, [r2, #0]

	//WARNING: the below implementation explicitly goes against RM0008 in that DMAEN is set late
	I2C1->CR2 |= (1<<9); //enable event interrupts
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	4a20      	ldr	r2, [pc, #128]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000c64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c68:	6053      	str	r3, [r2, #4]
	I2C1->CR1 |= (1<<8); //send start condition
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c74:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 8000c76:	bf00      	nop
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0f9      	beq.n	8000c78 <LEDMatrixStart+0xe0>
	I2C1->DR = addr; //address the MCP23017
 8000c84:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	6113      	str	r3, [r2, #16]
	while ((I2C1->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000c8a:	bf00      	nop
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0f9      	beq.n	8000c8c <LEDMatrixStart+0xf4>
	while ((I2C1->SR2 & (1<<2)) == 0); //read I2C SR2
 8000c98:	bf00      	nop
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0f9      	beq.n	8000c9a <LEDMatrixStart+0x102>
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000ca6:	bf00      	nop
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0f9      	beq.n	8000ca8 <LEDMatrixStart+0x110>
	I2C1->DR = 0x12; //write to GPIOA
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000cb6:	2212      	movs	r2, #18
 8000cb8:	611a      	str	r2, [r3, #16]
	I2C1->CR2 |= (1<<11); //enable DMA Requests
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	4a09      	ldr	r2, [pc, #36]	; (8000ce4 <LEDMatrixStart+0x14c>)
 8000cc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cc4:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8000cc6:	b662      	cpsie	i
	__enable_irq();



}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	200001b6 	.word	0x200001b6
 8000cd8:	4002006c 	.word	0x4002006c
 8000cdc:	20000424 	.word	0x20000424
 8000ce0:	40005410 	.word	0x40005410
 8000ce4:	40005400 	.word	0x40005400

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d36:	f000 ff51 	bl	8001bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3a:	f000 f925 	bl	8000f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3e:	f000 fb27 	bl	8001390 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d42:	f000 fb0f 	bl	8001364 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000d46:	f009 fae7 	bl	800a318 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000d4a:	f000 f9a1 	bl	8001090 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000d4e:	f000 f9dd 	bl	800110c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d52:	f000 fa09 	bl	8001168 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000d56:	f000 fa4f 	bl	80011f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d5a:	f000 faa9 	bl	80012b0 <MX_TIM3_Init>
  MX_IWDG_Init();
 8000d5e:	f000 fa31 	bl	80011c4 <MX_IWDG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000d62:	f000 f970 	bl	8001046 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  NVIC_SetPriorityGrouping(0U); //use standard interrupt grouping
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff ffbe 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
  DWT_Delay_Init();
 8000d6c:	f7ff f9ee 	bl	800014c <DWT_Delay_Init>

  blocked = 0;
 8000d70:	4b77      	ldr	r3, [pc, #476]	; (8000f50 <main+0x220>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
  I2C2->CR1 |= 1; //enable i2c 2 peripheral for LCD and EEPROM
 8000d76:	4b77      	ldr	r3, [pc, #476]	; (8000f54 <main+0x224>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a76      	ldr	r2, [pc, #472]	; (8000f54 <main+0x224>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6013      	str	r3, [r2, #0]
  I2C1->CR1 |= 1; //enable i2c 1 peripheral for LED Matrix
 8000d82:	4b75      	ldr	r3, [pc, #468]	; (8000f58 <main+0x228>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a74      	ldr	r2, [pc, #464]	; (8000f58 <main+0x228>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6013      	str	r3, [r2, #0]

  LCDInit(LCD_Address);
 8000d8e:	204e      	movs	r0, #78	; 0x4e
 8000d90:	f7ff fb8a 	bl	80004a8 <LCDInit>
  LEDMatrixInit(LEDMatrix_Address);
 8000d94:	2048      	movs	r0, #72	; 0x48
 8000d96:	f7ff fe69 	bl	8000a6c <LEDMatrixInit>

  TIM2->CR1 |= 1; //enable BAM Driver
 8000d9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6013      	str	r3, [r2, #0]
  TIM3->CR1 |= 1; //enable encoder scan driver
 8000daa:	4b6c      	ldr	r3, [pc, #432]	; (8000f5c <main+0x22c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a6b      	ldr	r2, [pc, #428]	; (8000f5c <main+0x22c>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6013      	str	r3, [r2, #0]


  LCDClear(LCD_Address);
 8000db6:	204e      	movs	r0, #78	; 0x4e
 8000db8:	f7ff fd09 	bl	80007ce <LCDClear>

  LCDSetCursor(1, 1, LCD_Address);
 8000dbc:	224e      	movs	r2, #78	; 0x4e
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f7ff fd16 	bl	80007f2 <LCDSetCursor>

  LCDWriteString("AAAA", LCD_Address);
 8000dc6:	214e      	movs	r1, #78	; 0x4e
 8000dc8:	4865      	ldr	r0, [pc, #404]	; (8000f60 <main+0x230>)
 8000dca:	f7ff fce1 	bl	8000790 <LCDWriteString>



  for(int i = 0; i < 4; i++){ //function to drive the LED's
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	e022      	b.n	8000e1a <main+0xea>
	  LEDMatrixBuffer[i*4] = 0b1111; //clear all pins first to prevent ghosting
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4a62      	ldr	r2, [pc, #392]	; (8000f64 <main+0x234>)
 8000dda:	210f      	movs	r1, #15
 8000ddc:	54d1      	strb	r1, [r2, r3]
	  LEDMatrixBuffer[i*4+1] = 0x00;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	3301      	adds	r3, #1
 8000de4:	4a5f      	ldr	r2, [pc, #380]	; (8000f64 <main+0x234>)
 8000de6:	2100      	movs	r1, #0
 8000de8:	54d1      	strb	r1, [r2, r3]
	  LEDMatrixBuffer[i*4+2] = ~(1<<i);
 8000dea:	2201      	movs	r2, #1
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	3302      	adds	r3, #2
 8000dfa:	43d2      	mvns	r2, r2
 8000dfc:	b2d1      	uxtb	r1, r2
 8000dfe:	4a59      	ldr	r2, [pc, #356]	; (8000f64 <main+0x234>)
 8000e00:	54d1      	strb	r1, [r2, r3]
	  LEDMatrixBuffer[i*4+3] = LEDMatrix[i];
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	3303      	adds	r3, #3
 8000e08:	4957      	ldr	r1, [pc, #348]	; (8000f68 <main+0x238>)
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	440a      	add	r2, r1
 8000e0e:	7811      	ldrb	r1, [r2, #0]
 8000e10:	4a54      	ldr	r2, [pc, #336]	; (8000f64 <main+0x234>)
 8000e12:	54d1      	strb	r1, [r2, r3]
  for(int i = 0; i < 4; i++){ //function to drive the LED's
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	3301      	adds	r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	ddd9      	ble.n	8000dd4 <main+0xa4>
  }

  LEDMatrixStart(LEDMatrix_Address);
 8000e20:	2048      	movs	r0, #72	; 0x48
 8000e22:	f7ff feb9 	bl	8000b98 <LEDMatrixStart>

  LCDPrepareInt();
 8000e26:	f7ff fd0b 	bl	8000840 <LCDPrepareInt>
  LCDWriteStringInt(0);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff fdac 	bl	8000988 <LCDWriteStringInt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  IWDG->KR = 0xAAAA; //reset the watchdog timer
 8000e30:	4b4e      	ldr	r3, [pc, #312]	; (8000f6c <main+0x23c>)
 8000e32:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000e36:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  brightness[0] = encoderValues[3];
 8000e38:	4b4d      	ldr	r3, [pc, #308]	; (8000f70 <main+0x240>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b4d      	ldr	r3, [pc, #308]	; (8000f74 <main+0x244>)
 8000e40:	701a      	strb	r2, [r3, #0]
	  brightness[1] = encoderValues[2];
 8000e42:	4b4b      	ldr	r3, [pc, #300]	; (8000f70 <main+0x240>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b4a      	ldr	r3, [pc, #296]	; (8000f74 <main+0x244>)
 8000e4a:	705a      	strb	r2, [r3, #1]
	  brightness[2] = encoderValues[1];
 8000e4c:	4b48      	ldr	r3, [pc, #288]	; (8000f70 <main+0x240>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4b48      	ldr	r3, [pc, #288]	; (8000f74 <main+0x244>)
 8000e54:	709a      	strb	r2, [r3, #2]
	  brightness[3] = encoderValues[0];
 8000e56:	4b46      	ldr	r3, [pc, #280]	; (8000f70 <main+0x240>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b45      	ldr	r3, [pc, #276]	; (8000f74 <main+0x244>)
 8000e5e:	70da      	strb	r2, [r3, #3]

	  //scan key matrix
	  for(int i = 0; i < 4; i++){
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	e01b      	b.n	8000e9e <main+0x16e>

		  GPIOA->BRR = (0b1111 << 4);  //clear all of PA 4,5,6,7
 8000e66:	4b44      	ldr	r3, [pc, #272]	; (8000f78 <main+0x248>)
 8000e68:	22f0      	movs	r2, #240	; 0xf0
 8000e6a:	615a      	str	r2, [r3, #20]
		  GPIOA->BSRR = (1 << (4+i));  //energize the ith row
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	3304      	adds	r3, #4
 8000e70:	2201      	movs	r2, #1
 8000e72:	409a      	lsls	r2, r3
 8000e74:	4b40      	ldr	r3, [pc, #256]	; (8000f78 <main+0x248>)
 8000e76:	611a      	str	r2, [r3, #16]
		  currentKeyMatrix |= ((((GPIOB->IDR) >> 3) & 0b11111) << (5*i)); //hmmmmmmmmm
 8000e78:	4b40      	ldr	r3, [pc, #256]	; (8000f7c <main+0x24c>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	08db      	lsrs	r3, r3, #3
 8000e7e:	f003 011f 	and.w	r1, r3, #31
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	4613      	mov	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	fa01 f203 	lsl.w	r2, r1, r3
 8000e8e:	4b3c      	ldr	r3, [pc, #240]	; (8000f80 <main+0x250>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	4a3a      	ldr	r2, [pc, #232]	; (8000f80 <main+0x250>)
 8000e96:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < 4; i++){
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	dde0      	ble.n	8000e66 <main+0x136>

	  }

	  //a key was pressed
	  if(currentKeyMatrix != lastKeyMatrix){
 8000ea4:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <main+0x250>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <main+0x254>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d047      	beq.n	8000f40 <main+0x210>

		  //handle keys here
		  for(int i = 0; i < 4; i++){
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	e014      	b.n	8000ee0 <main+0x1b0>

			  LEDMatrix[3-i] = (currentKeyMatrix >> ((5*i)+1)) & 0b1111;
 8000eb6:	4b32      	ldr	r3, [pc, #200]	; (8000f80 <main+0x250>)
 8000eb8:	6819      	ldr	r1, [r3, #0]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4413      	add	r3, r2
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f1c3 0303 	rsb	r3, r3, #3
 8000ed0:	f002 020f 	and.w	r2, r2, #15
 8000ed4:	b2d1      	uxtb	r1, r2
 8000ed6:	4a24      	ldr	r2, [pc, #144]	; (8000f68 <main+0x238>)
 8000ed8:	54d1      	strb	r1, [r2, r3]
		  for(int i = 0; i < 4; i++){
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3301      	adds	r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	dde7      	ble.n	8000eb6 <main+0x186>
			  //LEDMatrix[3-i] = (1<<i); //FRAK ZERO INDEXING alkfjngkjkfla (originally the idiot me had 4-i)
			  //hmmm, but on a more serious note tho, why is this array out of bounds not detected... that's definitely something to keep in mind
		  }
		  for(int i = 0; i < 4; i++){ //function to drive the LED's
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	e022      	b.n	8000f32 <main+0x202>

			  LEDMatrixBuffer[i*4] = 0b1111; //clear all pins first to prevent ghosting
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4a1c      	ldr	r2, [pc, #112]	; (8000f64 <main+0x234>)
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	54d1      	strb	r1, [r2, r3]
			  LEDMatrixBuffer[i*4+1] = 0x00;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	3301      	adds	r3, #1
 8000efc:	4a19      	ldr	r2, [pc, #100]	; (8000f64 <main+0x234>)
 8000efe:	2100      	movs	r1, #0
 8000f00:	54d1      	strb	r1, [r2, r3]
			  LEDMatrixBuffer[i*4+2] = ~(1<<i);
 8000f02:	2201      	movs	r2, #1
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	3302      	adds	r3, #2
 8000f12:	43d2      	mvns	r2, r2
 8000f14:	b2d1      	uxtb	r1, r2
 8000f16:	4a13      	ldr	r2, [pc, #76]	; (8000f64 <main+0x234>)
 8000f18:	54d1      	strb	r1, [r2, r3]
			  LEDMatrixBuffer[i*4+3] = LEDMatrix[i];
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	3303      	adds	r3, #3
 8000f20:	4911      	ldr	r1, [pc, #68]	; (8000f68 <main+0x238>)
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	440a      	add	r2, r1
 8000f26:	7811      	ldrb	r1, [r2, #0]
 8000f28:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <main+0x234>)
 8000f2a:	54d1      	strb	r1, [r2, r3]
		  for(int i = 0; i < 4; i++){ //function to drive the LED's
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	ddd9      	ble.n	8000eec <main+0x1bc>

		   }

		  lastKeyMatrix = currentKeyMatrix;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <main+0x250>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <main+0x254>)
 8000f3e:	6013      	str	r3, [r2, #0]
	  }

	  currentKeyMatrix = 0; //start afresh
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <main+0x250>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]


	  DWT_Delay_ms(10);
 8000f46:	200a      	movs	r0, #10
 8000f48:	f7ff f956 	bl	80001f8 <DWT_Delay_ms>
	  IWDG->KR = 0xAAAA; //reset the watchdog timer
 8000f4c:	e770      	b.n	8000e30 <main+0x100>
 8000f4e:	bf00      	nop
 8000f50:	200001b6 	.word	0x200001b6
 8000f54:	40005800 	.word	0x40005800
 8000f58:	40005400 	.word	0x40005400
 8000f5c:	40000400 	.word	0x40000400
 8000f60:	0800ac74 	.word	0x0800ac74
 8000f64:	20000424 	.word	0x20000424
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	40003000 	.word	0x40003000
 8000f70:	200001c0 	.word	0x200001c0
 8000f74:	20000004 	.word	0x20000004
 8000f78:	40010800 	.word	0x40010800
 8000f7c:	40010c00 	.word	0x40010c00
 8000f80:	200001d8 	.word	0x200001d8
 8000f84:	200001d4 	.word	0x200001d4

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b094      	sub	sp, #80	; 0x50
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f92:	2228      	movs	r2, #40	; 0x28
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f009 fe58 	bl	800ac4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fb8:	2309      	movs	r3, #9
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fd8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f004 fd54 	bl	8005a90 <HAL_RCC_OscConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000fee:	f000 fa6d 	bl	80014cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001002:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2102      	movs	r1, #2
 800100e:	4618      	mov	r0, r3
 8001010:	f004 ffbe 	bl	8005f90 <HAL_RCC_ClockConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800101a:	f000 fa57 	bl	80014cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800101e:	2312      	movs	r3, #18
 8001020:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001026:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	4618      	mov	r0, r3
 8001030:	f005 f936 	bl	80062a0 <HAL_RCCEx_PeriphCLKConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800103a:	f000 fa47 	bl	80014cc <Error_Handler>
  }
}
 800103e:	bf00      	nop
 8001040:	3750      	adds	r7, #80	; 0x50
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2101      	movs	r1, #1
 800104e:	201c      	movs	r0, #28
 8001050:	f001 f907 	bl	8002262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001054:	201c      	movs	r0, #28
 8001056:	f001 f920 	bl	800229a <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2102      	movs	r1, #2
 800105e:	201d      	movs	r0, #29
 8001060:	f001 f8ff 	bl	8002262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001064:	201d      	movs	r0, #29
 8001066:	f001 f918 	bl	800229a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	2010      	movs	r0, #16
 8001070:	f001 f8f7 	bl	8002262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001074:	2010      	movs	r0, #16
 8001076:	f001 f910 	bl	800229a <HAL_NVIC_EnableIRQ>
  /* I2C2_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2021      	movs	r0, #33	; 0x21
 8001080:	f001 f8ef 	bl	8002262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001084:	2021      	movs	r0, #33	; 0x21
 8001086:	f001 f908 	bl	800229a <HAL_NVIC_EnableIRQ>
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_ADC1_Init+0x74>)
 80010a2:	4a19      	ldr	r2, [pc, #100]	; (8001108 <MX_ADC1_Init+0x78>)
 80010a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_ADC1_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_ADC1_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_ADC1_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_ADC1_Init+0x74>)
 80010ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <MX_ADC1_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_ADC1_Init+0x74>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <MX_ADC1_Init+0x74>)
 80010ce:	f000 fde7 	bl	8001ca0 <HAL_ADC_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80010d8:	f000 f9f8 	bl	80014cc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_ADC1_Init+0x74>)
 80010ee:	f000 feaf 	bl	8001e50 <HAL_ADC_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80010f8:	f000 f9e8 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200005c0 	.word	0x200005c0
 8001108:	40012400 	.word	0x40012400

0800110c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_I2C1_Init+0x50>)
 8001112:	4a13      	ldr	r2, [pc, #76]	; (8001160 <MX_I2C1_Init+0x54>)
 8001114:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_I2C1_Init+0x50>)
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <MX_I2C1_Init+0x58>)
 800111a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_I2C1_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_I2C1_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_I2C1_Init+0x50>)
 800112a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800112e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <MX_I2C1_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_I2C1_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <MX_I2C1_Init+0x50>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_I2C1_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_I2C1_Init+0x50>)
 800114a:	f001 fc15 	bl	8002978 <HAL_I2C_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001154:	f000 f9ba 	bl	80014cc <Error_Handler>
  //dude, the code generation is evil... doesn't help you all the way!!! Came a gutsa so many times....


  /* USER CODE END I2C1_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000478 	.word	0x20000478
 8001160:	40005400 	.word	0x40005400
 8001164:	00061a80 	.word	0x00061a80

08001168 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_I2C2_Init+0x50>)
 800116e:	4a13      	ldr	r2, [pc, #76]	; (80011bc <MX_I2C2_Init+0x54>)
 8001170:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_I2C2_Init+0x50>)
 8001174:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <MX_I2C2_Init+0x58>)
 8001176:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_I2C2_Init+0x50>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_I2C2_Init+0x50>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_I2C2_Init+0x50>)
 8001186:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800118a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_I2C2_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_I2C2_Init+0x50>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <MX_I2C2_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_I2C2_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_I2C2_Init+0x50>)
 80011a6:	f001 fbe7 	bl	8002978 <HAL_I2C_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011b0:	f000 f98c 	bl	80014cc <Error_Handler>
  /* USER CODE BEGIN I2C2_Init 2 */
  //I2C2->CR2 |= (1<<9); //enable event interrupts
  //TODO: this is just temporarily here, might cause issues
  /* USER CODE END I2C2_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200004d8 	.word	0x200004d8
 80011bc:	40005800 	.word	0x40005800
 80011c0:	000186a0 	.word	0x000186a0

080011c4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_IWDG_Init+0x2c>)
 80011ca:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <MX_IWDG_Init+0x30>)
 80011cc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <MX_IWDG_Init+0x2c>)
 80011d0:	2202      	movs	r2, #2
 80011d2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_IWDG_Init+0x2c>)
 80011d6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80011da:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_IWDG_Init+0x2c>)
 80011de:	f003 f89b 	bl	8004318 <HAL_IWDG_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80011e8:	f000 f970 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200004cc 	.word	0x200004cc
 80011f4:	40003000 	.word	0x40003000

080011f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	463b      	mov	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001214:	4b25      	ldr	r3, [pc, #148]	; (80012ac <MX_TIM2_Init+0xb4>)
 8001216:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800121a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800121c:	4b23      	ldr	r3, [pc, #140]	; (80012ac <MX_TIM2_Init+0xb4>)
 800121e:	2201      	movs	r2, #1
 8001220:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b22      	ldr	r3, [pc, #136]	; (80012ac <MX_TIM2_Init+0xb4>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 511;
 8001228:	4b20      	ldr	r3, [pc, #128]	; (80012ac <MX_TIM2_Init+0xb4>)
 800122a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800122e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_TIM2_Init+0xb4>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001236:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <MX_TIM2_Init+0xb4>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800123c:	481b      	ldr	r0, [pc, #108]	; (80012ac <MX_TIM2_Init+0xb4>)
 800123e:	f005 f8e5 	bl	800640c <HAL_TIM_Base_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001248:	f000 f940 	bl	80014cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001250:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	4619      	mov	r1, r3
 8001258:	4814      	ldr	r0, [pc, #80]	; (80012ac <MX_TIM2_Init+0xb4>)
 800125a:	f005 fa2e 	bl	80066ba <HAL_TIM_ConfigClockSource>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001264:	f000 f932 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001268:	2300      	movs	r3, #0
 800126a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	4619      	mov	r1, r3
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <MX_TIM2_Init+0xb4>)
 8001276:	f005 fbfd 	bl	8006a74 <HAL_TIMEx_MasterConfigSynchronization>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001280:	f000 f924 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIM2->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the BAM Interrupt is triggered
 8001284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800128e:	f023 0302 	bic.w	r3, r3, #2
 8001292:	6013      	str	r3, [r2, #0]
  TIM2->DIER |= 1; //Update interrupt enable
 8001294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	60d3      	str	r3, [r2, #12]

  /* USER CODE END TIM2_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200005f0 	.word	0x200005f0

080012b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	463b      	mov	r3, r7
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <MX_TIM3_Init+0xac>)
 80012ce:	4a24      	ldr	r2, [pc, #144]	; (8001360 <MX_TIM3_Init+0xb0>)
 80012d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <MX_TIM3_Init+0xac>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d8:	4b20      	ldr	r3, [pc, #128]	; (800135c <MX_TIM3_Init+0xac>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16383;
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <MX_TIM3_Init+0xac>)
 80012e0:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80012e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_TIM3_Init+0xac>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MX_TIM3_Init+0xac>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012f2:	481a      	ldr	r0, [pc, #104]	; (800135c <MX_TIM3_Init+0xac>)
 80012f4:	f005 f88a 	bl	800640c <HAL_TIM_Base_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80012fe:	f000 f8e5 	bl	80014cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001306:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4619      	mov	r1, r3
 800130e:	4813      	ldr	r0, [pc, #76]	; (800135c <MX_TIM3_Init+0xac>)
 8001310:	f005 f9d3 	bl	80066ba <HAL_TIM_ConfigClockSource>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800131a:	f000 f8d7 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	4619      	mov	r1, r3
 800132a:	480c      	ldr	r0, [pc, #48]	; (800135c <MX_TIM3_Init+0xac>)
 800132c:	f005 fba2 	bl	8006a74 <HAL_TIMEx_MasterConfigSynchronization>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001336:	f000 f8c9 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the Encoder Scan Interrupt is triggered
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_TIM3_Init+0xb0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a08      	ldr	r2, [pc, #32]	; (8001360 <MX_TIM3_Init+0xb0>)
 8001340:	f023 0302 	bic.w	r3, r3, #2
 8001344:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= 1; //Update interrupt enable
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_TIM3_Init+0xb0>)
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <MX_TIM3_Init+0xb0>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM3_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000052c 	.word	0x2000052c
 8001360:	40000400 	.word	0x40000400

08001364 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_DMA_Init+0x28>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	4a07      	ldr	r2, [pc, #28]	; (800138c <MX_DMA_Init+0x28>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6153      	str	r3, [r2, #20]
 8001376:	4b05      	ldr	r3, [pc, #20]	; (800138c <MX_DMA_Init+0x28>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	40021000 	.word	0x40021000

08001390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a4:	4b45      	ldr	r3, [pc, #276]	; (80014bc <MX_GPIO_Init+0x12c>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a44      	ldr	r2, [pc, #272]	; (80014bc <MX_GPIO_Init+0x12c>)
 80013aa:	f043 0310 	orr.w	r3, r3, #16
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b42      	ldr	r3, [pc, #264]	; (80014bc <MX_GPIO_Init+0x12c>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013bc:	4b3f      	ldr	r3, [pc, #252]	; (80014bc <MX_GPIO_Init+0x12c>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a3e      	ldr	r2, [pc, #248]	; (80014bc <MX_GPIO_Init+0x12c>)
 80013c2:	f043 0320 	orr.w	r3, r3, #32
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <MX_GPIO_Init+0x12c>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b39      	ldr	r3, [pc, #228]	; (80014bc <MX_GPIO_Init+0x12c>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a38      	ldr	r2, [pc, #224]	; (80014bc <MX_GPIO_Init+0x12c>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b36      	ldr	r3, [pc, #216]	; (80014bc <MX_GPIO_Init+0x12c>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	4b33      	ldr	r3, [pc, #204]	; (80014bc <MX_GPIO_Init+0x12c>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a32      	ldr	r2, [pc, #200]	; (80014bc <MX_GPIO_Init+0x12c>)
 80013f2:	f043 0308 	orr.w	r3, r3, #8
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b30      	ldr	r3, [pc, #192]	; (80014bc <MX_GPIO_Init+0x12c>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800140a:	482d      	ldr	r0, [pc, #180]	; (80014c0 <MX_GPIO_Init+0x130>)
 800140c:	f001 fa9c 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001410:	2200      	movs	r2, #0
 8001412:	f248 11f0 	movw	r1, #33264	; 0x81f0
 8001416:	482b      	ldr	r0, [pc, #172]	; (80014c4 <MX_GPIO_Init+0x134>)
 8001418:	f001 fa96 	bl	8002948 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800141c:	2200      	movs	r2, #0
 800141e:	f24f 0102 	movw	r1, #61442	; 0xf002
 8001422:	4829      	ldr	r0, [pc, #164]	; (80014c8 <MX_GPIO_Init+0x138>)
 8001424:	f001 fa90 	bl	8002948 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001428:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800142c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	4619      	mov	r1, r3
 8001440:	481f      	ldr	r0, [pc, #124]	; (80014c0 <MX_GPIO_Init+0x130>)
 8001442:	f001 f927 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001446:	f248 13f0 	movw	r3, #33264	; 0x81f0
 800144a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	4619      	mov	r1, r3
 800145e:	4819      	ldr	r0, [pc, #100]	; (80014c4 <MX_GPIO_Init+0x134>)
 8001460:	f001 f918 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001464:	f24f 0302 	movw	r3, #61442	; 0xf002
 8001468:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	4619      	mov	r1, r3
 800147c:	4812      	ldr	r0, [pc, #72]	; (80014c8 <MX_GPIO_Init+0x138>)
 800147e:	f001 f909 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001482:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	4619      	mov	r1, r3
 8001496:	480b      	ldr	r0, [pc, #44]	; (80014c4 <MX_GPIO_Init+0x134>)
 8001498:	f001 f8fc 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800149c:	23f8      	movs	r3, #248	; 0xf8
 800149e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014a4:	2302      	movs	r3, #2
 80014a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4619      	mov	r1, r3
 80014ae:	4806      	ldr	r0, [pc, #24]	; (80014c8 <MX_GPIO_Init+0x138>)
 80014b0:	f001 f8f0 	bl	8002694 <HAL_GPIO_Init>

}
 80014b4:	bf00      	nop
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40011000 	.word	0x40011000
 80014c4:	40010800 	.word	0x40010800
 80014c8:	40010c00 	.word	0x40010c00

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <Error_Handler+0x6>

080014d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_MspInit+0x5c>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	4a14      	ldr	r2, [pc, #80]	; (8001530 <HAL_MspInit+0x5c>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6193      	str	r3, [r2, #24]
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_MspInit+0x5c>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_MspInit+0x5c>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_MspInit+0x5c>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_MspInit+0x5c>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_MspInit+0x60>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <HAL_MspInit+0x60>)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000

08001538 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <HAL_ADC_MspInit+0x6c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d121      	bne.n	800159c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <HAL_ADC_MspInit+0x70>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <HAL_ADC_MspInit+0x70>)
 800155e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_ADC_MspInit+0x70>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <HAL_ADC_MspInit+0x70>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a0c      	ldr	r2, [pc, #48]	; (80015a8 <HAL_ADC_MspInit+0x70>)
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_ADC_MspInit+0x70>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001588:	230f      	movs	r3, #15
 800158a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800158c:	2303      	movs	r3, #3
 800158e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	4619      	mov	r1, r3
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <HAL_ADC_MspInit+0x74>)
 8001598:	f001 f87c 	bl	8002694 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40012400 	.word	0x40012400
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010800 	.word	0x40010800

080015b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	; 0x30
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a58      	ldr	r2, [pc, #352]	; (800172c <HAL_I2C_MspInit+0x17c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d159      	bne.n	8001684 <HAL_I2C_MspInit+0xd4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d0:	4b57      	ldr	r3, [pc, #348]	; (8001730 <HAL_I2C_MspInit+0x180>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a56      	ldr	r2, [pc, #344]	; (8001730 <HAL_I2C_MspInit+0x180>)
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b54      	ldr	r3, [pc, #336]	; (8001730 <HAL_I2C_MspInit+0x180>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ee:	2312      	movs	r3, #18
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	484d      	ldr	r0, [pc, #308]	; (8001734 <HAL_I2C_MspInit+0x184>)
 80015fe:	f001 f849 	bl	8002694 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001602:	4b4d      	ldr	r3, [pc, #308]	; (8001738 <HAL_I2C_MspInit+0x188>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001618:	4a47      	ldr	r2, [pc, #284]	; (8001738 <HAL_I2C_MspInit+0x188>)
 800161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800161e:	4b44      	ldr	r3, [pc, #272]	; (8001730 <HAL_I2C_MspInit+0x180>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a43      	ldr	r2, [pc, #268]	; (8001730 <HAL_I2C_MspInit+0x180>)
 8001624:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b41      	ldr	r3, [pc, #260]	; (8001730 <HAL_I2C_MspInit+0x180>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001636:	4b41      	ldr	r3, [pc, #260]	; (800173c <HAL_I2C_MspInit+0x18c>)
 8001638:	4a41      	ldr	r2, [pc, #260]	; (8001740 <HAL_I2C_MspInit+0x190>)
 800163a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800163c:	4b3f      	ldr	r3, [pc, #252]	; (800173c <HAL_I2C_MspInit+0x18c>)
 800163e:	2210      	movs	r2, #16
 8001640:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001642:	4b3e      	ldr	r3, [pc, #248]	; (800173c <HAL_I2C_MspInit+0x18c>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001648:	4b3c      	ldr	r3, [pc, #240]	; (800173c <HAL_I2C_MspInit+0x18c>)
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <HAL_I2C_MspInit+0x18c>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001654:	4b39      	ldr	r3, [pc, #228]	; (800173c <HAL_I2C_MspInit+0x18c>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 800165a:	4b38      	ldr	r3, [pc, #224]	; (800173c <HAL_I2C_MspInit+0x18c>)
 800165c:	2220      	movs	r2, #32
 800165e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001660:	4b36      	ldr	r3, [pc, #216]	; (800173c <HAL_I2C_MspInit+0x18c>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001666:	4835      	ldr	r0, [pc, #212]	; (800173c <HAL_I2C_MspInit+0x18c>)
 8001668:	f000 fe32 	bl	80022d0 <HAL_DMA_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 8001672:	f7ff ff2b 	bl	80014cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a30      	ldr	r2, [pc, #192]	; (800173c <HAL_I2C_MspInit+0x18c>)
 800167a:	635a      	str	r2, [r3, #52]	; 0x34
 800167c:	4a2f      	ldr	r2, [pc, #188]	; (800173c <HAL_I2C_MspInit+0x18c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001682:	e04f      	b.n	8001724 <HAL_I2C_MspInit+0x174>
  else if(hi2c->Instance==I2C2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a2e      	ldr	r2, [pc, #184]	; (8001744 <HAL_I2C_MspInit+0x194>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d14a      	bne.n	8001724 <HAL_I2C_MspInit+0x174>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	4b28      	ldr	r3, [pc, #160]	; (8001730 <HAL_I2C_MspInit+0x180>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	4a27      	ldr	r2, [pc, #156]	; (8001730 <HAL_I2C_MspInit+0x180>)
 8001694:	f043 0308 	orr.w	r3, r3, #8
 8001698:	6193      	str	r3, [r2, #24]
 800169a:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_I2C_MspInit+0x180>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ac:	2312      	movs	r3, #18
 80016ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	481e      	ldr	r0, [pc, #120]	; (8001734 <HAL_I2C_MspInit+0x184>)
 80016bc:	f000 ffea 	bl	8002694 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_I2C_MspInit+0x180>)
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	4a1a      	ldr	r2, [pc, #104]	; (8001730 <HAL_I2C_MspInit+0x180>)
 80016c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ca:	61d3      	str	r3, [r2, #28]
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_I2C_MspInit+0x180>)
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_I2C_MspInit+0x198>)
 80016da:	4a1c      	ldr	r2, [pc, #112]	; (800174c <HAL_I2C_MspInit+0x19c>)
 80016dc:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <HAL_I2C_MspInit+0x198>)
 80016e0:	2210      	movs	r2, #16
 80016e2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_I2C_MspInit+0x198>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_I2C_MspInit+0x198>)
 80016ec:	2280      	movs	r2, #128	; 0x80
 80016ee:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_I2C_MspInit+0x198>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_I2C_MspInit+0x198>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_I2C_MspInit+0x198>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_I2C_MspInit+0x198>)
 8001704:	2200      	movs	r2, #0
 8001706:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001708:	480f      	ldr	r0, [pc, #60]	; (8001748 <HAL_I2C_MspInit+0x198>)
 800170a:	f000 fde1 	bl	80022d0 <HAL_DMA_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_I2C_MspInit+0x168>
      Error_Handler();
 8001714:	f7ff feda 	bl	80014cc <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <HAL_I2C_MspInit+0x198>)
 800171c:	635a      	str	r2, [r3, #52]	; 0x34
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <HAL_I2C_MspInit+0x198>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001724:	bf00      	nop
 8001726:	3730      	adds	r7, #48	; 0x30
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40005400 	.word	0x40005400
 8001730:	40021000 	.word	0x40021000
 8001734:	40010c00 	.word	0x40010c00
 8001738:	40010000 	.word	0x40010000
 800173c:	20000434 	.word	0x20000434
 8001740:	4002006c 	.word	0x4002006c
 8001744:	40005800 	.word	0x40005800
 8001748:	20000574 	.word	0x20000574
 800174c:	40020044 	.word	0x40020044

08001750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001760:	d10c      	bne.n	800177c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_TIM_Base_MspInit+0x58>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <HAL_TIM_Base_MspInit+0x58>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	61d3      	str	r3, [r2, #28]
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_TIM_Base_MspInit+0x58>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800177a:	e010      	b.n	800179e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <HAL_TIM_Base_MspInit+0x5c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d10b      	bne.n	800179e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_TIM_Base_MspInit+0x58>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_TIM_Base_MspInit+0x58>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	61d3      	str	r3, [r2, #28]
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_TIM_Base_MspInit+0x58>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40000400 	.word	0x40000400

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <NMI_Handler+0x4>

080017b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <MemManage_Handler+0x4>

080017c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <UsageFault_Handler+0x4>

080017ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f6:	f000 fa37 	bl	8001c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	//GPIOA->BRR = 1<<6;



  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <DMA1_Channel6_IRQHandler+0x10>)
 8001806:	f000 fe33 	bl	8002470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  //GPIOA->BSRR = 1<<6;
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000434 	.word	0x20000434

08001814 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800181a:	f002 fee7 	bl	80045ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200012d0 	.word	0x200012d0

08001828 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//GPIOA->BSRR = 1<<6;
	if(BAMIndex == 0){
 800182c:	4b44      	ldr	r3, [pc, #272]	; (8001940 <TIM2_IRQHandler+0x118>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d102      	bne.n	800183c <TIM2_IRQHandler+0x14>
		blocked = 1; //block to protect the time sensitive LSB's, otherwise it gets pretty flicker-ry
 8001836:	4b43      	ldr	r3, [pc, #268]	; (8001944 <TIM2_IRQHandler+0x11c>)
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]


	}

	if(brightness[0] & (1 << BAMIndex))	GPIOB->BSRR = (1<<12);
 800183c:	4b42      	ldr	r3, [pc, #264]	; (8001948 <TIM2_IRQHandler+0x120>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	461a      	mov	r2, r3
 8001844:	4b3e      	ldr	r3, [pc, #248]	; (8001940 <TIM2_IRQHandler+0x118>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	fa42 f303 	asr.w	r3, r2, r3
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d004      	beq.n	8001860 <TIM2_IRQHandler+0x38>
 8001856:	4b3d      	ldr	r3, [pc, #244]	; (800194c <TIM2_IRQHandler+0x124>)
 8001858:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800185c:	611a      	str	r2, [r3, #16]
 800185e:	e003      	b.n	8001868 <TIM2_IRQHandler+0x40>
	else GPIOB->BRR = (1<<12);
 8001860:	4b3a      	ldr	r3, [pc, #232]	; (800194c <TIM2_IRQHandler+0x124>)
 8001862:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001866:	615a      	str	r2, [r3, #20]
	if(brightness[1] & (1 << BAMIndex))	GPIOB->BSRR = (1<<13);
 8001868:	4b37      	ldr	r3, [pc, #220]	; (8001948 <TIM2_IRQHandler+0x120>)
 800186a:	785b      	ldrb	r3, [r3, #1]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	4b33      	ldr	r3, [pc, #204]	; (8001940 <TIM2_IRQHandler+0x118>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	fa42 f303 	asr.w	r3, r2, r3
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d004      	beq.n	800188c <TIM2_IRQHandler+0x64>
 8001882:	4b32      	ldr	r3, [pc, #200]	; (800194c <TIM2_IRQHandler+0x124>)
 8001884:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001888:	611a      	str	r2, [r3, #16]
 800188a:	e003      	b.n	8001894 <TIM2_IRQHandler+0x6c>
	else GPIOB->BRR = (1<<13);
 800188c:	4b2f      	ldr	r3, [pc, #188]	; (800194c <TIM2_IRQHandler+0x124>)
 800188e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001892:	615a      	str	r2, [r3, #20]
	if(brightness[2] & (1 << BAMIndex))	GPIOB->BSRR = (1<<14);
 8001894:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <TIM2_IRQHandler+0x120>)
 8001896:	789b      	ldrb	r3, [r3, #2]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	4b28      	ldr	r3, [pc, #160]	; (8001940 <TIM2_IRQHandler+0x118>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	fa42 f303 	asr.w	r3, r2, r3
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d004      	beq.n	80018b8 <TIM2_IRQHandler+0x90>
 80018ae:	4b27      	ldr	r3, [pc, #156]	; (800194c <TIM2_IRQHandler+0x124>)
 80018b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018b4:	611a      	str	r2, [r3, #16]
 80018b6:	e003      	b.n	80018c0 <TIM2_IRQHandler+0x98>
	else GPIOB->BRR = (1<<14);
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <TIM2_IRQHandler+0x124>)
 80018ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018be:	615a      	str	r2, [r3, #20]
	if(brightness[3] & (1 << BAMIndex))	GPIOB->BSRR = (1<<15);
 80018c0:	4b21      	ldr	r3, [pc, #132]	; (8001948 <TIM2_IRQHandler+0x120>)
 80018c2:	78db      	ldrb	r3, [r3, #3]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <TIM2_IRQHandler+0x118>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	fa42 f303 	asr.w	r3, r2, r3
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d004      	beq.n	80018e4 <TIM2_IRQHandler+0xbc>
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <TIM2_IRQHandler+0x124>)
 80018dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018e0:	611a      	str	r2, [r3, #16]
 80018e2:	e003      	b.n	80018ec <TIM2_IRQHandler+0xc4>
	else GPIOB->BRR = (1<<15);
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <TIM2_IRQHandler+0x124>)
 80018e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018ea:	615a      	str	r2, [r3, #20]


*/

	//FIXME this might potentially cause issues, as it blocks for half of the time
	if(BAMIndex == 5){
 80018ec:	4b14      	ldr	r3, [pc, #80]	; (8001940 <TIM2_IRQHandler+0x118>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b05      	cmp	r3, #5
 80018f4:	d102      	bne.n	80018fc <TIM2_IRQHandler+0xd4>
		blocked = 0; //Time sensitive LSB's are done, unblock, value of 3 or less gives visible flicker
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <TIM2_IRQHandler+0x11c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]

	}

	if(BAMIndex == 7){ //We've passed one BAM cycle
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <TIM2_IRQHandler+0x118>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b07      	cmp	r3, #7
 8001904:	d109      	bne.n	800191a <TIM2_IRQHandler+0xf2>


		BAMIndex = 0;
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <TIM2_IRQHandler+0x118>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = 1;
 800190c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001910:	2201      	movs	r2, #1
 8001912:	629a      	str	r2, [r3, #40]	; 0x28

		if(updateLCD){
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <TIM2_IRQHandler+0x128>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	e00d      	b.n	8001936 <TIM2_IRQHandler+0x10e>



	}
	else{
		BAMIndex++;
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <TIM2_IRQHandler+0x118>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	3301      	adds	r3, #1
 8001922:	b2da      	uxtb	r2, r3
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <TIM2_IRQHandler+0x118>)
 8001926:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = (volatile)(TIM2->PSC << 1); //set next write to occupy twice the time of this current write.
 8001928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	6293      	str	r3, [r2, #40]	; 0x28
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001936:	4807      	ldr	r0, [pc, #28]	; (8001954 <TIM2_IRQHandler+0x12c>)
 8001938:	f004 fdb7 	bl	80064aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200001b5 	.word	0x200001b5
 8001944:	200001b6 	.word	0x200001b6
 8001948:	20000004 	.word	0x20000004
 800194c:	40010c00 	.word	0x40010c00
 8001950:	200001b2 	.word	0x200001b2
 8001954:	200005f0 	.word	0x200005f0

08001958 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	//GPIOA->BSRR = 1<<6;
	uint8_t currentReadoff = ((((GPIOA->IDR)>>9) & 1) << 1) | (((GPIOA->IDR)>>10) & 1); //read current encoder state
 800195e:	4b4b      	ldr	r3, [pc, #300]	; (8001a8c <TIM3_IRQHandler+0x134>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	0a5b      	lsrs	r3, r3, #9
 8001964:	b2db      	uxtb	r3, r3
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	b2db      	uxtb	r3, r3
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b46      	ldr	r3, [pc, #280]	; (8001a8c <TIM3_IRQHandler+0x134>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	0a9b      	lsrs	r3, r3, #10
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	b2db      	uxtb	r3, r3
 800197e:	4313      	orrs	r3, r2
 8001980:	71fb      	strb	r3, [r7, #7]
	uint8_t index = (lastEncoder[currentEncoder]<<2) | currentReadoff;
 8001982:	4b43      	ldr	r3, [pc, #268]	; (8001a90 <TIM3_IRQHandler+0x138>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	4b42      	ldr	r3, [pc, #264]	; (8001a94 <TIM3_IRQHandler+0x13c>)
 800198c:	5c9b      	ldrb	r3, [r3, r2]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	b25a      	sxtb	r2, r3
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	4313      	orrs	r3, r2
 800199a:	b25b      	sxtb	r3, r3
 800199c:	71bb      	strb	r3, [r7, #6]
	encoderValues[currentEncoder] += encoderLUT[index];
 800199e:	79bb      	ldrb	r3, [r7, #6]
 80019a0:	4a3d      	ldr	r2, [pc, #244]	; (8001a98 <TIM3_IRQHandler+0x140>)
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
 80019a4:	b259      	sxtb	r1, r3
 80019a6:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <TIM3_IRQHandler+0x138>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4610      	mov	r0, r2
 80019ae:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <TIM3_IRQHandler+0x144>)
 80019b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80019b4:	4608      	mov	r0, r1
 80019b6:	4611      	mov	r1, r2
 80019b8:	4403      	add	r3, r0
 80019ba:	4a38      	ldr	r2, [pc, #224]	; (8001a9c <TIM3_IRQHandler+0x144>)
 80019bc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	encoderChanged[currentEncoder] = encoderLUT[index];
 80019c0:	79bb      	ldrb	r3, [r7, #6]
 80019c2:	4a35      	ldr	r2, [pc, #212]	; (8001a98 <TIM3_IRQHandler+0x140>)
 80019c4:	5cd3      	ldrb	r3, [r2, r3]
 80019c6:	b259      	sxtb	r1, r3
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <TIM3_IRQHandler+0x138>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	461a      	mov	r2, r3
 80019d0:	b2c9      	uxtb	r1, r1
 80019d2:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <TIM3_IRQHandler+0x148>)
 80019d4:	5499      	strb	r1, [r3, r2]

	//constrain encoderValues
	if(encoderValues[currentEncoder] > 255) encoderValues[currentEncoder] = 255;
 80019d6:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <TIM3_IRQHandler+0x138>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	4b2f      	ldr	r3, [pc, #188]	; (8001a9c <TIM3_IRQHandler+0x144>)
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	2bff      	cmp	r3, #255	; 0xff
 80019e6:	dd07      	ble.n	80019f8 <TIM3_IRQHandler+0xa0>
 80019e8:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <TIM3_IRQHandler+0x138>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	4619      	mov	r1, r3
 80019f0:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <TIM3_IRQHandler+0x144>)
 80019f2:	22ff      	movs	r2, #255	; 0xff
 80019f4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	if(encoderValues[currentEncoder] < 0) encoderValues[currentEncoder] = 0;
 80019f8:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <TIM3_IRQHandler+0x138>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <TIM3_IRQHandler+0x144>)
 8001a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	da07      	bge.n	8001a1a <TIM3_IRQHandler+0xc2>
 8001a0a:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <TIM3_IRQHandler+0x138>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	4619      	mov	r1, r3
 8001a12:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <TIM3_IRQHandler+0x144>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	lastEncoder[currentEncoder] = currentReadoff;
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <TIM3_IRQHandler+0x138>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4619      	mov	r1, r3
 8001a22:	4a1c      	ldr	r2, [pc, #112]	; (8001a94 <TIM3_IRQHandler+0x13c>)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	5453      	strb	r3, [r2, r1]
	//uint8_t buffer[256];
	//sprintf(buffer, "currentReadoff %d index %d encoderValue %d\r\n", currentReadoff, index, encoderValues[0]);
	//CDC_Transmit_FS(buffer, sizeof(buffer));
	//}

	if(currentEncoder == 4) currentEncoder = 0;
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <TIM3_IRQHandler+0x138>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d103      	bne.n	8001a3a <TIM3_IRQHandler+0xe2>
 8001a32:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <TIM3_IRQHandler+0x138>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	e006      	b.n	8001a48 <TIM3_IRQHandler+0xf0>
	else currentEncoder++;
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <TIM3_IRQHandler+0x138>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	3301      	adds	r3, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <TIM3_IRQHandler+0x138>)
 8001a46:	701a      	strb	r2, [r3, #0]

	//select the nth encoder here to allow the mux time to settle
	GPIOC->BRR = (3<<13); //clear GPIO Pins
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <TIM3_IRQHandler+0x14c>)
 8001a4a:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001a4e:	615a      	str	r2, [r3, #20]
	GPIOC->BSRR = ((currentEncoder&3)<<13);
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <TIM3_IRQHandler+0x138>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	035b      	lsls	r3, r3, #13
 8001a58:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <TIM3_IRQHandler+0x14c>)
 8001a5a:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8001a5e:	6113      	str	r3, [r2, #16]
	GPIOA->BRR = (1<<15);
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <TIM3_IRQHandler+0x134>)
 8001a62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a66:	615a      	str	r2, [r3, #20]
	if(currentEncoder&4) GPIOA->BSRR = (1<<15); //BLOODY SOLDER DAG!!! Shorted out the pins giving the result in DS14
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <TIM3_IRQHandler+0x138>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <TIM3_IRQHandler+0x126>
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <TIM3_IRQHandler+0x134>)
 8001a78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a7c:	611a      	str	r2, [r3, #16]

	//GPIOA->BRR = 1<<6;
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a7e:	480a      	ldr	r0, [pc, #40]	; (8001aa8 <TIM3_IRQHandler+0x150>)
 8001a80:	f004 fd13 	bl	80064aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40010800 	.word	0x40010800
 8001a90:	200001b7 	.word	0x200001b7
 8001a94:	200001b8 	.word	0x200001b8
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	200001c0 	.word	0x200001c0
 8001aa0:	200005b8 	.word	0x200005b8
 8001aa4:	40011000 	.word	0x40011000
 8001aa8:	2000052c 	.word	0x2000052c

08001aac <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
	if(I2C2->SR1 & (1<<2)){ //BTF is set
 8001ab0:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <I2C2_EV_IRQHandler+0xc0>)
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d052      	beq.n	8001b62 <I2C2_EV_IRQHandler+0xb6>
		GPIOB->BSRR = 1<<1;
 8001abc:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <I2C2_EV_IRQHandler+0xc4>)
 8001abe:	2202      	movs	r2, #2
 8001ac0:	611a      	str	r2, [r3, #16]
		//I2C2->CR2 &= ~(1<<11); //disable I2C2 DMA requesting
		//I2C2->CR1 |= (1<<9); //send stop condition



		if(cycleEN){
 8001ac2:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <I2C2_EV_IRQHandler+0xc8>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d01b      	beq.n	8001b04 <I2C2_EV_IRQHandler+0x58>

			GPIOA->BRR = 1<<8;
 8001acc:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <I2C2_EV_IRQHandler+0xcc>)
 8001ace:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ad2:	615a      	str	r2, [r3, #20]
			GPIOA->BSRR = 1<<8; //this pulse is 100ns, aka too short, datasheet specifies min of 230 ns
 8001ad4:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <I2C2_EV_IRQHandler+0xcc>)
 8001ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ada:	611a      	str	r2, [r3, #16]
			GPIOA->BSRR = 1<<8;
 8001adc:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <I2C2_EV_IRQHandler+0xcc>)
 8001ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae2:	611a      	str	r2, [r3, #16]
			GPIOA->BSRR = 1<<8;
 8001ae4:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <I2C2_EV_IRQHandler+0xcc>)
 8001ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aea:	611a      	str	r2, [r3, #16]
			GPIOA->BSRR = 1<<8;
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <I2C2_EV_IRQHandler+0xcc>)
 8001aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001af2:	611a      	str	r2, [r3, #16]
			GPIOA->BSRR = 1<<8;
 8001af4:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <I2C2_EV_IRQHandler+0xcc>)
 8001af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001afa:	611a      	str	r2, [r3, #16]
			GPIOA->BRR = 1<<8;
 8001afc:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <I2C2_EV_IRQHandler+0xcc>)
 8001afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b02:	615a      	str	r2, [r3, #20]


		}

		if(currentLCDByte == 0){
 8001b04:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <I2C2_EV_IRQHandler+0xd0>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10d      	bne.n	8001b2a <I2C2_EV_IRQHandler+0x7e>

			// we're done with the command byte, set RS
			GPIOB->BSRR = (1<<1);
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <I2C2_EV_IRQHandler+0xc4>)
 8001b10:	2202      	movs	r2, #2
 8001b12:	611a      	str	r2, [r3, #16]
			currentLCDByte++;
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <I2C2_EV_IRQHandler+0xd0>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <I2C2_EV_IRQHandler+0xd0>)
 8001b20:	701a      	strb	r2, [r3, #0]
			//I2C2->DR = LCDBuffer[currentLCDByte+currentLCDSection * 9];
			I2C2->DR = 0x42;
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <I2C2_EV_IRQHandler+0xc0>)
 8001b24:	2242      	movs	r2, #66	; 0x42
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	e018      	b.n	8001b5c <I2C2_EV_IRQHandler+0xb0>

		}
		else if(currentLCDByte == 8){
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <I2C2_EV_IRQHandler+0xd0>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d109      	bne.n	8001b48 <I2C2_EV_IRQHandler+0x9c>

			//we're done with all characters, disable cycleEN
			cycleEN = 0;
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <I2C2_EV_IRQHandler+0xc8>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]

			I2C2->CR1 |= (1<<9); //send stop condition
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <I2C2_EV_IRQHandler+0xc0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <I2C2_EV_IRQHandler+0xc0>)
 8001b40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e009      	b.n	8001b5c <I2C2_EV_IRQHandler+0xb0>

		}
		else{

			currentLCDByte++;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <I2C2_EV_IRQHandler+0xd0>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <I2C2_EV_IRQHandler+0xd0>)
 8001b54:	701a      	strb	r2, [r3, #0]
			//load in next byte into DR here
			//I2C2->DR = LCDBuffer[currentLCDByte+currentLCDSection * 9];
			I2C2->DR = 0x42;
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <I2C2_EV_IRQHandler+0xc0>)
 8001b58:	2242      	movs	r2, #66	; 0x42
 8001b5a:	611a      	str	r2, [r3, #16]

		}
		GPIOB->BRR = 1<<1;
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <I2C2_EV_IRQHandler+0xc4>)
 8001b5e:	2202      	movs	r2, #2
 8001b60:	615a      	str	r2, [r3, #20]


	}

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001b62:	4807      	ldr	r0, [pc, #28]	; (8001b80 <I2C2_EV_IRQHandler+0xd4>)
 8001b64:	f001 f840 	bl	8002be8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40005800 	.word	0x40005800
 8001b70:	40010c00 	.word	0x40010c00
 8001b74:	200001b3 	.word	0x200001b3
 8001b78:	40010800 	.word	0x40010800
 8001b7c:	200001b4 	.word	0x200001b4
 8001b80:	200004d8 	.word	0x200004d8

08001b84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <Reset_Handler>:
 8001b90:	2100      	movs	r1, #0
 8001b92:	e003      	b.n	8001b9c <LoopCopyDataInit>

08001b94 <CopyDataInit>:
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <LoopFillZerobss+0x14>)
 8001b96:	585b      	ldr	r3, [r3, r1]
 8001b98:	5043      	str	r3, [r0, r1]
 8001b9a:	3104      	adds	r1, #4

08001b9c <LoopCopyDataInit>:
 8001b9c:	480a      	ldr	r0, [pc, #40]	; (8001bc8 <LoopFillZerobss+0x18>)
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <LoopFillZerobss+0x1c>)
 8001ba0:	1842      	adds	r2, r0, r1
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d3f6      	bcc.n	8001b94 <CopyDataInit>
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <LoopFillZerobss+0x20>)
 8001ba8:	e002      	b.n	8001bb0 <LoopFillZerobss>

08001baa <FillZerobss>:
 8001baa:	2300      	movs	r3, #0
 8001bac:	f842 3b04 	str.w	r3, [r2], #4

08001bb0 <LoopFillZerobss>:
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <LoopFillZerobss+0x24>)
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d3f9      	bcc.n	8001baa <FillZerobss>
 8001bb6:	f7ff ffe5 	bl	8001b84 <SystemInit>
 8001bba:	f009 f823 	bl	800ac04 <__libc_init_array>
 8001bbe:	f7ff f8b7 	bl	8000d30 <main>
 8001bc2:	4770      	bx	lr
 8001bc4:	0800acf8 	.word	0x0800acf8
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000194 	.word	0x20000194
 8001bd0:	20000194 	.word	0x20000194
 8001bd4:	200015bc 	.word	0x200015bc

08001bd8 <ADC1_2_IRQHandler>:
 8001bd8:	e7fe      	b.n	8001bd8 <ADC1_2_IRQHandler>
	...

08001bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_Init+0x28>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <HAL_Init+0x28>)
 8001be6:	f043 0310 	orr.w	r3, r3, #16
 8001bea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bec:	2003      	movs	r0, #3
 8001bee:	f000 fb2d 	bl	800224c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f000 f808 	bl	8001c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf8:	f7ff fc6c 	bl	80014d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40022000 	.word	0x40022000

08001c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_InitTick+0x54>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_InitTick+0x58>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fb45 	bl	80022b6 <HAL_SYSTICK_Config>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00e      	b.n	8001c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b0f      	cmp	r3, #15
 8001c3a:	d80a      	bhi.n	8001c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f000 fb0d 	bl	8002262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c48:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <HAL_InitTick+0x5c>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e000      	b.n	8001c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000018 	.word	0x20000018
 8001c60:	20000020 	.word	0x20000020
 8001c64:	2000001c 	.word	0x2000001c

08001c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_IncTick+0x1c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_IncTick+0x20>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a03      	ldr	r2, [pc, #12]	; (8001c88 <HAL_IncTick+0x20>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	20000020 	.word	0x20000020
 8001c88:	20000638 	.word	0x20000638

08001c8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c90:	4b02      	ldr	r3, [pc, #8]	; (8001c9c <HAL_GetTick+0x10>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	20000638 	.word	0x20000638

08001ca0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e0be      	b.n	8001e40 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d109      	bne.n	8001ce4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff fc2a 	bl	8001538 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f9ab 	bl	8002040 <ADC_ConversionStop_Disable>
 8001cea:	4603      	mov	r3, r0
 8001cec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f040 8099 	bne.w	8001e2e <HAL_ADC_Init+0x18e>
 8001cfc:	7dfb      	ldrb	r3, [r7, #23]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f040 8095 	bne.w	8001e2e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d0c:	f023 0302 	bic.w	r3, r3, #2
 8001d10:	f043 0202 	orr.w	r2, r3, #2
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d20:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	7b1b      	ldrb	r3, [r3, #12]
 8001d26:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d28:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d38:	d003      	beq.n	8001d42 <HAL_ADC_Init+0xa2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d102      	bne.n	8001d48 <HAL_ADC_Init+0xa8>
 8001d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d46:	e000      	b.n	8001d4a <HAL_ADC_Init+0xaa>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7d1b      	ldrb	r3, [r3, #20]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d119      	bne.n	8001d8c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7b1b      	ldrb	r3, [r3, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	035a      	lsls	r2, r3, #13
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	e00b      	b.n	8001d8c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d78:	f043 0220 	orr.w	r2, r3, #32
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	f043 0201 	orr.w	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <HAL_ADC_Init+0x1a8>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	68b9      	ldr	r1, [r7, #8]
 8001db0:	430b      	orrs	r3, r1
 8001db2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dbc:	d003      	beq.n	8001dc6 <HAL_ADC_Init+0x126>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d104      	bne.n	8001dd0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	051b      	lsls	r3, r3, #20
 8001dce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_ADC_Init+0x1ac>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d10b      	bne.n	8001e0c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	f023 0303 	bic.w	r3, r3, #3
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e0a:	e018      	b.n	8001e3e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	f023 0312 	bic.w	r3, r3, #18
 8001e14:	f043 0210 	orr.w	r2, r3, #16
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	f043 0201 	orr.w	r2, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e2c:	e007      	b.n	8001e3e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	f043 0210 	orr.w	r2, r3, #16
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	ffe1f7fd 	.word	0xffe1f7fd
 8001e4c:	ff1f0efe 	.word	0xff1f0efe

08001e50 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x20>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e0dc      	b.n	800202a <HAL_ADC_ConfigChannel+0x1da>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b06      	cmp	r3, #6
 8001e7e:	d81c      	bhi.n	8001eba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	3b05      	subs	r3, #5
 8001e92:	221f      	movs	r2, #31
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	4019      	ands	r1, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3b05      	subs	r3, #5
 8001eac:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	635a      	str	r2, [r3, #52]	; 0x34
 8001eb8:	e03c      	b.n	8001f34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b0c      	cmp	r3, #12
 8001ec0:	d81c      	bhi.n	8001efc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3b23      	subs	r3, #35	; 0x23
 8001ed4:	221f      	movs	r2, #31
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	4019      	ands	r1, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	3b23      	subs	r3, #35	; 0x23
 8001eee:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	631a      	str	r2, [r3, #48]	; 0x30
 8001efa:	e01b      	b.n	8001f34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b41      	subs	r3, #65	; 0x41
 8001f0e:	221f      	movs	r2, #31
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	4019      	ands	r1, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	3b41      	subs	r3, #65	; 0x41
 8001f28:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b09      	cmp	r3, #9
 8001f3a:	d91c      	bls.n	8001f76 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68d9      	ldr	r1, [r3, #12]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3b1e      	subs	r3, #30
 8001f4e:	2207      	movs	r2, #7
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	4019      	ands	r1, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6898      	ldr	r0, [r3, #8]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	3b1e      	subs	r3, #30
 8001f68:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	60da      	str	r2, [r3, #12]
 8001f74:	e019      	b.n	8001faa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6919      	ldr	r1, [r3, #16]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	2207      	movs	r2, #7
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	4019      	ands	r1, r3
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	6898      	ldr	r0, [r3, #8]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b10      	cmp	r3, #16
 8001fb0:	d003      	beq.n	8001fba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fb6:	2b11      	cmp	r3, #17
 8001fb8:	d132      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a1d      	ldr	r2, [pc, #116]	; (8002034 <HAL_ADC_ConfigChannel+0x1e4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d125      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d126      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fe0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b10      	cmp	r3, #16
 8001fe8:	d11a      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fea:	4b13      	ldr	r3, [pc, #76]	; (8002038 <HAL_ADC_ConfigChannel+0x1e8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a13      	ldr	r2, [pc, #76]	; (800203c <HAL_ADC_ConfigChannel+0x1ec>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	0c9a      	lsrs	r2, r3, #18
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002000:	e002      	b.n	8002008 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	3b01      	subs	r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f9      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x1b2>
 800200e:	e007      	b.n	8002020 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	f043 0220 	orr.w	r2, r3, #32
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	40012400 	.word	0x40012400
 8002038:	20000018 	.word	0x20000018
 800203c:	431bde83 	.word	0x431bde83

08002040 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b01      	cmp	r3, #1
 8002058:	d127      	bne.n	80020aa <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800206a:	f7ff fe0f 	bl	8001c8c <HAL_GetTick>
 800206e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002070:	e014      	b.n	800209c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002072:	f7ff fe0b 	bl	8001c8c <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d90d      	bls.n	800209c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	f043 0210 	orr.w	r2, r3, #16
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	f043 0201 	orr.w	r2, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e007      	b.n	80020ac <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d0e3      	beq.n	8002072 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <__NVIC_SetPriorityGrouping>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d0:	4013      	ands	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e6:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	60d3      	str	r3, [r2, #12]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <__NVIC_GetPriorityGrouping+0x18>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	0a1b      	lsrs	r3, r3, #8
 8002106:	f003 0307 	and.w	r3, r3, #7
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	2b00      	cmp	r3, #0
 8002128:	db0b      	blt.n	8002142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	f003 021f 	and.w	r2, r3, #31
 8002130:	4906      	ldr	r1, [pc, #24]	; (800214c <__NVIC_EnableIRQ+0x34>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	2001      	movs	r0, #1
 800213a:	fa00 f202 	lsl.w	r2, r0, r2
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	e000e100 	.word	0xe000e100

08002150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	; (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	; (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b04      	cmp	r3, #4
 80021c0:	bf28      	it	cs
 80021c2:	2304      	movcs	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
         );
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002218:	d301      	bcc.n	800221e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221a:	2301      	movs	r3, #1
 800221c:	e00f      	b.n	800223e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <SysTick_Config+0x40>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002226:	210f      	movs	r1, #15
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f7ff ff90 	bl	8002150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <SysTick_Config+0x40>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002236:	4b04      	ldr	r3, [pc, #16]	; (8002248 <SysTick_Config+0x40>)
 8002238:	2207      	movs	r2, #7
 800223a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	e000e010 	.word	0xe000e010

0800224c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff2d 	bl	80020b4 <__NVIC_SetPriorityGrouping>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002274:	f7ff ff42 	bl	80020fc <__NVIC_GetPriorityGrouping>
 8002278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	6978      	ldr	r0, [r7, #20]
 8002280:	f7ff ff90 	bl	80021a4 <NVIC_EncodePriority>
 8002284:	4602      	mov	r2, r0
 8002286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff5f 	bl	8002150 <__NVIC_SetPriority>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff35 	bl	8002118 <__NVIC_EnableIRQ>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ffa2 	bl	8002208 <SysTick_Config>
 80022c4:	4603      	mov	r3, r0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e043      	b.n	800236e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b22      	ldr	r3, [pc, #136]	; (8002378 <HAL_DMA_Init+0xa8>)
 80022ee:	4413      	add	r3, r2
 80022f0:	4a22      	ldr	r2, [pc, #136]	; (800237c <HAL_DMA_Init+0xac>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	009a      	lsls	r2, r3, #2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a1f      	ldr	r2, [pc, #124]	; (8002380 <HAL_DMA_Init+0xb0>)
 8002302:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800231a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800231e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002328:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002334:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002340:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4313      	orrs	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	bffdfff8 	.word	0xbffdfff8
 800237c:	cccccccd 	.word	0xcccccccd
 8002380:	40020000 	.word	0x40020000

08002384 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002396:	2b02      	cmp	r3, #2
 8002398:	d005      	beq.n	80023a6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2204      	movs	r2, #4
 800239e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e051      	b.n	800244a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 020e 	bic.w	r2, r2, #14
 80023b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a22      	ldr	r2, [pc, #136]	; (8002454 <HAL_DMA_Abort_IT+0xd0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d029      	beq.n	8002424 <HAL_DMA_Abort_IT+0xa0>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a20      	ldr	r2, [pc, #128]	; (8002458 <HAL_DMA_Abort_IT+0xd4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d022      	beq.n	8002420 <HAL_DMA_Abort_IT+0x9c>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1f      	ldr	r2, [pc, #124]	; (800245c <HAL_DMA_Abort_IT+0xd8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d01a      	beq.n	800241a <HAL_DMA_Abort_IT+0x96>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <HAL_DMA_Abort_IT+0xdc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d012      	beq.n	8002414 <HAL_DMA_Abort_IT+0x90>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1c      	ldr	r2, [pc, #112]	; (8002464 <HAL_DMA_Abort_IT+0xe0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00a      	beq.n	800240e <HAL_DMA_Abort_IT+0x8a>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <HAL_DMA_Abort_IT+0xe4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d102      	bne.n	8002408 <HAL_DMA_Abort_IT+0x84>
 8002402:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002406:	e00e      	b.n	8002426 <HAL_DMA_Abort_IT+0xa2>
 8002408:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800240c:	e00b      	b.n	8002426 <HAL_DMA_Abort_IT+0xa2>
 800240e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002412:	e008      	b.n	8002426 <HAL_DMA_Abort_IT+0xa2>
 8002414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002418:	e005      	b.n	8002426 <HAL_DMA_Abort_IT+0xa2>
 800241a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800241e:	e002      	b.n	8002426 <HAL_DMA_Abort_IT+0xa2>
 8002420:	2310      	movs	r3, #16
 8002422:	e000      	b.n	8002426 <HAL_DMA_Abort_IT+0xa2>
 8002424:	2301      	movs	r3, #1
 8002426:	4a11      	ldr	r2, [pc, #68]	; (800246c <HAL_DMA_Abort_IT+0xe8>)
 8002428:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4798      	blx	r3
    } 
  }
  return status;
 800244a:	7bfb      	ldrb	r3, [r7, #15]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40020008 	.word	0x40020008
 8002458:	4002001c 	.word	0x4002001c
 800245c:	40020030 	.word	0x40020030
 8002460:	40020044 	.word	0x40020044
 8002464:	40020058 	.word	0x40020058
 8002468:	4002006c 	.word	0x4002006c
 800246c:	40020000 	.word	0x40020000

08002470 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	2204      	movs	r2, #4
 800248e:	409a      	lsls	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d04f      	beq.n	8002538 <HAL_DMA_IRQHandler+0xc8>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d04a      	beq.n	8002538 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d107      	bne.n	80024c0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0204 	bic.w	r2, r2, #4
 80024be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a66      	ldr	r2, [pc, #408]	; (8002660 <HAL_DMA_IRQHandler+0x1f0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d029      	beq.n	800251e <HAL_DMA_IRQHandler+0xae>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a65      	ldr	r2, [pc, #404]	; (8002664 <HAL_DMA_IRQHandler+0x1f4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d022      	beq.n	800251a <HAL_DMA_IRQHandler+0xaa>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a63      	ldr	r2, [pc, #396]	; (8002668 <HAL_DMA_IRQHandler+0x1f8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d01a      	beq.n	8002514 <HAL_DMA_IRQHandler+0xa4>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a62      	ldr	r2, [pc, #392]	; (800266c <HAL_DMA_IRQHandler+0x1fc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d012      	beq.n	800250e <HAL_DMA_IRQHandler+0x9e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a60      	ldr	r2, [pc, #384]	; (8002670 <HAL_DMA_IRQHandler+0x200>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00a      	beq.n	8002508 <HAL_DMA_IRQHandler+0x98>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a5f      	ldr	r2, [pc, #380]	; (8002674 <HAL_DMA_IRQHandler+0x204>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d102      	bne.n	8002502 <HAL_DMA_IRQHandler+0x92>
 80024fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002500:	e00e      	b.n	8002520 <HAL_DMA_IRQHandler+0xb0>
 8002502:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002506:	e00b      	b.n	8002520 <HAL_DMA_IRQHandler+0xb0>
 8002508:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800250c:	e008      	b.n	8002520 <HAL_DMA_IRQHandler+0xb0>
 800250e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002512:	e005      	b.n	8002520 <HAL_DMA_IRQHandler+0xb0>
 8002514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002518:	e002      	b.n	8002520 <HAL_DMA_IRQHandler+0xb0>
 800251a:	2340      	movs	r3, #64	; 0x40
 800251c:	e000      	b.n	8002520 <HAL_DMA_IRQHandler+0xb0>
 800251e:	2304      	movs	r3, #4
 8002520:	4a55      	ldr	r2, [pc, #340]	; (8002678 <HAL_DMA_IRQHandler+0x208>)
 8002522:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 8094 	beq.w	8002656 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002536:	e08e      	b.n	8002656 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	2202      	movs	r2, #2
 800253e:	409a      	lsls	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d056      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x186>
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d051      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10b      	bne.n	8002578 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 020a 	bic.w	r2, r2, #10
 800256e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a38      	ldr	r2, [pc, #224]	; (8002660 <HAL_DMA_IRQHandler+0x1f0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d029      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x166>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a37      	ldr	r2, [pc, #220]	; (8002664 <HAL_DMA_IRQHandler+0x1f4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d022      	beq.n	80025d2 <HAL_DMA_IRQHandler+0x162>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a35      	ldr	r2, [pc, #212]	; (8002668 <HAL_DMA_IRQHandler+0x1f8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d01a      	beq.n	80025cc <HAL_DMA_IRQHandler+0x15c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a34      	ldr	r2, [pc, #208]	; (800266c <HAL_DMA_IRQHandler+0x1fc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d012      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x156>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a32      	ldr	r2, [pc, #200]	; (8002670 <HAL_DMA_IRQHandler+0x200>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d00a      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x150>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a31      	ldr	r2, [pc, #196]	; (8002674 <HAL_DMA_IRQHandler+0x204>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d102      	bne.n	80025ba <HAL_DMA_IRQHandler+0x14a>
 80025b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025b8:	e00e      	b.n	80025d8 <HAL_DMA_IRQHandler+0x168>
 80025ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025be:	e00b      	b.n	80025d8 <HAL_DMA_IRQHandler+0x168>
 80025c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c4:	e008      	b.n	80025d8 <HAL_DMA_IRQHandler+0x168>
 80025c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ca:	e005      	b.n	80025d8 <HAL_DMA_IRQHandler+0x168>
 80025cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025d0:	e002      	b.n	80025d8 <HAL_DMA_IRQHandler+0x168>
 80025d2:	2320      	movs	r3, #32
 80025d4:	e000      	b.n	80025d8 <HAL_DMA_IRQHandler+0x168>
 80025d6:	2302      	movs	r3, #2
 80025d8:	4a27      	ldr	r2, [pc, #156]	; (8002678 <HAL_DMA_IRQHandler+0x208>)
 80025da:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d034      	beq.n	8002656 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025f4:	e02f      	b.n	8002656 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	2208      	movs	r2, #8
 80025fc:	409a      	lsls	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d028      	beq.n	8002658 <HAL_DMA_IRQHandler+0x1e8>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d023      	beq.n	8002658 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 020e 	bic.w	r2, r2, #14
 800261e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002628:	2101      	movs	r1, #1
 800262a:	fa01 f202 	lsl.w	r2, r1, r2
 800262e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	2b00      	cmp	r3, #0
 800264c:	d004      	beq.n	8002658 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	4798      	blx	r3
    }
  }
  return;
 8002656:	bf00      	nop
 8002658:	bf00      	nop
}
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40020008 	.word	0x40020008
 8002664:	4002001c 	.word	0x4002001c
 8002668:	40020030 	.word	0x40020030
 800266c:	40020044 	.word	0x40020044
 8002670:	40020058 	.word	0x40020058
 8002674:	4002006c 	.word	0x4002006c
 8002678:	40020000 	.word	0x40020000

0800267c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002694:	b480      	push	{r7}
 8002696:	b08b      	sub	sp, #44	; 0x2c
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026a2:	2300      	movs	r3, #0
 80026a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a6:	e127      	b.n	80028f8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026a8:	2201      	movs	r2, #1
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	f040 8116 	bne.w	80028f2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b12      	cmp	r3, #18
 80026cc:	d034      	beq.n	8002738 <HAL_GPIO_Init+0xa4>
 80026ce:	2b12      	cmp	r3, #18
 80026d0:	d80d      	bhi.n	80026ee <HAL_GPIO_Init+0x5a>
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d02b      	beq.n	800272e <HAL_GPIO_Init+0x9a>
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d804      	bhi.n	80026e4 <HAL_GPIO_Init+0x50>
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d031      	beq.n	8002742 <HAL_GPIO_Init+0xae>
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d01c      	beq.n	800271c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026e2:	e048      	b.n	8002776 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d043      	beq.n	8002770 <HAL_GPIO_Init+0xdc>
 80026e8:	2b11      	cmp	r3, #17
 80026ea:	d01b      	beq.n	8002724 <HAL_GPIO_Init+0x90>
          break;
 80026ec:	e043      	b.n	8002776 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80026ee:	4a89      	ldr	r2, [pc, #548]	; (8002914 <HAL_GPIO_Init+0x280>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d026      	beq.n	8002742 <HAL_GPIO_Init+0xae>
 80026f4:	4a87      	ldr	r2, [pc, #540]	; (8002914 <HAL_GPIO_Init+0x280>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d806      	bhi.n	8002708 <HAL_GPIO_Init+0x74>
 80026fa:	4a87      	ldr	r2, [pc, #540]	; (8002918 <HAL_GPIO_Init+0x284>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d020      	beq.n	8002742 <HAL_GPIO_Init+0xae>
 8002700:	4a86      	ldr	r2, [pc, #536]	; (800291c <HAL_GPIO_Init+0x288>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d01d      	beq.n	8002742 <HAL_GPIO_Init+0xae>
          break;
 8002706:	e036      	b.n	8002776 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002708:	4a85      	ldr	r2, [pc, #532]	; (8002920 <HAL_GPIO_Init+0x28c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d019      	beq.n	8002742 <HAL_GPIO_Init+0xae>
 800270e:	4a85      	ldr	r2, [pc, #532]	; (8002924 <HAL_GPIO_Init+0x290>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d016      	beq.n	8002742 <HAL_GPIO_Init+0xae>
 8002714:	4a84      	ldr	r2, [pc, #528]	; (8002928 <HAL_GPIO_Init+0x294>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <HAL_GPIO_Init+0xae>
          break;
 800271a:	e02c      	b.n	8002776 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	623b      	str	r3, [r7, #32]
          break;
 8002722:	e028      	b.n	8002776 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	3304      	adds	r3, #4
 800272a:	623b      	str	r3, [r7, #32]
          break;
 800272c:	e023      	b.n	8002776 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	3308      	adds	r3, #8
 8002734:	623b      	str	r3, [r7, #32]
          break;
 8002736:	e01e      	b.n	8002776 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	330c      	adds	r3, #12
 800273e:	623b      	str	r3, [r7, #32]
          break;
 8002740:	e019      	b.n	8002776 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d102      	bne.n	8002750 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800274a:	2304      	movs	r3, #4
 800274c:	623b      	str	r3, [r7, #32]
          break;
 800274e:	e012      	b.n	8002776 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d105      	bne.n	8002764 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002758:	2308      	movs	r3, #8
 800275a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	611a      	str	r2, [r3, #16]
          break;
 8002762:	e008      	b.n	8002776 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002764:	2308      	movs	r3, #8
 8002766:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	615a      	str	r2, [r3, #20]
          break;
 800276e:	e002      	b.n	8002776 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002770:	2300      	movs	r3, #0
 8002772:	623b      	str	r3, [r7, #32]
          break;
 8002774:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	2bff      	cmp	r3, #255	; 0xff
 800277a:	d801      	bhi.n	8002780 <HAL_GPIO_Init+0xec>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	e001      	b.n	8002784 <HAL_GPIO_Init+0xf0>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2bff      	cmp	r3, #255	; 0xff
 800278a:	d802      	bhi.n	8002792 <HAL_GPIO_Init+0xfe>
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	e002      	b.n	8002798 <HAL_GPIO_Init+0x104>
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	3b08      	subs	r3, #8
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	210f      	movs	r1, #15
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	401a      	ands	r2, r3
 80027aa:	6a39      	ldr	r1, [r7, #32]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	431a      	orrs	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 8096 	beq.w	80028f2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027c6:	4b59      	ldr	r3, [pc, #356]	; (800292c <HAL_GPIO_Init+0x298>)
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	4a58      	ldr	r2, [pc, #352]	; (800292c <HAL_GPIO_Init+0x298>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6193      	str	r3, [r2, #24]
 80027d2:	4b56      	ldr	r3, [pc, #344]	; (800292c <HAL_GPIO_Init+0x298>)
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027de:	4a54      	ldr	r2, [pc, #336]	; (8002930 <HAL_GPIO_Init+0x29c>)
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	3302      	adds	r3, #2
 80027e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	220f      	movs	r2, #15
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a4b      	ldr	r2, [pc, #300]	; (8002934 <HAL_GPIO_Init+0x2a0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <HAL_GPIO_Init+0x19e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a4a      	ldr	r2, [pc, #296]	; (8002938 <HAL_GPIO_Init+0x2a4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00d      	beq.n	800282e <HAL_GPIO_Init+0x19a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a49      	ldr	r2, [pc, #292]	; (800293c <HAL_GPIO_Init+0x2a8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d007      	beq.n	800282a <HAL_GPIO_Init+0x196>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a48      	ldr	r2, [pc, #288]	; (8002940 <HAL_GPIO_Init+0x2ac>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d101      	bne.n	8002826 <HAL_GPIO_Init+0x192>
 8002822:	2303      	movs	r3, #3
 8002824:	e006      	b.n	8002834 <HAL_GPIO_Init+0x1a0>
 8002826:	2304      	movs	r3, #4
 8002828:	e004      	b.n	8002834 <HAL_GPIO_Init+0x1a0>
 800282a:	2302      	movs	r3, #2
 800282c:	e002      	b.n	8002834 <HAL_GPIO_Init+0x1a0>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_GPIO_Init+0x1a0>
 8002832:	2300      	movs	r3, #0
 8002834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002836:	f002 0203 	and.w	r2, r2, #3
 800283a:	0092      	lsls	r2, r2, #2
 800283c:	4093      	lsls	r3, r2
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002844:	493a      	ldr	r1, [pc, #232]	; (8002930 <HAL_GPIO_Init+0x29c>)
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	3302      	adds	r3, #2
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d006      	beq.n	800286c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800285e:	4b39      	ldr	r3, [pc, #228]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4938      	ldr	r1, [pc, #224]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
 800286a:	e006      	b.n	800287a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800286c:	4b35      	ldr	r3, [pc, #212]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	43db      	mvns	r3, r3
 8002874:	4933      	ldr	r1, [pc, #204]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 8002876:	4013      	ands	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d006      	beq.n	8002894 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002886:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	492e      	ldr	r1, [pc, #184]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
 8002892:	e006      	b.n	80028a2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002894:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	43db      	mvns	r3, r3
 800289c:	4929      	ldr	r1, [pc, #164]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 800289e:	4013      	ands	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d006      	beq.n	80028bc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028ae:	4b25      	ldr	r3, [pc, #148]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	4924      	ldr	r1, [pc, #144]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
 80028ba:	e006      	b.n	80028ca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028bc:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	491f      	ldr	r1, [pc, #124]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d006      	beq.n	80028e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028d6:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	491a      	ldr	r1, [pc, #104]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60cb      	str	r3, [r1, #12]
 80028e2:	e006      	b.n	80028f2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028e4:	4b17      	ldr	r3, [pc, #92]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	4915      	ldr	r1, [pc, #84]	; (8002944 <HAL_GPIO_Init+0x2b0>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	3301      	adds	r3, #1
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	f47f aed0 	bne.w	80026a8 <HAL_GPIO_Init+0x14>
  }
}
 8002908:	bf00      	nop
 800290a:	372c      	adds	r7, #44	; 0x2c
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	10210000 	.word	0x10210000
 8002918:	10110000 	.word	0x10110000
 800291c:	10120000 	.word	0x10120000
 8002920:	10310000 	.word	0x10310000
 8002924:	10320000 	.word	0x10320000
 8002928:	10220000 	.word	0x10220000
 800292c:	40021000 	.word	0x40021000
 8002930:	40010000 	.word	0x40010000
 8002934:	40010800 	.word	0x40010800
 8002938:	40010c00 	.word	0x40010c00
 800293c:	40011000 	.word	0x40011000
 8002940:	40011400 	.word	0x40011400
 8002944:	40010400 	.word	0x40010400

08002948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	807b      	strh	r3, [r7, #2]
 8002954:	4613      	mov	r3, r2
 8002956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002958:	787b      	ldrb	r3, [r7, #1]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800295e:	887a      	ldrh	r2, [r7, #2]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002964:	e003      	b.n	800296e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002966:	887b      	ldrh	r3, [r7, #2]
 8002968:	041a      	lsls	r2, r3, #16
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	611a      	str	r2, [r3, #16]
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e11f      	b.n	8002bca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fe fe06 	bl	80015b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2224      	movs	r2, #36	; 0x24
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029dc:	f003 fc2e 	bl	800623c <HAL_RCC_GetPCLK1Freq>
 80029e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4a7b      	ldr	r2, [pc, #492]	; (8002bd4 <HAL_I2C_Init+0x25c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d807      	bhi.n	80029fc <HAL_I2C_Init+0x84>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a7a      	ldr	r2, [pc, #488]	; (8002bd8 <HAL_I2C_Init+0x260>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	bf94      	ite	ls
 80029f4:	2301      	movls	r3, #1
 80029f6:	2300      	movhi	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	e006      	b.n	8002a0a <HAL_I2C_Init+0x92>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4a77      	ldr	r2, [pc, #476]	; (8002bdc <HAL_I2C_Init+0x264>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	bf94      	ite	ls
 8002a04:	2301      	movls	r3, #1
 8002a06:	2300      	movhi	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e0db      	b.n	8002bca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4a72      	ldr	r2, [pc, #456]	; (8002be0 <HAL_I2C_Init+0x268>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	0c9b      	lsrs	r3, r3, #18
 8002a1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a64      	ldr	r2, [pc, #400]	; (8002bd4 <HAL_I2C_Init+0x25c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d802      	bhi.n	8002a4c <HAL_I2C_Init+0xd4>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	e009      	b.n	8002a60 <HAL_I2C_Init+0xe8>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	4a63      	ldr	r2, [pc, #396]	; (8002be4 <HAL_I2C_Init+0x26c>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	099b      	lsrs	r3, r3, #6
 8002a5e:	3301      	adds	r3, #1
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	430b      	orrs	r3, r1
 8002a66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4956      	ldr	r1, [pc, #344]	; (8002bd4 <HAL_I2C_Init+0x25c>)
 8002a7c:	428b      	cmp	r3, r1
 8002a7e:	d80d      	bhi.n	8002a9c <HAL_I2C_Init+0x124>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1e59      	subs	r1, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	bf38      	it	cc
 8002a98:	2304      	movcc	r3, #4
 8002a9a:	e04f      	b.n	8002b3c <HAL_I2C_Init+0x1c4>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d111      	bne.n	8002ac8 <HAL_I2C_Init+0x150>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e58      	subs	r0, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	440b      	add	r3, r1
 8002ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	e012      	b.n	8002aee <HAL_I2C_Init+0x176>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1e58      	subs	r0, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	0099      	lsls	r1, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_Init+0x17e>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e022      	b.n	8002b3c <HAL_I2C_Init+0x1c4>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10e      	bne.n	8002b1c <HAL_I2C_Init+0x1a4>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1e58      	subs	r0, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6859      	ldr	r1, [r3, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	440b      	add	r3, r1
 8002b0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b1a:	e00f      	b.n	8002b3c <HAL_I2C_Init+0x1c4>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1e58      	subs	r0, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	0099      	lsls	r1, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b32:	3301      	adds	r3, #1
 8002b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	6809      	ldr	r1, [r1, #0]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6911      	ldr	r1, [r2, #16]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68d2      	ldr	r2, [r2, #12]
 8002b76:	4311      	orrs	r1, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	000186a0 	.word	0x000186a0
 8002bd8:	001e847f 	.word	0x001e847f
 8002bdc:	003d08ff 	.word	0x003d08ff
 8002be0:	431bde83 	.word	0x431bde83
 8002be4:	10624dd3 	.word	0x10624dd3

08002be8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c08:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c10:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	2b10      	cmp	r3, #16
 8002c16:	d003      	beq.n	8002c20 <HAL_I2C_EV_IRQHandler+0x38>
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	2b40      	cmp	r3, #64	; 0x40
 8002c1c:	f040 80bd 	bne.w	8002d9a <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10d      	bne.n	8002c56 <HAL_I2C_EV_IRQHandler+0x6e>
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002c40:	d003      	beq.n	8002c4a <HAL_I2C_EV_IRQHandler+0x62>
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002c48:	d101      	bne.n	8002c4e <HAL_I2C_EV_IRQHandler+0x66>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_I2C_EV_IRQHandler+0x68>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	f000 812e 	beq.w	8002eb2 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00c      	beq.n	8002c7a <HAL_I2C_EV_IRQHandler+0x92>
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	0a5b      	lsrs	r3, r3, #9
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d006      	beq.n	8002c7a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f001 fb39 	bl	80042e4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fcb1 	bl	80035da <I2C_Master_SB>
 8002c78:	e08e      	b.n	8002d98 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	08db      	lsrs	r3, r3, #3
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d009      	beq.n	8002c9a <HAL_I2C_EV_IRQHandler+0xb2>
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	0a5b      	lsrs	r3, r3, #9
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fd26 	bl	80036e4 <I2C_Master_ADD10>
 8002c98:	e07e      	b.n	8002d98 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <HAL_I2C_EV_IRQHandler+0xd2>
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	0a5b      	lsrs	r3, r3, #9
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd3f 	bl	8003736 <I2C_Master_ADDR>
 8002cb8:	e06e      	b.n	8002d98 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	089b      	lsrs	r3, r3, #2
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d037      	beq.n	8002d36 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cd4:	f000 80ef 	beq.w	8002eb6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	09db      	lsrs	r3, r3, #7
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00f      	beq.n	8002d04 <HAL_I2C_EV_IRQHandler+0x11c>
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	0a9b      	lsrs	r3, r3, #10
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d009      	beq.n	8002d04 <HAL_I2C_EV_IRQHandler+0x11c>
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d103      	bne.n	8002d04 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f93e 	bl	8002f7e <I2C_MasterTransmit_TXE>
 8002d02:	e049      	b.n	8002d98 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	089b      	lsrs	r3, r3, #2
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80d2 	beq.w	8002eb6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	0a5b      	lsrs	r3, r3, #9
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80cb 	beq.w	8002eb6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	2b10      	cmp	r3, #16
 8002d24:	d103      	bne.n	8002d2e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f9c5 	bl	80030b6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d2c:	e0c3      	b.n	8002eb6 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fa29 	bl	8003186 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d34:	e0bf      	b.n	8002eb6 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d44:	f000 80b7 	beq.w	8002eb6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	099b      	lsrs	r3, r3, #6
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00f      	beq.n	8002d74 <HAL_I2C_EV_IRQHandler+0x18c>
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	0a9b      	lsrs	r3, r3, #10
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d009      	beq.n	8002d74 <HAL_I2C_EV_IRQHandler+0x18c>
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	089b      	lsrs	r3, r3, #2
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d103      	bne.n	8002d74 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fa99 	bl	80032a4 <I2C_MasterReceive_RXNE>
 8002d72:	e011      	b.n	8002d98 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	089b      	lsrs	r3, r3, #2
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 809a 	beq.w	8002eb6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	0a5b      	lsrs	r3, r3, #9
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 8093 	beq.w	8002eb6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fb38 	bl	8003406 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d96:	e08e      	b.n	8002eb6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002d98:	e08d      	b.n	8002eb6 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d004      	beq.n	8002dac <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	e007      	b.n	8002dbc <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d012      	beq.n	8002dee <HAL_I2C_EV_IRQHandler+0x206>
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	0a5b      	lsrs	r3, r3, #9
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00c      	beq.n	8002dee <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002de4:	69b9      	ldr	r1, [r7, #24]
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fefc 	bl	8003be4 <I2C_Slave_ADDR>
 8002dec:	e066      	b.n	8002ebc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_I2C_EV_IRQHandler+0x226>
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	0a5b      	lsrs	r3, r3, #9
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 ff30 	bl	8003c6c <I2C_Slave_STOPF>
 8002e0c:	e056      	b.n	8002ebc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e0e:	7bbb      	ldrb	r3, [r7, #14]
 8002e10:	2b21      	cmp	r3, #33	; 0x21
 8002e12:	d002      	beq.n	8002e1a <HAL_I2C_EV_IRQHandler+0x232>
 8002e14:	7bbb      	ldrb	r3, [r7, #14]
 8002e16:	2b29      	cmp	r3, #41	; 0x29
 8002e18:	d125      	bne.n	8002e66 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	09db      	lsrs	r3, r3, #7
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00f      	beq.n	8002e46 <HAL_I2C_EV_IRQHandler+0x25e>
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	0a9b      	lsrs	r3, r3, #10
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <HAL_I2C_EV_IRQHandler+0x25e>
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	089b      	lsrs	r3, r3, #2
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d103      	bne.n	8002e46 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fe14 	bl	8003a6c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e44:	e039      	b.n	8002eba <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	089b      	lsrs	r3, r3, #2
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d033      	beq.n	8002eba <HAL_I2C_EV_IRQHandler+0x2d2>
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	0a5b      	lsrs	r3, r3, #9
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d02d      	beq.n	8002eba <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fe41 	bl	8003ae6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e64:	e029      	b.n	8002eba <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	099b      	lsrs	r3, r3, #6
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00f      	beq.n	8002e92 <HAL_I2C_EV_IRQHandler+0x2aa>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	0a9b      	lsrs	r3, r3, #10
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <HAL_I2C_EV_IRQHandler+0x2aa>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d103      	bne.n	8002e92 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fe4b 	bl	8003b26 <I2C_SlaveReceive_RXNE>
 8002e90:	e014      	b.n	8002ebc <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00e      	beq.n	8002ebc <HAL_I2C_EV_IRQHandler+0x2d4>
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	0a5b      	lsrs	r3, r3, #9
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fe79 	bl	8003ba2 <I2C_SlaveReceive_BTF>
 8002eb0:	e004      	b.n	8002ebc <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8002eb2:	bf00      	nop
 8002eb4:	e002      	b.n	8002ebc <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eb6:	bf00      	nop
 8002eb8:	e000      	b.n	8002ebc <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002eba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002ebc:	3720      	adds	r7, #32
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr

08002f0a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	460b      	mov	r3, r1
 8002f14:	70fb      	strb	r3, [r7, #3]
 8002f16:	4613      	mov	r3, r2
 8002f18:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr

08002f5a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr

08002f7e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f94:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d150      	bne.n	8003046 <I2C_MasterTransmit_TXE+0xc8>
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	2b21      	cmp	r3, #33	; 0x21
 8002fa8:	d14d      	bne.n	8003046 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d01d      	beq.n	8002fec <I2C_MasterTransmit_TXE+0x6e>
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	d01a      	beq.n	8002fec <I2C_MasterTransmit_TXE+0x6e>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fbc:	d016      	beq.n	8002fec <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fcc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2211      	movs	r2, #17
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff ff6c 	bl	8002ec2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fea:	e060      	b.n	80030ae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ffa:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800300a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b40      	cmp	r3, #64	; 0x40
 8003024:	d107      	bne.n	8003036 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff ff81 	bl	8002f36 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003034:	e03b      	b.n	80030ae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff ff3f 	bl	8002ec2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003044:	e033      	b.n	80030ae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	2b21      	cmp	r3, #33	; 0x21
 800304a:	d005      	beq.n	8003058 <I2C_MasterTransmit_TXE+0xda>
 800304c:	7bbb      	ldrb	r3, [r7, #14]
 800304e:	2b40      	cmp	r3, #64	; 0x40
 8003050:	d12d      	bne.n	80030ae <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	2b22      	cmp	r3, #34	; 0x22
 8003056:	d12a      	bne.n	80030ae <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d108      	bne.n	8003074 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003070:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003072:	e01c      	b.n	80030ae <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d103      	bne.n	8003088 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f880 	bl	8003186 <I2C_MemoryTransmit_TXE_BTF>
}
 8003086:	e012      	b.n	80030ae <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	781a      	ldrb	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030ac:	e7ff      	b.n	80030ae <I2C_MasterTransmit_TXE+0x130>
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b21      	cmp	r3, #33	; 0x21
 80030ce:	d156      	bne.n	800317e <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d012      	beq.n	8003100 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	781a      	ldrb	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80030fe:	e03e      	b.n	800317e <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b08      	cmp	r3, #8
 8003104:	d01d      	beq.n	8003142 <I2C_MasterTransmit_BTF+0x8c>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b20      	cmp	r3, #32
 800310a:	d01a      	beq.n	8003142 <I2C_MasterTransmit_BTF+0x8c>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003112:	d016      	beq.n	8003142 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003122:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2211      	movs	r2, #17
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff fec1 	bl	8002ec2 <HAL_I2C_MasterTxCpltCallback>
}
 8003140:	e01d      	b.n	800317e <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003150:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003160:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff fea2 	bl	8002ec2 <HAL_I2C_MasterTxCpltCallback>
}
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003194:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319a:	2b00      	cmp	r3, #0
 800319c:	d11d      	bne.n	80031da <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d10b      	bne.n	80031be <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b6:	1c9a      	adds	r2, r3, #2
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80031bc:	e06e      	b.n	800329c <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	121b      	asrs	r3, r3, #8
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80031d8:	e060      	b.n	800329c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d10b      	bne.n	80031fa <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80031f8:	e050      	b.n	800329c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d14c      	bne.n	800329c <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	2b22      	cmp	r3, #34	; 0x22
 8003206:	d108      	bne.n	800321a <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003216:	601a      	str	r2, [r3, #0]
}
 8003218:	e040      	b.n	800329c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d015      	beq.n	8003250 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	2b21      	cmp	r3, #33	; 0x21
 8003228:	d112      	bne.n	8003250 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800324e:	e025      	b.n	800329c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d120      	bne.n	800329c <I2C_MemoryTransmit_TXE_BTF+0x116>
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	2b21      	cmp	r3, #33	; 0x21
 800325e:	d11d      	bne.n	800329c <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800326e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2220      	movs	r2, #32
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff fe4d 	bl	8002f36 <HAL_I2C_MemTxCpltCallback>
}
 800329c:	bf00      	nop
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b22      	cmp	r3, #34	; 0x22
 80032b6:	f040 80a2 	bne.w	80033fe <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032be:	b29b      	uxth	r3, r3
 80032c0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d921      	bls.n	800330c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691a      	ldr	r2, [r3, #16]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	f040 8082 	bne.w	80033fe <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003308:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800330a:	e078      	b.n	80033fe <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	2b02      	cmp	r3, #2
 8003312:	d074      	beq.n	80033fe <I2C_MasterReceive_RXNE+0x15a>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d002      	beq.n	8003320 <I2C_MasterReceive_RXNE+0x7c>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d16e      	bne.n	80033fe <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 ffad 	bl	8004280 <I2C_WaitOnSTOPRequestThroughIT>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d142      	bne.n	80033b2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800334a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b40      	cmp	r3, #64	; 0x40
 8003384:	d10a      	bne.n	800339c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff fdd7 	bl	8002f48 <HAL_I2C_MemRxCpltCallback>
}
 800339a:	e030      	b.n	80033fe <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2212      	movs	r2, #18
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff fd92 	bl	8002ed4 <HAL_I2C_MasterRxCpltCallback>
}
 80033b0:	e025      	b.n	80033fe <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033c0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff fdae 	bl	8002f5a <HAL_I2C_ErrorCallback>
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b04      	cmp	r3, #4
 800341c:	d11b      	bne.n	8003456 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800342c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003454:	e0bd      	b.n	80035d2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b03      	cmp	r3, #3
 800345e:	d129      	bne.n	80034b4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800346e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b04      	cmp	r3, #4
 8003474:	d00a      	beq.n	800348c <I2C_MasterReceive_BTF+0x86>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d007      	beq.n	800348c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034b2:	e08e      	b.n	80035d2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d176      	bne.n	80035ac <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d002      	beq.n	80034ca <I2C_MasterReceive_BTF+0xc4>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b10      	cmp	r3, #16
 80034c8:	d108      	bne.n	80034dc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e019      	b.n	8003510 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d002      	beq.n	80034e8 <I2C_MasterReceive_BTF+0xe2>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d108      	bne.n	80034fa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	e00a      	b.n	8003510 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b10      	cmp	r3, #16
 80034fe:	d007      	beq.n	8003510 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800356a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	d10a      	bne.n	8003596 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff fcda 	bl	8002f48 <HAL_I2C_MemRxCpltCallback>
}
 8003594:	e01d      	b.n	80035d2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2212      	movs	r2, #18
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff fc95 	bl	8002ed4 <HAL_I2C_MasterRxCpltCallback>
}
 80035aa:	e012      	b.n	80035d2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691a      	ldr	r2, [r3, #16]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d117      	bne.n	800361e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003606:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003608:	e067      	b.n	80036da <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	b2da      	uxtb	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	611a      	str	r2, [r3, #16]
}
 800361c:	e05d      	b.n	80036da <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003626:	d133      	bne.n	8003690 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b21      	cmp	r3, #33	; 0x21
 8003632:	d109      	bne.n	8003648 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003638:	b2db      	uxtb	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003644:	611a      	str	r2, [r3, #16]
 8003646:	e008      	b.n	800365a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	b2da      	uxtb	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365e:	2b00      	cmp	r3, #0
 8003660:	d004      	beq.n	800366c <I2C_Master_SB+0x92>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	2b00      	cmp	r3, #0
 800366a:	d108      	bne.n	800367e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	2b00      	cmp	r3, #0
 8003672:	d032      	beq.n	80036da <I2C_Master_SB+0x100>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	2b00      	cmp	r3, #0
 800367c:	d02d      	beq.n	80036da <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800368c:	605a      	str	r2, [r3, #4]
}
 800368e:	e024      	b.n	80036da <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10e      	bne.n	80036b6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369c:	b29b      	uxth	r3, r3
 800369e:	11db      	asrs	r3, r3, #7
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f003 0306 	and.w	r3, r3, #6
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f063 030f 	orn	r3, r3, #15
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	611a      	str	r2, [r3, #16]
}
 80036b4:	e011      	b.n	80036da <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d10d      	bne.n	80036da <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	11db      	asrs	r3, r3, #7
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f003 0306 	and.w	r3, r3, #6
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	f063 030e 	orn	r3, r3, #14
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	611a      	str	r2, [r3, #16]
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr

080036e4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d103      	bne.n	8003708 <I2C_Master_ADD10+0x24>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	2b00      	cmp	r3, #0
 8003706:	d011      	beq.n	800372c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	2b00      	cmp	r3, #0
 8003710:	d104      	bne.n	800371c <I2C_Master_ADD10+0x38>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	2b00      	cmp	r3, #0
 800371a:	d007      	beq.n	800372c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800372a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr

08003736 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003736:	b480      	push	{r7}
 8003738:	b091      	sub	sp, #68	; 0x44
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003744:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b22      	cmp	r3, #34	; 0x22
 800375e:	f040 8174 	bne.w	8003a4a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <I2C_Master_ADDR+0x54>
 800376a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800376e:	2b40      	cmp	r3, #64	; 0x40
 8003770:	d10b      	bne.n	800378a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003772:	2300      	movs	r3, #0
 8003774:	633b      	str	r3, [r7, #48]	; 0x30
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	633b      	str	r3, [r7, #48]	; 0x30
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	633b      	str	r3, [r7, #48]	; 0x30
 8003786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003788:	e16b      	b.n	8003a62 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800378e:	2b00      	cmp	r3, #0
 8003790:	d11d      	bne.n	80037ce <I2C_Master_ADDR+0x98>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800379a:	d118      	bne.n	80037ce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800379c:	2300      	movs	r3, #0
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	651a      	str	r2, [r3, #80]	; 0x50
 80037cc:	e149      	b.n	8003a62 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d113      	bne.n	8003800 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d8:	2300      	movs	r3, #0
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ec:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	e120      	b.n	8003a42 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	f040 808a 	bne.w	8003920 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003812:	d137      	bne.n	8003884 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003822:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800382e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003832:	d113      	bne.n	800385c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003842:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003844:	2300      	movs	r3, #0
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	e0f2      	b.n	8003a42 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800385c:	2300      	movs	r3, #0
 800385e:	623b      	str	r3, [r7, #32]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	623b      	str	r3, [r7, #32]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	623b      	str	r3, [r7, #32]
 8003870:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	e0de      	b.n	8003a42 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003886:	2b08      	cmp	r3, #8
 8003888:	d02e      	beq.n	80038e8 <I2C_Master_ADDR+0x1b2>
 800388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388c:	2b20      	cmp	r3, #32
 800388e:	d02b      	beq.n	80038e8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003892:	2b12      	cmp	r3, #18
 8003894:	d102      	bne.n	800389c <I2C_Master_ADDR+0x166>
 8003896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003898:	2b01      	cmp	r3, #1
 800389a:	d125      	bne.n	80038e8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800389c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d00e      	beq.n	80038c0 <I2C_Master_ADDR+0x18a>
 80038a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d00b      	beq.n	80038c0 <I2C_Master_ADDR+0x18a>
 80038a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d008      	beq.n	80038c0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	e007      	b.n	80038d0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038ce:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d0:	2300      	movs	r3, #0
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	61fb      	str	r3, [r7, #28]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	61fb      	str	r3, [r7, #28]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	e0ac      	b.n	8003a42 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f8:	2300      	movs	r3, #0
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	61bb      	str	r3, [r7, #24]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e090      	b.n	8003a42 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d158      	bne.n	80039dc <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	2b04      	cmp	r3, #4
 800392e:	d021      	beq.n	8003974 <I2C_Master_ADDR+0x23e>
 8003930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003932:	2b02      	cmp	r3, #2
 8003934:	d01e      	beq.n	8003974 <I2C_Master_ADDR+0x23e>
 8003936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003938:	2b10      	cmp	r3, #16
 800393a:	d01b      	beq.n	8003974 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800394a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	e012      	b.n	800399a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003982:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003984:	2300      	movs	r3, #0
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a8:	d14b      	bne.n	8003a42 <I2C_Master_ADDR+0x30c>
 80039aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039b0:	d00b      	beq.n	80039ca <I2C_Master_ADDR+0x294>
 80039b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d008      	beq.n	80039ca <I2C_Master_ADDR+0x294>
 80039b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d005      	beq.n	80039ca <I2C_Master_ADDR+0x294>
 80039be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c0:	2b10      	cmp	r3, #16
 80039c2:	d002      	beq.n	80039ca <I2C_Master_ADDR+0x294>
 80039c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d13b      	bne.n	8003a42 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	e032      	b.n	8003a42 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039ea:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039fa:	d117      	bne.n	8003a2c <I2C_Master_ADDR+0x2f6>
 80039fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a02:	d00b      	beq.n	8003a1c <I2C_Master_ADDR+0x2e6>
 8003a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d008      	beq.n	8003a1c <I2C_Master_ADDR+0x2e6>
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d005      	beq.n	8003a1c <I2C_Master_ADDR+0x2e6>
 8003a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	d002      	beq.n	8003a1c <I2C_Master_ADDR+0x2e6>
 8003a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	d107      	bne.n	8003a2c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a2a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003a48:	e00b      	b.n	8003a62 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
}
 8003a60:	e7ff      	b.n	8003a62 <I2C_Master_ADDR+0x32c>
 8003a62:	bf00      	nop
 8003a64:	3744      	adds	r7, #68	; 0x44
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d02b      	beq.n	8003ade <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	781a      	ldrb	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d114      	bne.n	8003ade <I2C_SlaveTransmit_TXE+0x72>
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	2b29      	cmp	r3, #41	; 0x29
 8003ab8:	d111      	bne.n	8003ade <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2221      	movs	r2, #33	; 0x21
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2228      	movs	r2, #40	; 0x28
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff fa04 	bl	8002ee6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d011      	beq.n	8003b1c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	781a      	ldrb	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr

08003b26 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b34:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d02c      	beq.n	8003b9a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d114      	bne.n	8003b9a <I2C_SlaveReceive_RXNE+0x74>
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	2b2a      	cmp	r3, #42	; 0x2a
 8003b74:	d111      	bne.n	8003b9a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b84:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2222      	movs	r2, #34	; 0x22
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2228      	movs	r2, #40	; 0x28
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff f9af 	bl	8002ef8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d012      	beq.n	8003bda <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr

08003be4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bfe:	2b28      	cmp	r3, #40	; 0x28
 8003c00:	d127      	bne.n	8003c52 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c10:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	089b      	lsrs	r3, r3, #2
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	09db      	lsrs	r3, r3, #7
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d103      	bne.n	8003c36 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	81bb      	strh	r3, [r7, #12]
 8003c34:	e002      	b.n	8003c3c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003c44:	89ba      	ldrh	r2, [r7, #12]
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	4619      	mov	r1, r3
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff f95d 	bl	8002f0a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003c50:	e008      	b.n	8003c64 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f06f 0202 	mvn.w	r2, #2
 8003c5a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003c64:	bf00      	nop
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c8a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc8:	d172      	bne.n	8003db0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	2b22      	cmp	r3, #34	; 0x22
 8003cce:	d002      	beq.n	8003cd6 <I2C_Slave_STOPF+0x6a>
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8003cd4:	d135      	bne.n	8003d42 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d005      	beq.n	8003cfa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f043 0204 	orr.w	r2, r3, #4
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fe fcb4 	bl	800267c <HAL_DMA_GetState>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d049      	beq.n	8003dae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	4a69      	ldr	r2, [pc, #420]	; (8003ec4 <I2C_Slave_STOPF+0x258>)
 8003d20:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe fb2c 	bl	8002384 <HAL_DMA_Abort_IT>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d03d      	beq.n	8003dae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d40:	e035      	b.n	8003dae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d005      	beq.n	8003d66 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f043 0204 	orr.w	r2, r3, #4
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d74:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe fc7e 	bl	800267c <HAL_DMA_GetState>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d014      	beq.n	8003db0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8a:	4a4e      	ldr	r2, [pc, #312]	; (8003ec4 <I2C_Slave_STOPF+0x258>)
 8003d8c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe faf6 	bl	8002384 <HAL_DMA_Abort_IT>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d008      	beq.n	8003db0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003da8:	4610      	mov	r0, r2
 8003daa:	4798      	blx	r3
 8003dac:	e000      	b.n	8003db0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003dae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d03e      	beq.n	8003e38 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d112      	bne.n	8003dee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d112      	bne.n	8003e22 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691a      	ldr	r2, [r3, #16]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	f043 0204 	orr.w	r2, r3, #4
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f843 	bl	8003ecc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003e46:	e039      	b.n	8003ebc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e4c:	d109      	bne.n	8003e62 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2228      	movs	r2, #40	; 0x28
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff f84b 	bl	8002ef8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b28      	cmp	r3, #40	; 0x28
 8003e6c:	d111      	bne.n	8003e92 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a15      	ldr	r2, [pc, #84]	; (8003ec8 <I2C_Slave_STOPF+0x25c>)
 8003e72:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff f84a 	bl	8002f24 <HAL_I2C_ListenCpltCallback>
}
 8003e90:	e014      	b.n	8003ebc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	2b22      	cmp	r3, #34	; 0x22
 8003e98:	d002      	beq.n	8003ea0 <I2C_Slave_STOPF+0x234>
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
 8003e9c:	2b22      	cmp	r3, #34	; 0x22
 8003e9e:	d10d      	bne.n	8003ebc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff f81e 	bl	8002ef8 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ebc:	bf00      	nop
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	08004131 	.word	0x08004131
 8003ec8:	ffff0000 	.word	0xffff0000

08003ecc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eda:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ee2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ee4:	7bbb      	ldrb	r3, [r7, #14]
 8003ee6:	2b10      	cmp	r3, #16
 8003ee8:	d002      	beq.n	8003ef0 <I2C_ITError+0x24>
 8003eea:	7bbb      	ldrb	r3, [r7, #14]
 8003eec:	2b40      	cmp	r3, #64	; 0x40
 8003eee:	d10a      	bne.n	8003f06 <I2C_ITError+0x3a>
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	2b22      	cmp	r3, #34	; 0x22
 8003ef4:	d107      	bne.n	8003f06 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f04:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f0c:	2b28      	cmp	r3, #40	; 0x28
 8003f0e:	d107      	bne.n	8003f20 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2228      	movs	r2, #40	; 0x28
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f1e:	e015      	b.n	8003f4c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f2e:	d00a      	beq.n	8003f46 <I2C_ITError+0x7a>
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	2b60      	cmp	r3, #96	; 0x60
 8003f34:	d007      	beq.n	8003f46 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f5a:	d161      	bne.n	8004020 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f6a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d020      	beq.n	8003fba <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7c:	4a6a      	ldr	r2, [pc, #424]	; (8004128 <I2C_ITError+0x25c>)
 8003f7e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fe f9fd 	bl	8002384 <HAL_DMA_Abort_IT>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8089 	beq.w	80040a4 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0201 	bic.w	r2, r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	4798      	blx	r3
 8003fb8:	e074      	b.n	80040a4 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	4a5a      	ldr	r2, [pc, #360]	; (8004128 <I2C_ITError+0x25c>)
 8003fc0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe f9dc 	bl	8002384 <HAL_DMA_Abort_IT>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d068      	beq.n	80040a4 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fdc:	2b40      	cmp	r3, #64	; 0x40
 8003fde:	d10b      	bne.n	8003ff8 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800401a:	4610      	mov	r0, r2
 800401c:	4798      	blx	r3
 800401e:	e041      	b.n	80040a4 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b60      	cmp	r3, #96	; 0x60
 800402a:	d125      	bne.n	8004078 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d10b      	bne.n	8004060 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7fe ff7b 	bl	8002f6c <HAL_I2C_AbortCpltCallback>
 8004076:	e015      	b.n	80040a4 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004082:	2b40      	cmp	r3, #64	; 0x40
 8004084:	d10b      	bne.n	800409e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fe ff5b 	bl	8002f5a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10e      	bne.n	80040d2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d104      	bne.n	80040d2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d007      	beq.n	80040e2 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040e0:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e8:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d113      	bne.n	800411e <I2C_ITError+0x252>
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	2b28      	cmp	r3, #40	; 0x28
 80040fa:	d110      	bne.n	800411e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a0b      	ldr	r2, [pc, #44]	; (800412c <I2C_ITError+0x260>)
 8004100:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7fe ff03 	bl	8002f24 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	08004131 	.word	0x08004131
 800412c:	ffff0000 	.word	0xffff0000

08004130 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004148:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800414a:	4b4b      	ldr	r3, [pc, #300]	; (8004278 <I2C_DMAAbort+0x148>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	08db      	lsrs	r3, r3, #3
 8004150:	4a4a      	ldr	r2, [pc, #296]	; (800427c <I2C_DMAAbort+0x14c>)
 8004152:	fba2 2303 	umull	r2, r3, r2, r3
 8004156:	0a1a      	lsrs	r2, r3, #8
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	00da      	lsls	r2, r3, #3
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f043 0220 	orr.w	r2, r3, #32
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004176:	e00a      	b.n	800418e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3b01      	subs	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800418c:	d0ea      	beq.n	8004164 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419a:	2200      	movs	r2, #0
 800419c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	2200      	movs	r2, #0
 80041ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2200      	movs	r2, #0
 80041c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d0:	2200      	movs	r2, #0
 80041d2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	2200      	movs	r2, #0
 80041e2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0201 	bic.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b60      	cmp	r3, #96	; 0x60
 80041fe:	d10e      	bne.n	800421e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2200      	movs	r2, #0
 8004214:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004216:	6978      	ldr	r0, [r7, #20]
 8004218:	f7fe fea8 	bl	8002f6c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800421c:	e027      	b.n	800426e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800421e:	7cfb      	ldrb	r3, [r7, #19]
 8004220:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004224:	2b28      	cmp	r3, #40	; 0x28
 8004226:	d117      	bne.n	8004258 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004246:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2228      	movs	r2, #40	; 0x28
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004256:	e007      	b.n	8004268 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004268:	6978      	ldr	r0, [r7, #20]
 800426a:	f7fe fe76 	bl	8002f5a <HAL_I2C_ErrorCallback>
}
 800426e:	bf00      	nop
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000018 	.word	0x20000018
 800427c:	14f8b589 	.word	0x14f8b589

08004280 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800428c:	4b13      	ldr	r3, [pc, #76]	; (80042dc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	08db      	lsrs	r3, r3, #3
 8004292:	4a13      	ldr	r2, [pc, #76]	; (80042e0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004294:	fba2 2303 	umull	r2, r3, r2, r3
 8004298:	0a1a      	lsrs	r2, r3, #8
 800429a:	4613      	mov	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d107      	bne.n	80042be <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	f043 0220 	orr.w	r2, r3, #32
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e008      	b.n	80042d0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042cc:	d0e9      	beq.n	80042a2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000018 	.word	0x20000018
 80042e0:	14f8b589 	.word	0x14f8b589

080042e4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80042f4:	d103      	bne.n	80042fe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80042fc:	e007      	b.n	800430e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004306:	d102      	bne.n	800430e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2208      	movs	r2, #8
 800430c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e02b      	b.n	8004382 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004332:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f245 5255 	movw	r2, #21845	; 0x5555
 800433c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6852      	ldr	r2, [r2, #4]
 8004346:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6892      	ldr	r2, [r2, #8]
 8004350:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004352:	f7fd fc9b 	bl	8001c8c <HAL_GetTick>
 8004356:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8004358:	e008      	b.n	800436c <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800435a:	f7fd fc97 	bl	8001c8c <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b26      	cmp	r3, #38	; 0x26
 8004366:	d901      	bls.n	800436c <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e00a      	b.n	8004382 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f1      	bne.n	800435a <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800437e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800438a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800438c:	b08b      	sub	sp, #44	; 0x2c
 800438e:	af06      	add	r7, sp, #24
 8004390:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0fd      	b.n	8004598 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f006 f97d 	bl	800a6b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2203      	movs	r2, #3
 80043ba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f002 fbec 	bl	8006ba0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	603b      	str	r3, [r7, #0]
 80043ce:	687e      	ldr	r6, [r7, #4]
 80043d0:	466d      	mov	r5, sp
 80043d2:	f106 0410 	add.w	r4, r6, #16
 80043d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	602b      	str	r3, [r5, #0]
 80043de:	1d33      	adds	r3, r6, #4
 80043e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043e2:	6838      	ldr	r0, [r7, #0]
 80043e4:	f002 fbb6 	bl	8006b54 <USB_CoreInit>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2202      	movs	r2, #2
 80043f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e0ce      	b.n	8004598 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2100      	movs	r1, #0
 8004400:	4618      	mov	r0, r3
 8004402:	f002 fbe7 	bl	8006bd4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004406:	2300      	movs	r3, #0
 8004408:	73fb      	strb	r3, [r7, #15]
 800440a:	e04c      	b.n	80044a6 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	440b      	add	r3, r1
 800441c:	3301      	adds	r3, #1
 800441e:	2201      	movs	r2, #1
 8004420:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	440b      	add	r3, r1
 8004432:	7bfa      	ldrb	r2, [r7, #15]
 8004434:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004436:	7bfa      	ldrb	r2, [r7, #15]
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	b298      	uxth	r0, r3
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	440b      	add	r3, r1
 8004448:	3336      	adds	r3, #54	; 0x36
 800444a:	4602      	mov	r2, r0
 800444c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	4613      	mov	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	440b      	add	r3, r1
 800445e:	3303      	adds	r3, #3
 8004460:	2200      	movs	r2, #0
 8004462:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004464:	7bfa      	ldrb	r2, [r7, #15]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	440b      	add	r3, r1
 8004472:	3338      	adds	r3, #56	; 0x38
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004478:	7bfa      	ldrb	r2, [r7, #15]
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	440b      	add	r3, r1
 8004486:	333c      	adds	r3, #60	; 0x3c
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800448c:	7bfa      	ldrb	r2, [r7, #15]
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	440b      	add	r3, r1
 800449a:	3340      	adds	r3, #64	; 0x40
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	3301      	adds	r3, #1
 80044a4:	73fb      	strb	r3, [r7, #15]
 80044a6:	7bfa      	ldrb	r2, [r7, #15]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d3ad      	bcc.n	800440c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044b0:	2300      	movs	r3, #0
 80044b2:	73fb      	strb	r3, [r7, #15]
 80044b4:	e044      	b.n	8004540 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80044b6:	7bfa      	ldrb	r2, [r7, #15]
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	4613      	mov	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	440b      	add	r3, r1
 80044c4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80044c8:	2200      	movs	r2, #0
 80044ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044cc:	7bfa      	ldrb	r2, [r7, #15]
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	440b      	add	r3, r1
 80044da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044de:	7bfa      	ldrb	r2, [r7, #15]
 80044e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044e2:	7bfa      	ldrb	r2, [r7, #15]
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	440b      	add	r3, r1
 80044f0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044f8:	7bfa      	ldrb	r2, [r7, #15]
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	440b      	add	r3, r1
 8004506:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800450e:	7bfa      	ldrb	r2, [r7, #15]
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	440b      	add	r3, r1
 800451c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004524:	7bfa      	ldrb	r2, [r7, #15]
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	440b      	add	r3, r1
 8004532:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	3301      	adds	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
 8004540:	7bfa      	ldrb	r2, [r7, #15]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	429a      	cmp	r2, r3
 8004548:	d3b5      	bcc.n	80044b6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	687e      	ldr	r6, [r7, #4]
 8004552:	466d      	mov	r5, sp
 8004554:	f106 0410 	add.w	r4, r6, #16
 8004558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800455a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	602b      	str	r3, [r5, #0]
 8004560:	1d33      	adds	r3, r6, #4
 8004562:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004564:	6838      	ldr	r0, [r7, #0]
 8004566:	f002 fb41 	bl	8006bec <USB_DevInit>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e00d      	b.n	8004598 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f004 fadb 	bl	8008b4c <USB_DevDisconnect>

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <HAL_PCD_Start+0x16>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e016      	b.n	80045e4 <HAL_PCD_Start+0x44>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f002 fad6 	bl	8006b74 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80045c8:	2101      	movs	r1, #1
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f006 fae3 	bl	800ab96 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f004 faaf 	bl	8008b38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f004 fab1 	bl	8008b60 <USB_ReadInterrupts>
 80045fe:	4603      	mov	r3, r0
 8004600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004608:	d102      	bne.n	8004610 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fb61 	bl	8004cd2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f004 faa3 	bl	8008b60 <USB_ReadInterrupts>
 800461a:	4603      	mov	r3, r0
 800461c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004624:	d112      	bne.n	800464c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800462e:	b29a      	uxth	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004638:	b292      	uxth	r2, r2
 800463a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f006 f8b1 	bl	800a7a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004644:	2100      	movs	r1, #0
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f925 	bl	8004896 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f004 fa85 	bl	8008b60 <USB_ReadInterrupts>
 8004656:	4603      	mov	r3, r0
 8004658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800465c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004660:	d10b      	bne.n	800467a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800466a:	b29a      	uxth	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004674:	b292      	uxth	r2, r2
 8004676:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f004 fa6e 	bl	8008b60 <USB_ReadInterrupts>
 8004684:	4603      	mov	r3, r0
 8004686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800468a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468e:	d10b      	bne.n	80046a8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004698:	b29a      	uxth	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046a2:	b292      	uxth	r2, r2
 80046a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f004 fa57 	bl	8008b60 <USB_ReadInterrupts>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046bc:	d126      	bne.n	800470c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0204 	bic.w	r2, r2, #4
 80046d0:	b292      	uxth	r2, r2
 80046d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046de:	b29a      	uxth	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0208 	bic.w	r2, r2, #8
 80046e8:	b292      	uxth	r2, r2
 80046ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f006 f892 	bl	800a818 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004706:	b292      	uxth	r2, r2
 8004708:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f004 fa25 	bl	8008b60 <USB_ReadInterrupts>
 8004716:	4603      	mov	r3, r0
 8004718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800471c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004720:	f040 8084 	bne.w	800482c <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004724:	2300      	movs	r3, #0
 8004726:	77fb      	strb	r3, [r7, #31]
 8004728:	e011      	b.n	800474e <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	7ffb      	ldrb	r3, [r7, #31]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	441a      	add	r2, r3
 8004736:	7ffb      	ldrb	r3, [r7, #31]
 8004738:	8812      	ldrh	r2, [r2, #0]
 800473a:	b292      	uxth	r2, r2
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	f107 0120 	add.w	r1, r7, #32
 8004742:	440b      	add	r3, r1
 8004744:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004748:	7ffb      	ldrb	r3, [r7, #31]
 800474a:	3301      	adds	r3, #1
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	7ffb      	ldrb	r3, [r7, #31]
 8004750:	2b07      	cmp	r3, #7
 8004752:	d9ea      	bls.n	800472a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800475c:	b29a      	uxth	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	b292      	uxth	r2, r2
 8004768:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004774:	b29a      	uxth	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0201 	bic.w	r2, r2, #1
 800477e:	b292      	uxth	r2, r2
 8004780:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004784:	bf00      	nop
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800478e:	b29b      	uxth	r3, r3
 8004790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f6      	beq.n	8004786 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047aa:	b292      	uxth	r2, r2
 80047ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80047b0:	2300      	movs	r3, #0
 80047b2:	77fb      	strb	r3, [r7, #31]
 80047b4:	e010      	b.n	80047d8 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80047b6:	7ffb      	ldrb	r3, [r7, #31]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	4611      	mov	r1, r2
 80047be:	7ffa      	ldrb	r2, [r7, #31]
 80047c0:	0092      	lsls	r2, r2, #2
 80047c2:	440a      	add	r2, r1
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	f107 0120 	add.w	r1, r7, #32
 80047ca:	440b      	add	r3, r1
 80047cc:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80047d0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80047d2:	7ffb      	ldrb	r3, [r7, #31]
 80047d4:	3301      	adds	r3, #1
 80047d6:	77fb      	strb	r3, [r7, #31]
 80047d8:	7ffb      	ldrb	r3, [r7, #31]
 80047da:	2b07      	cmp	r3, #7
 80047dc:	d9eb      	bls.n	80047b6 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0208 	orr.w	r2, r2, #8
 80047f0:	b292      	uxth	r2, r2
 80047f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047fe:	b29a      	uxth	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004808:	b292      	uxth	r2, r2
 800480a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004816:	b29a      	uxth	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0204 	orr.w	r2, r2, #4
 8004820:	b292      	uxth	r2, r2
 8004822:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f005 ffdc 	bl	800a7e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f004 f995 	bl	8008b60 <USB_ReadInterrupts>
 8004836:	4603      	mov	r3, r0
 8004838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800483c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004840:	d10e      	bne.n	8004860 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800484a:	b29a      	uxth	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004854:	b292      	uxth	r2, r2
 8004856:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f005 ff95 	bl	800a78a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4618      	mov	r0, r3
 8004866:	f004 f97b 	bl	8008b60 <USB_ReadInterrupts>
 800486a:	4603      	mov	r3, r0
 800486c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004874:	d10b      	bne.n	800488e <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800487e:	b29a      	uxth	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004888:	b292      	uxth	r2, r2
 800488a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800488e:	bf00      	nop
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	460b      	mov	r3, r1
 80048a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_PCD_SetAddress+0x1a>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e013      	b.n	80048d8 <HAL_PCD_SetAddress+0x42>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	78fa      	ldrb	r2, [r7, #3]
 80048bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	78fa      	ldrb	r2, [r7, #3]
 80048c6:	4611      	mov	r1, r2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f004 f922 	bl	8008b12 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	4608      	mov	r0, r1
 80048ea:	4611      	mov	r1, r2
 80048ec:	461a      	mov	r2, r3
 80048ee:	4603      	mov	r3, r0
 80048f0:	70fb      	strb	r3, [r7, #3]
 80048f2:	460b      	mov	r3, r1
 80048f4:	803b      	strh	r3, [r7, #0]
 80048f6:	4613      	mov	r3, r2
 80048f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004902:	2b00      	cmp	r3, #0
 8004904:	da0e      	bge.n	8004924 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	4613      	mov	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	4413      	add	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	705a      	strb	r2, [r3, #1]
 8004922:	e00e      	b.n	8004942 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	f003 0207 	and.w	r2, r3, #7
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	4413      	add	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	b2da      	uxtb	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800494e:	883a      	ldrh	r2, [r7, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	78ba      	ldrb	r2, [r7, #2]
 8004958:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	785b      	ldrb	r3, [r3, #1]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d004      	beq.n	800496c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800496c:	78bb      	ldrb	r3, [r7, #2]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d102      	bne.n	8004978 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_PCD_EP_Open+0xa6>
 8004982:	2302      	movs	r3, #2
 8004984:	e00e      	b.n	80049a4 <HAL_PCD_EP_Open+0xc4>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68f9      	ldr	r1, [r7, #12]
 8004994:	4618      	mov	r0, r3
 8004996:	f002 f949 	bl	8006c2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80049a2:	7afb      	ldrb	r3, [r7, #11]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	da0e      	bge.n	80049de <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	4413      	add	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	705a      	strb	r2, [r3, #1]
 80049dc:	e00e      	b.n	80049fc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	f003 0207 	and.w	r2, r3, #7
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	4413      	add	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_PCD_EP_Close+0x6a>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e00e      	b.n	8004a34 <HAL_PCD_EP_Close+0x88>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68f9      	ldr	r1, [r7, #12]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f002 fc6b 	bl	8007300 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	607a      	str	r2, [r7, #4]
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a4c:	7afb      	ldrb	r3, [r7, #11]
 8004a4e:	f003 0207 	and.w	r2, r3, #7
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2200      	movs	r2, #0
 8004a74:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a7c:	7afb      	ldrb	r3, [r7, #11]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a88:	7afb      	ldrb	r3, [r7, #11]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6979      	ldr	r1, [r7, #20]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f002 fe1d 	bl	80076d8 <USB_EPStartXfer>
 8004a9e:	e005      	b.n	8004aac <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6979      	ldr	r1, [r7, #20]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f002 fe16 	bl	80076d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ac2:	78fb      	ldrb	r3, [r7, #3]
 8004ac4:	f003 0207 	and.w	r2, r3, #7
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	440b      	add	r3, r1
 8004ad4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004ad8:	681b      	ldr	r3, [r3, #0]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	460b      	mov	r3, r1
 8004af2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af4:	7afb      	ldrb	r3, [r7, #11]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2200      	movs	r2, #0
 8004b28:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b30:	7afb      	ldrb	r3, [r7, #11]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b3c:	7afb      	ldrb	r3, [r7, #11]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6979      	ldr	r1, [r7, #20]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f002 fdc3 	bl	80076d8 <USB_EPStartXfer>
 8004b52:	e005      	b.n	8004b60 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6979      	ldr	r1, [r7, #20]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f002 fdbc 	bl	80076d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	460b      	mov	r3, r1
 8004b74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b76:	78fb      	ldrb	r3, [r7, #3]
 8004b78:	f003 0207 	and.w	r2, r3, #7
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d901      	bls.n	8004b88 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e04c      	b.n	8004c22 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	da0e      	bge.n	8004bae <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	705a      	strb	r2, [r3, #1]
 8004bac:	e00c      	b.n	8004bc8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bce:	78fb      	ldrb	r3, [r7, #3]
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_PCD_EP_SetStall+0x7e>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e01c      	b.n	8004c22 <HAL_PCD_EP_SetStall+0xb8>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68f9      	ldr	r1, [r7, #12]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f003 fe8e 	bl	8008918 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d108      	bne.n	8004c18 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004c10:	4619      	mov	r1, r3
 8004c12:	4610      	mov	r0, r2
 8004c14:	f003 ffb3 	bl	8008b7e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	460b      	mov	r3, r1
 8004c34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c36:	78fb      	ldrb	r3, [r7, #3]
 8004c38:	f003 020f 	and.w	r2, r3, #15
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d901      	bls.n	8004c48 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e040      	b.n	8004cca <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	da0e      	bge.n	8004c6e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	4413      	add	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	705a      	strb	r2, [r3, #1]
 8004c6c:	e00e      	b.n	8004c8c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c6e:	78fb      	ldrb	r3, [r7, #3]
 8004c70:	f003 0207 	and.w	r2, r3, #7
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	4413      	add	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c92:	78fb      	ldrb	r3, [r7, #3]
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_PCD_EP_ClrStall+0x82>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e00e      	b.n	8004cca <HAL_PCD_EP_ClrStall+0xa0>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68f9      	ldr	r1, [r7, #12]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f003 fe7c 	bl	80089b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b08e      	sub	sp, #56	; 0x38
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004cda:	e2df      	b.n	800529c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ce4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004ce6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004cf2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f040 8158 	bne.w	8004fac <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004cfc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cfe:	f003 0310 	and.w	r3, r3, #16
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d152      	bne.n	8004dac <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d16:	81fb      	strh	r3, [r7, #14]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	89fb      	ldrh	r3, [r7, #14]
 8004d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3328      	adds	r3, #40	; 0x28
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	4413      	add	r3, r2
 8004d44:	3302      	adds	r3, #2
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6812      	ldr	r2, [r2, #0]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	695a      	ldr	r2, [r3, #20]
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	441a      	add	r2, r3
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f005 fcf2 	bl	800a756 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 828e 	beq.w	800529c <PCD_EP_ISR_Handler+0x5ca>
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f040 8289 	bne.w	800529c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	b292      	uxth	r2, r2
 8004d9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004daa:	e277      	b.n	800529c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004dbc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d034      	beq.n	8004e30 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4413      	add	r3, r2
 8004dda:	3306      	adds	r3, #6
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6812      	ldr	r2, [r2, #0]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6818      	ldr	r0, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f003 ff09 	bl	8008c1c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e16:	4013      	ands	r3, r2
 8004e18:	823b      	strh	r3, [r7, #16]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	8a3a      	ldrh	r2, [r7, #16]
 8004e20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e24:	b292      	uxth	r2, r2
 8004e26:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f005 fc67 	bl	800a6fc <HAL_PCD_SetupStageCallback>
 8004e2e:	e235      	b.n	800529c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e30:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f280 8231 	bge.w	800529c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e46:	4013      	ands	r3, r2
 8004e48:	83bb      	strh	r3, [r7, #28]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	8bba      	ldrh	r2, [r7, #28]
 8004e50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e54:	b292      	uxth	r2, r2
 8004e56:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3306      	adds	r3, #6
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6812      	ldr	r2, [r2, #0]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d019      	beq.n	8004ec0 <PCD_EP_ISR_Handler+0x1ee>
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d015      	beq.n	8004ec0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	6959      	ldr	r1, [r3, #20]
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f003 feb9 	bl	8008c1c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	695a      	ldr	r2, [r3, #20]
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	441a      	add	r2, r3
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004eb8:	2100      	movs	r1, #0
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f005 fc30 	bl	800a720 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d112      	bne.n	8004f0e <PCD_EP_ISR_Handler+0x23c>
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	801a      	strh	r2, [r3, #0]
 8004f0c:	e02f      	b.n	8004f6e <PCD_EP_ISR_Handler+0x29c>
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b3e      	cmp	r3, #62	; 0x3e
 8004f14:	d813      	bhi.n	8004f3e <PCD_EP_ISR_Handler+0x26c>
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	085b      	lsrs	r3, r3, #1
 8004f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <PCD_EP_ISR_Handler+0x25e>
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	029b      	lsls	r3, r3, #10
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	801a      	strh	r2, [r3, #0]
 8004f3c:	e017      	b.n	8004f6e <PCD_EP_ISR_Handler+0x29c>
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	633b      	str	r3, [r7, #48]	; 0x30
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 031f 	and.w	r3, r3, #31
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <PCD_EP_ISR_Handler+0x286>
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	3b01      	subs	r3, #1
 8004f56:	633b      	str	r3, [r7, #48]	; 0x30
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	029b      	lsls	r3, r3, #10
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7e:	827b      	strh	r3, [r7, #18]
 8004f80:	8a7b      	ldrh	r3, [r7, #18]
 8004f82:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f86:	827b      	strh	r3, [r7, #18]
 8004f88:	8a7b      	ldrh	r3, [r7, #18]
 8004f8a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f8e:	827b      	strh	r3, [r7, #18]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	8a7b      	ldrh	r3, [r7, #18]
 8004f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	8013      	strh	r3, [r2, #0]
 8004faa:	e177      	b.n	800529c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004fbe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f280 80ea 	bge.w	800519c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004fde:	4013      	ands	r3, r2
 8004fe0:	853b      	strh	r3, [r7, #40]	; 0x28
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004ff2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ff6:	b292      	uxth	r2, r2
 8004ff8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004ffa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	4413      	add	r3, r2
 800500e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	7b1b      	ldrb	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d122      	bne.n	800505e <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005020:	b29b      	uxth	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4413      	add	r3, r2
 800502c:	3306      	adds	r3, #6
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6812      	ldr	r2, [r2, #0]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005040:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005042:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 8087 	beq.w	8005158 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	6959      	ldr	r1, [r3, #20]
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	88da      	ldrh	r2, [r3, #6]
 8005056:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005058:	f003 fde0 	bl	8008c1c <USB_ReadPMA>
 800505c:	e07c      	b.n	8005158 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	78db      	ldrb	r3, [r3, #3]
 8005062:	2b02      	cmp	r3, #2
 8005064:	d108      	bne.n	8005078 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005066:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005068:	461a      	mov	r2, r3
 800506a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f923 	bl	80052b8 <HAL_PCD_EP_DB_Receive>
 8005072:	4603      	mov	r3, r0
 8005074:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005076:	e06f      	b.n	8005158 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	847b      	strh	r3, [r7, #34]	; 0x22
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	461a      	mov	r2, r3
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	441a      	add	r2, r3
 80050a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d021      	beq.n	8005116 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050da:	b29b      	uxth	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	4413      	add	r3, r2
 80050e6:	3302      	adds	r3, #2
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6812      	ldr	r2, [r2, #0]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050fa:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80050fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d02a      	beq.n	8005158 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	6959      	ldr	r1, [r3, #20]
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	891a      	ldrh	r2, [r3, #8]
 800510e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005110:	f003 fd84 	bl	8008c1c <USB_ReadPMA>
 8005114:	e020      	b.n	8005158 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800511e:	b29b      	uxth	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	4413      	add	r3, r2
 800512a:	3306      	adds	r3, #6
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6812      	ldr	r2, [r2, #0]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800513e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005140:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005142:	2b00      	cmp	r3, #0
 8005144:	d008      	beq.n	8005158 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	6959      	ldr	r1, [r3, #20]
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	895a      	ldrh	r2, [r3, #10]
 8005152:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005154:	f003 fd62 	bl	8008c1c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	69da      	ldr	r2, [r3, #28]
 800515c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800515e:	441a      	add	r2, r3
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800516a:	441a      	add	r2, r3
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d004      	beq.n	8005182 <PCD_EP_ISR_Handler+0x4b0>
 8005178:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	429a      	cmp	r2, r3
 8005180:	d206      	bcs.n	8005190 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	4619      	mov	r1, r3
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f005 fac9 	bl	800a720 <HAL_PCD_DataOutStageCallback>
 800518e:	e005      	b.n	800519c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005196:	4618      	mov	r0, r3
 8005198:	f002 fa9e 	bl	80076d8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800519c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d07a      	beq.n	800529c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80051a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	4413      	add	r3, r2
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80051d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d4:	843b      	strh	r3, [r7, #32]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	441a      	add	r2, r3
 80051e4:	8c3b      	ldrh	r3, [r7, #32]
 80051e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	78db      	ldrb	r3, [r3, #3]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d108      	bne.n	800520c <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d146      	bne.n	8005290 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005202:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005208:	2b00      	cmp	r3, #0
 800520a:	d141      	bne.n	8005290 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005214:	b29b      	uxth	r3, r3
 8005216:	461a      	mov	r2, r3
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	4413      	add	r3, r2
 8005220:	3302      	adds	r3, #2
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005234:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	699a      	ldr	r2, [r3, #24]
 800523a:	8bfb      	ldrh	r3, [r7, #30]
 800523c:	429a      	cmp	r2, r3
 800523e:	d906      	bls.n	800524e <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	699a      	ldr	r2, [r3, #24]
 8005244:	8bfb      	ldrh	r3, [r7, #30]
 8005246:	1ad2      	subs	r2, r2, r3
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	619a      	str	r2, [r3, #24]
 800524c:	e002      	b.n	8005254 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	2200      	movs	r2, #0
 8005252:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d106      	bne.n	800526a <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	4619      	mov	r1, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f005 fa77 	bl	800a756 <HAL_PCD_DataInStageCallback>
 8005268:	e018      	b.n	800529c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	695a      	ldr	r2, [r3, #20]
 800526e:	8bfb      	ldrh	r3, [r7, #30]
 8005270:	441a      	add	r2, r3
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	69da      	ldr	r2, [r3, #28]
 800527a:	8bfb      	ldrh	r3, [r7, #30]
 800527c:	441a      	add	r2, r3
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005288:	4618      	mov	r0, r3
 800528a:	f002 fa25 	bl	80076d8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800528e:	e005      	b.n	800529c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005290:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005292:	461a      	mov	r2, r3
 8005294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f91b 	bl	80054d2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	b21b      	sxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f6ff ad17 	blt.w	8004cdc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3738      	adds	r7, #56	; 0x38
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d07e      	beq.n	80053ce <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d8:	b29b      	uxth	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	4413      	add	r3, r2
 80052e4:	3302      	adds	r3, #2
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052f8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	8b7b      	ldrh	r3, [r7, #26]
 8005300:	429a      	cmp	r2, r3
 8005302:	d306      	bcc.n	8005312 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	8b7b      	ldrh	r3, [r7, #26]
 800530a:	1ad2      	subs	r2, r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	619a      	str	r2, [r3, #24]
 8005310:	e002      	b.n	8005318 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2200      	movs	r2, #0
 8005316:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d123      	bne.n	8005368 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29b      	uxth	r3, r3
 8005332:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533a:	833b      	strh	r3, [r7, #24]
 800533c:	8b3b      	ldrh	r3, [r7, #24]
 800533e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005342:	833b      	strh	r3, [r7, #24]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	441a      	add	r2, r3
 8005352:	8b3b      	ldrh	r3, [r7, #24]
 8005354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005364:	b29b      	uxth	r3, r3
 8005366:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005368:	88fb      	ldrh	r3, [r7, #6]
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01f      	beq.n	80053b2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	b29b      	uxth	r3, r3
 8005384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538c:	82fb      	strh	r3, [r7, #22]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	441a      	add	r2, r3
 800539c:	8afb      	ldrh	r3, [r7, #22]
 800539e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80053b2:	8b7b      	ldrh	r3, [r7, #26]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 8087 	beq.w	80054c8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	6959      	ldr	r1, [r3, #20]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	891a      	ldrh	r2, [r3, #8]
 80053c6:	8b7b      	ldrh	r3, [r7, #26]
 80053c8:	f003 fc28 	bl	8008c1c <USB_ReadPMA>
 80053cc:	e07c      	b.n	80054c8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	461a      	mov	r2, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	4413      	add	r3, r2
 80053e2:	3306      	adds	r3, #6
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053f6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	699a      	ldr	r2, [r3, #24]
 80053fc:	8b7b      	ldrh	r3, [r7, #26]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d306      	bcc.n	8005410 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	699a      	ldr	r2, [r3, #24]
 8005406:	8b7b      	ldrh	r3, [r7, #26]
 8005408:	1ad2      	subs	r2, r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	619a      	str	r2, [r3, #24]
 800540e:	e002      	b.n	8005416 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2200      	movs	r2, #0
 8005414:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d123      	bne.n	8005466 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005438:	83fb      	strh	r3, [r7, #30]
 800543a:	8bfb      	ldrh	r3, [r7, #30]
 800543c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005440:	83fb      	strh	r3, [r7, #30]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	461a      	mov	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	441a      	add	r2, r3
 8005450:	8bfb      	ldrh	r3, [r7, #30]
 8005452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800545a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005462:	b29b      	uxth	r3, r3
 8005464:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005466:	88fb      	ldrh	r3, [r7, #6]
 8005468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	d11f      	bne.n	80054b0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	461a      	mov	r2, r3
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	b29b      	uxth	r3, r3
 8005482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	83bb      	strh	r3, [r7, #28]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	441a      	add	r2, r3
 800549a:	8bbb      	ldrh	r3, [r7, #28]
 800549c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80054b0:	8b7b      	ldrh	r3, [r7, #26]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d008      	beq.n	80054c8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	6959      	ldr	r1, [r3, #20]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	895a      	ldrh	r2, [r3, #10]
 80054c2:	8b7b      	ldrh	r3, [r7, #26]
 80054c4:	f003 fbaa 	bl	8008c1c <USB_ReadPMA>
    }
  }

  return count;
 80054c8:	8b7b      	ldrh	r3, [r7, #26]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3720      	adds	r7, #32
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b092      	sub	sp, #72	; 0x48
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	4613      	mov	r3, r2
 80054de:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80054e0:	88fb      	ldrh	r3, [r7, #6]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 8132 	beq.w	8005750 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	461a      	mov	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	4413      	add	r3, r2
 8005500:	3302      	adds	r3, #2
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	6812      	ldr	r2, [r2, #0]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005514:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800551c:	429a      	cmp	r2, r3
 800551e:	d906      	bls.n	800552e <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	699a      	ldr	r2, [r3, #24]
 8005524:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005526:	1ad2      	subs	r2, r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	619a      	str	r2, [r3, #24]
 800552c:	e002      	b.n	8005534 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2200      	movs	r2, #0
 8005532:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d12c      	bne.n	8005596 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	4619      	mov	r1, r3
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f005 f907 	bl	800a756 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005548:	88fb      	ldrh	r3, [r7, #6]
 800554a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 822f 	beq.w	80059b2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	827b      	strh	r3, [r7, #18]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	461a      	mov	r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	441a      	add	r2, r3
 800557e:	8a7b      	ldrh	r3, [r7, #18]
 8005580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005588:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800558c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005590:	b29b      	uxth	r3, r3
 8005592:	8013      	strh	r3, [r2, #0]
 8005594:	e20d      	b.n	80059b2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005596:	88fb      	ldrh	r3, [r7, #6]
 8005598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01f      	beq.n	80055e0 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	441a      	add	r2, r3
 80055ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055dc:	b29b      	uxth	r3, r3
 80055de:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	f040 81e3 	bne.w	80059b2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	695a      	ldr	r2, [r3, #20]
 80055f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055f2:	441a      	add	r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	69da      	ldr	r2, [r3, #28]
 80055fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055fe:	441a      	add	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	6a1a      	ldr	r2, [r3, #32]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	429a      	cmp	r2, r3
 800560e:	d309      	bcc.n	8005624 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6a1a      	ldr	r2, [r3, #32]
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	1ad2      	subs	r2, r2, r3
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	621a      	str	r2, [r3, #32]
 8005622:	e014      	b.n	800564e <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d106      	bne.n	800563a <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 800562c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800562e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005638:	e009      	b.n	800564e <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2200      	movs	r2, #0
 800564c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	785b      	ldrb	r3, [r3, #1]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d155      	bne.n	8005702 <HAL_PCD_EP_DB_Transmit+0x230>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	61bb      	str	r3, [r7, #24]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005664:	b29b      	uxth	r3, r3
 8005666:	461a      	mov	r2, r3
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	4413      	add	r3, r2
 800566c:	61bb      	str	r3, [r7, #24]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	011a      	lsls	r2, r3, #4
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	4413      	add	r3, r2
 8005678:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005680:	2b00      	cmp	r3, #0
 8005682:	d112      	bne.n	80056aa <HAL_PCD_EP_DB_Transmit+0x1d8>
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	b29b      	uxth	r3, r3
 800568a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800568e:	b29a      	uxth	r2, r3
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	801a      	strh	r2, [r3, #0]
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800569e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	801a      	strh	r2, [r3, #0]
 80056a8:	e047      	b.n	800573a <HAL_PCD_EP_DB_Transmit+0x268>
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	2b3e      	cmp	r3, #62	; 0x3e
 80056ae:	d811      	bhi.n	80056d4 <HAL_PCD_EP_DB_Transmit+0x202>
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <HAL_PCD_EP_DB_Transmit+0x1f4>
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	3301      	adds	r3, #1
 80056c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	029b      	lsls	r3, r3, #10
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	801a      	strh	r2, [r3, #0]
 80056d2:	e032      	b.n	800573a <HAL_PCD_EP_DB_Transmit+0x268>
 80056d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056dc:	f003 031f 	and.w	r3, r3, #31
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d102      	bne.n	80056ea <HAL_PCD_EP_DB_Transmit+0x218>
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	3b01      	subs	r3, #1
 80056e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	029b      	lsls	r3, r3, #10
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	801a      	strh	r2, [r3, #0]
 8005700:	e01b      	b.n	800573a <HAL_PCD_EP_DB_Transmit+0x268>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	785b      	ldrb	r3, [r3, #1]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d117      	bne.n	800573a <HAL_PCD_EP_DB_Transmit+0x268>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	623b      	str	r3, [r7, #32]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005718:	b29b      	uxth	r3, r3
 800571a:	461a      	mov	r2, r3
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	4413      	add	r3, r2
 8005720:	623b      	str	r3, [r7, #32]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	011a      	lsls	r2, r3, #4
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	4413      	add	r3, r2
 800572c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005730:	61fb      	str	r3, [r7, #28]
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	b29a      	uxth	r2, r3
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	6959      	ldr	r1, [r3, #20]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	891a      	ldrh	r2, [r3, #8]
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	b29b      	uxth	r3, r3
 800574a:	f003 fa23 	bl	8008b94 <USB_WritePMA>
 800574e:	e130      	b.n	80059b2 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005758:	b29b      	uxth	r3, r3
 800575a:	461a      	mov	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	4413      	add	r3, r2
 8005764:	3306      	adds	r3, #6
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	6812      	ldr	r2, [r2, #0]
 800576c:	4413      	add	r3, r2
 800576e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005778:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	699a      	ldr	r2, [r3, #24]
 800577e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005780:	429a      	cmp	r2, r3
 8005782:	d306      	bcc.n	8005792 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	699a      	ldr	r2, [r3, #24]
 8005788:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800578a:	1ad2      	subs	r2, r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	619a      	str	r2, [r3, #24]
 8005790:	e002      	b.n	8005798 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2200      	movs	r2, #0
 8005796:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d12c      	bne.n	80057fa <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	4619      	mov	r1, r3
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f004 ffd5 	bl	800a756 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80057ac:	88fb      	ldrh	r3, [r7, #6]
 80057ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f040 80fd 	bne.w	80059b2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	441a      	add	r2, r3
 80057e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	8013      	strh	r3, [r2, #0]
 80057f8:	e0db      	b.n	80059b2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80057fa:	88fb      	ldrh	r3, [r7, #6]
 80057fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d11f      	bne.n	8005844 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	461a      	mov	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	441a      	add	r2, r3
 800582e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800583c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005840:	b29b      	uxth	r3, r3
 8005842:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800584a:	2b01      	cmp	r3, #1
 800584c:	f040 80b1 	bne.w	80059b2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	695a      	ldr	r2, [r3, #20]
 8005854:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005856:	441a      	add	r2, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	69da      	ldr	r2, [r3, #28]
 8005860:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005862:	441a      	add	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	6a1a      	ldr	r2, [r3, #32]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	429a      	cmp	r2, r3
 8005872:	d309      	bcc.n	8005888 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	6a1a      	ldr	r2, [r3, #32]
 800587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005880:	1ad2      	subs	r2, r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	621a      	str	r2, [r3, #32]
 8005886:	e014      	b.n	80058b2 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d106      	bne.n	800589e <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8005890:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005892:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800589c:	e009      	b.n	80058b2 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2200      	movs	r2, #0
 80058a8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	637b      	str	r3, [r7, #52]	; 0x34
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	785b      	ldrb	r3, [r3, #1]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d155      	bne.n	800596c <HAL_PCD_EP_DB_Transmit+0x49a>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	647b      	str	r3, [r7, #68]	; 0x44
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058d4:	4413      	add	r3, r2
 80058d6:	647b      	str	r3, [r7, #68]	; 0x44
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	011a      	lsls	r2, r3, #4
 80058de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058e0:	4413      	add	r3, r2
 80058e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058e6:	643b      	str	r3, [r7, #64]	; 0x40
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d112      	bne.n	8005914 <HAL_PCD_EP_DB_Transmit+0x442>
 80058ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058fc:	801a      	strh	r2, [r3, #0]
 80058fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590c:	b29a      	uxth	r2, r3
 800590e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005910:	801a      	strh	r2, [r3, #0]
 8005912:	e044      	b.n	800599e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8005914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005916:	2b3e      	cmp	r3, #62	; 0x3e
 8005918:	d811      	bhi.n	800593e <HAL_PCD_EP_DB_Transmit+0x46c>
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	085b      	lsrs	r3, r3, #1
 800591e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_PCD_EP_DB_Transmit+0x45e>
 800592a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592c:	3301      	adds	r3, #1
 800592e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005932:	b29b      	uxth	r3, r3
 8005934:	029b      	lsls	r3, r3, #10
 8005936:	b29a      	uxth	r2, r3
 8005938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800593a:	801a      	strh	r2, [r3, #0]
 800593c:	e02f      	b.n	800599e <HAL_PCD_EP_DB_Transmit+0x4cc>
 800593e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005940:	095b      	lsrs	r3, r3, #5
 8005942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005946:	f003 031f 	and.w	r3, r3, #31
 800594a:	2b00      	cmp	r3, #0
 800594c:	d102      	bne.n	8005954 <HAL_PCD_EP_DB_Transmit+0x482>
 800594e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005950:	3b01      	subs	r3, #1
 8005952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005956:	b29b      	uxth	r3, r3
 8005958:	029b      	lsls	r3, r3, #10
 800595a:	b29b      	uxth	r3, r3
 800595c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005964:	b29a      	uxth	r2, r3
 8005966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005968:	801a      	strh	r2, [r3, #0]
 800596a:	e018      	b.n	800599e <HAL_PCD_EP_DB_Transmit+0x4cc>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	785b      	ldrb	r3, [r3, #1]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d114      	bne.n	800599e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800597c:	b29b      	uxth	r3, r3
 800597e:	461a      	mov	r2, r3
 8005980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005982:	4413      	add	r3, r2
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	011a      	lsls	r2, r3, #4
 800598c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598e:	4413      	add	r3, r2
 8005990:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005994:	633b      	str	r3, [r7, #48]	; 0x30
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	b29a      	uxth	r2, r3
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6818      	ldr	r0, [r3, #0]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	6959      	ldr	r1, [r3, #20]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	895a      	ldrh	r2, [r3, #10]
 80059aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	f003 f8f1 	bl	8008b94 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059cc:	823b      	strh	r3, [r7, #16]
 80059ce:	8a3b      	ldrh	r3, [r7, #16]
 80059d0:	f083 0310 	eor.w	r3, r3, #16
 80059d4:	823b      	strh	r3, [r7, #16]
 80059d6:	8a3b      	ldrh	r3, [r7, #16]
 80059d8:	f083 0320 	eor.w	r3, r3, #32
 80059dc:	823b      	strh	r3, [r7, #16]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	461a      	mov	r2, r3
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	441a      	add	r2, r3
 80059ec:	8a3b      	ldrh	r3, [r7, #16]
 80059ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3748      	adds	r7, #72	; 0x48
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	607b      	str	r3, [r7, #4]
 8005a16:	460b      	mov	r3, r1
 8005a18:	817b      	strh	r3, [r7, #10]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005a1e:	897b      	ldrh	r3, [r7, #10]
 8005a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a2a:	897b      	ldrh	r3, [r7, #10]
 8005a2c:	f003 0307 	and.w	r3, r3, #7
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]
 8005a40:	e009      	b.n	8005a56 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a42:	897a      	ldrh	r2, [r7, #10]
 8005a44:	4613      	mov	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4413      	add	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005a56:	893b      	ldrh	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d107      	bne.n	8005a6c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	80da      	strh	r2, [r3, #6]
 8005a6a:	e00b      	b.n	8005a84 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	0c1b      	lsrs	r3, r3, #16
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	371c      	adds	r7, #28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr

08005a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e26c      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 8087 	beq.w	8005bbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ab0:	4b92      	ldr	r3, [pc, #584]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f003 030c 	and.w	r3, r3, #12
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d00c      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005abc:	4b8f      	ldr	r3, [pc, #572]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f003 030c 	and.w	r3, r3, #12
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d112      	bne.n	8005aee <HAL_RCC_OscConfig+0x5e>
 8005ac8:	4b8c      	ldr	r3, [pc, #560]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad4:	d10b      	bne.n	8005aee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad6:	4b89      	ldr	r3, [pc, #548]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d06c      	beq.n	8005bbc <HAL_RCC_OscConfig+0x12c>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d168      	bne.n	8005bbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e246      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af6:	d106      	bne.n	8005b06 <HAL_RCC_OscConfig+0x76>
 8005af8:	4b80      	ldr	r3, [pc, #512]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a7f      	ldr	r2, [pc, #508]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	e02e      	b.n	8005b64 <HAL_RCC_OscConfig+0xd4>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10c      	bne.n	8005b28 <HAL_RCC_OscConfig+0x98>
 8005b0e:	4b7b      	ldr	r3, [pc, #492]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a7a      	ldr	r2, [pc, #488]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	4b78      	ldr	r3, [pc, #480]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a77      	ldr	r2, [pc, #476]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	e01d      	b.n	8005b64 <HAL_RCC_OscConfig+0xd4>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b30:	d10c      	bne.n	8005b4c <HAL_RCC_OscConfig+0xbc>
 8005b32:	4b72      	ldr	r3, [pc, #456]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a71      	ldr	r2, [pc, #452]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	4b6f      	ldr	r3, [pc, #444]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a6e      	ldr	r2, [pc, #440]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	e00b      	b.n	8005b64 <HAL_RCC_OscConfig+0xd4>
 8005b4c:	4b6b      	ldr	r3, [pc, #428]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a6a      	ldr	r2, [pc, #424]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	4b68      	ldr	r3, [pc, #416]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a67      	ldr	r2, [pc, #412]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d013      	beq.n	8005b94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b6c:	f7fc f88e 	bl	8001c8c <HAL_GetTick>
 8005b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b72:	e008      	b.n	8005b86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b74:	f7fc f88a 	bl	8001c8c <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b64      	cmp	r3, #100	; 0x64
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e1fa      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b86:	4b5d      	ldr	r3, [pc, #372]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0f0      	beq.n	8005b74 <HAL_RCC_OscConfig+0xe4>
 8005b92:	e014      	b.n	8005bbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b94:	f7fc f87a 	bl	8001c8c <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b9c:	f7fc f876 	bl	8001c8c <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b64      	cmp	r3, #100	; 0x64
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e1e6      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bae:	4b53      	ldr	r3, [pc, #332]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1f0      	bne.n	8005b9c <HAL_RCC_OscConfig+0x10c>
 8005bba:	e000      	b.n	8005bbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d063      	beq.n	8005c92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bca:	4b4c      	ldr	r3, [pc, #304]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f003 030c 	and.w	r3, r3, #12
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00b      	beq.n	8005bee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005bd6:	4b49      	ldr	r3, [pc, #292]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f003 030c 	and.w	r3, r3, #12
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d11c      	bne.n	8005c1c <HAL_RCC_OscConfig+0x18c>
 8005be2:	4b46      	ldr	r3, [pc, #280]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d116      	bne.n	8005c1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bee:	4b43      	ldr	r3, [pc, #268]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d005      	beq.n	8005c06 <HAL_RCC_OscConfig+0x176>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d001      	beq.n	8005c06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e1ba      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c06:	4b3d      	ldr	r3, [pc, #244]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4939      	ldr	r1, [pc, #228]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c1a:	e03a      	b.n	8005c92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d020      	beq.n	8005c66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c24:	4b36      	ldr	r3, [pc, #216]	; (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005c26:	2201      	movs	r2, #1
 8005c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c2a:	f7fc f82f 	bl	8001c8c <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c30:	e008      	b.n	8005c44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c32:	f7fc f82b 	bl	8001c8c <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e19b      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c44:	4b2d      	ldr	r3, [pc, #180]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0f0      	beq.n	8005c32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c50:	4b2a      	ldr	r3, [pc, #168]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	4927      	ldr	r1, [pc, #156]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	600b      	str	r3, [r1, #0]
 8005c64:	e015      	b.n	8005c92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c66:	4b26      	ldr	r3, [pc, #152]	; (8005d00 <HAL_RCC_OscConfig+0x270>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c6c:	f7fc f80e 	bl	8001c8c <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c74:	f7fc f80a 	bl	8001c8c <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e17a      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c86:	4b1d      	ldr	r3, [pc, #116]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f0      	bne.n	8005c74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d03a      	beq.n	8005d14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d019      	beq.n	8005cda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ca6:	4b17      	ldr	r3, [pc, #92]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005ca8:	2201      	movs	r2, #1
 8005caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cac:	f7fb ffee 	bl	8001c8c <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cb4:	f7fb ffea 	bl	8001c8c <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e15a      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <HAL_RCC_OscConfig+0x26c>)
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f0      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005cd2:	2001      	movs	r0, #1
 8005cd4:	f000 fac6 	bl	8006264 <RCC_Delay>
 8005cd8:	e01c      	b.n	8005d14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cda:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <HAL_RCC_OscConfig+0x274>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ce0:	f7fb ffd4 	bl	8001c8c <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ce6:	e00f      	b.n	8005d08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ce8:	f7fb ffd0 	bl	8001c8c <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d908      	bls.n	8005d08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e140      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
 8005cfa:	bf00      	nop
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	42420000 	.word	0x42420000
 8005d04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d08:	4b9e      	ldr	r3, [pc, #632]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e9      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 80a6 	beq.w	8005e6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d22:	2300      	movs	r3, #0
 8005d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d26:	4b97      	ldr	r3, [pc, #604]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10d      	bne.n	8005d4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d32:	4b94      	ldr	r3, [pc, #592]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	4a93      	ldr	r2, [pc, #588]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d3c:	61d3      	str	r3, [r2, #28]
 8005d3e:	4b91      	ldr	r3, [pc, #580]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d46:	60bb      	str	r3, [r7, #8]
 8005d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d4e:	4b8e      	ldr	r3, [pc, #568]	; (8005f88 <HAL_RCC_OscConfig+0x4f8>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d118      	bne.n	8005d8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d5a:	4b8b      	ldr	r3, [pc, #556]	; (8005f88 <HAL_RCC_OscConfig+0x4f8>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a8a      	ldr	r2, [pc, #552]	; (8005f88 <HAL_RCC_OscConfig+0x4f8>)
 8005d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d66:	f7fb ff91 	bl	8001c8c <HAL_GetTick>
 8005d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6c:	e008      	b.n	8005d80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d6e:	f7fb ff8d 	bl	8001c8c <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b64      	cmp	r3, #100	; 0x64
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e0fd      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d80:	4b81      	ldr	r3, [pc, #516]	; (8005f88 <HAL_RCC_OscConfig+0x4f8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0f0      	beq.n	8005d6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d106      	bne.n	8005da2 <HAL_RCC_OscConfig+0x312>
 8005d94:	4b7b      	ldr	r3, [pc, #492]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	4a7a      	ldr	r2, [pc, #488]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	6213      	str	r3, [r2, #32]
 8005da0:	e02d      	b.n	8005dfe <HAL_RCC_OscConfig+0x36e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10c      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x334>
 8005daa:	4b76      	ldr	r3, [pc, #472]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	4a75      	ldr	r2, [pc, #468]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005db0:	f023 0301 	bic.w	r3, r3, #1
 8005db4:	6213      	str	r3, [r2, #32]
 8005db6:	4b73      	ldr	r3, [pc, #460]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	4a72      	ldr	r2, [pc, #456]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005dbc:	f023 0304 	bic.w	r3, r3, #4
 8005dc0:	6213      	str	r3, [r2, #32]
 8005dc2:	e01c      	b.n	8005dfe <HAL_RCC_OscConfig+0x36e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	2b05      	cmp	r3, #5
 8005dca:	d10c      	bne.n	8005de6 <HAL_RCC_OscConfig+0x356>
 8005dcc:	4b6d      	ldr	r3, [pc, #436]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	4a6c      	ldr	r2, [pc, #432]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005dd2:	f043 0304 	orr.w	r3, r3, #4
 8005dd6:	6213      	str	r3, [r2, #32]
 8005dd8:	4b6a      	ldr	r3, [pc, #424]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	4a69      	ldr	r2, [pc, #420]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005dde:	f043 0301 	orr.w	r3, r3, #1
 8005de2:	6213      	str	r3, [r2, #32]
 8005de4:	e00b      	b.n	8005dfe <HAL_RCC_OscConfig+0x36e>
 8005de6:	4b67      	ldr	r3, [pc, #412]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	4a66      	ldr	r2, [pc, #408]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005dec:	f023 0301 	bic.w	r3, r3, #1
 8005df0:	6213      	str	r3, [r2, #32]
 8005df2:	4b64      	ldr	r3, [pc, #400]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	4a63      	ldr	r2, [pc, #396]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005df8:	f023 0304 	bic.w	r3, r3, #4
 8005dfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d015      	beq.n	8005e32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e06:	f7fb ff41 	bl	8001c8c <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e0c:	e00a      	b.n	8005e24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e0e:	f7fb ff3d 	bl	8001c8c <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e0ab      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e24:	4b57      	ldr	r3, [pc, #348]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0ee      	beq.n	8005e0e <HAL_RCC_OscConfig+0x37e>
 8005e30:	e014      	b.n	8005e5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e32:	f7fb ff2b 	bl	8001c8c <HAL_GetTick>
 8005e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e38:	e00a      	b.n	8005e50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e3a:	f7fb ff27 	bl	8001c8c <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d901      	bls.n	8005e50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e095      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e50:	4b4c      	ldr	r3, [pc, #304]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1ee      	bne.n	8005e3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d105      	bne.n	8005e6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e62:	4b48      	ldr	r3, [pc, #288]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	4a47      	ldr	r2, [pc, #284]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 8081 	beq.w	8005f7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e78:	4b42      	ldr	r3, [pc, #264]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f003 030c 	and.w	r3, r3, #12
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d061      	beq.n	8005f48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d146      	bne.n	8005f1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e8c:	4b3f      	ldr	r3, [pc, #252]	; (8005f8c <HAL_RCC_OscConfig+0x4fc>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e92:	f7fb fefb 	bl	8001c8c <HAL_GetTick>
 8005e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e98:	e008      	b.n	8005eac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e9a:	f7fb fef7 	bl	8001c8c <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d901      	bls.n	8005eac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e067      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005eac:	4b35      	ldr	r3, [pc, #212]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1f0      	bne.n	8005e9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec0:	d108      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ec2:	4b30      	ldr	r3, [pc, #192]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	492d      	ldr	r1, [pc, #180]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ed4:	4b2b      	ldr	r3, [pc, #172]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a19      	ldr	r1, [r3, #32]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	4927      	ldr	r1, [pc, #156]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eec:	4b27      	ldr	r3, [pc, #156]	; (8005f8c <HAL_RCC_OscConfig+0x4fc>)
 8005eee:	2201      	movs	r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef2:	f7fb fecb 	bl	8001c8c <HAL_GetTick>
 8005ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ef8:	e008      	b.n	8005f0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005efa:	f7fb fec7 	bl	8001c8c <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d901      	bls.n	8005f0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e037      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f0c:	4b1d      	ldr	r3, [pc, #116]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d0f0      	beq.n	8005efa <HAL_RCC_OscConfig+0x46a>
 8005f18:	e02f      	b.n	8005f7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f1a:	4b1c      	ldr	r3, [pc, #112]	; (8005f8c <HAL_RCC_OscConfig+0x4fc>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f20:	f7fb feb4 	bl	8001c8c <HAL_GetTick>
 8005f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f26:	e008      	b.n	8005f3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f28:	f7fb feb0 	bl	8001c8c <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e020      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f3a:	4b12      	ldr	r3, [pc, #72]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1f0      	bne.n	8005f28 <HAL_RCC_OscConfig+0x498>
 8005f46:	e018      	b.n	8005f7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e013      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f54:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <HAL_RCC_OscConfig+0x4f4>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d106      	bne.n	8005f76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d001      	beq.n	8005f7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	40021000 	.word	0x40021000
 8005f88:	40007000 	.word	0x40007000
 8005f8c:	42420060 	.word	0x42420060

08005f90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e0d0      	b.n	8006146 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fa4:	4b6a      	ldr	r3, [pc, #424]	; (8006150 <HAL_RCC_ClockConfig+0x1c0>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d910      	bls.n	8005fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb2:	4b67      	ldr	r3, [pc, #412]	; (8006150 <HAL_RCC_ClockConfig+0x1c0>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f023 0207 	bic.w	r2, r3, #7
 8005fba:	4965      	ldr	r1, [pc, #404]	; (8006150 <HAL_RCC_ClockConfig+0x1c0>)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc2:	4b63      	ldr	r3, [pc, #396]	; (8006150 <HAL_RCC_ClockConfig+0x1c0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d001      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0b8      	b.n	8006146 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d020      	beq.n	8006022 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fec:	4b59      	ldr	r3, [pc, #356]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	4a58      	ldr	r2, [pc, #352]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8005ff2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ff6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006004:	4b53      	ldr	r3, [pc, #332]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	4a52      	ldr	r2, [pc, #328]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 800600a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800600e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006010:	4b50      	ldr	r3, [pc, #320]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	494d      	ldr	r1, [pc, #308]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 800601e:	4313      	orrs	r3, r2
 8006020:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d040      	beq.n	80060b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d107      	bne.n	8006046 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006036:	4b47      	ldr	r3, [pc, #284]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d115      	bne.n	800606e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e07f      	b.n	8006146 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d107      	bne.n	800605e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800604e:	4b41      	ldr	r3, [pc, #260]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d109      	bne.n	800606e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e073      	b.n	8006146 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800605e:	4b3d      	ldr	r3, [pc, #244]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e06b      	b.n	8006146 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800606e:	4b39      	ldr	r3, [pc, #228]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f023 0203 	bic.w	r2, r3, #3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	4936      	ldr	r1, [pc, #216]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 800607c:	4313      	orrs	r3, r2
 800607e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006080:	f7fb fe04 	bl	8001c8c <HAL_GetTick>
 8006084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006086:	e00a      	b.n	800609e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006088:	f7fb fe00 	bl	8001c8c <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	f241 3288 	movw	r2, #5000	; 0x1388
 8006096:	4293      	cmp	r3, r2
 8006098:	d901      	bls.n	800609e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e053      	b.n	8006146 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800609e:	4b2d      	ldr	r3, [pc, #180]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f003 020c 	and.w	r2, r3, #12
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d1eb      	bne.n	8006088 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060b0:	4b27      	ldr	r3, [pc, #156]	; (8006150 <HAL_RCC_ClockConfig+0x1c0>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0307 	and.w	r3, r3, #7
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d210      	bcs.n	80060e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060be:	4b24      	ldr	r3, [pc, #144]	; (8006150 <HAL_RCC_ClockConfig+0x1c0>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f023 0207 	bic.w	r2, r3, #7
 80060c6:	4922      	ldr	r1, [pc, #136]	; (8006150 <HAL_RCC_ClockConfig+0x1c0>)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ce:	4b20      	ldr	r3, [pc, #128]	; (8006150 <HAL_RCC_ClockConfig+0x1c0>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d001      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e032      	b.n	8006146 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d008      	beq.n	80060fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060ec:	4b19      	ldr	r3, [pc, #100]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	4916      	ldr	r1, [pc, #88]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800610a:	4b12      	ldr	r3, [pc, #72]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	490e      	ldr	r1, [pc, #56]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 800611a:	4313      	orrs	r3, r2
 800611c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800611e:	f000 f821 	bl	8006164 <HAL_RCC_GetSysClockFreq>
 8006122:	4601      	mov	r1, r0
 8006124:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <HAL_RCC_ClockConfig+0x1c4>)
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	4a0a      	ldr	r2, [pc, #40]	; (8006158 <HAL_RCC_ClockConfig+0x1c8>)
 8006130:	5cd3      	ldrb	r3, [r2, r3]
 8006132:	fa21 f303 	lsr.w	r3, r1, r3
 8006136:	4a09      	ldr	r2, [pc, #36]	; (800615c <HAL_RCC_ClockConfig+0x1cc>)
 8006138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800613a:	4b09      	ldr	r3, [pc, #36]	; (8006160 <HAL_RCC_ClockConfig+0x1d0>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4618      	mov	r0, r3
 8006140:	f7fb fd62 	bl	8001c08 <HAL_InitTick>

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	40022000 	.word	0x40022000
 8006154:	40021000 	.word	0x40021000
 8006158:	0800acd8 	.word	0x0800acd8
 800615c:	20000018 	.word	0x20000018
 8006160:	2000001c 	.word	0x2000001c

08006164 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006164:	b490      	push	{r4, r7}
 8006166:	b08a      	sub	sp, #40	; 0x28
 8006168:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800616a:	4b2a      	ldr	r3, [pc, #168]	; (8006214 <HAL_RCC_GetSysClockFreq+0xb0>)
 800616c:	1d3c      	adds	r4, r7, #4
 800616e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006174:	4b28      	ldr	r3, [pc, #160]	; (8006218 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	61fb      	str	r3, [r7, #28]
 800617e:	2300      	movs	r3, #0
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	2300      	movs	r3, #0
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
 8006186:	2300      	movs	r3, #0
 8006188:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800618e:	4b23      	ldr	r3, [pc, #140]	; (800621c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f003 030c 	and.w	r3, r3, #12
 800619a:	2b04      	cmp	r3, #4
 800619c:	d002      	beq.n	80061a4 <HAL_RCC_GetSysClockFreq+0x40>
 800619e:	2b08      	cmp	r3, #8
 80061a0:	d003      	beq.n	80061aa <HAL_RCC_GetSysClockFreq+0x46>
 80061a2:	e02d      	b.n	8006200 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80061a4:	4b1e      	ldr	r3, [pc, #120]	; (8006220 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061a6:	623b      	str	r3, [r7, #32]
      break;
 80061a8:	e02d      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	0c9b      	lsrs	r3, r3, #18
 80061ae:	f003 030f 	and.w	r3, r3, #15
 80061b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80061b6:	4413      	add	r3, r2
 80061b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80061bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d013      	beq.n	80061f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80061c8:	4b14      	ldr	r3, [pc, #80]	; (800621c <HAL_RCC_GetSysClockFreq+0xb8>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	0c5b      	lsrs	r3, r3, #17
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80061d6:	4413      	add	r3, r2
 80061d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80061dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	4a0f      	ldr	r2, [pc, #60]	; (8006220 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061e2:	fb02 f203 	mul.w	r2, r2, r3
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
 80061ee:	e004      	b.n	80061fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	4a0c      	ldr	r2, [pc, #48]	; (8006224 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061f4:	fb02 f303 	mul.w	r3, r2, r3
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	623b      	str	r3, [r7, #32]
      break;
 80061fe:	e002      	b.n	8006206 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006202:	623b      	str	r3, [r7, #32]
      break;
 8006204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006206:	6a3b      	ldr	r3, [r7, #32]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3728      	adds	r7, #40	; 0x28
 800620c:	46bd      	mov	sp, r7
 800620e:	bc90      	pop	{r4, r7}
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	0800ac7c 	.word	0x0800ac7c
 8006218:	0800ac8c 	.word	0x0800ac8c
 800621c:	40021000 	.word	0x40021000
 8006220:	007a1200 	.word	0x007a1200
 8006224:	003d0900 	.word	0x003d0900

08006228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006228:	b480      	push	{r7}
 800622a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800622c:	4b02      	ldr	r3, [pc, #8]	; (8006238 <HAL_RCC_GetHCLKFreq+0x10>)
 800622e:	681b      	ldr	r3, [r3, #0]
}
 8006230:	4618      	mov	r0, r3
 8006232:	46bd      	mov	sp, r7
 8006234:	bc80      	pop	{r7}
 8006236:	4770      	bx	lr
 8006238:	20000018 	.word	0x20000018

0800623c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006240:	f7ff fff2 	bl	8006228 <HAL_RCC_GetHCLKFreq>
 8006244:	4601      	mov	r1, r0
 8006246:	4b05      	ldr	r3, [pc, #20]	; (800625c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	0a1b      	lsrs	r3, r3, #8
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	4a03      	ldr	r2, [pc, #12]	; (8006260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006252:	5cd3      	ldrb	r3, [r2, r3]
 8006254:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006258:	4618      	mov	r0, r3
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40021000 	.word	0x40021000
 8006260:	0800ace8 	.word	0x0800ace8

08006264 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800626c:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <RCC_Delay+0x34>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a0a      	ldr	r2, [pc, #40]	; (800629c <RCC_Delay+0x38>)
 8006272:	fba2 2303 	umull	r2, r3, r2, r3
 8006276:	0a5b      	lsrs	r3, r3, #9
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	fb02 f303 	mul.w	r3, r2, r3
 800627e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006280:	bf00      	nop
  }
  while (Delay --);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	1e5a      	subs	r2, r3, #1
 8006286:	60fa      	str	r2, [r7, #12]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1f9      	bne.n	8006280 <RCC_Delay+0x1c>
}
 800628c:	bf00      	nop
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	20000018 	.word	0x20000018
 800629c:	10624dd3 	.word	0x10624dd3

080062a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	613b      	str	r3, [r7, #16]
 80062ac:	2300      	movs	r3, #0
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d07d      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80062bc:	2300      	movs	r3, #0
 80062be:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062c0:	4b4f      	ldr	r3, [pc, #316]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10d      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062cc:	4b4c      	ldr	r3, [pc, #304]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	4a4b      	ldr	r2, [pc, #300]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d6:	61d3      	str	r3, [r2, #28]
 80062d8:	4b49      	ldr	r3, [pc, #292]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e0:	60bb      	str	r3, [r7, #8]
 80062e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062e4:	2301      	movs	r3, #1
 80062e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e8:	4b46      	ldr	r3, [pc, #280]	; (8006404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d118      	bne.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062f4:	4b43      	ldr	r3, [pc, #268]	; (8006404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a42      	ldr	r2, [pc, #264]	; (8006404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006300:	f7fb fcc4 	bl	8001c8c <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006306:	e008      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006308:	f7fb fcc0 	bl	8001c8c <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b64      	cmp	r3, #100	; 0x64
 8006314:	d901      	bls.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e06d      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800631a:	4b3a      	ldr	r3, [pc, #232]	; (8006404 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0f0      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006326:	4b36      	ldr	r3, [pc, #216]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800632e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d02e      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	429a      	cmp	r2, r3
 8006342:	d027      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006344:	4b2e      	ldr	r3, [pc, #184]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800634c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800634e:	4b2e      	ldr	r3, [pc, #184]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006350:	2201      	movs	r2, #1
 8006352:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006354:	4b2c      	ldr	r3, [pc, #176]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006356:	2200      	movs	r2, #0
 8006358:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800635a:	4a29      	ldr	r2, [pc, #164]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d014      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800636a:	f7fb fc8f 	bl	8001c8c <HAL_GetTick>
 800636e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006370:	e00a      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006372:	f7fb fc8b 	bl	8001c8c <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006380:	4293      	cmp	r3, r2
 8006382:	d901      	bls.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e036      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006388:	4b1d      	ldr	r3, [pc, #116]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0ee      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006394:	4b1a      	ldr	r3, [pc, #104]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	4917      	ldr	r1, [pc, #92]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d105      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ac:	4b14      	ldr	r3, [pc, #80]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	4a13      	ldr	r2, [pc, #76]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d008      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063c4:	4b0e      	ldr	r3, [pc, #56]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	490b      	ldr	r1, [pc, #44]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0310 	and.w	r3, r3, #16
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d008      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063e2:	4b07      	ldr	r3, [pc, #28]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	4904      	ldr	r1, [pc, #16]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	40021000 	.word	0x40021000
 8006404:	40007000 	.word	0x40007000
 8006408:	42420440 	.word	0x42420440

0800640c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e041      	b.n	80064a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fb f98c 	bl	8001750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	4619      	mov	r1, r3
 800644a:	4610      	mov	r0, r2
 800644c:	f000 fa1a 	bl	8006884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b082      	sub	sp, #8
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d122      	bne.n	8006506 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d11b      	bne.n	8006506 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f06f 0202 	mvn.w	r2, #2
 80064d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	f003 0303 	and.w	r3, r3, #3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f9ad 	bl	800684c <HAL_TIM_IC_CaptureCallback>
 80064f2:	e005      	b.n	8006500 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f9a0 	bl	800683a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f9af 	bl	800685e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b04      	cmp	r3, #4
 8006512:	d122      	bne.n	800655a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f003 0304 	and.w	r3, r3, #4
 800651e:	2b04      	cmp	r3, #4
 8006520:	d11b      	bne.n	800655a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f06f 0204 	mvn.w	r2, #4
 800652a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f983 	bl	800684c <HAL_TIM_IC_CaptureCallback>
 8006546:	e005      	b.n	8006554 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f976 	bl	800683a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f985 	bl	800685e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	f003 0308 	and.w	r3, r3, #8
 8006564:	2b08      	cmp	r3, #8
 8006566:	d122      	bne.n	80065ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b08      	cmp	r3, #8
 8006574:	d11b      	bne.n	80065ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f06f 0208 	mvn.w	r2, #8
 800657e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2204      	movs	r2, #4
 8006584:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	f003 0303 	and.w	r3, r3, #3
 8006590:	2b00      	cmp	r3, #0
 8006592:	d003      	beq.n	800659c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f959 	bl	800684c <HAL_TIM_IC_CaptureCallback>
 800659a:	e005      	b.n	80065a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f94c 	bl	800683a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f95b 	bl	800685e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	f003 0310 	and.w	r3, r3, #16
 80065b8:	2b10      	cmp	r3, #16
 80065ba:	d122      	bne.n	8006602 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	f003 0310 	and.w	r3, r3, #16
 80065c6:	2b10      	cmp	r3, #16
 80065c8:	d11b      	bne.n	8006602 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f06f 0210 	mvn.w	r2, #16
 80065d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2208      	movs	r2, #8
 80065d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f92f 	bl	800684c <HAL_TIM_IC_CaptureCallback>
 80065ee:	e005      	b.n	80065fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f922 	bl	800683a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f931 	bl	800685e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b01      	cmp	r3, #1
 800660e:	d10e      	bne.n	800662e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b01      	cmp	r3, #1
 800661c:	d107      	bne.n	800662e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f06f 0201 	mvn.w	r2, #1
 8006626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f8fd 	bl	8006828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006638:	2b80      	cmp	r3, #128	; 0x80
 800663a:	d10e      	bne.n	800665a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006646:	2b80      	cmp	r3, #128	; 0x80
 8006648:	d107      	bne.n	800665a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fa74 	bl	8006b42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006664:	2b40      	cmp	r3, #64	; 0x40
 8006666:	d10e      	bne.n	8006686 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006672:	2b40      	cmp	r3, #64	; 0x40
 8006674:	d107      	bne.n	8006686 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800667e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f8f5 	bl	8006870 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	f003 0320 	and.w	r3, r3, #32
 8006690:	2b20      	cmp	r3, #32
 8006692:	d10e      	bne.n	80066b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d107      	bne.n	80066b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f06f 0220 	mvn.w	r2, #32
 80066aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fa3f 	bl	8006b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066b2:	bf00      	nop
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d101      	bne.n	80066d2 <HAL_TIM_ConfigClockSource+0x18>
 80066ce:	2302      	movs	r3, #2
 80066d0:	e0a6      	b.n	8006820 <HAL_TIM_ConfigClockSource+0x166>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2202      	movs	r2, #2
 80066de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066f0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066f8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b40      	cmp	r3, #64	; 0x40
 8006708:	d067      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x120>
 800670a:	2b40      	cmp	r3, #64	; 0x40
 800670c:	d80b      	bhi.n	8006726 <HAL_TIM_ConfigClockSource+0x6c>
 800670e:	2b10      	cmp	r3, #16
 8006710:	d073      	beq.n	80067fa <HAL_TIM_ConfigClockSource+0x140>
 8006712:	2b10      	cmp	r3, #16
 8006714:	d802      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x62>
 8006716:	2b00      	cmp	r3, #0
 8006718:	d06f      	beq.n	80067fa <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800671a:	e078      	b.n	800680e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800671c:	2b20      	cmp	r3, #32
 800671e:	d06c      	beq.n	80067fa <HAL_TIM_ConfigClockSource+0x140>
 8006720:	2b30      	cmp	r3, #48	; 0x30
 8006722:	d06a      	beq.n	80067fa <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006724:	e073      	b.n	800680e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006726:	2b70      	cmp	r3, #112	; 0x70
 8006728:	d00d      	beq.n	8006746 <HAL_TIM_ConfigClockSource+0x8c>
 800672a:	2b70      	cmp	r3, #112	; 0x70
 800672c:	d804      	bhi.n	8006738 <HAL_TIM_ConfigClockSource+0x7e>
 800672e:	2b50      	cmp	r3, #80	; 0x50
 8006730:	d033      	beq.n	800679a <HAL_TIM_ConfigClockSource+0xe0>
 8006732:	2b60      	cmp	r3, #96	; 0x60
 8006734:	d041      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006736:	e06a      	b.n	800680e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800673c:	d066      	beq.n	800680c <HAL_TIM_ConfigClockSource+0x152>
 800673e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006742:	d017      	beq.n	8006774 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006744:	e063      	b.n	800680e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6818      	ldr	r0, [r3, #0]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	6899      	ldr	r1, [r3, #8]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f000 f96e 	bl	8006a36 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006768:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	609a      	str	r2, [r3, #8]
      break;
 8006772:	e04c      	b.n	800680e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6818      	ldr	r0, [r3, #0]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	6899      	ldr	r1, [r3, #8]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f000 f957 	bl	8006a36 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689a      	ldr	r2, [r3, #8]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006796:	609a      	str	r2, [r3, #8]
      break;
 8006798:	e039      	b.n	800680e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	6859      	ldr	r1, [r3, #4]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	461a      	mov	r2, r3
 80067a8:	f000 f8ce 	bl	8006948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2150      	movs	r1, #80	; 0x50
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 f925 	bl	8006a02 <TIM_ITRx_SetConfig>
      break;
 80067b8:	e029      	b.n	800680e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6859      	ldr	r1, [r3, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f000 f8ec 	bl	80069a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2160      	movs	r1, #96	; 0x60
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 f915 	bl	8006a02 <TIM_ITRx_SetConfig>
      break;
 80067d8:	e019      	b.n	800680e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6818      	ldr	r0, [r3, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	6859      	ldr	r1, [r3, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	461a      	mov	r2, r3
 80067e8:	f000 f8ae 	bl	8006948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2140      	movs	r1, #64	; 0x40
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 f905 	bl	8006a02 <TIM_ITRx_SetConfig>
      break;
 80067f8:	e009      	b.n	800680e <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4619      	mov	r1, r3
 8006804:	4610      	mov	r0, r2
 8006806:	f000 f8fc 	bl	8006a02 <TIM_ITRx_SetConfig>
        break;
 800680a:	e000      	b.n	800680e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800680c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	bc80      	pop	{r7}
 8006838:	4770      	bx	lr

0800683a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	bc80      	pop	{r7}
 800684a:	4770      	bx	lr

0800684c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	bc80      	pop	{r7}
 800685c:	4770      	bx	lr

0800685e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr

08006870 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr
	...

08006884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a29      	ldr	r2, [pc, #164]	; (800693c <TIM_Base_SetConfig+0xb8>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00b      	beq.n	80068b4 <TIM_Base_SetConfig+0x30>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a2:	d007      	beq.n	80068b4 <TIM_Base_SetConfig+0x30>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a26      	ldr	r2, [pc, #152]	; (8006940 <TIM_Base_SetConfig+0xbc>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d003      	beq.n	80068b4 <TIM_Base_SetConfig+0x30>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a25      	ldr	r2, [pc, #148]	; (8006944 <TIM_Base_SetConfig+0xc0>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d108      	bne.n	80068c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a1c      	ldr	r2, [pc, #112]	; (800693c <TIM_Base_SetConfig+0xb8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d00b      	beq.n	80068e6 <TIM_Base_SetConfig+0x62>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d4:	d007      	beq.n	80068e6 <TIM_Base_SetConfig+0x62>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a19      	ldr	r2, [pc, #100]	; (8006940 <TIM_Base_SetConfig+0xbc>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d003      	beq.n	80068e6 <TIM_Base_SetConfig+0x62>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a18      	ldr	r2, [pc, #96]	; (8006944 <TIM_Base_SetConfig+0xc0>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d108      	bne.n	80068f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a07      	ldr	r2, [pc, #28]	; (800693c <TIM_Base_SetConfig+0xb8>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d103      	bne.n	800692c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	691a      	ldr	r2, [r3, #16]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	615a      	str	r2, [r3, #20]
}
 8006932:	bf00      	nop
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	bc80      	pop	{r7}
 800693a:	4770      	bx	lr
 800693c:	40012c00 	.word	0x40012c00
 8006940:	40000400 	.word	0x40000400
 8006944:	40000800 	.word	0x40000800

08006948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	f023 0201 	bic.w	r2, r3, #1
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4313      	orrs	r3, r2
 800697c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f023 030a 	bic.w	r3, r3, #10
 8006984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	4313      	orrs	r3, r2
 800698c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	621a      	str	r2, [r3, #32]
}
 800699a:	bf00      	nop
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr

080069a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	f023 0210 	bic.w	r2, r3, #16
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	031b      	lsls	r3, r3, #12
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	621a      	str	r2, [r3, #32]
}
 80069f8:	bf00      	nop
 80069fa:	371c      	adds	r7, #28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr

08006a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b085      	sub	sp, #20
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	f043 0307 	orr.w	r3, r3, #7
 8006a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	609a      	str	r2, [r3, #8]
}
 8006a2c:	bf00      	nop
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc80      	pop	{r7}
 8006a34:	4770      	bx	lr

08006a36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b087      	sub	sp, #28
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
 8006a42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	021a      	lsls	r2, r3, #8
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	609a      	str	r2, [r3, #8]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bc80      	pop	{r7}
 8006a72:	4770      	bx	lr

08006a74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d101      	bne.n	8006a8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a88:	2302      	movs	r3, #2
 8006a8a:	e046      	b.n	8006b1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a16      	ldr	r2, [pc, #88]	; (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00e      	beq.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad8:	d009      	beq.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a12      	ldr	r2, [pc, #72]	; (8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d004      	beq.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a10      	ldr	r2, [pc, #64]	; (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d10c      	bne.n	8006b08 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006af4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bc80      	pop	{r7}
 8006b22:	4770      	bx	lr
 8006b24:	40012c00 	.word	0x40012c00
 8006b28:	40000400 	.word	0x40000400
 8006b2c:	40000800 	.word	0x40000800

08006b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr

08006b42 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b4a:	bf00      	nop
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr

08006b54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006b54:	b084      	sub	sp, #16
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	f107 0014 	add.w	r0, r7, #20
 8006b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	b004      	add	sp, #16
 8006b72:	4770      	bx	lr

08006b74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b84:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006b88:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bc80      	pop	{r7}
 8006b9e:	4770      	bx	lr

08006ba0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006ba8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006bac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	43db      	mvns	r3, r3
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bc80      	pop	{r7}
 8006bd2:	4770      	bx	lr

08006bd4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bc80      	pop	{r7}
 8006bea:	4770      	bx	lr

08006bec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006bec:	b084      	sub	sp, #16
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	f107 0014 	add.w	r0, r7, #20
 8006bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bc80      	pop	{r7}
 8006c28:	b004      	add	sp, #16
 8006c2a:	4770      	bx	lr

08006c2c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b09b      	sub	sp, #108	; 0x6c
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c52:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	78db      	ldrb	r3, [r3, #3]
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d81f      	bhi.n	8006c9e <USB_ActivateEndpoint+0x72>
 8006c5e:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <USB_ActivateEndpoint+0x38>)
 8006c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c64:	08006c75 	.word	0x08006c75
 8006c68:	08006c91 	.word	0x08006c91
 8006c6c:	08006ca7 	.word	0x08006ca7
 8006c70:	08006c83 	.word	0x08006c83
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006c74:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006c78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c7c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006c80:	e012      	b.n	8006ca8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006c82:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006c86:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006c8a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006c8e:	e00b      	b.n	8006ca8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006c90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006c94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c98:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006c9c:	e004      	b.n	8006ca8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006ca4:	e000      	b.n	8006ca8 <USB_ActivateEndpoint+0x7c>
      break;
 8006ca6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	441a      	add	r2, r3
 8006cb2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	441a      	add	r2, r3
 8006cf8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	7b1b      	ldrb	r3, [r3, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f040 8149 	bne.w	8006fac <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	785b      	ldrb	r3, [r3, #1]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 8084 	beq.w	8006e2c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	461a      	mov	r2, r3
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	4413      	add	r3, r2
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	011a      	lsls	r2, r3, #4
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d46:	613b      	str	r3, [r7, #16]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	88db      	ldrh	r3, [r3, #6]
 8006d4c:	085b      	lsrs	r3, r3, #1
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	005b      	lsls	r3, r3, #1
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	81fb      	strh	r3, [r7, #14]
 8006d66:	89fb      	ldrh	r3, [r7, #14]
 8006d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d01b      	beq.n	8006da8 <USB_ActivateEndpoint+0x17c>
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d86:	81bb      	strh	r3, [r7, #12]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	441a      	add	r2, r3
 8006d92:	89bb      	ldrh	r3, [r7, #12]
 8006d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	78db      	ldrb	r3, [r3, #3]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d020      	beq.n	8006df2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc6:	813b      	strh	r3, [r7, #8]
 8006dc8:	893b      	ldrh	r3, [r7, #8]
 8006dca:	f083 0320 	eor.w	r3, r3, #32
 8006dce:	813b      	strh	r3, [r7, #8]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	441a      	add	r2, r3
 8006dda:	893b      	ldrh	r3, [r7, #8]
 8006ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	8013      	strh	r3, [r2, #0]
 8006df0:	e27f      	b.n	80072f2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e08:	817b      	strh	r3, [r7, #10]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	441a      	add	r2, r3
 8006e14:	897b      	ldrh	r3, [r7, #10]
 8006e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	8013      	strh	r3, [r2, #0]
 8006e2a:	e262      	b.n	80072f2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	461a      	mov	r2, r3
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	4413      	add	r3, r2
 8006e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	011a      	lsls	r2, r3, #4
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	88db      	ldrh	r3, [r3, #6]
 8006e54:	085b      	lsrs	r3, r3, #1
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	005b      	lsls	r3, r3, #1
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	4413      	add	r3, r2
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	011a      	lsls	r2, r3, #4
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e82:	623b      	str	r3, [r7, #32]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d112      	bne.n	8006eb2 <USB_ActivateEndpoint+0x286>
 8006e8c:	6a3b      	ldr	r3, [r7, #32]
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	801a      	strh	r2, [r3, #0]
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	801a      	strh	r2, [r3, #0]
 8006eb0:	e02f      	b.n	8006f12 <USB_ActivateEndpoint+0x2e6>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	2b3e      	cmp	r3, #62	; 0x3e
 8006eb8:	d813      	bhi.n	8006ee2 <USB_ActivateEndpoint+0x2b6>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	085b      	lsrs	r3, r3, #1
 8006ec0:	663b      	str	r3, [r7, #96]	; 0x60
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <USB_ActivateEndpoint+0x2a8>
 8006ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	663b      	str	r3, [r7, #96]	; 0x60
 8006ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	029b      	lsls	r3, r3, #10
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	801a      	strh	r2, [r3, #0]
 8006ee0:	e017      	b.n	8006f12 <USB_ActivateEndpoint+0x2e6>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	095b      	lsrs	r3, r3, #5
 8006ee8:	663b      	str	r3, [r7, #96]	; 0x60
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f003 031f 	and.w	r3, r3, #31
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d102      	bne.n	8006efc <USB_ActivateEndpoint+0x2d0>
 8006ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	663b      	str	r3, [r7, #96]	; 0x60
 8006efc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	029b      	lsls	r3, r3, #10
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	83fb      	strh	r3, [r7, #30]
 8006f20:	8bfb      	ldrh	r3, [r7, #30]
 8006f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d01b      	beq.n	8006f62 <USB_ActivateEndpoint+0x336>
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f40:	83bb      	strh	r3, [r7, #28]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	441a      	add	r2, r3
 8006f4c:	8bbb      	ldrh	r3, [r7, #28]
 8006f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f78:	837b      	strh	r3, [r7, #26]
 8006f7a:	8b7b      	ldrh	r3, [r7, #26]
 8006f7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f80:	837b      	strh	r3, [r7, #26]
 8006f82:	8b7b      	ldrh	r3, [r7, #26]
 8006f84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f88:	837b      	strh	r3, [r7, #26]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	441a      	add	r2, r3
 8006f94:	8b7b      	ldrh	r3, [r7, #26]
 8006f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	8013      	strh	r3, [r2, #0]
 8006faa:	e1a2      	b.n	80072f2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	441a      	add	r2, r3
 8006fd0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fdc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ff8:	4413      	add	r3, r2
 8006ffa:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	011a      	lsls	r2, r3, #4
 8007002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007004:	4413      	add	r3, r2
 8007006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800700a:	657b      	str	r3, [r7, #84]	; 0x54
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	891b      	ldrh	r3, [r3, #8]
 8007010:	085b      	lsrs	r3, r3, #1
 8007012:	b29b      	uxth	r3, r3
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	b29a      	uxth	r2, r3
 8007018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800701a:	801a      	strh	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	653b      	str	r3, [r7, #80]	; 0x50
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007026:	b29b      	uxth	r3, r3
 8007028:	461a      	mov	r2, r3
 800702a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800702c:	4413      	add	r3, r2
 800702e:	653b      	str	r3, [r7, #80]	; 0x50
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	011a      	lsls	r2, r3, #4
 8007036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007038:	4413      	add	r3, r2
 800703a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800703e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	895b      	ldrh	r3, [r3, #10]
 8007044:	085b      	lsrs	r3, r3, #1
 8007046:	b29b      	uxth	r3, r3
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	b29a      	uxth	r2, r3
 800704c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800704e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	785b      	ldrb	r3, [r3, #1]
 8007054:	2b00      	cmp	r3, #0
 8007056:	f040 8091 	bne.w	800717c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007068:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800706a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d01b      	beq.n	80070aa <USB_ActivateEndpoint+0x47e>
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	b29b      	uxth	r3, r3
 8007080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007088:	877b      	strh	r3, [r7, #58]	; 0x3a
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	441a      	add	r2, r3
 8007094:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800709a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800709e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	873b      	strh	r3, [r7, #56]	; 0x38
 80070b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80070ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d01b      	beq.n	80070fa <USB_ActivateEndpoint+0x4ce>
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	441a      	add	r2, r3
 80070e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80070e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	b29b      	uxth	r3, r3
 8007108:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800710c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007110:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007112:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007114:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007118:	86bb      	strh	r3, [r7, #52]	; 0x34
 800711a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800711c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007120:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	441a      	add	r2, r3
 800712c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800712e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800713a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713e:	b29b      	uxth	r3, r3
 8007140:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007158:	867b      	strh	r3, [r7, #50]	; 0x32
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	441a      	add	r2, r3
 8007164:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800716a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800716e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007176:	b29b      	uxth	r3, r3
 8007178:	8013      	strh	r3, [r2, #0]
 800717a:	e0ba      	b.n	80072f2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800718c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d01d      	beq.n	80071d4 <USB_ActivateEndpoint+0x5a8>
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	441a      	add	r2, r3
 80071bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80071c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80071e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80071e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01d      	beq.n	800722c <USB_ActivateEndpoint+0x600>
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007206:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	441a      	add	r2, r3
 8007214:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800721c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007224:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007228:	b29b      	uxth	r3, r3
 800722a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	78db      	ldrb	r3, [r3, #3]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d024      	beq.n	800727e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	b29b      	uxth	r3, r3
 8007242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800724a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800724e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007252:	f083 0320 	eor.w	r3, r3, #32
 8007256:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	441a      	add	r2, r3
 8007264:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800726c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007278:	b29b      	uxth	r3, r3
 800727a:	8013      	strh	r3, [r2, #0]
 800727c:	e01d      	b.n	80072ba <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007294:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	441a      	add	r2, r3
 80072a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80072a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	441a      	add	r2, r3
 80072dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80072de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80072f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	376c      	adds	r7, #108	; 0x6c
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bc80      	pop	{r7}
 80072fe:	4770      	bx	lr

08007300 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007300:	b480      	push	{r7}
 8007302:	b08d      	sub	sp, #52	; 0x34
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	7b1b      	ldrb	r3, [r3, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	f040 808e 	bne.w	8007430 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	785b      	ldrb	r3, [r3, #1]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d044      	beq.n	80073a6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	81bb      	strh	r3, [r7, #12]
 800732a:	89bb      	ldrh	r3, [r7, #12]
 800732c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01b      	beq.n	800736c <USB_DeactivateEndpoint+0x6c>
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	881b      	ldrh	r3, [r3, #0]
 8007340:	b29b      	uxth	r3, r3
 8007342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800734a:	817b      	strh	r3, [r7, #10]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	441a      	add	r2, r3
 8007356:	897b      	ldrh	r3, [r7, #10]
 8007358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800735c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007364:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007368:	b29b      	uxth	r3, r3
 800736a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	b29b      	uxth	r3, r3
 800737a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800737e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007382:	813b      	strh	r3, [r7, #8]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	441a      	add	r2, r3
 800738e:	893b      	ldrh	r3, [r7, #8]
 8007390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800739c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	8013      	strh	r3, [r2, #0]
 80073a4:	e192      	b.n	80076cc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4413      	add	r3, r2
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	827b      	strh	r3, [r7, #18]
 80073b4:	8a7b      	ldrh	r3, [r7, #18]
 80073b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d01b      	beq.n	80073f6 <USB_DeactivateEndpoint+0xf6>
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d4:	823b      	strh	r3, [r7, #16]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	441a      	add	r2, r3
 80073e0:	8a3b      	ldrh	r3, [r7, #16]
 80073e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	b29b      	uxth	r3, r3
 8007404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740c:	81fb      	strh	r3, [r7, #14]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	441a      	add	r2, r3
 8007418:	89fb      	ldrh	r3, [r7, #14]
 800741a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800741e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742a:	b29b      	uxth	r3, r3
 800742c:	8013      	strh	r3, [r2, #0]
 800742e:	e14d      	b.n	80076cc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	785b      	ldrb	r3, [r3, #1]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f040 80a5 	bne.w	8007584 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	843b      	strh	r3, [r7, #32]
 8007448:	8c3b      	ldrh	r3, [r7, #32]
 800744a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d01b      	beq.n	800748a <USB_DeactivateEndpoint+0x18a>
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	b29b      	uxth	r3, r3
 8007460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007468:	83fb      	strh	r3, [r7, #30]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	441a      	add	r2, r3
 8007474:	8bfb      	ldrh	r3, [r7, #30]
 8007476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800747a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800747e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007486:	b29b      	uxth	r3, r3
 8007488:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	881b      	ldrh	r3, [r3, #0]
 8007496:	83bb      	strh	r3, [r7, #28]
 8007498:	8bbb      	ldrh	r3, [r7, #28]
 800749a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d01b      	beq.n	80074da <USB_DeactivateEndpoint+0x1da>
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b8:	837b      	strh	r3, [r7, #26]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	441a      	add	r2, r3
 80074c4:	8b7b      	ldrh	r3, [r7, #26]
 80074c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f0:	833b      	strh	r3, [r7, #24]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	441a      	add	r2, r3
 80074fc:	8b3b      	ldrh	r3, [r7, #24]
 80074fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800750a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800750e:	b29b      	uxth	r3, r3
 8007510:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	b29b      	uxth	r3, r3
 8007520:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007528:	82fb      	strh	r3, [r7, #22]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	441a      	add	r2, r3
 8007534:	8afb      	ldrh	r3, [r7, #22]
 8007536:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800753a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800753e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007546:	b29b      	uxth	r3, r3
 8007548:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800755c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007560:	82bb      	strh	r3, [r7, #20]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	441a      	add	r2, r3
 800756c:	8abb      	ldrh	r3, [r7, #20]
 800756e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800757a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800757e:	b29b      	uxth	r3, r3
 8007580:	8013      	strh	r3, [r2, #0]
 8007582:	e0a3      	b.n	80076cc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007592:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d01b      	beq.n	80075d4 <USB_DeactivateEndpoint+0x2d4>
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	441a      	add	r2, r3
 80075be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80075c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4413      	add	r3, r2
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80075e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80075e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01b      	beq.n	8007624 <USB_DeactivateEndpoint+0x324>
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007602:	853b      	strh	r3, [r7, #40]	; 0x28
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	441a      	add	r2, r3
 800760e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800761c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007620:	b29b      	uxth	r3, r3
 8007622:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4413      	add	r3, r2
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	b29b      	uxth	r3, r3
 8007632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800763a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	441a      	add	r2, r3
 8007646:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800764c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007658:	b29b      	uxth	r3, r3
 800765a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	b29b      	uxth	r3, r3
 800766a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007672:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	441a      	add	r2, r3
 800767e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007680:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007684:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007688:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800768c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007690:	b29b      	uxth	r3, r3
 8007692:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	441a      	add	r2, r3
 80076b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3734      	adds	r7, #52	; 0x34
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bc80      	pop	{r7}
 80076d6:	4770      	bx	lr

080076d8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b0c4      	sub	sp, #272	; 0x110
 80076dc:	af00      	add	r7, sp, #0
 80076de:	1d3b      	adds	r3, r7, #4
 80076e0:	6018      	str	r0, [r3, #0]
 80076e2:	463b      	mov	r3, r7
 80076e4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076e6:	463b      	mov	r3, r7
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	785b      	ldrb	r3, [r3, #1]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	f040 8557 	bne.w	80081a0 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80076f2:	463b      	mov	r3, r7
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	699a      	ldr	r2, [r3, #24]
 80076f8:	463b      	mov	r3, r7
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d905      	bls.n	800770e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007702:	463b      	mov	r3, r7
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800770c:	e004      	b.n	8007718 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800770e:	463b      	mov	r3, r7
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007718:	463b      	mov	r3, r7
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	7b1b      	ldrb	r3, [r3, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d12c      	bne.n	800777c <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007722:	463b      	mov	r3, r7
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6959      	ldr	r1, [r3, #20]
 8007728:	463b      	mov	r3, r7
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	88da      	ldrh	r2, [r3, #6]
 800772e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007732:	b29b      	uxth	r3, r3
 8007734:	1d38      	adds	r0, r7, #4
 8007736:	6800      	ldr	r0, [r0, #0]
 8007738:	f001 fa2c 	bl	8008b94 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800773c:	1d3b      	adds	r3, r7, #4
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	1d3b      	adds	r3, r7, #4
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800774a:	b29b      	uxth	r3, r3
 800774c:	461a      	mov	r2, r3
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	4413      	add	r3, r2
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	463b      	mov	r3, r7
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	011a      	lsls	r2, r3, #4
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	4413      	add	r3, r2
 8007760:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007764:	f107 0310 	add.w	r3, r7, #16
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800776e:	b29a      	uxth	r2, r3
 8007770:	f107 0310 	add.w	r3, r7, #16
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	801a      	strh	r2, [r3, #0]
 8007778:	f000 bcdd 	b.w	8008136 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800777c:	463b      	mov	r3, r7
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	78db      	ldrb	r3, [r3, #3]
 8007782:	2b02      	cmp	r3, #2
 8007784:	f040 8347 	bne.w	8007e16 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007788:	463b      	mov	r3, r7
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6a1a      	ldr	r2, [r3, #32]
 800778e:	463b      	mov	r3, r7
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	429a      	cmp	r2, r3
 8007796:	f240 82eb 	bls.w	8007d70 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800779a:	1d3b      	adds	r3, r7, #4
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	463b      	mov	r3, r7
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80077b8:	1d3b      	adds	r3, r7, #4
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	463b      	mov	r3, r7
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	441a      	add	r2, r3
 80077c6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80077ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80077d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077da:	b29b      	uxth	r3, r3
 80077dc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80077de:	463b      	mov	r3, r7
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6a1a      	ldr	r2, [r3, #32]
 80077e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077e8:	1ad2      	subs	r2, r2, r3
 80077ea:	463b      	mov	r3, r7
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80077f0:	1d3b      	adds	r3, r7, #4
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	463b      	mov	r3, r7
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007806:	2b00      	cmp	r3, #0
 8007808:	f000 8159 	beq.w	8007abe <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800780c:	1d3b      	adds	r3, r7, #4
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	637b      	str	r3, [r7, #52]	; 0x34
 8007812:	463b      	mov	r3, r7
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	785b      	ldrb	r3, [r3, #1]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d164      	bne.n	80078e6 <USB_EPStartXfer+0x20e>
 800781c:	1d3b      	adds	r3, r7, #4
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007822:	1d3b      	adds	r3, r7, #4
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800782a:	b29b      	uxth	r3, r3
 800782c:	461a      	mov	r2, r3
 800782e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007830:	4413      	add	r3, r2
 8007832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007834:	463b      	mov	r3, r7
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	011a      	lsls	r2, r3, #4
 800783c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783e:	4413      	add	r3, r2
 8007840:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007844:	62bb      	str	r3, [r7, #40]	; 0x28
 8007846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800784a:	2b00      	cmp	r3, #0
 800784c:	d112      	bne.n	8007874 <USB_EPStartXfer+0x19c>
 800784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	b29b      	uxth	r3, r3
 8007854:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007858:	b29a      	uxth	r2, r3
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	801a      	strh	r2, [r3, #0]
 800785e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	b29b      	uxth	r3, r3
 8007864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800786c:	b29a      	uxth	r2, r3
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	801a      	strh	r2, [r3, #0]
 8007872:	e054      	b.n	800791e <USB_EPStartXfer+0x246>
 8007874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007878:	2b3e      	cmp	r3, #62	; 0x3e
 800787a:	d817      	bhi.n	80078ac <USB_EPStartXfer+0x1d4>
 800787c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007880:	085b      	lsrs	r3, r3, #1
 8007882:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b00      	cmp	r3, #0
 8007890:	d004      	beq.n	800789c <USB_EPStartXfer+0x1c4>
 8007892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007896:	3301      	adds	r3, #1
 8007898:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	029b      	lsls	r3, r3, #10
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a8:	801a      	strh	r2, [r3, #0]
 80078aa:	e038      	b.n	800791e <USB_EPStartXfer+0x246>
 80078ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078b0:	095b      	lsrs	r3, r3, #5
 80078b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80078b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078ba:	f003 031f 	and.w	r3, r3, #31
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d104      	bne.n	80078cc <USB_EPStartXfer+0x1f4>
 80078c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078c6:	3b01      	subs	r3, #1
 80078c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80078cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	029b      	lsls	r3, r3, #10
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078de:	b29a      	uxth	r2, r3
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	801a      	strh	r2, [r3, #0]
 80078e4:	e01b      	b.n	800791e <USB_EPStartXfer+0x246>
 80078e6:	463b      	mov	r3, r7
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	785b      	ldrb	r3, [r3, #1]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d116      	bne.n	800791e <USB_EPStartXfer+0x246>
 80078f0:	1d3b      	adds	r3, r7, #4
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	461a      	mov	r2, r3
 80078fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fe:	4413      	add	r3, r2
 8007900:	637b      	str	r3, [r7, #52]	; 0x34
 8007902:	463b      	mov	r3, r7
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	011a      	lsls	r2, r3, #4
 800790a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790c:	4413      	add	r3, r2
 800790e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007912:	633b      	str	r3, [r7, #48]	; 0x30
 8007914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007918:	b29a      	uxth	r2, r3
 800791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800791e:	463b      	mov	r3, r7
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	895b      	ldrh	r3, [r3, #10]
 8007924:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007928:	463b      	mov	r3, r7
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6959      	ldr	r1, [r3, #20]
 800792e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007932:	b29b      	uxth	r3, r3
 8007934:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007938:	1d38      	adds	r0, r7, #4
 800793a:	6800      	ldr	r0, [r0, #0]
 800793c:	f001 f92a 	bl	8008b94 <USB_WritePMA>
            ep->xfer_buff += len;
 8007940:	463b      	mov	r3, r7
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	695a      	ldr	r2, [r3, #20]
 8007946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800794a:	441a      	add	r2, r3
 800794c:	463b      	mov	r3, r7
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007952:	463b      	mov	r3, r7
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6a1a      	ldr	r2, [r3, #32]
 8007958:	463b      	mov	r3, r7
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	429a      	cmp	r2, r3
 8007960:	d909      	bls.n	8007976 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8007962:	463b      	mov	r3, r7
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6a1a      	ldr	r2, [r3, #32]
 8007968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800796c:	1ad2      	subs	r2, r2, r3
 800796e:	463b      	mov	r3, r7
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	621a      	str	r2, [r3, #32]
 8007974:	e008      	b.n	8007988 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8007976:	463b      	mov	r3, r7
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007980:	463b      	mov	r3, r7
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2200      	movs	r2, #0
 8007986:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007988:	463b      	mov	r3, r7
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	785b      	ldrb	r3, [r3, #1]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d164      	bne.n	8007a5c <USB_EPStartXfer+0x384>
 8007992:	1d3b      	adds	r3, r7, #4
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	61fb      	str	r3, [r7, #28]
 8007998:	1d3b      	adds	r3, r7, #4
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	461a      	mov	r2, r3
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	4413      	add	r3, r2
 80079a8:	61fb      	str	r3, [r7, #28]
 80079aa:	463b      	mov	r3, r7
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	011a      	lsls	r2, r3, #4
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	4413      	add	r3, r2
 80079b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079ba:	61bb      	str	r3, [r7, #24]
 80079bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d112      	bne.n	80079ea <USB_EPStartXfer+0x312>
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	881b      	ldrh	r3, [r3, #0]
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	801a      	strh	r2, [r3, #0]
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	881b      	ldrh	r3, [r3, #0]
 80079d8:	b29b      	uxth	r3, r3
 80079da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	801a      	strh	r2, [r3, #0]
 80079e8:	e057      	b.n	8007a9a <USB_EPStartXfer+0x3c2>
 80079ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079ee:	2b3e      	cmp	r3, #62	; 0x3e
 80079f0:	d817      	bhi.n	8007a22 <USB_EPStartXfer+0x34a>
 80079f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079f6:	085b      	lsrs	r3, r3, #1
 80079f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80079fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d004      	beq.n	8007a12 <USB_EPStartXfer+0x33a>
 8007a08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a12:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	029b      	lsls	r3, r3, #10
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	801a      	strh	r2, [r3, #0]
 8007a20:	e03b      	b.n	8007a9a <USB_EPStartXfer+0x3c2>
 8007a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a26:	095b      	lsrs	r3, r3, #5
 8007a28:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a30:	f003 031f 	and.w	r3, r3, #31
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d104      	bne.n	8007a42 <USB_EPStartXfer+0x36a>
 8007a38:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a42:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	029b      	lsls	r3, r3, #10
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	801a      	strh	r2, [r3, #0]
 8007a5a:	e01e      	b.n	8007a9a <USB_EPStartXfer+0x3c2>
 8007a5c:	463b      	mov	r3, r7
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	785b      	ldrb	r3, [r3, #1]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d119      	bne.n	8007a9a <USB_EPStartXfer+0x3c2>
 8007a66:	1d3b      	adds	r3, r7, #4
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a6c:	1d3b      	adds	r3, r7, #4
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	461a      	mov	r2, r3
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	4413      	add	r3, r2
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a7e:	463b      	mov	r3, r7
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	011a      	lsls	r2, r3, #4
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	4413      	add	r3, r2
 8007a8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a8e:	623b      	str	r3, [r7, #32]
 8007a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a9a:	463b      	mov	r3, r7
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	891b      	ldrh	r3, [r3, #8]
 8007aa0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aa4:	463b      	mov	r3, r7
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6959      	ldr	r1, [r3, #20]
 8007aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007ab4:	1d38      	adds	r0, r7, #4
 8007ab6:	6800      	ldr	r0, [r0, #0]
 8007ab8:	f001 f86c 	bl	8008b94 <USB_WritePMA>
 8007abc:	e33b      	b.n	8008136 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007abe:	463b      	mov	r3, r7
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	785b      	ldrb	r3, [r3, #1]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d164      	bne.n	8007b92 <USB_EPStartXfer+0x4ba>
 8007ac8:	1d3b      	adds	r3, r7, #4
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ace:	1d3b      	adds	r3, r7, #4
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	461a      	mov	r2, r3
 8007ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007adc:	4413      	add	r3, r2
 8007ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ae0:	463b      	mov	r3, r7
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	011a      	lsls	r2, r3, #4
 8007ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aea:	4413      	add	r3, r2
 8007aec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007af0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d112      	bne.n	8007b20 <USB_EPStartXfer+0x448>
 8007afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b08:	801a      	strh	r2, [r3, #0]
 8007b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b1c:	801a      	strh	r2, [r3, #0]
 8007b1e:	e057      	b.n	8007bd0 <USB_EPStartXfer+0x4f8>
 8007b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b24:	2b3e      	cmp	r3, #62	; 0x3e
 8007b26:	d817      	bhi.n	8007b58 <USB_EPStartXfer+0x480>
 8007b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b2c:	085b      	lsrs	r3, r3, #1
 8007b2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d004      	beq.n	8007b48 <USB_EPStartXfer+0x470>
 8007b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b42:	3301      	adds	r3, #1
 8007b44:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	029b      	lsls	r3, r3, #10
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b54:	801a      	strh	r2, [r3, #0]
 8007b56:	e03b      	b.n	8007bd0 <USB_EPStartXfer+0x4f8>
 8007b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b5c:	095b      	lsrs	r3, r3, #5
 8007b5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b66:	f003 031f 	and.w	r3, r3, #31
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d104      	bne.n	8007b78 <USB_EPStartXfer+0x4a0>
 8007b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b72:	3b01      	subs	r3, #1
 8007b74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	029b      	lsls	r3, r3, #10
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b8e:	801a      	strh	r2, [r3, #0]
 8007b90:	e01e      	b.n	8007bd0 <USB_EPStartXfer+0x4f8>
 8007b92:	463b      	mov	r3, r7
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	785b      	ldrb	r3, [r3, #1]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d119      	bne.n	8007bd0 <USB_EPStartXfer+0x4f8>
 8007b9c:	1d3b      	adds	r3, r7, #4
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	657b      	str	r3, [r7, #84]	; 0x54
 8007ba2:	1d3b      	adds	r3, r7, #4
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	461a      	mov	r2, r3
 8007bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bb0:	4413      	add	r3, r2
 8007bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8007bb4:	463b      	mov	r3, r7
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	011a      	lsls	r2, r3, #4
 8007bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bc4:	653b      	str	r3, [r7, #80]	; 0x50
 8007bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007bd0:	463b      	mov	r3, r7
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	891b      	ldrh	r3, [r3, #8]
 8007bd6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bda:	463b      	mov	r3, r7
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6959      	ldr	r1, [r3, #20]
 8007be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007bea:	1d38      	adds	r0, r7, #4
 8007bec:	6800      	ldr	r0, [r0, #0]
 8007bee:	f000 ffd1 	bl	8008b94 <USB_WritePMA>
            ep->xfer_buff += len;
 8007bf2:	463b      	mov	r3, r7
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	695a      	ldr	r2, [r3, #20]
 8007bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bfc:	441a      	add	r2, r3
 8007bfe:	463b      	mov	r3, r7
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c04:	463b      	mov	r3, r7
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6a1a      	ldr	r2, [r3, #32]
 8007c0a:	463b      	mov	r3, r7
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d909      	bls.n	8007c28 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8007c14:	463b      	mov	r3, r7
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6a1a      	ldr	r2, [r3, #32]
 8007c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c1e:	1ad2      	subs	r2, r2, r3
 8007c20:	463b      	mov	r3, r7
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	621a      	str	r2, [r3, #32]
 8007c26:	e008      	b.n	8007c3a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c28:	463b      	mov	r3, r7
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007c32:	463b      	mov	r3, r7
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2200      	movs	r2, #0
 8007c38:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c3a:	1d3b      	adds	r3, r7, #4
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8007c40:	463b      	mov	r3, r7
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	785b      	ldrb	r3, [r3, #1]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d164      	bne.n	8007d14 <USB_EPStartXfer+0x63c>
 8007c4a:	1d3b      	adds	r3, r7, #4
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c50:	1d3b      	adds	r3, r7, #4
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5e:	4413      	add	r3, r2
 8007c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c62:	463b      	mov	r3, r7
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	011a      	lsls	r2, r3, #4
 8007c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d112      	bne.n	8007ca2 <USB_EPStartXfer+0x5ca>
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	801a      	strh	r2, [r3, #0]
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9e:	801a      	strh	r2, [r3, #0]
 8007ca0:	e054      	b.n	8007d4c <USB_EPStartXfer+0x674>
 8007ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ca6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ca8:	d817      	bhi.n	8007cda <USB_EPStartXfer+0x602>
 8007caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cae:	085b      	lsrs	r3, r3, #1
 8007cb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d004      	beq.n	8007cca <USB_EPStartXfer+0x5f2>
 8007cc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007cca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	029b      	lsls	r3, r3, #10
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd6:	801a      	strh	r2, [r3, #0]
 8007cd8:	e038      	b.n	8007d4c <USB_EPStartXfer+0x674>
 8007cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cde:	095b      	lsrs	r3, r3, #5
 8007ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ce8:	f003 031f 	and.w	r3, r3, #31
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d104      	bne.n	8007cfa <USB_EPStartXfer+0x622>
 8007cf0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007cfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	029b      	lsls	r3, r3, #10
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d10:	801a      	strh	r2, [r3, #0]
 8007d12:	e01b      	b.n	8007d4c <USB_EPStartXfer+0x674>
 8007d14:	463b      	mov	r3, r7
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	785b      	ldrb	r3, [r3, #1]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d116      	bne.n	8007d4c <USB_EPStartXfer+0x674>
 8007d1e:	1d3b      	adds	r3, r7, #4
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	461a      	mov	r2, r3
 8007d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d2c:	4413      	add	r3, r2
 8007d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d30:	463b      	mov	r3, r7
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	011a      	lsls	r2, r3, #4
 8007d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d40:	643b      	str	r3, [r7, #64]	; 0x40
 8007d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d4c:	463b      	mov	r3, r7
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	895b      	ldrh	r3, [r3, #10]
 8007d52:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d56:	463b      	mov	r3, r7
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6959      	ldr	r1, [r3, #20]
 8007d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007d66:	1d38      	adds	r0, r7, #4
 8007d68:	6800      	ldr	r0, [r0, #0]
 8007d6a:	f000 ff13 	bl	8008b94 <USB_WritePMA>
 8007d6e:	e1e2      	b.n	8008136 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007d70:	463b      	mov	r3, r7
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6a1b      	ldr	r3, [r3, #32]
 8007d76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007d7a:	1d3b      	adds	r3, r7, #4
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	463b      	mov	r3, r7
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	881b      	ldrh	r3, [r3, #0]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d94:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007d98:	1d3b      	adds	r3, r7, #4
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	463b      	mov	r3, r7
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	441a      	add	r2, r3
 8007da6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007dbe:	1d3b      	adds	r3, r7, #4
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	663b      	str	r3, [r7, #96]	; 0x60
 8007dc4:	1d3b      	adds	r3, r7, #4
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	461a      	mov	r2, r3
 8007dd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dd2:	4413      	add	r3, r2
 8007dd4:	663b      	str	r3, [r7, #96]	; 0x60
 8007dd6:	463b      	mov	r3, r7
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	011a      	lsls	r2, r3, #4
 8007dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007de0:	4413      	add	r3, r2
 8007de2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007de6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007df0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007df2:	463b      	mov	r3, r7
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	891b      	ldrh	r3, [r3, #8]
 8007df8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dfc:	463b      	mov	r3, r7
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6959      	ldr	r1, [r3, #20]
 8007e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007e0c:	1d38      	adds	r0, r7, #4
 8007e0e:	6800      	ldr	r0, [r0, #0]
 8007e10:	f000 fec0 	bl	8008b94 <USB_WritePMA>
 8007e14:	e18f      	b.n	8008136 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e16:	1d3b      	adds	r3, r7, #4
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	463b      	mov	r3, r7
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 808f 	beq.w	8007f50 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e32:	1d3b      	adds	r3, r7, #4
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e38:	463b      	mov	r3, r7
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	785b      	ldrb	r3, [r3, #1]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d164      	bne.n	8007f0c <USB_EPStartXfer+0x834>
 8007e42:	1d3b      	adds	r3, r7, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	673b      	str	r3, [r7, #112]	; 0x70
 8007e48:	1d3b      	adds	r3, r7, #4
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	461a      	mov	r2, r3
 8007e54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e56:	4413      	add	r3, r2
 8007e58:	673b      	str	r3, [r7, #112]	; 0x70
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	011a      	lsls	r2, r3, #4
 8007e62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e64:	4413      	add	r3, r2
 8007e66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d112      	bne.n	8007e9a <USB_EPStartXfer+0x7c2>
 8007e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e82:	801a      	strh	r2, [r3, #0]
 8007e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e96:	801a      	strh	r2, [r3, #0]
 8007e98:	e054      	b.n	8007f44 <USB_EPStartXfer+0x86c>
 8007e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e9e:	2b3e      	cmp	r3, #62	; 0x3e
 8007ea0:	d817      	bhi.n	8007ed2 <USB_EPStartXfer+0x7fa>
 8007ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ea6:	085b      	lsrs	r3, r3, #1
 8007ea8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d004      	beq.n	8007ec2 <USB_EPStartXfer+0x7ea>
 8007eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	029b      	lsls	r3, r3, #10
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ece:	801a      	strh	r2, [r3, #0]
 8007ed0:	e038      	b.n	8007f44 <USB_EPStartXfer+0x86c>
 8007ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ed6:	095b      	lsrs	r3, r3, #5
 8007ed8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ee0:	f003 031f 	and.w	r3, r3, #31
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d104      	bne.n	8007ef2 <USB_EPStartXfer+0x81a>
 8007ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eec:	3b01      	subs	r3, #1
 8007eee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	029b      	lsls	r3, r3, #10
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f08:	801a      	strh	r2, [r3, #0]
 8007f0a:	e01b      	b.n	8007f44 <USB_EPStartXfer+0x86c>
 8007f0c:	463b      	mov	r3, r7
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	785b      	ldrb	r3, [r3, #1]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d116      	bne.n	8007f44 <USB_EPStartXfer+0x86c>
 8007f16:	1d3b      	adds	r3, r7, #4
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	461a      	mov	r2, r3
 8007f22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f24:	4413      	add	r3, r2
 8007f26:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f28:	463b      	mov	r3, r7
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	011a      	lsls	r2, r3, #4
 8007f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f32:	4413      	add	r3, r2
 8007f34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f38:	677b      	str	r3, [r7, #116]	; 0x74
 8007f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007f44:	463b      	mov	r3, r7
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	895b      	ldrh	r3, [r3, #10]
 8007f4a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8007f4e:	e097      	b.n	8008080 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f50:	463b      	mov	r3, r7
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	785b      	ldrb	r3, [r3, #1]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d168      	bne.n	800802c <USB_EPStartXfer+0x954>
 8007f5a:	1d3b      	adds	r3, r7, #4
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f62:	1d3b      	adds	r3, r7, #4
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f72:	4413      	add	r3, r2
 8007f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f78:	463b      	mov	r3, r7
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	011a      	lsls	r2, r3, #4
 8007f80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f84:	4413      	add	r3, r2
 8007f86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d112      	bne.n	8007fba <USB_EPStartXfer+0x8e2>
 8007f94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fa2:	801a      	strh	r2, [r3, #0]
 8007fa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fb6:	801a      	strh	r2, [r3, #0]
 8007fb8:	e05d      	b.n	8008076 <USB_EPStartXfer+0x99e>
 8007fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fbe:	2b3e      	cmp	r3, #62	; 0x3e
 8007fc0:	d817      	bhi.n	8007ff2 <USB_EPStartXfer+0x91a>
 8007fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fc6:	085b      	lsrs	r3, r3, #1
 8007fc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d004      	beq.n	8007fe2 <USB_EPStartXfer+0x90a>
 8007fd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007fdc:	3301      	adds	r3, #1
 8007fde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007fe2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	029b      	lsls	r3, r3, #10
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fee:	801a      	strh	r2, [r3, #0]
 8007ff0:	e041      	b.n	8008076 <USB_EPStartXfer+0x99e>
 8007ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ff6:	095b      	lsrs	r3, r3, #5
 8007ff8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008000:	f003 031f 	and.w	r3, r3, #31
 8008004:	2b00      	cmp	r3, #0
 8008006:	d104      	bne.n	8008012 <USB_EPStartXfer+0x93a>
 8008008:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800800c:	3b01      	subs	r3, #1
 800800e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008012:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008016:	b29b      	uxth	r3, r3
 8008018:	029b      	lsls	r3, r3, #10
 800801a:	b29b      	uxth	r3, r3
 800801c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008024:	b29a      	uxth	r2, r3
 8008026:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008028:	801a      	strh	r2, [r3, #0]
 800802a:	e024      	b.n	8008076 <USB_EPStartXfer+0x99e>
 800802c:	463b      	mov	r3, r7
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	785b      	ldrb	r3, [r3, #1]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d11f      	bne.n	8008076 <USB_EPStartXfer+0x99e>
 8008036:	1d3b      	adds	r3, r7, #4
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800803e:	1d3b      	adds	r3, r7, #4
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008046:	b29b      	uxth	r3, r3
 8008048:	461a      	mov	r2, r3
 800804a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800804e:	4413      	add	r3, r2
 8008050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008054:	463b      	mov	r3, r7
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	011a      	lsls	r2, r3, #4
 800805c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008060:	4413      	add	r3, r2
 8008062:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008066:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800806a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800806e:	b29a      	uxth	r2, r3
 8008070:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008074:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008076:	463b      	mov	r3, r7
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	891b      	ldrh	r3, [r3, #8]
 800807c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008080:	463b      	mov	r3, r7
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6959      	ldr	r1, [r3, #20]
 8008086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800808a:	b29b      	uxth	r3, r3
 800808c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008090:	1d38      	adds	r0, r7, #4
 8008092:	6800      	ldr	r0, [r0, #0]
 8008094:	f000 fd7e 	bl	8008b94 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008098:	463b      	mov	r3, r7
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	785b      	ldrb	r3, [r3, #1]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d122      	bne.n	80080e8 <USB_EPStartXfer+0xa10>
 80080a2:	1d3b      	adds	r3, r7, #4
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	463b      	mov	r3, r7
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080bc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80080c0:	1d3b      	adds	r3, r7, #4
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	463b      	mov	r3, r7
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	441a      	add	r2, r3
 80080ce:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80080d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	8013      	strh	r3, [r2, #0]
 80080e6:	e026      	b.n	8008136 <USB_EPStartXfer+0xa5e>
 80080e8:	463b      	mov	r3, r7
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	785b      	ldrb	r3, [r3, #1]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d121      	bne.n	8008136 <USB_EPStartXfer+0xa5e>
 80080f2:	1d3b      	adds	r3, r7, #4
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	463b      	mov	r3, r7
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	b29b      	uxth	r3, r3
 8008104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8008110:	1d3b      	adds	r3, r7, #4
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	463b      	mov	r3, r7
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	441a      	add	r2, r3
 800811e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8008122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800812a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800812e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008132:	b29b      	uxth	r3, r3
 8008134:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008136:	1d3b      	adds	r3, r7, #4
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	463b      	mov	r3, r7
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	b29b      	uxth	r3, r3
 8008148:	f107 020e 	add.w	r2, r7, #14
 800814c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008154:	8013      	strh	r3, [r2, #0]
 8008156:	f107 030e 	add.w	r3, r7, #14
 800815a:	f107 020e 	add.w	r2, r7, #14
 800815e:	8812      	ldrh	r2, [r2, #0]
 8008160:	f082 0210 	eor.w	r2, r2, #16
 8008164:	801a      	strh	r2, [r3, #0]
 8008166:	f107 030e 	add.w	r3, r7, #14
 800816a:	f107 020e 	add.w	r2, r7, #14
 800816e:	8812      	ldrh	r2, [r2, #0]
 8008170:	f082 0220 	eor.w	r2, r2, #32
 8008174:	801a      	strh	r2, [r3, #0]
 8008176:	1d3b      	adds	r3, r7, #4
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	463b      	mov	r3, r7
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	441a      	add	r2, r3
 8008184:	f107 030e 	add.w	r3, r7, #14
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800818e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800819a:	b29b      	uxth	r3, r3
 800819c:	8013      	strh	r3, [r2, #0]
 800819e:	e3b5      	b.n	800890c <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80081a0:	463b      	mov	r3, r7
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	7b1b      	ldrb	r3, [r3, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f040 8090 	bne.w	80082cc <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80081ac:	463b      	mov	r3, r7
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	699a      	ldr	r2, [r3, #24]
 80081b2:	463b      	mov	r3, r7
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d90e      	bls.n	80081da <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80081bc:	463b      	mov	r3, r7
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80081c6:	463b      	mov	r3, r7
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	699a      	ldr	r2, [r3, #24]
 80081cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081d0:	1ad2      	subs	r2, r2, r3
 80081d2:	463b      	mov	r3, r7
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	619a      	str	r2, [r3, #24]
 80081d8:	e008      	b.n	80081ec <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80081da:	463b      	mov	r3, r7
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80081e4:	463b      	mov	r3, r7
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2200      	movs	r2, #0
 80081ea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80081ec:	1d3b      	adds	r3, r7, #4
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80081f4:	1d3b      	adds	r3, r7, #4
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	461a      	mov	r2, r3
 8008200:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008204:	4413      	add	r3, r2
 8008206:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800820a:	463b      	mov	r3, r7
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	011a      	lsls	r2, r3, #4
 8008212:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008216:	4413      	add	r3, r2
 8008218:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800821c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008224:	2b00      	cmp	r3, #0
 8008226:	d116      	bne.n	8008256 <USB_EPStartXfer+0xb7e>
 8008228:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	b29b      	uxth	r3, r3
 8008230:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008234:	b29a      	uxth	r2, r3
 8008236:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800823a:	801a      	strh	r2, [r3, #0]
 800823c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	b29b      	uxth	r3, r3
 8008244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800824c:	b29a      	uxth	r2, r3
 800824e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008252:	801a      	strh	r2, [r3, #0]
 8008254:	e32c      	b.n	80088b0 <USB_EPStartXfer+0x11d8>
 8008256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800825a:	2b3e      	cmp	r3, #62	; 0x3e
 800825c:	d818      	bhi.n	8008290 <USB_EPStartXfer+0xbb8>
 800825e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008262:	085b      	lsrs	r3, r3, #1
 8008264:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d004      	beq.n	800827e <USB_EPStartXfer+0xba6>
 8008274:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008278:	3301      	adds	r3, #1
 800827a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800827e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008282:	b29b      	uxth	r3, r3
 8008284:	029b      	lsls	r3, r3, #10
 8008286:	b29a      	uxth	r2, r3
 8008288:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800828c:	801a      	strh	r2, [r3, #0]
 800828e:	e30f      	b.n	80088b0 <USB_EPStartXfer+0x11d8>
 8008290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008294:	095b      	lsrs	r3, r3, #5
 8008296:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800829a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800829e:	f003 031f 	and.w	r3, r3, #31
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d104      	bne.n	80082b0 <USB_EPStartXfer+0xbd8>
 80082a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80082aa:	3b01      	subs	r3, #1
 80082ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80082b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	029b      	lsls	r3, r3, #10
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80082c8:	801a      	strh	r2, [r3, #0]
 80082ca:	e2f1      	b.n	80088b0 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80082cc:	463b      	mov	r3, r7
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	78db      	ldrb	r3, [r3, #3]
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	f040 818f 	bne.w	80085f6 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80082d8:	463b      	mov	r3, r7
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	785b      	ldrb	r3, [r3, #1]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d175      	bne.n	80083ce <USB_EPStartXfer+0xcf6>
 80082e2:	1d3b      	adds	r3, r7, #4
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082ea:	1d3b      	adds	r3, r7, #4
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	461a      	mov	r2, r3
 80082f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80082fa:	4413      	add	r3, r2
 80082fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008300:	463b      	mov	r3, r7
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	011a      	lsls	r2, r3, #4
 8008308:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800830c:	4413      	add	r3, r2
 800830e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008316:	463b      	mov	r3, r7
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d116      	bne.n	800834e <USB_EPStartXfer+0xc76>
 8008320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	b29b      	uxth	r3, r3
 8008328:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800832c:	b29a      	uxth	r2, r3
 800832e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008332:	801a      	strh	r2, [r3, #0]
 8008334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	b29b      	uxth	r3, r3
 800833c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008344:	b29a      	uxth	r2, r3
 8008346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800834a:	801a      	strh	r2, [r3, #0]
 800834c:	e065      	b.n	800841a <USB_EPStartXfer+0xd42>
 800834e:	463b      	mov	r3, r7
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	2b3e      	cmp	r3, #62	; 0x3e
 8008356:	d81a      	bhi.n	800838e <USB_EPStartXfer+0xcb6>
 8008358:	463b      	mov	r3, r7
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	085b      	lsrs	r3, r3, #1
 8008360:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008364:	463b      	mov	r3, r7
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b00      	cmp	r3, #0
 8008370:	d004      	beq.n	800837c <USB_EPStartXfer+0xca4>
 8008372:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008376:	3301      	adds	r3, #1
 8008378:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800837c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008380:	b29b      	uxth	r3, r3
 8008382:	029b      	lsls	r3, r3, #10
 8008384:	b29a      	uxth	r2, r3
 8008386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800838a:	801a      	strh	r2, [r3, #0]
 800838c:	e045      	b.n	800841a <USB_EPStartXfer+0xd42>
 800838e:	463b      	mov	r3, r7
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	095b      	lsrs	r3, r3, #5
 8008396:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800839a:	463b      	mov	r3, r7
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	f003 031f 	and.w	r3, r3, #31
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d104      	bne.n	80083b2 <USB_EPStartXfer+0xcda>
 80083a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083ac:	3b01      	subs	r3, #1
 80083ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	029b      	lsls	r3, r3, #10
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083ca:	801a      	strh	r2, [r3, #0]
 80083cc:	e025      	b.n	800841a <USB_EPStartXfer+0xd42>
 80083ce:	463b      	mov	r3, r7
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	785b      	ldrb	r3, [r3, #1]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d120      	bne.n	800841a <USB_EPStartXfer+0xd42>
 80083d8:	1d3b      	adds	r3, r7, #4
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083e0:	1d3b      	adds	r3, r7, #4
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	461a      	mov	r2, r3
 80083ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083f0:	4413      	add	r3, r2
 80083f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083f6:	463b      	mov	r3, r7
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	011a      	lsls	r2, r3, #4
 80083fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008402:	4413      	add	r3, r2
 8008404:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800840c:	463b      	mov	r3, r7
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	b29a      	uxth	r2, r3
 8008414:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008418:	801a      	strh	r2, [r3, #0]
 800841a:	1d3b      	adds	r3, r7, #4
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008422:	463b      	mov	r3, r7
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	785b      	ldrb	r3, [r3, #1]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d175      	bne.n	8008518 <USB_EPStartXfer+0xe40>
 800842c:	1d3b      	adds	r3, r7, #4
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008434:	1d3b      	adds	r3, r7, #4
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800843c:	b29b      	uxth	r3, r3
 800843e:	461a      	mov	r2, r3
 8008440:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008444:	4413      	add	r3, r2
 8008446:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800844a:	463b      	mov	r3, r7
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	011a      	lsls	r2, r3, #4
 8008452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008456:	4413      	add	r3, r2
 8008458:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800845c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008460:	463b      	mov	r3, r7
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d116      	bne.n	8008498 <USB_EPStartXfer+0xdc0>
 800846a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800846e:	881b      	ldrh	r3, [r3, #0]
 8008470:	b29b      	uxth	r3, r3
 8008472:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008476:	b29a      	uxth	r2, r3
 8008478:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800847c:	801a      	strh	r2, [r3, #0]
 800847e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	b29b      	uxth	r3, r3
 8008486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800848a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800848e:	b29a      	uxth	r2, r3
 8008490:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008494:	801a      	strh	r2, [r3, #0]
 8008496:	e061      	b.n	800855c <USB_EPStartXfer+0xe84>
 8008498:	463b      	mov	r3, r7
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b3e      	cmp	r3, #62	; 0x3e
 80084a0:	d81a      	bhi.n	80084d8 <USB_EPStartXfer+0xe00>
 80084a2:	463b      	mov	r3, r7
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	085b      	lsrs	r3, r3, #1
 80084aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084ae:	463b      	mov	r3, r7
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d004      	beq.n	80084c6 <USB_EPStartXfer+0xdee>
 80084bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084c0:	3301      	adds	r3, #1
 80084c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	029b      	lsls	r3, r3, #10
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084d4:	801a      	strh	r2, [r3, #0]
 80084d6:	e041      	b.n	800855c <USB_EPStartXfer+0xe84>
 80084d8:	463b      	mov	r3, r7
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	095b      	lsrs	r3, r3, #5
 80084e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084e4:	463b      	mov	r3, r7
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	f003 031f 	and.w	r3, r3, #31
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d104      	bne.n	80084fc <USB_EPStartXfer+0xe24>
 80084f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f6:	3b01      	subs	r3, #1
 80084f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008500:	b29b      	uxth	r3, r3
 8008502:	029b      	lsls	r3, r3, #10
 8008504:	b29b      	uxth	r3, r3
 8008506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800850a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800850e:	b29a      	uxth	r2, r3
 8008510:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008514:	801a      	strh	r2, [r3, #0]
 8008516:	e021      	b.n	800855c <USB_EPStartXfer+0xe84>
 8008518:	463b      	mov	r3, r7
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	785b      	ldrb	r3, [r3, #1]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d11c      	bne.n	800855c <USB_EPStartXfer+0xe84>
 8008522:	1d3b      	adds	r3, r7, #4
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800852a:	b29b      	uxth	r3, r3
 800852c:	461a      	mov	r2, r3
 800852e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008532:	4413      	add	r3, r2
 8008534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008538:	463b      	mov	r3, r7
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	011a      	lsls	r2, r3, #4
 8008540:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008544:	4413      	add	r3, r2
 8008546:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800854a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800854e:	463b      	mov	r3, r7
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	b29a      	uxth	r2, r3
 8008556:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800855a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800855c:	463b      	mov	r3, r7
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 81a4 	beq.w	80088b0 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008568:	1d3b      	adds	r3, r7, #4
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	463b      	mov	r3, r7
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800857c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008584:	2b00      	cmp	r3, #0
 8008586:	d005      	beq.n	8008594 <USB_EPStartXfer+0xebc>
 8008588:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800858c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10d      	bne.n	80085b0 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008594:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800859c:	2b00      	cmp	r3, #0
 800859e:	f040 8187 	bne.w	80088b0 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80085a2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80085a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f040 8180 	bne.w	80088b0 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80085b0:	1d3b      	adds	r3, r7, #4
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	463b      	mov	r3, r7
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ca:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80085ce:	1d3b      	adds	r3, r7, #4
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	463b      	mov	r3, r7
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	441a      	add	r2, r3
 80085dc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80085e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	8013      	strh	r3, [r2, #0]
 80085f4:	e15c      	b.n	80088b0 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80085f6:	463b      	mov	r3, r7
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	78db      	ldrb	r3, [r3, #3]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	f040 8155 	bne.w	80088ac <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008602:	463b      	mov	r3, r7
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	699a      	ldr	r2, [r3, #24]
 8008608:	463b      	mov	r3, r7
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	429a      	cmp	r2, r3
 8008610:	d90e      	bls.n	8008630 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8008612:	463b      	mov	r3, r7
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800861c:	463b      	mov	r3, r7
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	699a      	ldr	r2, [r3, #24]
 8008622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008626:	1ad2      	subs	r2, r2, r3
 8008628:	463b      	mov	r3, r7
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	619a      	str	r2, [r3, #24]
 800862e:	e008      	b.n	8008642 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8008630:	463b      	mov	r3, r7
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800863a:	463b      	mov	r3, r7
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2200      	movs	r2, #0
 8008640:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008642:	463b      	mov	r3, r7
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	785b      	ldrb	r3, [r3, #1]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d16f      	bne.n	800872c <USB_EPStartXfer+0x1054>
 800864c:	1d3b      	adds	r3, r7, #4
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008654:	1d3b      	adds	r3, r7, #4
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800865c:	b29b      	uxth	r3, r3
 800865e:	461a      	mov	r2, r3
 8008660:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008664:	4413      	add	r3, r2
 8008666:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800866a:	463b      	mov	r3, r7
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	011a      	lsls	r2, r3, #4
 8008672:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008676:	4413      	add	r3, r2
 8008678:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800867c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008684:	2b00      	cmp	r3, #0
 8008686:	d116      	bne.n	80086b6 <USB_EPStartXfer+0xfde>
 8008688:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	b29b      	uxth	r3, r3
 8008690:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008694:	b29a      	uxth	r2, r3
 8008696:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800869a:	801a      	strh	r2, [r3, #0]
 800869c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80086a0:	881b      	ldrh	r3, [r3, #0]
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80086b2:	801a      	strh	r2, [r3, #0]
 80086b4:	e05f      	b.n	8008776 <USB_EPStartXfer+0x109e>
 80086b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086ba:	2b3e      	cmp	r3, #62	; 0x3e
 80086bc:	d818      	bhi.n	80086f0 <USB_EPStartXfer+0x1018>
 80086be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086c2:	085b      	lsrs	r3, r3, #1
 80086c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80086c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d004      	beq.n	80086de <USB_EPStartXfer+0x1006>
 80086d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086d8:	3301      	adds	r3, #1
 80086da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80086de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	029b      	lsls	r3, r3, #10
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80086ec:	801a      	strh	r2, [r3, #0]
 80086ee:	e042      	b.n	8008776 <USB_EPStartXfer+0x109e>
 80086f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086f4:	095b      	lsrs	r3, r3, #5
 80086f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80086fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086fe:	f003 031f 	and.w	r3, r3, #31
 8008702:	2b00      	cmp	r3, #0
 8008704:	d104      	bne.n	8008710 <USB_EPStartXfer+0x1038>
 8008706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800870a:	3b01      	subs	r3, #1
 800870c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008714:	b29b      	uxth	r3, r3
 8008716:	029b      	lsls	r3, r3, #10
 8008718:	b29b      	uxth	r3, r3
 800871a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800871e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008722:	b29a      	uxth	r2, r3
 8008724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008728:	801a      	strh	r2, [r3, #0]
 800872a:	e024      	b.n	8008776 <USB_EPStartXfer+0x109e>
 800872c:	463b      	mov	r3, r7
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	785b      	ldrb	r3, [r3, #1]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d11f      	bne.n	8008776 <USB_EPStartXfer+0x109e>
 8008736:	1d3b      	adds	r3, r7, #4
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800873e:	1d3b      	adds	r3, r7, #4
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008746:	b29b      	uxth	r3, r3
 8008748:	461a      	mov	r2, r3
 800874a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800874e:	4413      	add	r3, r2
 8008750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008754:	463b      	mov	r3, r7
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	011a      	lsls	r2, r3, #4
 800875c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008760:	4413      	add	r3, r2
 8008762:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800876a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800876e:	b29a      	uxth	r2, r3
 8008770:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008774:	801a      	strh	r2, [r3, #0]
 8008776:	1d3b      	adds	r3, r7, #4
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800877e:	463b      	mov	r3, r7
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	785b      	ldrb	r3, [r3, #1]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d16f      	bne.n	8008868 <USB_EPStartXfer+0x1190>
 8008788:	1d3b      	adds	r3, r7, #4
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008790:	1d3b      	adds	r3, r7, #4
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008798:	b29b      	uxth	r3, r3
 800879a:	461a      	mov	r2, r3
 800879c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087a0:	4413      	add	r3, r2
 80087a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087a6:	463b      	mov	r3, r7
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	011a      	lsls	r2, r3, #4
 80087ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087b2:	4413      	add	r3, r2
 80087b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80087bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d116      	bne.n	80087f2 <USB_EPStartXfer+0x111a>
 80087c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80087d6:	801a      	strh	r2, [r3, #0]
 80087d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80087ee:	801a      	strh	r2, [r3, #0]
 80087f0:	e05e      	b.n	80088b0 <USB_EPStartXfer+0x11d8>
 80087f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087f6:	2b3e      	cmp	r3, #62	; 0x3e
 80087f8:	d818      	bhi.n	800882c <USB_EPStartXfer+0x1154>
 80087fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087fe:	085b      	lsrs	r3, r3, #1
 8008800:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	2b00      	cmp	r3, #0
 800880e:	d004      	beq.n	800881a <USB_EPStartXfer+0x1142>
 8008810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008814:	3301      	adds	r3, #1
 8008816:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800881a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800881e:	b29b      	uxth	r3, r3
 8008820:	029b      	lsls	r3, r3, #10
 8008822:	b29a      	uxth	r2, r3
 8008824:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008828:	801a      	strh	r2, [r3, #0]
 800882a:	e041      	b.n	80088b0 <USB_EPStartXfer+0x11d8>
 800882c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008830:	095b      	lsrs	r3, r3, #5
 8008832:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800883a:	f003 031f 	and.w	r3, r3, #31
 800883e:	2b00      	cmp	r3, #0
 8008840:	d104      	bne.n	800884c <USB_EPStartXfer+0x1174>
 8008842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008846:	3b01      	subs	r3, #1
 8008848:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800884c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008850:	b29b      	uxth	r3, r3
 8008852:	029b      	lsls	r3, r3, #10
 8008854:	b29b      	uxth	r3, r3
 8008856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800885a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800885e:	b29a      	uxth	r2, r3
 8008860:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008864:	801a      	strh	r2, [r3, #0]
 8008866:	e023      	b.n	80088b0 <USB_EPStartXfer+0x11d8>
 8008868:	463b      	mov	r3, r7
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	785b      	ldrb	r3, [r3, #1]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d11e      	bne.n	80088b0 <USB_EPStartXfer+0x11d8>
 8008872:	1d3b      	adds	r3, r7, #4
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800887a:	b29b      	uxth	r3, r3
 800887c:	461a      	mov	r2, r3
 800887e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008882:	4413      	add	r3, r2
 8008884:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008888:	463b      	mov	r3, r7
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	011a      	lsls	r2, r3, #4
 8008890:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008894:	4413      	add	r3, r2
 8008896:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800889a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800889e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80088a8:	801a      	strh	r2, [r3, #0]
 80088aa:	e001      	b.n	80088b0 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e02e      	b.n	800890e <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088b0:	1d3b      	adds	r3, r7, #4
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	463b      	mov	r3, r7
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4413      	add	r3, r2
 80088be:	881b      	ldrh	r3, [r3, #0]
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80088ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80088d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80088d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80088da:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80088de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80088e2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80088e6:	1d3b      	adds	r3, r7, #4
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	463b      	mov	r3, r7
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	441a      	add	r2, r3
 80088f4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80088f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008908:	b29b      	uxth	r3, r3
 800890a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	785b      	ldrb	r3, [r3, #1]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d020      	beq.n	800896c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	b29b      	uxth	r3, r3
 8008938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800893c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008940:	81bb      	strh	r3, [r7, #12]
 8008942:	89bb      	ldrh	r3, [r7, #12]
 8008944:	f083 0310 	eor.w	r3, r3, #16
 8008948:	81bb      	strh	r3, [r7, #12]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	441a      	add	r2, r3
 8008954:	89bb      	ldrh	r3, [r7, #12]
 8008956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800895a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800895e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008966:	b29b      	uxth	r3, r3
 8008968:	8013      	strh	r3, [r2, #0]
 800896a:	e01f      	b.n	80089ac <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4413      	add	r3, r2
 8008976:	881b      	ldrh	r3, [r3, #0]
 8008978:	b29b      	uxth	r3, r3
 800897a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800897e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008982:	81fb      	strh	r3, [r7, #14]
 8008984:	89fb      	ldrh	r3, [r7, #14]
 8008986:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800898a:	81fb      	strh	r3, [r7, #14]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	441a      	add	r2, r3
 8008996:	89fb      	ldrh	r3, [r7, #14]
 8008998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800899c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bc80      	pop	{r7}
 80089b6:	4770      	bx	lr

080089b8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	7b1b      	ldrb	r3, [r3, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f040 809d 	bne.w	8008b06 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	785b      	ldrb	r3, [r3, #1]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d04c      	beq.n	8008a6e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	881b      	ldrh	r3, [r3, #0]
 80089e0:	823b      	strh	r3, [r7, #16]
 80089e2:	8a3b      	ldrh	r3, [r7, #16]
 80089e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d01b      	beq.n	8008a24 <USB_EPClearStall+0x6c>
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a02:	81fb      	strh	r3, [r7, #14]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	441a      	add	r2, r3
 8008a0e:	89fb      	ldrh	r3, [r7, #14]
 8008a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	78db      	ldrb	r3, [r3, #3]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d06c      	beq.n	8008b06 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a42:	81bb      	strh	r3, [r7, #12]
 8008a44:	89bb      	ldrh	r3, [r7, #12]
 8008a46:	f083 0320 	eor.w	r3, r3, #32
 8008a4a:	81bb      	strh	r3, [r7, #12]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	441a      	add	r2, r3
 8008a56:	89bb      	ldrh	r3, [r7, #12]
 8008a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	8013      	strh	r3, [r2, #0]
 8008a6c:	e04b      	b.n	8008b06 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	82fb      	strh	r3, [r7, #22]
 8008a7c:	8afb      	ldrh	r3, [r7, #22]
 8008a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d01b      	beq.n	8008abe <USB_EPClearStall+0x106>
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	881b      	ldrh	r3, [r3, #0]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a9c:	82bb      	strh	r3, [r7, #20]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	441a      	add	r2, r3
 8008aa8:	8abb      	ldrh	r3, [r7, #20]
 8008aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ab2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ad4:	827b      	strh	r3, [r7, #18]
 8008ad6:	8a7b      	ldrh	r3, [r7, #18]
 8008ad8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008adc:	827b      	strh	r3, [r7, #18]
 8008ade:	8a7b      	ldrh	r3, [r7, #18]
 8008ae0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ae4:	827b      	strh	r3, [r7, #18]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	441a      	add	r2, r3
 8008af0:	8a7b      	ldrh	r3, [r7, #18]
 8008af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	371c      	adds	r7, #28
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bc80      	pop	{r7}
 8008b10:	4770      	bx	lr

08008b12 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b083      	sub	sp, #12
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008b1e:	78fb      	ldrb	r3, [r7, #3]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d103      	bne.n	8008b2c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2280      	movs	r2, #128	; 0x80
 8008b28:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bc80      	pop	{r7}
 8008b36:	4770      	bx	lr

08008b38 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bc80      	pop	{r7}
 8008b4a:	4770      	bx	lr

08008b4c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bc80      	pop	{r7}
 8008b5e:	4770      	bx	lr

08008b60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b72:	68fb      	ldr	r3, [r7, #12]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3714      	adds	r7, #20
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bc80      	pop	{r7}
 8008b7c:	4770      	bx	lr

08008b7e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b083      	sub	sp, #12
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bc80      	pop	{r7}
 8008b92:	4770      	bx	lr

08008b94 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b08d      	sub	sp, #52	; 0x34
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	80fb      	strh	r3, [r7, #6]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008baa:	88bb      	ldrh	r3, [r7, #4]
 8008bac:	3301      	adds	r3, #1
 8008bae:	085b      	lsrs	r3, r3, #1
 8008bb0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008bba:	88fb      	ldrh	r3, [r7, #6]
 8008bbc:	005a      	lsls	r2, r3, #1
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bc6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008bc8:	6a3b      	ldr	r3, [r7, #32]
 8008bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bcc:	e01e      	b.n	8008c0c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	021b      	lsls	r3, r3, #8
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	461a      	mov	r2, r3
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf6:	3302      	adds	r3, #2
 8008bf8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	3302      	adds	r3, #2
 8008bfe:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	3301      	adds	r3, #1
 8008c04:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1dd      	bne.n	8008bce <USB_WritePMA+0x3a>
  }
}
 8008c12:	bf00      	nop
 8008c14:	3734      	adds	r7, #52	; 0x34
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bc80      	pop	{r7}
 8008c1a:	4770      	bx	lr

08008c1c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b08b      	sub	sp, #44	; 0x2c
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	4611      	mov	r1, r2
 8008c28:	461a      	mov	r2, r3
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	80fb      	strh	r3, [r7, #6]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008c32:	88bb      	ldrh	r3, [r7, #4]
 8008c34:	085b      	lsrs	r3, r3, #1
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c42:	88fb      	ldrh	r3, [r7, #6]
 8008c44:	005a      	lsls	r2, r3, #1
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c4e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	627b      	str	r3, [r7, #36]	; 0x24
 8008c54:	e01b      	b.n	8008c8e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008c56:	6a3b      	ldr	r3, [r7, #32]
 8008c58:	881b      	ldrh	r3, [r3, #0]
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c5e:	6a3b      	ldr	r3, [r7, #32]
 8008c60:	3302      	adds	r3, #2
 8008c62:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	0a1b      	lsrs	r3, r3, #8
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008c82:	6a3b      	ldr	r3, [r7, #32]
 8008c84:	3302      	adds	r3, #2
 8008c86:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1e0      	bne.n	8008c56 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008c94:	88bb      	ldrh	r3, [r7, #4]
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d007      	beq.n	8008cb0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	881b      	ldrh	r3, [r3, #0]
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	701a      	strb	r2, [r3, #0]
  }
}
 8008cb0:	bf00      	nop
 8008cb2:	372c      	adds	r7, #44	; 0x2c
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bc80      	pop	{r7}
 8008cb8:	4770      	bx	lr

08008cba <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	7c1b      	ldrb	r3, [r3, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d115      	bne.n	8008cfe <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	2181      	movs	r1, #129	; 0x81
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f001 fe1f 	bl	800a91e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cea:	2202      	movs	r2, #2
 8008cec:	2101      	movs	r1, #1
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f001 fe15 	bl	800a91e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008cfc:	e012      	b.n	8008d24 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008cfe:	2340      	movs	r3, #64	; 0x40
 8008d00:	2202      	movs	r2, #2
 8008d02:	2181      	movs	r1, #129	; 0x81
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f001 fe0a 	bl	800a91e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008d10:	2340      	movs	r3, #64	; 0x40
 8008d12:	2202      	movs	r2, #2
 8008d14:	2101      	movs	r1, #1
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f001 fe01 	bl	800a91e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d24:	2308      	movs	r3, #8
 8008d26:	2203      	movs	r2, #3
 8008d28:	2182      	movs	r1, #130	; 0x82
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f001 fdf7 	bl	800a91e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d36:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008d3a:	f001 ff17 	bl	800ab6c <USBD_static_malloc>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d102      	bne.n	8008d56 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008d50:	2301      	movs	r3, #1
 8008d52:	73fb      	strb	r3, [r7, #15]
 8008d54:	e026      	b.n	8008da4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	7c1b      	ldrb	r3, [r3, #16]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d109      	bne.n	8008d94 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d8a:	2101      	movs	r1, #1
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f001 feb7 	bl	800ab00 <USBD_LL_PrepareReceive>
 8008d92:	e007      	b.n	8008da4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d9a:	2340      	movs	r3, #64	; 0x40
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f001 feae 	bl	800ab00 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	460b      	mov	r3, r1
 8008db8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008dbe:	2181      	movs	r1, #129	; 0x81
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f001 fdd2 	bl	800a96a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008dcc:	2101      	movs	r1, #1
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f001 fdcb 	bl	800a96a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008ddc:	2182      	movs	r1, #130	; 0x82
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f001 fdc3 	bl	800a96a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00e      	beq.n	8008e12 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e04:	4618      	mov	r0, r3
 8008e06:	f001 febd 	bl	800ab84 <USBD_static_free>
    pdev->pClassData = NULL;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e2c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008e32:	2300      	movs	r3, #0
 8008e34:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d039      	beq.n	8008eba <USBD_CDC_Setup+0x9e>
 8008e46:	2b20      	cmp	r3, #32
 8008e48:	d17c      	bne.n	8008f44 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	88db      	ldrh	r3, [r3, #6]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d029      	beq.n	8008ea6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	b25b      	sxtb	r3, r3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	da11      	bge.n	8008e80 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	683a      	ldr	r2, [r7, #0]
 8008e66:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008e68:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	88d2      	ldrh	r2, [r2, #6]
 8008e6e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e70:	6939      	ldr	r1, [r7, #16]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	88db      	ldrh	r3, [r3, #6]
 8008e76:	461a      	mov	r2, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f001 f9c9 	bl	800a210 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008e7e:	e068      	b.n	8008f52 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	785a      	ldrb	r2, [r3, #1]
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	88db      	ldrh	r3, [r3, #6]
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e96:	6939      	ldr	r1, [r7, #16]
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	88db      	ldrh	r3, [r3, #6]
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f001 f9e4 	bl	800a26c <USBD_CtlPrepareRx>
      break;
 8008ea4:	e055      	b.n	8008f52 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	7850      	ldrb	r0, [r2, #1]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	4798      	blx	r3
      break;
 8008eb8:	e04b      	b.n	8008f52 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	785b      	ldrb	r3, [r3, #1]
 8008ebe:	2b0a      	cmp	r3, #10
 8008ec0:	d017      	beq.n	8008ef2 <USBD_CDC_Setup+0xd6>
 8008ec2:	2b0b      	cmp	r3, #11
 8008ec4:	d029      	beq.n	8008f1a <USBD_CDC_Setup+0xfe>
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d133      	bne.n	8008f32 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	d107      	bne.n	8008ee4 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008ed4:	f107 030c 	add.w	r3, r7, #12
 8008ed8:	2202      	movs	r2, #2
 8008eda:	4619      	mov	r1, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f001 f997 	bl	800a210 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ee2:	e02e      	b.n	8008f42 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f001 f928 	bl	800a13c <USBD_CtlError>
            ret = USBD_FAIL;
 8008eec:	2302      	movs	r3, #2
 8008eee:	75fb      	strb	r3, [r7, #23]
          break;
 8008ef0:	e027      	b.n	8008f42 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef8:	2b03      	cmp	r3, #3
 8008efa:	d107      	bne.n	8008f0c <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008efc:	f107 030f 	add.w	r3, r7, #15
 8008f00:	2201      	movs	r2, #1
 8008f02:	4619      	mov	r1, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f001 f983 	bl	800a210 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f0a:	e01a      	b.n	8008f42 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f001 f914 	bl	800a13c <USBD_CtlError>
            ret = USBD_FAIL;
 8008f14:	2302      	movs	r3, #2
 8008f16:	75fb      	strb	r3, [r7, #23]
          break;
 8008f18:	e013      	b.n	8008f42 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f20:	2b03      	cmp	r3, #3
 8008f22:	d00d      	beq.n	8008f40 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f001 f908 	bl	800a13c <USBD_CtlError>
            ret = USBD_FAIL;
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f30:	e006      	b.n	8008f40 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 f901 	bl	800a13c <USBD_CtlError>
          ret = USBD_FAIL;
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f3e:	e000      	b.n	8008f42 <USBD_CDC_Setup+0x126>
          break;
 8008f40:	bf00      	nop
      }
      break;
 8008f42:	e006      	b.n	8008f52 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f001 f8f8 	bl	800a13c <USBD_CtlError>
      ret = USBD_FAIL;
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f50:	bf00      	nop
  }

  return ret;
 8008f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3718      	adds	r7, #24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f6e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f76:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d03a      	beq.n	8008ff8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008f82:	78fa      	ldrb	r2, [r7, #3]
 8008f84:	6879      	ldr	r1, [r7, #4]
 8008f86:	4613      	mov	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	440b      	add	r3, r1
 8008f90:	331c      	adds	r3, #28
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d029      	beq.n	8008fec <USBD_CDC_DataIn+0x90>
 8008f98:	78fa      	ldrb	r2, [r7, #3]
 8008f9a:	6879      	ldr	r1, [r7, #4]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	440b      	add	r3, r1
 8008fa6:	331c      	adds	r3, #28
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	78f9      	ldrb	r1, [r7, #3]
 8008fac:	68b8      	ldr	r0, [r7, #8]
 8008fae:	460b      	mov	r3, r1
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	440b      	add	r3, r1
 8008fb4:	00db      	lsls	r3, r3, #3
 8008fb6:	4403      	add	r3, r0
 8008fb8:	3338      	adds	r3, #56	; 0x38
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	fbb2 f1f3 	udiv	r1, r2, r3
 8008fc0:	fb03 f301 	mul.w	r3, r3, r1
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d110      	bne.n	8008fec <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008fca:	78fa      	ldrb	r2, [r7, #3]
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	440b      	add	r3, r1
 8008fd8:	331c      	adds	r3, #28
 8008fda:	2200      	movs	r2, #0
 8008fdc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008fde:	78f9      	ldrb	r1, [r7, #3]
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f001 fd68 	bl	800aaba <USBD_LL_Transmit>
 8008fea:	e003      	b.n	8008ff4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	e000      	b.n	8008ffa <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008ff8:	2302      	movs	r3, #2
  }
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b084      	sub	sp, #16
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	460b      	mov	r3, r1
 800900c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009014:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009016:	78fb      	ldrb	r3, [r7, #3]
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f001 fd93 	bl	800ab46 <USBD_LL_GetRxDataSize>
 8009020:	4602      	mov	r2, r0
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00d      	beq.n	800904e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009046:	4611      	mov	r1, r2
 8009048:	4798      	blx	r3

    return USBD_OK;
 800904a:	2300      	movs	r3, #0
 800904c:	e000      	b.n	8009050 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800904e:	2302      	movs	r3, #2
  }
}
 8009050:	4618      	mov	r0, r3
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009066:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800906e:	2b00      	cmp	r3, #0
 8009070:	d015      	beq.n	800909e <USBD_CDC_EP0_RxReady+0x46>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009078:	2bff      	cmp	r3, #255	; 0xff
 800907a:	d010      	beq.n	800909e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800908a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009092:	b292      	uxth	r2, r2
 8009094:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	22ff      	movs	r2, #255	; 0xff
 800909a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2243      	movs	r2, #67	; 0x43
 80090b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80090b6:	4b03      	ldr	r3, [pc, #12]	; (80090c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	bc80      	pop	{r7}
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	200000ac 	.word	0x200000ac

080090c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2243      	movs	r2, #67	; 0x43
 80090d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80090d6:	4b03      	ldr	r3, [pc, #12]	; (80090e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80090d8:	4618      	mov	r0, r3
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	bc80      	pop	{r7}
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	20000068 	.word	0x20000068

080090e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2243      	movs	r2, #67	; 0x43
 80090f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80090f6:	4b03      	ldr	r3, [pc, #12]	; (8009104 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bc80      	pop	{r7}
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	200000f0 	.word	0x200000f0

08009108 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	220a      	movs	r2, #10
 8009114:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009116:	4b03      	ldr	r3, [pc, #12]	; (8009124 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009118:	4618      	mov	r0, r3
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	bc80      	pop	{r7}
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	20000024 	.word	0x20000024

08009128 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009132:	2302      	movs	r3, #2
 8009134:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d005      	beq.n	8009148 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009144:	2300      	movs	r3, #0
 8009146:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009148:	7bfb      	ldrb	r3, [r7, #15]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	bc80      	pop	{r7}
 8009152:	4770      	bx	lr

08009154 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	4613      	mov	r3, r2
 8009160:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009168:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009172:	88fa      	ldrh	r2, [r7, #6]
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	371c      	adds	r7, #28
 8009180:	46bd      	mov	sp, r7
 8009182:	bc80      	pop	{r7}
 8009184:	4770      	bx	lr

08009186 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009186:	b480      	push	{r7}
 8009188:	b085      	sub	sp, #20
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009196:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3714      	adds	r7, #20
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bc80      	pop	{r7}
 80091aa:	4770      	bx	lr

080091ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ba:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d017      	beq.n	80091f6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	7c1b      	ldrb	r3, [r3, #16]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d109      	bne.n	80091e2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091d8:	2101      	movs	r1, #1
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f001 fc90 	bl	800ab00 <USBD_LL_PrepareReceive>
 80091e0:	e007      	b.n	80091f2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091e8:	2340      	movs	r3, #64	; 0x40
 80091ea:	2101      	movs	r1, #1
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f001 fc87 	bl	800ab00 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	e000      	b.n	80091f8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80091f6:	2302      	movs	r3, #2
  }
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	4613      	mov	r3, r2
 800920c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009214:	2302      	movs	r3, #2
 8009216:	e01a      	b.n	800924e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d003      	beq.n	8009238 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	79fa      	ldrb	r2, [r7, #7]
 8009244:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f001 faf4 	bl	800a834 <USBD_LL_Init>

  return USBD_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009256:	b480      	push	{r7}
 8009258:	b085      	sub	sp, #20
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009260:	2300      	movs	r3, #0
 8009262:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d006      	beq.n	8009278 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	73fb      	strb	r3, [r7, #15]
 8009276:	e001      	b.n	800927c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009278:	2302      	movs	r3, #2
 800927a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800927c:	7bfb      	ldrb	r3, [r7, #15]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	bc80      	pop	{r7}
 8009286:	4770      	bx	lr

08009288 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f001 fb29 	bl	800a8e8 <USBD_LL_Start>

  return USBD_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	370c      	adds	r7, #12
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bc80      	pop	{r7}
 80092b2:	4770      	bx	lr

080092b4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	460b      	mov	r3, r1
 80092be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80092c0:	2302      	movs	r3, #2
 80092c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00c      	beq.n	80092e8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	78fa      	ldrb	r2, [r7, #3]
 80092d8:	4611      	mov	r1, r2
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	4798      	blx	r3
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b082      	sub	sp, #8
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	460b      	mov	r3, r1
 80092fc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	78fa      	ldrb	r2, [r7, #3]
 8009308:	4611      	mov	r1, r2
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	4798      	blx	r3

  return USBD_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	4618      	mov	r0, r3
 800932c:	f000 feca 	bl	800a0c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800933e:	461a      	mov	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800934c:	f003 031f 	and.w	r3, r3, #31
 8009350:	2b01      	cmp	r3, #1
 8009352:	d00c      	beq.n	800936e <USBD_LL_SetupStage+0x56>
 8009354:	2b01      	cmp	r3, #1
 8009356:	d302      	bcc.n	800935e <USBD_LL_SetupStage+0x46>
 8009358:	2b02      	cmp	r3, #2
 800935a:	d010      	beq.n	800937e <USBD_LL_SetupStage+0x66>
 800935c:	e017      	b.n	800938e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f9ca 	bl	8009700 <USBD_StdDevReq>
      break;
 800936c:	e01a      	b.n	80093a4 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009374:	4619      	mov	r1, r3
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fa2c 	bl	80097d4 <USBD_StdItfReq>
      break;
 800937c:	e012      	b.n	80093a4 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fa6a 	bl	8009860 <USBD_StdEPReq>
      break;
 800938c:	e00a      	b.n	80093a4 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009394:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009398:	b2db      	uxtb	r3, r3
 800939a:	4619      	mov	r1, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f001 fb03 	bl	800a9a8 <USBD_LL_StallEP>
      break;
 80093a2:	bf00      	nop
  }

  return USBD_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b086      	sub	sp, #24
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	60f8      	str	r0, [r7, #12]
 80093b6:	460b      	mov	r3, r1
 80093b8:	607a      	str	r2, [r7, #4]
 80093ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80093bc:	7afb      	ldrb	r3, [r7, #11]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d14b      	bne.n	800945a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80093c8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	d134      	bne.n	800943e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	68da      	ldr	r2, [r3, #12]
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d919      	bls.n	8009414 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	68da      	ldr	r2, [r3, #12]
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	1ad2      	subs	r2, r2, r3
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	68da      	ldr	r2, [r3, #12]
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d203      	bcs.n	8009402 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80093fe:	b29b      	uxth	r3, r3
 8009400:	e002      	b.n	8009408 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009406:	b29b      	uxth	r3, r3
 8009408:	461a      	mov	r2, r3
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f000 ff4b 	bl	800a2a8 <USBD_CtlContinueRx>
 8009412:	e038      	b.n	8009486 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00a      	beq.n	8009436 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009426:	2b03      	cmp	r3, #3
 8009428:	d105      	bne.n	8009436 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f000 ff48 	bl	800a2cc <USBD_CtlSendStatus>
 800943c:	e023      	b.n	8009486 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009444:	2b05      	cmp	r3, #5
 8009446:	d11e      	bne.n	8009486 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009450:	2100      	movs	r1, #0
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f001 faa8 	bl	800a9a8 <USBD_LL_StallEP>
 8009458:	e015      	b.n	8009486 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00d      	beq.n	8009482 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800946c:	2b03      	cmp	r3, #3
 800946e:	d108      	bne.n	8009482 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	7afa      	ldrb	r2, [r7, #11]
 800947a:	4611      	mov	r1, r2
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	4798      	blx	r3
 8009480:	e001      	b.n	8009486 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009482:	2302      	movs	r3, #2
 8009484:	e000      	b.n	8009488 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3718      	adds	r7, #24
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	460b      	mov	r3, r1
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800949e:	7afb      	ldrb	r3, [r7, #11]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d17f      	bne.n	80095a4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	3314      	adds	r3, #20
 80094a8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d15c      	bne.n	800956e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	68da      	ldr	r2, [r3, #12]
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d915      	bls.n	80094ec <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	68da      	ldr	r2, [r3, #12]
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	1ad2      	subs	r2, r2, r3
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	461a      	mov	r2, r3
 80094d6:	6879      	ldr	r1, [r7, #4]
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f000 feb5 	bl	800a248 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094de:	2300      	movs	r3, #0
 80094e0:	2200      	movs	r2, #0
 80094e2:	2100      	movs	r1, #0
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f001 fb0b 	bl	800ab00 <USBD_LL_PrepareReceive>
 80094ea:	e04e      	b.n	800958a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	6912      	ldr	r2, [r2, #16]
 80094f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80094f8:	fb02 f201 	mul.w	r2, r2, r1
 80094fc:	1a9b      	subs	r3, r3, r2
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d11c      	bne.n	800953c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	689a      	ldr	r2, [r3, #8]
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800950a:	429a      	cmp	r2, r3
 800950c:	d316      	bcc.n	800953c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	689a      	ldr	r2, [r3, #8]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009518:	429a      	cmp	r2, r3
 800951a:	d20f      	bcs.n	800953c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800951c:	2200      	movs	r2, #0
 800951e:	2100      	movs	r1, #0
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f000 fe91 	bl	800a248 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800952e:	2300      	movs	r3, #0
 8009530:	2200      	movs	r2, #0
 8009532:	2100      	movs	r1, #0
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f001 fae3 	bl	800ab00 <USBD_LL_PrepareReceive>
 800953a:	e026      	b.n	800958a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00a      	beq.n	800955e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800954e:	2b03      	cmp	r3, #3
 8009550:	d105      	bne.n	800955e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800955e:	2180      	movs	r1, #128	; 0x80
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f001 fa21 	bl	800a9a8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f000 fec3 	bl	800a2f2 <USBD_CtlReceiveStatus>
 800956c:	e00d      	b.n	800958a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009574:	2b04      	cmp	r3, #4
 8009576:	d004      	beq.n	8009582 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800957e:	2b00      	cmp	r3, #0
 8009580:	d103      	bne.n	800958a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009582:	2180      	movs	r1, #128	; 0x80
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f001 fa0f 	bl	800a9a8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009590:	2b01      	cmp	r3, #1
 8009592:	d11d      	bne.n	80095d0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f7ff fe83 	bl	80092a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80095a2:	e015      	b.n	80095d0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095aa:	695b      	ldr	r3, [r3, #20]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00d      	beq.n	80095cc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80095b6:	2b03      	cmp	r3, #3
 80095b8:	d108      	bne.n	80095cc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	7afa      	ldrb	r2, [r7, #11]
 80095c4:	4611      	mov	r1, r2
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	4798      	blx	r3
 80095ca:	e001      	b.n	80095d0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80095cc:	2302      	movs	r3, #2
 80095ce:	e000      	b.n	80095d2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3718      	adds	r7, #24
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b082      	sub	sp, #8
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095e2:	2340      	movs	r3, #64	; 0x40
 80095e4:	2200      	movs	r2, #0
 80095e6:	2100      	movs	r1, #0
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f001 f998 	bl	800a91e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2240      	movs	r2, #64	; 0x40
 80095fa:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095fe:	2340      	movs	r3, #64	; 0x40
 8009600:	2200      	movs	r2, #0
 8009602:	2180      	movs	r1, #128	; 0x80
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f001 f98a 	bl	800a91e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2201      	movs	r2, #1
 800960e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2240      	movs	r2, #64	; 0x40
 8009614:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800963a:	2b00      	cmp	r3, #0
 800963c:	d009      	beq.n	8009652 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	6852      	ldr	r2, [r2, #4]
 800964a:	b2d2      	uxtb	r2, r2
 800964c:	4611      	mov	r1, r2
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	4798      	blx	r3
  }

  return USBD_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	460b      	mov	r3, r1
 8009666:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	78fa      	ldrb	r2, [r7, #3]
 800966c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	bc80      	pop	{r7}
 8009678:	4770      	bx	lr

0800967a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800967a:	b480      	push	{r7}
 800967c:	b083      	sub	sp, #12
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2204      	movs	r2, #4
 8009692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	bc80      	pop	{r7}
 80096a0:	4770      	bx	lr

080096a2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80096a2:	b480      	push	{r7}
 80096a4:	b083      	sub	sp, #12
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096b0:	2b04      	cmp	r3, #4
 80096b2:	d105      	bne.n	80096c0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bc80      	pop	{r7}
 80096ca:	4770      	bx	lr

080096cc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096da:	2b03      	cmp	r3, #3
 80096dc:	d10b      	bne.n	80096f6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d005      	beq.n	80096f6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800970a:	2300      	movs	r3, #0
 800970c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009716:	2b20      	cmp	r3, #32
 8009718:	d004      	beq.n	8009724 <USBD_StdDevReq+0x24>
 800971a:	2b40      	cmp	r3, #64	; 0x40
 800971c:	d002      	beq.n	8009724 <USBD_StdDevReq+0x24>
 800971e:	2b00      	cmp	r3, #0
 8009720:	d008      	beq.n	8009734 <USBD_StdDevReq+0x34>
 8009722:	e04c      	b.n	80097be <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	4798      	blx	r3
      break;
 8009732:	e049      	b.n	80097c8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	785b      	ldrb	r3, [r3, #1]
 8009738:	2b09      	cmp	r3, #9
 800973a:	d83a      	bhi.n	80097b2 <USBD_StdDevReq+0xb2>
 800973c:	a201      	add	r2, pc, #4	; (adr r2, 8009744 <USBD_StdDevReq+0x44>)
 800973e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009742:	bf00      	nop
 8009744:	08009795 	.word	0x08009795
 8009748:	080097a9 	.word	0x080097a9
 800974c:	080097b3 	.word	0x080097b3
 8009750:	0800979f 	.word	0x0800979f
 8009754:	080097b3 	.word	0x080097b3
 8009758:	08009777 	.word	0x08009777
 800975c:	0800976d 	.word	0x0800976d
 8009760:	080097b3 	.word	0x080097b3
 8009764:	0800978b 	.word	0x0800978b
 8009768:	08009781 	.word	0x08009781
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f9d4 	bl	8009b1c <USBD_GetDescriptor>
          break;
 8009774:	e022      	b.n	80097bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009776:	6839      	ldr	r1, [r7, #0]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fb37 	bl	8009dec <USBD_SetAddress>
          break;
 800977e:	e01d      	b.n	80097bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009780:	6839      	ldr	r1, [r7, #0]
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 fb74 	bl	8009e70 <USBD_SetConfig>
          break;
 8009788:	e018      	b.n	80097bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fbfd 	bl	8009f8c <USBD_GetConfig>
          break;
 8009792:	e013      	b.n	80097bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fc2c 	bl	8009ff4 <USBD_GetStatus>
          break;
 800979c:	e00e      	b.n	80097bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fc5a 	bl	800a05a <USBD_SetFeature>
          break;
 80097a6:	e009      	b.n	80097bc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fc69 	bl	800a082 <USBD_ClrFeature>
          break;
 80097b0:	e004      	b.n	80097bc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fcc1 	bl	800a13c <USBD_CtlError>
          break;
 80097ba:	bf00      	nop
      }
      break;
 80097bc:	e004      	b.n	80097c8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fcbb 	bl	800a13c <USBD_CtlError>
      break;
 80097c6:	bf00      	nop
  }

  return ret;
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop

080097d4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097ea:	2b20      	cmp	r3, #32
 80097ec:	d003      	beq.n	80097f6 <USBD_StdItfReq+0x22>
 80097ee:	2b40      	cmp	r3, #64	; 0x40
 80097f0:	d001      	beq.n	80097f6 <USBD_StdItfReq+0x22>
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d12a      	bne.n	800984c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097fc:	3b01      	subs	r3, #1
 80097fe:	2b02      	cmp	r3, #2
 8009800:	d81d      	bhi.n	800983e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	889b      	ldrh	r3, [r3, #4]
 8009806:	b2db      	uxtb	r3, r3
 8009808:	2b01      	cmp	r3, #1
 800980a:	d813      	bhi.n	8009834 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	4798      	blx	r3
 800981a:	4603      	mov	r3, r0
 800981c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	88db      	ldrh	r3, [r3, #6]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d110      	bne.n	8009848 <USBD_StdItfReq+0x74>
 8009826:	7bfb      	ldrb	r3, [r7, #15]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10d      	bne.n	8009848 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fd4d 	bl	800a2cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009832:	e009      	b.n	8009848 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fc80 	bl	800a13c <USBD_CtlError>
          break;
 800983c:	e004      	b.n	8009848 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fc7b 	bl	800a13c <USBD_CtlError>
          break;
 8009846:	e000      	b.n	800984a <USBD_StdItfReq+0x76>
          break;
 8009848:	bf00      	nop
      }
      break;
 800984a:	e004      	b.n	8009856 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fc74 	bl	800a13c <USBD_CtlError>
      break;
 8009854:	bf00      	nop
  }

  return USBD_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	889b      	ldrh	r3, [r3, #4]
 8009872:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800987c:	2b20      	cmp	r3, #32
 800987e:	d004      	beq.n	800988a <USBD_StdEPReq+0x2a>
 8009880:	2b40      	cmp	r3, #64	; 0x40
 8009882:	d002      	beq.n	800988a <USBD_StdEPReq+0x2a>
 8009884:	2b00      	cmp	r3, #0
 8009886:	d008      	beq.n	800989a <USBD_StdEPReq+0x3a>
 8009888:	e13d      	b.n	8009b06 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	6839      	ldr	r1, [r7, #0]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	4798      	blx	r3
      break;
 8009898:	e13a      	b.n	8009b10 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098a2:	2b20      	cmp	r3, #32
 80098a4:	d10a      	bne.n	80098bc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	4798      	blx	r3
 80098b4:	4603      	mov	r3, r0
 80098b6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
 80098ba:	e12a      	b.n	8009b12 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	785b      	ldrb	r3, [r3, #1]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d03e      	beq.n	8009942 <USBD_StdEPReq+0xe2>
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	d002      	beq.n	80098ce <USBD_StdEPReq+0x6e>
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d070      	beq.n	80099ae <USBD_StdEPReq+0x14e>
 80098cc:	e115      	b.n	8009afa <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d002      	beq.n	80098de <USBD_StdEPReq+0x7e>
 80098d8:	2b03      	cmp	r3, #3
 80098da:	d015      	beq.n	8009908 <USBD_StdEPReq+0xa8>
 80098dc:	e02b      	b.n	8009936 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098de:	7bbb      	ldrb	r3, [r7, #14]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00c      	beq.n	80098fe <USBD_StdEPReq+0x9e>
 80098e4:	7bbb      	ldrb	r3, [r7, #14]
 80098e6:	2b80      	cmp	r3, #128	; 0x80
 80098e8:	d009      	beq.n	80098fe <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80098ea:	7bbb      	ldrb	r3, [r7, #14]
 80098ec:	4619      	mov	r1, r3
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f001 f85a 	bl	800a9a8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80098f4:	2180      	movs	r1, #128	; 0x80
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f001 f856 	bl	800a9a8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098fc:	e020      	b.n	8009940 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80098fe:	6839      	ldr	r1, [r7, #0]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fc1b 	bl	800a13c <USBD_CtlError>
              break;
 8009906:	e01b      	b.n	8009940 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	885b      	ldrh	r3, [r3, #2]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10e      	bne.n	800992e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8009910:	7bbb      	ldrb	r3, [r7, #14]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00b      	beq.n	800992e <USBD_StdEPReq+0xce>
 8009916:	7bbb      	ldrb	r3, [r7, #14]
 8009918:	2b80      	cmp	r3, #128	; 0x80
 800991a:	d008      	beq.n	800992e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	88db      	ldrh	r3, [r3, #6]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d104      	bne.n	800992e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009924:	7bbb      	ldrb	r3, [r7, #14]
 8009926:	4619      	mov	r1, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f001 f83d 	bl	800a9a8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fccc 	bl	800a2cc <USBD_CtlSendStatus>

              break;
 8009934:	e004      	b.n	8009940 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8009936:	6839      	ldr	r1, [r7, #0]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fbff 	bl	800a13c <USBD_CtlError>
              break;
 800993e:	bf00      	nop
          }
          break;
 8009940:	e0e0      	b.n	8009b04 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009948:	2b02      	cmp	r3, #2
 800994a:	d002      	beq.n	8009952 <USBD_StdEPReq+0xf2>
 800994c:	2b03      	cmp	r3, #3
 800994e:	d015      	beq.n	800997c <USBD_StdEPReq+0x11c>
 8009950:	e026      	b.n	80099a0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009952:	7bbb      	ldrb	r3, [r7, #14]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00c      	beq.n	8009972 <USBD_StdEPReq+0x112>
 8009958:	7bbb      	ldrb	r3, [r7, #14]
 800995a:	2b80      	cmp	r3, #128	; 0x80
 800995c:	d009      	beq.n	8009972 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800995e:	7bbb      	ldrb	r3, [r7, #14]
 8009960:	4619      	mov	r1, r3
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f001 f820 	bl	800a9a8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009968:	2180      	movs	r1, #128	; 0x80
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f001 f81c 	bl	800a9a8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009970:	e01c      	b.n	80099ac <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8009972:	6839      	ldr	r1, [r7, #0]
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fbe1 	bl	800a13c <USBD_CtlError>
              break;
 800997a:	e017      	b.n	80099ac <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	885b      	ldrh	r3, [r3, #2]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d112      	bne.n	80099aa <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009984:	7bbb      	ldrb	r3, [r7, #14]
 8009986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800998a:	2b00      	cmp	r3, #0
 800998c:	d004      	beq.n	8009998 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800998e:	7bbb      	ldrb	r3, [r7, #14]
 8009990:	4619      	mov	r1, r3
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f001 f827 	bl	800a9e6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fc97 	bl	800a2cc <USBD_CtlSendStatus>
              }
              break;
 800999e:	e004      	b.n	80099aa <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fbca 	bl	800a13c <USBD_CtlError>
              break;
 80099a8:	e000      	b.n	80099ac <USBD_StdEPReq+0x14c>
              break;
 80099aa:	bf00      	nop
          }
          break;
 80099ac:	e0aa      	b.n	8009b04 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d002      	beq.n	80099be <USBD_StdEPReq+0x15e>
 80099b8:	2b03      	cmp	r3, #3
 80099ba:	d032      	beq.n	8009a22 <USBD_StdEPReq+0x1c2>
 80099bc:	e097      	b.n	8009aee <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099be:	7bbb      	ldrb	r3, [r7, #14]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d007      	beq.n	80099d4 <USBD_StdEPReq+0x174>
 80099c4:	7bbb      	ldrb	r3, [r7, #14]
 80099c6:	2b80      	cmp	r3, #128	; 0x80
 80099c8:	d004      	beq.n	80099d4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fbb5 	bl	800a13c <USBD_CtlError>
                break;
 80099d2:	e091      	b.n	8009af8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	da0b      	bge.n	80099f4 <USBD_StdEPReq+0x194>
 80099dc:	7bbb      	ldrb	r3, [r7, #14]
 80099de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099e2:	4613      	mov	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	3310      	adds	r3, #16
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	4413      	add	r3, r2
 80099f0:	3304      	adds	r3, #4
 80099f2:	e00b      	b.n	8009a0c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80099f4:	7bbb      	ldrb	r3, [r7, #14]
 80099f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	4413      	add	r3, r2
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	2202      	movs	r2, #2
 8009a18:	4619      	mov	r1, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fbf8 	bl	800a210 <USBD_CtlSendData>
              break;
 8009a20:	e06a      	b.n	8009af8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	da11      	bge.n	8009a4e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a2a:	7bbb      	ldrb	r3, [r7, #14]
 8009a2c:	f003 020f 	and.w	r2, r3, #15
 8009a30:	6879      	ldr	r1, [r7, #4]
 8009a32:	4613      	mov	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4413      	add	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	440b      	add	r3, r1
 8009a3c:	3318      	adds	r3, #24
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d117      	bne.n	8009a74 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fb78 	bl	800a13c <USBD_CtlError>
                  break;
 8009a4c:	e054      	b.n	8009af8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a4e:	7bbb      	ldrb	r3, [r7, #14]
 8009a50:	f003 020f 	and.w	r2, r3, #15
 8009a54:	6879      	ldr	r1, [r7, #4]
 8009a56:	4613      	mov	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	4413      	add	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	440b      	add	r3, r1
 8009a60:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d104      	bne.n	8009a74 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fb65 	bl	800a13c <USBD_CtlError>
                  break;
 8009a72:	e041      	b.n	8009af8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	da0b      	bge.n	8009a94 <USBD_StdEPReq+0x234>
 8009a7c:	7bbb      	ldrb	r3, [r7, #14]
 8009a7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a82:	4613      	mov	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	3310      	adds	r3, #16
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	4413      	add	r3, r2
 8009a90:	3304      	adds	r3, #4
 8009a92:	e00b      	b.n	8009aac <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a94:	7bbb      	ldrb	r3, [r7, #14]
 8009a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	3304      	adds	r3, #4
 8009aac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009aae:	7bbb      	ldrb	r3, [r7, #14]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <USBD_StdEPReq+0x25a>
 8009ab4:	7bbb      	ldrb	r3, [r7, #14]
 8009ab6:	2b80      	cmp	r3, #128	; 0x80
 8009ab8:	d103      	bne.n	8009ac2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	2200      	movs	r2, #0
 8009abe:	601a      	str	r2, [r3, #0]
 8009ac0:	e00e      	b.n	8009ae0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009ac2:	7bbb      	ldrb	r3, [r7, #14]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 ffac 	bl	800aa24 <USBD_LL_IsStallEP>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d003      	beq.n	8009ada <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	e002      	b.n	8009ae0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	2200      	movs	r2, #0
 8009ade:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fb92 	bl	800a210 <USBD_CtlSendData>
              break;
 8009aec:	e004      	b.n	8009af8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fb23 	bl	800a13c <USBD_CtlError>
              break;
 8009af6:	bf00      	nop
          }
          break;
 8009af8:	e004      	b.n	8009b04 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fb1d 	bl	800a13c <USBD_CtlError>
          break;
 8009b02:	bf00      	nop
      }
      break;
 8009b04:	e004      	b.n	8009b10 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fb17 	bl	800a13c <USBD_CtlError>
      break;
 8009b0e:	bf00      	nop
  }

  return ret;
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b26:	2300      	movs	r3, #0
 8009b28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	885b      	ldrh	r3, [r3, #2]
 8009b36:	0a1b      	lsrs	r3, r3, #8
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	2b06      	cmp	r3, #6
 8009b3e:	f200 8128 	bhi.w	8009d92 <USBD_GetDescriptor+0x276>
 8009b42:	a201      	add	r2, pc, #4	; (adr r2, 8009b48 <USBD_GetDescriptor+0x2c>)
 8009b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b48:	08009b65 	.word	0x08009b65
 8009b4c:	08009b7d 	.word	0x08009b7d
 8009b50:	08009bbd 	.word	0x08009bbd
 8009b54:	08009d93 	.word	0x08009d93
 8009b58:	08009d93 	.word	0x08009d93
 8009b5c:	08009d33 	.word	0x08009d33
 8009b60:	08009d5f 	.word	0x08009d5f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	7c12      	ldrb	r2, [r2, #16]
 8009b70:	f107 0108 	add.w	r1, r7, #8
 8009b74:	4610      	mov	r0, r2
 8009b76:	4798      	blx	r3
 8009b78:	60f8      	str	r0, [r7, #12]
      break;
 8009b7a:	e112      	b.n	8009da2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	7c1b      	ldrb	r3, [r3, #16]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10d      	bne.n	8009ba0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8c:	f107 0208 	add.w	r2, r7, #8
 8009b90:	4610      	mov	r0, r2
 8009b92:	4798      	blx	r3
 8009b94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009b9e:	e100      	b.n	8009da2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba8:	f107 0208 	add.w	r2, r7, #8
 8009bac:	4610      	mov	r0, r2
 8009bae:	4798      	blx	r3
 8009bb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	701a      	strb	r2, [r3, #0]
      break;
 8009bba:	e0f2      	b.n	8009da2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	885b      	ldrh	r3, [r3, #2]
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b05      	cmp	r3, #5
 8009bc4:	f200 80ac 	bhi.w	8009d20 <USBD_GetDescriptor+0x204>
 8009bc8:	a201      	add	r2, pc, #4	; (adr r2, 8009bd0 <USBD_GetDescriptor+0xb4>)
 8009bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bce:	bf00      	nop
 8009bd0:	08009be9 	.word	0x08009be9
 8009bd4:	08009c1d 	.word	0x08009c1d
 8009bd8:	08009c51 	.word	0x08009c51
 8009bdc:	08009c85 	.word	0x08009c85
 8009be0:	08009cb9 	.word	0x08009cb9
 8009be4:	08009ced 	.word	0x08009ced
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00b      	beq.n	8009c0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	7c12      	ldrb	r2, [r2, #16]
 8009c00:	f107 0108 	add.w	r1, r7, #8
 8009c04:	4610      	mov	r0, r2
 8009c06:	4798      	blx	r3
 8009c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c0a:	e091      	b.n	8009d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fa94 	bl	800a13c <USBD_CtlError>
            err++;
 8009c14:	7afb      	ldrb	r3, [r7, #11]
 8009c16:	3301      	adds	r3, #1
 8009c18:	72fb      	strb	r3, [r7, #11]
          break;
 8009c1a:	e089      	b.n	8009d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d00b      	beq.n	8009c40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	7c12      	ldrb	r2, [r2, #16]
 8009c34:	f107 0108 	add.w	r1, r7, #8
 8009c38:	4610      	mov	r0, r2
 8009c3a:	4798      	blx	r3
 8009c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c3e:	e077      	b.n	8009d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fa7a 	bl	800a13c <USBD_CtlError>
            err++;
 8009c48:	7afb      	ldrb	r3, [r7, #11]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c4e:	e06f      	b.n	8009d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00b      	beq.n	8009c74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	7c12      	ldrb	r2, [r2, #16]
 8009c68:	f107 0108 	add.w	r1, r7, #8
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	4798      	blx	r3
 8009c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c72:	e05d      	b.n	8009d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fa60 	bl	800a13c <USBD_CtlError>
            err++;
 8009c7c:	7afb      	ldrb	r3, [r7, #11]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	72fb      	strb	r3, [r7, #11]
          break;
 8009c82:	e055      	b.n	8009d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00b      	beq.n	8009ca8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	7c12      	ldrb	r2, [r2, #16]
 8009c9c:	f107 0108 	add.w	r1, r7, #8
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	4798      	blx	r3
 8009ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ca6:	e043      	b.n	8009d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fa46 	bl	800a13c <USBD_CtlError>
            err++;
 8009cb0:	7afb      	ldrb	r3, [r7, #11]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8009cb6:	e03b      	b.n	8009d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00b      	beq.n	8009cdc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cca:	695b      	ldr	r3, [r3, #20]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	7c12      	ldrb	r2, [r2, #16]
 8009cd0:	f107 0108 	add.w	r1, r7, #8
 8009cd4:	4610      	mov	r0, r2
 8009cd6:	4798      	blx	r3
 8009cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cda:	e029      	b.n	8009d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fa2c 	bl	800a13c <USBD_CtlError>
            err++;
 8009ce4:	7afb      	ldrb	r3, [r7, #11]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cea:	e021      	b.n	8009d30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cf2:	699b      	ldr	r3, [r3, #24]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00b      	beq.n	8009d10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	7c12      	ldrb	r2, [r2, #16]
 8009d04:	f107 0108 	add.w	r1, r7, #8
 8009d08:	4610      	mov	r0, r2
 8009d0a:	4798      	blx	r3
 8009d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d0e:	e00f      	b.n	8009d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fa12 	bl	800a13c <USBD_CtlError>
            err++;
 8009d18:	7afb      	ldrb	r3, [r7, #11]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d1e:	e007      	b.n	8009d30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fa0a 	bl	800a13c <USBD_CtlError>
          err++;
 8009d28:	7afb      	ldrb	r3, [r7, #11]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009d2e:	e038      	b.n	8009da2 <USBD_GetDescriptor+0x286>
 8009d30:	e037      	b.n	8009da2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	7c1b      	ldrb	r3, [r3, #16]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d109      	bne.n	8009d4e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d42:	f107 0208 	add.w	r2, r7, #8
 8009d46:	4610      	mov	r0, r2
 8009d48:	4798      	blx	r3
 8009d4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d4c:	e029      	b.n	8009da2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d4e:	6839      	ldr	r1, [r7, #0]
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 f9f3 	bl	800a13c <USBD_CtlError>
        err++;
 8009d56:	7afb      	ldrb	r3, [r7, #11]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	72fb      	strb	r3, [r7, #11]
      break;
 8009d5c:	e021      	b.n	8009da2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	7c1b      	ldrb	r3, [r3, #16]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10d      	bne.n	8009d82 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d6e:	f107 0208 	add.w	r2, r7, #8
 8009d72:	4610      	mov	r0, r2
 8009d74:	4798      	blx	r3
 8009d76:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	2207      	movs	r2, #7
 8009d7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d80:	e00f      	b.n	8009da2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f9d9 	bl	800a13c <USBD_CtlError>
        err++;
 8009d8a:	7afb      	ldrb	r3, [r7, #11]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	72fb      	strb	r3, [r7, #11]
      break;
 8009d90:	e007      	b.n	8009da2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 f9d1 	bl	800a13c <USBD_CtlError>
      err++;
 8009d9a:	7afb      	ldrb	r3, [r7, #11]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	72fb      	strb	r3, [r7, #11]
      break;
 8009da0:	bf00      	nop
  }

  if (err != 0U)
 8009da2:	7afb      	ldrb	r3, [r7, #11]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d11c      	bne.n	8009de2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009da8:	893b      	ldrh	r3, [r7, #8]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d011      	beq.n	8009dd2 <USBD_GetDescriptor+0x2b6>
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	88db      	ldrh	r3, [r3, #6]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00d      	beq.n	8009dd2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	88da      	ldrh	r2, [r3, #6]
 8009dba:	893b      	ldrh	r3, [r7, #8]
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	bf28      	it	cs
 8009dc0:	4613      	movcs	r3, r2
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009dc6:	893b      	ldrh	r3, [r7, #8]
 8009dc8:	461a      	mov	r2, r3
 8009dca:	68f9      	ldr	r1, [r7, #12]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fa1f 	bl	800a210 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	88db      	ldrh	r3, [r3, #6]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d104      	bne.n	8009de4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fa76 	bl	800a2cc <USBD_CtlSendStatus>
 8009de0:	e000      	b.n	8009de4 <USBD_GetDescriptor+0x2c8>
    return;
 8009de2:	bf00      	nop
    }
  }
}
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop

08009dec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	889b      	ldrh	r3, [r3, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d130      	bne.n	8009e60 <USBD_SetAddress+0x74>
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	88db      	ldrh	r3, [r3, #6]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d12c      	bne.n	8009e60 <USBD_SetAddress+0x74>
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	885b      	ldrh	r3, [r3, #2]
 8009e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8009e0c:	d828      	bhi.n	8009e60 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	885b      	ldrh	r3, [r3, #2]
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e20:	2b03      	cmp	r3, #3
 8009e22:	d104      	bne.n	8009e2e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009e24:	6839      	ldr	r1, [r7, #0]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f988 	bl	800a13c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e2c:	e01c      	b.n	8009e68 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	7bfa      	ldrb	r2, [r7, #15]
 8009e32:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fe1e 	bl	800aa7c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 fa43 	bl	800a2cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d004      	beq.n	8009e56 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2202      	movs	r2, #2
 8009e50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e54:	e008      	b.n	8009e68 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e5e:	e003      	b.n	8009e68 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009e60:	6839      	ldr	r1, [r7, #0]
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f96a 	bl	800a13c <USBD_CtlError>
  }
}
 8009e68:	bf00      	nop
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	885b      	ldrh	r3, [r3, #2]
 8009e7e:	b2da      	uxtb	r2, r3
 8009e80:	4b41      	ldr	r3, [pc, #260]	; (8009f88 <USBD_SetConfig+0x118>)
 8009e82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009e84:	4b40      	ldr	r3, [pc, #256]	; (8009f88 <USBD_SetConfig+0x118>)
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d904      	bls.n	8009e96 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f954 	bl	800a13c <USBD_CtlError>
 8009e94:	e075      	b.n	8009f82 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d002      	beq.n	8009ea6 <USBD_SetConfig+0x36>
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	d023      	beq.n	8009eec <USBD_SetConfig+0x7c>
 8009ea4:	e062      	b.n	8009f6c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009ea6:	4b38      	ldr	r3, [pc, #224]	; (8009f88 <USBD_SetConfig+0x118>)
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d01a      	beq.n	8009ee4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009eae:	4b36      	ldr	r3, [pc, #216]	; (8009f88 <USBD_SetConfig+0x118>)
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2203      	movs	r2, #3
 8009ebc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ec0:	4b31      	ldr	r3, [pc, #196]	; (8009f88 <USBD_SetConfig+0x118>)
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7ff f9f4 	bl	80092b4 <USBD_SetClassConfig>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d104      	bne.n	8009edc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009ed2:	6839      	ldr	r1, [r7, #0]
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f931 	bl	800a13c <USBD_CtlError>
            return;
 8009eda:	e052      	b.n	8009f82 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 f9f5 	bl	800a2cc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009ee2:	e04e      	b.n	8009f82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f9f1 	bl	800a2cc <USBD_CtlSendStatus>
        break;
 8009eea:	e04a      	b.n	8009f82 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009eec:	4b26      	ldr	r3, [pc, #152]	; (8009f88 <USBD_SetConfig+0x118>)
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d112      	bne.n	8009f1a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009efc:	4b22      	ldr	r3, [pc, #136]	; (8009f88 <USBD_SetConfig+0x118>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	461a      	mov	r2, r3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009f06:	4b20      	ldr	r3, [pc, #128]	; (8009f88 <USBD_SetConfig+0x118>)
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f7ff f9f0 	bl	80092f2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 f9da 	bl	800a2cc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f18:	e033      	b.n	8009f82 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009f1a:	4b1b      	ldr	r3, [pc, #108]	; (8009f88 <USBD_SetConfig+0x118>)
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d01d      	beq.n	8009f64 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	4619      	mov	r1, r3
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f7ff f9de 	bl	80092f2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009f36:	4b14      	ldr	r3, [pc, #80]	; (8009f88 <USBD_SetConfig+0x118>)
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f40:	4b11      	ldr	r3, [pc, #68]	; (8009f88 <USBD_SetConfig+0x118>)
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	4619      	mov	r1, r3
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7ff f9b4 	bl	80092b4 <USBD_SetClassConfig>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d104      	bne.n	8009f5c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f8f1 	bl	800a13c <USBD_CtlError>
            return;
 8009f5a:	e012      	b.n	8009f82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f9b5 	bl	800a2cc <USBD_CtlSendStatus>
        break;
 8009f62:	e00e      	b.n	8009f82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f9b1 	bl	800a2cc <USBD_CtlSendStatus>
        break;
 8009f6a:	e00a      	b.n	8009f82 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009f6c:	6839      	ldr	r1, [r7, #0]
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f8e4 	bl	800a13c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009f74:	4b04      	ldr	r3, [pc, #16]	; (8009f88 <USBD_SetConfig+0x118>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f7ff f9b9 	bl	80092f2 <USBD_ClrClassConfig>
        break;
 8009f80:	bf00      	nop
    }
  }
}
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	200001dc 	.word	0x200001dc

08009f8c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	88db      	ldrh	r3, [r3, #6]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d004      	beq.n	8009fa8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f8cb 	bl	800a13c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009fa6:	e021      	b.n	8009fec <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	db17      	blt.n	8009fe2 <USBD_GetConfig+0x56>
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	dd02      	ble.n	8009fbc <USBD_GetConfig+0x30>
 8009fb6:	2b03      	cmp	r3, #3
 8009fb8:	d00b      	beq.n	8009fd2 <USBD_GetConfig+0x46>
 8009fba:	e012      	b.n	8009fe2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f920 	bl	800a210 <USBD_CtlSendData>
        break;
 8009fd0:	e00c      	b.n	8009fec <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f918 	bl	800a210 <USBD_CtlSendData>
        break;
 8009fe0:	e004      	b.n	8009fec <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f8a9 	bl	800a13c <USBD_CtlError>
        break;
 8009fea:	bf00      	nop
}
 8009fec:	bf00      	nop
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a004:	3b01      	subs	r3, #1
 800a006:	2b02      	cmp	r3, #2
 800a008:	d81e      	bhi.n	800a048 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	88db      	ldrh	r3, [r3, #6]
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d004      	beq.n	800a01c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a012:	6839      	ldr	r1, [r7, #0]
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 f891 	bl	800a13c <USBD_CtlError>
        break;
 800a01a:	e01a      	b.n	800a052 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d005      	beq.n	800a038 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	f043 0202 	orr.w	r2, r3, #2
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	330c      	adds	r3, #12
 800a03c:	2202      	movs	r2, #2
 800a03e:	4619      	mov	r1, r3
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 f8e5 	bl	800a210 <USBD_CtlSendData>
      break;
 800a046:	e004      	b.n	800a052 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f876 	bl	800a13c <USBD_CtlError>
      break;
 800a050:	bf00      	nop
  }
}
 800a052:	bf00      	nop
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b082      	sub	sp, #8
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	885b      	ldrh	r3, [r3, #2]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d106      	bne.n	800a07a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 f929 	bl	800a2cc <USBD_CtlSendStatus>
  }
}
 800a07a:	bf00      	nop
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b082      	sub	sp, #8
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a092:	3b01      	subs	r3, #1
 800a094:	2b02      	cmp	r3, #2
 800a096:	d80b      	bhi.n	800a0b0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	885b      	ldrh	r3, [r3, #2]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d10c      	bne.n	800a0ba <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f90f 	bl	800a2cc <USBD_CtlSendStatus>
      }
      break;
 800a0ae:	e004      	b.n	800a0ba <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a0b0:	6839      	ldr	r1, [r7, #0]
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f842 	bl	800a13c <USBD_CtlError>
      break;
 800a0b8:	e000      	b.n	800a0bc <USBD_ClrFeature+0x3a>
      break;
 800a0ba:	bf00      	nop
  }
}
 800a0bc:	bf00      	nop
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	781a      	ldrb	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	785a      	ldrb	r2, [r3, #1]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	3302      	adds	r3, #2
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	b29a      	uxth	r2, r3
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	3303      	adds	r3, #3
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	021b      	lsls	r3, r3, #8
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	4413      	add	r3, r2
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	b29a      	uxth	r2, r3
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	3305      	adds	r3, #5
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	b29b      	uxth	r3, r3
 800a10a:	021b      	lsls	r3, r3, #8
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	4413      	add	r3, r2
 800a110:	b29a      	uxth	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	3306      	adds	r3, #6
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	3307      	adds	r3, #7
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	b29b      	uxth	r3, r3
 800a126:	021b      	lsls	r3, r3, #8
 800a128:	b29b      	uxth	r3, r3
 800a12a:	4413      	add	r3, r2
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	80da      	strh	r2, [r3, #6]

}
 800a132:	bf00      	nop
 800a134:	370c      	adds	r7, #12
 800a136:	46bd      	mov	sp, r7
 800a138:	bc80      	pop	{r7}
 800a13a:	4770      	bx	lr

0800a13c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a146:	2180      	movs	r1, #128	; 0x80
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 fc2d 	bl	800a9a8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a14e:	2100      	movs	r1, #0
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fc29 	bl	800a9a8 <USBD_LL_StallEP>
}
 800a156:	bf00      	nop
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b086      	sub	sp, #24
 800a162:	af00      	add	r7, sp, #0
 800a164:	60f8      	str	r0, [r7, #12]
 800a166:	60b9      	str	r1, [r7, #8]
 800a168:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a16a:	2300      	movs	r3, #0
 800a16c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d032      	beq.n	800a1da <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 f834 	bl	800a1e2 <USBD_GetLen>
 800a17a:	4603      	mov	r3, r0
 800a17c:	3301      	adds	r3, #1
 800a17e:	b29b      	uxth	r3, r3
 800a180:	005b      	lsls	r3, r3, #1
 800a182:	b29a      	uxth	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a188:	7dfb      	ldrb	r3, [r7, #23]
 800a18a:	1c5a      	adds	r2, r3, #1
 800a18c:	75fa      	strb	r2, [r7, #23]
 800a18e:	461a      	mov	r2, r3
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	4413      	add	r3, r2
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	7812      	ldrb	r2, [r2, #0]
 800a198:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
 800a19c:	1c5a      	adds	r2, r3, #1
 800a19e:	75fa      	strb	r2, [r7, #23]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	2203      	movs	r2, #3
 800a1a8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a1aa:	e012      	b.n	800a1d2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	1c5a      	adds	r2, r3, #1
 800a1b0:	60fa      	str	r2, [r7, #12]
 800a1b2:	7dfa      	ldrb	r2, [r7, #23]
 800a1b4:	1c51      	adds	r1, r2, #1
 800a1b6:	75f9      	strb	r1, [r7, #23]
 800a1b8:	4611      	mov	r1, r2
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	440a      	add	r2, r1
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a1c2:	7dfb      	ldrb	r3, [r7, #23]
 800a1c4:	1c5a      	adds	r2, r3, #1
 800a1c6:	75fa      	strb	r2, [r7, #23]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1e8      	bne.n	800a1ac <USBD_GetString+0x4e>
    }
  }
}
 800a1da:	bf00      	nop
 800a1dc:	3718      	adds	r7, #24
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b085      	sub	sp, #20
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a1ee:	e005      	b.n	800a1fc <USBD_GetLen+0x1a>
  {
    len++;
 800a1f0:	7bfb      	ldrb	r3, [r7, #15]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1f5      	bne.n	800a1f0 <USBD_GetLen+0xe>
  }

  return len;
 800a204:	7bfb      	ldrb	r3, [r7, #15]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3714      	adds	r7, #20
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bc80      	pop	{r7}
 800a20e:	4770      	bx	lr

0800a210 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	4613      	mov	r3, r2
 800a21c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2202      	movs	r2, #2
 800a222:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a226:	88fa      	ldrh	r2, [r7, #6]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a22c:	88fa      	ldrh	r2, [r7, #6]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a232:	88fb      	ldrh	r3, [r7, #6]
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	2100      	movs	r1, #0
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f000 fc3e 	bl	800aaba <USBD_LL_Transmit>

  return USBD_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	4613      	mov	r3, r2
 800a254:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a256:	88fb      	ldrh	r3, [r7, #6]
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	2100      	movs	r1, #0
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f000 fc2c 	bl	800aaba <USBD_LL_Transmit>

  return USBD_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	4613      	mov	r3, r2
 800a278:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2203      	movs	r2, #3
 800a27e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a282:	88fa      	ldrh	r2, [r7, #6]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a28a:	88fa      	ldrh	r2, [r7, #6]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a292:	88fb      	ldrh	r3, [r7, #6]
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	2100      	movs	r1, #0
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f000 fc31 	bl	800ab00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a29e:	2300      	movs	r3, #0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2b6:	88fb      	ldrh	r3, [r7, #6]
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f000 fc1f 	bl	800ab00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2204      	movs	r2, #4
 800a2d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a2dc:	2300      	movs	r3, #0
 800a2de:	2200      	movs	r2, #0
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 fbe9 	bl	800aaba <USBD_LL_Transmit>

  return USBD_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b082      	sub	sp, #8
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2205      	movs	r2, #5
 800a2fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a302:	2300      	movs	r3, #0
 800a304:	2200      	movs	r2, #0
 800a306:	2100      	movs	r1, #0
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 fbf9 	bl	800ab00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a31c:	2200      	movs	r2, #0
 800a31e:	4912      	ldr	r1, [pc, #72]	; (800a368 <MX_USB_DEVICE_Init+0x50>)
 800a320:	4812      	ldr	r0, [pc, #72]	; (800a36c <MX_USB_DEVICE_Init+0x54>)
 800a322:	f7fe ff6d 	bl	8009200 <USBD_Init>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d001      	beq.n	800a330 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a32c:	f7f7 f8ce 	bl	80014cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a330:	490f      	ldr	r1, [pc, #60]	; (800a370 <MX_USB_DEVICE_Init+0x58>)
 800a332:	480e      	ldr	r0, [pc, #56]	; (800a36c <MX_USB_DEVICE_Init+0x54>)
 800a334:	f7fe ff8f 	bl	8009256 <USBD_RegisterClass>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d001      	beq.n	800a342 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a33e:	f7f7 f8c5 	bl	80014cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a342:	490c      	ldr	r1, [pc, #48]	; (800a374 <MX_USB_DEVICE_Init+0x5c>)
 800a344:	4809      	ldr	r0, [pc, #36]	; (800a36c <MX_USB_DEVICE_Init+0x54>)
 800a346:	f7fe feef 	bl	8009128 <USBD_CDC_RegisterInterface>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d001      	beq.n	800a354 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a350:	f7f7 f8bc 	bl	80014cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a354:	4805      	ldr	r0, [pc, #20]	; (800a36c <MX_USB_DEVICE_Init+0x54>)
 800a356:	f7fe ff97 	bl	8009288 <USBD_Start>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d001      	beq.n	800a364 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a360:	f7f7 f8b4 	bl	80014cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a364:	bf00      	nop
 800a366:	bd80      	pop	{r7, pc}
 800a368:	20000144 	.word	0x20000144
 800a36c:	2000063c 	.word	0x2000063c
 800a370:	20000030 	.word	0x20000030
 800a374:	20000134 	.word	0x20000134

0800a378 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a37c:	2200      	movs	r2, #0
 800a37e:	4905      	ldr	r1, [pc, #20]	; (800a394 <CDC_Init_FS+0x1c>)
 800a380:	4805      	ldr	r0, [pc, #20]	; (800a398 <CDC_Init_FS+0x20>)
 800a382:	f7fe fee7 	bl	8009154 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a386:	4905      	ldr	r1, [pc, #20]	; (800a39c <CDC_Init_FS+0x24>)
 800a388:	4803      	ldr	r0, [pc, #12]	; (800a398 <CDC_Init_FS+0x20>)
 800a38a:	f7fe fefc 	bl	8009186 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a38e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a390:	4618      	mov	r0, r3
 800a392:	bd80      	pop	{r7, pc}
 800a394:	20000ce8 	.word	0x20000ce8
 800a398:	2000063c 	.word	0x2000063c
 800a39c:	20000900 	.word	0x20000900

0800a3a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a3a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bc80      	pop	{r7}
 800a3ac:	4770      	bx	lr
	...

0800a3b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	6039      	str	r1, [r7, #0]
 800a3ba:	71fb      	strb	r3, [r7, #7]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a3c0:	79fb      	ldrb	r3, [r7, #7]
 800a3c2:	2b23      	cmp	r3, #35	; 0x23
 800a3c4:	d84a      	bhi.n	800a45c <CDC_Control_FS+0xac>
 800a3c6:	a201      	add	r2, pc, #4	; (adr r2, 800a3cc <CDC_Control_FS+0x1c>)
 800a3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3cc:	0800a45d 	.word	0x0800a45d
 800a3d0:	0800a45d 	.word	0x0800a45d
 800a3d4:	0800a45d 	.word	0x0800a45d
 800a3d8:	0800a45d 	.word	0x0800a45d
 800a3dc:	0800a45d 	.word	0x0800a45d
 800a3e0:	0800a45d 	.word	0x0800a45d
 800a3e4:	0800a45d 	.word	0x0800a45d
 800a3e8:	0800a45d 	.word	0x0800a45d
 800a3ec:	0800a45d 	.word	0x0800a45d
 800a3f0:	0800a45d 	.word	0x0800a45d
 800a3f4:	0800a45d 	.word	0x0800a45d
 800a3f8:	0800a45d 	.word	0x0800a45d
 800a3fc:	0800a45d 	.word	0x0800a45d
 800a400:	0800a45d 	.word	0x0800a45d
 800a404:	0800a45d 	.word	0x0800a45d
 800a408:	0800a45d 	.word	0x0800a45d
 800a40c:	0800a45d 	.word	0x0800a45d
 800a410:	0800a45d 	.word	0x0800a45d
 800a414:	0800a45d 	.word	0x0800a45d
 800a418:	0800a45d 	.word	0x0800a45d
 800a41c:	0800a45d 	.word	0x0800a45d
 800a420:	0800a45d 	.word	0x0800a45d
 800a424:	0800a45d 	.word	0x0800a45d
 800a428:	0800a45d 	.word	0x0800a45d
 800a42c:	0800a45d 	.word	0x0800a45d
 800a430:	0800a45d 	.word	0x0800a45d
 800a434:	0800a45d 	.word	0x0800a45d
 800a438:	0800a45d 	.word	0x0800a45d
 800a43c:	0800a45d 	.word	0x0800a45d
 800a440:	0800a45d 	.word	0x0800a45d
 800a444:	0800a45d 	.word	0x0800a45d
 800a448:	0800a45d 	.word	0x0800a45d
 800a44c:	0800a45d 	.word	0x0800a45d
 800a450:	0800a45d 	.word	0x0800a45d
 800a454:	0800a45d 	.word	0x0800a45d
 800a458:	0800a45d 	.word	0x0800a45d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a45c:	bf00      	nop
  }

  return (USBD_OK);
 800a45e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a460:	4618      	mov	r0, r3
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	bc80      	pop	{r7}
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop

0800a46c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a476:	6879      	ldr	r1, [r7, #4]
 800a478:	4805      	ldr	r0, [pc, #20]	; (800a490 <CDC_Receive_FS+0x24>)
 800a47a:	f7fe fe84 	bl	8009186 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a47e:	4804      	ldr	r0, [pc, #16]	; (800a490 <CDC_Receive_FS+0x24>)
 800a480:	f7fe fe94 	bl	80091ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a484:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a486:	4618      	mov	r0, r3
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	2000063c 	.word	0x2000063c

0800a494 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	4603      	mov	r3, r0
 800a49c:	6039      	str	r1, [r7, #0]
 800a49e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	2212      	movs	r2, #18
 800a4a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a4a6:	4b03      	ldr	r3, [pc, #12]	; (800a4b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bc80      	pop	{r7}
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	20000160 	.word	0x20000160

0800a4b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	4603      	mov	r3, r0
 800a4c0:	6039      	str	r1, [r7, #0]
 800a4c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	2204      	movs	r2, #4
 800a4c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a4ca:	4b03      	ldr	r3, [pc, #12]	; (800a4d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bc80      	pop	{r7}
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	20000174 	.word	0x20000174

0800a4dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	6039      	str	r1, [r7, #0]
 800a4e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4e8:	79fb      	ldrb	r3, [r7, #7]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d105      	bne.n	800a4fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	4907      	ldr	r1, [pc, #28]	; (800a510 <USBD_FS_ProductStrDescriptor+0x34>)
 800a4f2:	4808      	ldr	r0, [pc, #32]	; (800a514 <USBD_FS_ProductStrDescriptor+0x38>)
 800a4f4:	f7ff fe33 	bl	800a15e <USBD_GetString>
 800a4f8:	e004      	b.n	800a504 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	4904      	ldr	r1, [pc, #16]	; (800a510 <USBD_FS_ProductStrDescriptor+0x34>)
 800a4fe:	4805      	ldr	r0, [pc, #20]	; (800a514 <USBD_FS_ProductStrDescriptor+0x38>)
 800a500:	f7ff fe2d 	bl	800a15e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a504:	4b02      	ldr	r3, [pc, #8]	; (800a510 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a506:	4618      	mov	r0, r3
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	200010d0 	.word	0x200010d0
 800a514:	0800ac90 	.word	0x0800ac90

0800a518 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	4603      	mov	r3, r0
 800a520:	6039      	str	r1, [r7, #0]
 800a522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a524:	683a      	ldr	r2, [r7, #0]
 800a526:	4904      	ldr	r1, [pc, #16]	; (800a538 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a528:	4804      	ldr	r0, [pc, #16]	; (800a53c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a52a:	f7ff fe18 	bl	800a15e <USBD_GetString>
  return USBD_StrDesc;
 800a52e:	4b02      	ldr	r3, [pc, #8]	; (800a538 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a530:	4618      	mov	r0, r3
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	200010d0 	.word	0x200010d0
 800a53c:	0800aca8 	.word	0x0800aca8

0800a540 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	4603      	mov	r3, r0
 800a548:	6039      	str	r1, [r7, #0]
 800a54a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	221a      	movs	r2, #26
 800a550:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a552:	f000 f843 	bl	800a5dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a556:	4b02      	ldr	r3, [pc, #8]	; (800a560 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	20000178 	.word	0x20000178

0800a564 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	4603      	mov	r3, r0
 800a56c:	6039      	str	r1, [r7, #0]
 800a56e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a570:	79fb      	ldrb	r3, [r7, #7]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d105      	bne.n	800a582 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a576:	683a      	ldr	r2, [r7, #0]
 800a578:	4907      	ldr	r1, [pc, #28]	; (800a598 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a57a:	4808      	ldr	r0, [pc, #32]	; (800a59c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a57c:	f7ff fdef 	bl	800a15e <USBD_GetString>
 800a580:	e004      	b.n	800a58c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	4904      	ldr	r1, [pc, #16]	; (800a598 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a586:	4805      	ldr	r0, [pc, #20]	; (800a59c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a588:	f7ff fde9 	bl	800a15e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a58c:	4b02      	ldr	r3, [pc, #8]	; (800a598 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	200010d0 	.word	0x200010d0
 800a59c:	0800acbc 	.word	0x0800acbc

0800a5a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	6039      	str	r1, [r7, #0]
 800a5aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5ac:	79fb      	ldrb	r3, [r7, #7]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d105      	bne.n	800a5be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5b2:	683a      	ldr	r2, [r7, #0]
 800a5b4:	4907      	ldr	r1, [pc, #28]	; (800a5d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5b6:	4808      	ldr	r0, [pc, #32]	; (800a5d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5b8:	f7ff fdd1 	bl	800a15e <USBD_GetString>
 800a5bc:	e004      	b.n	800a5c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	4904      	ldr	r1, [pc, #16]	; (800a5d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5c2:	4805      	ldr	r0, [pc, #20]	; (800a5d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5c4:	f7ff fdcb 	bl	800a15e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5c8:	4b02      	ldr	r3, [pc, #8]	; (800a5d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	200010d0 	.word	0x200010d0
 800a5d8:	0800acc8 	.word	0x0800acc8

0800a5dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a5e2:	4b0f      	ldr	r3, [pc, #60]	; (800a620 <Get_SerialNum+0x44>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a5e8:	4b0e      	ldr	r3, [pc, #56]	; (800a624 <Get_SerialNum+0x48>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a5ee:	4b0e      	ldr	r3, [pc, #56]	; (800a628 <Get_SerialNum+0x4c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d009      	beq.n	800a616 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a602:	2208      	movs	r2, #8
 800a604:	4909      	ldr	r1, [pc, #36]	; (800a62c <Get_SerialNum+0x50>)
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f000 f814 	bl	800a634 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a60c:	2204      	movs	r2, #4
 800a60e:	4908      	ldr	r1, [pc, #32]	; (800a630 <Get_SerialNum+0x54>)
 800a610:	68b8      	ldr	r0, [r7, #8]
 800a612:	f000 f80f 	bl	800a634 <IntToUnicode>
  }
}
 800a616:	bf00      	nop
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	1ffff7e8 	.word	0x1ffff7e8
 800a624:	1ffff7ec 	.word	0x1ffff7ec
 800a628:	1ffff7f0 	.word	0x1ffff7f0
 800a62c:	2000017a 	.word	0x2000017a
 800a630:	2000018a 	.word	0x2000018a

0800a634 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a634:	b480      	push	{r7}
 800a636:	b087      	sub	sp, #28
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	4613      	mov	r3, r2
 800a640:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a642:	2300      	movs	r3, #0
 800a644:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a646:	2300      	movs	r3, #0
 800a648:	75fb      	strb	r3, [r7, #23]
 800a64a:	e027      	b.n	800a69c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	0f1b      	lsrs	r3, r3, #28
 800a650:	2b09      	cmp	r3, #9
 800a652:	d80b      	bhi.n	800a66c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	0f1b      	lsrs	r3, r3, #28
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	7dfb      	ldrb	r3, [r7, #23]
 800a65c:	005b      	lsls	r3, r3, #1
 800a65e:	4619      	mov	r1, r3
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	440b      	add	r3, r1
 800a664:	3230      	adds	r2, #48	; 0x30
 800a666:	b2d2      	uxtb	r2, r2
 800a668:	701a      	strb	r2, [r3, #0]
 800a66a:	e00a      	b.n	800a682 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	0f1b      	lsrs	r3, r3, #28
 800a670:	b2da      	uxtb	r2, r3
 800a672:	7dfb      	ldrb	r3, [r7, #23]
 800a674:	005b      	lsls	r3, r3, #1
 800a676:	4619      	mov	r1, r3
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	440b      	add	r3, r1
 800a67c:	3237      	adds	r2, #55	; 0x37
 800a67e:	b2d2      	uxtb	r2, r2
 800a680:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	011b      	lsls	r3, r3, #4
 800a686:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a688:	7dfb      	ldrb	r3, [r7, #23]
 800a68a:	005b      	lsls	r3, r3, #1
 800a68c:	3301      	adds	r3, #1
 800a68e:	68ba      	ldr	r2, [r7, #8]
 800a690:	4413      	add	r3, r2
 800a692:	2200      	movs	r2, #0
 800a694:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a696:	7dfb      	ldrb	r3, [r7, #23]
 800a698:	3301      	adds	r3, #1
 800a69a:	75fb      	strb	r3, [r7, #23]
 800a69c:	7dfa      	ldrb	r2, [r7, #23]
 800a69e:	79fb      	ldrb	r3, [r7, #7]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d3d3      	bcc.n	800a64c <IntToUnicode+0x18>
  }
}
 800a6a4:	bf00      	nop
 800a6a6:	371c      	adds	r7, #28
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bc80      	pop	{r7}
 800a6ac:	4770      	bx	lr
	...

0800a6b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a0d      	ldr	r2, [pc, #52]	; (800a6f4 <HAL_PCD_MspInit+0x44>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d113      	bne.n	800a6ea <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a6c2:	4b0d      	ldr	r3, [pc, #52]	; (800a6f8 <HAL_PCD_MspInit+0x48>)
 800a6c4:	69db      	ldr	r3, [r3, #28]
 800a6c6:	4a0c      	ldr	r2, [pc, #48]	; (800a6f8 <HAL_PCD_MspInit+0x48>)
 800a6c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a6cc:	61d3      	str	r3, [r2, #28]
 800a6ce:	4b0a      	ldr	r3, [pc, #40]	; (800a6f8 <HAL_PCD_MspInit+0x48>)
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6d6:	60fb      	str	r3, [r7, #12]
 800a6d8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a6da:	2200      	movs	r2, #0
 800a6dc:	2100      	movs	r1, #0
 800a6de:	2014      	movs	r0, #20
 800a6e0:	f7f7 fdbf 	bl	8002262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a6e4:	2014      	movs	r0, #20
 800a6e6:	f7f7 fdd8 	bl	800229a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a6ea:	bf00      	nop
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	40005c00 	.word	0x40005c00
 800a6f8:	40021000 	.word	0x40021000

0800a6fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a710:	4619      	mov	r1, r3
 800a712:	4610      	mov	r0, r2
 800a714:	f7fe fe00 	bl	8009318 <USBD_LL_SetupStage>
}
 800a718:	bf00      	nop
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	460b      	mov	r3, r1
 800a72a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a732:	78fa      	ldrb	r2, [r7, #3]
 800a734:	6879      	ldr	r1, [r7, #4]
 800a736:	4613      	mov	r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4413      	add	r3, r2
 800a73c:	00db      	lsls	r3, r3, #3
 800a73e:	440b      	add	r3, r1
 800a740:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	78fb      	ldrb	r3, [r7, #3]
 800a748:	4619      	mov	r1, r3
 800a74a:	f7fe fe30 	bl	80093ae <USBD_LL_DataOutStage>
}
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b082      	sub	sp, #8
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	460b      	mov	r3, r1
 800a760:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a768:	78fa      	ldrb	r2, [r7, #3]
 800a76a:	6879      	ldr	r1, [r7, #4]
 800a76c:	4613      	mov	r3, r2
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	4413      	add	r3, r2
 800a772:	00db      	lsls	r3, r3, #3
 800a774:	440b      	add	r3, r1
 800a776:	333c      	adds	r3, #60	; 0x3c
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	78fb      	ldrb	r3, [r7, #3]
 800a77c:	4619      	mov	r1, r3
 800a77e:	f7fe fe87 	bl	8009490 <USBD_LL_DataInStage>
}
 800a782:	bf00      	nop
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b082      	sub	sp, #8
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a798:	4618      	mov	r0, r3
 800a79a:	f7fe ff97 	bl	80096cc <USBD_LL_SOF>
}
 800a79e:	bf00      	nop
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b084      	sub	sp, #16
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	2b02      	cmp	r3, #2
 800a7b8:	d001      	beq.n	800a7be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a7ba:	f7f6 fe87 	bl	80014cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a7c4:	7bfa      	ldrb	r2, [r7, #15]
 800a7c6:	4611      	mov	r1, r2
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7fe ff47 	bl	800965c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7fe ff00 	bl	80095da <USBD_LL_Reset>
}
 800a7da:	bf00      	nop
 800a7dc:	3710      	adds	r7, #16
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
	...

0800a7e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7fe ff41 	bl	800967a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	699b      	ldr	r3, [r3, #24]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d005      	beq.n	800a80c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a800:	4b04      	ldr	r3, [pc, #16]	; (800a814 <HAL_PCD_SuspendCallback+0x30>)
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	4a03      	ldr	r2, [pc, #12]	; (800a814 <HAL_PCD_SuspendCallback+0x30>)
 800a806:	f043 0306 	orr.w	r3, r3, #6
 800a80a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a80c:	bf00      	nop
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	e000ed00 	.word	0xe000ed00

0800a818 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a826:	4618      	mov	r0, r3
 800a828:	f7fe ff3b 	bl	80096a2 <USBD_LL_Resume>
}
 800a82c:	bf00      	nop
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a83c:	4a28      	ldr	r2, [pc, #160]	; (800a8e0 <USBD_LL_Init+0xac>)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a26      	ldr	r2, [pc, #152]	; (800a8e0 <USBD_LL_Init+0xac>)
 800a848:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a84c:	4b24      	ldr	r3, [pc, #144]	; (800a8e0 <USBD_LL_Init+0xac>)
 800a84e:	4a25      	ldr	r2, [pc, #148]	; (800a8e4 <USBD_LL_Init+0xb0>)
 800a850:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a852:	4b23      	ldr	r3, [pc, #140]	; (800a8e0 <USBD_LL_Init+0xac>)
 800a854:	2208      	movs	r2, #8
 800a856:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a858:	4b21      	ldr	r3, [pc, #132]	; (800a8e0 <USBD_LL_Init+0xac>)
 800a85a:	2202      	movs	r2, #2
 800a85c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a85e:	4b20      	ldr	r3, [pc, #128]	; (800a8e0 <USBD_LL_Init+0xac>)
 800a860:	2200      	movs	r2, #0
 800a862:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a864:	4b1e      	ldr	r3, [pc, #120]	; (800a8e0 <USBD_LL_Init+0xac>)
 800a866:	2200      	movs	r2, #0
 800a868:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a86a:	4b1d      	ldr	r3, [pc, #116]	; (800a8e0 <USBD_LL_Init+0xac>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a870:	481b      	ldr	r0, [pc, #108]	; (800a8e0 <USBD_LL_Init+0xac>)
 800a872:	f7f9 fd8a 	bl	800438a <HAL_PCD_Init>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d001      	beq.n	800a880 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a87c:	f7f6 fe26 	bl	80014cc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a886:	2318      	movs	r3, #24
 800a888:	2200      	movs	r2, #0
 800a88a:	2100      	movs	r1, #0
 800a88c:	f7fb f8be 	bl	8005a0c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a896:	2358      	movs	r3, #88	; 0x58
 800a898:	2200      	movs	r2, #0
 800a89a:	2180      	movs	r1, #128	; 0x80
 800a89c:	f7fb f8b6 	bl	8005a0c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8a6:	23c0      	movs	r3, #192	; 0xc0
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	2181      	movs	r1, #129	; 0x81
 800a8ac:	f7fb f8ae 	bl	8005a0c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	2101      	movs	r1, #1
 800a8be:	f7fb f8a5 	bl	8005a0c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	2182      	movs	r1, #130	; 0x82
 800a8d0:	f7fb f89c 	bl	8005a0c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	200012d0 	.word	0x200012d0
 800a8e4:	40005c00 	.word	0x40005c00

0800a8e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7f9 fe4e 	bl	80045a0 <HAL_PCD_Start>
 800a904:	4603      	mov	r3, r0
 800a906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a908:	7bfb      	ldrb	r3, [r7, #15]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 f94e 	bl	800abac <USBD_Get_USB_Status>
 800a910:	4603      	mov	r3, r0
 800a912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a914:	7bbb      	ldrb	r3, [r7, #14]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b084      	sub	sp, #16
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	4608      	mov	r0, r1
 800a928:	4611      	mov	r1, r2
 800a92a:	461a      	mov	r2, r3
 800a92c:	4603      	mov	r3, r0
 800a92e:	70fb      	strb	r3, [r7, #3]
 800a930:	460b      	mov	r3, r1
 800a932:	70bb      	strb	r3, [r7, #2]
 800a934:	4613      	mov	r3, r2
 800a936:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a93c:	2300      	movs	r3, #0
 800a93e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a946:	78bb      	ldrb	r3, [r7, #2]
 800a948:	883a      	ldrh	r2, [r7, #0]
 800a94a:	78f9      	ldrb	r1, [r7, #3]
 800a94c:	f7f9 ffc8 	bl	80048e0 <HAL_PCD_EP_Open>
 800a950:	4603      	mov	r3, r0
 800a952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a954:	7bfb      	ldrb	r3, [r7, #15]
 800a956:	4618      	mov	r0, r3
 800a958:	f000 f928 	bl	800abac <USBD_Get_USB_Status>
 800a95c:	4603      	mov	r3, r0
 800a95e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a960:	7bbb      	ldrb	r3, [r7, #14]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b084      	sub	sp, #16
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
 800a972:	460b      	mov	r3, r1
 800a974:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a976:	2300      	movs	r3, #0
 800a978:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a984:	78fa      	ldrb	r2, [r7, #3]
 800a986:	4611      	mov	r1, r2
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fa f80f 	bl	80049ac <HAL_PCD_EP_Close>
 800a98e:	4603      	mov	r3, r0
 800a990:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a992:	7bfb      	ldrb	r3, [r7, #15]
 800a994:	4618      	mov	r0, r3
 800a996:	f000 f909 	bl	800abac <USBD_Get_USB_Status>
 800a99a:	4603      	mov	r3, r0
 800a99c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a99e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9c2:	78fa      	ldrb	r2, [r7, #3]
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fa f8cf 	bl	8004b6a <HAL_PCD_EP_SetStall>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9d0:	7bfb      	ldrb	r3, [r7, #15]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 f8ea 	bl	800abac <USBD_Get_USB_Status>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b084      	sub	sp, #16
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa00:	78fa      	ldrb	r2, [r7, #3]
 800aa02:	4611      	mov	r1, r2
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7fa f910 	bl	8004c2a <HAL_PCD_EP_ClrStall>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa0e:	7bfb      	ldrb	r3, [r7, #15]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f000 f8cb 	bl	800abac <USBD_Get_USB_Status>
 800aa16:	4603      	mov	r3, r0
 800aa18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	da0c      	bge.n	800aa5a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa40:	78fb      	ldrb	r3, [r7, #3]
 800aa42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa46:	68f9      	ldr	r1, [r7, #12]
 800aa48:	1c5a      	adds	r2, r3, #1
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	4413      	add	r3, r2
 800aa50:	00db      	lsls	r3, r3, #3
 800aa52:	440b      	add	r3, r1
 800aa54:	3302      	adds	r3, #2
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	e00b      	b.n	800aa72 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa5a:	78fb      	ldrb	r3, [r7, #3]
 800aa5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa60:	68f9      	ldr	r1, [r7, #12]
 800aa62:	4613      	mov	r3, r2
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	4413      	add	r3, r2
 800aa68:	00db      	lsls	r3, r3, #3
 800aa6a:	440b      	add	r3, r1
 800aa6c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800aa70:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3714      	adds	r7, #20
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bc80      	pop	{r7}
 800aa7a:	4770      	bx	lr

0800aa7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa96:	78fa      	ldrb	r2, [r7, #3]
 800aa98:	4611      	mov	r1, r2
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7f9 fefb 	bl	8004896 <HAL_PCD_SetAddress>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaa4:	7bfb      	ldrb	r3, [r7, #15]
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f000 f880 	bl	800abac <USBD_Get_USB_Status>
 800aaac:	4603      	mov	r3, r0
 800aaae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b086      	sub	sp, #24
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	60f8      	str	r0, [r7, #12]
 800aac2:	607a      	str	r2, [r7, #4]
 800aac4:	461a      	mov	r2, r3
 800aac6:	460b      	mov	r3, r1
 800aac8:	72fb      	strb	r3, [r7, #11]
 800aaca:	4613      	mov	r3, r2
 800aacc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aadc:	893b      	ldrh	r3, [r7, #8]
 800aade:	7af9      	ldrb	r1, [r7, #11]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	f7f9 ffff 	bl	8004ae4 <HAL_PCD_EP_Transmit>
 800aae6:	4603      	mov	r3, r0
 800aae8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaea:	7dfb      	ldrb	r3, [r7, #23]
 800aaec:	4618      	mov	r0, r3
 800aaee:	f000 f85d 	bl	800abac <USBD_Get_USB_Status>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aaf6:	7dbb      	ldrb	r3, [r7, #22]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3718      	adds	r7, #24
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	607a      	str	r2, [r7, #4]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	72fb      	strb	r3, [r7, #11]
 800ab10:	4613      	mov	r3, r2
 800ab12:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab14:	2300      	movs	r3, #0
 800ab16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab22:	893b      	ldrh	r3, [r7, #8]
 800ab24:	7af9      	ldrb	r1, [r7, #11]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	f7f9 ff88 	bl	8004a3c <HAL_PCD_EP_Receive>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab30:	7dfb      	ldrb	r3, [r7, #23]
 800ab32:	4618      	mov	r0, r3
 800ab34:	f000 f83a 	bl	800abac <USBD_Get_USB_Status>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab3c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3718      	adds	r7, #24
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b082      	sub	sp, #8
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
 800ab4e:	460b      	mov	r3, r1
 800ab50:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab58:	78fa      	ldrb	r2, [r7, #3]
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7f9 ffaa 	bl	8004ab6 <HAL_PCD_EP_GetRxCount>
 800ab62:	4603      	mov	r3, r0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab74:	4b02      	ldr	r3, [pc, #8]	; (800ab80 <USBD_static_malloc+0x14>)
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	370c      	adds	r7, #12
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bc80      	pop	{r7}
 800ab7e:	4770      	bx	lr
 800ab80:	200001e0 	.word	0x200001e0

0800ab84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]

}
 800ab8c:	bf00      	nop
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bc80      	pop	{r7}
 800ab94:	4770      	bx	lr

0800ab96 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab96:	b480      	push	{r7}
 800ab98:	b083      	sub	sp, #12
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	460b      	mov	r3, r1
 800aba0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800aba2:	bf00      	nop
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bc80      	pop	{r7}
 800abaa:	4770      	bx	lr

0800abac <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	4603      	mov	r3, r0
 800abb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb6:	2300      	movs	r3, #0
 800abb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abba:	79fb      	ldrb	r3, [r7, #7]
 800abbc:	2b03      	cmp	r3, #3
 800abbe:	d817      	bhi.n	800abf0 <USBD_Get_USB_Status+0x44>
 800abc0:	a201      	add	r2, pc, #4	; (adr r2, 800abc8 <USBD_Get_USB_Status+0x1c>)
 800abc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc6:	bf00      	nop
 800abc8:	0800abd9 	.word	0x0800abd9
 800abcc:	0800abdf 	.word	0x0800abdf
 800abd0:	0800abe5 	.word	0x0800abe5
 800abd4:	0800abeb 	.word	0x0800abeb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800abd8:	2300      	movs	r3, #0
 800abda:	73fb      	strb	r3, [r7, #15]
    break;
 800abdc:	e00b      	b.n	800abf6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800abde:	2302      	movs	r3, #2
 800abe0:	73fb      	strb	r3, [r7, #15]
    break;
 800abe2:	e008      	b.n	800abf6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800abe4:	2301      	movs	r3, #1
 800abe6:	73fb      	strb	r3, [r7, #15]
    break;
 800abe8:	e005      	b.n	800abf6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800abea:	2302      	movs	r3, #2
 800abec:	73fb      	strb	r3, [r7, #15]
    break;
 800abee:	e002      	b.n	800abf6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800abf0:	2302      	movs	r3, #2
 800abf2:	73fb      	strb	r3, [r7, #15]
    break;
 800abf4:	bf00      	nop
  }
  return usb_status;
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3714      	adds	r7, #20
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bc80      	pop	{r7}
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop

0800ac04 <__libc_init_array>:
 800ac04:	b570      	push	{r4, r5, r6, lr}
 800ac06:	2500      	movs	r5, #0
 800ac08:	4e0c      	ldr	r6, [pc, #48]	; (800ac3c <__libc_init_array+0x38>)
 800ac0a:	4c0d      	ldr	r4, [pc, #52]	; (800ac40 <__libc_init_array+0x3c>)
 800ac0c:	1ba4      	subs	r4, r4, r6
 800ac0e:	10a4      	asrs	r4, r4, #2
 800ac10:	42a5      	cmp	r5, r4
 800ac12:	d109      	bne.n	800ac28 <__libc_init_array+0x24>
 800ac14:	f000 f822 	bl	800ac5c <_init>
 800ac18:	2500      	movs	r5, #0
 800ac1a:	4e0a      	ldr	r6, [pc, #40]	; (800ac44 <__libc_init_array+0x40>)
 800ac1c:	4c0a      	ldr	r4, [pc, #40]	; (800ac48 <__libc_init_array+0x44>)
 800ac1e:	1ba4      	subs	r4, r4, r6
 800ac20:	10a4      	asrs	r4, r4, #2
 800ac22:	42a5      	cmp	r5, r4
 800ac24:	d105      	bne.n	800ac32 <__libc_init_array+0x2e>
 800ac26:	bd70      	pop	{r4, r5, r6, pc}
 800ac28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac2c:	4798      	blx	r3
 800ac2e:	3501      	adds	r5, #1
 800ac30:	e7ee      	b.n	800ac10 <__libc_init_array+0xc>
 800ac32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac36:	4798      	blx	r3
 800ac38:	3501      	adds	r5, #1
 800ac3a:	e7f2      	b.n	800ac22 <__libc_init_array+0x1e>
 800ac3c:	0800acf0 	.word	0x0800acf0
 800ac40:	0800acf0 	.word	0x0800acf0
 800ac44:	0800acf0 	.word	0x0800acf0
 800ac48:	0800acf4 	.word	0x0800acf4

0800ac4c <memset>:
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	4402      	add	r2, r0
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d100      	bne.n	800ac56 <memset+0xa>
 800ac54:	4770      	bx	lr
 800ac56:	f803 1b01 	strb.w	r1, [r3], #1
 800ac5a:	e7f9      	b.n	800ac50 <memset+0x4>

0800ac5c <_init>:
 800ac5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5e:	bf00      	nop
 800ac60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac62:	bc08      	pop	{r3}
 800ac64:	469e      	mov	lr, r3
 800ac66:	4770      	bx	lr

0800ac68 <_fini>:
 800ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6a:	bf00      	nop
 800ac6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6e:	bc08      	pop	{r3}
 800ac70:	469e      	mov	lr, r3
 800ac72:	4770      	bx	lr
