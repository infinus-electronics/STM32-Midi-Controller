
STM32 Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080088c8  080088c8  000188c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008944  08008944  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  08008944  08008944  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008944  08008944  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008944  08008944  00018944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008948  08008948  00018948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800894c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000134c  20000190  08008adc  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014dc  08008adc  000214dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aafc  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000348e  00000000  00000000  0003acb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001420  00000000  00000000  0003e148  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c0  00000000  00000000  0003f568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b52b  00000000  00000000  00040828  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012c9d  00000000  00000000  0005bd53  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094335  00000000  00000000  0006e9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00102d25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005438  00000000  00000000  00102da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000190 	.word	0x20000190
 8000128:	00000000 	.word	0x00000000
 800012c:	080088b0 	.word	0x080088b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000194 	.word	0x20000194
 8000148:	080088b0 	.word	0x080088b0

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <DWT_Delay_Init>:
	GPIOA->BRR = (1<<7);
}

/* DWT based delay */
uint32_t DWT_Delay_Init(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000198:	4b14      	ldr	r3, [pc, #80]	; (80001ec <DWT_Delay_Init+0x58>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	4a13      	ldr	r2, [pc, #76]	; (80001ec <DWT_Delay_Init+0x58>)
 800019e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80001a2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80001a4:	4b11      	ldr	r3, [pc, #68]	; (80001ec <DWT_Delay_Init+0x58>)
 80001a6:	68db      	ldr	r3, [r3, #12]
 80001a8:	4a10      	ldr	r2, [pc, #64]	; (80001ec <DWT_Delay_Init+0x58>)
 80001aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001ae:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80001b0:	4b0f      	ldr	r3, [pc, #60]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a0e      	ldr	r2, [pc, #56]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001b6:	f023 0301 	bic.w	r3, r3, #1
 80001ba:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80001bc:	4b0c      	ldr	r3, [pc, #48]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a0b      	ldr	r2, [pc, #44]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001c2:	f043 0301 	orr.w	r3, r3, #1
 80001c6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80001c8:	4b09      	ldr	r3, [pc, #36]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80001ce:	bf00      	nop
    __ASM volatile ("NOP");
 80001d0:	bf00      	nop
    __ASM volatile ("NOP");
 80001d2:	bf00      	nop
    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80001d4:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001d6:	685b      	ldr	r3, [r3, #4]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80001dc:	2300      	movs	r3, #0
 80001de:	e000      	b.n	80001e2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80001e0:	2301      	movs	r3, #1
    }
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000edf0 	.word	0xe000edf0
 80001f0:	e0001000 	.word	0xe0001000

080001f4 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80001fc:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <DWT_Delay_us+0x44>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000202:	f003 fe3b 	bl	8003e7c <HAL_RCC_GetHCLKFreq>
 8000206:	4602      	mov	r2, r0
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <DWT_Delay_us+0x48>)
 800020a:	fba3 2302 	umull	r2, r3, r3, r2
 800020e:	0c9b      	lsrs	r3, r3, #18
 8000210:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	68ba      	ldr	r2, [r7, #8]
 8000216:	fb02 f303 	mul.w	r3, r2, r3
 800021a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 800021c:	bf00      	nop
 800021e:	4b06      	ldr	r3, [pc, #24]	; (8000238 <DWT_Delay_us+0x44>)
 8000220:	685a      	ldr	r2, [r3, #4]
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	1ad2      	subs	r2, r2, r3
 8000226:	6879      	ldr	r1, [r7, #4]
 8000228:	68bb      	ldr	r3, [r7, #8]
 800022a:	1acb      	subs	r3, r1, r3
 800022c:	429a      	cmp	r2, r3
 800022e:	d3f6      	bcc.n	800021e <DWT_Delay_us+0x2a>
}
 8000230:	bf00      	nop
 8000232:	3710      	adds	r7, #16
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	e0001000 	.word	0xe0001000
 800023c:	431bde83 	.word	0x431bde83

08000240 <DWT_Delay_ms>:

__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <DWT_Delay_ms+0x40>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 800024e:	f003 fe15 	bl	8003e7c <HAL_RCC_GetHCLKFreq>
 8000252:	4602      	mov	r2, r0
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <DWT_Delay_ms+0x44>)
 8000256:	fba3 2302 	umull	r2, r3, r3, r2
 800025a:	099b      	lsrs	r3, r3, #6
 800025c:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	68ba      	ldr	r2, [r7, #8]
 8000262:	fb02 f303 	mul.w	r3, r2, r3
 8000266:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8000268:	bf00      	nop
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <DWT_Delay_ms+0x40>)
 800026c:	685a      	ldr	r2, [r3, #4]
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	1ad2      	subs	r2, r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	429a      	cmp	r2, r3
 8000276:	d3f8      	bcc.n	800026a <DWT_Delay_ms+0x2a>
}
 8000278:	bf00      	nop
 800027a:	3710      	adds	r7, #16
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	e0001000 	.word	0xe0001000
 8000284:	10624dd3 	.word	0x10624dd3

08000288 <MCP23017SetPin>:



/* MCP23017 Defines */

void MCP23017SetPin(uint8_t pin, bank b, uint8_t addr){
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	71fb      	strb	r3, [r7, #7]
 8000292:	460b      	mov	r3, r1
 8000294:	71bb      	strb	r3, [r7, #6]
 8000296:	4613      	mov	r3, r2
 8000298:	717b      	strb	r3, [r7, #5]

	while(blocked); //wait for clearance
 800029a:	bf00      	nop
 800029c:	4b46      	ldr	r3, [pc, #280]	; (80003b8 <MCP23017SetPin+0x130>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d1fa      	bne.n	800029c <MCP23017SetPin+0x14>
	GPIOA->BSRR = (1<<7);
 80002a6:	4b45      	ldr	r3, [pc, #276]	; (80003bc <MCP23017SetPin+0x134>)
 80002a8:	2280      	movs	r2, #128	; 0x80
 80002aa:	611a      	str	r2, [r3, #16]

	currentIOState[b] |= (1<<pin);
 80002ac:	79bb      	ldrb	r3, [r7, #6]
 80002ae:	4a44      	ldr	r2, [pc, #272]	; (80003c0 <MCP23017SetPin+0x138>)
 80002b0:	5cd3      	ldrb	r3, [r2, r3]
 80002b2:	b25a      	sxtb	r2, r3
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	2101      	movs	r1, #1
 80002b8:	fa01 f303 	lsl.w	r3, r1, r3
 80002bc:	b25b      	sxtb	r3, r3
 80002be:	4313      	orrs	r3, r2
 80002c0:	b25a      	sxtb	r2, r3
 80002c2:	79bb      	ldrb	r3, [r7, #6]
 80002c4:	b2d1      	uxtb	r1, r2
 80002c6:	4a3e      	ldr	r2, [pc, #248]	; (80003c0 <MCP23017SetPin+0x138>)
 80002c8:	54d1      	strb	r1, [r2, r3]
	//write out the new state
	//UPDATE: This messes up the BAM Driver because it causes the BAM to skip entire steps... its better just to pause TIM2
	//__disable_irq(); //the entire routine will be super duper unhappy unless this is in place


	TIM2->CR1 &= ~1; //disable BAM Driver
 80002ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002d4:	f023 0301 	bic.w	r3, r3, #1
 80002d8:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 80002da:	4b3a      	ldr	r3, [pc, #232]	; (80003c4 <MCP23017SetPin+0x13c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a39      	ldr	r2, [pc, #228]	; (80003c4 <MCP23017SetPin+0x13c>)
 80002e0:	f023 0301 	bic.w	r3, r3, #1
 80002e4:	6013      	str	r3, [r2, #0]
	I2C2->CR1 |= (1<<8); //send start condition
 80002e6:	4b38      	ldr	r3, [pc, #224]	; (80003c8 <MCP23017SetPin+0x140>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a37      	ldr	r2, [pc, #220]	; (80003c8 <MCP23017SetPin+0x140>)
 80002ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f0:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80002f2:	bf00      	nop
 80002f4:	4b34      	ldr	r3, [pc, #208]	; (80003c8 <MCP23017SetPin+0x140>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d0f9      	beq.n	80002f4 <MCP23017SetPin+0x6c>
	I2C2->DR = addr; //address the MCP23017
 8000300:	4a31      	ldr	r2, [pc, #196]	; (80003c8 <MCP23017SetPin+0x140>)
 8000302:	797b      	ldrb	r3, [r7, #5]
 8000304:	6113      	str	r3, [r2, #16]
	//__enable_irq(); didn't work here
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000306:	bf00      	nop
 8000308:	4b2f      	ldr	r3, [pc, #188]	; (80003c8 <MCP23017SetPin+0x140>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	f003 0302 	and.w	r3, r3, #2
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0f9      	beq.n	8000308 <MCP23017SetPin+0x80>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000314:	bf00      	nop
 8000316:	4b2c      	ldr	r3, [pc, #176]	; (80003c8 <MCP23017SetPin+0x140>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	f003 0304 	and.w	r3, r3, #4
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0f9      	beq.n	8000316 <MCP23017SetPin+0x8e>

	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000322:	bf00      	nop
 8000324:	4b28      	ldr	r3, [pc, #160]	; (80003c8 <MCP23017SetPin+0x140>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0f9      	beq.n	8000324 <MCP23017SetPin+0x9c>
	if(b==A){
 8000330:	79bb      	ldrb	r3, [r7, #6]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d103      	bne.n	800033e <MCP23017SetPin+0xb6>
		I2C2->DR = 0x14;
 8000336:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <MCP23017SetPin+0x140>)
 8000338:	2214      	movs	r2, #20
 800033a:	611a      	str	r2, [r3, #16]
 800033c:	e002      	b.n	8000344 <MCP23017SetPin+0xbc>
	}
	else{
		I2C2->DR = 0x15;
 800033e:	4b22      	ldr	r3, [pc, #136]	; (80003c8 <MCP23017SetPin+0x140>)
 8000340:	2215      	movs	r2, #21
 8000342:	611a      	str	r2, [r3, #16]
	}
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000344:	bf00      	nop
 8000346:	4b20      	ldr	r3, [pc, #128]	; (80003c8 <MCP23017SetPin+0x140>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800034e:	2b00      	cmp	r3, #0
 8000350:	d0f9      	beq.n	8000346 <MCP23017SetPin+0xbe>
	I2C2->DR = currentIOState[b]; //just pull everything low
 8000352:	79bb      	ldrb	r3, [r7, #6]
 8000354:	4a1a      	ldr	r2, [pc, #104]	; (80003c0 <MCP23017SetPin+0x138>)
 8000356:	5cd2      	ldrb	r2, [r2, r3]
 8000358:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <MCP23017SetPin+0x140>)
 800035a:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800035c:	bf00      	nop
 800035e:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <MCP23017SetPin+0x140>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0f9      	beq.n	800035e <MCP23017SetPin+0xd6>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure BTF is 1
 800036a:	bf00      	nop
 800036c:	4b16      	ldr	r3, [pc, #88]	; (80003c8 <MCP23017SetPin+0x140>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000374:	2b00      	cmp	r3, #0
 8000376:	d0f9      	beq.n	800036c <MCP23017SetPin+0xe4>
	I2C2->CR1 |= (1<<9); //send stop condition
 8000378:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <MCP23017SetPin+0x140>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a12      	ldr	r2, [pc, #72]	; (80003c8 <MCP23017SetPin+0x140>)
 800037e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000382:	6013      	str	r3, [r2, #0]

	while ((I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 8000384:	bf00      	nop
 8000386:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <MCP23017SetPin+0x140>)
 8000388:	699b      	ldr	r3, [r3, #24]
	TIM2->CR1 |= 1; //enable BAM Driver
 800038a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 800039a:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <MCP23017SetPin+0x13c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a09      	ldr	r2, [pc, #36]	; (80003c4 <MCP23017SetPin+0x13c>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6013      	str	r3, [r2, #0]
	//__enable_irq();
	GPIOA->BRR = (1<<7);
 80003a6:	4b05      	ldr	r3, [pc, #20]	; (80003bc <MCP23017SetPin+0x134>)
 80003a8:	2280      	movs	r2, #128	; 0x80
 80003aa:	615a      	str	r2, [r3, #20]

}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	200001ad 	.word	0x200001ad
 80003bc:	40010800 	.word	0x40010800
 80003c0:	200001cc 	.word	0x200001cc
 80003c4:	40000400 	.word	0x40000400
 80003c8:	40005800 	.word	0x40005800

080003cc <MCP23017ClearPin>:

void MCP23017ClearPin(uint8_t pin, bank b, uint8_t addr){
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
 80003d6:	460b      	mov	r3, r1
 80003d8:	71bb      	strb	r3, [r7, #6]
 80003da:	4613      	mov	r3, r2
 80003dc:	717b      	strb	r3, [r7, #5]

	while(blocked); //wait for clearance
 80003de:	bf00      	nop
 80003e0:	4b47      	ldr	r3, [pc, #284]	; (8000500 <MCP23017ClearPin+0x134>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d1fa      	bne.n	80003e0 <MCP23017ClearPin+0x14>
	GPIOA->BSRR = (1<<7);
 80003ea:	4b46      	ldr	r3, [pc, #280]	; (8000504 <MCP23017ClearPin+0x138>)
 80003ec:	2280      	movs	r2, #128	; 0x80
 80003ee:	611a      	str	r2, [r3, #16]

	currentIOState[b] &= ~(1<<pin);
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	4a45      	ldr	r2, [pc, #276]	; (8000508 <MCP23017ClearPin+0x13c>)
 80003f4:	5cd3      	ldrb	r3, [r2, r3]
 80003f6:	b25a      	sxtb	r2, r3
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	2101      	movs	r1, #1
 80003fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000400:	b25b      	sxtb	r3, r3
 8000402:	43db      	mvns	r3, r3
 8000404:	b25b      	sxtb	r3, r3
 8000406:	4013      	ands	r3, r2
 8000408:	b25a      	sxtb	r2, r3
 800040a:	79bb      	ldrb	r3, [r7, #6]
 800040c:	b2d1      	uxtb	r1, r2
 800040e:	4a3e      	ldr	r2, [pc, #248]	; (8000508 <MCP23017ClearPin+0x13c>)
 8000410:	54d1      	strb	r1, [r2, r3]
	//write out the new state
	//UPDATE: This messses up the BAM Driver... I think it'll be better just to stop TIM2
	//__disable_irq(); //the entire routine will be super duper unhappy unless this is in place


	TIM2->CR1 &= ~1; //disable BAM Driver
 8000412:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800041c:	f023 0301 	bic.w	r3, r3, #1
 8000420:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 8000422:	4b3a      	ldr	r3, [pc, #232]	; (800050c <MCP23017ClearPin+0x140>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a39      	ldr	r2, [pc, #228]	; (800050c <MCP23017ClearPin+0x140>)
 8000428:	f023 0301 	bic.w	r3, r3, #1
 800042c:	6013      	str	r3, [r2, #0]

	I2C2->CR1 |= (1<<8); //send start condition
 800042e:	4b38      	ldr	r3, [pc, #224]	; (8000510 <MCP23017ClearPin+0x144>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a37      	ldr	r2, [pc, #220]	; (8000510 <MCP23017ClearPin+0x144>)
 8000434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000438:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 800043a:	bf00      	nop
 800043c:	4b34      	ldr	r3, [pc, #208]	; (8000510 <MCP23017ClearPin+0x144>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	f003 0301 	and.w	r3, r3, #1
 8000444:	2b00      	cmp	r3, #0
 8000446:	d0f9      	beq.n	800043c <MCP23017ClearPin+0x70>
	I2C2->DR = addr; //address the MCP23017
 8000448:	4a31      	ldr	r2, [pc, #196]	; (8000510 <MCP23017ClearPin+0x144>)
 800044a:	797b      	ldrb	r3, [r7, #5]
 800044c:	6113      	str	r3, [r2, #16]
	//__enable_irq(); didn't work here
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 800044e:	bf00      	nop
 8000450:	4b2f      	ldr	r3, [pc, #188]	; (8000510 <MCP23017ClearPin+0x144>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	f003 0302 	and.w	r3, r3, #2
 8000458:	2b00      	cmp	r3, #0
 800045a:	d0f9      	beq.n	8000450 <MCP23017ClearPin+0x84>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 800045c:	bf00      	nop
 800045e:	4b2c      	ldr	r3, [pc, #176]	; (8000510 <MCP23017ClearPin+0x144>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f003 0304 	and.w	r3, r3, #4
 8000466:	2b00      	cmp	r3, #0
 8000468:	d0f9      	beq.n	800045e <MCP23017ClearPin+0x92>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800046a:	bf00      	nop
 800046c:	4b28      	ldr	r3, [pc, #160]	; (8000510 <MCP23017ClearPin+0x144>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000474:	2b00      	cmp	r3, #0
 8000476:	d0f9      	beq.n	800046c <MCP23017ClearPin+0xa0>
	if(b==A){
 8000478:	79bb      	ldrb	r3, [r7, #6]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d103      	bne.n	8000486 <MCP23017ClearPin+0xba>
		I2C2->DR = 0x14;
 800047e:	4b24      	ldr	r3, [pc, #144]	; (8000510 <MCP23017ClearPin+0x144>)
 8000480:	2214      	movs	r2, #20
 8000482:	611a      	str	r2, [r3, #16]
 8000484:	e002      	b.n	800048c <MCP23017ClearPin+0xc0>
	}
	else{
		I2C2->DR = 0x15;
 8000486:	4b22      	ldr	r3, [pc, #136]	; (8000510 <MCP23017ClearPin+0x144>)
 8000488:	2215      	movs	r2, #21
 800048a:	611a      	str	r2, [r3, #16]
	}
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800048c:	bf00      	nop
 800048e:	4b20      	ldr	r3, [pc, #128]	; (8000510 <MCP23017ClearPin+0x144>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000496:	2b00      	cmp	r3, #0
 8000498:	d0f9      	beq.n	800048e <MCP23017ClearPin+0xc2>
	I2C2->DR = currentIOState[b]; //just pull everything low
 800049a:	79bb      	ldrb	r3, [r7, #6]
 800049c:	4a1a      	ldr	r2, [pc, #104]	; (8000508 <MCP23017ClearPin+0x13c>)
 800049e:	5cd2      	ldrb	r2, [r2, r3]
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <MCP23017ClearPin+0x144>)
 80004a2:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80004a4:	bf00      	nop
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <MCP23017ClearPin+0x144>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0f9      	beq.n	80004a6 <MCP23017ClearPin+0xda>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure BTF is 1
 80004b2:	bf00      	nop
 80004b4:	4b16      	ldr	r3, [pc, #88]	; (8000510 <MCP23017ClearPin+0x144>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d0f9      	beq.n	80004b4 <MCP23017ClearPin+0xe8>
	I2C2->CR1 |= (1<<9); //send stop condition
 80004c0:	4b13      	ldr	r3, [pc, #76]	; (8000510 <MCP23017ClearPin+0x144>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a12      	ldr	r2, [pc, #72]	; (8000510 <MCP23017ClearPin+0x144>)
 80004c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ca:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 80004cc:	bf00      	nop
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <MCP23017ClearPin+0x144>)
 80004d0:	699b      	ldr	r3, [r3, #24]
	TIM2->CR1 |= 1; //enable BAM Driver
 80004d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <MCP23017ClearPin+0x140>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a09      	ldr	r2, [pc, #36]	; (800050c <MCP23017ClearPin+0x140>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6013      	str	r3, [r2, #0]
	//__enable_irq();
	GPIOA->BRR = (1<<7);
 80004ee:	4b05      	ldr	r3, [pc, #20]	; (8000504 <MCP23017ClearPin+0x138>)
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	615a      	str	r2, [r3, #20]

}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	200001ad 	.word	0x200001ad
 8000504:	40010800 	.word	0x40010800
 8000508:	200001cc 	.word	0x200001cc
 800050c:	40000400 	.word	0x40000400
 8000510:	40005800 	.word	0x40005800

08000514 <LCDInit>:
 * \fn LCDInit
 * @brief Initialises both the LCD and the MCP23017
 *
 * @param addr Address of the MCP23017
 */
void LCDInit(uint8_t addr){ //interrupts should be disabled here
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051e:	b672      	cpsid	i

	//while(blocked); //wait for clearance anyways just for good measure

	//Initialise the MCP23017 first
	__disable_irq(); //let's allow the init to go down peacefully
	I2C2->CR1 |= (1<<8); //send start condition
 8000520:	4b4e      	ldr	r3, [pc, #312]	; (800065c <LCDInit+0x148>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a4d      	ldr	r2, [pc, #308]	; (800065c <LCDInit+0x148>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 800052c:	bf00      	nop
 800052e:	4b4b      	ldr	r3, [pc, #300]	; (800065c <LCDInit+0x148>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0f9      	beq.n	800052e <LCDInit+0x1a>
	I2C2->DR = addr; //address the MCP23017
 800053a:	4a48      	ldr	r2, [pc, #288]	; (800065c <LCDInit+0x148>)
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000540:	bf00      	nop
 8000542:	4b46      	ldr	r3, [pc, #280]	; (800065c <LCDInit+0x148>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	2b00      	cmp	r3, #0
 800054c:	d0f9      	beq.n	8000542 <LCDInit+0x2e>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 800054e:	bf00      	nop
 8000550:	4b42      	ldr	r3, [pc, #264]	; (800065c <LCDInit+0x148>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0304 	and.w	r3, r3, #4
 8000558:	2b00      	cmp	r3, #0
 800055a:	d0f9      	beq.n	8000550 <LCDInit+0x3c>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800055c:	bf00      	nop
 800055e:	4b3f      	ldr	r3, [pc, #252]	; (800065c <LCDInit+0x148>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000566:	2b00      	cmp	r3, #0
 8000568:	d0f9      	beq.n	800055e <LCDInit+0x4a>
	I2C2->DR = 0x00; //write to IODIR_A
 800056a:	4b3c      	ldr	r3, [pc, #240]	; (800065c <LCDInit+0x148>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000570:	bf00      	nop
 8000572:	4b3a      	ldr	r3, [pc, #232]	; (800065c <LCDInit+0x148>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800057a:	2b00      	cmp	r3, #0
 800057c:	d0f9      	beq.n	8000572 <LCDInit+0x5e>
	I2C2->DR = 0x00; //all outputs
 800057e:	4b37      	ldr	r3, [pc, #220]	; (800065c <LCDInit+0x148>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000584:	bf00      	nop
 8000586:	4b35      	ldr	r3, [pc, #212]	; (800065c <LCDInit+0x148>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800058e:	2b00      	cmp	r3, #0
 8000590:	d0f9      	beq.n	8000586 <LCDInit+0x72>
	I2C2->DR = 0x00; //all outputs for next address which is IODIR_B
 8000592:	4b32      	ldr	r3, [pc, #200]	; (800065c <LCDInit+0x148>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000598:	bf00      	nop
 800059a:	4b30      	ldr	r3, [pc, #192]	; (800065c <LCDInit+0x148>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0f9      	beq.n	800059a <LCDInit+0x86>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure BTF is 1
 80005a6:	bf00      	nop
 80005a8:	4b2c      	ldr	r3, [pc, #176]	; (800065c <LCDInit+0x148>)
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0f9      	beq.n	80005a8 <LCDInit+0x94>
	I2C2->CR1 |= (1<<9); //send stop condition
 80005b4:	4b29      	ldr	r3, [pc, #164]	; (800065c <LCDInit+0x148>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a28      	ldr	r2, [pc, #160]	; (800065c <LCDInit+0x148>)
 80005ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005be:	6013      	str	r3, [r2, #0]


	//Pull RS, RW and E pins LOW
	MCP23017ClearPin(RS_Pin, B, LCD_Address);
 80005c0:	224e      	movs	r2, #78	; 0x4e
 80005c2:	2101      	movs	r1, #1
 80005c4:	2002      	movs	r0, #2
 80005c6:	f7ff ff01 	bl	80003cc <MCP23017ClearPin>
	MCP23017ClearPin(RS_Pin, B, LCD_Address);
 80005ca:	224e      	movs	r2, #78	; 0x4e
 80005cc:	2101      	movs	r1, #1
 80005ce:	2002      	movs	r0, #2
 80005d0:	f7ff fefc 	bl	80003cc <MCP23017ClearPin>
	MCP23017ClearPin(RS_Pin, B, LCD_Address);
 80005d4:	224e      	movs	r2, #78	; 0x4e
 80005d6:	2101      	movs	r1, #1
 80005d8:	2002      	movs	r0, #2
 80005da:	f7ff fef7 	bl	80003cc <MCP23017ClearPin>



	LCDData(0x00, addr); //clear the data pins as well
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	4619      	mov	r1, r3
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 f83c 	bl	8000660 <LCDData>
	DWT_Delay_ms(30);
 80005e8:	201e      	movs	r0, #30
 80005ea:	f7ff fe29 	bl	8000240 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	4619      	mov	r1, r3
 80005f2:	2030      	movs	r0, #48	; 0x30
 80005f4:	f000 f8b0 	bl	8000758 <LCDCommand>
	DWT_Delay_ms(5);
 80005f8:	2005      	movs	r0, #5
 80005fa:	f7ff fe21 	bl	8000240 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	4619      	mov	r1, r3
 8000602:	2030      	movs	r0, #48	; 0x30
 8000604:	f000 f8a8 	bl	8000758 <LCDCommand>
	DWT_Delay_ms(5);
 8000608:	2005      	movs	r0, #5
 800060a:	f7ff fe19 	bl	8000240 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	4619      	mov	r1, r3
 8000612:	2030      	movs	r0, #48	; 0x30
 8000614:	f000 f8a0 	bl	8000758 <LCDCommand>
	DWT_Delay_us(1000);
 8000618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061c:	f7ff fdea 	bl	80001f4 <DWT_Delay_us>

	LCDCommand(0x38, addr); //8-bit mode, 2 lines, smaller font
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	4619      	mov	r1, r3
 8000624:	2038      	movs	r0, #56	; 0x38
 8000626:	f000 f897 	bl	8000758 <LCDCommand>

	LCDCommand(0x0C, addr); //display ON
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4619      	mov	r1, r3
 800062e:	200c      	movs	r0, #12
 8000630:	f000 f892 	bl	8000758 <LCDCommand>

	LCDCommand(0x01, addr); //display clear
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	4619      	mov	r1, r3
 8000638:	2001      	movs	r0, #1
 800063a:	f000 f88d 	bl	8000758 <LCDCommand>
	DWT_Delay_us(2000); //clear requires a substantial delay
 800063e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000642:	f7ff fdd7 	bl	80001f4 <DWT_Delay_us>

	LCDCommand(0x06, addr); //set entry mode
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	4619      	mov	r1, r3
 800064a:	2006      	movs	r0, #6
 800064c:	f000 f884 	bl	8000758 <LCDCommand>
  __ASM volatile ("cpsie i" : : : "memory");
 8000650:	b662      	cpsie	i

	__enable_irq();


}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40005800 	.word	0x40005800

08000660 <LCDData>:
 * @brief Presents the data to D0 to D7 (located on Bank A)
 *
 * @param data Data to send
 * @param addr I2C Address of the MCP23017
 */
void LCDData(char data, uint8_t addr){
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	460a      	mov	r2, r1
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4613      	mov	r3, r2
 800066e:	71bb      	strb	r3, [r7, #6]

	while(blocked); //wait for clearance
 8000670:	bf00      	nop
 8000672:	4b36      	ldr	r3, [pc, #216]	; (800074c <LCDData+0xec>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1fa      	bne.n	8000672 <LCDData+0x12>

	TIM2->CR1 &= ~1; //disable BAM Driver
 800067c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000686:	f023 0301 	bic.w	r3, r3, #1
 800068a:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 800068c:	4b30      	ldr	r3, [pc, #192]	; (8000750 <LCDData+0xf0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a2f      	ldr	r2, [pc, #188]	; (8000750 <LCDData+0xf0>)
 8000692:	f023 0301 	bic.w	r3, r3, #1
 8000696:	6013      	str	r3, [r2, #0]

	I2C2->CR1 |= (1<<8); //send start condition
 8000698:	4b2e      	ldr	r3, [pc, #184]	; (8000754 <LCDData+0xf4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2d      	ldr	r2, [pc, #180]	; (8000754 <LCDData+0xf4>)
 800069e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a2:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80006a4:	bf00      	nop
 80006a6:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <LCDData+0xf4>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d0f9      	beq.n	80006a6 <LCDData+0x46>
	I2C2->DR = addr; //address the MCP23017
 80006b2:	4a28      	ldr	r2, [pc, #160]	; (8000754 <LCDData+0xf4>)
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80006b8:	bf00      	nop
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <LCDData+0xf4>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d0f9      	beq.n	80006ba <LCDData+0x5a>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 80006c6:	bf00      	nop
 80006c8:	4b22      	ldr	r3, [pc, #136]	; (8000754 <LCDData+0xf4>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d0f9      	beq.n	80006c8 <LCDData+0x68>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80006d4:	bf00      	nop
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <LCDData+0xf4>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d0f9      	beq.n	80006d6 <LCDData+0x76>
	I2C2->DR = 0x14; //write to GPIO_A
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <LCDData+0xf4>)
 80006e4:	2214      	movs	r2, #20
 80006e6:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80006e8:	bf00      	nop
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <LCDData+0xf4>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0f9      	beq.n	80006ea <LCDData+0x8a>
	I2C2->DR = data; //present data at output bank A
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <LCDData+0xf4>)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80006fc:	bf00      	nop
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <LCDData+0xf4>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0f9      	beq.n	80006fe <LCDData+0x9e>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure BTF is 1
 800070a:	bf00      	nop
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <LCDData+0xf4>)
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0f9      	beq.n	800070c <LCDData+0xac>
	I2C2->CR1 |= (1<<9); //send stop condition
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <LCDData+0xf4>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <LCDData+0xf4>)
 800071e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000722:	6013      	str	r3, [r2, #0]

	TIM2->CR1 |= 1; //enable BAM Driver
 8000724:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800072e:	f043 0301 	orr.w	r3, r3, #1
 8000732:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <LCDData+0xf0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a05      	ldr	r2, [pc, #20]	; (8000750 <LCDData+0xf0>)
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	6013      	str	r3, [r2, #0]

}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	200001ad 	.word	0x200001ad
 8000750:	40000400 	.word	0x40000400
 8000754:	40005800 	.word	0x40005800

08000758 <LCDCommand>:

void LCDCommand(char data, uint8_t addr){
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	460a      	mov	r2, r1
 8000762:	71fb      	strb	r3, [r7, #7]
 8000764:	4613      	mov	r3, r2
 8000766:	71bb      	strb	r3, [r7, #6]


	MCP23017ClearPin(RS_Pin, B, addr);
 8000768:	79bb      	ldrb	r3, [r7, #6]
 800076a:	461a      	mov	r2, r3
 800076c:	2101      	movs	r1, #1
 800076e:	2002      	movs	r0, #2
 8000770:	f7ff fe2c 	bl	80003cc <MCP23017ClearPin>

	LCDData(data, addr);
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff70 	bl	8000660 <LCDData>

	LCDCycleEN(addr);
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f804 	bl	8000790 <LCDCycleEN>

}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <LCDCycleEN>:

void LCDCycleEN(uint8_t addr){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]

	MCP23017ClearPin(EN_Pin, B, addr);
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	461a      	mov	r2, r3
 800079e:	2101      	movs	r1, #1
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff fe13 	bl	80003cc <MCP23017ClearPin>
	DWT_Delay_us(1);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff fd24 	bl	80001f4 <DWT_Delay_us>
	MCP23017SetPin(EN_Pin, B, addr);
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	461a      	mov	r2, r3
 80007b0:	2101      	movs	r1, #1
 80007b2:	2000      	movs	r0, #0
 80007b4:	f7ff fd68 	bl	8000288 <MCP23017SetPin>
	DWT_Delay_us(1);
 80007b8:	2001      	movs	r0, #1
 80007ba:	f7ff fd1b 	bl	80001f4 <DWT_Delay_us>
	MCP23017ClearPin(EN_Pin, B, addr);
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	461a      	mov	r2, r3
 80007c2:	2101      	movs	r1, #1
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff fe01 	bl	80003cc <MCP23017ClearPin>
	DWT_Delay_us(100);
 80007ca:	2064      	movs	r0, #100	; 0x64
 80007cc:	f7ff fd12 	bl	80001f4 <DWT_Delay_us>


}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <LCDWriteChar>:

void LCDWriteChar(char data, uint8_t addr){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	460a      	mov	r2, r1
 80007e2:	71fb      	strb	r3, [r7, #7]
 80007e4:	4613      	mov	r3, r2
 80007e6:	71bb      	strb	r3, [r7, #6]

	MCP23017SetPin(RS_Pin, B, addr);
 80007e8:	79bb      	ldrb	r3, [r7, #6]
 80007ea:	461a      	mov	r2, r3
 80007ec:	2101      	movs	r1, #1
 80007ee:	2002      	movs	r0, #2
 80007f0:	f7ff fd4a 	bl	8000288 <MCP23017SetPin>
	LCDData(data, addr);
 80007f4:	79ba      	ldrb	r2, [r7, #6]
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff30 	bl	8000660 <LCDData>
	LCDCycleEN(addr);
 8000800:	79bb      	ldrb	r3, [r7, #6]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ffc4 	bl	8000790 <LCDCycleEN>

}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <LCDWriteString>:

void LCDWriteString(char *str, uint8_t addr){
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]

	for(int i = 0; (volatile char)str[i] != '\x00' ; i++){ //Nice touch: take advantage of null byte terminated strings
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	e00b      	b.n	800083a <LCDWriteString+0x2a>
		LCDWriteChar(str[i], addr);
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	78fa      	ldrb	r2, [r7, #3]
 800082c:	4611      	mov	r1, r2
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ffd2 	bl	80007d8 <LCDWriteChar>
	for(int i = 0; (volatile char)str[i] != '\x00' ; i++){ //Nice touch: take advantage of null byte terminated strings
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	4413      	add	r3, r2
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1ed      	bne.n	8000822 <LCDWriteString+0x12>
	}

}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <LCDClear>:

void LCDClear(uint8_t addr){
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	71fb      	strb	r3, [r7, #7]

	LCDCommand(1, addr);
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	4619      	mov	r1, r3
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff ff7b 	bl	8000758 <LCDCommand>
	DWT_Delay_us(2000);
 8000862:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000866:	f7ff fcc5 	bl	80001f4 <DWT_Delay_us>

}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <LCDSetCursor>:

void LCDSetCursor(uint8_t row, uint8_t col, uint8_t addr){
 8000872:	b580      	push	{r7, lr}
 8000874:	b084      	sub	sp, #16
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	71fb      	strb	r3, [r7, #7]
 800087c:	460b      	mov	r3, r1
 800087e:	71bb      	strb	r3, [r7, #6]
 8000880:	4613      	mov	r3, r2
 8000882:	717b      	strb	r3, [r7, #5]

	char outbyte;

	if(row == 1){
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d109      	bne.n	800089e <LCDSetCursor+0x2c>
		outbyte = 0x80 + col - 1;
 800088a:	79bb      	ldrb	r3, [r7, #6]
 800088c:	337f      	adds	r3, #127	; 0x7f
 800088e:	73fb      	strb	r3, [r7, #15]
		LCDCommand(outbyte, addr);
 8000890:	797a      	ldrb	r2, [r7, #5]
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	4611      	mov	r1, r2
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff5e 	bl	8000758 <LCDCommand>
	else if(row == 2){
		outbyte = 0xC0 + col - 1;
		LCDCommand(outbyte, addr);
	}

}
 800089c:	e00b      	b.n	80008b6 <LCDSetCursor+0x44>
	else if(row == 2){
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d108      	bne.n	80008b6 <LCDSetCursor+0x44>
		outbyte = 0xC0 + col - 1;
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	3b41      	subs	r3, #65	; 0x41
 80008a8:	73fb      	strb	r3, [r7, #15]
		LCDCommand(outbyte, addr);
 80008aa:	797a      	ldrb	r2, [r7, #5]
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff51 	bl	8000758 <LCDCommand>
}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c4:	f000 fd66 	bl	8001394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c8:	f000 f85c 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008cc:	f000 fa1c 	bl	8000d08 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80008d0:	f007 fb4c 	bl	8007f6c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80008d4:	f000 f8c8 	bl	8000a68 <MX_ADC1_Init>
  MX_I2C1_Init();
 80008d8:	f000 f904 	bl	8000ae4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80008dc:	f000 f930 	bl	8000b40 <MX_I2C2_Init>
  MX_TIM2_Init();
 80008e0:	f000 f95c 	bl	8000b9c <MX_TIM2_Init>
  MX_TIM3_Init();
 80008e4:	f000 f9b6 	bl	8000c54 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008e8:	f000 f8a9 	bl	8000a3e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  NVIC_SetPriorityGrouping(0U); //use standard interrupt grouping
 80008ec:	2000      	movs	r0, #0
 80008ee:	f7ff fc2d 	bl	800014c <__NVIC_SetPriorityGrouping>
  DWT_Delay_Init();
 80008f2:	f7ff fc4f 	bl	8000194 <DWT_Delay_Init>

  blocked = 0;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <main+0xac>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
  I2C2->CR1 |= 1; //enable i2c 2 peripheral for LCD and EEPROM
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <main+0xb0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <main+0xb0>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	6013      	str	r3, [r2, #0]

  LCDInit(LCD_Address);
 8000908:	204e      	movs	r0, #78	; 0x4e
 800090a:	f7ff fe03 	bl	8000514 <LCDInit>

  TIM2->CR1 |= 1; //enable BAM Driver
 800090e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6013      	str	r3, [r2, #0]
  TIM3->CR1 |= 1; //enable encoder scan driver
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <main+0xb4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a14      	ldr	r2, [pc, #80]	; (8000974 <main+0xb4>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6013      	str	r3, [r2, #0]
  	I2C2->CR1 |= (1<<9); //send stop condition
	*/



  LCDClear(LCD_Address);
 800092a:	204e      	movs	r0, #78	; 0x4e
 800092c:	f7ff ff8f 	bl	800084e <LCDClear>

  LCDSetCursor(1, 1, LCD_Address);
 8000930:	224e      	movs	r2, #78	; 0x4e
 8000932:	2101      	movs	r1, #1
 8000934:	2001      	movs	r0, #1
 8000936:	f7ff ff9c 	bl	8000872 <LCDSetCursor>

  LCDWriteString("AAAA", LCD_Address);
 800093a:	214e      	movs	r1, #78	; 0x4e
 800093c:	480e      	ldr	r0, [pc, #56]	; (8000978 <main+0xb8>)
 800093e:	f7ff ff67 	bl	8000810 <LCDWriteString>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  brightness[0] = encoderValues[3];
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <main+0xbc>)
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <main+0xc0>)
 800094a:	701a      	strb	r2, [r3, #0]
	  brightness[1] = encoderValues[2];
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <main+0xbc>)
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <main+0xc0>)
 8000954:	705a      	strb	r2, [r3, #1]
	  brightness[2] = encoderValues[1];
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <main+0xbc>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <main+0xc0>)
 800095e:	709a      	strb	r2, [r3, #2]
	  brightness[3] = encoderValues[0];
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <main+0xbc>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <main+0xc0>)
 8000968:	70da      	strb	r2, [r3, #3]
	  brightness[0] = encoderValues[3];
 800096a:	e7ea      	b.n	8000942 <main+0x82>
 800096c:	200001ad 	.word	0x200001ad
 8000970:	40005800 	.word	0x40005800
 8000974:	40000400 	.word	0x40000400
 8000978:	080088c8 	.word	0x080088c8
 800097c:	200001b8 	.word	0x200001b8
 8000980:	20000000 	.word	0x20000000

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b094      	sub	sp, #80	; 0x50
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800098e:	2228      	movs	r2, #40	; 0x28
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f007 ff84 	bl	80088a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b4:	2301      	movs	r3, #1
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c2:	2301      	movs	r3, #1
 80009c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c6:	2302      	movs	r3, #2
 80009c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 fe82 	bl	80036e4 <HAL_RCC_OscConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009e6:	f000 fa21 	bl	8000e2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	230f      	movs	r3, #15
 80009ec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2102      	movs	r1, #2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 f8ec 	bl	8003be4 <HAL_RCC_ClockConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a12:	f000 fa0b 	bl	8000e2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000a16:	2312      	movs	r3, #18
 8000a18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a1e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 fa64 	bl	8003ef4 <HAL_RCCEx_PeriphCLKConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a32:	f000 f9fb 	bl	8000e2c <Error_Handler>
  }
}
 8000a36:	bf00      	nop
 8000a38:	3750      	adds	r7, #80	; 0x50
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2101      	movs	r1, #1
 8000a46:	201c      	movs	r0, #28
 8000a48:	f000 ffe7 	bl	8001a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a4c:	201c      	movs	r0, #28
 8000a4e:	f001 f800 	bl	8001a52 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2102      	movs	r1, #2
 8000a56:	201d      	movs	r0, #29
 8000a58:	f000 ffdf 	bl	8001a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a5c:	201d      	movs	r0, #29
 8000a5e:	f000 fff8 	bl	8001a52 <HAL_NVIC_EnableIRQ>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_ADC1_Init+0x74>)
 8000a7a:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <MX_ADC1_Init+0x78>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_ADC1_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_ADC1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_ADC1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_ADC1_Init+0x74>)
 8000a92:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a98:	4b10      	ldr	r3, [pc, #64]	; (8000adc <MX_ADC1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_ADC1_Init+0x74>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aa4:	480d      	ldr	r0, [pc, #52]	; (8000adc <MX_ADC1_Init+0x74>)
 8000aa6:	f000 fcd7 	bl	8001458 <HAL_ADC_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ab0:	f000 f9bc 	bl	8000e2c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_ADC1_Init+0x74>)
 8000ac6:	f000 fd9f 	bl	8001608 <HAL_ADC_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ad0:	f000 f9ac 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200004e0 	.word	0x200004e0
 8000ae0:	40012400 	.word	0x40012400

08000ae4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000aea:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000af0:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <MX_I2C1_Init+0x58>)
 8000af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_I2C1_Init+0x50>)
 8000b22:	f001 f923 	bl	8001d6c <HAL_I2C_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b2c:	f000 f97e 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200003f0 	.word	0x200003f0
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	00061a80 	.word	0x00061a80

08000b40 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <MX_I2C2_Init+0x50>)
 8000b46:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <MX_I2C2_Init+0x54>)
 8000b48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_I2C2_Init+0x50>)
 8000b4c:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <MX_I2C2_Init+0x58>)
 8000b4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_I2C2_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_I2C2_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_I2C2_Init+0x50>)
 8000b5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b62:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <MX_I2C2_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_I2C2_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <MX_I2C2_Init+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_I2C2_Init+0x50>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_I2C2_Init+0x50>)
 8000b7e:	f001 f8f5 	bl	8001d6c <HAL_I2C_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b88:	f000 f950 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000444 	.word	0x20000444
 8000b94:	40005800 	.word	0x40005800
 8000b98:	00061a80 	.word	0x00061a80

08000b9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb8:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <MX_TIM2_Init+0xb4>)
 8000bba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000bc0:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <MX_TIM2_Init+0xb4>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <MX_TIM2_Init+0xb4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2047;
 8000bcc:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <MX_TIM2_Init+0xb4>)
 8000bce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000bd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <MX_TIM2_Init+0xb4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bda:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <MX_TIM2_Init+0xb4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be0:	481b      	ldr	r0, [pc, #108]	; (8000c50 <MX_TIM2_Init+0xb4>)
 8000be2:	f003 fa3d 	bl	8004060 <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bec:	f000 f91e 	bl	8000e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4814      	ldr	r0, [pc, #80]	; (8000c50 <MX_TIM2_Init+0xb4>)
 8000bfe:	f003 fb86 	bl	800430e <HAL_TIM_ConfigClockSource>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c08:	f000 f910 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_TIM2_Init+0xb4>)
 8000c1a:	f003 fd55 	bl	80046c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c24:	f000 f902 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIM2->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the BAM Interrupt is triggered
 8000c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c32:	f023 0302 	bic.w	r3, r3, #2
 8000c36:	6013      	str	r3, [r2, #0]
  TIM2->DIER |= 1; //Update interrupt enable
 8000c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	60d3      	str	r3, [r2, #12]

  /* USER CODE END TIM2_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000510 	.word	0x20000510

08000c54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c68:	463b      	mov	r3, r7
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c70:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <MX_TIM3_Init+0xac>)
 8000c72:	4a24      	ldr	r2, [pc, #144]	; (8000d04 <MX_TIM3_Init+0xb0>)
 8000c74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c76:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <MX_TIM3_Init+0xac>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7c:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <MX_TIM3_Init+0xac>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16383;
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <MX_TIM3_Init+0xac>)
 8000c84:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000c88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <MX_TIM3_Init+0xac>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MX_TIM3_Init+0xac>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c96:	481a      	ldr	r0, [pc, #104]	; (8000d00 <MX_TIM3_Init+0xac>)
 8000c98:	f003 f9e2 	bl	8004060 <HAL_TIM_Base_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000ca2:	f000 f8c3 	bl	8000e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000caa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4813      	ldr	r0, [pc, #76]	; (8000d00 <MX_TIM3_Init+0xac>)
 8000cb4:	f003 fb2b 	bl	800430e <HAL_TIM_ConfigClockSource>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000cbe:	f000 f8b5 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cca:	463b      	mov	r3, r7
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_TIM3_Init+0xac>)
 8000cd0:	f003 fcfa 	bl	80046c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000cda:	f000 f8a7 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the Encoder Scan Interrupt is triggered
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_TIM3_Init+0xb0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <MX_TIM3_Init+0xb0>)
 8000ce4:	f023 0302 	bic.w	r3, r3, #2
 8000ce8:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= 1; //Update interrupt enable
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_TIM3_Init+0xb0>)
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <MX_TIM3_Init+0xb0>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM3_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000498 	.word	0x20000498
 8000d04:	40000400 	.word	0x40000400

08000d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1c:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <MX_GPIO_Init+0x114>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a3e      	ldr	r2, [pc, #248]	; (8000e1c <MX_GPIO_Init+0x114>)
 8000d22:	f043 0310 	orr.w	r3, r3, #16
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b3c      	ldr	r3, [pc, #240]	; (8000e1c <MX_GPIO_Init+0x114>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d34:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <MX_GPIO_Init+0x114>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a38      	ldr	r2, [pc, #224]	; (8000e1c <MX_GPIO_Init+0x114>)
 8000d3a:	f043 0320 	orr.w	r3, r3, #32
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <MX_GPIO_Init+0x114>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0320 	and.w	r3, r3, #32
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <MX_GPIO_Init+0x114>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a32      	ldr	r2, [pc, #200]	; (8000e1c <MX_GPIO_Init+0x114>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <MX_GPIO_Init+0x114>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d64:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <MX_GPIO_Init+0x114>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a2c      	ldr	r2, [pc, #176]	; (8000e1c <MX_GPIO_Init+0x114>)
 8000d6a:	f043 0308 	orr.w	r3, r3, #8
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <MX_GPIO_Init+0x114>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0308 	and.w	r3, r3, #8
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000d82:	4827      	ldr	r0, [pc, #156]	; (8000e20 <MX_GPIO_Init+0x118>)
 8000d84:	f000 ffda 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f248 11c0 	movw	r1, #33216	; 0x81c0
 8000d8e:	4825      	ldr	r0, [pc, #148]	; (8000e24 <MX_GPIO_Init+0x11c>)
 8000d90:	f000 ffd4 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000d9a:	4823      	ldr	r0, [pc, #140]	; (8000e28 <MX_GPIO_Init+0x120>)
 8000d9c:	f000 ffce 	bl	8001d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000da0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db2:	f107 0310 	add.w	r3, r7, #16
 8000db6:	4619      	mov	r1, r3
 8000db8:	4819      	ldr	r0, [pc, #100]	; (8000e20 <MX_GPIO_Init+0x118>)
 8000dba:	f000 fe65 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
 8000dbe:	f248 13c0 	movw	r3, #33216	; 0x81c0
 8000dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4813      	ldr	r0, [pc, #76]	; (8000e24 <MX_GPIO_Init+0x11c>)
 8000dd8:	f000 fe56 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ddc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000de0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	4619      	mov	r1, r3
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <MX_GPIO_Init+0x120>)
 8000df6:	f000 fe47 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_GPIO_Init+0x11c>)
 8000e10:	f000 fe3a 	bl	8001a88 <HAL_GPIO_Init>

}
 8000e14:	bf00      	nop
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40011000 	.word	0x40011000
 8000e24:	40010800 	.word	0x40010800
 8000e28:	40010c00 	.word	0x40010c00

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <Error_Handler+0x6>

08000e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_MspInit+0x5c>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <HAL_MspInit+0x5c>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6193      	str	r3, [r2, #24]
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_MspInit+0x5c>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_MspInit+0x5c>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_MspInit+0x5c>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	61d3      	str	r3, [r2, #28]
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_MspInit+0x5c>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_MspInit+0x60>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_MspInit+0x60>)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40010000 	.word	0x40010000

08000e98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <HAL_ADC_MspInit+0x6c>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d121      	bne.n	8000efc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_ADC_MspInit+0x70>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <HAL_ADC_MspInit+0x70>)
 8000ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <HAL_ADC_MspInit+0x70>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_ADC_MspInit+0x70>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <HAL_ADC_MspInit+0x70>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_ADC_MspInit+0x70>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ee8:	230f      	movs	r3, #15
 8000eea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eec:	2303      	movs	r3, #3
 8000eee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <HAL_ADC_MspInit+0x74>)
 8000ef8:	f000 fdc6 	bl	8001a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000efc:	bf00      	nop
 8000efe:	3720      	adds	r7, #32
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40012400 	.word	0x40012400
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010800 	.word	0x40010800

08000f10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08c      	sub	sp, #48	; 0x30
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a32      	ldr	r2, [pc, #200]	; (8000ff4 <HAL_I2C_MspInit+0xe4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d133      	bne.n	8000f98 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f30:	4b31      	ldr	r3, [pc, #196]	; (8000ff8 <HAL_I2C_MspInit+0xe8>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a30      	ldr	r2, [pc, #192]	; (8000ff8 <HAL_I2C_MspInit+0xe8>)
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <HAL_I2C_MspInit+0xe8>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0308 	and.w	r3, r3, #8
 8000f44:	61bb      	str	r3, [r7, #24]
 8000f46:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f4e:	2312      	movs	r3, #18
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4827      	ldr	r0, [pc, #156]	; (8000ffc <HAL_I2C_MspInit+0xec>)
 8000f5e:	f000 fd93 	bl	8001a88 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000f62:	4b27      	ldr	r3, [pc, #156]	; (8001000 <HAL_I2C_MspInit+0xf0>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f78:	4a21      	ldr	r2, [pc, #132]	; (8001000 <HAL_I2C_MspInit+0xf0>)
 8000f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <HAL_I2C_MspInit+0xe8>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <HAL_I2C_MspInit+0xe8>)
 8000f84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f88:	61d3      	str	r3, [r2, #28]
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <HAL_I2C_MspInit+0xe8>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f96:	e029      	b.n	8000fec <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a19      	ldr	r2, [pc, #100]	; (8001004 <HAL_I2C_MspInit+0xf4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d124      	bne.n	8000fec <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_I2C_MspInit+0xe8>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <HAL_I2C_MspInit+0xe8>)
 8000fa8:	f043 0308 	orr.w	r3, r3, #8
 8000fac:	6193      	str	r3, [r2, #24]
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_I2C_MspInit+0xe8>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc0:	2312      	movs	r3, #18
 8000fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480b      	ldr	r0, [pc, #44]	; (8000ffc <HAL_I2C_MspInit+0xec>)
 8000fd0:	f000 fd5a 	bl	8001a88 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_I2C_MspInit+0xe8>)
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_I2C_MspInit+0xe8>)
 8000fda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fde:	61d3      	str	r3, [r2, #28]
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_I2C_MspInit+0xe8>)
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3730      	adds	r7, #48	; 0x30
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40005400 	.word	0x40005400
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010c00 	.word	0x40010c00
 8001000:	40010000 	.word	0x40010000
 8001004:	40005800 	.word	0x40005800

08001008 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001018:	d10c      	bne.n	8001034 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HAL_TIM_Base_MspInit+0x58>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a10      	ldr	r2, [pc, #64]	; (8001060 <HAL_TIM_Base_MspInit+0x58>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_TIM_Base_MspInit+0x58>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001032:	e010      	b.n	8001056 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_TIM_Base_MspInit+0x5c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10b      	bne.n	8001056 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_TIM_Base_MspInit+0x58>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_TIM_Base_MspInit+0x58>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	61d3      	str	r3, [r2, #28]
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_TIM_Base_MspInit+0x58>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	40021000 	.word	0x40021000
 8001064:	40000400 	.word	0x40000400

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	e7fe      	b.n	800106c <NMI_Handler+0x4>

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <MemManage_Handler+0x4>

0800107a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <UsageFault_Handler+0x4>

08001086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr

08001092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ae:	f000 f9b7 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80010be:	f001 f8be 	bl	800223e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200011f0 	.word	0x200011f0

080010cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//GPIOA->BSRR = 1<<6;
	if(BAMIndex == 0){
 80010d0:	4b43      	ldr	r3, [pc, #268]	; (80011e0 <TIM2_IRQHandler+0x114>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d102      	bne.n	80010e0 <TIM2_IRQHandler+0x14>
		blocked = 1; //block to protect the time sensitive LSB's, otherwise it gets pretty flicker-ry
 80010da:	4b42      	ldr	r3, [pc, #264]	; (80011e4 <TIM2_IRQHandler+0x118>)
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]

	}

	if(brightness[0] & (1 << BAMIndex))	GPIOB->BSRR = (1<<12);
 80010e0:	4b41      	ldr	r3, [pc, #260]	; (80011e8 <TIM2_IRQHandler+0x11c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <TIM2_IRQHandler+0x114>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	fa42 f303 	asr.w	r3, r2, r3
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d004      	beq.n	8001104 <TIM2_IRQHandler+0x38>
 80010fa:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <TIM2_IRQHandler+0x120>)
 80010fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001100:	611a      	str	r2, [r3, #16]
 8001102:	e003      	b.n	800110c <TIM2_IRQHandler+0x40>
	else GPIOB->BRR = (1<<12);
 8001104:	4b39      	ldr	r3, [pc, #228]	; (80011ec <TIM2_IRQHandler+0x120>)
 8001106:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800110a:	615a      	str	r2, [r3, #20]
	if(brightness[1] & (1 << BAMIndex))	GPIOB->BSRR = (1<<13);
 800110c:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <TIM2_IRQHandler+0x11c>)
 800110e:	785b      	ldrb	r3, [r3, #1]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	461a      	mov	r2, r3
 8001114:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <TIM2_IRQHandler+0x114>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	fa42 f303 	asr.w	r3, r2, r3
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <TIM2_IRQHandler+0x64>
 8001126:	4b31      	ldr	r3, [pc, #196]	; (80011ec <TIM2_IRQHandler+0x120>)
 8001128:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	e003      	b.n	8001138 <TIM2_IRQHandler+0x6c>
	else GPIOB->BRR = (1<<13);
 8001130:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <TIM2_IRQHandler+0x120>)
 8001132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001136:	615a      	str	r2, [r3, #20]
	if(brightness[2] & (1 << BAMIndex))	GPIOB->BSRR = (1<<14);
 8001138:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <TIM2_IRQHandler+0x11c>)
 800113a:	789b      	ldrb	r3, [r3, #2]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	461a      	mov	r2, r3
 8001140:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <TIM2_IRQHandler+0x114>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	fa42 f303 	asr.w	r3, r2, r3
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <TIM2_IRQHandler+0x90>
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <TIM2_IRQHandler+0x120>)
 8001154:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001158:	611a      	str	r2, [r3, #16]
 800115a:	e003      	b.n	8001164 <TIM2_IRQHandler+0x98>
	else GPIOB->BRR = (1<<14);
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <TIM2_IRQHandler+0x120>)
 800115e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001162:	615a      	str	r2, [r3, #20]
	if(brightness[3] & (1 << BAMIndex))	GPIOB->BSRR = (1<<15);
 8001164:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <TIM2_IRQHandler+0x11c>)
 8001166:	78db      	ldrb	r3, [r3, #3]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <TIM2_IRQHandler+0x114>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	fa42 f303 	asr.w	r3, r2, r3
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d004      	beq.n	8001188 <TIM2_IRQHandler+0xbc>
 800117e:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <TIM2_IRQHandler+0x120>)
 8001180:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001184:	611a      	str	r2, [r3, #16]
 8001186:	e003      	b.n	8001190 <TIM2_IRQHandler+0xc4>
	else GPIOB->BRR = (1<<15);
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <TIM2_IRQHandler+0x120>)
 800118a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800118e:	615a      	str	r2, [r3, #20]


*/

	//FIXME this might potentially cause issues, as it blocks for half of the time
	if(BAMIndex == 3){
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <TIM2_IRQHandler+0x114>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b03      	cmp	r3, #3
 8001198:	d102      	bne.n	80011a0 <TIM2_IRQHandler+0xd4>
		blocked = 0; //Time sensitive LSB's are done, unblock, value of 3 or less gives visible flicker
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <TIM2_IRQHandler+0x118>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]

	}

	if(BAMIndex == 7){ //We've passed one BAM cycle
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <TIM2_IRQHandler+0x114>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b07      	cmp	r3, #7
 80011a8:	d107      	bne.n	80011ba <TIM2_IRQHandler+0xee>


		BAMIndex = 0;
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <TIM2_IRQHandler+0x114>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = 1;
 80011b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b4:	2201      	movs	r2, #1
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
 80011b8:	e00d      	b.n	80011d6 <TIM2_IRQHandler+0x10a>



	}
	else{
		BAMIndex++;
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <TIM2_IRQHandler+0x114>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	3301      	adds	r3, #1
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <TIM2_IRQHandler+0x114>)
 80011c6:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = (volatile)(TIM2->PSC << 1); //set next write to occupy twice the time of this current write.
 80011c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	6293      	str	r3, [r2, #40]	; 0x28
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <TIM2_IRQHandler+0x124>)
 80011d8:	f002 ff91 	bl	80040fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200001ac 	.word	0x200001ac
 80011e4:	200001ad 	.word	0x200001ad
 80011e8:	20000000 	.word	0x20000000
 80011ec:	40010c00 	.word	0x40010c00
 80011f0:	20000510 	.word	0x20000510

080011f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	GPIOA->BSRR = 1<<6;
 80011fa:	4b49      	ldr	r3, [pc, #292]	; (8001320 <TIM3_IRQHandler+0x12c>)
 80011fc:	2240      	movs	r2, #64	; 0x40
 80011fe:	611a      	str	r2, [r3, #16]
	uint8_t currentReadoff = ((((GPIOA->IDR)>>9) & 1) << 1) | (((GPIOA->IDR)>>10) & 1); //read current encoder state
 8001200:	4b47      	ldr	r3, [pc, #284]	; (8001320 <TIM3_IRQHandler+0x12c>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	0a5b      	lsrs	r3, r3, #9
 8001206:	b2db      	uxtb	r3, r3
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b43      	ldr	r3, [pc, #268]	; (8001320 <TIM3_IRQHandler+0x12c>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	0a9b      	lsrs	r3, r3, #10
 8001218:	b2db      	uxtb	r3, r3
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	4313      	orrs	r3, r2
 8001222:	71fb      	strb	r3, [r7, #7]
	uint8_t index = (lastEncoder[currentEncoder]<<2) | currentReadoff;
 8001224:	4b3f      	ldr	r3, [pc, #252]	; (8001324 <TIM3_IRQHandler+0x130>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	461a      	mov	r2, r3
 800122c:	4b3e      	ldr	r3, [pc, #248]	; (8001328 <TIM3_IRQHandler+0x134>)
 800122e:	5c9b      	ldrb	r3, [r3, r2]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	b25a      	sxtb	r2, r3
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	4313      	orrs	r3, r2
 800123c:	b25b      	sxtb	r3, r3
 800123e:	71bb      	strb	r3, [r7, #6]
	encoderValues[currentEncoder] += encoderLUT[index];
 8001240:	79bb      	ldrb	r3, [r7, #6]
 8001242:	4a3a      	ldr	r2, [pc, #232]	; (800132c <TIM3_IRQHandler+0x138>)
 8001244:	5cd3      	ldrb	r3, [r2, r3]
 8001246:	b259      	sxtb	r1, r3
 8001248:	4b36      	ldr	r3, [pc, #216]	; (8001324 <TIM3_IRQHandler+0x130>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4610      	mov	r0, r2
 8001250:	4b37      	ldr	r3, [pc, #220]	; (8001330 <TIM3_IRQHandler+0x13c>)
 8001252:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001256:	4608      	mov	r0, r1
 8001258:	4611      	mov	r1, r2
 800125a:	4403      	add	r3, r0
 800125c:	4a34      	ldr	r2, [pc, #208]	; (8001330 <TIM3_IRQHandler+0x13c>)
 800125e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//constrain encoderValues
	if(encoderValues[currentEncoder] > 255) encoderValues[currentEncoder] = 255;
 8001262:	4b30      	ldr	r3, [pc, #192]	; (8001324 <TIM3_IRQHandler+0x130>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	4b31      	ldr	r3, [pc, #196]	; (8001330 <TIM3_IRQHandler+0x13c>)
 800126c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001270:	2bff      	cmp	r3, #255	; 0xff
 8001272:	dd07      	ble.n	8001284 <TIM3_IRQHandler+0x90>
 8001274:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <TIM3_IRQHandler+0x130>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4619      	mov	r1, r3
 800127c:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <TIM3_IRQHandler+0x13c>)
 800127e:	22ff      	movs	r2, #255	; 0xff
 8001280:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	if(encoderValues[currentEncoder] < 0) encoderValues[currentEncoder] = 0;
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <TIM3_IRQHandler+0x130>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	4b28      	ldr	r3, [pc, #160]	; (8001330 <TIM3_IRQHandler+0x13c>)
 800128e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001292:	2b00      	cmp	r3, #0
 8001294:	da07      	bge.n	80012a6 <TIM3_IRQHandler+0xb2>
 8001296:	4b23      	ldr	r3, [pc, #140]	; (8001324 <TIM3_IRQHandler+0x130>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4619      	mov	r1, r3
 800129e:	4b24      	ldr	r3, [pc, #144]	; (8001330 <TIM3_IRQHandler+0x13c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	lastEncoder[currentEncoder] = currentReadoff;
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <TIM3_IRQHandler+0x130>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	4619      	mov	r1, r3
 80012ae:	4a1e      	ldr	r2, [pc, #120]	; (8001328 <TIM3_IRQHandler+0x134>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	5453      	strb	r3, [r2, r1]
	//uint8_t buffer[256];
	//sprintf(buffer, "currentReadoff %d index %d encoderValue %d\r\n", currentReadoff, index, encoderValues[0]);
	//CDC_Transmit_FS(buffer, sizeof(buffer));
	//}

	if(currentEncoder == 4) currentEncoder = 0;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <TIM3_IRQHandler+0x130>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	d103      	bne.n	80012c6 <TIM3_IRQHandler+0xd2>
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <TIM3_IRQHandler+0x130>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	e006      	b.n	80012d4 <TIM3_IRQHandler+0xe0>
	else currentEncoder++;
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <TIM3_IRQHandler+0x130>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	3301      	adds	r3, #1
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <TIM3_IRQHandler+0x130>)
 80012d2:	701a      	strb	r2, [r3, #0]

	//select the nth encoder here to allow the mux time to settle
	GPIOC->BRR = (3<<13); //clear GPIO Pins
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <TIM3_IRQHandler+0x140>)
 80012d6:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80012da:	615a      	str	r2, [r3, #20]
	GPIOC->BSRR = ((currentEncoder&3)<<13);
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <TIM3_IRQHandler+0x130>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	035b      	lsls	r3, r3, #13
 80012e4:	4a13      	ldr	r2, [pc, #76]	; (8001334 <TIM3_IRQHandler+0x140>)
 80012e6:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80012ea:	6113      	str	r3, [r2, #16]
	GPIOA->BRR = (1<<15);
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <TIM3_IRQHandler+0x12c>)
 80012ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012f2:	615a      	str	r2, [r3, #20]
	if(currentEncoder&4) GPIOA->BSRR = (1<<15); //BLOODY SOLDER DAG!!! Shorted out the pins giving the result in DS14
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <TIM3_IRQHandler+0x130>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <TIM3_IRQHandler+0x116>
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <TIM3_IRQHandler+0x12c>)
 8001304:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001308:	611a      	str	r2, [r3, #16]

	GPIOA->BRR = 1<<6;
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <TIM3_IRQHandler+0x12c>)
 800130c:	2240      	movs	r2, #64	; 0x40
 800130e:	615a      	str	r2, [r3, #20]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <TIM3_IRQHandler+0x144>)
 8001312:	f002 fef4 	bl	80040fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40010800 	.word	0x40010800
 8001324:	200001ae 	.word	0x200001ae
 8001328:	200001b0 	.word	0x200001b0
 800132c:	20000004 	.word	0x20000004
 8001330:	200001b8 	.word	0x200001b8
 8001334:	40011000 	.word	0x40011000
 8001338:	20000498 	.word	0x20000498

0800133c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <Reset_Handler>:
 8001348:	2100      	movs	r1, #0
 800134a:	e003      	b.n	8001354 <LoopCopyDataInit>

0800134c <CopyDataInit>:
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <LoopFillZerobss+0x14>)
 800134e:	585b      	ldr	r3, [r3, r1]
 8001350:	5043      	str	r3, [r0, r1]
 8001352:	3104      	adds	r1, #4

08001354 <LoopCopyDataInit>:
 8001354:	480a      	ldr	r0, [pc, #40]	; (8001380 <LoopFillZerobss+0x18>)
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <LoopFillZerobss+0x1c>)
 8001358:	1842      	adds	r2, r0, r1
 800135a:	429a      	cmp	r2, r3
 800135c:	d3f6      	bcc.n	800134c <CopyDataInit>
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <LoopFillZerobss+0x20>)
 8001360:	e002      	b.n	8001368 <LoopFillZerobss>

08001362 <FillZerobss>:
 8001362:	2300      	movs	r3, #0
 8001364:	f842 3b04 	str.w	r3, [r2], #4

08001368 <LoopFillZerobss>:
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <LoopFillZerobss+0x24>)
 800136a:	429a      	cmp	r2, r3
 800136c:	d3f9      	bcc.n	8001362 <FillZerobss>
 800136e:	f7ff ffe5 	bl	800133c <SystemInit>
 8001372:	f007 fa71 	bl	8008858 <__libc_init_array>
 8001376:	f7ff faa3 	bl	80008c0 <main>
 800137a:	4770      	bx	lr
 800137c:	0800894c 	.word	0x0800894c
 8001380:	20000000 	.word	0x20000000
 8001384:	20000190 	.word	0x20000190
 8001388:	20000190 	.word	0x20000190
 800138c:	200014dc 	.word	0x200014dc

08001390 <ADC1_2_IRQHandler>:
 8001390:	e7fe      	b.n	8001390 <ADC1_2_IRQHandler>
	...

08001394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_Init+0x28>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_Init+0x28>)
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f000 fb2d 	bl	8001a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f000 f808 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b0:	f7ff fd40 	bl	8000e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40022000 	.word	0x40022000

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_InitTick+0x54>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_InitTick+0x58>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 fb45 	bl	8001a6e <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00e      	b.n	800140c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d80a      	bhi.n	800140a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 fb0d 	bl	8001a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001400:	4a06      	ldr	r2, [pc, #24]	; (800141c <HAL_InitTick+0x5c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000014 	.word	0x20000014
 8001418:	2000001c 	.word	0x2000001c
 800141c:	20000018 	.word	0x20000018

08001420 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_IncTick+0x1c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_IncTick+0x20>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a03      	ldr	r2, [pc, #12]	; (8001440 <HAL_IncTick+0x20>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	2000001c 	.word	0x2000001c
 8001440:	20000558 	.word	0x20000558

08001444 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return uwTick;
 8001448:	4b02      	ldr	r3, [pc, #8]	; (8001454 <HAL_GetTick+0x10>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	20000558 	.word	0x20000558

08001458 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e0be      	b.n	80015f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001484:	2b00      	cmp	r3, #0
 8001486:	d109      	bne.n	800149c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff fcfe 	bl	8000e98 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f9ab 	bl	80017f8 <ADC_ConversionStop_Disable>
 80014a2:	4603      	mov	r3, r0
 80014a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f040 8099 	bne.w	80015e6 <HAL_ADC_Init+0x18e>
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f040 8095 	bne.w	80015e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014c4:	f023 0302 	bic.w	r3, r3, #2
 80014c8:	f043 0202 	orr.w	r2, r3, #2
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	7b1b      	ldrb	r3, [r3, #12]
 80014de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014f0:	d003      	beq.n	80014fa <HAL_ADC_Init+0xa2>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d102      	bne.n	8001500 <HAL_ADC_Init+0xa8>
 80014fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014fe:	e000      	b.n	8001502 <HAL_ADC_Init+0xaa>
 8001500:	2300      	movs	r3, #0
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7d1b      	ldrb	r3, [r3, #20]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d119      	bne.n	8001544 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7b1b      	ldrb	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d109      	bne.n	800152c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	3b01      	subs	r3, #1
 800151e:	035a      	lsls	r2, r3, #13
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	e00b      	b.n	8001544 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001530:	f043 0220 	orr.w	r2, r3, #32
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153c:	f043 0201 	orr.w	r2, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	430a      	orrs	r2, r1
 8001556:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	4b28      	ldr	r3, [pc, #160]	; (8001600 <HAL_ADC_Init+0x1a8>)
 8001560:	4013      	ands	r3, r2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	68b9      	ldr	r1, [r7, #8]
 8001568:	430b      	orrs	r3, r1
 800156a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001574:	d003      	beq.n	800157e <HAL_ADC_Init+0x126>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d104      	bne.n	8001588 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	3b01      	subs	r3, #1
 8001584:	051b      	lsls	r3, r3, #20
 8001586:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	430a      	orrs	r2, r1
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_ADC_Init+0x1ac>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d10b      	bne.n	80015c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	f023 0303 	bic.w	r3, r3, #3
 80015ba:	f043 0201 	orr.w	r2, r3, #1
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015c2:	e018      	b.n	80015f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c8:	f023 0312 	bic.w	r3, r3, #18
 80015cc:	f043 0210 	orr.w	r2, r3, #16
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	f043 0201 	orr.w	r2, r3, #1
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015e4:	e007      	b.n	80015f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	f043 0210 	orr.w	r2, r3, #16
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	ffe1f7fd 	.word	0xffe1f7fd
 8001604:	ff1f0efe 	.word	0xff1f0efe

08001608 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001620:	2b01      	cmp	r3, #1
 8001622:	d101      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x20>
 8001624:	2302      	movs	r3, #2
 8001626:	e0dc      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1da>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b06      	cmp	r3, #6
 8001636:	d81c      	bhi.n	8001672 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	3b05      	subs	r3, #5
 800164a:	221f      	movs	r2, #31
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	4019      	ands	r1, r3
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	3b05      	subs	r3, #5
 8001664:	fa00 f203 	lsl.w	r2, r0, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	635a      	str	r2, [r3, #52]	; 0x34
 8001670:	e03c      	b.n	80016ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b0c      	cmp	r3, #12
 8001678:	d81c      	bhi.n	80016b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	3b23      	subs	r3, #35	; 0x23
 800168c:	221f      	movs	r2, #31
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	4019      	ands	r1, r3
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	6818      	ldr	r0, [r3, #0]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	3b23      	subs	r3, #35	; 0x23
 80016a6:	fa00 f203 	lsl.w	r2, r0, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	631a      	str	r2, [r3, #48]	; 0x30
 80016b2:	e01b      	b.n	80016ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	3b41      	subs	r3, #65	; 0x41
 80016c6:	221f      	movs	r2, #31
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	4019      	ands	r1, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	3b41      	subs	r3, #65	; 0x41
 80016e0:	fa00 f203 	lsl.w	r2, r0, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b09      	cmp	r3, #9
 80016f2:	d91c      	bls.n	800172e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68d9      	ldr	r1, [r3, #12]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	3b1e      	subs	r3, #30
 8001706:	2207      	movs	r2, #7
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	4019      	ands	r1, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	6898      	ldr	r0, [r3, #8]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	3b1e      	subs	r3, #30
 8001720:	fa00 f203 	lsl.w	r2, r0, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	e019      	b.n	8001762 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6919      	ldr	r1, [r3, #16]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	2207      	movs	r2, #7
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	4019      	ands	r1, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6898      	ldr	r0, [r3, #8]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	fa00 f203 	lsl.w	r2, r0, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b10      	cmp	r3, #16
 8001768:	d003      	beq.n	8001772 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800176e:	2b11      	cmp	r3, #17
 8001770:	d132      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <HAL_ADC_ConfigChannel+0x1e4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d125      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d126      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001798:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b10      	cmp	r3, #16
 80017a0:	d11a      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80017a8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ac:	0c9a      	lsrs	r2, r3, #18
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017b8:	e002      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	3b01      	subs	r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f9      	bne.n	80017ba <HAL_ADC_ConfigChannel+0x1b2>
 80017c6:	e007      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	f043 0220 	orr.w	r2, r3, #32
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	40012400 	.word	0x40012400
 80017f0:	20000014 	.word	0x20000014
 80017f4:	431bde83 	.word	0x431bde83

080017f8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b01      	cmp	r3, #1
 8001810:	d127      	bne.n	8001862 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0201 	bic.w	r2, r2, #1
 8001820:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001822:	f7ff fe0f 	bl	8001444 <HAL_GetTick>
 8001826:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001828:	e014      	b.n	8001854 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800182a:	f7ff fe0b 	bl	8001444 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d90d      	bls.n	8001854 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	f043 0210 	orr.w	r2, r3, #16
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	f043 0201 	orr.w	r2, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e007      	b.n	8001864 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b01      	cmp	r3, #1
 8001860:	d0e3      	beq.n	800182a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <__NVIC_SetPriorityGrouping>:
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001888:	4013      	ands	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800189c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189e:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	60d3      	str	r3, [r2, #12]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <__NVIC_GetPriorityGrouping+0x18>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	f003 0307 	and.w	r3, r3, #7
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	db0b      	blt.n	80018fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	f003 021f 	and.w	r2, r3, #31
 80018e8:	4906      	ldr	r1, [pc, #24]	; (8001904 <__NVIC_EnableIRQ+0x34>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	095b      	lsrs	r3, r3, #5
 80018f0:	2001      	movs	r0, #1
 80018f2:	fa00 f202 	lsl.w	r2, r0, r2
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d0:	d301      	bcc.n	80019d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00f      	b.n	80019f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <SysTick_Config+0x40>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019de:	210f      	movs	r1, #15
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f7ff ff90 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <SysTick_Config+0x40>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <SysTick_Config+0x40>)
 80019f0:	2207      	movs	r2, #7
 80019f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	e000e010 	.word	0xe000e010

08001a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff2d 	bl	800186c <__NVIC_SetPriorityGrouping>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a2c:	f7ff ff42 	bl	80018b4 <__NVIC_GetPriorityGrouping>
 8001a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	6978      	ldr	r0, [r7, #20]
 8001a38:	f7ff ff90 	bl	800195c <NVIC_EncodePriority>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff5f 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4a:	bf00      	nop
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff35 	bl	80018d0 <__NVIC_EnableIRQ>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ffa2 	bl	80019c0 <SysTick_Config>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b08b      	sub	sp, #44	; 0x2c
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a92:	2300      	movs	r3, #0
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a96:	2300      	movs	r3, #0
 8001a98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9a:	e127      	b.n	8001cec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	f040 8116 	bne.w	8001ce6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b12      	cmp	r3, #18
 8001ac0:	d034      	beq.n	8001b2c <HAL_GPIO_Init+0xa4>
 8001ac2:	2b12      	cmp	r3, #18
 8001ac4:	d80d      	bhi.n	8001ae2 <HAL_GPIO_Init+0x5a>
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d02b      	beq.n	8001b22 <HAL_GPIO_Init+0x9a>
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d804      	bhi.n	8001ad8 <HAL_GPIO_Init+0x50>
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d031      	beq.n	8001b36 <HAL_GPIO_Init+0xae>
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d01c      	beq.n	8001b10 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ad6:	e048      	b.n	8001b6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d043      	beq.n	8001b64 <HAL_GPIO_Init+0xdc>
 8001adc:	2b11      	cmp	r3, #17
 8001ade:	d01b      	beq.n	8001b18 <HAL_GPIO_Init+0x90>
          break;
 8001ae0:	e043      	b.n	8001b6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ae2:	4a89      	ldr	r2, [pc, #548]	; (8001d08 <HAL_GPIO_Init+0x280>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d026      	beq.n	8001b36 <HAL_GPIO_Init+0xae>
 8001ae8:	4a87      	ldr	r2, [pc, #540]	; (8001d08 <HAL_GPIO_Init+0x280>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d806      	bhi.n	8001afc <HAL_GPIO_Init+0x74>
 8001aee:	4a87      	ldr	r2, [pc, #540]	; (8001d0c <HAL_GPIO_Init+0x284>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d020      	beq.n	8001b36 <HAL_GPIO_Init+0xae>
 8001af4:	4a86      	ldr	r2, [pc, #536]	; (8001d10 <HAL_GPIO_Init+0x288>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d01d      	beq.n	8001b36 <HAL_GPIO_Init+0xae>
          break;
 8001afa:	e036      	b.n	8001b6a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001afc:	4a85      	ldr	r2, [pc, #532]	; (8001d14 <HAL_GPIO_Init+0x28c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d019      	beq.n	8001b36 <HAL_GPIO_Init+0xae>
 8001b02:	4a85      	ldr	r2, [pc, #532]	; (8001d18 <HAL_GPIO_Init+0x290>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d016      	beq.n	8001b36 <HAL_GPIO_Init+0xae>
 8001b08:	4a84      	ldr	r2, [pc, #528]	; (8001d1c <HAL_GPIO_Init+0x294>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0xae>
          break;
 8001b0e:	e02c      	b.n	8001b6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	623b      	str	r3, [r7, #32]
          break;
 8001b16:	e028      	b.n	8001b6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	623b      	str	r3, [r7, #32]
          break;
 8001b20:	e023      	b.n	8001b6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	3308      	adds	r3, #8
 8001b28:	623b      	str	r3, [r7, #32]
          break;
 8001b2a:	e01e      	b.n	8001b6a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	330c      	adds	r3, #12
 8001b32:	623b      	str	r3, [r7, #32]
          break;
 8001b34:	e019      	b.n	8001b6a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d102      	bne.n	8001b44 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	623b      	str	r3, [r7, #32]
          break;
 8001b42:	e012      	b.n	8001b6a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	611a      	str	r2, [r3, #16]
          break;
 8001b56:	e008      	b.n	8001b6a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	615a      	str	r2, [r3, #20]
          break;
 8001b62:	e002      	b.n	8001b6a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
          break;
 8001b68:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	2bff      	cmp	r3, #255	; 0xff
 8001b6e:	d801      	bhi.n	8001b74 <HAL_GPIO_Init+0xec>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	e001      	b.n	8001b78 <HAL_GPIO_Init+0xf0>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3304      	adds	r3, #4
 8001b78:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2bff      	cmp	r3, #255	; 0xff
 8001b7e:	d802      	bhi.n	8001b86 <HAL_GPIO_Init+0xfe>
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_Init+0x104>
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	3b08      	subs	r3, #8
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	210f      	movs	r1, #15
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	6a39      	ldr	r1, [r7, #32]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 8096 	beq.w	8001ce6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bba:	4b59      	ldr	r3, [pc, #356]	; (8001d20 <HAL_GPIO_Init+0x298>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	4a58      	ldr	r2, [pc, #352]	; (8001d20 <HAL_GPIO_Init+0x298>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6193      	str	r3, [r2, #24]
 8001bc6:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <HAL_GPIO_Init+0x298>)
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bd2:	4a54      	ldr	r2, [pc, #336]	; (8001d24 <HAL_GPIO_Init+0x29c>)
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bde:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	220f      	movs	r2, #15
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4b      	ldr	r2, [pc, #300]	; (8001d28 <HAL_GPIO_Init+0x2a0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d013      	beq.n	8001c26 <HAL_GPIO_Init+0x19e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4a      	ldr	r2, [pc, #296]	; (8001d2c <HAL_GPIO_Init+0x2a4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00d      	beq.n	8001c22 <HAL_GPIO_Init+0x19a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a49      	ldr	r2, [pc, #292]	; (8001d30 <HAL_GPIO_Init+0x2a8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d007      	beq.n	8001c1e <HAL_GPIO_Init+0x196>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a48      	ldr	r2, [pc, #288]	; (8001d34 <HAL_GPIO_Init+0x2ac>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d101      	bne.n	8001c1a <HAL_GPIO_Init+0x192>
 8001c16:	2303      	movs	r3, #3
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x1a0>
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e004      	b.n	8001c28 <HAL_GPIO_Init+0x1a0>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e002      	b.n	8001c28 <HAL_GPIO_Init+0x1a0>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_GPIO_Init+0x1a0>
 8001c26:	2300      	movs	r3, #0
 8001c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2a:	f002 0203 	and.w	r2, r2, #3
 8001c2e:	0092      	lsls	r2, r2, #2
 8001c30:	4093      	lsls	r3, r2
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c38:	493a      	ldr	r1, [pc, #232]	; (8001d24 <HAL_GPIO_Init+0x29c>)
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d006      	beq.n	8001c60 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c52:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4938      	ldr	r1, [pc, #224]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]
 8001c5e:	e006      	b.n	8001c6e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c60:	4b35      	ldr	r3, [pc, #212]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	4933      	ldr	r1, [pc, #204]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d006      	beq.n	8001c88 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c7a:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	492e      	ldr	r1, [pc, #184]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]
 8001c86:	e006      	b.n	8001c96 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	4929      	ldr	r1, [pc, #164]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d006      	beq.n	8001cb0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ca2:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	4924      	ldr	r1, [pc, #144]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	608b      	str	r3, [r1, #8]
 8001cae:	e006      	b.n	8001cbe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cb0:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	491f      	ldr	r1, [pc, #124]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d006      	beq.n	8001cd8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cca:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	491a      	ldr	r1, [pc, #104]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60cb      	str	r3, [r1, #12]
 8001cd6:	e006      	b.n	8001ce6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	4915      	ldr	r1, [pc, #84]	; (8001d38 <HAL_GPIO_Init+0x2b0>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	3301      	adds	r3, #1
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f47f aed0 	bne.w	8001a9c <HAL_GPIO_Init+0x14>
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	372c      	adds	r7, #44	; 0x2c
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	10210000 	.word	0x10210000
 8001d0c:	10110000 	.word	0x10110000
 8001d10:	10120000 	.word	0x10120000
 8001d14:	10310000 	.word	0x10310000
 8001d18:	10320000 	.word	0x10320000
 8001d1c:	10220000 	.word	0x10220000
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40010800 	.word	0x40010800
 8001d2c:	40010c00 	.word	0x40010c00
 8001d30:	40011000 	.word	0x40011000
 8001d34:	40011400 	.word	0x40011400
 8001d38:	40010400 	.word	0x40010400

08001d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d4c:	787b      	ldrb	r3, [r7, #1]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d52:	887a      	ldrh	r2, [r7, #2]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d58:	e003      	b.n	8001d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d5a:	887b      	ldrh	r3, [r7, #2]
 8001d5c:	041a      	lsls	r2, r3, #16
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	611a      	str	r2, [r3, #16]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e11f      	b.n	8001fbe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff f8bc 	bl	8000f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2224      	movs	r2, #36	; 0x24
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dd0:	f002 f85e 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 8001dd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4a7b      	ldr	r2, [pc, #492]	; (8001fc8 <HAL_I2C_Init+0x25c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d807      	bhi.n	8001df0 <HAL_I2C_Init+0x84>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4a7a      	ldr	r2, [pc, #488]	; (8001fcc <HAL_I2C_Init+0x260>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	bf94      	ite	ls
 8001de8:	2301      	movls	r3, #1
 8001dea:	2300      	movhi	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	e006      	b.n	8001dfe <HAL_I2C_Init+0x92>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4a77      	ldr	r2, [pc, #476]	; (8001fd0 <HAL_I2C_Init+0x264>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	bf94      	ite	ls
 8001df8:	2301      	movls	r3, #1
 8001dfa:	2300      	movhi	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0db      	b.n	8001fbe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4a72      	ldr	r2, [pc, #456]	; (8001fd4 <HAL_I2C_Init+0x268>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	0c9b      	lsrs	r3, r3, #18
 8001e10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	4a64      	ldr	r2, [pc, #400]	; (8001fc8 <HAL_I2C_Init+0x25c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d802      	bhi.n	8001e40 <HAL_I2C_Init+0xd4>
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	e009      	b.n	8001e54 <HAL_I2C_Init+0xe8>
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e46:	fb02 f303 	mul.w	r3, r2, r3
 8001e4a:	4a63      	ldr	r2, [pc, #396]	; (8001fd8 <HAL_I2C_Init+0x26c>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	099b      	lsrs	r3, r3, #6
 8001e52:	3301      	adds	r3, #1
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4956      	ldr	r1, [pc, #344]	; (8001fc8 <HAL_I2C_Init+0x25c>)
 8001e70:	428b      	cmp	r3, r1
 8001e72:	d80d      	bhi.n	8001e90 <HAL_I2C_Init+0x124>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1e59      	subs	r1, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e82:	3301      	adds	r3, #1
 8001e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	bf38      	it	cc
 8001e8c:	2304      	movcc	r3, #4
 8001e8e:	e04f      	b.n	8001f30 <HAL_I2C_Init+0x1c4>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d111      	bne.n	8001ebc <HAL_I2C_Init+0x150>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	1e58      	subs	r0, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6859      	ldr	r1, [r3, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	440b      	add	r3, r1
 8001ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	e012      	b.n	8001ee2 <HAL_I2C_Init+0x176>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1e58      	subs	r0, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	0099      	lsls	r1, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bf0c      	ite	eq
 8001edc:	2301      	moveq	r3, #1
 8001ede:	2300      	movne	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_I2C_Init+0x17e>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e022      	b.n	8001f30 <HAL_I2C_Init+0x1c4>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10e      	bne.n	8001f10 <HAL_I2C_Init+0x1a4>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1e58      	subs	r0, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6859      	ldr	r1, [r3, #4]
 8001efa:	460b      	mov	r3, r1
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	440b      	add	r3, r1
 8001f00:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f04:	3301      	adds	r3, #1
 8001f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f0e:	e00f      	b.n	8001f30 <HAL_I2C_Init+0x1c4>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	1e58      	subs	r0, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6859      	ldr	r1, [r3, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	0099      	lsls	r1, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f26:	3301      	adds	r3, #1
 8001f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	6809      	ldr	r1, [r1, #0]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69da      	ldr	r2, [r3, #28]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6911      	ldr	r1, [r2, #16]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68d2      	ldr	r2, [r2, #12]
 8001f6a:	4311      	orrs	r1, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	430b      	orrs	r3, r1
 8001f72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695a      	ldr	r2, [r3, #20]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	000186a0 	.word	0x000186a0
 8001fcc:	001e847f 	.word	0x001e847f
 8001fd0:	003d08ff 	.word	0x003d08ff
 8001fd4:	431bde83 	.word	0x431bde83
 8001fd8:	10624dd3 	.word	0x10624dd3

08001fdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fde:	b08b      	sub	sp, #44	; 0x2c
 8001fe0:	af06      	add	r7, sp, #24
 8001fe2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e0fd      	b.n	80021ea <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f006 f97e 	bl	8008304 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2203      	movs	r2, #3
 800200c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f002 fbed 	bl	80047f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	687e      	ldr	r6, [r7, #4]
 8002022:	466d      	mov	r5, sp
 8002024:	f106 0410 	add.w	r4, r6, #16
 8002028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	602b      	str	r3, [r5, #0]
 8002030:	1d33      	adds	r3, r6, #4
 8002032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002034:	6838      	ldr	r0, [r7, #0]
 8002036:	f002 fbb7 	bl	80047a8 <USB_CoreInit>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0ce      	b.n	80021ea <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f002 fbe8 	bl	8004828 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	e04c      	b.n	80020f8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	3301      	adds	r3, #1
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	b298      	uxth	r0, r3
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	440b      	add	r3, r1
 800209a:	3336      	adds	r3, #54	; 0x36
 800209c:	4602      	mov	r2, r0
 800209e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	440b      	add	r3, r1
 80020b0:	3303      	adds	r3, #3
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	440b      	add	r3, r1
 80020c4:	3338      	adds	r3, #56	; 0x38
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	440b      	add	r3, r1
 80020d8:	333c      	adds	r3, #60	; 0x3c
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	440b      	add	r3, r1
 80020ec:	3340      	adds	r3, #64	; 0x40
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	3301      	adds	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d3ad      	bcc.n	800205e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]
 8002106:	e044      	b.n	8002192 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	440b      	add	r3, r1
 8002116:	f203 1369 	addw	r3, r3, #361	; 0x169
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	440b      	add	r3, r1
 800212c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	440b      	add	r3, r1
 8002184:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	3301      	adds	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	d3b5      	bcc.n	8002108 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	603b      	str	r3, [r7, #0]
 80021a2:	687e      	ldr	r6, [r7, #4]
 80021a4:	466d      	mov	r5, sp
 80021a6:	f106 0410 	add.w	r4, r6, #16
 80021aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	602b      	str	r3, [r5, #0]
 80021b2:	1d33      	adds	r3, r6, #4
 80021b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b6:	6838      	ldr	r0, [r7, #0]
 80021b8:	f002 fb42 	bl	8004840 <USB_DevInit>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2202      	movs	r2, #2
 80021c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00d      	b.n	80021ea <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f004 fadc 	bl	80067a0 <USB_DevDisconnect>

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_PCD_Start+0x16>
 8002204:	2302      	movs	r3, #2
 8002206:	e016      	b.n	8002236 <HAL_PCD_Start+0x44>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f002 fad7 	bl	80047c8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800221a:	2101      	movs	r1, #1
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f006 fae4 	bl	80087ea <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f004 fab0 	bl	800678c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b088      	sub	sp, #32
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f004 fab2 	bl	80067b4 <USB_ReadInterrupts>
 8002250:	4603      	mov	r3, r0
 8002252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800225a:	d102      	bne.n	8002262 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fb61 	bl	8002924 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f004 faa4 	bl	80067b4 <USB_ReadInterrupts>
 800226c:	4603      	mov	r3, r0
 800226e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002276:	d112      	bne.n	800229e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002280:	b29a      	uxth	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800228a:	b292      	uxth	r2, r2
 800228c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f006 f8b2 	bl	80083fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002296:	2100      	movs	r1, #0
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f925 	bl	80024e8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f004 fa86 	bl	80067b4 <USB_ReadInterrupts>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022b2:	d10b      	bne.n	80022cc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022bc:	b29a      	uxth	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022c6:	b292      	uxth	r2, r2
 80022c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f004 fa6f 	bl	80067b4 <USB_ReadInterrupts>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022e0:	d10b      	bne.n	80022fa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022f4:	b292      	uxth	r2, r2
 80022f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f004 fa58 	bl	80067b4 <USB_ReadInterrupts>
 8002304:	4603      	mov	r3, r0
 8002306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800230a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800230e:	d126      	bne.n	800235e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002318:	b29a      	uxth	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0204 	bic.w	r2, r2, #4
 8002322:	b292      	uxth	r2, r2
 8002324:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002330:	b29a      	uxth	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0208 	bic.w	r2, r2, #8
 800233a:	b292      	uxth	r2, r2
 800233c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f006 f893 	bl	800846c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800234e:	b29a      	uxth	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002358:	b292      	uxth	r2, r2
 800235a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f004 fa26 	bl	80067b4 <USB_ReadInterrupts>
 8002368:	4603      	mov	r3, r0
 800236a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800236e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002372:	f040 8084 	bne.w	800247e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002376:	2300      	movs	r3, #0
 8002378:	77fb      	strb	r3, [r7, #31]
 800237a:	e011      	b.n	80023a0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	7ffb      	ldrb	r3, [r7, #31]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	441a      	add	r2, r3
 8002388:	7ffb      	ldrb	r3, [r7, #31]
 800238a:	8812      	ldrh	r2, [r2, #0]
 800238c:	b292      	uxth	r2, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	f107 0120 	add.w	r1, r7, #32
 8002394:	440b      	add	r3, r1
 8002396:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800239a:	7ffb      	ldrb	r3, [r7, #31]
 800239c:	3301      	adds	r3, #1
 800239e:	77fb      	strb	r3, [r7, #31]
 80023a0:	7ffb      	ldrb	r3, [r7, #31]
 80023a2:	2b07      	cmp	r3, #7
 80023a4:	d9ea      	bls.n	800237c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0201 	orr.w	r2, r2, #1
 80023b8:	b292      	uxth	r2, r2
 80023ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0201 	bic.w	r2, r2, #1
 80023d0:	b292      	uxth	r2, r2
 80023d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80023d6:	bf00      	nop
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f6      	beq.n	80023d8 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fc:	b292      	uxth	r2, r2
 80023fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002402:	2300      	movs	r3, #0
 8002404:	77fb      	strb	r3, [r7, #31]
 8002406:	e010      	b.n	800242a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002408:	7ffb      	ldrb	r3, [r7, #31]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	4611      	mov	r1, r2
 8002410:	7ffa      	ldrb	r2, [r7, #31]
 8002412:	0092      	lsls	r2, r2, #2
 8002414:	440a      	add	r2, r1
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	f107 0120 	add.w	r1, r7, #32
 800241c:	440b      	add	r3, r1
 800241e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002422:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002424:	7ffb      	ldrb	r3, [r7, #31]
 8002426:	3301      	adds	r3, #1
 8002428:	77fb      	strb	r3, [r7, #31]
 800242a:	7ffb      	ldrb	r3, [r7, #31]
 800242c:	2b07      	cmp	r3, #7
 800242e:	d9eb      	bls.n	8002408 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002438:	b29a      	uxth	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0208 	orr.w	r2, r2, #8
 8002442:	b292      	uxth	r2, r2
 8002444:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002450:	b29a      	uxth	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800245a:	b292      	uxth	r2, r2
 800245c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002468:	b29a      	uxth	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0204 	orr.w	r2, r2, #4
 8002472:	b292      	uxth	r2, r2
 8002474:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f005 ffdd 	bl	8008438 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f004 f996 	bl	80067b4 <USB_ReadInterrupts>
 8002488:	4603      	mov	r3, r0
 800248a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800248e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002492:	d10e      	bne.n	80024b2 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800249c:	b29a      	uxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024a6:	b292      	uxth	r2, r2
 80024a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f005 ff96 	bl	80083de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f004 f97c 	bl	80067b4 <USB_ReadInterrupts>
 80024bc:	4603      	mov	r3, r0
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c6:	d10b      	bne.n	80024e0 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024da:	b292      	uxth	r2, r2
 80024dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80024e0:	bf00      	nop
 80024e2:	3720      	adds	r7, #32
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_PCD_SetAddress+0x1a>
 80024fe:	2302      	movs	r3, #2
 8002500:	e013      	b.n	800252a <HAL_PCD_SetAddress+0x42>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	78fa      	ldrb	r2, [r7, #3]
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f004 f923 	bl	8006766 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	4608      	mov	r0, r1
 800253c:	4611      	mov	r1, r2
 800253e:	461a      	mov	r2, r3
 8002540:	4603      	mov	r3, r0
 8002542:	70fb      	strb	r3, [r7, #3]
 8002544:	460b      	mov	r3, r1
 8002546:	803b      	strh	r3, [r7, #0]
 8002548:	4613      	mov	r3, r2
 800254a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002554:	2b00      	cmp	r3, #0
 8002556:	da0e      	bge.n	8002576 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	4413      	add	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	705a      	strb	r2, [r3, #1]
 8002574:	e00e      	b.n	8002594 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002576:	78fb      	ldrb	r3, [r7, #3]
 8002578:	f003 0207 	and.w	r2, r3, #7
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	4413      	add	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	b2da      	uxtb	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025a0:	883a      	ldrh	r2, [r7, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	78ba      	ldrb	r2, [r7, #2]
 80025aa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	785b      	ldrb	r3, [r3, #1]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d004      	beq.n	80025be <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80025be:	78bb      	ldrb	r3, [r7, #2]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d102      	bne.n	80025ca <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_PCD_EP_Open+0xa6>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e00e      	b.n	80025f6 <HAL_PCD_EP_Open+0xc4>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68f9      	ldr	r1, [r7, #12]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 f94a 	bl	8004880 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80025f4:	7afb      	ldrb	r3, [r7, #11]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	460b      	mov	r3, r1
 8002608:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800260a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800260e:	2b00      	cmp	r3, #0
 8002610:	da0e      	bge.n	8002630 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	705a      	strb	r2, [r3, #1]
 800262e:	e00e      	b.n	800264e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	f003 0207 	and.w	r2, r3, #7
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800264e:	78fb      	ldrb	r3, [r7, #3]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	b2da      	uxtb	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_PCD_EP_Close+0x6a>
 8002664:	2302      	movs	r3, #2
 8002666:	e00e      	b.n	8002686 <HAL_PCD_EP_Close+0x88>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68f9      	ldr	r1, [r7, #12]
 8002676:	4618      	mov	r0, r3
 8002678:	f002 fc6c 	bl	8004f54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	460b      	mov	r3, r1
 800269c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800269e:	7afb      	ldrb	r3, [r7, #11]
 80026a0:	f003 0207 	and.w	r2, r3, #7
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4413      	add	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2200      	movs	r2, #0
 80026c6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2200      	movs	r2, #0
 80026cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ce:	7afb      	ldrb	r3, [r7, #11]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026da:	7afb      	ldrb	r3, [r7, #11]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d106      	bne.n	80026f2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6979      	ldr	r1, [r7, #20]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f002 fe1e 	bl	800532c <USB_EPStartXfer>
 80026f0:	e005      	b.n	80026fe <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6979      	ldr	r1, [r7, #20]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f002 fe17 	bl	800532c <USB_EPStartXfer>
  }

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	f003 0207 	and.w	r2, r3, #7
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	440b      	add	r3, r1
 8002726:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b086      	sub	sp, #24
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	603b      	str	r3, [r7, #0]
 8002742:	460b      	mov	r3, r1
 8002744:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002746:	7afb      	ldrb	r3, [r7, #11]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4413      	add	r3, r2
 800275a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2200      	movs	r2, #0
 800277a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2201      	movs	r2, #1
 8002780:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002782:	7afb      	ldrb	r3, [r7, #11]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	b2da      	uxtb	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800278e:	7afb      	ldrb	r3, [r7, #11]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	2b00      	cmp	r3, #0
 8002796:	d106      	bne.n	80027a6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6979      	ldr	r1, [r7, #20]
 800279e:	4618      	mov	r0, r3
 80027a0:	f002 fdc4 	bl	800532c <USB_EPStartXfer>
 80027a4:	e005      	b.n	80027b2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6979      	ldr	r1, [r7, #20]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f002 fdbd 	bl	800532c <USB_EPStartXfer>
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	f003 0207 	and.w	r2, r3, #7
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d901      	bls.n	80027da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e04c      	b.n	8002874 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	da0e      	bge.n	8002800 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	705a      	strb	r2, [r3, #1]
 80027fe:	e00c      	b.n	800281a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	b2da      	uxtb	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_PCD_EP_SetStall+0x7e>
 8002836:	2302      	movs	r3, #2
 8002838:	e01c      	b.n	8002874 <HAL_PCD_EP_SetStall+0xb8>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68f9      	ldr	r1, [r7, #12]
 8002848:	4618      	mov	r0, r3
 800284a:	f003 fe8f 	bl	800656c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	2b00      	cmp	r3, #0
 8002856:	d108      	bne.n	800286a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002862:	4619      	mov	r1, r3
 8002864:	4610      	mov	r0, r2
 8002866:	f003 ffb4 	bl	80067d2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	f003 020f 	and.w	r2, r3, #15
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	429a      	cmp	r2, r3
 8002894:	d901      	bls.n	800289a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e040      	b.n	800291c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800289a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	da0e      	bge.n	80028c0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2201      	movs	r2, #1
 80028bc:	705a      	strb	r2, [r3, #1]
 80028be:	e00e      	b.n	80028de <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028c0:	78fb      	ldrb	r3, [r7, #3]
 80028c2:	f003 0207 	and.w	r2, r3, #7
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <HAL_PCD_EP_ClrStall+0x82>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e00e      	b.n	800291c <HAL_PCD_EP_ClrStall+0xa0>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68f9      	ldr	r1, [r7, #12]
 800290c:	4618      	mov	r0, r3
 800290e:	f003 fe7d 	bl	800660c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08e      	sub	sp, #56	; 0x38
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800292c:	e2df      	b.n	8002eee <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002936:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002938:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002944:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002948:	2b00      	cmp	r3, #0
 800294a:	f040 8158 	bne.w	8002bfe <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800294e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b00      	cmp	r3, #0
 8002956:	d152      	bne.n	80029fe <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002968:	81fb      	strh	r3, [r7, #14]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	89fb      	ldrh	r3, [r7, #14]
 8002970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002978:	b29b      	uxth	r3, r3
 800297a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3328      	adds	r3, #40	; 0x28
 8002980:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800298a:	b29b      	uxth	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4413      	add	r3, r2
 8002996:	3302      	adds	r3, #2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	441a      	add	r2, r3
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80029bc:	2100      	movs	r1, #0
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f005 fcf3 	bl	80083aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 828e 	beq.w	8002eee <PCD_EP_ISR_Handler+0x5ca>
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f040 8289 	bne.w	8002eee <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	b292      	uxth	r2, r2
 80029f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029fc:	e277      	b.n	8002eee <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002a0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d034      	beq.n	8002a82 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3306      	adds	r3, #6
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f003 ff0a 	bl	8006870 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a68:	4013      	ands	r3, r2
 8002a6a:	823b      	strh	r3, [r7, #16]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	8a3a      	ldrh	r2, [r7, #16]
 8002a72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a76:	b292      	uxth	r2, r2
 8002a78:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f005 fc68 	bl	8008350 <HAL_PCD_SetupStageCallback>
 8002a80:	e235      	b.n	8002eee <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a82:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f280 8231 	bge.w	8002eee <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a98:	4013      	ands	r3, r2
 8002a9a:	83bb      	strh	r3, [r7, #28]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	8bba      	ldrh	r2, [r7, #28]
 8002aa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002aa6:	b292      	uxth	r2, r2
 8002aa8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4413      	add	r3, r2
 8002abe:	3306      	adds	r3, #6
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d019      	beq.n	8002b12 <PCD_EP_ISR_Handler+0x1ee>
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d015      	beq.n	8002b12 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	6959      	ldr	r1, [r3, #20]
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f003 feba 	bl	8006870 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	695a      	ldr	r2, [r3, #20]
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	441a      	add	r2, r3
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f005 fc31 	bl	8008374 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	61bb      	str	r3, [r7, #24]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	4413      	add	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d112      	bne.n	8002b60 <PCD_EP_ISR_Handler+0x23c>
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	801a      	strh	r2, [r3, #0]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	801a      	strh	r2, [r3, #0]
 8002b5e:	e02f      	b.n	8002bc0 <PCD_EP_ISR_Handler+0x29c>
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b3e      	cmp	r3, #62	; 0x3e
 8002b66:	d813      	bhi.n	8002b90 <PCD_EP_ISR_Handler+0x26c>
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	085b      	lsrs	r3, r3, #1
 8002b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <PCD_EP_ISR_Handler+0x25e>
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	3301      	adds	r3, #1
 8002b80:	633b      	str	r3, [r7, #48]	; 0x30
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	029b      	lsls	r3, r3, #10
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	e017      	b.n	8002bc0 <PCD_EP_ISR_Handler+0x29c>
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <PCD_EP_ISR_Handler+0x286>
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8002baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	029b      	lsls	r3, r3, #10
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd0:	827b      	strh	r3, [r7, #18]
 8002bd2:	8a7b      	ldrh	r3, [r7, #18]
 8002bd4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002bd8:	827b      	strh	r3, [r7, #18]
 8002bda:	8a7b      	ldrh	r3, [r7, #18]
 8002bdc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002be0:	827b      	strh	r3, [r7, #18]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	8a7b      	ldrh	r3, [r7, #18]
 8002be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	8013      	strh	r3, [r2, #0]
 8002bfc:	e177      	b.n	8002eee <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c10:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f280 80ea 	bge.w	8002dee <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c30:	4013      	ands	r3, r2
 8002c32:	853b      	strh	r3, [r7, #40]	; 0x28
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002c44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c48:	b292      	uxth	r2, r2
 8002c4a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002c4c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	4413      	add	r3, r2
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	7b1b      	ldrb	r3, [r3, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d122      	bne.n	8002cb0 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3306      	adds	r3, #6
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c92:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002c94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8087 	beq.w	8002daa <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	6959      	ldr	r1, [r3, #20]
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	88da      	ldrh	r2, [r3, #6]
 8002ca8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002caa:	f003 fde1 	bl	8006870 <USB_ReadPMA>
 8002cae:	e07c      	b.n	8002daa <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	78db      	ldrb	r3, [r3, #3]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d108      	bne.n	8002cca <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002cb8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002cba:	461a      	mov	r2, r3
 8002cbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f923 	bl	8002f0a <HAL_PCD_EP_DB_Receive>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002cc8:	e06f      	b.n	8002daa <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce4:	847b      	strh	r3, [r7, #34]	; 0x22
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	441a      	add	r2, r3
 8002cf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d021      	beq.n	8002d68 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	3302      	adds	r3, #2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d4c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002d4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d02a      	beq.n	8002daa <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	6959      	ldr	r1, [r3, #20]
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	891a      	ldrh	r2, [r3, #8]
 8002d60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d62:	f003 fd85 	bl	8006870 <USB_ReadPMA>
 8002d66:	e020      	b.n	8002daa <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3306      	adds	r3, #6
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d90:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002d92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	6959      	ldr	r1, [r3, #20]
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	895a      	ldrh	r2, [r3, #10]
 8002da4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002da6:	f003 fd63 	bl	8006870 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	69da      	ldr	r2, [r3, #28]
 8002dae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002db0:	441a      	add	r2, r3
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002dbc:	441a      	add	r2, r3
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <PCD_EP_ISR_Handler+0x4b0>
 8002dca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d206      	bcs.n	8002de2 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	4619      	mov	r1, r3
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f005 faca 	bl	8008374 <HAL_PCD_DataOutStageCallback>
 8002de0:	e005      	b.n	8002dee <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002de8:	4618      	mov	r0, r3
 8002dea:	f002 fa9f 	bl	800532c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002dee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d07a      	beq.n	8002eee <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002df8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	461a      	mov	r2, r3
 8002e12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e26:	843b      	strh	r3, [r7, #32]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	441a      	add	r2, r3
 8002e36:	8c3b      	ldrh	r3, [r7, #32]
 8002e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	78db      	ldrb	r3, [r3, #3]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d108      	bne.n	8002e5e <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d146      	bne.n	8002ee2 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002e54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d141      	bne.n	8002ee2 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	3302      	adds	r3, #2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e86:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	8bfb      	ldrh	r3, [r7, #30]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d906      	bls.n	8002ea0 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	8bfb      	ldrh	r3, [r7, #30]
 8002e98:	1ad2      	subs	r2, r2, r3
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	619a      	str	r2, [r3, #24]
 8002e9e:	e002      	b.n	8002ea6 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f005 fa78 	bl	80083aa <HAL_PCD_DataInStageCallback>
 8002eba:	e018      	b.n	8002eee <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	8bfb      	ldrh	r3, [r7, #30]
 8002ec2:	441a      	add	r2, r3
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	69da      	ldr	r2, [r3, #28]
 8002ecc:	8bfb      	ldrh	r3, [r7, #30]
 8002ece:	441a      	add	r2, r3
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eda:	4618      	mov	r0, r3
 8002edc:	f002 fa26 	bl	800532c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002ee0:	e005      	b.n	8002eee <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ee2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f91b 	bl	8003124 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	b21b      	sxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f6ff ad17 	blt.w	800292e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3738      	adds	r7, #56	; 0x38
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b088      	sub	sp, #32
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	4613      	mov	r3, r2
 8002f16:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d07e      	beq.n	8003020 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	3302      	adds	r3, #2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f4a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	699a      	ldr	r2, [r3, #24]
 8002f50:	8b7b      	ldrh	r3, [r7, #26]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d306      	bcc.n	8002f64 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	8b7b      	ldrh	r3, [r7, #26]
 8002f5c:	1ad2      	subs	r2, r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	619a      	str	r2, [r3, #24]
 8002f62:	e002      	b.n	8002f6a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2200      	movs	r2, #0
 8002f68:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d123      	bne.n	8002fba <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8c:	833b      	strh	r3, [r7, #24]
 8002f8e:	8b3b      	ldrh	r3, [r7, #24]
 8002f90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f94:	833b      	strh	r3, [r7, #24]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	441a      	add	r2, r3
 8002fa4:	8b3b      	ldrh	r3, [r7, #24]
 8002fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01f      	beq.n	8003004 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fde:	82fb      	strh	r3, [r7, #22]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	441a      	add	r2, r3
 8002fee:	8afb      	ldrh	r3, [r7, #22]
 8002ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ffc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003000:	b29b      	uxth	r3, r3
 8003002:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003004:	8b7b      	ldrh	r3, [r7, #26]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 8087 	beq.w	800311a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	6959      	ldr	r1, [r3, #20]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	891a      	ldrh	r2, [r3, #8]
 8003018:	8b7b      	ldrh	r3, [r7, #26]
 800301a:	f003 fc29 	bl	8006870 <USB_ReadPMA>
 800301e:	e07c      	b.n	800311a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003028:	b29b      	uxth	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	3306      	adds	r3, #6
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	4413      	add	r3, r2
 800303e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003048:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	8b7b      	ldrh	r3, [r7, #26]
 8003050:	429a      	cmp	r2, r3
 8003052:	d306      	bcc.n	8003062 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	699a      	ldr	r2, [r3, #24]
 8003058:	8b7b      	ldrh	r3, [r7, #26]
 800305a:	1ad2      	subs	r2, r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	619a      	str	r2, [r3, #24]
 8003060:	e002      	b.n	8003068 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2200      	movs	r2, #0
 8003066:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d123      	bne.n	80030b8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	b29b      	uxth	r3, r3
 8003082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308a:	83fb      	strh	r3, [r7, #30]
 800308c:	8bfb      	ldrh	r3, [r7, #30]
 800308e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003092:	83fb      	strh	r3, [r7, #30]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	441a      	add	r2, r3
 80030a2:	8bfb      	ldrh	r3, [r7, #30]
 80030a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d11f      	bne.n	8003102 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030dc:	83bb      	strh	r3, [r7, #28]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	441a      	add	r2, r3
 80030ec:	8bbb      	ldrh	r3, [r7, #28]
 80030ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030fe:	b29b      	uxth	r3, r3
 8003100:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003102:	8b7b      	ldrh	r3, [r7, #26]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	6959      	ldr	r1, [r3, #20]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	895a      	ldrh	r2, [r3, #10]
 8003114:	8b7b      	ldrh	r3, [r7, #26]
 8003116:	f003 fbab 	bl	8006870 <USB_ReadPMA>
    }
  }

  return count;
 800311a:	8b7b      	ldrh	r3, [r7, #26]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3720      	adds	r7, #32
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b092      	sub	sp, #72	; 0x48
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	4613      	mov	r3, r2
 8003130:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 8132 	beq.w	80033a2 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003146:	b29b      	uxth	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4413      	add	r3, r2
 8003152:	3302      	adds	r3, #2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003166:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	699a      	ldr	r2, [r3, #24]
 800316c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800316e:	429a      	cmp	r2, r3
 8003170:	d906      	bls.n	8003180 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003178:	1ad2      	subs	r2, r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	619a      	str	r2, [r3, #24]
 800317e:	e002      	b.n	8003186 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2200      	movs	r2, #0
 8003184:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d12c      	bne.n	80031e8 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	4619      	mov	r1, r3
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f005 f908 	bl	80083aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 822f 	beq.w	8003604 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c0:	827b      	strh	r3, [r7, #18]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	441a      	add	r2, r3
 80031d0:	8a7b      	ldrh	r3, [r7, #18]
 80031d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	8013      	strh	r3, [r2, #0]
 80031e6:	e20d      	b.n	8003604 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d01f      	beq.n	8003232 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	441a      	add	r2, r3
 800321c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800321e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800322a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800322e:	b29b      	uxth	r3, r3
 8003230:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003238:	2b01      	cmp	r3, #1
 800323a:	f040 81e3 	bne.w	8003604 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003244:	441a      	add	r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003250:	441a      	add	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	6a1a      	ldr	r2, [r3, #32]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	429a      	cmp	r2, r3
 8003260:	d309      	bcc.n	8003276 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	6a1a      	ldr	r2, [r3, #32]
 800326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326e:	1ad2      	subs	r2, r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	621a      	str	r2, [r3, #32]
 8003274:	e014      	b.n	80032a0 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 800327e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003280:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800328a:	e009      	b.n	80032a0 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2200      	movs	r2, #0
 800329e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	785b      	ldrb	r3, [r3, #1]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d155      	bne.n	8003354 <HAL_PCD_EP_DB_Transmit+0x230>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	4413      	add	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	011a      	lsls	r2, r3, #4
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	4413      	add	r3, r2
 80032ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d112      	bne.n	80032fc <HAL_PCD_EP_DB_Transmit+0x1d8>
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	801a      	strh	r2, [r3, #0]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	801a      	strh	r2, [r3, #0]
 80032fa:	e047      	b.n	800338c <HAL_PCD_EP_DB_Transmit+0x268>
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	2b3e      	cmp	r3, #62	; 0x3e
 8003300:	d811      	bhi.n	8003326 <HAL_PCD_EP_DB_Transmit+0x202>
 8003302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
 8003308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	3301      	adds	r3, #1
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
 8003318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331a:	b29b      	uxth	r3, r3
 800331c:	029b      	lsls	r3, r3, #10
 800331e:	b29a      	uxth	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	801a      	strh	r2, [r3, #0]
 8003324:	e032      	b.n	800338c <HAL_PCD_EP_DB_Transmit+0x268>
 8003326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	62bb      	str	r3, [r7, #40]	; 0x28
 800332c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	2b00      	cmp	r3, #0
 8003334:	d102      	bne.n	800333c <HAL_PCD_EP_DB_Transmit+0x218>
 8003336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003338:	3b01      	subs	r3, #1
 800333a:	62bb      	str	r3, [r7, #40]	; 0x28
 800333c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333e:	b29b      	uxth	r3, r3
 8003340:	029b      	lsls	r3, r3, #10
 8003342:	b29b      	uxth	r3, r3
 8003344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800334c:	b29a      	uxth	r2, r3
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	801a      	strh	r2, [r3, #0]
 8003352:	e01b      	b.n	800338c <HAL_PCD_EP_DB_Transmit+0x268>
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	785b      	ldrb	r3, [r3, #1]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d117      	bne.n	800338c <HAL_PCD_EP_DB_Transmit+0x268>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	623b      	str	r3, [r7, #32]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800336a:	b29b      	uxth	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	4413      	add	r3, r2
 8003372:	623b      	str	r3, [r7, #32]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	011a      	lsls	r2, r3, #4
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	4413      	add	r3, r2
 800337e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003386:	b29a      	uxth	r2, r3
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	6959      	ldr	r1, [r3, #20]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	891a      	ldrh	r2, [r3, #8]
 8003398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339a:	b29b      	uxth	r3, r3
 800339c:	f003 fa24 	bl	80067e8 <USB_WritePMA>
 80033a0:	e130      	b.n	8003604 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4413      	add	r3, r2
 80033b6:	3306      	adds	r3, #6
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ca:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	699a      	ldr	r2, [r3, #24]
 80033d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d306      	bcc.n	80033e4 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033dc:	1ad2      	subs	r2, r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	619a      	str	r2, [r3, #24]
 80033e2:	e002      	b.n	80033ea <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2200      	movs	r2, #0
 80033e8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d12c      	bne.n	800344c <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	4619      	mov	r1, r3
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f004 ffd6 	bl	80083aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003404:	2b00      	cmp	r3, #0
 8003406:	f040 80fd 	bne.w	8003604 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	b29b      	uxth	r3, r3
 800341c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003424:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	441a      	add	r2, r3
 8003434:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800343a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800343e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003446:	b29b      	uxth	r3, r3
 8003448:	8013      	strh	r3, [r2, #0]
 800344a:	e0db      	b.n	8003604 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d11f      	bne.n	8003496 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800346c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003470:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	461a      	mov	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	441a      	add	r2, r3
 8003480:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800348a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800348e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003492:	b29b      	uxth	r3, r3
 8003494:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800349c:	2b01      	cmp	r3, #1
 800349e:	f040 80b1 	bne.w	8003604 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034a8:	441a      	add	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	69da      	ldr	r2, [r3, #28]
 80034b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034b4:	441a      	add	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	6a1a      	ldr	r2, [r3, #32]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d309      	bcc.n	80034da <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	6a1a      	ldr	r2, [r3, #32]
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	1ad2      	subs	r2, r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	621a      	str	r2, [r3, #32]
 80034d8:	e014      	b.n	8003504 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80034e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034e4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034ee:	e009      	b.n	8003504 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2200      	movs	r2, #0
 80034fa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	637b      	str	r3, [r7, #52]	; 0x34
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	785b      	ldrb	r3, [r3, #1]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d155      	bne.n	80035be <HAL_PCD_EP_DB_Transmit+0x49a>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	647b      	str	r3, [r7, #68]	; 0x44
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003520:	b29b      	uxth	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003526:	4413      	add	r3, r2
 8003528:	647b      	str	r3, [r7, #68]	; 0x44
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	011a      	lsls	r2, r3, #4
 8003530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003532:	4413      	add	r3, r2
 8003534:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003538:	643b      	str	r3, [r7, #64]	; 0x40
 800353a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353c:	2b00      	cmp	r3, #0
 800353e:	d112      	bne.n	8003566 <HAL_PCD_EP_DB_Transmit+0x442>
 8003540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	b29b      	uxth	r3, r3
 8003546:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800354a:	b29a      	uxth	r2, r3
 800354c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354e:	801a      	strh	r2, [r3, #0]
 8003550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	b29b      	uxth	r3, r3
 8003556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800355a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800355e:	b29a      	uxth	r2, r3
 8003560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003562:	801a      	strh	r2, [r3, #0]
 8003564:	e044      	b.n	80035f0 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003568:	2b3e      	cmp	r3, #62	; 0x3e
 800356a:	d811      	bhi.n	8003590 <HAL_PCD_EP_DB_Transmit+0x46c>
 800356c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_PCD_EP_DB_Transmit+0x45e>
 800357c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357e:	3301      	adds	r3, #1
 8003580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003584:	b29b      	uxth	r3, r3
 8003586:	029b      	lsls	r3, r3, #10
 8003588:	b29a      	uxth	r2, r3
 800358a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800358c:	801a      	strh	r2, [r3, #0]
 800358e:	e02f      	b.n	80035f0 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <HAL_PCD_EP_DB_Transmit+0x482>
 80035a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a2:	3b01      	subs	r3, #1
 80035a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	029b      	lsls	r3, r3, #10
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ba:	801a      	strh	r2, [r3, #0]
 80035bc:	e018      	b.n	80035f0 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	785b      	ldrb	r3, [r3, #1]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d114      	bne.n	80035f0 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d4:	4413      	add	r3, r2
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	011a      	lsls	r2, r3, #4
 80035de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e0:	4413      	add	r3, r2
 80035e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035e6:	633b      	str	r3, [r7, #48]	; 0x30
 80035e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	6959      	ldr	r1, [r3, #20]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	895a      	ldrh	r2, [r3, #10]
 80035fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fe:	b29b      	uxth	r3, r3
 8003600:	f003 f8f2 	bl	80067e8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	b29b      	uxth	r3, r3
 8003616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800361a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800361e:	823b      	strh	r3, [r7, #16]
 8003620:	8a3b      	ldrh	r3, [r7, #16]
 8003622:	f083 0310 	eor.w	r3, r3, #16
 8003626:	823b      	strh	r3, [r7, #16]
 8003628:	8a3b      	ldrh	r3, [r7, #16]
 800362a:	f083 0320 	eor.w	r3, r3, #32
 800362e:	823b      	strh	r3, [r7, #16]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	461a      	mov	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	441a      	add	r2, r3
 800363e:	8a3b      	ldrh	r3, [r7, #16]
 8003640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800364c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003650:	b29b      	uxth	r3, r3
 8003652:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3748      	adds	r7, #72	; 0x48
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800365e:	b480      	push	{r7}
 8003660:	b087      	sub	sp, #28
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	607b      	str	r3, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	817b      	strh	r3, [r7, #10]
 800366c:	4613      	mov	r3, r2
 800366e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003670:	897b      	ldrh	r3, [r7, #10]
 8003672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800367c:	897b      	ldrh	r3, [r7, #10]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	e009      	b.n	80036a8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003694:	897a      	ldrh	r2, [r7, #10]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4413      	add	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80036a8:	893b      	ldrh	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d107      	bne.n	80036be <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2200      	movs	r2, #0
 80036b2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	80da      	strh	r2, [r3, #6]
 80036bc:	e00b      	b.n	80036d6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2201      	movs	r2, #1
 80036c2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	0c1b      	lsrs	r3, r3, #16
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
	...

080036e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e26c      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8087 	beq.w	8003812 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003704:	4b92      	ldr	r3, [pc, #584]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 030c 	and.w	r3, r3, #12
 800370c:	2b04      	cmp	r3, #4
 800370e:	d00c      	beq.n	800372a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003710:	4b8f      	ldr	r3, [pc, #572]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 030c 	and.w	r3, r3, #12
 8003718:	2b08      	cmp	r3, #8
 800371a:	d112      	bne.n	8003742 <HAL_RCC_OscConfig+0x5e>
 800371c:	4b8c      	ldr	r3, [pc, #560]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003728:	d10b      	bne.n	8003742 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372a:	4b89      	ldr	r3, [pc, #548]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d06c      	beq.n	8003810 <HAL_RCC_OscConfig+0x12c>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d168      	bne.n	8003810 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e246      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374a:	d106      	bne.n	800375a <HAL_RCC_OscConfig+0x76>
 800374c:	4b80      	ldr	r3, [pc, #512]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a7f      	ldr	r2, [pc, #508]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 8003752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	e02e      	b.n	80037b8 <HAL_RCC_OscConfig+0xd4>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10c      	bne.n	800377c <HAL_RCC_OscConfig+0x98>
 8003762:	4b7b      	ldr	r3, [pc, #492]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a7a      	ldr	r2, [pc, #488]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 8003768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	4b78      	ldr	r3, [pc, #480]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a77      	ldr	r2, [pc, #476]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 8003774:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	e01d      	b.n	80037b8 <HAL_RCC_OscConfig+0xd4>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003784:	d10c      	bne.n	80037a0 <HAL_RCC_OscConfig+0xbc>
 8003786:	4b72      	ldr	r3, [pc, #456]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a71      	ldr	r2, [pc, #452]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 800378c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	4b6f      	ldr	r3, [pc, #444]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a6e      	ldr	r2, [pc, #440]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 8003798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e00b      	b.n	80037b8 <HAL_RCC_OscConfig+0xd4>
 80037a0:	4b6b      	ldr	r3, [pc, #428]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a6a      	ldr	r2, [pc, #424]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 80037a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4b68      	ldr	r3, [pc, #416]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a67      	ldr	r2, [pc, #412]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 80037b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d013      	beq.n	80037e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7fd fe40 	bl	8001444 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c8:	f7fd fe3c 	bl	8001444 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b64      	cmp	r3, #100	; 0x64
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e1fa      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037da:	4b5d      	ldr	r3, [pc, #372]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0f0      	beq.n	80037c8 <HAL_RCC_OscConfig+0xe4>
 80037e6:	e014      	b.n	8003812 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e8:	f7fd fe2c 	bl	8001444 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f0:	f7fd fe28 	bl	8001444 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b64      	cmp	r3, #100	; 0x64
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e1e6      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003802:	4b53      	ldr	r3, [pc, #332]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x10c>
 800380e:	e000      	b.n	8003812 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d063      	beq.n	80038e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800381e:	4b4c      	ldr	r3, [pc, #304]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00b      	beq.n	8003842 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800382a:	4b49      	ldr	r3, [pc, #292]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	2b08      	cmp	r3, #8
 8003834:	d11c      	bne.n	8003870 <HAL_RCC_OscConfig+0x18c>
 8003836:	4b46      	ldr	r3, [pc, #280]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d116      	bne.n	8003870 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003842:	4b43      	ldr	r3, [pc, #268]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d005      	beq.n	800385a <HAL_RCC_OscConfig+0x176>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d001      	beq.n	800385a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e1ba      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385a:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4939      	ldr	r1, [pc, #228]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 800386a:	4313      	orrs	r3, r2
 800386c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386e:	e03a      	b.n	80038e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d020      	beq.n	80038ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003878:	4b36      	ldr	r3, [pc, #216]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 800387a:	2201      	movs	r2, #1
 800387c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387e:	f7fd fde1 	bl	8001444 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003886:	f7fd fddd 	bl	8001444 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e19b      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003898:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a4:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4927      	ldr	r1, [pc, #156]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	600b      	str	r3, [r1, #0]
 80038b8:	e015      	b.n	80038e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ba:	4b26      	ldr	r3, [pc, #152]	; (8003954 <HAL_RCC_OscConfig+0x270>)
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c0:	f7fd fdc0 	bl	8001444 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c8:	f7fd fdbc 	bl	8001444 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e17a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038da:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d03a      	beq.n	8003968 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d019      	beq.n	800392e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038fa:	4b17      	ldr	r3, [pc, #92]	; (8003958 <HAL_RCC_OscConfig+0x274>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003900:	f7fd fda0 	bl	8001444 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003908:	f7fd fd9c 	bl	8001444 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e15a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <HAL_RCC_OscConfig+0x26c>)
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f0      	beq.n	8003908 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003926:	2001      	movs	r0, #1
 8003928:	f000 fac6 	bl	8003eb8 <RCC_Delay>
 800392c:	e01c      	b.n	8003968 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800392e:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <HAL_RCC_OscConfig+0x274>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003934:	f7fd fd86 	bl	8001444 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800393a:	e00f      	b.n	800395c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800393c:	f7fd fd82 	bl	8001444 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d908      	bls.n	800395c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e140      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4ec>
 800394e:	bf00      	nop
 8003950:	40021000 	.word	0x40021000
 8003954:	42420000 	.word	0x42420000
 8003958:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800395c:	4b9e      	ldr	r3, [pc, #632]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1e9      	bne.n	800393c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80a6 	beq.w	8003ac2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003976:	2300      	movs	r3, #0
 8003978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800397a:	4b97      	ldr	r3, [pc, #604]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10d      	bne.n	80039a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003986:	4b94      	ldr	r3, [pc, #592]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	4a93      	ldr	r2, [pc, #588]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 800398c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003990:	61d3      	str	r3, [r2, #28]
 8003992:	4b91      	ldr	r3, [pc, #580]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800399e:	2301      	movs	r3, #1
 80039a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	4b8e      	ldr	r3, [pc, #568]	; (8003bdc <HAL_RCC_OscConfig+0x4f8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d118      	bne.n	80039e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ae:	4b8b      	ldr	r3, [pc, #556]	; (8003bdc <HAL_RCC_OscConfig+0x4f8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a8a      	ldr	r2, [pc, #552]	; (8003bdc <HAL_RCC_OscConfig+0x4f8>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ba:	f7fd fd43 	bl	8001444 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c2:	f7fd fd3f 	bl	8001444 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b64      	cmp	r3, #100	; 0x64
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e0fd      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	4b81      	ldr	r3, [pc, #516]	; (8003bdc <HAL_RCC_OscConfig+0x4f8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d106      	bne.n	80039f6 <HAL_RCC_OscConfig+0x312>
 80039e8:	4b7b      	ldr	r3, [pc, #492]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	4a7a      	ldr	r2, [pc, #488]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6213      	str	r3, [r2, #32]
 80039f4:	e02d      	b.n	8003a52 <HAL_RCC_OscConfig+0x36e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x334>
 80039fe:	4b76      	ldr	r3, [pc, #472]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	4a75      	ldr	r2, [pc, #468]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	6213      	str	r3, [r2, #32]
 8003a0a:	4b73      	ldr	r3, [pc, #460]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	4a72      	ldr	r2, [pc, #456]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003a10:	f023 0304 	bic.w	r3, r3, #4
 8003a14:	6213      	str	r3, [r2, #32]
 8003a16:	e01c      	b.n	8003a52 <HAL_RCC_OscConfig+0x36e>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2b05      	cmp	r3, #5
 8003a1e:	d10c      	bne.n	8003a3a <HAL_RCC_OscConfig+0x356>
 8003a20:	4b6d      	ldr	r3, [pc, #436]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	4a6c      	ldr	r2, [pc, #432]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003a26:	f043 0304 	orr.w	r3, r3, #4
 8003a2a:	6213      	str	r3, [r2, #32]
 8003a2c:	4b6a      	ldr	r3, [pc, #424]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	4a69      	ldr	r2, [pc, #420]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6213      	str	r3, [r2, #32]
 8003a38:	e00b      	b.n	8003a52 <HAL_RCC_OscConfig+0x36e>
 8003a3a:	4b67      	ldr	r3, [pc, #412]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	4a66      	ldr	r2, [pc, #408]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	6213      	str	r3, [r2, #32]
 8003a46:	4b64      	ldr	r3, [pc, #400]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	4a63      	ldr	r2, [pc, #396]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003a4c:	f023 0304 	bic.w	r3, r3, #4
 8003a50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d015      	beq.n	8003a86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5a:	f7fd fcf3 	bl	8001444 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a62:	f7fd fcef 	bl	8001444 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e0ab      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a78:	4b57      	ldr	r3, [pc, #348]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0ee      	beq.n	8003a62 <HAL_RCC_OscConfig+0x37e>
 8003a84:	e014      	b.n	8003ab0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a86:	f7fd fcdd 	bl	8001444 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fd fcd9 	bl	8001444 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e095      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa4:	4b4c      	ldr	r3, [pc, #304]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1ee      	bne.n	8003a8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d105      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab6:	4b48      	ldr	r3, [pc, #288]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	4a47      	ldr	r2, [pc, #284]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 8081 	beq.w	8003bce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003acc:	4b42      	ldr	r3, [pc, #264]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d061      	beq.n	8003b9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d146      	bne.n	8003b6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae0:	4b3f      	ldr	r3, [pc, #252]	; (8003be0 <HAL_RCC_OscConfig+0x4fc>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae6:	f7fd fcad 	bl	8001444 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aee:	f7fd fca9 	bl	8001444 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e067      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b00:	4b35      	ldr	r3, [pc, #212]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f0      	bne.n	8003aee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b14:	d108      	bne.n	8003b28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b16:	4b30      	ldr	r3, [pc, #192]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	492d      	ldr	r1, [pc, #180]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b28:	4b2b      	ldr	r3, [pc, #172]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a19      	ldr	r1, [r3, #32]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	4927      	ldr	r1, [pc, #156]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b40:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <HAL_RCC_OscConfig+0x4fc>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b46:	f7fd fc7d 	bl	8001444 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4e:	f7fd fc79 	bl	8001444 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e037      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b60:	4b1d      	ldr	r3, [pc, #116]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f0      	beq.n	8003b4e <HAL_RCC_OscConfig+0x46a>
 8003b6c:	e02f      	b.n	8003bce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6e:	4b1c      	ldr	r3, [pc, #112]	; (8003be0 <HAL_RCC_OscConfig+0x4fc>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7fd fc66 	bl	8001444 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7c:	f7fd fc62 	bl	8001444 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e020      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b8e:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x498>
 8003b9a:	e018      	b.n	8003bce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e013      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <HAL_RCC_OscConfig+0x4f4>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d106      	bne.n	8003bca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d001      	beq.n	8003bce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	42420060 	.word	0x42420060

08003be4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0d0      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bf8:	4b6a      	ldr	r3, [pc, #424]	; (8003da4 <HAL_RCC_ClockConfig+0x1c0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d910      	bls.n	8003c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c06:	4b67      	ldr	r3, [pc, #412]	; (8003da4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 0207 	bic.w	r2, r3, #7
 8003c0e:	4965      	ldr	r1, [pc, #404]	; (8003da4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b63      	ldr	r3, [pc, #396]	; (8003da4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0b8      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d020      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c40:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	4a58      	ldr	r2, [pc, #352]	; (8003da8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c58:	4b53      	ldr	r3, [pc, #332]	; (8003da8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4a52      	ldr	r2, [pc, #328]	; (8003da8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c64:	4b50      	ldr	r3, [pc, #320]	; (8003da8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	494d      	ldr	r1, [pc, #308]	; (8003da8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d040      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8a:	4b47      	ldr	r3, [pc, #284]	; (8003da8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d115      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e07f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d107      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca2:	4b41      	ldr	r3, [pc, #260]	; (8003da8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e073      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb2:	4b3d      	ldr	r3, [pc, #244]	; (8003da8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e06b      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cc2:	4b39      	ldr	r3, [pc, #228]	; (8003da8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f023 0203 	bic.w	r2, r3, #3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	4936      	ldr	r1, [pc, #216]	; (8003da8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cd4:	f7fd fbb6 	bl	8001444 <HAL_GetTick>
 8003cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cda:	e00a      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cdc:	f7fd fbb2 	bl	8001444 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e053      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf2:	4b2d      	ldr	r3, [pc, #180]	; (8003da8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f003 020c 	and.w	r2, r3, #12
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d1eb      	bne.n	8003cdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d04:	4b27      	ldr	r3, [pc, #156]	; (8003da4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d210      	bcs.n	8003d34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d12:	4b24      	ldr	r3, [pc, #144]	; (8003da4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 0207 	bic.w	r2, r3, #7
 8003d1a:	4922      	ldr	r1, [pc, #136]	; (8003da4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e032      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d40:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4916      	ldr	r1, [pc, #88]	; (8003da8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	490e      	ldr	r1, [pc, #56]	; (8003da8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d72:	f000 f821 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8003d76:	4601      	mov	r1, r0
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	4a0a      	ldr	r2, [pc, #40]	; (8003dac <HAL_RCC_ClockConfig+0x1c8>)
 8003d84:	5cd3      	ldrb	r3, [r2, r3]
 8003d86:	fa21 f303 	lsr.w	r3, r1, r3
 8003d8a:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <HAL_RCC_ClockConfig+0x1cc>)
 8003d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_RCC_ClockConfig+0x1d0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fd fb14 	bl	80013c0 <HAL_InitTick>

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40022000 	.word	0x40022000
 8003da8:	40021000 	.word	0x40021000
 8003dac:	0800892c 	.word	0x0800892c
 8003db0:	20000014 	.word	0x20000014
 8003db4:	20000018 	.word	0x20000018

08003db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db8:	b490      	push	{r4, r7}
 8003dba:	b08a      	sub	sp, #40	; 0x28
 8003dbc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003dbe:	4b2a      	ldr	r3, [pc, #168]	; (8003e68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003dc0:	1d3c      	adds	r4, r7, #4
 8003dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003dc8:	4b28      	ldr	r3, [pc, #160]	; (8003e6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003de2:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d002      	beq.n	8003df8 <HAL_RCC_GetSysClockFreq+0x40>
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d003      	beq.n	8003dfe <HAL_RCC_GetSysClockFreq+0x46>
 8003df6:	e02d      	b.n	8003e54 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003df8:	4b1e      	ldr	r3, [pc, #120]	; (8003e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003dfa:	623b      	str	r3, [r7, #32]
      break;
 8003dfc:	e02d      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	0c9b      	lsrs	r3, r3, #18
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e10:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d013      	beq.n	8003e44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e1c:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	0c5b      	lsrs	r3, r3, #17
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	4a0f      	ldr	r2, [pc, #60]	; (8003e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e36:	fb02 f203 	mul.w	r2, r2, r3
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
 8003e42:	e004      	b.n	8003e4e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	4a0c      	ldr	r2, [pc, #48]	; (8003e78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e48:	fb02 f303 	mul.w	r3, r2, r3
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	623b      	str	r3, [r7, #32]
      break;
 8003e52:	e002      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e54:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e56:	623b      	str	r3, [r7, #32]
      break;
 8003e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3728      	adds	r7, #40	; 0x28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc90      	pop	{r4, r7}
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	080088d0 	.word	0x080088d0
 8003e6c:	080088e0 	.word	0x080088e0
 8003e70:	40021000 	.word	0x40021000
 8003e74:	007a1200 	.word	0x007a1200
 8003e78:	003d0900 	.word	0x003d0900

08003e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e80:	4b02      	ldr	r3, [pc, #8]	; (8003e8c <HAL_RCC_GetHCLKFreq+0x10>)
 8003e82:	681b      	ldr	r3, [r3, #0]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr
 8003e8c:	20000014 	.word	0x20000014

08003e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e94:	f7ff fff2 	bl	8003e7c <HAL_RCC_GetHCLKFreq>
 8003e98:	4601      	mov	r1, r0
 8003e9a:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	0a1b      	lsrs	r3, r3, #8
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	4a03      	ldr	r2, [pc, #12]	; (8003eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ea6:	5cd3      	ldrb	r3, [r2, r3]
 8003ea8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	0800893c 	.word	0x0800893c

08003eb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <RCC_Delay+0x34>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a0a      	ldr	r2, [pc, #40]	; (8003ef0 <RCC_Delay+0x38>)
 8003ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eca:	0a5b      	lsrs	r3, r3, #9
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	fb02 f303 	mul.w	r3, r2, r3
 8003ed2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ed4:	bf00      	nop
  }
  while (Delay --);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1e5a      	subs	r2, r3, #1
 8003eda:	60fa      	str	r2, [r7, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f9      	bne.n	8003ed4 <RCC_Delay+0x1c>
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20000014 	.word	0x20000014
 8003ef0:	10624dd3 	.word	0x10624dd3

08003ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d07d      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003f10:	2300      	movs	r3, #0
 8003f12:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f14:	4b4f      	ldr	r3, [pc, #316]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10d      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f20:	4b4c      	ldr	r3, [pc, #304]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	4a4b      	ldr	r2, [pc, #300]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	61d3      	str	r3, [r2, #28]
 8003f2c:	4b49      	ldr	r3, [pc, #292]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3c:	4b46      	ldr	r3, [pc, #280]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d118      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f48:	4b43      	ldr	r3, [pc, #268]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a42      	ldr	r2, [pc, #264]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f54:	f7fd fa76 	bl	8001444 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5a:	e008      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5c:	f7fd fa72 	bl	8001444 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b64      	cmp	r3, #100	; 0x64
 8003f68:	d901      	bls.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e06d      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6e:	4b3a      	ldr	r3, [pc, #232]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f7a:	4b36      	ldr	r3, [pc, #216]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d02e      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d027      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f98:	4b2e      	ldr	r3, [pc, #184]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fa2:	4b2e      	ldr	r3, [pc, #184]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fa8:	4b2c      	ldr	r3, [pc, #176]	; (800405c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fae:	4a29      	ldr	r2, [pc, #164]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d014      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbe:	f7fd fa41 	bl	8001444 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc4:	e00a      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc6:	f7fd fa3d 	bl	8001444 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e036      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fdc:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0ee      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fe8:	4b1a      	ldr	r3, [pc, #104]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4917      	ldr	r1, [pc, #92]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ffa:	7dfb      	ldrb	r3, [r7, #23]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d105      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004000:	4b14      	ldr	r3, [pc, #80]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	4a13      	ldr	r2, [pc, #76]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800400a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004018:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	490b      	ldr	r1, [pc, #44]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004026:	4313      	orrs	r3, r2
 8004028:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004036:	4b07      	ldr	r3, [pc, #28]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	4904      	ldr	r1, [pc, #16]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004044:	4313      	orrs	r3, r2
 8004046:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000
 8004058:	40007000 	.word	0x40007000
 800405c:	42420440 	.word	0x42420440

08004060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e041      	b.n	80040f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fc ffbe 	bl	8001008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	4619      	mov	r1, r3
 800409e:	4610      	mov	r0, r2
 80040a0:	f000 fa1a 	bl	80044d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b02      	cmp	r3, #2
 8004112:	d122      	bne.n	800415a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b02      	cmp	r3, #2
 8004120:	d11b      	bne.n	800415a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f06f 0202 	mvn.w	r2, #2
 800412a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f9ad 	bl	80044a0 <HAL_TIM_IC_CaptureCallback>
 8004146:	e005      	b.n	8004154 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f9a0 	bl	800448e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f9af 	bl	80044b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b04      	cmp	r3, #4
 8004166:	d122      	bne.n	80041ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b04      	cmp	r3, #4
 8004174:	d11b      	bne.n	80041ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f06f 0204 	mvn.w	r2, #4
 800417e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f983 	bl	80044a0 <HAL_TIM_IC_CaptureCallback>
 800419a:	e005      	b.n	80041a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f976 	bl	800448e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f985 	bl	80044b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d122      	bne.n	8004202 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d11b      	bne.n	8004202 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f06f 0208 	mvn.w	r2, #8
 80041d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2204      	movs	r2, #4
 80041d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f959 	bl	80044a0 <HAL_TIM_IC_CaptureCallback>
 80041ee:	e005      	b.n	80041fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f94c 	bl	800448e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f95b 	bl	80044b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f003 0310 	and.w	r3, r3, #16
 800420c:	2b10      	cmp	r3, #16
 800420e:	d122      	bne.n	8004256 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f003 0310 	and.w	r3, r3, #16
 800421a:	2b10      	cmp	r3, #16
 800421c:	d11b      	bne.n	8004256 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f06f 0210 	mvn.w	r2, #16
 8004226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2208      	movs	r2, #8
 800422c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f92f 	bl	80044a0 <HAL_TIM_IC_CaptureCallback>
 8004242:	e005      	b.n	8004250 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f922 	bl	800448e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f931 	bl	80044b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b01      	cmp	r3, #1
 8004262:	d10e      	bne.n	8004282 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d107      	bne.n	8004282 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f06f 0201 	mvn.w	r2, #1
 800427a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f8fd 	bl	800447c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428c:	2b80      	cmp	r3, #128	; 0x80
 800428e:	d10e      	bne.n	80042ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429a:	2b80      	cmp	r3, #128	; 0x80
 800429c:	d107      	bne.n	80042ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fa74 	bl	8004796 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b8:	2b40      	cmp	r3, #64	; 0x40
 80042ba:	d10e      	bne.n	80042da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b40      	cmp	r3, #64	; 0x40
 80042c8:	d107      	bne.n	80042da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f8f5 	bl	80044c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d10e      	bne.n	8004306 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d107      	bne.n	8004306 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f06f 0220 	mvn.w	r2, #32
 80042fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fa3f 	bl	8004784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_TIM_ConfigClockSource+0x18>
 8004322:	2302      	movs	r3, #2
 8004324:	e0a6      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x166>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004344:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800434c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	d067      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x120>
 800435e:	2b40      	cmp	r3, #64	; 0x40
 8004360:	d80b      	bhi.n	800437a <HAL_TIM_ConfigClockSource+0x6c>
 8004362:	2b10      	cmp	r3, #16
 8004364:	d073      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x140>
 8004366:	2b10      	cmp	r3, #16
 8004368:	d802      	bhi.n	8004370 <HAL_TIM_ConfigClockSource+0x62>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d06f      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800436e:	e078      	b.n	8004462 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004370:	2b20      	cmp	r3, #32
 8004372:	d06c      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x140>
 8004374:	2b30      	cmp	r3, #48	; 0x30
 8004376:	d06a      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004378:	e073      	b.n	8004462 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800437a:	2b70      	cmp	r3, #112	; 0x70
 800437c:	d00d      	beq.n	800439a <HAL_TIM_ConfigClockSource+0x8c>
 800437e:	2b70      	cmp	r3, #112	; 0x70
 8004380:	d804      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x7e>
 8004382:	2b50      	cmp	r3, #80	; 0x50
 8004384:	d033      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0xe0>
 8004386:	2b60      	cmp	r3, #96	; 0x60
 8004388:	d041      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800438a:	e06a      	b.n	8004462 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800438c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004390:	d066      	beq.n	8004460 <HAL_TIM_ConfigClockSource+0x152>
 8004392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004396:	d017      	beq.n	80043c8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004398:	e063      	b.n	8004462 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6899      	ldr	r1, [r3, #8]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f000 f96e 	bl	800468a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	609a      	str	r2, [r3, #8]
      break;
 80043c6:	e04c      	b.n	8004462 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	6899      	ldr	r1, [r3, #8]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f000 f957 	bl	800468a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ea:	609a      	str	r2, [r3, #8]
      break;
 80043ec:	e039      	b.n	8004462 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f000 f8ce 	bl	800459c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2150      	movs	r1, #80	; 0x50
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f925 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 800440c:	e029      	b.n	8004462 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6859      	ldr	r1, [r3, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	461a      	mov	r2, r3
 800441c:	f000 f8ec 	bl	80045f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2160      	movs	r1, #96	; 0x60
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f915 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 800442c:	e019      	b.n	8004462 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6859      	ldr	r1, [r3, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	461a      	mov	r2, r3
 800443c:	f000 f8ae 	bl	800459c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2140      	movs	r1, #64	; 0x40
 8004446:	4618      	mov	r0, r3
 8004448:	f000 f905 	bl	8004656 <TIM_ITRx_SetConfig>
      break;
 800444c:	e009      	b.n	8004462 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4619      	mov	r1, r3
 8004458:	4610      	mov	r0, r2
 800445a:	f000 f8fc 	bl	8004656 <TIM_ITRx_SetConfig>
        break;
 800445e:	e000      	b.n	8004462 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004460:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	4770      	bx	lr

0800448e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr

080044a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr

080044b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr

080044c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bc80      	pop	{r7}
 80044d4:	4770      	bx	lr
	...

080044d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a29      	ldr	r2, [pc, #164]	; (8004590 <TIM_Base_SetConfig+0xb8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00b      	beq.n	8004508 <TIM_Base_SetConfig+0x30>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f6:	d007      	beq.n	8004508 <TIM_Base_SetConfig+0x30>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a26      	ldr	r2, [pc, #152]	; (8004594 <TIM_Base_SetConfig+0xbc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d003      	beq.n	8004508 <TIM_Base_SetConfig+0x30>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a25      	ldr	r2, [pc, #148]	; (8004598 <TIM_Base_SetConfig+0xc0>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d108      	bne.n	800451a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a1c      	ldr	r2, [pc, #112]	; (8004590 <TIM_Base_SetConfig+0xb8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00b      	beq.n	800453a <TIM_Base_SetConfig+0x62>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004528:	d007      	beq.n	800453a <TIM_Base_SetConfig+0x62>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a19      	ldr	r2, [pc, #100]	; (8004594 <TIM_Base_SetConfig+0xbc>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d003      	beq.n	800453a <TIM_Base_SetConfig+0x62>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a18      	ldr	r2, [pc, #96]	; (8004598 <TIM_Base_SetConfig+0xc0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d108      	bne.n	800454c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a07      	ldr	r2, [pc, #28]	; (8004590 <TIM_Base_SetConfig+0xb8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d103      	bne.n	8004580 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	615a      	str	r2, [r3, #20]
}
 8004586:	bf00      	nop
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr
 8004590:	40012c00 	.word	0x40012c00
 8004594:	40000400 	.word	0x40000400
 8004598:	40000800 	.word	0x40000800

0800459c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	f023 0201 	bic.w	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f023 030a 	bic.w	r3, r3, #10
 80045d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	621a      	str	r2, [r3, #32]
}
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr

080045f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	f023 0210 	bic.w	r2, r3, #16
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004622:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	031b      	lsls	r3, r3, #12
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004634:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	621a      	str	r2, [r3, #32]
}
 800464c:	bf00      	nop
 800464e:	371c      	adds	r7, #28
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr

08004656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004656:	b480      	push	{r7}
 8004658:	b085      	sub	sp, #20
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	f043 0307 	orr.w	r3, r3, #7
 8004678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	609a      	str	r2, [r3, #8]
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr

0800468a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800468a:	b480      	push	{r7}
 800468c:	b087      	sub	sp, #28
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
 8004696:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	021a      	lsls	r2, r3, #8
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	431a      	orrs	r2, r3
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	609a      	str	r2, [r3, #8]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046dc:	2302      	movs	r3, #2
 80046de:	e046      	b.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004706:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a16      	ldr	r2, [pc, #88]	; (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00e      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472c:	d009      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a12      	ldr	r2, [pc, #72]	; (800477c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d004      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a10      	ldr	r2, [pc, #64]	; (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d10c      	bne.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	4313      	orrs	r3, r2
 8004752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40000400 	.word	0x40000400
 8004780:	40000800 	.word	0x40000800

08004784 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr

08004796 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80047a8:	b084      	sub	sp, #16
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	f107 0014 	add.w	r0, r7, #20
 80047b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	b004      	add	sp, #16
 80047c6:	4770      	bx	lr

080047c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80047d8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80047dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80047fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004800:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	b29b      	uxth	r3, r3
 800480e:	43db      	mvns	r3, r3
 8004810:	b29b      	uxth	r3, r3
 8004812:	4013      	ands	r3, r2
 8004814:	b29a      	uxth	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr

08004828 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr

08004840 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004840:	b084      	sub	sp, #16
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	f107 0014 	add.w	r0, r7, #20
 800484e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	b004      	add	sp, #16
 800487e:	4770      	bx	lr

08004880 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004880:	b480      	push	{r7}
 8004882:	b09b      	sub	sp, #108	; 0x6c
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	b29b      	uxth	r3, r3
 800489e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80048a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	78db      	ldrb	r3, [r3, #3]
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d81f      	bhi.n	80048f2 <USB_ActivateEndpoint+0x72>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <USB_ActivateEndpoint+0x38>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080048c9 	.word	0x080048c9
 80048bc:	080048e5 	.word	0x080048e5
 80048c0:	080048fb 	.word	0x080048fb
 80048c4:	080048d7 	.word	0x080048d7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80048c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80048cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80048d4:	e012      	b.n	80048fc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80048d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80048da:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80048de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80048e2:	e00b      	b.n	80048fc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80048e4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80048e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048ec:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80048f0:	e004      	b.n	80048fc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80048f8:	e000      	b.n	80048fc <USB_ActivateEndpoint+0x7c>
      break;
 80048fa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	441a      	add	r2, r3
 8004906:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800490a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800490e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800491a:	b29b      	uxth	r3, r3
 800491c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004934:	b29a      	uxth	r2, r3
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	b29b      	uxth	r3, r3
 800493c:	4313      	orrs	r3, r2
 800493e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004960:	b29b      	uxth	r3, r3
 8004962:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	7b1b      	ldrb	r3, [r3, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	f040 8149 	bne.w	8004c00 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	785b      	ldrb	r3, [r3, #1]
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 8084 	beq.w	8004a80 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004982:	b29b      	uxth	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	4413      	add	r3, r2
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	011a      	lsls	r2, r3, #4
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800499a:	613b      	str	r3, [r7, #16]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	88db      	ldrh	r3, [r3, #6]
 80049a0:	085b      	lsrs	r3, r3, #1
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	81fb      	strh	r3, [r7, #14]
 80049ba:	89fb      	ldrh	r3, [r7, #14]
 80049bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d01b      	beq.n	80049fc <USB_ActivateEndpoint+0x17c>
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049da:	81bb      	strh	r3, [r7, #12]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	441a      	add	r2, r3
 80049e6:	89bb      	ldrh	r3, [r7, #12]
 80049e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	78db      	ldrb	r3, [r3, #3]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d020      	beq.n	8004a46 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a1a:	813b      	strh	r3, [r7, #8]
 8004a1c:	893b      	ldrh	r3, [r7, #8]
 8004a1e:	f083 0320 	eor.w	r3, r3, #32
 8004a22:	813b      	strh	r3, [r7, #8]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	441a      	add	r2, r3
 8004a2e:	893b      	ldrh	r3, [r7, #8]
 8004a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	8013      	strh	r3, [r2, #0]
 8004a44:	e27f      	b.n	8004f46 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a5c:	817b      	strh	r3, [r7, #10]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	441a      	add	r2, r3
 8004a68:	897b      	ldrh	r3, [r7, #10]
 8004a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	8013      	strh	r3, [r2, #0]
 8004a7e:	e262      	b.n	8004f46 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a90:	4413      	add	r3, r2
 8004a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	011a      	lsls	r2, r3, #4
 8004a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	88db      	ldrh	r3, [r3, #6]
 8004aa8:	085b      	lsrs	r3, r3, #1
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	4413      	add	r3, r2
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	011a      	lsls	r2, r3, #4
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ad6:	623b      	str	r3, [r7, #32]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d112      	bne.n	8004b06 <USB_ActivateEndpoint+0x286>
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	801a      	strh	r2, [r3, #0]
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	801a      	strh	r2, [r3, #0]
 8004b04:	e02f      	b.n	8004b66 <USB_ActivateEndpoint+0x2e6>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b0c:	d813      	bhi.n	8004b36 <USB_ActivateEndpoint+0x2b6>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	085b      	lsrs	r3, r3, #1
 8004b14:	663b      	str	r3, [r7, #96]	; 0x60
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <USB_ActivateEndpoint+0x2a8>
 8004b22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b24:	3301      	adds	r3, #1
 8004b26:	663b      	str	r3, [r7, #96]	; 0x60
 8004b28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	029b      	lsls	r3, r3, #10
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	801a      	strh	r2, [r3, #0]
 8004b34:	e017      	b.n	8004b66 <USB_ActivateEndpoint+0x2e6>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 031f 	and.w	r3, r3, #31
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d102      	bne.n	8004b50 <USB_ActivateEndpoint+0x2d0>
 8004b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	663b      	str	r3, [r7, #96]	; 0x60
 8004b50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	029b      	lsls	r3, r3, #10
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	83fb      	strh	r3, [r7, #30]
 8004b74:	8bfb      	ldrh	r3, [r7, #30]
 8004b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d01b      	beq.n	8004bb6 <USB_ActivateEndpoint+0x336>
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b94:	83bb      	strh	r3, [r7, #28]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	441a      	add	r2, r3
 8004ba0:	8bbb      	ldrh	r3, [r7, #28]
 8004ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004baa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bcc:	837b      	strh	r3, [r7, #26]
 8004bce:	8b7b      	ldrh	r3, [r7, #26]
 8004bd0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bd4:	837b      	strh	r3, [r7, #26]
 8004bd6:	8b7b      	ldrh	r3, [r7, #26]
 8004bd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004bdc:	837b      	strh	r3, [r7, #26]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	441a      	add	r2, r3
 8004be8:	8b7b      	ldrh	r3, [r7, #26]
 8004bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	8013      	strh	r3, [r2, #0]
 8004bfe:	e1a2      	b.n	8004f46 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c16:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	441a      	add	r2, r3
 8004c24:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c30:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	461a      	mov	r2, r3
 8004c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c4c:	4413      	add	r3, r2
 8004c4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	011a      	lsls	r2, r3, #4
 8004c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	891b      	ldrh	r3, [r3, #8]
 8004c64:	085b      	lsrs	r3, r3, #1
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c6e:	801a      	strh	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	653b      	str	r3, [r7, #80]	; 0x50
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c80:	4413      	add	r3, r2
 8004c82:	653b      	str	r3, [r7, #80]	; 0x50
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	011a      	lsls	r2, r3, #4
 8004c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	895b      	ldrh	r3, [r3, #10]
 8004c98:	085b      	lsrs	r3, r3, #1
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	785b      	ldrb	r3, [r3, #1]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f040 8091 	bne.w	8004dd0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004cbc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d01b      	beq.n	8004cfe <USB_ActivateEndpoint+0x47e>
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cdc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	441a      	add	r2, r3
 8004ce8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	873b      	strh	r3, [r7, #56]	; 0x38
 8004d0c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01b      	beq.n	8004d4e <USB_ActivateEndpoint+0x4ce>
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	441a      	add	r2, r3
 8004d38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d64:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004d66:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004d68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d6c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004d6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004d70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d74:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	441a      	add	r2, r3
 8004d80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dac:	867b      	strh	r3, [r7, #50]	; 0x32
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	441a      	add	r2, r3
 8004db8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	8013      	strh	r3, [r2, #0]
 8004dce:	e0ba      	b.n	8004f46 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004de0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01d      	beq.n	8004e28 <USB_ActivateEndpoint+0x5a8>
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	441a      	add	r2, r3
 8004e10:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004e38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01d      	beq.n	8004e80 <USB_ActivateEndpoint+0x600>
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	441a      	add	r2, r3
 8004e68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	78db      	ldrb	r3, [r3, #3]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d024      	beq.n	8004ed2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004ea2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ea6:	f083 0320 	eor.w	r3, r3, #32
 8004eaa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	441a      	add	r2, r3
 8004eb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	8013      	strh	r3, [r2, #0]
 8004ed0:	e01d      	b.n	8004f0e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ee8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	441a      	add	r2, r3
 8004ef6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f24:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	441a      	add	r2, r3
 8004f30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004f46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	376c      	adds	r7, #108	; 0x6c
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b08d      	sub	sp, #52	; 0x34
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	7b1b      	ldrb	r3, [r3, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f040 808e 	bne.w	8005084 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	785b      	ldrb	r3, [r3, #1]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d044      	beq.n	8004ffa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	81bb      	strh	r3, [r7, #12]
 8004f7e:	89bb      	ldrh	r3, [r7, #12]
 8004f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01b      	beq.n	8004fc0 <USB_DeactivateEndpoint+0x6c>
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9e:	817b      	strh	r3, [r7, #10]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	441a      	add	r2, r3
 8004faa:	897b      	ldrh	r3, [r7, #10]
 8004fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd6:	813b      	strh	r3, [r7, #8]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	441a      	add	r2, r3
 8004fe2:	893b      	ldrh	r3, [r7, #8]
 8004fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	8013      	strh	r3, [r2, #0]
 8004ff8:	e192      	b.n	8005320 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	827b      	strh	r3, [r7, #18]
 8005008:	8a7b      	ldrh	r3, [r7, #18]
 800500a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d01b      	beq.n	800504a <USB_DeactivateEndpoint+0xf6>
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005028:	823b      	strh	r3, [r7, #16]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	441a      	add	r2, r3
 8005034:	8a3b      	ldrh	r3, [r7, #16]
 8005036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005046:	b29b      	uxth	r3, r3
 8005048:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800505c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005060:	81fb      	strh	r3, [r7, #14]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	441a      	add	r2, r3
 800506c:	89fb      	ldrh	r3, [r7, #14]
 800506e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507e:	b29b      	uxth	r3, r3
 8005080:	8013      	strh	r3, [r2, #0]
 8005082:	e14d      	b.n	8005320 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	785b      	ldrb	r3, [r3, #1]
 8005088:	2b00      	cmp	r3, #0
 800508a:	f040 80a5 	bne.w	80051d8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	843b      	strh	r3, [r7, #32]
 800509c:	8c3b      	ldrh	r3, [r7, #32]
 800509e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01b      	beq.n	80050de <USB_DeactivateEndpoint+0x18a>
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050bc:	83fb      	strh	r3, [r7, #30]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	441a      	add	r2, r3
 80050c8:	8bfb      	ldrh	r3, [r7, #30]
 80050ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050da:	b29b      	uxth	r3, r3
 80050dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	83bb      	strh	r3, [r7, #28]
 80050ec:	8bbb      	ldrh	r3, [r7, #28]
 80050ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d01b      	beq.n	800512e <USB_DeactivateEndpoint+0x1da>
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510c:	837b      	strh	r3, [r7, #26]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	441a      	add	r2, r3
 8005118:	8b7b      	ldrh	r3, [r7, #26]
 800511a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800511e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005126:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800512a:	b29b      	uxth	r3, r3
 800512c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005144:	833b      	strh	r3, [r7, #24]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	441a      	add	r2, r3
 8005150:	8b3b      	ldrh	r3, [r7, #24]
 8005152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005162:	b29b      	uxth	r3, r3
 8005164:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517c:	82fb      	strh	r3, [r7, #22]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	441a      	add	r2, r3
 8005188:	8afb      	ldrh	r3, [r7, #22]
 800518a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800518e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519a:	b29b      	uxth	r3, r3
 800519c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b4:	82bb      	strh	r3, [r7, #20]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	441a      	add	r2, r3
 80051c0:	8abb      	ldrh	r3, [r7, #20]
 80051c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	8013      	strh	r3, [r2, #0]
 80051d6:	e0a3      	b.n	8005320 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80051e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01b      	beq.n	8005228 <USB_DeactivateEndpoint+0x2d4>
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005206:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	441a      	add	r2, r3
 8005212:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800521c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005224:	b29b      	uxth	r3, r3
 8005226:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005236:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01b      	beq.n	8005278 <USB_DeactivateEndpoint+0x324>
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005256:	853b      	strh	r3, [r7, #40]	; 0x28
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	441a      	add	r2, r3
 8005262:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800526c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005270:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005274:	b29b      	uxth	r3, r3
 8005276:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	441a      	add	r2, r3
 800529a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800529c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	441a      	add	r2, r3
 80052d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	441a      	add	r2, r3
 800530a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800530c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531c:	b29b      	uxth	r3, r3
 800531e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3734      	adds	r7, #52	; 0x34
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr

0800532c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b0c4      	sub	sp, #272	; 0x110
 8005330:	af00      	add	r7, sp, #0
 8005332:	1d3b      	adds	r3, r7, #4
 8005334:	6018      	str	r0, [r3, #0]
 8005336:	463b      	mov	r3, r7
 8005338:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800533a:	463b      	mov	r3, r7
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	785b      	ldrb	r3, [r3, #1]
 8005340:	2b01      	cmp	r3, #1
 8005342:	f040 8557 	bne.w	8005df4 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005346:	463b      	mov	r3, r7
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699a      	ldr	r2, [r3, #24]
 800534c:	463b      	mov	r3, r7
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	429a      	cmp	r2, r3
 8005354:	d905      	bls.n	8005362 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005356:	463b      	mov	r3, r7
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005360:	e004      	b.n	800536c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005362:	463b      	mov	r3, r7
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800536c:	463b      	mov	r3, r7
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	7b1b      	ldrb	r3, [r3, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d12c      	bne.n	80053d0 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005376:	463b      	mov	r3, r7
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6959      	ldr	r1, [r3, #20]
 800537c:	463b      	mov	r3, r7
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	88da      	ldrh	r2, [r3, #6]
 8005382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005386:	b29b      	uxth	r3, r3
 8005388:	1d38      	adds	r0, r7, #4
 800538a:	6800      	ldr	r0, [r0, #0]
 800538c:	f001 fa2c 	bl	80067e8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005390:	1d3b      	adds	r3, r7, #4
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	1d3b      	adds	r3, r7, #4
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800539e:	b29b      	uxth	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	4413      	add	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	463b      	mov	r3, r7
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	011a      	lsls	r2, r3, #4
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	4413      	add	r3, r2
 80053b4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80053b8:	f107 0310 	add.w	r3, r7, #16
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	f107 0310 	add.w	r3, r7, #16
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	801a      	strh	r2, [r3, #0]
 80053cc:	f000 bcdd 	b.w	8005d8a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80053d0:	463b      	mov	r3, r7
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	78db      	ldrb	r3, [r3, #3]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	f040 8347 	bne.w	8005a6a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80053dc:	463b      	mov	r3, r7
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6a1a      	ldr	r2, [r3, #32]
 80053e2:	463b      	mov	r3, r7
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	f240 82eb 	bls.w	80059c4 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80053ee:	1d3b      	adds	r3, r7, #4
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	463b      	mov	r3, r7
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005408:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800540c:	1d3b      	adds	r3, r7, #4
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	463b      	mov	r3, r7
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	441a      	add	r2, r3
 800541a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800541e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005426:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800542a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542e:	b29b      	uxth	r3, r3
 8005430:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005432:	463b      	mov	r3, r7
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6a1a      	ldr	r2, [r3, #32]
 8005438:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800543c:	1ad2      	subs	r2, r2, r3
 800543e:	463b      	mov	r3, r7
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005444:	1d3b      	adds	r3, r7, #4
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	463b      	mov	r3, r7
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29b      	uxth	r3, r3
 8005456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 8159 	beq.w	8005712 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005460:	1d3b      	adds	r3, r7, #4
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	637b      	str	r3, [r7, #52]	; 0x34
 8005466:	463b      	mov	r3, r7
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	785b      	ldrb	r3, [r3, #1]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d164      	bne.n	800553a <USB_EPStartXfer+0x20e>
 8005470:	1d3b      	adds	r3, r7, #4
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005476:	1d3b      	adds	r3, r7, #4
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800547e:	b29b      	uxth	r3, r3
 8005480:	461a      	mov	r2, r3
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	4413      	add	r3, r2
 8005486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005488:	463b      	mov	r3, r7
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	011a      	lsls	r2, r3, #4
 8005490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005492:	4413      	add	r3, r2
 8005494:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005498:	62bb      	str	r3, [r7, #40]	; 0x28
 800549a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d112      	bne.n	80054c8 <USB_EPStartXfer+0x19c>
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b0:	801a      	strh	r2, [r3, #0]
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	801a      	strh	r2, [r3, #0]
 80054c6:	e054      	b.n	8005572 <USB_EPStartXfer+0x246>
 80054c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054cc:	2b3e      	cmp	r3, #62	; 0x3e
 80054ce:	d817      	bhi.n	8005500 <USB_EPStartXfer+0x1d4>
 80054d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054d4:	085b      	lsrs	r3, r3, #1
 80054d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80054da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d004      	beq.n	80054f0 <USB_EPStartXfer+0x1c4>
 80054e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ea:	3301      	adds	r3, #1
 80054ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80054f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	029b      	lsls	r3, r3, #10
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	801a      	strh	r2, [r3, #0]
 80054fe:	e038      	b.n	8005572 <USB_EPStartXfer+0x246>
 8005500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005504:	095b      	lsrs	r3, r3, #5
 8005506:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800550a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800550e:	f003 031f 	and.w	r3, r3, #31
 8005512:	2b00      	cmp	r3, #0
 8005514:	d104      	bne.n	8005520 <USB_EPStartXfer+0x1f4>
 8005516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800551a:	3b01      	subs	r3, #1
 800551c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005524:	b29b      	uxth	r3, r3
 8005526:	029b      	lsls	r3, r3, #10
 8005528:	b29b      	uxth	r3, r3
 800552a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800552e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005532:	b29a      	uxth	r2, r3
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	e01b      	b.n	8005572 <USB_EPStartXfer+0x246>
 800553a:	463b      	mov	r3, r7
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	785b      	ldrb	r3, [r3, #1]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d116      	bne.n	8005572 <USB_EPStartXfer+0x246>
 8005544:	1d3b      	adds	r3, r7, #4
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554c:	b29b      	uxth	r3, r3
 800554e:	461a      	mov	r2, r3
 8005550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005552:	4413      	add	r3, r2
 8005554:	637b      	str	r3, [r7, #52]	; 0x34
 8005556:	463b      	mov	r3, r7
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	011a      	lsls	r2, r3, #4
 800555e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005560:	4413      	add	r3, r2
 8005562:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005566:	633b      	str	r3, [r7, #48]	; 0x30
 8005568:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800556c:	b29a      	uxth	r2, r3
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005572:	463b      	mov	r3, r7
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	895b      	ldrh	r3, [r3, #10]
 8005578:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800557c:	463b      	mov	r3, r7
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6959      	ldr	r1, [r3, #20]
 8005582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005586:	b29b      	uxth	r3, r3
 8005588:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800558c:	1d38      	adds	r0, r7, #4
 800558e:	6800      	ldr	r0, [r0, #0]
 8005590:	f001 f92a 	bl	80067e8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005594:	463b      	mov	r3, r7
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800559e:	441a      	add	r2, r3
 80055a0:	463b      	mov	r3, r7
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055a6:	463b      	mov	r3, r7
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a1a      	ldr	r2, [r3, #32]
 80055ac:	463b      	mov	r3, r7
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d909      	bls.n	80055ca <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80055b6:	463b      	mov	r3, r7
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6a1a      	ldr	r2, [r3, #32]
 80055bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c0:	1ad2      	subs	r2, r2, r3
 80055c2:	463b      	mov	r3, r7
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	621a      	str	r2, [r3, #32]
 80055c8:	e008      	b.n	80055dc <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80055ca:	463b      	mov	r3, r7
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80055d4:	463b      	mov	r3, r7
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2200      	movs	r2, #0
 80055da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055dc:	463b      	mov	r3, r7
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	785b      	ldrb	r3, [r3, #1]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d164      	bne.n	80056b0 <USB_EPStartXfer+0x384>
 80055e6:	1d3b      	adds	r3, r7, #4
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	61fb      	str	r3, [r7, #28]
 80055ec:	1d3b      	adds	r3, r7, #4
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	461a      	mov	r2, r3
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	4413      	add	r3, r2
 80055fc:	61fb      	str	r3, [r7, #28]
 80055fe:	463b      	mov	r3, r7
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	011a      	lsls	r2, r3, #4
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800560e:	61bb      	str	r3, [r7, #24]
 8005610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005614:	2b00      	cmp	r3, #0
 8005616:	d112      	bne.n	800563e <USB_EPStartXfer+0x312>
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	b29b      	uxth	r3, r3
 800561e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005622:	b29a      	uxth	r2, r3
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	801a      	strh	r2, [r3, #0]
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	b29b      	uxth	r3, r3
 800562e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005636:	b29a      	uxth	r2, r3
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	801a      	strh	r2, [r3, #0]
 800563c:	e057      	b.n	80056ee <USB_EPStartXfer+0x3c2>
 800563e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005642:	2b3e      	cmp	r3, #62	; 0x3e
 8005644:	d817      	bhi.n	8005676 <USB_EPStartXfer+0x34a>
 8005646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800564a:	085b      	lsrs	r3, r3, #1
 800564c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d004      	beq.n	8005666 <USB_EPStartXfer+0x33a>
 800565c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005660:	3301      	adds	r3, #1
 8005662:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005666:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800566a:	b29b      	uxth	r3, r3
 800566c:	029b      	lsls	r3, r3, #10
 800566e:	b29a      	uxth	r2, r3
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	801a      	strh	r2, [r3, #0]
 8005674:	e03b      	b.n	80056ee <USB_EPStartXfer+0x3c2>
 8005676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005684:	f003 031f 	and.w	r3, r3, #31
 8005688:	2b00      	cmp	r3, #0
 800568a:	d104      	bne.n	8005696 <USB_EPStartXfer+0x36a>
 800568c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005690:	3b01      	subs	r3, #1
 8005692:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005696:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800569a:	b29b      	uxth	r3, r3
 800569c:	029b      	lsls	r3, r3, #10
 800569e:	b29b      	uxth	r3, r3
 80056a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	801a      	strh	r2, [r3, #0]
 80056ae:	e01e      	b.n	80056ee <USB_EPStartXfer+0x3c2>
 80056b0:	463b      	mov	r3, r7
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	785b      	ldrb	r3, [r3, #1]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d119      	bne.n	80056ee <USB_EPStartXfer+0x3c2>
 80056ba:	1d3b      	adds	r3, r7, #4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
 80056c0:	1d3b      	adds	r3, r7, #4
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	4413      	add	r3, r2
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
 80056d2:	463b      	mov	r3, r7
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	011a      	lsls	r2, r3, #4
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	4413      	add	r3, r2
 80056de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056e2:	623b      	str	r3, [r7, #32]
 80056e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80056ee:	463b      	mov	r3, r7
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	891b      	ldrh	r3, [r3, #8]
 80056f4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056f8:	463b      	mov	r3, r7
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6959      	ldr	r1, [r3, #20]
 80056fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005702:	b29b      	uxth	r3, r3
 8005704:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005708:	1d38      	adds	r0, r7, #4
 800570a:	6800      	ldr	r0, [r0, #0]
 800570c:	f001 f86c 	bl	80067e8 <USB_WritePMA>
 8005710:	e33b      	b.n	8005d8a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005712:	463b      	mov	r3, r7
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	785b      	ldrb	r3, [r3, #1]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d164      	bne.n	80057e6 <USB_EPStartXfer+0x4ba>
 800571c:	1d3b      	adds	r3, r7, #4
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005722:	1d3b      	adds	r3, r7, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800572a:	b29b      	uxth	r3, r3
 800572c:	461a      	mov	r2, r3
 800572e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005730:	4413      	add	r3, r2
 8005732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005734:	463b      	mov	r3, r7
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	011a      	lsls	r2, r3, #4
 800573c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800573e:	4413      	add	r3, r2
 8005740:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005744:	64bb      	str	r3, [r7, #72]	; 0x48
 8005746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d112      	bne.n	8005774 <USB_EPStartXfer+0x448>
 800574e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	b29b      	uxth	r3, r3
 8005754:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005758:	b29a      	uxth	r2, r3
 800575a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800575c:	801a      	strh	r2, [r3, #0]
 800575e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800576c:	b29a      	uxth	r2, r3
 800576e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005770:	801a      	strh	r2, [r3, #0]
 8005772:	e057      	b.n	8005824 <USB_EPStartXfer+0x4f8>
 8005774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005778:	2b3e      	cmp	r3, #62	; 0x3e
 800577a:	d817      	bhi.n	80057ac <USB_EPStartXfer+0x480>
 800577c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005780:	085b      	lsrs	r3, r3, #1
 8005782:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d004      	beq.n	800579c <USB_EPStartXfer+0x470>
 8005792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005796:	3301      	adds	r3, #1
 8005798:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800579c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	029b      	lsls	r3, r3, #10
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057a8:	801a      	strh	r2, [r3, #0]
 80057aa:	e03b      	b.n	8005824 <USB_EPStartXfer+0x4f8>
 80057ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80057b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d104      	bne.n	80057cc <USB_EPStartXfer+0x4a0>
 80057c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057c6:	3b01      	subs	r3, #1
 80057c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80057cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	029b      	lsls	r3, r3, #10
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057de:	b29a      	uxth	r2, r3
 80057e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e2:	801a      	strh	r2, [r3, #0]
 80057e4:	e01e      	b.n	8005824 <USB_EPStartXfer+0x4f8>
 80057e6:	463b      	mov	r3, r7
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	785b      	ldrb	r3, [r3, #1]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d119      	bne.n	8005824 <USB_EPStartXfer+0x4f8>
 80057f0:	1d3b      	adds	r3, r7, #4
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	657b      	str	r3, [r7, #84]	; 0x54
 80057f6:	1d3b      	adds	r3, r7, #4
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057fe:	b29b      	uxth	r3, r3
 8005800:	461a      	mov	r2, r3
 8005802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005804:	4413      	add	r3, r2
 8005806:	657b      	str	r3, [r7, #84]	; 0x54
 8005808:	463b      	mov	r3, r7
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	011a      	lsls	r2, r3, #4
 8005810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005812:	4413      	add	r3, r2
 8005814:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005818:	653b      	str	r3, [r7, #80]	; 0x50
 800581a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800581e:	b29a      	uxth	r2, r3
 8005820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005822:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005824:	463b      	mov	r3, r7
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	891b      	ldrh	r3, [r3, #8]
 800582a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800582e:	463b      	mov	r3, r7
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6959      	ldr	r1, [r3, #20]
 8005834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005838:	b29b      	uxth	r3, r3
 800583a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800583e:	1d38      	adds	r0, r7, #4
 8005840:	6800      	ldr	r0, [r0, #0]
 8005842:	f000 ffd1 	bl	80067e8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005846:	463b      	mov	r3, r7
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	695a      	ldr	r2, [r3, #20]
 800584c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005850:	441a      	add	r2, r3
 8005852:	463b      	mov	r3, r7
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005858:	463b      	mov	r3, r7
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6a1a      	ldr	r2, [r3, #32]
 800585e:	463b      	mov	r3, r7
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	429a      	cmp	r2, r3
 8005866:	d909      	bls.n	800587c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005868:	463b      	mov	r3, r7
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6a1a      	ldr	r2, [r3, #32]
 800586e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005872:	1ad2      	subs	r2, r2, r3
 8005874:	463b      	mov	r3, r7
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	621a      	str	r2, [r3, #32]
 800587a:	e008      	b.n	800588e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800587c:	463b      	mov	r3, r7
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005886:	463b      	mov	r3, r7
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2200      	movs	r2, #0
 800588c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800588e:	1d3b      	adds	r3, r7, #4
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	647b      	str	r3, [r7, #68]	; 0x44
 8005894:	463b      	mov	r3, r7
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	785b      	ldrb	r3, [r3, #1]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d164      	bne.n	8005968 <USB_EPStartXfer+0x63c>
 800589e:	1d3b      	adds	r3, r7, #4
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058a4:	1d3b      	adds	r3, r7, #4
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b2:	4413      	add	r3, r2
 80058b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058b6:	463b      	mov	r3, r7
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	011a      	lsls	r2, r3, #4
 80058be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c0:	4413      	add	r3, r2
 80058c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80058c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d112      	bne.n	80058f6 <USB_EPStartXfer+0x5ca>
 80058d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058da:	b29a      	uxth	r2, r3
 80058dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058de:	801a      	strh	r2, [r3, #0]
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f2:	801a      	strh	r2, [r3, #0]
 80058f4:	e054      	b.n	80059a0 <USB_EPStartXfer+0x674>
 80058f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058fa:	2b3e      	cmp	r3, #62	; 0x3e
 80058fc:	d817      	bhi.n	800592e <USB_EPStartXfer+0x602>
 80058fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005902:	085b      	lsrs	r3, r3, #1
 8005904:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d004      	beq.n	800591e <USB_EPStartXfer+0x5f2>
 8005914:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005918:	3301      	adds	r3, #1
 800591a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800591e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005922:	b29b      	uxth	r3, r3
 8005924:	029b      	lsls	r3, r3, #10
 8005926:	b29a      	uxth	r2, r3
 8005928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592a:	801a      	strh	r2, [r3, #0]
 800592c:	e038      	b.n	80059a0 <USB_EPStartXfer+0x674>
 800592e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005932:	095b      	lsrs	r3, r3, #5
 8005934:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800593c:	f003 031f 	and.w	r3, r3, #31
 8005940:	2b00      	cmp	r3, #0
 8005942:	d104      	bne.n	800594e <USB_EPStartXfer+0x622>
 8005944:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005948:	3b01      	subs	r3, #1
 800594a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800594e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005952:	b29b      	uxth	r3, r3
 8005954:	029b      	lsls	r3, r3, #10
 8005956:	b29b      	uxth	r3, r3
 8005958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800595c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005960:	b29a      	uxth	r2, r3
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	801a      	strh	r2, [r3, #0]
 8005966:	e01b      	b.n	80059a0 <USB_EPStartXfer+0x674>
 8005968:	463b      	mov	r3, r7
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	785b      	ldrb	r3, [r3, #1]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d116      	bne.n	80059a0 <USB_EPStartXfer+0x674>
 8005972:	1d3b      	adds	r3, r7, #4
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800597a:	b29b      	uxth	r3, r3
 800597c:	461a      	mov	r2, r3
 800597e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005980:	4413      	add	r3, r2
 8005982:	647b      	str	r3, [r7, #68]	; 0x44
 8005984:	463b      	mov	r3, r7
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	011a      	lsls	r2, r3, #4
 800598c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800598e:	4413      	add	r3, r2
 8005990:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005994:	643b      	str	r3, [r7, #64]	; 0x40
 8005996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800599a:	b29a      	uxth	r2, r3
 800599c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800599e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80059a0:	463b      	mov	r3, r7
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	895b      	ldrh	r3, [r3, #10]
 80059a6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059aa:	463b      	mov	r3, r7
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6959      	ldr	r1, [r3, #20]
 80059b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80059ba:	1d38      	adds	r0, r7, #4
 80059bc:	6800      	ldr	r0, [r0, #0]
 80059be:	f000 ff13 	bl	80067e8 <USB_WritePMA>
 80059c2:	e1e2      	b.n	8005d8a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80059c4:	463b      	mov	r3, r7
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80059ce:	1d3b      	adds	r3, r7, #4
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	463b      	mov	r3, r7
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80059e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80059ec:	1d3b      	adds	r3, r7, #4
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	463b      	mov	r3, r7
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	441a      	add	r2, r3
 80059fa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80059fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a12:	1d3b      	adds	r3, r7, #4
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	663b      	str	r3, [r7, #96]	; 0x60
 8005a18:	1d3b      	adds	r3, r7, #4
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	461a      	mov	r2, r3
 8005a24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a26:	4413      	add	r3, r2
 8005a28:	663b      	str	r3, [r7, #96]	; 0x60
 8005a2a:	463b      	mov	r3, r7
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	011a      	lsls	r2, r3, #4
 8005a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a34:	4413      	add	r3, r2
 8005a36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a44:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a46:	463b      	mov	r3, r7
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	891b      	ldrh	r3, [r3, #8]
 8005a4c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a50:	463b      	mov	r3, r7
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6959      	ldr	r1, [r3, #20]
 8005a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005a60:	1d38      	adds	r0, r7, #4
 8005a62:	6800      	ldr	r0, [r0, #0]
 8005a64:	f000 fec0 	bl	80067e8 <USB_WritePMA>
 8005a68:	e18f      	b.n	8005d8a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a6a:	1d3b      	adds	r3, r7, #4
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	463b      	mov	r3, r7
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 808f 	beq.w	8005ba4 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a86:	1d3b      	adds	r3, r7, #4
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a8c:	463b      	mov	r3, r7
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	785b      	ldrb	r3, [r3, #1]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d164      	bne.n	8005b60 <USB_EPStartXfer+0x834>
 8005a96:	1d3b      	adds	r3, r7, #4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	673b      	str	r3, [r7, #112]	; 0x70
 8005a9c:	1d3b      	adds	r3, r7, #4
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005aaa:	4413      	add	r3, r2
 8005aac:	673b      	str	r3, [r7, #112]	; 0x70
 8005aae:	463b      	mov	r3, r7
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	011a      	lsls	r2, r3, #4
 8005ab6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ab8:	4413      	add	r3, r2
 8005aba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005abe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d112      	bne.n	8005aee <USB_EPStartXfer+0x7c2>
 8005ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad6:	801a      	strh	r2, [r3, #0]
 8005ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aea:	801a      	strh	r2, [r3, #0]
 8005aec:	e054      	b.n	8005b98 <USB_EPStartXfer+0x86c>
 8005aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005af2:	2b3e      	cmp	r3, #62	; 0x3e
 8005af4:	d817      	bhi.n	8005b26 <USB_EPStartXfer+0x7fa>
 8005af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005afa:	085b      	lsrs	r3, r3, #1
 8005afc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <USB_EPStartXfer+0x7ea>
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b10:	3301      	adds	r3, #1
 8005b12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	029b      	lsls	r3, r3, #10
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	e038      	b.n	8005b98 <USB_EPStartXfer+0x86c>
 8005b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b34:	f003 031f 	and.w	r3, r3, #31
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d104      	bne.n	8005b46 <USB_EPStartXfer+0x81a>
 8005b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b40:	3b01      	subs	r3, #1
 8005b42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	029b      	lsls	r3, r3, #10
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b5c:	801a      	strh	r2, [r3, #0]
 8005b5e:	e01b      	b.n	8005b98 <USB_EPStartXfer+0x86c>
 8005b60:	463b      	mov	r3, r7
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	785b      	ldrb	r3, [r3, #1]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d116      	bne.n	8005b98 <USB_EPStartXfer+0x86c>
 8005b6a:	1d3b      	adds	r3, r7, #4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b78:	4413      	add	r3, r2
 8005b7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	011a      	lsls	r2, r3, #4
 8005b84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b86:	4413      	add	r3, r2
 8005b88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b8c:	677b      	str	r3, [r7, #116]	; 0x74
 8005b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b96:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005b98:	463b      	mov	r3, r7
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	895b      	ldrh	r3, [r3, #10]
 8005b9e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005ba2:	e097      	b.n	8005cd4 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ba4:	463b      	mov	r3, r7
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	785b      	ldrb	r3, [r3, #1]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d168      	bne.n	8005c80 <USB_EPStartXfer+0x954>
 8005bae:	1d3b      	adds	r3, r7, #4
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bb6:	1d3b      	adds	r3, r7, #4
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bcc:	463b      	mov	r3, r7
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	011a      	lsls	r2, r3, #4
 8005bd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bd8:	4413      	add	r3, r2
 8005bda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bde:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d112      	bne.n	8005c0e <USB_EPStartXfer+0x8e2>
 8005be8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bf6:	801a      	strh	r2, [r3, #0]
 8005bf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c0a:	801a      	strh	r2, [r3, #0]
 8005c0c:	e05d      	b.n	8005cca <USB_EPStartXfer+0x99e>
 8005c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c12:	2b3e      	cmp	r3, #62	; 0x3e
 8005c14:	d817      	bhi.n	8005c46 <USB_EPStartXfer+0x91a>
 8005c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c1a:	085b      	lsrs	r3, r3, #1
 8005c1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d004      	beq.n	8005c36 <USB_EPStartXfer+0x90a>
 8005c2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c30:	3301      	adds	r3, #1
 8005c32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	029b      	lsls	r3, r3, #10
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c42:	801a      	strh	r2, [r3, #0]
 8005c44:	e041      	b.n	8005cca <USB_EPStartXfer+0x99e>
 8005c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c54:	f003 031f 	and.w	r3, r3, #31
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d104      	bne.n	8005c66 <USB_EPStartXfer+0x93a>
 8005c5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c60:	3b01      	subs	r3, #1
 8005c62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	029b      	lsls	r3, r3, #10
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c7c:	801a      	strh	r2, [r3, #0]
 8005c7e:	e024      	b.n	8005cca <USB_EPStartXfer+0x99e>
 8005c80:	463b      	mov	r3, r7
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	785b      	ldrb	r3, [r3, #1]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d11f      	bne.n	8005cca <USB_EPStartXfer+0x99e>
 8005c8a:	1d3b      	adds	r3, r7, #4
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c92:	1d3b      	adds	r3, r7, #4
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ca8:	463b      	mov	r3, r7
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	011a      	lsls	r2, r3, #4
 8005cb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cc8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005cca:	463b      	mov	r3, r7
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	891b      	ldrh	r3, [r3, #8]
 8005cd0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cd4:	463b      	mov	r3, r7
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6959      	ldr	r1, [r3, #20]
 8005cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005ce4:	1d38      	adds	r0, r7, #4
 8005ce6:	6800      	ldr	r0, [r0, #0]
 8005ce8:	f000 fd7e 	bl	80067e8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005cec:	463b      	mov	r3, r7
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	785b      	ldrb	r3, [r3, #1]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d122      	bne.n	8005d3c <USB_EPStartXfer+0xa10>
 8005cf6:	1d3b      	adds	r3, r7, #4
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d10:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005d14:	1d3b      	adds	r3, r7, #4
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	463b      	mov	r3, r7
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	441a      	add	r2, r3
 8005d22:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	8013      	strh	r3, [r2, #0]
 8005d3a:	e026      	b.n	8005d8a <USB_EPStartXfer+0xa5e>
 8005d3c:	463b      	mov	r3, r7
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	785b      	ldrb	r3, [r3, #1]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d121      	bne.n	8005d8a <USB_EPStartXfer+0xa5e>
 8005d46:	1d3b      	adds	r3, r7, #4
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	463b      	mov	r3, r7
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d60:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005d64:	1d3b      	adds	r3, r7, #4
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	463b      	mov	r3, r7
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	441a      	add	r2, r3
 8005d72:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005d8a:	1d3b      	adds	r3, r7, #4
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	463b      	mov	r3, r7
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f107 020e 	add.w	r2, r7, #14
 8005da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005da8:	8013      	strh	r3, [r2, #0]
 8005daa:	f107 030e 	add.w	r3, r7, #14
 8005dae:	f107 020e 	add.w	r2, r7, #14
 8005db2:	8812      	ldrh	r2, [r2, #0]
 8005db4:	f082 0210 	eor.w	r2, r2, #16
 8005db8:	801a      	strh	r2, [r3, #0]
 8005dba:	f107 030e 	add.w	r3, r7, #14
 8005dbe:	f107 020e 	add.w	r2, r7, #14
 8005dc2:	8812      	ldrh	r2, [r2, #0]
 8005dc4:	f082 0220 	eor.w	r2, r2, #32
 8005dc8:	801a      	strh	r2, [r3, #0]
 8005dca:	1d3b      	adds	r3, r7, #4
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	463b      	mov	r3, r7
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	441a      	add	r2, r3
 8005dd8:	f107 030e 	add.w	r3, r7, #14
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	8013      	strh	r3, [r2, #0]
 8005df2:	e3b5      	b.n	8006560 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005df4:	463b      	mov	r3, r7
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	7b1b      	ldrb	r3, [r3, #12]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f040 8090 	bne.w	8005f20 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e00:	463b      	mov	r3, r7
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	463b      	mov	r3, r7
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d90e      	bls.n	8005e2e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005e10:	463b      	mov	r3, r7
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005e1a:	463b      	mov	r3, r7
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	699a      	ldr	r2, [r3, #24]
 8005e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e24:	1ad2      	subs	r2, r2, r3
 8005e26:	463b      	mov	r3, r7
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	619a      	str	r2, [r3, #24]
 8005e2c:	e008      	b.n	8005e40 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005e2e:	463b      	mov	r3, r7
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005e38:	463b      	mov	r3, r7
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005e40:	1d3b      	adds	r3, r7, #4
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e48:	1d3b      	adds	r3, r7, #4
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	461a      	mov	r2, r3
 8005e54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e58:	4413      	add	r3, r2
 8005e5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e5e:	463b      	mov	r3, r7
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	011a      	lsls	r2, r3, #4
 8005e66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d116      	bne.n	8005eaa <USB_EPStartXfer+0xb7e>
 8005e7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e8e:	801a      	strh	r2, [r3, #0]
 8005e90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ea6:	801a      	strh	r2, [r3, #0]
 8005ea8:	e32c      	b.n	8006504 <USB_EPStartXfer+0x11d8>
 8005eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eae:	2b3e      	cmp	r3, #62	; 0x3e
 8005eb0:	d818      	bhi.n	8005ee4 <USB_EPStartXfer+0xbb8>
 8005eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eb6:	085b      	lsrs	r3, r3, #1
 8005eb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d004      	beq.n	8005ed2 <USB_EPStartXfer+0xba6>
 8005ec8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ecc:	3301      	adds	r3, #1
 8005ece:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ed2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	029b      	lsls	r3, r3, #10
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ee0:	801a      	strh	r2, [r3, #0]
 8005ee2:	e30f      	b.n	8006504 <USB_EPStartXfer+0x11d8>
 8005ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ee8:	095b      	lsrs	r3, r3, #5
 8005eea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ef2:	f003 031f 	and.w	r3, r3, #31
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d104      	bne.n	8005f04 <USB_EPStartXfer+0xbd8>
 8005efa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005efe:	3b01      	subs	r3, #1
 8005f00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	029b      	lsls	r3, r3, #10
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f1c:	801a      	strh	r2, [r3, #0]
 8005f1e:	e2f1      	b.n	8006504 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005f20:	463b      	mov	r3, r7
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	78db      	ldrb	r3, [r3, #3]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	f040 818f 	bne.w	800624a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005f2c:	463b      	mov	r3, r7
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	785b      	ldrb	r3, [r3, #1]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d175      	bne.n	8006022 <USB_EPStartXfer+0xcf6>
 8005f36:	1d3b      	adds	r3, r7, #4
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f3e:	1d3b      	adds	r3, r7, #4
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	461a      	mov	r2, r3
 8005f4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f4e:	4413      	add	r3, r2
 8005f50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f54:	463b      	mov	r3, r7
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	011a      	lsls	r2, r3, #4
 8005f5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f60:	4413      	add	r3, r2
 8005f62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d116      	bne.n	8005fa2 <USB_EPStartXfer+0xc76>
 8005f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f86:	801a      	strh	r2, [r3, #0]
 8005f88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f9e:	801a      	strh	r2, [r3, #0]
 8005fa0:	e065      	b.n	800606e <USB_EPStartXfer+0xd42>
 8005fa2:	463b      	mov	r3, r7
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	2b3e      	cmp	r3, #62	; 0x3e
 8005faa:	d81a      	bhi.n	8005fe2 <USB_EPStartXfer+0xcb6>
 8005fac:	463b      	mov	r3, r7
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	085b      	lsrs	r3, r3, #1
 8005fb4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fb8:	463b      	mov	r3, r7
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d004      	beq.n	8005fd0 <USB_EPStartXfer+0xca4>
 8005fc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fca:	3301      	adds	r3, #1
 8005fcc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	029b      	lsls	r3, r3, #10
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fde:	801a      	strh	r2, [r3, #0]
 8005fe0:	e045      	b.n	800606e <USB_EPStartXfer+0xd42>
 8005fe2:	463b      	mov	r3, r7
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fee:	463b      	mov	r3, r7
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d104      	bne.n	8006006 <USB_EPStartXfer+0xcda>
 8005ffc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006000:	3b01      	subs	r3, #1
 8006002:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006006:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800600a:	b29b      	uxth	r3, r3
 800600c:	029b      	lsls	r3, r3, #10
 800600e:	b29b      	uxth	r3, r3
 8006010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006018:	b29a      	uxth	r2, r3
 800601a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800601e:	801a      	strh	r2, [r3, #0]
 8006020:	e025      	b.n	800606e <USB_EPStartXfer+0xd42>
 8006022:	463b      	mov	r3, r7
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	785b      	ldrb	r3, [r3, #1]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d120      	bne.n	800606e <USB_EPStartXfer+0xd42>
 800602c:	1d3b      	adds	r3, r7, #4
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006034:	1d3b      	adds	r3, r7, #4
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800603c:	b29b      	uxth	r3, r3
 800603e:	461a      	mov	r2, r3
 8006040:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006044:	4413      	add	r3, r2
 8006046:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800604a:	463b      	mov	r3, r7
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	011a      	lsls	r2, r3, #4
 8006052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006056:	4413      	add	r3, r2
 8006058:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800605c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006060:	463b      	mov	r3, r7
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	b29a      	uxth	r2, r3
 8006068:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800606c:	801a      	strh	r2, [r3, #0]
 800606e:	1d3b      	adds	r3, r7, #4
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006076:	463b      	mov	r3, r7
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	785b      	ldrb	r3, [r3, #1]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d175      	bne.n	800616c <USB_EPStartXfer+0xe40>
 8006080:	1d3b      	adds	r3, r7, #4
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006088:	1d3b      	adds	r3, r7, #4
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006090:	b29b      	uxth	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006098:	4413      	add	r3, r2
 800609a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800609e:	463b      	mov	r3, r7
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	011a      	lsls	r2, r3, #4
 80060a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060aa:	4413      	add	r3, r2
 80060ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060b4:	463b      	mov	r3, r7
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d116      	bne.n	80060ec <USB_EPStartXfer+0xdc0>
 80060be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060d0:	801a      	strh	r2, [r3, #0]
 80060d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060e8:	801a      	strh	r2, [r3, #0]
 80060ea:	e061      	b.n	80061b0 <USB_EPStartXfer+0xe84>
 80060ec:	463b      	mov	r3, r7
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b3e      	cmp	r3, #62	; 0x3e
 80060f4:	d81a      	bhi.n	800612c <USB_EPStartXfer+0xe00>
 80060f6:	463b      	mov	r3, r7
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	085b      	lsrs	r3, r3, #1
 80060fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006102:	463b      	mov	r3, r7
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	d004      	beq.n	800611a <USB_EPStartXfer+0xdee>
 8006110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006114:	3301      	adds	r3, #1
 8006116:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800611a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611e:	b29b      	uxth	r3, r3
 8006120:	029b      	lsls	r3, r3, #10
 8006122:	b29a      	uxth	r2, r3
 8006124:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006128:	801a      	strh	r2, [r3, #0]
 800612a:	e041      	b.n	80061b0 <USB_EPStartXfer+0xe84>
 800612c:	463b      	mov	r3, r7
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006138:	463b      	mov	r3, r7
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f003 031f 	and.w	r3, r3, #31
 8006142:	2b00      	cmp	r3, #0
 8006144:	d104      	bne.n	8006150 <USB_EPStartXfer+0xe24>
 8006146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614a:	3b01      	subs	r3, #1
 800614c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006154:	b29b      	uxth	r3, r3
 8006156:	029b      	lsls	r3, r3, #10
 8006158:	b29b      	uxth	r3, r3
 800615a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800615e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006162:	b29a      	uxth	r2, r3
 8006164:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006168:	801a      	strh	r2, [r3, #0]
 800616a:	e021      	b.n	80061b0 <USB_EPStartXfer+0xe84>
 800616c:	463b      	mov	r3, r7
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	785b      	ldrb	r3, [r3, #1]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d11c      	bne.n	80061b0 <USB_EPStartXfer+0xe84>
 8006176:	1d3b      	adds	r3, r7, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800617e:	b29b      	uxth	r3, r3
 8006180:	461a      	mov	r2, r3
 8006182:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006186:	4413      	add	r3, r2
 8006188:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800618c:	463b      	mov	r3, r7
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	011a      	lsls	r2, r3, #4
 8006194:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006198:	4413      	add	r3, r2
 800619a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800619e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061a2:	463b      	mov	r3, r7
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80061ae:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80061b0:	463b      	mov	r3, r7
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 81a4 	beq.w	8006504 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80061bc:	1d3b      	adds	r3, r7, #4
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	463b      	mov	r3, r7
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80061d0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80061d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <USB_EPStartXfer+0xebc>
 80061dc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80061e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10d      	bne.n	8006204 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80061e8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80061ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f040 8187 	bne.w	8006504 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80061f6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80061fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f040 8180 	bne.w	8006504 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006204:	1d3b      	adds	r3, r7, #4
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	463b      	mov	r3, r7
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	b29b      	uxth	r3, r3
 8006216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006222:	1d3b      	adds	r3, r7, #4
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	463b      	mov	r3, r7
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	441a      	add	r2, r3
 8006230:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800623c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006240:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006244:	b29b      	uxth	r3, r3
 8006246:	8013      	strh	r3, [r2, #0]
 8006248:	e15c      	b.n	8006504 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800624a:	463b      	mov	r3, r7
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	78db      	ldrb	r3, [r3, #3]
 8006250:	2b01      	cmp	r3, #1
 8006252:	f040 8155 	bne.w	8006500 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006256:	463b      	mov	r3, r7
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	699a      	ldr	r2, [r3, #24]
 800625c:	463b      	mov	r3, r7
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	429a      	cmp	r2, r3
 8006264:	d90e      	bls.n	8006284 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8006266:	463b      	mov	r3, r7
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006270:	463b      	mov	r3, r7
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699a      	ldr	r2, [r3, #24]
 8006276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800627a:	1ad2      	subs	r2, r2, r3
 800627c:	463b      	mov	r3, r7
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	619a      	str	r2, [r3, #24]
 8006282:	e008      	b.n	8006296 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006284:	463b      	mov	r3, r7
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800628e:	463b      	mov	r3, r7
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2200      	movs	r2, #0
 8006294:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006296:	463b      	mov	r3, r7
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	785b      	ldrb	r3, [r3, #1]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d16f      	bne.n	8006380 <USB_EPStartXfer+0x1054>
 80062a0:	1d3b      	adds	r3, r7, #4
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062a8:	1d3b      	adds	r3, r7, #4
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	461a      	mov	r2, r3
 80062b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062b8:	4413      	add	r3, r2
 80062ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062be:	463b      	mov	r3, r7
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	011a      	lsls	r2, r3, #4
 80062c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062ca:	4413      	add	r3, r2
 80062cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d116      	bne.n	800630a <USB_EPStartXfer+0xfde>
 80062dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062ee:	801a      	strh	r2, [r3, #0]
 80062f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006300:	b29a      	uxth	r2, r3
 8006302:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006306:	801a      	strh	r2, [r3, #0]
 8006308:	e05f      	b.n	80063ca <USB_EPStartXfer+0x109e>
 800630a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800630e:	2b3e      	cmp	r3, #62	; 0x3e
 8006310:	d818      	bhi.n	8006344 <USB_EPStartXfer+0x1018>
 8006312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006316:	085b      	lsrs	r3, r3, #1
 8006318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800631c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d004      	beq.n	8006332 <USB_EPStartXfer+0x1006>
 8006328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800632c:	3301      	adds	r3, #1
 800632e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006336:	b29b      	uxth	r3, r3
 8006338:	029b      	lsls	r3, r3, #10
 800633a:	b29a      	uxth	r2, r3
 800633c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006340:	801a      	strh	r2, [r3, #0]
 8006342:	e042      	b.n	80063ca <USB_EPStartXfer+0x109e>
 8006344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006348:	095b      	lsrs	r3, r3, #5
 800634a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800634e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006352:	f003 031f 	and.w	r3, r3, #31
 8006356:	2b00      	cmp	r3, #0
 8006358:	d104      	bne.n	8006364 <USB_EPStartXfer+0x1038>
 800635a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800635e:	3b01      	subs	r3, #1
 8006360:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006368:	b29b      	uxth	r3, r3
 800636a:	029b      	lsls	r3, r3, #10
 800636c:	b29b      	uxth	r3, r3
 800636e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006376:	b29a      	uxth	r2, r3
 8006378:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800637c:	801a      	strh	r2, [r3, #0]
 800637e:	e024      	b.n	80063ca <USB_EPStartXfer+0x109e>
 8006380:	463b      	mov	r3, r7
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	785b      	ldrb	r3, [r3, #1]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d11f      	bne.n	80063ca <USB_EPStartXfer+0x109e>
 800638a:	1d3b      	adds	r3, r7, #4
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006392:	1d3b      	adds	r3, r7, #4
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800639a:	b29b      	uxth	r3, r3
 800639c:	461a      	mov	r2, r3
 800639e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063a2:	4413      	add	r3, r2
 80063a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063a8:	463b      	mov	r3, r7
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	011a      	lsls	r2, r3, #4
 80063b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063b4:	4413      	add	r3, r2
 80063b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80063be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063c8:	801a      	strh	r2, [r3, #0]
 80063ca:	1d3b      	adds	r3, r7, #4
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063d2:	463b      	mov	r3, r7
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	785b      	ldrb	r3, [r3, #1]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d16f      	bne.n	80064bc <USB_EPStartXfer+0x1190>
 80063dc:	1d3b      	adds	r3, r7, #4
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063e4:	1d3b      	adds	r3, r7, #4
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063f4:	4413      	add	r3, r2
 80063f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063fa:	463b      	mov	r3, r7
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	011a      	lsls	r2, r3, #4
 8006402:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006406:	4413      	add	r3, r2
 8006408:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800640c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d116      	bne.n	8006446 <USB_EPStartXfer+0x111a>
 8006418:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	b29b      	uxth	r3, r3
 8006420:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006424:	b29a      	uxth	r2, r3
 8006426:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800643c:	b29a      	uxth	r2, r3
 800643e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006442:	801a      	strh	r2, [r3, #0]
 8006444:	e05e      	b.n	8006504 <USB_EPStartXfer+0x11d8>
 8006446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800644a:	2b3e      	cmp	r3, #62	; 0x3e
 800644c:	d818      	bhi.n	8006480 <USB_EPStartXfer+0x1154>
 800644e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006452:	085b      	lsrs	r3, r3, #1
 8006454:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d004      	beq.n	800646e <USB_EPStartXfer+0x1142>
 8006464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006468:	3301      	adds	r3, #1
 800646a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800646e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006472:	b29b      	uxth	r3, r3
 8006474:	029b      	lsls	r3, r3, #10
 8006476:	b29a      	uxth	r2, r3
 8006478:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	e041      	b.n	8006504 <USB_EPStartXfer+0x11d8>
 8006480:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006484:	095b      	lsrs	r3, r3, #5
 8006486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800648a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800648e:	f003 031f 	and.w	r3, r3, #31
 8006492:	2b00      	cmp	r3, #0
 8006494:	d104      	bne.n	80064a0 <USB_EPStartXfer+0x1174>
 8006496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800649a:	3b01      	subs	r3, #1
 800649c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	029b      	lsls	r3, r3, #10
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064b8:	801a      	strh	r2, [r3, #0]
 80064ba:	e023      	b.n	8006504 <USB_EPStartXfer+0x11d8>
 80064bc:	463b      	mov	r3, r7
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	785b      	ldrb	r3, [r3, #1]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d11e      	bne.n	8006504 <USB_EPStartXfer+0x11d8>
 80064c6:	1d3b      	adds	r3, r7, #4
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064d6:	4413      	add	r3, r2
 80064d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064dc:	463b      	mov	r3, r7
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	011a      	lsls	r2, r3, #4
 80064e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064e8:	4413      	add	r3, r2
 80064ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	e001      	b.n	8006504 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e02e      	b.n	8006562 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006504:	1d3b      	adds	r3, r7, #4
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	463b      	mov	r3, r7
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	b29b      	uxth	r3, r3
 8006516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800651a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006522:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006526:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800652a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800652e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006532:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006536:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800653a:	1d3b      	adds	r3, r7, #4
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	463b      	mov	r3, r7
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	441a      	add	r2, r3
 8006548:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800654c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800655c:	b29b      	uxth	r3, r3
 800655e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	785b      	ldrb	r3, [r3, #1]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d020      	beq.n	80065c0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29b      	uxth	r3, r3
 800658c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006594:	81bb      	strh	r3, [r7, #12]
 8006596:	89bb      	ldrh	r3, [r7, #12]
 8006598:	f083 0310 	eor.w	r3, r3, #16
 800659c:	81bb      	strh	r3, [r7, #12]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	441a      	add	r2, r3
 80065a8:	89bb      	ldrh	r3, [r7, #12]
 80065aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	8013      	strh	r3, [r2, #0]
 80065be:	e01f      	b.n	8006600 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d6:	81fb      	strh	r3, [r7, #14]
 80065d8:	89fb      	ldrh	r3, [r7, #14]
 80065da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065de:	81fb      	strh	r3, [r7, #14]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	441a      	add	r2, r3
 80065ea:	89fb      	ldrh	r3, [r7, #14]
 80065ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	bc80      	pop	{r7}
 800660a:	4770      	bx	lr

0800660c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	7b1b      	ldrb	r3, [r3, #12]
 800661a:	2b00      	cmp	r3, #0
 800661c:	f040 809d 	bne.w	800675a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	785b      	ldrb	r3, [r3, #1]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d04c      	beq.n	80066c2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	823b      	strh	r3, [r7, #16]
 8006636:	8a3b      	ldrh	r3, [r7, #16]
 8006638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01b      	beq.n	8006678 <USB_EPClearStall+0x6c>
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	881b      	ldrh	r3, [r3, #0]
 800664c:	b29b      	uxth	r3, r3
 800664e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006656:	81fb      	strh	r3, [r7, #14]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	441a      	add	r2, r3
 8006662:	89fb      	ldrh	r3, [r7, #14]
 8006664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800666c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006670:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006674:	b29b      	uxth	r3, r3
 8006676:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	78db      	ldrb	r3, [r3, #3]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d06c      	beq.n	800675a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	b29b      	uxth	r3, r3
 800668e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006696:	81bb      	strh	r3, [r7, #12]
 8006698:	89bb      	ldrh	r3, [r7, #12]
 800669a:	f083 0320 	eor.w	r3, r3, #32
 800669e:	81bb      	strh	r3, [r7, #12]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	441a      	add	r2, r3
 80066aa:	89bb      	ldrh	r3, [r7, #12]
 80066ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066bc:	b29b      	uxth	r3, r3
 80066be:	8013      	strh	r3, [r2, #0]
 80066c0:	e04b      	b.n	800675a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	82fb      	strh	r3, [r7, #22]
 80066d0:	8afb      	ldrh	r3, [r7, #22]
 80066d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d01b      	beq.n	8006712 <USB_EPClearStall+0x106>
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f0:	82bb      	strh	r3, [r7, #20]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	441a      	add	r2, r3
 80066fc:	8abb      	ldrh	r3, [r7, #20]
 80066fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800670a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800670e:	b29b      	uxth	r3, r3
 8006710:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006728:	827b      	strh	r3, [r7, #18]
 800672a:	8a7b      	ldrh	r3, [r7, #18]
 800672c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006730:	827b      	strh	r3, [r7, #18]
 8006732:	8a7b      	ldrh	r3, [r7, #18]
 8006734:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006738:	827b      	strh	r3, [r7, #18]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	441a      	add	r2, r3
 8006744:	8a7b      	ldrh	r3, [r7, #18]
 8006746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800674a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800674e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006756:	b29b      	uxth	r3, r3
 8006758:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	bc80      	pop	{r7}
 8006764:	4770      	bx	lr

08006766 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	460b      	mov	r3, r1
 8006770:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006772:	78fb      	ldrb	r3, [r7, #3]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d103      	bne.n	8006780 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2280      	movs	r2, #128	; 0x80
 800677c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	bc80      	pop	{r7}
 800678a:	4770      	bx	lr

0800678c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr

080067a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bc80      	pop	{r7}
 80067b2:	4770      	bx	lr

080067b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80067c6:	68fb      	ldr	r3, [r7, #12]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bc80      	pop	{r7}
 80067d0:	4770      	bx	lr

080067d2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr

080067e8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b08d      	sub	sp, #52	; 0x34
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	4611      	mov	r1, r2
 80067f4:	461a      	mov	r2, r3
 80067f6:	460b      	mov	r3, r1
 80067f8:	80fb      	strh	r3, [r7, #6]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80067fe:	88bb      	ldrh	r3, [r7, #4]
 8006800:	3301      	adds	r3, #1
 8006802:	085b      	lsrs	r3, r3, #1
 8006804:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	005a      	lsls	r2, r3, #1
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800681a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006820:	e01e      	b.n	8006860 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	3301      	adds	r3, #1
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	b29b      	uxth	r3, r3
 8006834:	021b      	lsls	r3, r3, #8
 8006836:	b29b      	uxth	r3, r3
 8006838:	461a      	mov	r2, r3
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	4313      	orrs	r3, r2
 800683e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	b29a      	uxth	r2, r3
 8006844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006846:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684a:	3302      	adds	r3, #2
 800684c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	3302      	adds	r3, #2
 8006852:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	3301      	adds	r3, #1
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	3b01      	subs	r3, #1
 800685e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1dd      	bne.n	8006822 <USB_WritePMA+0x3a>
  }
}
 8006866:	bf00      	nop
 8006868:	3734      	adds	r7, #52	; 0x34
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr

08006870 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006870:	b480      	push	{r7}
 8006872:	b08b      	sub	sp, #44	; 0x2c
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	4611      	mov	r1, r2
 800687c:	461a      	mov	r2, r3
 800687e:	460b      	mov	r3, r1
 8006880:	80fb      	strh	r3, [r7, #6]
 8006882:	4613      	mov	r3, r2
 8006884:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006886:	88bb      	ldrh	r3, [r7, #4]
 8006888:	085b      	lsrs	r3, r3, #1
 800688a:	b29b      	uxth	r3, r3
 800688c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006896:	88fb      	ldrh	r3, [r7, #6]
 8006898:	005a      	lsls	r2, r3, #1
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068a2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24
 80068a8:	e01b      	b.n	80068e2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	3302      	adds	r3, #2
 80068b6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	3301      	adds	r3, #1
 80068c4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	0a1b      	lsrs	r3, r3, #8
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	3301      	adds	r3, #1
 80068d4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	3302      	adds	r3, #2
 80068da:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	3b01      	subs	r3, #1
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e0      	bne.n	80068aa <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80068e8:	88bb      	ldrh	r3, [r7, #4]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	701a      	strb	r2, [r3, #0]
  }
}
 8006904:	bf00      	nop
 8006906:	372c      	adds	r7, #44	; 0x2c
 8006908:	46bd      	mov	sp, r7
 800690a:	bc80      	pop	{r7}
 800690c:	4770      	bx	lr

0800690e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	460b      	mov	r3, r1
 8006918:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	7c1b      	ldrb	r3, [r3, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d115      	bne.n	8006952 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800692a:	2202      	movs	r2, #2
 800692c:	2181      	movs	r1, #129	; 0x81
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f001 fe1f 	bl	8008572 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800693a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800693e:	2202      	movs	r2, #2
 8006940:	2101      	movs	r1, #1
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 fe15 	bl	8008572 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006950:	e012      	b.n	8006978 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006952:	2340      	movs	r3, #64	; 0x40
 8006954:	2202      	movs	r2, #2
 8006956:	2181      	movs	r1, #129	; 0x81
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 fe0a 	bl	8008572 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006964:	2340      	movs	r3, #64	; 0x40
 8006966:	2202      	movs	r2, #2
 8006968:	2101      	movs	r1, #1
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 fe01 	bl	8008572 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006978:	2308      	movs	r3, #8
 800697a:	2203      	movs	r2, #3
 800697c:	2182      	movs	r1, #130	; 0x82
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 fdf7 	bl	8008572 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800698a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800698e:	f001 ff17 	bl	80087c0 <USBD_static_malloc>
 8006992:	4602      	mov	r2, r0
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d102      	bne.n	80069aa <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80069a4:	2301      	movs	r3, #1
 80069a6:	73fb      	strb	r3, [r7, #15]
 80069a8:	e026      	b.n	80069f8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2200      	movs	r2, #0
 80069c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	7c1b      	ldrb	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d109      	bne.n	80069e8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069de:	2101      	movs	r1, #1
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 feb7 	bl	8008754 <USBD_LL_PrepareReceive>
 80069e6:	e007      	b.n	80069f8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069ee:	2340      	movs	r3, #64	; 0x40
 80069f0:	2101      	movs	r1, #1
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f001 feae 	bl	8008754 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006a12:	2181      	movs	r1, #129	; 0x81
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 fdd2 	bl	80085be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006a20:	2101      	movs	r1, #1
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 fdcb 	bl	80085be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006a30:	2182      	movs	r1, #130	; 0x82
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 fdc3 	bl	80085be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00e      	beq.n	8006a66 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f001 febd 	bl	80087d8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a80:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d039      	beq.n	8006b0e <USBD_CDC_Setup+0x9e>
 8006a9a:	2b20      	cmp	r3, #32
 8006a9c:	d17c      	bne.n	8006b98 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	88db      	ldrh	r3, [r3, #6]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d029      	beq.n	8006afa <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	b25b      	sxtb	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	da11      	bge.n	8006ad4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006abc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	88d2      	ldrh	r2, [r2, #6]
 8006ac2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ac4:	6939      	ldr	r1, [r7, #16]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	88db      	ldrh	r3, [r3, #6]
 8006aca:	461a      	mov	r2, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f001 f9c9 	bl	8007e64 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006ad2:	e068      	b.n	8006ba6 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	785a      	ldrb	r2, [r3, #1]
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	88db      	ldrh	r3, [r3, #6]
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006aea:	6939      	ldr	r1, [r7, #16]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	88db      	ldrh	r3, [r3, #6]
 8006af0:	461a      	mov	r2, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 f9e4 	bl	8007ec0 <USBD_CtlPrepareRx>
      break;
 8006af8:	e055      	b.n	8006ba6 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	7850      	ldrb	r0, [r2, #1]
 8006b06:	2200      	movs	r2, #0
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	4798      	blx	r3
      break;
 8006b0c:	e04b      	b.n	8006ba6 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	785b      	ldrb	r3, [r3, #1]
 8006b12:	2b0a      	cmp	r3, #10
 8006b14:	d017      	beq.n	8006b46 <USBD_CDC_Setup+0xd6>
 8006b16:	2b0b      	cmp	r3, #11
 8006b18:	d029      	beq.n	8006b6e <USBD_CDC_Setup+0xfe>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d133      	bne.n	8006b86 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d107      	bne.n	8006b38 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006b28:	f107 030c 	add.w	r3, r7, #12
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 f997 	bl	8007e64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b36:	e02e      	b.n	8006b96 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f001 f928 	bl	8007d90 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b40:	2302      	movs	r3, #2
 8006b42:	75fb      	strb	r3, [r7, #23]
          break;
 8006b44:	e027      	b.n	8006b96 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b4c:	2b03      	cmp	r3, #3
 8006b4e:	d107      	bne.n	8006b60 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b50:	f107 030f 	add.w	r3, r7, #15
 8006b54:	2201      	movs	r2, #1
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f001 f983 	bl	8007e64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b5e:	e01a      	b.n	8006b96 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 f914 	bl	8007d90 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b68:	2302      	movs	r3, #2
 8006b6a:	75fb      	strb	r3, [r7, #23]
          break;
 8006b6c:	e013      	b.n	8006b96 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b74:	2b03      	cmp	r3, #3
 8006b76:	d00d      	beq.n	8006b94 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f001 f908 	bl	8007d90 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b80:	2302      	movs	r3, #2
 8006b82:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b84:	e006      	b.n	8006b94 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 f901 	bl	8007d90 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b8e:	2302      	movs	r3, #2
 8006b90:	75fb      	strb	r3, [r7, #23]
          break;
 8006b92:	e000      	b.n	8006b96 <USBD_CDC_Setup+0x126>
          break;
 8006b94:	bf00      	nop
      }
      break;
 8006b96:	e006      	b.n	8006ba6 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f001 f8f8 	bl	8007d90 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba4:	bf00      	nop
  }

  return ret;
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	460b      	mov	r3, r1
 8006bba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bca:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d03a      	beq.n	8006c4c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006bd6:	78fa      	ldrb	r2, [r7, #3]
 8006bd8:	6879      	ldr	r1, [r7, #4]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	440b      	add	r3, r1
 8006be4:	331c      	adds	r3, #28
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d029      	beq.n	8006c40 <USBD_CDC_DataIn+0x90>
 8006bec:	78fa      	ldrb	r2, [r7, #3]
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	440b      	add	r3, r1
 8006bfa:	331c      	adds	r3, #28
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	78f9      	ldrb	r1, [r7, #3]
 8006c00:	68b8      	ldr	r0, [r7, #8]
 8006c02:	460b      	mov	r3, r1
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	440b      	add	r3, r1
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	4403      	add	r3, r0
 8006c0c:	3338      	adds	r3, #56	; 0x38
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c14:	fb03 f301 	mul.w	r3, r3, r1
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d110      	bne.n	8006c40 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006c1e:	78fa      	ldrb	r2, [r7, #3]
 8006c20:	6879      	ldr	r1, [r7, #4]
 8006c22:	4613      	mov	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	440b      	add	r3, r1
 8006c2c:	331c      	adds	r3, #28
 8006c2e:	2200      	movs	r2, #0
 8006c30:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c32:	78f9      	ldrb	r1, [r7, #3]
 8006c34:	2300      	movs	r3, #0
 8006c36:	2200      	movs	r2, #0
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 fd68 	bl	800870e <USBD_LL_Transmit>
 8006c3e:	e003      	b.n	8006c48 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	e000      	b.n	8006c4e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006c4c:	2302      	movs	r3, #2
  }
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c68:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c6a:	78fb      	ldrb	r3, [r7, #3]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f001 fd93 	bl	800879a <USBD_LL_GetRxDataSize>
 8006c74:	4602      	mov	r2, r0
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00d      	beq.n	8006ca2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c9a:	4611      	mov	r1, r2
 8006c9c:	4798      	blx	r3

    return USBD_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	e000      	b.n	8006ca4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006ca2:	2302      	movs	r3, #2
  }
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cba:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d015      	beq.n	8006cf2 <USBD_CDC_EP0_RxReady+0x46>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ccc:	2bff      	cmp	r3, #255	; 0xff
 8006cce:	d010      	beq.n	8006cf2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006cde:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ce6:	b292      	uxth	r2, r2
 8006ce8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	22ff      	movs	r2, #255	; 0xff
 8006cee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2243      	movs	r2, #67	; 0x43
 8006d08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006d0a:	4b03      	ldr	r3, [pc, #12]	; (8006d18 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	200000a8 	.word	0x200000a8

08006d1c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2243      	movs	r2, #67	; 0x43
 8006d28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006d2a:	4b03      	ldr	r3, [pc, #12]	; (8006d38 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc80      	pop	{r7}
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	20000064 	.word	0x20000064

08006d3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2243      	movs	r2, #67	; 0x43
 8006d48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006d4a:	4b03      	ldr	r3, [pc, #12]	; (8006d58 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bc80      	pop	{r7}
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	200000ec 	.word	0x200000ec

08006d5c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	220a      	movs	r2, #10
 8006d68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006d6a:	4b03      	ldr	r3, [pc, #12]	; (8006d78 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bc80      	pop	{r7}
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	20000020 	.word	0x20000020

08006d7c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006d86:	2302      	movs	r3, #2
 8006d88:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d005      	beq.n	8006d9c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bc80      	pop	{r7}
 8006da6:	4770      	bx	lr

08006da8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	4613      	mov	r3, r2
 8006db4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dbc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006dc6:	88fa      	ldrh	r2, [r7, #6]
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	371c      	adds	r7, #28
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bc80      	pop	{r7}
 8006dd8:	4770      	bx	lr

08006dda <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b085      	sub	sp, #20
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dea:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bc80      	pop	{r7}
 8006dfe:	4770      	bx	lr

08006e00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d017      	beq.n	8006e4a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	7c1b      	ldrb	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d109      	bne.n	8006e36 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f001 fc90 	bl	8008754 <USBD_LL_PrepareReceive>
 8006e34:	e007      	b.n	8006e46 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e3c:	2340      	movs	r3, #64	; 0x40
 8006e3e:	2101      	movs	r1, #1
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 fc87 	bl	8008754 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	e000      	b.n	8006e4c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006e4a:	2302      	movs	r3, #2
  }
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e01a      	b.n	8006ea2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	79fa      	ldrb	r2, [r7, #7]
 8006e98:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f001 faf4 	bl	8008488 <USBD_LL_Init>

  return USBD_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b085      	sub	sp, #20
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d006      	beq.n	8006ecc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	73fb      	strb	r3, [r7, #15]
 8006eca:	e001      	b.n	8006ed0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006ecc:	2302      	movs	r3, #2
 8006ece:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bc80      	pop	{r7}
 8006eda:	4770      	bx	lr

08006edc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f001 fb29 	bl	800853c <USBD_LL_Start>

  return USBD_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bc80      	pop	{r7}
 8006f06:	4770      	bx	lr

08006f08 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	460b      	mov	r3, r1
 8006f12:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006f14:	2302      	movs	r3, #2
 8006f16:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00c      	beq.n	8006f3c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	4611      	mov	r1, r2
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	4798      	blx	r3
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b082      	sub	sp, #8
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	460b      	mov	r3, r1
 8006f50:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	78fa      	ldrb	r2, [r7, #3]
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3

  return USBD_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 feca 	bl	8007d18 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f92:	461a      	mov	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006fa0:	f003 031f 	and.w	r3, r3, #31
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d00c      	beq.n	8006fc2 <USBD_LL_SetupStage+0x56>
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d302      	bcc.n	8006fb2 <USBD_LL_SetupStage+0x46>
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d010      	beq.n	8006fd2 <USBD_LL_SetupStage+0x66>
 8006fb0:	e017      	b.n	8006fe2 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f9ca 	bl	8007354 <USBD_StdDevReq>
      break;
 8006fc0:	e01a      	b.n	8006ff8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fa2c 	bl	8007428 <USBD_StdItfReq>
      break;
 8006fd0:	e012      	b.n	8006ff8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fa6a 	bl	80074b4 <USBD_StdEPReq>
      break;
 8006fe0:	e00a      	b.n	8006ff8 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006fe8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	4619      	mov	r1, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f001 fb03 	bl	80085fc <USBD_LL_StallEP>
      break;
 8006ff6:	bf00      	nop
  }

  return USBD_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b086      	sub	sp, #24
 8007006:	af00      	add	r7, sp, #0
 8007008:	60f8      	str	r0, [r7, #12]
 800700a:	460b      	mov	r3, r1
 800700c:	607a      	str	r2, [r7, #4]
 800700e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007010:	7afb      	ldrb	r3, [r7, #11]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d14b      	bne.n	80070ae <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800701c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007024:	2b03      	cmp	r3, #3
 8007026:	d134      	bne.n	8007092 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	68da      	ldr	r2, [r3, #12]
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	429a      	cmp	r2, r3
 8007032:	d919      	bls.n	8007068 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	68da      	ldr	r2, [r3, #12]
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	1ad2      	subs	r2, r2, r3
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800704a:	429a      	cmp	r2, r3
 800704c:	d203      	bcs.n	8007056 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007052:	b29b      	uxth	r3, r3
 8007054:	e002      	b.n	800705c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800705a:	b29b      	uxth	r3, r3
 800705c:	461a      	mov	r2, r3
 800705e:	6879      	ldr	r1, [r7, #4]
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 ff4b 	bl	8007efc <USBD_CtlContinueRx>
 8007066:	e038      	b.n	80070da <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00a      	beq.n	800708a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800707a:	2b03      	cmp	r3, #3
 800707c:	d105      	bne.n	800708a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 ff48 	bl	8007f20 <USBD_CtlSendStatus>
 8007090:	e023      	b.n	80070da <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007098:	2b05      	cmp	r3, #5
 800709a:	d11e      	bne.n	80070da <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80070a4:	2100      	movs	r1, #0
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f001 faa8 	bl	80085fc <USBD_LL_StallEP>
 80070ac:	e015      	b.n	80070da <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00d      	beq.n	80070d6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80070c0:	2b03      	cmp	r3, #3
 80070c2:	d108      	bne.n	80070d6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	7afa      	ldrb	r2, [r7, #11]
 80070ce:	4611      	mov	r1, r2
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	4798      	blx	r3
 80070d4:	e001      	b.n	80070da <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070d6:	2302      	movs	r3, #2
 80070d8:	e000      	b.n	80070dc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	460b      	mov	r3, r1
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070f2:	7afb      	ldrb	r3, [r7, #11]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d17f      	bne.n	80071f8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3314      	adds	r3, #20
 80070fc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007104:	2b02      	cmp	r3, #2
 8007106:	d15c      	bne.n	80071c2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	68da      	ldr	r2, [r3, #12]
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	429a      	cmp	r2, r3
 8007112:	d915      	bls.n	8007140 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	1ad2      	subs	r2, r2, r3
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	b29b      	uxth	r3, r3
 8007128:	461a      	mov	r2, r3
 800712a:	6879      	ldr	r1, [r7, #4]
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 feb5 	bl	8007e9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007132:	2300      	movs	r3, #0
 8007134:	2200      	movs	r2, #0
 8007136:	2100      	movs	r1, #0
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f001 fb0b 	bl	8008754 <USBD_LL_PrepareReceive>
 800713e:	e04e      	b.n	80071de <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	6912      	ldr	r2, [r2, #16]
 8007148:	fbb3 f1f2 	udiv	r1, r3, r2
 800714c:	fb02 f201 	mul.w	r2, r2, r1
 8007150:	1a9b      	subs	r3, r3, r2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d11c      	bne.n	8007190 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	689a      	ldr	r2, [r3, #8]
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800715e:	429a      	cmp	r2, r3
 8007160:	d316      	bcc.n	8007190 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	689a      	ldr	r2, [r3, #8]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800716c:	429a      	cmp	r2, r3
 800716e:	d20f      	bcs.n	8007190 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007170:	2200      	movs	r2, #0
 8007172:	2100      	movs	r1, #0
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 fe91 	bl	8007e9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007182:	2300      	movs	r3, #0
 8007184:	2200      	movs	r2, #0
 8007186:	2100      	movs	r1, #0
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f001 fae3 	bl	8008754 <USBD_LL_PrepareReceive>
 800718e:	e026      	b.n	80071de <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00a      	beq.n	80071b2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d105      	bne.n	80071b2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80071b2:	2180      	movs	r1, #128	; 0x80
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f001 fa21 	bl	80085fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 fec3 	bl	8007f46 <USBD_CtlReceiveStatus>
 80071c0:	e00d      	b.n	80071de <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	d004      	beq.n	80071d6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d103      	bne.n	80071de <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80071d6:	2180      	movs	r1, #128	; 0x80
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f001 fa0f 	bl	80085fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d11d      	bne.n	8007224 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f7ff fe83 	bl	8006ef4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071f6:	e015      	b.n	8007224 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00d      	beq.n	8007220 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800720a:	2b03      	cmp	r3, #3
 800720c:	d108      	bne.n	8007220 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	7afa      	ldrb	r2, [r7, #11]
 8007218:	4611      	mov	r1, r2
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	4798      	blx	r3
 800721e:	e001      	b.n	8007224 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007220:	2302      	movs	r3, #2
 8007222:	e000      	b.n	8007226 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b082      	sub	sp, #8
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007236:	2340      	movs	r3, #64	; 0x40
 8007238:	2200      	movs	r2, #0
 800723a:	2100      	movs	r1, #0
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 f998 	bl	8008572 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2240      	movs	r2, #64	; 0x40
 800724e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007252:	2340      	movs	r3, #64	; 0x40
 8007254:	2200      	movs	r2, #0
 8007256:	2180      	movs	r1, #128	; 0x80
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 f98a 	bl	8008572 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2240      	movs	r2, #64	; 0x40
 8007268:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728e:	2b00      	cmp	r3, #0
 8007290:	d009      	beq.n	80072a6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	6852      	ldr	r2, [r2, #4]
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	4611      	mov	r1, r2
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	4798      	blx	r3
  }

  return USBD_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	78fa      	ldrb	r2, [r7, #3]
 80072c0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bc80      	pop	{r7}
 80072cc:	4770      	bx	lr

080072ce <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2204      	movs	r2, #4
 80072e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bc80      	pop	{r7}
 80072f4:	4770      	bx	lr

080072f6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007304:	2b04      	cmp	r3, #4
 8007306:	d105      	bne.n	8007314 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	bc80      	pop	{r7}
 800731e:	4770      	bx	lr

08007320 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800732e:	2b03      	cmp	r3, #3
 8007330:	d10b      	bne.n	800734a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d005      	beq.n	800734a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800736a:	2b20      	cmp	r3, #32
 800736c:	d004      	beq.n	8007378 <USBD_StdDevReq+0x24>
 800736e:	2b40      	cmp	r3, #64	; 0x40
 8007370:	d002      	beq.n	8007378 <USBD_StdDevReq+0x24>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d008      	beq.n	8007388 <USBD_StdDevReq+0x34>
 8007376:	e04c      	b.n	8007412 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	4798      	blx	r3
      break;
 8007386:	e049      	b.n	800741c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	785b      	ldrb	r3, [r3, #1]
 800738c:	2b09      	cmp	r3, #9
 800738e:	d83a      	bhi.n	8007406 <USBD_StdDevReq+0xb2>
 8007390:	a201      	add	r2, pc, #4	; (adr r2, 8007398 <USBD_StdDevReq+0x44>)
 8007392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007396:	bf00      	nop
 8007398:	080073e9 	.word	0x080073e9
 800739c:	080073fd 	.word	0x080073fd
 80073a0:	08007407 	.word	0x08007407
 80073a4:	080073f3 	.word	0x080073f3
 80073a8:	08007407 	.word	0x08007407
 80073ac:	080073cb 	.word	0x080073cb
 80073b0:	080073c1 	.word	0x080073c1
 80073b4:	08007407 	.word	0x08007407
 80073b8:	080073df 	.word	0x080073df
 80073bc:	080073d5 	.word	0x080073d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80073c0:	6839      	ldr	r1, [r7, #0]
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f9d4 	bl	8007770 <USBD_GetDescriptor>
          break;
 80073c8:	e022      	b.n	8007410 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fb37 	bl	8007a40 <USBD_SetAddress>
          break;
 80073d2:	e01d      	b.n	8007410 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fb74 	bl	8007ac4 <USBD_SetConfig>
          break;
 80073dc:	e018      	b.n	8007410 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fbfd 	bl	8007be0 <USBD_GetConfig>
          break;
 80073e6:	e013      	b.n	8007410 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fc2c 	bl	8007c48 <USBD_GetStatus>
          break;
 80073f0:	e00e      	b.n	8007410 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fc5a 	bl	8007cae <USBD_SetFeature>
          break;
 80073fa:	e009      	b.n	8007410 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fc69 	bl	8007cd6 <USBD_ClrFeature>
          break;
 8007404:	e004      	b.n	8007410 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fcc1 	bl	8007d90 <USBD_CtlError>
          break;
 800740e:	bf00      	nop
      }
      break;
 8007410:	e004      	b.n	800741c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007412:	6839      	ldr	r1, [r7, #0]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fcbb 	bl	8007d90 <USBD_CtlError>
      break;
 800741a:	bf00      	nop
  }

  return ret;
 800741c:	7bfb      	ldrb	r3, [r7, #15]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop

08007428 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800743e:	2b20      	cmp	r3, #32
 8007440:	d003      	beq.n	800744a <USBD_StdItfReq+0x22>
 8007442:	2b40      	cmp	r3, #64	; 0x40
 8007444:	d001      	beq.n	800744a <USBD_StdItfReq+0x22>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d12a      	bne.n	80074a0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007450:	3b01      	subs	r3, #1
 8007452:	2b02      	cmp	r3, #2
 8007454:	d81d      	bhi.n	8007492 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	889b      	ldrh	r3, [r3, #4]
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b01      	cmp	r3, #1
 800745e:	d813      	bhi.n	8007488 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	6839      	ldr	r1, [r7, #0]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	4798      	blx	r3
 800746e:	4603      	mov	r3, r0
 8007470:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	88db      	ldrh	r3, [r3, #6]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d110      	bne.n	800749c <USBD_StdItfReq+0x74>
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10d      	bne.n	800749c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fd4d 	bl	8007f20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007486:	e009      	b.n	800749c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fc80 	bl	8007d90 <USBD_CtlError>
          break;
 8007490:	e004      	b.n	800749c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 fc7b 	bl	8007d90 <USBD_CtlError>
          break;
 800749a:	e000      	b.n	800749e <USBD_StdItfReq+0x76>
          break;
 800749c:	bf00      	nop
      }
      break;
 800749e:	e004      	b.n	80074aa <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fc74 	bl	8007d90 <USBD_CtlError>
      break;
 80074a8:	bf00      	nop
  }

  return USBD_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	889b      	ldrh	r3, [r3, #4]
 80074c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074d0:	2b20      	cmp	r3, #32
 80074d2:	d004      	beq.n	80074de <USBD_StdEPReq+0x2a>
 80074d4:	2b40      	cmp	r3, #64	; 0x40
 80074d6:	d002      	beq.n	80074de <USBD_StdEPReq+0x2a>
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d008      	beq.n	80074ee <USBD_StdEPReq+0x3a>
 80074dc:	e13d      	b.n	800775a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	4798      	blx	r3
      break;
 80074ec:	e13a      	b.n	8007764 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074f6:	2b20      	cmp	r3, #32
 80074f8:	d10a      	bne.n	8007510 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	4798      	blx	r3
 8007508:	4603      	mov	r3, r0
 800750a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	e12a      	b.n	8007766 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	785b      	ldrb	r3, [r3, #1]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d03e      	beq.n	8007596 <USBD_StdEPReq+0xe2>
 8007518:	2b03      	cmp	r3, #3
 800751a:	d002      	beq.n	8007522 <USBD_StdEPReq+0x6e>
 800751c:	2b00      	cmp	r3, #0
 800751e:	d070      	beq.n	8007602 <USBD_StdEPReq+0x14e>
 8007520:	e115      	b.n	800774e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007528:	2b02      	cmp	r3, #2
 800752a:	d002      	beq.n	8007532 <USBD_StdEPReq+0x7e>
 800752c:	2b03      	cmp	r3, #3
 800752e:	d015      	beq.n	800755c <USBD_StdEPReq+0xa8>
 8007530:	e02b      	b.n	800758a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00c      	beq.n	8007552 <USBD_StdEPReq+0x9e>
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	2b80      	cmp	r3, #128	; 0x80
 800753c:	d009      	beq.n	8007552 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 f85a 	bl	80085fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007548:	2180      	movs	r1, #128	; 0x80
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 f856 	bl	80085fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007550:	e020      	b.n	8007594 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007552:	6839      	ldr	r1, [r7, #0]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fc1b 	bl	8007d90 <USBD_CtlError>
              break;
 800755a:	e01b      	b.n	8007594 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	885b      	ldrh	r3, [r3, #2]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10e      	bne.n	8007582 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007564:	7bbb      	ldrb	r3, [r7, #14]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00b      	beq.n	8007582 <USBD_StdEPReq+0xce>
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	2b80      	cmp	r3, #128	; 0x80
 800756e:	d008      	beq.n	8007582 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	88db      	ldrh	r3, [r3, #6]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d104      	bne.n	8007582 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f001 f83d 	bl	80085fc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fccc 	bl	8007f20 <USBD_CtlSendStatus>

              break;
 8007588:	e004      	b.n	8007594 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fbff 	bl	8007d90 <USBD_CtlError>
              break;
 8007592:	bf00      	nop
          }
          break;
 8007594:	e0e0      	b.n	8007758 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800759c:	2b02      	cmp	r3, #2
 800759e:	d002      	beq.n	80075a6 <USBD_StdEPReq+0xf2>
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d015      	beq.n	80075d0 <USBD_StdEPReq+0x11c>
 80075a4:	e026      	b.n	80075f4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075a6:	7bbb      	ldrb	r3, [r7, #14]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00c      	beq.n	80075c6 <USBD_StdEPReq+0x112>
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	2b80      	cmp	r3, #128	; 0x80
 80075b0:	d009      	beq.n	80075c6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f001 f820 	bl	80085fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80075bc:	2180      	movs	r1, #128	; 0x80
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 f81c 	bl	80085fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075c4:	e01c      	b.n	8007600 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fbe1 	bl	8007d90 <USBD_CtlError>
              break;
 80075ce:	e017      	b.n	8007600 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	885b      	ldrh	r3, [r3, #2]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d112      	bne.n	80075fe <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d004      	beq.n	80075ec <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	4619      	mov	r1, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f001 f827 	bl	800863a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fc97 	bl	8007f20 <USBD_CtlSendStatus>
              }
              break;
 80075f2:	e004      	b.n	80075fe <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fbca 	bl	8007d90 <USBD_CtlError>
              break;
 80075fc:	e000      	b.n	8007600 <USBD_StdEPReq+0x14c>
              break;
 80075fe:	bf00      	nop
          }
          break;
 8007600:	e0aa      	b.n	8007758 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007608:	2b02      	cmp	r3, #2
 800760a:	d002      	beq.n	8007612 <USBD_StdEPReq+0x15e>
 800760c:	2b03      	cmp	r3, #3
 800760e:	d032      	beq.n	8007676 <USBD_StdEPReq+0x1c2>
 8007610:	e097      	b.n	8007742 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d007      	beq.n	8007628 <USBD_StdEPReq+0x174>
 8007618:	7bbb      	ldrb	r3, [r7, #14]
 800761a:	2b80      	cmp	r3, #128	; 0x80
 800761c:	d004      	beq.n	8007628 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fbb5 	bl	8007d90 <USBD_CtlError>
                break;
 8007626:	e091      	b.n	800774c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007628:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800762c:	2b00      	cmp	r3, #0
 800762e:	da0b      	bge.n	8007648 <USBD_StdEPReq+0x194>
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007636:	4613      	mov	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	3310      	adds	r3, #16
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	4413      	add	r3, r2
 8007644:	3304      	adds	r3, #4
 8007646:	e00b      	b.n	8007660 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	4413      	add	r3, r2
 800765e:	3304      	adds	r3, #4
 8007660:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2200      	movs	r2, #0
 8007666:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2202      	movs	r2, #2
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fbf8 	bl	8007e64 <USBD_CtlSendData>
              break;
 8007674:	e06a      	b.n	800774c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007676:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800767a:	2b00      	cmp	r3, #0
 800767c:	da11      	bge.n	80076a2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800767e:	7bbb      	ldrb	r3, [r7, #14]
 8007680:	f003 020f 	and.w	r2, r3, #15
 8007684:	6879      	ldr	r1, [r7, #4]
 8007686:	4613      	mov	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	440b      	add	r3, r1
 8007690:	3318      	adds	r3, #24
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d117      	bne.n	80076c8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fb78 	bl	8007d90 <USBD_CtlError>
                  break;
 80076a0:	e054      	b.n	800774c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	f003 020f 	and.w	r2, r3, #15
 80076a8:	6879      	ldr	r1, [r7, #4]
 80076aa:	4613      	mov	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	440b      	add	r3, r1
 80076b4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d104      	bne.n	80076c8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fb65 	bl	8007d90 <USBD_CtlError>
                  break;
 80076c6:	e041      	b.n	800774c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	da0b      	bge.n	80076e8 <USBD_StdEPReq+0x234>
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076d6:	4613      	mov	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	3310      	adds	r3, #16
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	4413      	add	r3, r2
 80076e4:	3304      	adds	r3, #4
 80076e6:	e00b      	b.n	8007700 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076ee:	4613      	mov	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	4413      	add	r3, r2
 80076fe:	3304      	adds	r3, #4
 8007700:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <USBD_StdEPReq+0x25a>
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	2b80      	cmp	r3, #128	; 0x80
 800770c:	d103      	bne.n	8007716 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	2200      	movs	r2, #0
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	e00e      	b.n	8007734 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 ffac 	bl	8008678 <USBD_LL_IsStallEP>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2201      	movs	r2, #1
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	e002      	b.n	8007734 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	2200      	movs	r2, #0
 8007732:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2202      	movs	r2, #2
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fb92 	bl	8007e64 <USBD_CtlSendData>
              break;
 8007740:	e004      	b.n	800774c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fb23 	bl	8007d90 <USBD_CtlError>
              break;
 800774a:	bf00      	nop
          }
          break;
 800774c:	e004      	b.n	8007758 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fb1d 	bl	8007d90 <USBD_CtlError>
          break;
 8007756:	bf00      	nop
      }
      break;
 8007758:	e004      	b.n	8007764 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fb17 	bl	8007d90 <USBD_CtlError>
      break;
 8007762:	bf00      	nop
  }

  return ret;
 8007764:	7bfb      	ldrb	r3, [r7, #15]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
	...

08007770 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	885b      	ldrh	r3, [r3, #2]
 800778a:	0a1b      	lsrs	r3, r3, #8
 800778c:	b29b      	uxth	r3, r3
 800778e:	3b01      	subs	r3, #1
 8007790:	2b06      	cmp	r3, #6
 8007792:	f200 8128 	bhi.w	80079e6 <USBD_GetDescriptor+0x276>
 8007796:	a201      	add	r2, pc, #4	; (adr r2, 800779c <USBD_GetDescriptor+0x2c>)
 8007798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779c:	080077b9 	.word	0x080077b9
 80077a0:	080077d1 	.word	0x080077d1
 80077a4:	08007811 	.word	0x08007811
 80077a8:	080079e7 	.word	0x080079e7
 80077ac:	080079e7 	.word	0x080079e7
 80077b0:	08007987 	.word	0x08007987
 80077b4:	080079b3 	.word	0x080079b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	7c12      	ldrb	r2, [r2, #16]
 80077c4:	f107 0108 	add.w	r1, r7, #8
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
 80077cc:	60f8      	str	r0, [r7, #12]
      break;
 80077ce:	e112      	b.n	80079f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	7c1b      	ldrb	r3, [r3, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10d      	bne.n	80077f4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e0:	f107 0208 	add.w	r2, r7, #8
 80077e4:	4610      	mov	r0, r2
 80077e6:	4798      	blx	r3
 80077e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3301      	adds	r3, #1
 80077ee:	2202      	movs	r2, #2
 80077f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077f2:	e100      	b.n	80079f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fc:	f107 0208 	add.w	r2, r7, #8
 8007800:	4610      	mov	r0, r2
 8007802:	4798      	blx	r3
 8007804:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3301      	adds	r3, #1
 800780a:	2202      	movs	r2, #2
 800780c:	701a      	strb	r2, [r3, #0]
      break;
 800780e:	e0f2      	b.n	80079f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	885b      	ldrh	r3, [r3, #2]
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b05      	cmp	r3, #5
 8007818:	f200 80ac 	bhi.w	8007974 <USBD_GetDescriptor+0x204>
 800781c:	a201      	add	r2, pc, #4	; (adr r2, 8007824 <USBD_GetDescriptor+0xb4>)
 800781e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007822:	bf00      	nop
 8007824:	0800783d 	.word	0x0800783d
 8007828:	08007871 	.word	0x08007871
 800782c:	080078a5 	.word	0x080078a5
 8007830:	080078d9 	.word	0x080078d9
 8007834:	0800790d 	.word	0x0800790d
 8007838:	08007941 	.word	0x08007941
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00b      	beq.n	8007860 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	7c12      	ldrb	r2, [r2, #16]
 8007854:	f107 0108 	add.w	r1, r7, #8
 8007858:	4610      	mov	r0, r2
 800785a:	4798      	blx	r3
 800785c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800785e:	e091      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fa94 	bl	8007d90 <USBD_CtlError>
            err++;
 8007868:	7afb      	ldrb	r3, [r7, #11]
 800786a:	3301      	adds	r3, #1
 800786c:	72fb      	strb	r3, [r7, #11]
          break;
 800786e:	e089      	b.n	8007984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00b      	beq.n	8007894 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	7c12      	ldrb	r2, [r2, #16]
 8007888:	f107 0108 	add.w	r1, r7, #8
 800788c:	4610      	mov	r0, r2
 800788e:	4798      	blx	r3
 8007890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007892:	e077      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fa7a 	bl	8007d90 <USBD_CtlError>
            err++;
 800789c:	7afb      	ldrb	r3, [r7, #11]
 800789e:	3301      	adds	r3, #1
 80078a0:	72fb      	strb	r3, [r7, #11]
          break;
 80078a2:	e06f      	b.n	8007984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00b      	beq.n	80078c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	7c12      	ldrb	r2, [r2, #16]
 80078bc:	f107 0108 	add.w	r1, r7, #8
 80078c0:	4610      	mov	r0, r2
 80078c2:	4798      	blx	r3
 80078c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078c6:	e05d      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fa60 	bl	8007d90 <USBD_CtlError>
            err++;
 80078d0:	7afb      	ldrb	r3, [r7, #11]
 80078d2:	3301      	adds	r3, #1
 80078d4:	72fb      	strb	r3, [r7, #11]
          break;
 80078d6:	e055      	b.n	8007984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00b      	beq.n	80078fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	7c12      	ldrb	r2, [r2, #16]
 80078f0:	f107 0108 	add.w	r1, r7, #8
 80078f4:	4610      	mov	r0, r2
 80078f6:	4798      	blx	r3
 80078f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078fa:	e043      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fa46 	bl	8007d90 <USBD_CtlError>
            err++;
 8007904:	7afb      	ldrb	r3, [r7, #11]
 8007906:	3301      	adds	r3, #1
 8007908:	72fb      	strb	r3, [r7, #11]
          break;
 800790a:	e03b      	b.n	8007984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00b      	beq.n	8007930 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	7c12      	ldrb	r2, [r2, #16]
 8007924:	f107 0108 	add.w	r1, r7, #8
 8007928:	4610      	mov	r0, r2
 800792a:	4798      	blx	r3
 800792c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800792e:	e029      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fa2c 	bl	8007d90 <USBD_CtlError>
            err++;
 8007938:	7afb      	ldrb	r3, [r7, #11]
 800793a:	3301      	adds	r3, #1
 800793c:	72fb      	strb	r3, [r7, #11]
          break;
 800793e:	e021      	b.n	8007984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00b      	beq.n	8007964 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	7c12      	ldrb	r2, [r2, #16]
 8007958:	f107 0108 	add.w	r1, r7, #8
 800795c:	4610      	mov	r0, r2
 800795e:	4798      	blx	r3
 8007960:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007962:	e00f      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fa12 	bl	8007d90 <USBD_CtlError>
            err++;
 800796c:	7afb      	ldrb	r3, [r7, #11]
 800796e:	3301      	adds	r3, #1
 8007970:	72fb      	strb	r3, [r7, #11]
          break;
 8007972:	e007      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fa0a 	bl	8007d90 <USBD_CtlError>
          err++;
 800797c:	7afb      	ldrb	r3, [r7, #11]
 800797e:	3301      	adds	r3, #1
 8007980:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007982:	e038      	b.n	80079f6 <USBD_GetDescriptor+0x286>
 8007984:	e037      	b.n	80079f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	7c1b      	ldrb	r3, [r3, #16]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d109      	bne.n	80079a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007996:	f107 0208 	add.w	r2, r7, #8
 800799a:	4610      	mov	r0, r2
 800799c:	4798      	blx	r3
 800799e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079a0:	e029      	b.n	80079f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f9f3 	bl	8007d90 <USBD_CtlError>
        err++;
 80079aa:	7afb      	ldrb	r3, [r7, #11]
 80079ac:	3301      	adds	r3, #1
 80079ae:	72fb      	strb	r3, [r7, #11]
      break;
 80079b0:	e021      	b.n	80079f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	7c1b      	ldrb	r3, [r3, #16]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10d      	bne.n	80079d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c2:	f107 0208 	add.w	r2, r7, #8
 80079c6:	4610      	mov	r0, r2
 80079c8:	4798      	blx	r3
 80079ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	3301      	adds	r3, #1
 80079d0:	2207      	movs	r2, #7
 80079d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079d4:	e00f      	b.n	80079f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f9d9 	bl	8007d90 <USBD_CtlError>
        err++;
 80079de:	7afb      	ldrb	r3, [r7, #11]
 80079e0:	3301      	adds	r3, #1
 80079e2:	72fb      	strb	r3, [r7, #11]
      break;
 80079e4:	e007      	b.n	80079f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f9d1 	bl	8007d90 <USBD_CtlError>
      err++;
 80079ee:	7afb      	ldrb	r3, [r7, #11]
 80079f0:	3301      	adds	r3, #1
 80079f2:	72fb      	strb	r3, [r7, #11]
      break;
 80079f4:	bf00      	nop
  }

  if (err != 0U)
 80079f6:	7afb      	ldrb	r3, [r7, #11]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d11c      	bne.n	8007a36 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80079fc:	893b      	ldrh	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d011      	beq.n	8007a26 <USBD_GetDescriptor+0x2b6>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	88db      	ldrh	r3, [r3, #6]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00d      	beq.n	8007a26 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	88da      	ldrh	r2, [r3, #6]
 8007a0e:	893b      	ldrh	r3, [r7, #8]
 8007a10:	4293      	cmp	r3, r2
 8007a12:	bf28      	it	cs
 8007a14:	4613      	movcs	r3, r2
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a1a:	893b      	ldrh	r3, [r7, #8]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	68f9      	ldr	r1, [r7, #12]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fa1f 	bl	8007e64 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	88db      	ldrh	r3, [r3, #6]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d104      	bne.n	8007a38 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa76 	bl	8007f20 <USBD_CtlSendStatus>
 8007a34:	e000      	b.n	8007a38 <USBD_GetDescriptor+0x2c8>
    return;
 8007a36:	bf00      	nop
    }
  }
}
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop

08007a40 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	889b      	ldrh	r3, [r3, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d130      	bne.n	8007ab4 <USBD_SetAddress+0x74>
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	88db      	ldrh	r3, [r3, #6]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d12c      	bne.n	8007ab4 <USBD_SetAddress+0x74>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	885b      	ldrh	r3, [r3, #2]
 8007a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8007a60:	d828      	bhi.n	8007ab4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	885b      	ldrh	r3, [r3, #2]
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d104      	bne.n	8007a82 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f988 	bl	8007d90 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a80:	e01c      	b.n	8007abc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	7bfa      	ldrb	r2, [r7, #15]
 8007a86:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fe1e 	bl	80086d0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fa43 	bl	8007f20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d004      	beq.n	8007aaa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aa8:	e008      	b.n	8007abc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab2:	e003      	b.n	8007abc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f96a 	bl	8007d90 <USBD_CtlError>
  }
}
 8007abc:	bf00      	nop
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	885b      	ldrh	r3, [r3, #2]
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	4b41      	ldr	r3, [pc, #260]	; (8007bdc <USBD_SetConfig+0x118>)
 8007ad6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ad8:	4b40      	ldr	r3, [pc, #256]	; (8007bdc <USBD_SetConfig+0x118>)
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d904      	bls.n	8007aea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f954 	bl	8007d90 <USBD_CtlError>
 8007ae8:	e075      	b.n	8007bd6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d002      	beq.n	8007afa <USBD_SetConfig+0x36>
 8007af4:	2b03      	cmp	r3, #3
 8007af6:	d023      	beq.n	8007b40 <USBD_SetConfig+0x7c>
 8007af8:	e062      	b.n	8007bc0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007afa:	4b38      	ldr	r3, [pc, #224]	; (8007bdc <USBD_SetConfig+0x118>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d01a      	beq.n	8007b38 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007b02:	4b36      	ldr	r3, [pc, #216]	; (8007bdc <USBD_SetConfig+0x118>)
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	461a      	mov	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2203      	movs	r2, #3
 8007b10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b14:	4b31      	ldr	r3, [pc, #196]	; (8007bdc <USBD_SetConfig+0x118>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7ff f9f4 	bl	8006f08 <USBD_SetClassConfig>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d104      	bne.n	8007b30 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007b26:	6839      	ldr	r1, [r7, #0]
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f931 	bl	8007d90 <USBD_CtlError>
            return;
 8007b2e:	e052      	b.n	8007bd6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f9f5 	bl	8007f20 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b36:	e04e      	b.n	8007bd6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f9f1 	bl	8007f20 <USBD_CtlSendStatus>
        break;
 8007b3e:	e04a      	b.n	8007bd6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007b40:	4b26      	ldr	r3, [pc, #152]	; (8007bdc <USBD_SetConfig+0x118>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d112      	bne.n	8007b6e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007b50:	4b22      	ldr	r3, [pc, #136]	; (8007bdc <USBD_SetConfig+0x118>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	461a      	mov	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007b5a:	4b20      	ldr	r3, [pc, #128]	; (8007bdc <USBD_SetConfig+0x118>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7ff f9f0 	bl	8006f46 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f9da 	bl	8007f20 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b6c:	e033      	b.n	8007bd6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007b6e:	4b1b      	ldr	r3, [pc, #108]	; (8007bdc <USBD_SetConfig+0x118>)
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d01d      	beq.n	8007bb8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7ff f9de 	bl	8006f46 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007b8a:	4b14      	ldr	r3, [pc, #80]	; (8007bdc <USBD_SetConfig+0x118>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b94:	4b11      	ldr	r3, [pc, #68]	; (8007bdc <USBD_SetConfig+0x118>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff f9b4 	bl	8006f08 <USBD_SetClassConfig>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d104      	bne.n	8007bb0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f8f1 	bl	8007d90 <USBD_CtlError>
            return;
 8007bae:	e012      	b.n	8007bd6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f9b5 	bl	8007f20 <USBD_CtlSendStatus>
        break;
 8007bb6:	e00e      	b.n	8007bd6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f9b1 	bl	8007f20 <USBD_CtlSendStatus>
        break;
 8007bbe:	e00a      	b.n	8007bd6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f8e4 	bl	8007d90 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007bc8:	4b04      	ldr	r3, [pc, #16]	; (8007bdc <USBD_SetConfig+0x118>)
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7ff f9b9 	bl	8006f46 <USBD_ClrClassConfig>
        break;
 8007bd4:	bf00      	nop
    }
  }
}
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	200001ce 	.word	0x200001ce

08007be0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	88db      	ldrh	r3, [r3, #6]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d004      	beq.n	8007bfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f8cb 	bl	8007d90 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bfa:	e021      	b.n	8007c40 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	db17      	blt.n	8007c36 <USBD_GetConfig+0x56>
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	dd02      	ble.n	8007c10 <USBD_GetConfig+0x30>
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d00b      	beq.n	8007c26 <USBD_GetConfig+0x46>
 8007c0e:	e012      	b.n	8007c36 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3308      	adds	r3, #8
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f920 	bl	8007e64 <USBD_CtlSendData>
        break;
 8007c24:	e00c      	b.n	8007c40 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	3304      	adds	r3, #4
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f918 	bl	8007e64 <USBD_CtlSendData>
        break;
 8007c34:	e004      	b.n	8007c40 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007c36:	6839      	ldr	r1, [r7, #0]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f8a9 	bl	8007d90 <USBD_CtlError>
        break;
 8007c3e:	bf00      	nop
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d81e      	bhi.n	8007c9c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	88db      	ldrh	r3, [r3, #6]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d004      	beq.n	8007c70 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f891 	bl	8007d90 <USBD_CtlError>
        break;
 8007c6e:	e01a      	b.n	8007ca6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d005      	beq.n	8007c8c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f043 0202 	orr.w	r2, r3, #2
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	330c      	adds	r3, #12
 8007c90:	2202      	movs	r2, #2
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f8e5 	bl	8007e64 <USBD_CtlSendData>
      break;
 8007c9a:	e004      	b.n	8007ca6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f876 	bl	8007d90 <USBD_CtlError>
      break;
 8007ca4:	bf00      	nop
  }
}
 8007ca6:	bf00      	nop
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	885b      	ldrh	r3, [r3, #2]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d106      	bne.n	8007cce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f929 	bl	8007f20 <USBD_CtlSendStatus>
  }
}
 8007cce:	bf00      	nop
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b082      	sub	sp, #8
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d80b      	bhi.n	8007d04 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	885b      	ldrh	r3, [r3, #2]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d10c      	bne.n	8007d0e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f90f 	bl	8007f20 <USBD_CtlSendStatus>
      }
      break;
 8007d02:	e004      	b.n	8007d0e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f842 	bl	8007d90 <USBD_CtlError>
      break;
 8007d0c:	e000      	b.n	8007d10 <USBD_ClrFeature+0x3a>
      break;
 8007d0e:	bf00      	nop
  }
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781a      	ldrb	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	785a      	ldrb	r2, [r3, #1]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	3302      	adds	r3, #2
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	3303      	adds	r3, #3
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	021b      	lsls	r3, r3, #8
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	4413      	add	r3, r2
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	3304      	adds	r3, #4
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	3305      	adds	r3, #5
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	4413      	add	r3, r2
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	3306      	adds	r3, #6
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	3307      	adds	r3, #7
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	021b      	lsls	r3, r3, #8
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	4413      	add	r3, r2
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	80da      	strh	r2, [r3, #6]

}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bc80      	pop	{r7}
 8007d8e:	4770      	bx	lr

08007d90 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007d9a:	2180      	movs	r1, #128	; 0x80
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fc2d 	bl	80085fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007da2:	2100      	movs	r1, #0
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fc29 	bl	80085fc <USBD_LL_StallEP>
}
 8007daa:	bf00      	nop
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b086      	sub	sp, #24
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d032      	beq.n	8007e2e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 f834 	bl	8007e36 <USBD_GetLen>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	75fa      	strb	r2, [r7, #23]
 8007de2:	461a      	mov	r2, r3
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	4413      	add	r3, r2
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	7812      	ldrb	r2, [r2, #0]
 8007dec:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	75fa      	strb	r2, [r7, #23]
 8007df4:	461a      	mov	r2, r3
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	4413      	add	r3, r2
 8007dfa:	2203      	movs	r2, #3
 8007dfc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007dfe:	e012      	b.n	8007e26 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	1c5a      	adds	r2, r3, #1
 8007e04:	60fa      	str	r2, [r7, #12]
 8007e06:	7dfa      	ldrb	r2, [r7, #23]
 8007e08:	1c51      	adds	r1, r2, #1
 8007e0a:	75f9      	strb	r1, [r7, #23]
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	440a      	add	r2, r1
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
 8007e18:	1c5a      	adds	r2, r3, #1
 8007e1a:	75fa      	strb	r2, [r7, #23]
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	4413      	add	r3, r2
 8007e22:	2200      	movs	r2, #0
 8007e24:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1e8      	bne.n	8007e00 <USBD_GetString+0x4e>
    }
  }
}
 8007e2e:	bf00      	nop
 8007e30:	3718      	adds	r7, #24
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b085      	sub	sp, #20
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007e42:	e005      	b.n	8007e50 <USBD_GetLen+0x1a>
  {
    len++;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	3301      	adds	r3, #1
 8007e48:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1f5      	bne.n	8007e44 <USBD_GetLen+0xe>
  }

  return len;
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bc80      	pop	{r7}
 8007e62:	4770      	bx	lr

08007e64 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2202      	movs	r2, #2
 8007e76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e7a:	88fa      	ldrh	r2, [r7, #6]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007e80:	88fa      	ldrh	r2, [r7, #6]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e86:	88fb      	ldrh	r3, [r7, #6]
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 fc3e 	bl	800870e <USBD_LL_Transmit>

  return USBD_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007eaa:	88fb      	ldrh	r3, [r7, #6]
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	2100      	movs	r1, #0
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 fc2c 	bl	800870e <USBD_LL_Transmit>

  return USBD_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2203      	movs	r2, #3
 8007ed2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007ed6:	88fa      	ldrh	r2, [r7, #6]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007ede:	88fa      	ldrh	r2, [r7, #6]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ee6:	88fb      	ldrh	r3, [r7, #6]
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	2100      	movs	r1, #0
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 fc31 	bl	8008754 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	4613      	mov	r3, r2
 8007f08:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f0a:	88fb      	ldrh	r3, [r7, #6]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	2100      	movs	r1, #0
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 fc1f 	bl	8008754 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2204      	movs	r2, #4
 8007f2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f30:	2300      	movs	r3, #0
 8007f32:	2200      	movs	r2, #0
 8007f34:	2100      	movs	r1, #0
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fbe9 	bl	800870e <USBD_LL_Transmit>

  return USBD_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b082      	sub	sp, #8
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2205      	movs	r2, #5
 8007f52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f56:	2300      	movs	r3, #0
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 fbf9 	bl	8008754 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f70:	2200      	movs	r2, #0
 8007f72:	4912      	ldr	r1, [pc, #72]	; (8007fbc <MX_USB_DEVICE_Init+0x50>)
 8007f74:	4812      	ldr	r0, [pc, #72]	; (8007fc0 <MX_USB_DEVICE_Init+0x54>)
 8007f76:	f7fe ff6d 	bl	8006e54 <USBD_Init>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f80:	f7f8 ff54 	bl	8000e2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f84:	490f      	ldr	r1, [pc, #60]	; (8007fc4 <MX_USB_DEVICE_Init+0x58>)
 8007f86:	480e      	ldr	r0, [pc, #56]	; (8007fc0 <MX_USB_DEVICE_Init+0x54>)
 8007f88:	f7fe ff8f 	bl	8006eaa <USBD_RegisterClass>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f92:	f7f8 ff4b 	bl	8000e2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f96:	490c      	ldr	r1, [pc, #48]	; (8007fc8 <MX_USB_DEVICE_Init+0x5c>)
 8007f98:	4809      	ldr	r0, [pc, #36]	; (8007fc0 <MX_USB_DEVICE_Init+0x54>)
 8007f9a:	f7fe feef 	bl	8006d7c <USBD_CDC_RegisterInterface>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007fa4:	f7f8 ff42 	bl	8000e2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007fa8:	4805      	ldr	r0, [pc, #20]	; (8007fc0 <MX_USB_DEVICE_Init+0x54>)
 8007faa:	f7fe ff97 	bl	8006edc <USBD_Start>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007fb4:	f7f8 ff3a 	bl	8000e2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007fb8:	bf00      	nop
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	20000140 	.word	0x20000140
 8007fc0:	2000055c 	.word	0x2000055c
 8007fc4:	2000002c 	.word	0x2000002c
 8007fc8:	20000130 	.word	0x20000130

08007fcc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	4905      	ldr	r1, [pc, #20]	; (8007fe8 <CDC_Init_FS+0x1c>)
 8007fd4:	4805      	ldr	r0, [pc, #20]	; (8007fec <CDC_Init_FS+0x20>)
 8007fd6:	f7fe fee7 	bl	8006da8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007fda:	4905      	ldr	r1, [pc, #20]	; (8007ff0 <CDC_Init_FS+0x24>)
 8007fdc:	4803      	ldr	r0, [pc, #12]	; (8007fec <CDC_Init_FS+0x20>)
 8007fde:	f7fe fefc 	bl	8006dda <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007fe2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	20000c08 	.word	0x20000c08
 8007fec:	2000055c 	.word	0x2000055c
 8007ff0:	20000820 	.word	0x20000820

08007ff4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ff8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bc80      	pop	{r7}
 8008000:	4770      	bx	lr
	...

08008004 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	4603      	mov	r3, r0
 800800c:	6039      	str	r1, [r7, #0]
 800800e:	71fb      	strb	r3, [r7, #7]
 8008010:	4613      	mov	r3, r2
 8008012:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008014:	79fb      	ldrb	r3, [r7, #7]
 8008016:	2b23      	cmp	r3, #35	; 0x23
 8008018:	d84a      	bhi.n	80080b0 <CDC_Control_FS+0xac>
 800801a:	a201      	add	r2, pc, #4	; (adr r2, 8008020 <CDC_Control_FS+0x1c>)
 800801c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008020:	080080b1 	.word	0x080080b1
 8008024:	080080b1 	.word	0x080080b1
 8008028:	080080b1 	.word	0x080080b1
 800802c:	080080b1 	.word	0x080080b1
 8008030:	080080b1 	.word	0x080080b1
 8008034:	080080b1 	.word	0x080080b1
 8008038:	080080b1 	.word	0x080080b1
 800803c:	080080b1 	.word	0x080080b1
 8008040:	080080b1 	.word	0x080080b1
 8008044:	080080b1 	.word	0x080080b1
 8008048:	080080b1 	.word	0x080080b1
 800804c:	080080b1 	.word	0x080080b1
 8008050:	080080b1 	.word	0x080080b1
 8008054:	080080b1 	.word	0x080080b1
 8008058:	080080b1 	.word	0x080080b1
 800805c:	080080b1 	.word	0x080080b1
 8008060:	080080b1 	.word	0x080080b1
 8008064:	080080b1 	.word	0x080080b1
 8008068:	080080b1 	.word	0x080080b1
 800806c:	080080b1 	.word	0x080080b1
 8008070:	080080b1 	.word	0x080080b1
 8008074:	080080b1 	.word	0x080080b1
 8008078:	080080b1 	.word	0x080080b1
 800807c:	080080b1 	.word	0x080080b1
 8008080:	080080b1 	.word	0x080080b1
 8008084:	080080b1 	.word	0x080080b1
 8008088:	080080b1 	.word	0x080080b1
 800808c:	080080b1 	.word	0x080080b1
 8008090:	080080b1 	.word	0x080080b1
 8008094:	080080b1 	.word	0x080080b1
 8008098:	080080b1 	.word	0x080080b1
 800809c:	080080b1 	.word	0x080080b1
 80080a0:	080080b1 	.word	0x080080b1
 80080a4:	080080b1 	.word	0x080080b1
 80080a8:	080080b1 	.word	0x080080b1
 80080ac:	080080b1 	.word	0x080080b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80080b0:	bf00      	nop
  }

  return (USBD_OK);
 80080b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bc80      	pop	{r7}
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop

080080c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80080ca:	6879      	ldr	r1, [r7, #4]
 80080cc:	4805      	ldr	r0, [pc, #20]	; (80080e4 <CDC_Receive_FS+0x24>)
 80080ce:	f7fe fe84 	bl	8006dda <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80080d2:	4804      	ldr	r0, [pc, #16]	; (80080e4 <CDC_Receive_FS+0x24>)
 80080d4:	f7fe fe94 	bl	8006e00 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80080d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	2000055c 	.word	0x2000055c

080080e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	4603      	mov	r3, r0
 80080f0:	6039      	str	r1, [r7, #0]
 80080f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	2212      	movs	r2, #18
 80080f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80080fa:	4b03      	ldr	r3, [pc, #12]	; (8008108 <USBD_FS_DeviceDescriptor+0x20>)
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	bc80      	pop	{r7}
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	2000015c 	.word	0x2000015c

0800810c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	6039      	str	r1, [r7, #0]
 8008116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	2204      	movs	r2, #4
 800811c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800811e:	4b03      	ldr	r3, [pc, #12]	; (800812c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008120:	4618      	mov	r0, r3
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	bc80      	pop	{r7}
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	20000170 	.word	0x20000170

08008130 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	4603      	mov	r3, r0
 8008138:	6039      	str	r1, [r7, #0]
 800813a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d105      	bne.n	800814e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	4907      	ldr	r1, [pc, #28]	; (8008164 <USBD_FS_ProductStrDescriptor+0x34>)
 8008146:	4808      	ldr	r0, [pc, #32]	; (8008168 <USBD_FS_ProductStrDescriptor+0x38>)
 8008148:	f7ff fe33 	bl	8007db2 <USBD_GetString>
 800814c:	e004      	b.n	8008158 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	4904      	ldr	r1, [pc, #16]	; (8008164 <USBD_FS_ProductStrDescriptor+0x34>)
 8008152:	4805      	ldr	r0, [pc, #20]	; (8008168 <USBD_FS_ProductStrDescriptor+0x38>)
 8008154:	f7ff fe2d 	bl	8007db2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008158:	4b02      	ldr	r3, [pc, #8]	; (8008164 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20000ff0 	.word	0x20000ff0
 8008168:	080088e4 	.word	0x080088e4

0800816c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	4603      	mov	r3, r0
 8008174:	6039      	str	r1, [r7, #0]
 8008176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008178:	683a      	ldr	r2, [r7, #0]
 800817a:	4904      	ldr	r1, [pc, #16]	; (800818c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800817c:	4804      	ldr	r0, [pc, #16]	; (8008190 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800817e:	f7ff fe18 	bl	8007db2 <USBD_GetString>
  return USBD_StrDesc;
 8008182:	4b02      	ldr	r3, [pc, #8]	; (800818c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	20000ff0 	.word	0x20000ff0
 8008190:	080088fc 	.word	0x080088fc

08008194 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	221a      	movs	r2, #26
 80081a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081a6:	f000 f843 	bl	8008230 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80081aa:	4b02      	ldr	r3, [pc, #8]	; (80081b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	20000174 	.word	0x20000174

080081b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	4603      	mov	r3, r0
 80081c0:	6039      	str	r1, [r7, #0]
 80081c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081c4:	79fb      	ldrb	r3, [r7, #7]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d105      	bne.n	80081d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	4907      	ldr	r1, [pc, #28]	; (80081ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80081ce:	4808      	ldr	r0, [pc, #32]	; (80081f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081d0:	f7ff fdef 	bl	8007db2 <USBD_GetString>
 80081d4:	e004      	b.n	80081e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	4904      	ldr	r1, [pc, #16]	; (80081ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80081da:	4805      	ldr	r0, [pc, #20]	; (80081f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081dc:	f7ff fde9 	bl	8007db2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081e0:	4b02      	ldr	r3, [pc, #8]	; (80081ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20000ff0 	.word	0x20000ff0
 80081f0:	08008910 	.word	0x08008910

080081f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	4603      	mov	r3, r0
 80081fc:	6039      	str	r1, [r7, #0]
 80081fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008200:	79fb      	ldrb	r3, [r7, #7]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d105      	bne.n	8008212 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	4907      	ldr	r1, [pc, #28]	; (8008228 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800820a:	4808      	ldr	r0, [pc, #32]	; (800822c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800820c:	f7ff fdd1 	bl	8007db2 <USBD_GetString>
 8008210:	e004      	b.n	800821c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008212:	683a      	ldr	r2, [r7, #0]
 8008214:	4904      	ldr	r1, [pc, #16]	; (8008228 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008216:	4805      	ldr	r0, [pc, #20]	; (800822c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008218:	f7ff fdcb 	bl	8007db2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800821c:	4b02      	ldr	r3, [pc, #8]	; (8008228 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	20000ff0 	.word	0x20000ff0
 800822c:	0800891c 	.word	0x0800891c

08008230 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008236:	4b0f      	ldr	r3, [pc, #60]	; (8008274 <Get_SerialNum+0x44>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800823c:	4b0e      	ldr	r3, [pc, #56]	; (8008278 <Get_SerialNum+0x48>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008242:	4b0e      	ldr	r3, [pc, #56]	; (800827c <Get_SerialNum+0x4c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4413      	add	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d009      	beq.n	800826a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008256:	2208      	movs	r2, #8
 8008258:	4909      	ldr	r1, [pc, #36]	; (8008280 <Get_SerialNum+0x50>)
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 f814 	bl	8008288 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008260:	2204      	movs	r2, #4
 8008262:	4908      	ldr	r1, [pc, #32]	; (8008284 <Get_SerialNum+0x54>)
 8008264:	68b8      	ldr	r0, [r7, #8]
 8008266:	f000 f80f 	bl	8008288 <IntToUnicode>
  }
}
 800826a:	bf00      	nop
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	1ffff7e8 	.word	0x1ffff7e8
 8008278:	1ffff7ec 	.word	0x1ffff7ec
 800827c:	1ffff7f0 	.word	0x1ffff7f0
 8008280:	20000176 	.word	0x20000176
 8008284:	20000186 	.word	0x20000186

08008288 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008288:	b480      	push	{r7}
 800828a:	b087      	sub	sp, #28
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	4613      	mov	r3, r2
 8008294:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800829a:	2300      	movs	r3, #0
 800829c:	75fb      	strb	r3, [r7, #23]
 800829e:	e027      	b.n	80082f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	0f1b      	lsrs	r3, r3, #28
 80082a4:	2b09      	cmp	r3, #9
 80082a6:	d80b      	bhi.n	80082c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	0f1b      	lsrs	r3, r3, #28
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	005b      	lsls	r3, r3, #1
 80082b2:	4619      	mov	r1, r3
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	440b      	add	r3, r1
 80082b8:	3230      	adds	r2, #48	; 0x30
 80082ba:	b2d2      	uxtb	r2, r2
 80082bc:	701a      	strb	r2, [r3, #0]
 80082be:	e00a      	b.n	80082d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	0f1b      	lsrs	r3, r3, #28
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	4619      	mov	r1, r3
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	440b      	add	r3, r1
 80082d0:	3237      	adds	r2, #55	; 0x37
 80082d2:	b2d2      	uxtb	r2, r2
 80082d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	011b      	lsls	r3, r3, #4
 80082da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
 80082de:	005b      	lsls	r3, r3, #1
 80082e0:	3301      	adds	r3, #1
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	4413      	add	r3, r2
 80082e6:	2200      	movs	r2, #0
 80082e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
 80082ec:	3301      	adds	r3, #1
 80082ee:	75fb      	strb	r3, [r7, #23]
 80082f0:	7dfa      	ldrb	r2, [r7, #23]
 80082f2:	79fb      	ldrb	r3, [r7, #7]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d3d3      	bcc.n	80082a0 <IntToUnicode+0x18>
  }
}
 80082f8:	bf00      	nop
 80082fa:	371c      	adds	r7, #28
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bc80      	pop	{r7}
 8008300:	4770      	bx	lr
	...

08008304 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a0d      	ldr	r2, [pc, #52]	; (8008348 <HAL_PCD_MspInit+0x44>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d113      	bne.n	800833e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008316:	4b0d      	ldr	r3, [pc, #52]	; (800834c <HAL_PCD_MspInit+0x48>)
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	4a0c      	ldr	r2, [pc, #48]	; (800834c <HAL_PCD_MspInit+0x48>)
 800831c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008320:	61d3      	str	r3, [r2, #28]
 8008322:	4b0a      	ldr	r3, [pc, #40]	; (800834c <HAL_PCD_MspInit+0x48>)
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800832e:	2200      	movs	r2, #0
 8008330:	2100      	movs	r1, #0
 8008332:	2014      	movs	r0, #20
 8008334:	f7f9 fb71 	bl	8001a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008338:	2014      	movs	r0, #20
 800833a:	f7f9 fb8a 	bl	8001a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	40005c00 	.word	0x40005c00
 800834c:	40021000 	.word	0x40021000

08008350 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008364:	4619      	mov	r1, r3
 8008366:	4610      	mov	r0, r2
 8008368:	f7fe fe00 	bl	8006f6c <USBD_LL_SetupStage>
}
 800836c:	bf00      	nop
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008386:	78fa      	ldrb	r2, [r7, #3]
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	4613      	mov	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	00db      	lsls	r3, r3, #3
 8008392:	440b      	add	r3, r1
 8008394:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	4619      	mov	r1, r3
 800839e:	f7fe fe30 	bl	8007002 <USBD_LL_DataOutStage>
}
 80083a2:	bf00      	nop
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b082      	sub	sp, #8
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	460b      	mov	r3, r1
 80083b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80083bc:	78fa      	ldrb	r2, [r7, #3]
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	4613      	mov	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	440b      	add	r3, r1
 80083ca:	333c      	adds	r3, #60	; 0x3c
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	78fb      	ldrb	r3, [r7, #3]
 80083d0:	4619      	mov	r1, r3
 80083d2:	f7fe fe87 	bl	80070e4 <USBD_LL_DataInStage>
}
 80083d6:	bf00      	nop
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b082      	sub	sp, #8
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7fe ff97 	bl	8007320 <USBD_LL_SOF>
}
 80083f2:	bf00      	nop
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b084      	sub	sp, #16
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008402:	2301      	movs	r3, #1
 8008404:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	2b02      	cmp	r3, #2
 800840c:	d001      	beq.n	8008412 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800840e:	f7f8 fd0d 	bl	8000e2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008418:	7bfa      	ldrb	r2, [r7, #15]
 800841a:	4611      	mov	r1, r2
 800841c:	4618      	mov	r0, r3
 800841e:	f7fe ff47 	bl	80072b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe ff00 	bl	800722e <USBD_LL_Reset>
}
 800842e:	bf00      	nop
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
	...

08008438 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe ff41 	bl	80072ce <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d005      	beq.n	8008460 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008454:	4b04      	ldr	r3, [pc, #16]	; (8008468 <HAL_PCD_SuspendCallback+0x30>)
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	4a03      	ldr	r2, [pc, #12]	; (8008468 <HAL_PCD_SuspendCallback+0x30>)
 800845a:	f043 0306 	orr.w	r3, r3, #6
 800845e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	e000ed00 	.word	0xe000ed00

0800846c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800847a:	4618      	mov	r0, r3
 800847c:	f7fe ff3b 	bl	80072f6 <USBD_LL_Resume>
}
 8008480:	bf00      	nop
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008490:	4a28      	ldr	r2, [pc, #160]	; (8008534 <USBD_LL_Init+0xac>)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a26      	ldr	r2, [pc, #152]	; (8008534 <USBD_LL_Init+0xac>)
 800849c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80084a0:	4b24      	ldr	r3, [pc, #144]	; (8008534 <USBD_LL_Init+0xac>)
 80084a2:	4a25      	ldr	r2, [pc, #148]	; (8008538 <USBD_LL_Init+0xb0>)
 80084a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80084a6:	4b23      	ldr	r3, [pc, #140]	; (8008534 <USBD_LL_Init+0xac>)
 80084a8:	2208      	movs	r2, #8
 80084aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80084ac:	4b21      	ldr	r3, [pc, #132]	; (8008534 <USBD_LL_Init+0xac>)
 80084ae:	2202      	movs	r2, #2
 80084b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80084b2:	4b20      	ldr	r3, [pc, #128]	; (8008534 <USBD_LL_Init+0xac>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80084b8:	4b1e      	ldr	r3, [pc, #120]	; (8008534 <USBD_LL_Init+0xac>)
 80084ba:	2200      	movs	r2, #0
 80084bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80084be:	4b1d      	ldr	r3, [pc, #116]	; (8008534 <USBD_LL_Init+0xac>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80084c4:	481b      	ldr	r0, [pc, #108]	; (8008534 <USBD_LL_Init+0xac>)
 80084c6:	f7f9 fd89 	bl	8001fdc <HAL_PCD_Init>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80084d0:	f7f8 fcac 	bl	8000e2c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084da:	2318      	movs	r3, #24
 80084dc:	2200      	movs	r2, #0
 80084de:	2100      	movs	r1, #0
 80084e0:	f7fb f8bd 	bl	800365e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084ea:	2358      	movs	r3, #88	; 0x58
 80084ec:	2200      	movs	r2, #0
 80084ee:	2180      	movs	r1, #128	; 0x80
 80084f0:	f7fb f8b5 	bl	800365e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084fa:	23c0      	movs	r3, #192	; 0xc0
 80084fc:	2200      	movs	r2, #0
 80084fe:	2181      	movs	r1, #129	; 0x81
 8008500:	f7fb f8ad 	bl	800365e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800850a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800850e:	2200      	movs	r2, #0
 8008510:	2101      	movs	r1, #1
 8008512:	f7fb f8a4 	bl	800365e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800851c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008520:	2200      	movs	r2, #0
 8008522:	2182      	movs	r1, #130	; 0x82
 8008524:	f7fb f89b 	bl	800365e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	200011f0 	.word	0x200011f0
 8008538:	40005c00 	.word	0x40005c00

0800853c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008552:	4618      	mov	r0, r3
 8008554:	f7f9 fe4d 	bl	80021f2 <HAL_PCD_Start>
 8008558:	4603      	mov	r3, r0
 800855a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	4618      	mov	r0, r3
 8008560:	f000 f94e 	bl	8008800 <USBD_Get_USB_Status>
 8008564:	4603      	mov	r3, r0
 8008566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008568:	7bbb      	ldrb	r3, [r7, #14]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b084      	sub	sp, #16
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	4608      	mov	r0, r1
 800857c:	4611      	mov	r1, r2
 800857e:	461a      	mov	r2, r3
 8008580:	4603      	mov	r3, r0
 8008582:	70fb      	strb	r3, [r7, #3]
 8008584:	460b      	mov	r3, r1
 8008586:	70bb      	strb	r3, [r7, #2]
 8008588:	4613      	mov	r3, r2
 800858a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800859a:	78bb      	ldrb	r3, [r7, #2]
 800859c:	883a      	ldrh	r2, [r7, #0]
 800859e:	78f9      	ldrb	r1, [r7, #3]
 80085a0:	f7f9 ffc7 	bl	8002532 <HAL_PCD_EP_Open>
 80085a4:	4603      	mov	r3, r0
 80085a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 f928 	bl	8008800 <USBD_Get_USB_Status>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	460b      	mov	r3, r1
 80085c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085d8:	78fa      	ldrb	r2, [r7, #3]
 80085da:	4611      	mov	r1, r2
 80085dc:	4618      	mov	r0, r3
 80085de:	f7fa f80e 	bl	80025fe <HAL_PCD_EP_Close>
 80085e2:	4603      	mov	r3, r0
 80085e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 f909 	bl	8008800 <USBD_Get_USB_Status>
 80085ee:	4603      	mov	r3, r0
 80085f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008608:	2300      	movs	r3, #0
 800860a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008616:	78fa      	ldrb	r2, [r7, #3]
 8008618:	4611      	mov	r1, r2
 800861a:	4618      	mov	r0, r3
 800861c:	f7fa f8ce 	bl	80027bc <HAL_PCD_EP_SetStall>
 8008620:	4603      	mov	r3, r0
 8008622:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008624:	7bfb      	ldrb	r3, [r7, #15]
 8008626:	4618      	mov	r0, r3
 8008628:	f000 f8ea 	bl	8008800 <USBD_Get_USB_Status>
 800862c:	4603      	mov	r3, r0
 800862e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008630:	7bbb      	ldrb	r3, [r7, #14]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	460b      	mov	r3, r1
 8008644:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008654:	78fa      	ldrb	r2, [r7, #3]
 8008656:	4611      	mov	r1, r2
 8008658:	4618      	mov	r0, r3
 800865a:	f7fa f90f 	bl	800287c <HAL_PCD_EP_ClrStall>
 800865e:	4603      	mov	r3, r0
 8008660:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008662:	7bfb      	ldrb	r3, [r7, #15]
 8008664:	4618      	mov	r0, r3
 8008666:	f000 f8cb 	bl	8008800 <USBD_Get_USB_Status>
 800866a:	4603      	mov	r3, r0
 800866c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800866e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800868a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800868c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008690:	2b00      	cmp	r3, #0
 8008692:	da0c      	bge.n	80086ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800869a:	68f9      	ldr	r1, [r7, #12]
 800869c:	1c5a      	adds	r2, r3, #1
 800869e:	4613      	mov	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4413      	add	r3, r2
 80086a4:	00db      	lsls	r3, r3, #3
 80086a6:	440b      	add	r3, r1
 80086a8:	3302      	adds	r3, #2
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	e00b      	b.n	80086c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086ae:	78fb      	ldrb	r3, [r7, #3]
 80086b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086b4:	68f9      	ldr	r1, [r7, #12]
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	00db      	lsls	r3, r3, #3
 80086be:	440b      	add	r3, r1
 80086c0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80086c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3714      	adds	r7, #20
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bc80      	pop	{r7}
 80086ce:	4770      	bx	lr

080086d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086ea:	78fa      	ldrb	r2, [r7, #3]
 80086ec:	4611      	mov	r1, r2
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7f9 fefa 	bl	80024e8 <HAL_PCD_SetAddress>
 80086f4:	4603      	mov	r3, r0
 80086f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 f880 	bl	8008800 <USBD_Get_USB_Status>
 8008700:	4603      	mov	r3, r0
 8008702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008704:	7bbb      	ldrb	r3, [r7, #14]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b086      	sub	sp, #24
 8008712:	af00      	add	r7, sp, #0
 8008714:	60f8      	str	r0, [r7, #12]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	461a      	mov	r2, r3
 800871a:	460b      	mov	r3, r1
 800871c:	72fb      	strb	r3, [r7, #11]
 800871e:	4613      	mov	r3, r2
 8008720:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008730:	893b      	ldrh	r3, [r7, #8]
 8008732:	7af9      	ldrb	r1, [r7, #11]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	f7f9 fffe 	bl	8002736 <HAL_PCD_EP_Transmit>
 800873a:	4603      	mov	r3, r0
 800873c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800873e:	7dfb      	ldrb	r3, [r7, #23]
 8008740:	4618      	mov	r0, r3
 8008742:	f000 f85d 	bl	8008800 <USBD_Get_USB_Status>
 8008746:	4603      	mov	r3, r0
 8008748:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800874a:	7dbb      	ldrb	r3, [r7, #22]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3718      	adds	r7, #24
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	607a      	str	r2, [r7, #4]
 800875e:	461a      	mov	r2, r3
 8008760:	460b      	mov	r3, r1
 8008762:	72fb      	strb	r3, [r7, #11]
 8008764:	4613      	mov	r3, r2
 8008766:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800876c:	2300      	movs	r3, #0
 800876e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008776:	893b      	ldrh	r3, [r7, #8]
 8008778:	7af9      	ldrb	r1, [r7, #11]
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	f7f9 ff87 	bl	800268e <HAL_PCD_EP_Receive>
 8008780:	4603      	mov	r3, r0
 8008782:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008784:	7dfb      	ldrb	r3, [r7, #23]
 8008786:	4618      	mov	r0, r3
 8008788:	f000 f83a 	bl	8008800 <USBD_Get_USB_Status>
 800878c:	4603      	mov	r3, r0
 800878e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008790:	7dbb      	ldrb	r3, [r7, #22]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	460b      	mov	r3, r1
 80087a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087ac:	78fa      	ldrb	r2, [r7, #3]
 80087ae:	4611      	mov	r1, r2
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7f9 ffa9 	bl	8002708 <HAL_PCD_EP_GetRxCount>
 80087b6:	4603      	mov	r3, r0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80087c8:	4b02      	ldr	r3, [pc, #8]	; (80087d4 <USBD_static_malloc+0x14>)
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bc80      	pop	{r7}
 80087d2:	4770      	bx	lr
 80087d4:	200001d0 	.word	0x200001d0

080087d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]

}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bc80      	pop	{r7}
 80087e8:	4770      	bx	lr

080087ea <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ea:	b480      	push	{r7}
 80087ec:	b083      	sub	sp, #12
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	460b      	mov	r3, r1
 80087f4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bc80      	pop	{r7}
 80087fe:	4770      	bx	lr

08008800 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	4603      	mov	r3, r0
 8008808:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800880e:	79fb      	ldrb	r3, [r7, #7]
 8008810:	2b03      	cmp	r3, #3
 8008812:	d817      	bhi.n	8008844 <USBD_Get_USB_Status+0x44>
 8008814:	a201      	add	r2, pc, #4	; (adr r2, 800881c <USBD_Get_USB_Status+0x1c>)
 8008816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881a:	bf00      	nop
 800881c:	0800882d 	.word	0x0800882d
 8008820:	08008833 	.word	0x08008833
 8008824:	08008839 	.word	0x08008839
 8008828:	0800883f 	.word	0x0800883f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800882c:	2300      	movs	r3, #0
 800882e:	73fb      	strb	r3, [r7, #15]
    break;
 8008830:	e00b      	b.n	800884a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008832:	2302      	movs	r3, #2
 8008834:	73fb      	strb	r3, [r7, #15]
    break;
 8008836:	e008      	b.n	800884a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008838:	2301      	movs	r3, #1
 800883a:	73fb      	strb	r3, [r7, #15]
    break;
 800883c:	e005      	b.n	800884a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800883e:	2302      	movs	r3, #2
 8008840:	73fb      	strb	r3, [r7, #15]
    break;
 8008842:	e002      	b.n	800884a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008844:	2302      	movs	r3, #2
 8008846:	73fb      	strb	r3, [r7, #15]
    break;
 8008848:	bf00      	nop
  }
  return usb_status;
 800884a:	7bfb      	ldrb	r3, [r7, #15]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3714      	adds	r7, #20
 8008850:	46bd      	mov	sp, r7
 8008852:	bc80      	pop	{r7}
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop

08008858 <__libc_init_array>:
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	2500      	movs	r5, #0
 800885c:	4e0c      	ldr	r6, [pc, #48]	; (8008890 <__libc_init_array+0x38>)
 800885e:	4c0d      	ldr	r4, [pc, #52]	; (8008894 <__libc_init_array+0x3c>)
 8008860:	1ba4      	subs	r4, r4, r6
 8008862:	10a4      	asrs	r4, r4, #2
 8008864:	42a5      	cmp	r5, r4
 8008866:	d109      	bne.n	800887c <__libc_init_array+0x24>
 8008868:	f000 f822 	bl	80088b0 <_init>
 800886c:	2500      	movs	r5, #0
 800886e:	4e0a      	ldr	r6, [pc, #40]	; (8008898 <__libc_init_array+0x40>)
 8008870:	4c0a      	ldr	r4, [pc, #40]	; (800889c <__libc_init_array+0x44>)
 8008872:	1ba4      	subs	r4, r4, r6
 8008874:	10a4      	asrs	r4, r4, #2
 8008876:	42a5      	cmp	r5, r4
 8008878:	d105      	bne.n	8008886 <__libc_init_array+0x2e>
 800887a:	bd70      	pop	{r4, r5, r6, pc}
 800887c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008880:	4798      	blx	r3
 8008882:	3501      	adds	r5, #1
 8008884:	e7ee      	b.n	8008864 <__libc_init_array+0xc>
 8008886:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800888a:	4798      	blx	r3
 800888c:	3501      	adds	r5, #1
 800888e:	e7f2      	b.n	8008876 <__libc_init_array+0x1e>
 8008890:	08008944 	.word	0x08008944
 8008894:	08008944 	.word	0x08008944
 8008898:	08008944 	.word	0x08008944
 800889c:	08008948 	.word	0x08008948

080088a0 <memset>:
 80088a0:	4603      	mov	r3, r0
 80088a2:	4402      	add	r2, r0
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d100      	bne.n	80088aa <memset+0xa>
 80088a8:	4770      	bx	lr
 80088aa:	f803 1b01 	strb.w	r1, [r3], #1
 80088ae:	e7f9      	b.n	80088a4 <memset+0x4>

080088b0 <_init>:
 80088b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b2:	bf00      	nop
 80088b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088b6:	bc08      	pop	{r3}
 80088b8:	469e      	mov	lr, r3
 80088ba:	4770      	bx	lr

080088bc <_fini>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	bf00      	nop
 80088c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c2:	bc08      	pop	{r3}
 80088c4:	469e      	mov	lr, r3
 80088c6:	4770      	bx	lr
