
STM32 Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a738  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800a844  0800a844  0001a844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8c0  0800a8c0  00020194  2**0
                  CONTENTS
  4 .ARM          00000000  0800a8c0  0800a8c0  00020194  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a8c0  0800a8c0  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8c0  0800a8c0  0001a8c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8c4  0800a8c4  0001a8c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0800a8c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000139c  20000194  0800aa5c  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001530  0800aa5c  00021530  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b73f  00000000  00000000  000201bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003701  00000000  00000000  0003b8fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014d0  00000000  00000000  0003f000  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001360  00000000  00000000  000404d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b718  00000000  00000000  00041830  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013955  00000000  00000000  0005cf48  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094614  00000000  00000000  0007089d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00104eb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000571c  00000000  00000000  00104f2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000194 	.word	0x20000194
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a82c 	.word	0x0800a82c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000198 	.word	0x20000198
 8000148:	0800a82c 	.word	0x0800a82c

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <DWT_Delay_Init>:
	GPIOA->BRR = (1<<7);
}

/* DWT based delay */
uint32_t DWT_Delay_Init(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000198:	4b14      	ldr	r3, [pc, #80]	; (80001ec <DWT_Delay_Init+0x58>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	4a13      	ldr	r2, [pc, #76]	; (80001ec <DWT_Delay_Init+0x58>)
 800019e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80001a2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80001a4:	4b11      	ldr	r3, [pc, #68]	; (80001ec <DWT_Delay_Init+0x58>)
 80001a6:	68db      	ldr	r3, [r3, #12]
 80001a8:	4a10      	ldr	r2, [pc, #64]	; (80001ec <DWT_Delay_Init+0x58>)
 80001aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001ae:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80001b0:	4b0f      	ldr	r3, [pc, #60]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a0e      	ldr	r2, [pc, #56]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001b6:	f023 0301 	bic.w	r3, r3, #1
 80001ba:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80001bc:	4b0c      	ldr	r3, [pc, #48]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a0b      	ldr	r2, [pc, #44]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001c2:	f043 0301 	orr.w	r3, r3, #1
 80001c6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80001c8:	4b09      	ldr	r3, [pc, #36]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80001ce:	bf00      	nop
    __ASM volatile ("NOP");
 80001d0:	bf00      	nop
    __ASM volatile ("NOP");
 80001d2:	bf00      	nop
    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80001d4:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001d6:	685b      	ldr	r3, [r3, #4]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80001dc:	2300      	movs	r3, #0
 80001de:	e000      	b.n	80001e2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80001e0:	2301      	movs	r3, #1
    }
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000edf0 	.word	0xe000edf0
 80001f0:	e0001000 	.word	0xe0001000

080001f4 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80001fc:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <DWT_Delay_us+0x44>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000202:	f005 fdf9 	bl	8005df8 <HAL_RCC_GetHCLKFreq>
 8000206:	4602      	mov	r2, r0
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <DWT_Delay_us+0x48>)
 800020a:	fba3 2302 	umull	r2, r3, r3, r2
 800020e:	0c9b      	lsrs	r3, r3, #18
 8000210:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	68ba      	ldr	r2, [r7, #8]
 8000216:	fb02 f303 	mul.w	r3, r2, r3
 800021a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 800021c:	bf00      	nop
 800021e:	4b06      	ldr	r3, [pc, #24]	; (8000238 <DWT_Delay_us+0x44>)
 8000220:	685a      	ldr	r2, [r3, #4]
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	1ad2      	subs	r2, r2, r3
 8000226:	6879      	ldr	r1, [r7, #4]
 8000228:	68bb      	ldr	r3, [r7, #8]
 800022a:	1acb      	subs	r3, r1, r3
 800022c:	429a      	cmp	r2, r3
 800022e:	d3f6      	bcc.n	800021e <DWT_Delay_us+0x2a>
}
 8000230:	bf00      	nop
 8000232:	3710      	adds	r7, #16
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	e0001000 	.word	0xe0001000
 800023c:	431bde83 	.word	0x431bde83

08000240 <DWT_Delay_ms>:

__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <DWT_Delay_ms+0x40>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 800024e:	f005 fdd3 	bl	8005df8 <HAL_RCC_GetHCLKFreq>
 8000252:	4602      	mov	r2, r0
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <DWT_Delay_ms+0x44>)
 8000256:	fba3 2302 	umull	r2, r3, r3, r2
 800025a:	099b      	lsrs	r3, r3, #6
 800025c:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	68ba      	ldr	r2, [r7, #8]
 8000262:	fb02 f303 	mul.w	r3, r2, r3
 8000266:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8000268:	bf00      	nop
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <DWT_Delay_ms+0x40>)
 800026c:	685a      	ldr	r2, [r3, #4]
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	1ad2      	subs	r2, r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	429a      	cmp	r2, r3
 8000276:	d3f8      	bcc.n	800026a <DWT_Delay_ms+0x2a>
}
 8000278:	bf00      	nop
 800027a:	3710      	adds	r7, #16
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	e0001000 	.word	0xe0001000
 8000284:	10624dd3 	.word	0x10624dd3

08000288 <MCP23017SetPin>:



/* MCP23017 Defines */

void MCP23017SetPin(uint8_t pin, bank b, uint8_t addr){
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	71fb      	strb	r3, [r7, #7]
 8000292:	460b      	mov	r3, r1
 8000294:	71bb      	strb	r3, [r7, #6]
 8000296:	4613      	mov	r3, r2
 8000298:	717b      	strb	r3, [r7, #5]

	while(blocked); //wait for clearance
 800029a:	bf00      	nop
 800029c:	4b3f      	ldr	r3, [pc, #252]	; (800039c <MCP23017SetPin+0x114>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d1fa      	bne.n	800029c <MCP23017SetPin+0x14>
	//GPIOA->BSRR = (1<<7);

	currentIOState[b] |= (1<<pin);
 80002a6:	79bb      	ldrb	r3, [r7, #6]
 80002a8:	4a3d      	ldr	r2, [pc, #244]	; (80003a0 <MCP23017SetPin+0x118>)
 80002aa:	5cd3      	ldrb	r3, [r2, r3]
 80002ac:	b25a      	sxtb	r2, r3
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2101      	movs	r1, #1
 80002b2:	fa01 f303 	lsl.w	r3, r1, r3
 80002b6:	b25b      	sxtb	r3, r3
 80002b8:	4313      	orrs	r3, r2
 80002ba:	b25a      	sxtb	r2, r3
 80002bc:	79bb      	ldrb	r3, [r7, #6]
 80002be:	b2d1      	uxtb	r1, r2
 80002c0:	4a37      	ldr	r2, [pc, #220]	; (80003a0 <MCP23017SetPin+0x118>)
 80002c2:	54d1      	strb	r1, [r2, r3]
	//write out the new state
	//UPDATE: This messes up the BAM Driver because it causes the BAM to skip entire steps... its better just to pause TIM2
	//__disable_irq(); //the entire routine will be super duper unhappy unless this is in place


	TIM2->CR1 &= ~1; //disable BAM Driver
 80002c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ce:	f023 0301 	bic.w	r3, r3, #1
 80002d2:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 80002d4:	4b33      	ldr	r3, [pc, #204]	; (80003a4 <MCP23017SetPin+0x11c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a32      	ldr	r2, [pc, #200]	; (80003a4 <MCP23017SetPin+0x11c>)
 80002da:	f023 0301 	bic.w	r3, r3, #1
 80002de:	6013      	str	r3, [r2, #0]
	I2C2->CR1 |= (1<<8); //send start condition
 80002e0:	4b31      	ldr	r3, [pc, #196]	; (80003a8 <MCP23017SetPin+0x120>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a30      	ldr	r2, [pc, #192]	; (80003a8 <MCP23017SetPin+0x120>)
 80002e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ea:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80002ec:	bf00      	nop
 80002ee:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <MCP23017SetPin+0x120>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f9      	beq.n	80002ee <MCP23017SetPin+0x66>
	I2C2->DR = addr; //address the MCP23017
 80002fa:	4a2b      	ldr	r2, [pc, #172]	; (80003a8 <MCP23017SetPin+0x120>)
 80002fc:	797b      	ldrb	r3, [r7, #5]
 80002fe:	6113      	str	r3, [r2, #16]
	//__enable_irq(); didn't work here
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000300:	bf00      	nop
 8000302:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <MCP23017SetPin+0x120>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f003 0302 	and.w	r3, r3, #2
 800030a:	2b00      	cmp	r3, #0
 800030c:	d0f9      	beq.n	8000302 <MCP23017SetPin+0x7a>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 800030e:	bf00      	nop
 8000310:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <MCP23017SetPin+0x120>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0304 	and.w	r3, r3, #4
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f9      	beq.n	8000310 <MCP23017SetPin+0x88>

	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800031c:	bf00      	nop
 800031e:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <MCP23017SetPin+0x120>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0f9      	beq.n	800031e <MCP23017SetPin+0x96>
	if(b==A){
 800032a:	79bb      	ldrb	r3, [r7, #6]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d103      	bne.n	8000338 <MCP23017SetPin+0xb0>
		I2C2->DR = 0x14;
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <MCP23017SetPin+0x120>)
 8000332:	2214      	movs	r2, #20
 8000334:	611a      	str	r2, [r3, #16]
 8000336:	e002      	b.n	800033e <MCP23017SetPin+0xb6>
	}
	else{
		I2C2->DR = 0x15;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MCP23017SetPin+0x120>)
 800033a:	2215      	movs	r2, #21
 800033c:	611a      	str	r2, [r3, #16]
	}
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800033e:	bf00      	nop
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MCP23017SetPin+0x120>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f9      	beq.n	8000340 <MCP23017SetPin+0xb8>
	I2C2->DR = currentIOState[b]; //just pull everything low
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	4a14      	ldr	r2, [pc, #80]	; (80003a0 <MCP23017SetPin+0x118>)
 8000350:	5cd2      	ldrb	r2, [r2, r3]
 8000352:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <MCP23017SetPin+0x120>)
 8000354:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000356:	bf00      	nop
 8000358:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <MCP23017SetPin+0x120>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0f9      	beq.n	8000358 <MCP23017SetPin+0xd0>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 8000364:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <MCP23017SetPin+0x120>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <MCP23017SetPin+0x120>)
 800036a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800036e:	6013      	str	r3, [r2, #0]

	while ((I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 8000370:	bf00      	nop
 8000372:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <MCP23017SetPin+0x120>)
 8000374:	699b      	ldr	r3, [r3, #24]
	TIM2->CR1 |= 1; //enable BAM Driver
 8000376:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 8000386:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <MCP23017SetPin+0x11c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <MCP23017SetPin+0x11c>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6013      	str	r3, [r2, #0]
	//__enable_irq();
	//GPIOA->BRR = (1<<7);

}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	200001b1 	.word	0x200001b1
 80003a0:	200001d0 	.word	0x200001d0
 80003a4:	40000400 	.word	0x40000400
 80003a8:	40005800 	.word	0x40005800

080003ac <MCP23017ClearPin>:

void MCP23017ClearPin(uint8_t pin, bank b, uint8_t addr){
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
 80003b6:	460b      	mov	r3, r1
 80003b8:	71bb      	strb	r3, [r7, #6]
 80003ba:	4613      	mov	r3, r2
 80003bc:	717b      	strb	r3, [r7, #5]

	while(blocked); //wait for clearance
 80003be:	bf00      	nop
 80003c0:	4b40      	ldr	r3, [pc, #256]	; (80004c4 <MCP23017ClearPin+0x118>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d1fa      	bne.n	80003c0 <MCP23017ClearPin+0x14>
	//GPIOA->BSRR = (1<<7);

	currentIOState[b] &= ~(1<<pin);
 80003ca:	79bb      	ldrb	r3, [r7, #6]
 80003cc:	4a3e      	ldr	r2, [pc, #248]	; (80004c8 <MCP23017ClearPin+0x11c>)
 80003ce:	5cd3      	ldrb	r3, [r2, r3]
 80003d0:	b25a      	sxtb	r2, r3
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	2101      	movs	r1, #1
 80003d6:	fa01 f303 	lsl.w	r3, r1, r3
 80003da:	b25b      	sxtb	r3, r3
 80003dc:	43db      	mvns	r3, r3
 80003de:	b25b      	sxtb	r3, r3
 80003e0:	4013      	ands	r3, r2
 80003e2:	b25a      	sxtb	r2, r3
 80003e4:	79bb      	ldrb	r3, [r7, #6]
 80003e6:	b2d1      	uxtb	r1, r2
 80003e8:	4a37      	ldr	r2, [pc, #220]	; (80004c8 <MCP23017ClearPin+0x11c>)
 80003ea:	54d1      	strb	r1, [r2, r3]
	//UPDATE: This messses up the BAM Driver... I think it'll be better just to stop TIM2
	//__disable_irq(); //the entire routine will be super duper unhappy unless this is in place

	//potential issue: the other interrupts may cause this crap to fail again...

	TIM2->CR1 &= ~1; //disable BAM Driver
 80003ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003f6:	f023 0301 	bic.w	r3, r3, #1
 80003fa:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 80003fc:	4b33      	ldr	r3, [pc, #204]	; (80004cc <MCP23017ClearPin+0x120>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a32      	ldr	r2, [pc, #200]	; (80004cc <MCP23017ClearPin+0x120>)
 8000402:	f023 0301 	bic.w	r3, r3, #1
 8000406:	6013      	str	r3, [r2, #0]

	I2C2->CR1 |= (1<<8); //send start condition
 8000408:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <MCP23017ClearPin+0x124>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a30      	ldr	r2, [pc, #192]	; (80004d0 <MCP23017ClearPin+0x124>)
 800040e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000412:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 8000414:	bf00      	nop
 8000416:	4b2e      	ldr	r3, [pc, #184]	; (80004d0 <MCP23017ClearPin+0x124>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	2b00      	cmp	r3, #0
 8000420:	d0f9      	beq.n	8000416 <MCP23017ClearPin+0x6a>
	I2C2->DR = addr; //address the MCP23017
 8000422:	4a2b      	ldr	r2, [pc, #172]	; (80004d0 <MCP23017ClearPin+0x124>)
 8000424:	797b      	ldrb	r3, [r7, #5]
 8000426:	6113      	str	r3, [r2, #16]
	//__enable_irq(); didn't work here
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000428:	bf00      	nop
 800042a:	4b29      	ldr	r3, [pc, #164]	; (80004d0 <MCP23017ClearPin+0x124>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f003 0302 	and.w	r3, r3, #2
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0f9      	beq.n	800042a <MCP23017ClearPin+0x7e>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000436:	bf00      	nop
 8000438:	4b25      	ldr	r3, [pc, #148]	; (80004d0 <MCP23017ClearPin+0x124>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0304 	and.w	r3, r3, #4
 8000440:	2b00      	cmp	r3, #0
 8000442:	d0f9      	beq.n	8000438 <MCP23017ClearPin+0x8c>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000444:	bf00      	nop
 8000446:	4b22      	ldr	r3, [pc, #136]	; (80004d0 <MCP23017ClearPin+0x124>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <MCP23017ClearPin+0x9a>
	if(b==A){
 8000452:	79bb      	ldrb	r3, [r7, #6]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d103      	bne.n	8000460 <MCP23017ClearPin+0xb4>
		I2C2->DR = 0x14;
 8000458:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <MCP23017ClearPin+0x124>)
 800045a:	2214      	movs	r2, #20
 800045c:	611a      	str	r2, [r3, #16]
 800045e:	e002      	b.n	8000466 <MCP23017ClearPin+0xba>
	}
	else{
		I2C2->DR = 0x15;
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <MCP23017ClearPin+0x124>)
 8000462:	2215      	movs	r2, #21
 8000464:	611a      	str	r2, [r3, #16]
	}
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000466:	bf00      	nop
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <MCP23017ClearPin+0x124>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000470:	2b00      	cmp	r3, #0
 8000472:	d0f9      	beq.n	8000468 <MCP23017ClearPin+0xbc>
	I2C2->DR = currentIOState[b]; //just pull everything low
 8000474:	79bb      	ldrb	r3, [r7, #6]
 8000476:	4a14      	ldr	r2, [pc, #80]	; (80004c8 <MCP23017ClearPin+0x11c>)
 8000478:	5cd2      	ldrb	r2, [r2, r3]
 800047a:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <MCP23017ClearPin+0x124>)
 800047c:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800047e:	bf00      	nop
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <MCP23017ClearPin+0x124>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000488:	2b00      	cmp	r3, #0
 800048a:	d0f9      	beq.n	8000480 <MCP23017ClearPin+0xd4>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 800048c:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <MCP23017ClearPin+0x124>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a0f      	ldr	r2, [pc, #60]	; (80004d0 <MCP23017ClearPin+0x124>)
 8000492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000496:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 8000498:	bf00      	nop
 800049a:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <MCP23017ClearPin+0x124>)
 800049c:	699b      	ldr	r3, [r3, #24]
	TIM2->CR1 |= 1; //enable BAM Driver
 800049e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 80004ae:	4b07      	ldr	r3, [pc, #28]	; (80004cc <MCP23017ClearPin+0x120>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a06      	ldr	r2, [pc, #24]	; (80004cc <MCP23017ClearPin+0x120>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6013      	str	r3, [r2, #0]
	//__enable_irq();
	//GPIOA->BRR = (1<<7);

}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	200001b1 	.word	0x200001b1
 80004c8:	200001d0 	.word	0x200001d0
 80004cc:	40000400 	.word	0x40000400
 80004d0:	40005800 	.word	0x40005800

080004d4 <LEDMatrixInit>:

void LEDMatrixInit(uint8_t addr){
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004de:	b672      	cpsid	i
	//note: BTF clearing and stop generation are handled by the Event Interrupt
	__disable_irq();



	I2C1->CR1 |= (1<<8); //send start condition
 80004e0:	4b27      	ldr	r3, [pc, #156]	; (8000580 <LEDMatrixInit+0xac>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a26      	ldr	r2, [pc, #152]	; (8000580 <LEDMatrixInit+0xac>)
 80004e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ea:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 80004ec:	bf00      	nop
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <LEDMatrixInit+0xac>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f9      	beq.n	80004ee <LEDMatrixInit+0x1a>
	I2C1->DR = addr; //address the MCP23017
 80004fa:	4a21      	ldr	r2, [pc, #132]	; (8000580 <LEDMatrixInit+0xac>)
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	6113      	str	r3, [r2, #16]
	while ((I2C1->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000500:	bf00      	nop
 8000502:	4b1f      	ldr	r3, [pc, #124]	; (8000580 <LEDMatrixInit+0xac>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	f003 0302 	and.w	r3, r3, #2
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0f9      	beq.n	8000502 <LEDMatrixInit+0x2e>
	while ((I2C1->SR2 & (1<<2)) == 0); //read I2C SR2
 800050e:	bf00      	nop
 8000510:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <LEDMatrixInit+0xac>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	2b00      	cmp	r3, #0
 800051a:	d0f9      	beq.n	8000510 <LEDMatrixInit+0x3c>
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800051c:	bf00      	nop
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <LEDMatrixInit+0xac>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <LEDMatrixInit+0x4a>
	I2C1->DR = 0x00; //write to IODIR_A
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <LEDMatrixInit+0xac>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000530:	bf00      	nop
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <LEDMatrixInit+0xac>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f9      	beq.n	8000532 <LEDMatrixInit+0x5e>
	I2C1->DR = 0x00; //all outputs
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <LEDMatrixInit+0xac>)
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000544:	bf00      	nop
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <LEDMatrixInit+0xac>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0f9      	beq.n	8000546 <LEDMatrixInit+0x72>
	I2C1->DR = 0x00; //all outputs for next address which is IODIR_B
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <LEDMatrixInit+0xac>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000558:	bf00      	nop
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <LEDMatrixInit+0xac>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000562:	2b00      	cmp	r3, #0
 8000564:	d0f9      	beq.n	800055a <LEDMatrixInit+0x86>
	//while ((I2C1->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C1->CR1 |= (1<<9); //send stop condition
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <LEDMatrixInit+0xac>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a05      	ldr	r2, [pc, #20]	; (8000580 <LEDMatrixInit+0xac>)
 800056c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000570:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000572:	b662      	cpsie	i
	__enable_irq();

}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40005400 	.word	0x40005400

08000584 <LEDMatrixStart>:

void LEDMatrixStart(uint8_t addr){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]

	while(blocked); //just so nothing stupid happens
 800058e:	bf00      	nop
 8000590:	4b21      	ldr	r3, [pc, #132]	; (8000618 <LEDMatrixStart+0x94>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1fa      	bne.n	8000590 <LEDMatrixStart+0xc>


	DMA1_Channel6->CMAR = (uint32_t)LEDMatrixBuffer;
 800059a:	4b20      	ldr	r3, [pc, #128]	; (800061c <LEDMatrixStart+0x98>)
 800059c:	4a20      	ldr	r2, [pc, #128]	; (8000620 <LEDMatrixStart+0x9c>)
 800059e:	60da      	str	r2, [r3, #12]
	DMA1_Channel6->CPAR = (uint32_t)&(I2C1->DR);
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <LEDMatrixStart+0x98>)
 80005a2:	4a20      	ldr	r2, [pc, #128]	; (8000624 <LEDMatrixStart+0xa0>)
 80005a4:	609a      	str	r2, [r3, #8]
	DMA1_Channel6->CNDTR = 3;
 80005a6:	4b1d      	ldr	r3, [pc, #116]	; (800061c <LEDMatrixStart+0x98>)
 80005a8:	2203      	movs	r2, #3
 80005aa:	605a      	str	r2, [r3, #4]
	DMA1_Channel6->CCR |= (0b11<<12); //High Priority
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <LEDMatrixStart+0x98>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a1a      	ldr	r2, [pc, #104]	; (800061c <LEDMatrixStart+0x98>)
 80005b2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80005b6:	6013      	str	r3, [r2, #0]
	DMA1_Channel6->CCR |= (1<<4 | 1<<7); //set MINC and Read from Memory
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <LEDMatrixStart+0x98>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a17      	ldr	r2, [pc, #92]	; (800061c <LEDMatrixStart+0x98>)
 80005be:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80005c2:	6013      	str	r3, [r2, #0]
	//DMA1_Channel6->CCR |= (1<<1); //enable transfer complete interrupt

	DMA1_Channel6->CCR |= 1; //activate DMA
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <LEDMatrixStart+0x98>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a14      	ldr	r2, [pc, #80]	; (800061c <LEDMatrixStart+0x98>)
 80005ca:	f043 0301 	orr.w	r3, r3, #1
 80005ce:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i

	__disable_irq();
	I2C1->CR2 |= (1<<9); //enable event interrupts
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <LEDMatrixStart+0xa4>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	4a14      	ldr	r2, [pc, #80]	; (8000628 <LEDMatrixStart+0xa4>)
 80005d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005dc:	6053      	str	r3, [r2, #4]
	I2C1->CR1 |= (1<<8); //send start condition
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <LEDMatrixStart+0xa4>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a11      	ldr	r2, [pc, #68]	; (8000628 <LEDMatrixStart+0xa4>)
 80005e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e8:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 80005ea:	bf00      	nop
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <LEDMatrixStart+0xa4>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0f9      	beq.n	80005ec <LEDMatrixStart+0x68>
	I2C1->DR = addr; //address the MCP23017
 80005f8:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <LEDMatrixStart+0xa4>)
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	6113      	str	r3, [r2, #16]
	I2C1->CR2 |= (1<<11); //enable DMA Requests
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <LEDMatrixStart+0xa4>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	4a09      	ldr	r2, [pc, #36]	; (8000628 <LEDMatrixStart+0xa4>)
 8000604:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000608:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 800060a:	b662      	cpsie	i
	__enable_irq();



}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	200001b1 	.word	0x200001b1
 800061c:	4002006c 	.word	0x4002006c
 8000620:	200005a0 	.word	0x200005a0
 8000624:	40005410 	.word	0x40005410
 8000628:	40005400 	.word	0x40005400

0800062c <LCDInit>:
 * \fn LCDInit
 * @brief Initialises both the LCD and the MCP23017
 *
 * @param addr Address of the MCP23017
 */
void LCDInit(uint8_t addr){ //interrupts should be disabled here
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8000636:	b672      	cpsid	i

	//while(blocked); //wait for clearance anyways just for good measure

	//Initialise the MCP23017 first
	__disable_irq(); //let's allow the init to go down peacefully
	I2C2->CR1 |= (1<<8); //send start condition
 8000638:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <LCDInit+0x138>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a49      	ldr	r2, [pc, #292]	; (8000764 <LCDInit+0x138>)
 800063e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000642:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 8000644:	bf00      	nop
 8000646:	4b47      	ldr	r3, [pc, #284]	; (8000764 <LCDInit+0x138>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0f9      	beq.n	8000646 <LCDInit+0x1a>
	I2C2->DR = addr; //address the MCP23017
 8000652:	4a44      	ldr	r2, [pc, #272]	; (8000764 <LCDInit+0x138>)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000658:	bf00      	nop
 800065a:	4b42      	ldr	r3, [pc, #264]	; (8000764 <LCDInit+0x138>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0f9      	beq.n	800065a <LCDInit+0x2e>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000666:	bf00      	nop
 8000668:	4b3e      	ldr	r3, [pc, #248]	; (8000764 <LCDInit+0x138>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0304 	and.w	r3, r3, #4
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0f9      	beq.n	8000668 <LCDInit+0x3c>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000674:	bf00      	nop
 8000676:	4b3b      	ldr	r3, [pc, #236]	; (8000764 <LCDInit+0x138>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f9      	beq.n	8000676 <LCDInit+0x4a>
	I2C2->DR = 0x00; //write to IODIR_A
 8000682:	4b38      	ldr	r3, [pc, #224]	; (8000764 <LCDInit+0x138>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000688:	bf00      	nop
 800068a:	4b36      	ldr	r3, [pc, #216]	; (8000764 <LCDInit+0x138>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f9      	beq.n	800068a <LCDInit+0x5e>
	I2C2->DR = 0x00; //all outputs
 8000696:	4b33      	ldr	r3, [pc, #204]	; (8000764 <LCDInit+0x138>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800069c:	bf00      	nop
 800069e:	4b31      	ldr	r3, [pc, #196]	; (8000764 <LCDInit+0x138>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0f9      	beq.n	800069e <LCDInit+0x72>
	I2C2->DR = 0x00; //all outputs for next address which is IODIR_B
 80006aa:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <LCDInit+0x138>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80006b0:	bf00      	nop
 80006b2:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <LCDInit+0x138>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d0f9      	beq.n	80006b2 <LCDInit+0x86>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 80006be:	4b29      	ldr	r3, [pc, #164]	; (8000764 <LCDInit+0x138>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a28      	ldr	r2, [pc, #160]	; (8000764 <LCDInit+0x138>)
 80006c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006c8:	6013      	str	r3, [r2, #0]


	//Pull RS, RW and E pins LOW
	MCP23017ClearPin(RS_Pin, B, LCD_Address);
 80006ca:	224e      	movs	r2, #78	; 0x4e
 80006cc:	2101      	movs	r1, #1
 80006ce:	2002      	movs	r0, #2
 80006d0:	f7ff fe6c 	bl	80003ac <MCP23017ClearPin>
	MCP23017ClearPin(RS_Pin, B, LCD_Address);
 80006d4:	224e      	movs	r2, #78	; 0x4e
 80006d6:	2101      	movs	r1, #1
 80006d8:	2002      	movs	r0, #2
 80006da:	f7ff fe67 	bl	80003ac <MCP23017ClearPin>
	MCP23017ClearPin(RS_Pin, B, LCD_Address);
 80006de:	224e      	movs	r2, #78	; 0x4e
 80006e0:	2101      	movs	r1, #1
 80006e2:	2002      	movs	r0, #2
 80006e4:	f7ff fe62 	bl	80003ac <MCP23017ClearPin>



	LCDData(0x00, addr); //clear the data pins as well
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	4619      	mov	r1, r3
 80006ec:	2000      	movs	r0, #0
 80006ee:	f000 f83b 	bl	8000768 <LCDData>
	DWT_Delay_ms(30);
 80006f2:	201e      	movs	r0, #30
 80006f4:	f7ff fda4 	bl	8000240 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4619      	mov	r1, r3
 80006fc:	2030      	movs	r0, #48	; 0x30
 80006fe:	f000 f8a7 	bl	8000850 <LCDCommand>
	DWT_Delay_ms(5);
 8000702:	2005      	movs	r0, #5
 8000704:	f7ff fd9c 	bl	8000240 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4619      	mov	r1, r3
 800070c:	2030      	movs	r0, #48	; 0x30
 800070e:	f000 f89f 	bl	8000850 <LCDCommand>
	DWT_Delay_ms(5);
 8000712:	2005      	movs	r0, #5
 8000714:	f7ff fd94 	bl	8000240 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	4619      	mov	r1, r3
 800071c:	2030      	movs	r0, #48	; 0x30
 800071e:	f000 f897 	bl	8000850 <LCDCommand>
	DWT_Delay_us(1000);
 8000722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000726:	f7ff fd65 	bl	80001f4 <DWT_Delay_us>

	LCDCommand(0x38, addr); //8-bit mode, 2 lines, smaller font
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	4619      	mov	r1, r3
 800072e:	2038      	movs	r0, #56	; 0x38
 8000730:	f000 f88e 	bl	8000850 <LCDCommand>

	LCDCommand(0x0C, addr); //display ON
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	4619      	mov	r1, r3
 8000738:	200c      	movs	r0, #12
 800073a:	f000 f889 	bl	8000850 <LCDCommand>

	LCDCommand(0x01, addr); //display clear
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	4619      	mov	r1, r3
 8000742:	2001      	movs	r0, #1
 8000744:	f000 f884 	bl	8000850 <LCDCommand>
	DWT_Delay_us(2000); //clear requires a substantial delay
 8000748:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800074c:	f7ff fd52 	bl	80001f4 <DWT_Delay_us>

	LCDCommand(0x06, addr); //set entry mode
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4619      	mov	r1, r3
 8000754:	2006      	movs	r0, #6
 8000756:	f000 f87b 	bl	8000850 <LCDCommand>
  __ASM volatile ("cpsie i" : : : "memory");
 800075a:	b662      	cpsie	i

	__enable_irq();


}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40005800 	.word	0x40005800

08000768 <LCDData>:
 * @brief Presents the data to D0 to D7 (located on Bank A)
 *
 * @param data Data to send
 * @param addr I2C Address of the MCP23017
 */
void LCDData(char data, uint8_t addr){
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	460a      	mov	r2, r1
 8000772:	71fb      	strb	r3, [r7, #7]
 8000774:	4613      	mov	r3, r2
 8000776:	71bb      	strb	r3, [r7, #6]

	while(blocked); //wait for clearance
 8000778:	bf00      	nop
 800077a:	4b32      	ldr	r3, [pc, #200]	; (8000844 <LCDData+0xdc>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d1fa      	bne.n	800077a <LCDData+0x12>

	TIM2->CR1 &= ~1; //disable BAM Driver
 8000784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800078e:	f023 0301 	bic.w	r3, r3, #1
 8000792:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 8000794:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <LCDData+0xe0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a2b      	ldr	r2, [pc, #172]	; (8000848 <LCDData+0xe0>)
 800079a:	f023 0301 	bic.w	r3, r3, #1
 800079e:	6013      	str	r3, [r2, #0]

	I2C2->CR1 |= (1<<8); //send start condition
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <LCDData+0xe4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a29      	ldr	r2, [pc, #164]	; (800084c <LCDData+0xe4>)
 80007a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007aa:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80007ac:	bf00      	nop
 80007ae:	4b27      	ldr	r3, [pc, #156]	; (800084c <LCDData+0xe4>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d0f9      	beq.n	80007ae <LCDData+0x46>
	I2C2->DR = addr; //address the MCP23017
 80007ba:	4a24      	ldr	r2, [pc, #144]	; (800084c <LCDData+0xe4>)
 80007bc:	79bb      	ldrb	r3, [r7, #6]
 80007be:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80007c0:	bf00      	nop
 80007c2:	4b22      	ldr	r3, [pc, #136]	; (800084c <LCDData+0xe4>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f9      	beq.n	80007c2 <LCDData+0x5a>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 80007ce:	bf00      	nop
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <LCDData+0xe4>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d0f9      	beq.n	80007d0 <LCDData+0x68>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80007dc:	bf00      	nop
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <LCDData+0xe4>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0f9      	beq.n	80007de <LCDData+0x76>
	I2C2->DR = 0x14; //write to GPIO_A
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <LCDData+0xe4>)
 80007ec:	2214      	movs	r2, #20
 80007ee:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80007f0:	bf00      	nop
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <LCDData+0xe4>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f9      	beq.n	80007f2 <LCDData+0x8a>
	I2C2->DR = data; //present data at output bank A
 80007fe:	4a13      	ldr	r2, [pc, #76]	; (800084c <LCDData+0xe4>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000804:	bf00      	nop
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <LCDData+0xe4>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f9      	beq.n	8000806 <LCDData+0x9e>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <LCDData+0xe4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0d      	ldr	r2, [pc, #52]	; (800084c <LCDData+0xe4>)
 8000818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081c:	6013      	str	r3, [r2, #0]

	TIM2->CR1 |= 1; //enable BAM Driver
 800081e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <LCDData+0xe0>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a05      	ldr	r2, [pc, #20]	; (8000848 <LCDData+0xe0>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6013      	str	r3, [r2, #0]

}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	200001b1 	.word	0x200001b1
 8000848:	40000400 	.word	0x40000400
 800084c:	40005800 	.word	0x40005800

08000850 <LCDCommand>:

void LCDCommand(char data, uint8_t addr){
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	460a      	mov	r2, r1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	71bb      	strb	r3, [r7, #6]


	MCP23017ClearPin(RS_Pin, B, addr);
 8000860:	79bb      	ldrb	r3, [r7, #6]
 8000862:	461a      	mov	r2, r3
 8000864:	2101      	movs	r1, #1
 8000866:	2002      	movs	r0, #2
 8000868:	f7ff fda0 	bl	80003ac <MCP23017ClearPin>

	LCDData(data, addr);
 800086c:	79ba      	ldrb	r2, [r7, #6]
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff78 	bl	8000768 <LCDData>

	LCDCycleEN(addr);
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f804 	bl	8000888 <LCDCycleEN>

}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <LCDCycleEN>:

void LCDCycleEN(uint8_t addr){
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]

	MCP23017ClearPin(EN_Pin, B, addr);
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	461a      	mov	r2, r3
 8000896:	2101      	movs	r1, #1
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff fd87 	bl	80003ac <MCP23017ClearPin>
	DWT_Delay_us(1);
 800089e:	2001      	movs	r0, #1
 80008a0:	f7ff fca8 	bl	80001f4 <DWT_Delay_us>
	MCP23017SetPin(EN_Pin, B, addr);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	461a      	mov	r2, r3
 80008a8:	2101      	movs	r1, #1
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff fcec 	bl	8000288 <MCP23017SetPin>
	DWT_Delay_us(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f7ff fc9f 	bl	80001f4 <DWT_Delay_us>
	MCP23017ClearPin(EN_Pin, B, addr);
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	461a      	mov	r2, r3
 80008ba:	2101      	movs	r1, #1
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fd75 	bl	80003ac <MCP23017ClearPin>
	DWT_Delay_us(100);
 80008c2:	2064      	movs	r0, #100	; 0x64
 80008c4:	f7ff fc96 	bl	80001f4 <DWT_Delay_us>


}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <LCDWriteChar>:

void LCDWriteChar(char data, uint8_t addr){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	460a      	mov	r2, r1
 80008da:	71fb      	strb	r3, [r7, #7]
 80008dc:	4613      	mov	r3, r2
 80008de:	71bb      	strb	r3, [r7, #6]

	MCP23017SetPin(RS_Pin, B, addr);
 80008e0:	79bb      	ldrb	r3, [r7, #6]
 80008e2:	461a      	mov	r2, r3
 80008e4:	2101      	movs	r1, #1
 80008e6:	2002      	movs	r0, #2
 80008e8:	f7ff fcce 	bl	8000288 <MCP23017SetPin>
	LCDData(data, addr);
 80008ec:	79ba      	ldrb	r2, [r7, #6]
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff38 	bl	8000768 <LCDData>
	LCDCycleEN(addr);
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ffc4 	bl	8000888 <LCDCycleEN>

}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <LCDWriteString>:

void LCDWriteString(char *str, uint8_t addr){
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	70fb      	strb	r3, [r7, #3]

	for(int i = 0; (volatile char)str[i] != '\x00' ; i++){ //Nice touch: take advantage of null byte terminated strings
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	e00b      	b.n	8000932 <LCDWriteString+0x2a>
		LCDWriteChar(str[i], addr);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	4413      	add	r3, r2
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	78fa      	ldrb	r2, [r7, #3]
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ffd2 	bl	80008d0 <LCDWriteChar>
	for(int i = 0; (volatile char)str[i] != '\x00' ; i++){ //Nice touch: take advantage of null byte terminated strings
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3301      	adds	r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	4413      	add	r3, r2
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d1ed      	bne.n	800091a <LCDWriteString+0x12>
	}

}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <LCDClear>:

void LCDClear(uint8_t addr){
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	4603      	mov	r3, r0
 800094e:	71fb      	strb	r3, [r7, #7]

	LCDCommand(1, addr);
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4619      	mov	r1, r3
 8000954:	2001      	movs	r0, #1
 8000956:	f7ff ff7b 	bl	8000850 <LCDCommand>
	DWT_Delay_us(2000);
 800095a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800095e:	f7ff fc49 	bl	80001f4 <DWT_Delay_us>

}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <LCDSetCursor>:

void LCDSetCursor(uint8_t row, uint8_t col, uint8_t addr){
 800096a:	b580      	push	{r7, lr}
 800096c:	b084      	sub	sp, #16
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	460b      	mov	r3, r1
 8000976:	71bb      	strb	r3, [r7, #6]
 8000978:	4613      	mov	r3, r2
 800097a:	717b      	strb	r3, [r7, #5]

	char outbyte;

	if(row == 1){
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d109      	bne.n	8000996 <LCDSetCursor+0x2c>
		outbyte = 0x80 + col - 1;
 8000982:	79bb      	ldrb	r3, [r7, #6]
 8000984:	337f      	adds	r3, #127	; 0x7f
 8000986:	73fb      	strb	r3, [r7, #15]
		LCDCommand(outbyte, addr);
 8000988:	797a      	ldrb	r2, [r7, #5]
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	4611      	mov	r1, r2
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ff5e 	bl	8000850 <LCDCommand>
	else if(row == 2){
		outbyte = 0xC0 + col - 1;
		LCDCommand(outbyte, addr);
	}

}
 8000994:	e00b      	b.n	80009ae <LCDSetCursor+0x44>
	else if(row == 2){
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d108      	bne.n	80009ae <LCDSetCursor+0x44>
		outbyte = 0xC0 + col - 1;
 800099c:	79bb      	ldrb	r3, [r7, #6]
 800099e:	3b41      	subs	r3, #65	; 0x41
 80009a0:	73fb      	strb	r3, [r7, #15]
		LCDCommand(outbyte, addr);
 80009a2:	797a      	ldrb	r2, [r7, #5]
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff51 	bl	8000850 <LCDCommand>
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009be:	f000 ff2d 	bl	800181c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c2:	f000 f899 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c6:	f000 fa7f 	bl	8000ec8 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ca:	f000 fa67 	bl	8000e9c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80009ce:	f009 fa8b 	bl	8009ee8 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80009d2:	f000 f913 	bl	8000bfc <MX_ADC1_Init>
  MX_I2C1_Init();
 80009d6:	f000 f94f 	bl	8000c78 <MX_I2C1_Init>
  MX_I2C2_Init();
 80009da:	f000 f97b 	bl	8000cd4 <MX_I2C2_Init>
  MX_TIM2_Init();
 80009de:	f000 f9a7 	bl	8000d30 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009e2:	f000 fa01 	bl	8000de8 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80009e6:	f000 f8e4 	bl	8000bb2 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  NVIC_SetPriorityGrouping(0U); //use standard interrupt grouping
 80009ea:	2000      	movs	r0, #0
 80009ec:	f7ff fbae 	bl	800014c <__NVIC_SetPriorityGrouping>
  DWT_Delay_Init();
 80009f0:	f7ff fbd0 	bl	8000194 <DWT_Delay_Init>

  blocked = 0;
 80009f4:	4b37      	ldr	r3, [pc, #220]	; (8000ad4 <main+0x11c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
  I2C2->CR1 |= 1; //enable i2c 2 peripheral for LCD and EEPROM
 80009fa:	4b37      	ldr	r3, [pc, #220]	; (8000ad8 <main+0x120>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a36      	ldr	r2, [pc, #216]	; (8000ad8 <main+0x120>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6013      	str	r3, [r2, #0]
  I2C1->CR1 |= 1; //enable i2c 1 peripheral for LED Matrix
 8000a06:	4b35      	ldr	r3, [pc, #212]	; (8000adc <main+0x124>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a34      	ldr	r2, [pc, #208]	; (8000adc <main+0x124>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6013      	str	r3, [r2, #0]

  LCDInit(LCD_Address);
 8000a12:	204e      	movs	r0, #78	; 0x4e
 8000a14:	f7ff fe0a 	bl	800062c <LCDInit>
  LEDMatrixInit(LEDMatrix_Address);
 8000a18:	2048      	movs	r0, #72	; 0x48
 8000a1a:	f7ff fd5b 	bl	80004d4 <LEDMatrixInit>

  TIM2->CR1 |= 1; //enable BAM Driver
 8000a1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6013      	str	r3, [r2, #0]
  TIM3->CR1 |= 1; //enable encoder scan driver
 8000a2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <main+0x128>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a2b      	ldr	r2, [pc, #172]	; (8000ae0 <main+0x128>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6013      	str	r3, [r2, #0]


  LCDClear(LCD_Address);
 8000a3a:	204e      	movs	r0, #78	; 0x4e
 8000a3c:	f7ff ff83 	bl	8000946 <LCDClear>

  LCDSetCursor(1, 1, LCD_Address);
 8000a40:	224e      	movs	r2, #78	; 0x4e
 8000a42:	2101      	movs	r1, #1
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff ff90 	bl	800096a <LCDSetCursor>

  LCDWriteString("AAAA", LCD_Address);
 8000a4a:	214e      	movs	r1, #78	; 0x4e
 8000a4c:	4825      	ldr	r0, [pc, #148]	; (8000ae4 <main+0x12c>)
 8000a4e:	f7ff ff5b 	bl	8000908 <LCDWriteString>



  for(int i = 0; i < 4; i++){ //function to drive the LED's
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	e022      	b.n	8000a9e <main+0xe6>
	  LEDMatrixBuffer[i*3] = 0x14;
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a21      	ldr	r2, [pc, #132]	; (8000ae8 <main+0x130>)
 8000a62:	2114      	movs	r1, #20
 8000a64:	54d1      	strb	r1, [r2, r3]
	  LEDMatrixBuffer[i*3+1] = ~(1<<i);
 8000a66:	2201      	movs	r2, #1
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	b2d9      	uxtb	r1, r3
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	4613      	mov	r3, r2
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	4413      	add	r3, r2
 8000a78:	3301      	adds	r3, #1
 8000a7a:	43ca      	mvns	r2, r1
 8000a7c:	b2d1      	uxtb	r1, r2
 8000a7e:	4a1a      	ldr	r2, [pc, #104]	; (8000ae8 <main+0x130>)
 8000a80:	54d1      	strb	r1, [r2, r3]
	  LEDMatrixBuffer[i*3+2] = LEDMatrix[i];
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	4613      	mov	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	4413      	add	r3, r2
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	4917      	ldr	r1, [pc, #92]	; (8000aec <main+0x134>)
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	440a      	add	r2, r1
 8000a92:	7811      	ldrb	r1, [r2, #0]
 8000a94:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <main+0x130>)
 8000a96:	54d1      	strb	r1, [r2, r3]
  for(int i = 0; i < 4; i++){ //function to drive the LED's
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	ddd9      	ble.n	8000a58 <main+0xa0>
  }

  LEDMatrixStart(LEDMatrix_Address);
 8000aa4:	2048      	movs	r0, #72	; 0x48
 8000aa6:	f7ff fd6d 	bl	8000584 <LEDMatrixStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  brightness[0] = encoderValues[3];
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <main+0x138>)
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <main+0x13c>)
 8000ab2:	701a      	strb	r2, [r3, #0]
	  brightness[1] = encoderValues[2];
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <main+0x138>)
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <main+0x13c>)
 8000abc:	705a      	strb	r2, [r3, #1]
	  brightness[2] = encoderValues[1];
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <main+0x138>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <main+0x13c>)
 8000ac6:	709a      	strb	r2, [r3, #2]
	  brightness[3] = encoderValues[0];
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <main+0x138>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <main+0x13c>)
 8000ad0:	70da      	strb	r2, [r3, #3]
	  brightness[0] = encoderValues[3];
 8000ad2:	e7ea      	b.n	8000aaa <main+0xf2>
 8000ad4:	200001b1 	.word	0x200001b1
 8000ad8:	40005800 	.word	0x40005800
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	40000400 	.word	0x40000400
 8000ae4:	0800a844 	.word	0x0800a844
 8000ae8:	200005a0 	.word	0x200005a0
 8000aec:	20000014 	.word	0x20000014
 8000af0:	200001bc 	.word	0x200001bc
 8000af4:	20000000 	.word	0x20000000

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	; 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b02:	2228      	movs	r2, #40	; 0x28
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f009 fe88 	bl	800a81c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b36:	2301      	movs	r3, #1
 8000b38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b44:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f004 fd86 	bl	8005660 <HAL_RCC_OscConfig>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b5a:	f000 fa47 	bl	8000fec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5e:	230f      	movs	r3, #15
 8000b60:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b6e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2102      	movs	r1, #2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f004 fff0 	bl	8005b60 <HAL_RCC_ClockConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b86:	f000 fa31 	bl	8000fec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000b8a:	2312      	movs	r3, #18
 8000b8c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b92:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000b94:	2300      	movs	r3, #0
 8000b96:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f005 f968 	bl	8005e70 <HAL_RCCEx_PeriphCLKConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ba6:	f000 fa21 	bl	8000fec <Error_Handler>
  }
}
 8000baa:	bf00      	nop
 8000bac:	3750      	adds	r7, #80	; 0x50
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2101      	movs	r1, #1
 8000bba:	201c      	movs	r0, #28
 8000bbc:	f001 f971 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bc0:	201c      	movs	r0, #28
 8000bc2:	f001 f98a 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2102      	movs	r1, #2
 8000bca:	201d      	movs	r0, #29
 8000bcc:	f001 f969 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bd0:	201d      	movs	r0, #29
 8000bd2:	f001 f982 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2010      	movs	r0, #16
 8000bdc:	f001 f961 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000be0:	2010      	movs	r0, #16
 8000be2:	f001 f97a 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	201f      	movs	r0, #31
 8000bec:	f001 f959 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000bf0:	201f      	movs	r0, #31
 8000bf2:	f001 f972 	bl	8001eda <HAL_NVIC_EnableIRQ>
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_ADC1_Init+0x74>)
 8000c0e:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <MX_ADC1_Init+0x78>)
 8000c10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_ADC1_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_ADC1_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_ADC1_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_ADC1_Init+0x74>)
 8000c26:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_ADC1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_ADC1_Init+0x74>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <MX_ADC1_Init+0x74>)
 8000c3a:	f000 fe51 	bl	80018e0 <HAL_ADC_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c44:	f000 f9d2 	bl	8000fec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_ADC1_Init+0x74>)
 8000c5a:	f000 ff19 	bl	8001a90 <HAL_ADC_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c64:	f000 f9c2 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000528 	.word	0x20000528
 8000c74:	40012400 	.word	0x40012400

08000c78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c7e:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <MX_I2C1_Init+0x54>)
 8000c80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MX_I2C1_Init+0x58>)
 8000c86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000cb6:	f001 fc7f 	bl	80025b8 <HAL_I2C_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cc0:	f000 f994 	bl	8000fec <Error_Handler>
  //dude, the code generation is evil... doesn't help you all the way!!! Came a gutsa so many times....


  /* USER CODE END I2C1_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000438 	.word	0x20000438
 8000ccc:	40005400 	.word	0x40005400
 8000cd0:	00061a80 	.word	0x00061a80

08000cd4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000cda:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <MX_I2C2_Init+0x54>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000ce0:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <MX_I2C2_Init+0x58>)
 8000ce2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000cf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cf6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000d12:	f001 fc51 	bl	80025b8 <HAL_I2C_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d1c:	f000 f966 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	2000048c 	.word	0x2000048c
 8000d28:	40005800 	.word	0x40005800
 8000d2c:	00061a80 	.word	0x00061a80

08000d30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d36:	f107 0308 	add.w	r3, r7, #8
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d44:	463b      	mov	r3, r7
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d4c:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <MX_TIM2_Init+0xb4>)
 8000d4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000d54:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <MX_TIM2_Init+0xb4>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <MX_TIM2_Init+0xb4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2047;
 8000d60:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <MX_TIM2_Init+0xb4>)
 8000d62:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000d66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <MX_TIM2_Init+0xb4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <MX_TIM2_Init+0xb4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d74:	481b      	ldr	r0, [pc, #108]	; (8000de4 <MX_TIM2_Init+0xb4>)
 8000d76:	f005 f931 	bl	8005fdc <HAL_TIM_Base_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d80:	f000 f934 	bl	8000fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4814      	ldr	r0, [pc, #80]	; (8000de4 <MX_TIM2_Init+0xb4>)
 8000d92:	f005 fa7a 	bl	800628a <HAL_TIM_ConfigClockSource>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d9c:	f000 f926 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da0:	2300      	movs	r3, #0
 8000da2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	4619      	mov	r1, r3
 8000dac:	480d      	ldr	r0, [pc, #52]	; (8000de4 <MX_TIM2_Init+0xb4>)
 8000dae:	f005 fc49 	bl	8006644 <HAL_TIMEx_MasterConfigSynchronization>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000db8:	f000 f918 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIM2->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the BAM Interrupt is triggered
 8000dbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dc6:	f023 0302 	bic.w	r3, r3, #2
 8000dca:	6013      	str	r3, [r2, #0]
  TIM2->DIER |= 1; //Update interrupt enable
 8000dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	60d3      	str	r3, [r2, #12]

  /* USER CODE END TIM2_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000558 	.word	0x20000558

08000de8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e04:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <MX_TIM3_Init+0xac>)
 8000e06:	4a24      	ldr	r2, [pc, #144]	; (8000e98 <MX_TIM3_Init+0xb0>)
 8000e08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e0a:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <MX_TIM3_Init+0xac>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e10:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <MX_TIM3_Init+0xac>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16383;
 8000e16:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <MX_TIM3_Init+0xac>)
 8000e18:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000e1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_TIM3_Init+0xac>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_TIM3_Init+0xac>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e2a:	481a      	ldr	r0, [pc, #104]	; (8000e94 <MX_TIM3_Init+0xac>)
 8000e2c:	f005 f8d6 	bl	8005fdc <HAL_TIM_Base_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e36:	f000 f8d9 	bl	8000fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	4619      	mov	r1, r3
 8000e46:	4813      	ldr	r0, [pc, #76]	; (8000e94 <MX_TIM3_Init+0xac>)
 8000e48:	f005 fa1f 	bl	800628a <HAL_TIM_ConfigClockSource>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e52:	f000 f8cb 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4619      	mov	r1, r3
 8000e62:	480c      	ldr	r0, [pc, #48]	; (8000e94 <MX_TIM3_Init+0xac>)
 8000e64:	f005 fbee 	bl	8006644 <HAL_TIMEx_MasterConfigSynchronization>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e6e:	f000 f8bd 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the Encoder Scan Interrupt is triggered
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_TIM3_Init+0xb0>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <MX_TIM3_Init+0xb0>)
 8000e78:	f023 0302 	bic.w	r3, r3, #2
 8000e7c:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= 1; //Update interrupt enable
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_TIM3_Init+0xb0>)
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <MX_TIM3_Init+0xb0>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM3_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200004e0 	.word	0x200004e0
 8000e98:	40000400 	.word	0x40000400

08000e9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <MX_DMA_Init+0x28>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <MX_DMA_Init+0x28>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6153      	str	r3, [r2, #20]
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <MX_DMA_Init+0x28>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000edc:	4b3f      	ldr	r3, [pc, #252]	; (8000fdc <MX_GPIO_Init+0x114>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a3e      	ldr	r2, [pc, #248]	; (8000fdc <MX_GPIO_Init+0x114>)
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b3c      	ldr	r3, [pc, #240]	; (8000fdc <MX_GPIO_Init+0x114>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0310 	and.w	r3, r3, #16
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef4:	4b39      	ldr	r3, [pc, #228]	; (8000fdc <MX_GPIO_Init+0x114>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a38      	ldr	r2, [pc, #224]	; (8000fdc <MX_GPIO_Init+0x114>)
 8000efa:	f043 0320 	orr.w	r3, r3, #32
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <MX_GPIO_Init+0x114>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0320 	and.w	r3, r3, #32
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b33      	ldr	r3, [pc, #204]	; (8000fdc <MX_GPIO_Init+0x114>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a32      	ldr	r2, [pc, #200]	; (8000fdc <MX_GPIO_Init+0x114>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <MX_GPIO_Init+0x114>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f24:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <MX_GPIO_Init+0x114>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a2c      	ldr	r2, [pc, #176]	; (8000fdc <MX_GPIO_Init+0x114>)
 8000f2a:	f043 0308 	orr.w	r3, r3, #8
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <MX_GPIO_Init+0x114>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0308 	and.w	r3, r3, #8
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000f42:	4827      	ldr	r0, [pc, #156]	; (8000fe0 <MX_GPIO_Init+0x118>)
 8000f44:	f001 fb20 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f248 11c0 	movw	r1, #33216	; 0x81c0
 8000f4e:	4825      	ldr	r0, [pc, #148]	; (8000fe4 <MX_GPIO_Init+0x11c>)
 8000f50:	f001 fb1a 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f5a:	4823      	ldr	r0, [pc, #140]	; (8000fe8 <MX_GPIO_Init+0x120>)
 8000f5c:	f001 fb14 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f60:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	4619      	mov	r1, r3
 8000f78:	4819      	ldr	r0, [pc, #100]	; (8000fe0 <MX_GPIO_Init+0x118>)
 8000f7a:	f001 f9ab 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
 8000f7e:	f248 13c0 	movw	r3, #33216	; 0x81c0
 8000f82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	4619      	mov	r1, r3
 8000f96:	4813      	ldr	r0, [pc, #76]	; (8000fe4 <MX_GPIO_Init+0x11c>)
 8000f98:	f001 f99c 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f9c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <MX_GPIO_Init+0x120>)
 8000fb6:	f001 f98d 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_GPIO_Init+0x11c>)
 8000fd0:	f001 f980 	bl	80022d4 <HAL_GPIO_Init>

}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40011000 	.word	0x40011000
 8000fe4:	40010800 	.word	0x40010800
 8000fe8:	40010c00 	.word	0x40010c00

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <Error_Handler+0x6>

08000ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_MspInit+0x5c>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	4a14      	ldr	r2, [pc, #80]	; (8001050 <HAL_MspInit+0x5c>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6193      	str	r3, [r2, #24]
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_MspInit+0x5c>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_MspInit+0x5c>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_MspInit+0x5c>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	61d3      	str	r3, [r2, #28]
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_MspInit+0x5c>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_MspInit+0x60>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <HAL_MspInit+0x60>)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	40021000 	.word	0x40021000
 8001054:	40010000 	.word	0x40010000

08001058 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <HAL_ADC_MspInit+0x6c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d121      	bne.n	80010bc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HAL_ADC_MspInit+0x70>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <HAL_ADC_MspInit+0x70>)
 800107e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <HAL_ADC_MspInit+0x70>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_ADC_MspInit+0x70>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <HAL_ADC_MspInit+0x70>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_ADC_MspInit+0x70>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80010a8:	230f      	movs	r3, #15
 80010aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ac:	2303      	movs	r3, #3
 80010ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4619      	mov	r1, r3
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <HAL_ADC_MspInit+0x74>)
 80010b8:	f001 f90c 	bl	80022d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010bc:	bf00      	nop
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40012400 	.word	0x40012400
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40010800 	.word	0x40010800

080010d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	; 0x30
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a45      	ldr	r2, [pc, #276]	; (8001200 <HAL_I2C_MspInit+0x130>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d159      	bne.n	80011a4 <HAL_I2C_MspInit+0xd4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f0:	4b44      	ldr	r3, [pc, #272]	; (8001204 <HAL_I2C_MspInit+0x134>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a43      	ldr	r2, [pc, #268]	; (8001204 <HAL_I2C_MspInit+0x134>)
 80010f6:	f043 0308 	orr.w	r3, r3, #8
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b41      	ldr	r3, [pc, #260]	; (8001204 <HAL_I2C_MspInit+0x134>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	61bb      	str	r3, [r7, #24]
 8001106:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001108:	f44f 7340 	mov.w	r3, #768	; 0x300
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110e:	2312      	movs	r3, #18
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	483a      	ldr	r0, [pc, #232]	; (8001208 <HAL_I2C_MspInit+0x138>)
 800111e:	f001 f8d9 	bl	80022d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001122:	4b3a      	ldr	r3, [pc, #232]	; (800120c <HAL_I2C_MspInit+0x13c>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001132:	f043 0302 	orr.w	r3, r3, #2
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001138:	4a34      	ldr	r2, [pc, #208]	; (800120c <HAL_I2C_MspInit+0x13c>)
 800113a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800113e:	4b31      	ldr	r3, [pc, #196]	; (8001204 <HAL_I2C_MspInit+0x134>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	4a30      	ldr	r2, [pc, #192]	; (8001204 <HAL_I2C_MspInit+0x134>)
 8001144:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001148:	61d3      	str	r3, [r2, #28]
 800114a:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <HAL_I2C_MspInit+0x134>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001156:	4b2e      	ldr	r3, [pc, #184]	; (8001210 <HAL_I2C_MspInit+0x140>)
 8001158:	4a2e      	ldr	r2, [pc, #184]	; (8001214 <HAL_I2C_MspInit+0x144>)
 800115a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800115c:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <HAL_I2C_MspInit+0x140>)
 800115e:	2210      	movs	r2, #16
 8001160:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001162:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <HAL_I2C_MspInit+0x140>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001168:	4b29      	ldr	r3, [pc, #164]	; (8001210 <HAL_I2C_MspInit+0x140>)
 800116a:	2280      	movs	r2, #128	; 0x80
 800116c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800116e:	4b28      	ldr	r3, [pc, #160]	; (8001210 <HAL_I2C_MspInit+0x140>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001174:	4b26      	ldr	r3, [pc, #152]	; (8001210 <HAL_I2C_MspInit+0x140>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800117a:	4b25      	ldr	r3, [pc, #148]	; (8001210 <HAL_I2C_MspInit+0x140>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001180:	4b23      	ldr	r3, [pc, #140]	; (8001210 <HAL_I2C_MspInit+0x140>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001186:	4822      	ldr	r0, [pc, #136]	; (8001210 <HAL_I2C_MspInit+0x140>)
 8001188:	f000 fec2 	bl	8001f10 <HAL_DMA_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 8001192:	f7ff ff2b 	bl	8000fec <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a1d      	ldr	r2, [pc, #116]	; (8001210 <HAL_I2C_MspInit+0x140>)
 800119a:	635a      	str	r2, [r3, #52]	; 0x34
 800119c:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <HAL_I2C_MspInit+0x140>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011a2:	e029      	b.n	80011f8 <HAL_I2C_MspInit+0x128>
  else if(hi2c->Instance==I2C2)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <HAL_I2C_MspInit+0x148>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d124      	bne.n	80011f8 <HAL_I2C_MspInit+0x128>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_I2C_MspInit+0x134>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	4a14      	ldr	r2, [pc, #80]	; (8001204 <HAL_I2C_MspInit+0x134>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	6193      	str	r3, [r2, #24]
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_I2C_MspInit+0x134>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011cc:	2312      	movs	r3, #18
 80011ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	480b      	ldr	r0, [pc, #44]	; (8001208 <HAL_I2C_MspInit+0x138>)
 80011dc:	f001 f87a 	bl	80022d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_I2C_MspInit+0x134>)
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_I2C_MspInit+0x134>)
 80011e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011ea:	61d3      	str	r3, [r2, #28]
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_I2C_MspInit+0x134>)
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	bf00      	nop
 80011fa:	3730      	adds	r7, #48	; 0x30
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40005400 	.word	0x40005400
 8001204:	40021000 	.word	0x40021000
 8001208:	40010c00 	.word	0x40010c00
 800120c:	40010000 	.word	0x40010000
 8001210:	200003f4 	.word	0x200003f4
 8001214:	4002006c 	.word	0x4002006c
 8001218:	40005800 	.word	0x40005800

0800121c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800122c:	d10c      	bne.n	8001248 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_TIM_Base_MspInit+0x58>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a10      	ldr	r2, [pc, #64]	; (8001274 <HAL_TIM_Base_MspInit+0x58>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <HAL_TIM_Base_MspInit+0x58>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001246:	e010      	b.n	800126a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <HAL_TIM_Base_MspInit+0x5c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d10b      	bne.n	800126a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_TIM_Base_MspInit+0x58>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	4a07      	ldr	r2, [pc, #28]	; (8001274 <HAL_TIM_Base_MspInit+0x58>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	61d3      	str	r3, [r2, #28]
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_TIM_Base_MspInit+0x58>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	40021000 	.word	0x40021000
 8001278:	40000400 	.word	0x40000400

0800127c <LEDMatrixNextFrame>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LEDMatrixNextFrame(uint8_t addr){
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]

	blocked = 1; //avoid issues
 8001286:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <LEDMatrixNextFrame+0xc8>)
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]

	DMA1_Channel6->CCR &= ~1; //deactivate DMA
 800128c:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <LEDMatrixNextFrame+0xcc>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a2d      	ldr	r2, [pc, #180]	; (8001348 <LEDMatrixNextFrame+0xcc>)
 8001292:	f023 0301 	bic.w	r3, r3, #1
 8001296:	6013      	str	r3, [r2, #0]
	DMA1_Channel6->CMAR = (uint32_t)LEDMatrixBuffer;
 8001298:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <LEDMatrixNextFrame+0xcc>)
 800129a:	4a2c      	ldr	r2, [pc, #176]	; (800134c <LEDMatrixNextFrame+0xd0>)
 800129c:	60da      	str	r2, [r3, #12]
	DMA1_Channel6->CPAR = (uint32_t)&(I2C1->DR);
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <LEDMatrixNextFrame+0xcc>)
 80012a0:	4a2b      	ldr	r2, [pc, #172]	; (8001350 <LEDMatrixNextFrame+0xd4>)
 80012a2:	609a      	str	r2, [r3, #8]
	DMA1_Channel6->CNDTR = 3;
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <LEDMatrixNextFrame+0xcc>)
 80012a6:	2203      	movs	r2, #3
 80012a8:	605a      	str	r2, [r3, #4]
	DMA1_Channel6->CCR |= 1;
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <LEDMatrixNextFrame+0xcc>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a26      	ldr	r2, [pc, #152]	; (8001348 <LEDMatrixNextFrame+0xcc>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	b672      	cpsid	i

	__disable_irq();
	TIM2->CR1 &= ~1; //disable BAM Driver
 80012b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c2:	f023 0301 	bic.w	r3, r3, #1
 80012c6:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <LEDMatrixNextFrame+0xd8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a21      	ldr	r2, [pc, #132]	; (8001354 <LEDMatrixNextFrame+0xd8>)
 80012ce:	f023 0301 	bic.w	r3, r3, #1
 80012d2:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= (1<<8); //send start condition
 80012d4:	4b20      	ldr	r3, [pc, #128]	; (8001358 <LEDMatrixNextFrame+0xdc>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a1f      	ldr	r2, [pc, #124]	; (8001358 <LEDMatrixNextFrame+0xdc>)
 80012da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012de:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 80012e0:	bf00      	nop
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <LEDMatrixNextFrame+0xdc>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f9      	beq.n	80012e2 <LEDMatrixNextFrame+0x66>
	I2C1->DR = LEDMatrix_Address; //address the MCP23017
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <LEDMatrixNextFrame+0xdc>)
 80012f0:	2248      	movs	r2, #72	; 0x48
 80012f2:	611a      	str	r2, [r3, #16]

	I2C1->CR2 |= (1<<11); //enable DMA Requests
 80012f4:	4b18      	ldr	r3, [pc, #96]	; (8001358 <LEDMatrixNextFrame+0xdc>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a17      	ldr	r2, [pc, #92]	; (8001358 <LEDMatrixNextFrame+0xdc>)
 80012fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012fe:	6053      	str	r3, [r2, #4]
	if(DMA1_Channel6->CCR&1) GPIOA->BSRR = 1<<6;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <LEDMatrixNextFrame+0xcc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <LEDMatrixNextFrame+0x98>
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <LEDMatrixNextFrame+0xe0>)
 800130e:	2240      	movs	r2, #64	; 0x40
 8001310:	611a      	str	r2, [r3, #16]
 8001312:	e002      	b.n	800131a <LEDMatrixNextFrame+0x9e>
	else GPIOA->BRR = 1<<6;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <LEDMatrixNextFrame+0xe0>)
 8001316:	2240      	movs	r2, #64	; 0x40
 8001318:	615a      	str	r2, [r3, #20]
	TIM2->CR1 |= 1; //enable BAM Driver
 800131a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <LEDMatrixNextFrame+0xd8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a09      	ldr	r2, [pc, #36]	; (8001354 <LEDMatrixNextFrame+0xd8>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001336:	b662      	cpsie	i
	__enable_irq();

}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	200001b1 	.word	0x200001b1
 8001348:	4002006c 	.word	0x4002006c
 800134c:	200005a0 	.word	0x200005a0
 8001350:	40005410 	.word	0x40005410
 8001354:	40000400 	.word	0x40000400
 8001358:	40005400 	.word	0x40005400
 800135c:	40010800 	.word	0x40010800

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler+0x4>

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a6:	f000 fa7f 	bl	80018a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	//GPIOA->BRR = 1<<6;



  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <DMA1_Channel6_IRQHandler+0x10>)
 80013b6:	f000 fe7b 	bl	80020b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  //GPIOA->BSRR = 1<<6;
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200003f4 	.word	0x200003f4

080013c4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80013ca:	f002 fef6 	bl	80041ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20001244 	.word	0x20001244

080013d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//GPIOA->BSRR = 1<<6;
	if(BAMIndex == 0){
 80013dc:	4b45      	ldr	r3, [pc, #276]	; (80014f4 <TIM2_IRQHandler+0x11c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d102      	bne.n	80013ec <TIM2_IRQHandler+0x14>
		blocked = 1; //block to protect the time sensitive LSB's, otherwise it gets pretty flicker-ry
 80013e6:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <TIM2_IRQHandler+0x120>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]

	}

	if(brightness[0] & (1 << BAMIndex))	GPIOB->BSRR = (1<<12);
 80013ec:	4b43      	ldr	r3, [pc, #268]	; (80014fc <TIM2_IRQHandler+0x124>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b3f      	ldr	r3, [pc, #252]	; (80014f4 <TIM2_IRQHandler+0x11c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	fa42 f303 	asr.w	r3, r2, r3
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d004      	beq.n	8001410 <TIM2_IRQHandler+0x38>
 8001406:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <TIM2_IRQHandler+0x128>)
 8001408:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800140c:	611a      	str	r2, [r3, #16]
 800140e:	e003      	b.n	8001418 <TIM2_IRQHandler+0x40>
	else GPIOB->BRR = (1<<12);
 8001410:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <TIM2_IRQHandler+0x128>)
 8001412:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001416:	615a      	str	r2, [r3, #20]
	if(brightness[1] & (1 << BAMIndex))	GPIOB->BSRR = (1<<13);
 8001418:	4b38      	ldr	r3, [pc, #224]	; (80014fc <TIM2_IRQHandler+0x124>)
 800141a:	785b      	ldrb	r3, [r3, #1]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	461a      	mov	r2, r3
 8001420:	4b34      	ldr	r3, [pc, #208]	; (80014f4 <TIM2_IRQHandler+0x11c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	fa42 f303 	asr.w	r3, r2, r3
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d004      	beq.n	800143c <TIM2_IRQHandler+0x64>
 8001432:	4b33      	ldr	r3, [pc, #204]	; (8001500 <TIM2_IRQHandler+0x128>)
 8001434:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001438:	611a      	str	r2, [r3, #16]
 800143a:	e003      	b.n	8001444 <TIM2_IRQHandler+0x6c>
	else GPIOB->BRR = (1<<13);
 800143c:	4b30      	ldr	r3, [pc, #192]	; (8001500 <TIM2_IRQHandler+0x128>)
 800143e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001442:	615a      	str	r2, [r3, #20]
	if(brightness[2] & (1 << BAMIndex))	GPIOB->BSRR = (1<<14);
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <TIM2_IRQHandler+0x124>)
 8001446:	789b      	ldrb	r3, [r3, #2]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <TIM2_IRQHandler+0x11c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	fa42 f303 	asr.w	r3, r2, r3
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d004      	beq.n	8001468 <TIM2_IRQHandler+0x90>
 800145e:	4b28      	ldr	r3, [pc, #160]	; (8001500 <TIM2_IRQHandler+0x128>)
 8001460:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001464:	611a      	str	r2, [r3, #16]
 8001466:	e003      	b.n	8001470 <TIM2_IRQHandler+0x98>
	else GPIOB->BRR = (1<<14);
 8001468:	4b25      	ldr	r3, [pc, #148]	; (8001500 <TIM2_IRQHandler+0x128>)
 800146a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800146e:	615a      	str	r2, [r3, #20]
	if(brightness[3] & (1 << BAMIndex))	GPIOB->BSRR = (1<<15);
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <TIM2_IRQHandler+0x124>)
 8001472:	78db      	ldrb	r3, [r3, #3]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	461a      	mov	r2, r3
 8001478:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <TIM2_IRQHandler+0x11c>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	fa42 f303 	asr.w	r3, r2, r3
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d004      	beq.n	8001494 <TIM2_IRQHandler+0xbc>
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <TIM2_IRQHandler+0x128>)
 800148c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001490:	611a      	str	r2, [r3, #16]
 8001492:	e003      	b.n	800149c <TIM2_IRQHandler+0xc4>
	else GPIOB->BRR = (1<<15);
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <TIM2_IRQHandler+0x128>)
 8001496:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800149a:	615a      	str	r2, [r3, #20]


*/

	//FIXME this might potentially cause issues, as it blocks for half of the time
	if(BAMIndex == 3){
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <TIM2_IRQHandler+0x11c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d102      	bne.n	80014ac <TIM2_IRQHandler+0xd4>
		blocked = 0; //Time sensitive LSB's are done, unblock, value of 3 or less gives visible flicker
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <TIM2_IRQHandler+0x120>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]

	}

	if(BAMIndex == 7){ //We've passed one BAM cycle
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <TIM2_IRQHandler+0x11c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b07      	cmp	r3, #7
 80014b4:	d10a      	bne.n	80014cc <TIM2_IRQHandler+0xf4>


		BAMIndex = 0;
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <TIM2_IRQHandler+0x11c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = 1;
 80014bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014c0:	2201      	movs	r2, #1
 80014c2:	629a      	str	r2, [r3, #40]	; 0x28
		LEDMatrixNextFrame(LEDMatrix_Address);
 80014c4:	2048      	movs	r0, #72	; 0x48
 80014c6:	f7ff fed9 	bl	800127c <LEDMatrixNextFrame>
 80014ca:	e00d      	b.n	80014e8 <TIM2_IRQHandler+0x110>



	}
	else{
		BAMIndex++;
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <TIM2_IRQHandler+0x11c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	3301      	adds	r3, #1
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <TIM2_IRQHandler+0x11c>)
 80014d8:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = (volatile)(TIM2->PSC << 1); //set next write to occupy twice the time of this current write.
 80014da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	6293      	str	r3, [r2, #40]	; 0x28
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014e8:	4806      	ldr	r0, [pc, #24]	; (8001504 <TIM2_IRQHandler+0x12c>)
 80014ea:	f004 fdc6 	bl	800607a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200001b0 	.word	0x200001b0
 80014f8:	200001b1 	.word	0x200001b1
 80014fc:	20000000 	.word	0x20000000
 8001500:	40010c00 	.word	0x40010c00
 8001504:	20000558 	.word	0x20000558

08001508 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	GPIOA->BSRR = 1<<6;
 800150e:	4b49      	ldr	r3, [pc, #292]	; (8001634 <TIM3_IRQHandler+0x12c>)
 8001510:	2240      	movs	r2, #64	; 0x40
 8001512:	611a      	str	r2, [r3, #16]
	uint8_t currentReadoff = ((((GPIOA->IDR)>>9) & 1) << 1) | (((GPIOA->IDR)>>10) & 1); //read current encoder state
 8001514:	4b47      	ldr	r3, [pc, #284]	; (8001634 <TIM3_IRQHandler+0x12c>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	0a5b      	lsrs	r3, r3, #9
 800151a:	b2db      	uxtb	r3, r3
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4b43      	ldr	r3, [pc, #268]	; (8001634 <TIM3_IRQHandler+0x12c>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	0a9b      	lsrs	r3, r3, #10
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	4313      	orrs	r3, r2
 8001536:	71fb      	strb	r3, [r7, #7]
	uint8_t index = (lastEncoder[currentEncoder]<<2) | currentReadoff;
 8001538:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <TIM3_IRQHandler+0x130>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	461a      	mov	r2, r3
 8001540:	4b3e      	ldr	r3, [pc, #248]	; (800163c <TIM3_IRQHandler+0x134>)
 8001542:	5c9b      	ldrb	r3, [r3, r2]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	b25a      	sxtb	r2, r3
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	4313      	orrs	r3, r2
 8001550:	b25b      	sxtb	r3, r3
 8001552:	71bb      	strb	r3, [r7, #6]
	encoderValues[currentEncoder] += encoderLUT[index];
 8001554:	79bb      	ldrb	r3, [r7, #6]
 8001556:	4a3a      	ldr	r2, [pc, #232]	; (8001640 <TIM3_IRQHandler+0x138>)
 8001558:	5cd3      	ldrb	r3, [r2, r3]
 800155a:	b259      	sxtb	r1, r3
 800155c:	4b36      	ldr	r3, [pc, #216]	; (8001638 <TIM3_IRQHandler+0x130>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4610      	mov	r0, r2
 8001564:	4b37      	ldr	r3, [pc, #220]	; (8001644 <TIM3_IRQHandler+0x13c>)
 8001566:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800156a:	4608      	mov	r0, r1
 800156c:	4611      	mov	r1, r2
 800156e:	4403      	add	r3, r0
 8001570:	4a34      	ldr	r2, [pc, #208]	; (8001644 <TIM3_IRQHandler+0x13c>)
 8001572:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//constrain encoderValues
	if(encoderValues[currentEncoder] > 255) encoderValues[currentEncoder] = 255;
 8001576:	4b30      	ldr	r3, [pc, #192]	; (8001638 <TIM3_IRQHandler+0x130>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <TIM3_IRQHandler+0x13c>)
 8001580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001584:	2bff      	cmp	r3, #255	; 0xff
 8001586:	dd07      	ble.n	8001598 <TIM3_IRQHandler+0x90>
 8001588:	4b2b      	ldr	r3, [pc, #172]	; (8001638 <TIM3_IRQHandler+0x130>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	4619      	mov	r1, r3
 8001590:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <TIM3_IRQHandler+0x13c>)
 8001592:	22ff      	movs	r2, #255	; 0xff
 8001594:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	if(encoderValues[currentEncoder] < 0) encoderValues[currentEncoder] = 0;
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <TIM3_IRQHandler+0x130>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	461a      	mov	r2, r3
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <TIM3_IRQHandler+0x13c>)
 80015a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	da07      	bge.n	80015ba <TIM3_IRQHandler+0xb2>
 80015aa:	4b23      	ldr	r3, [pc, #140]	; (8001638 <TIM3_IRQHandler+0x130>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	4619      	mov	r1, r3
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <TIM3_IRQHandler+0x13c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	lastEncoder[currentEncoder] = currentReadoff;
 80015ba:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <TIM3_IRQHandler+0x130>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	4619      	mov	r1, r3
 80015c2:	4a1e      	ldr	r2, [pc, #120]	; (800163c <TIM3_IRQHandler+0x134>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	5453      	strb	r3, [r2, r1]
	//uint8_t buffer[256];
	//sprintf(buffer, "currentReadoff %d index %d encoderValue %d\r\n", currentReadoff, index, encoderValues[0]);
	//CDC_Transmit_FS(buffer, sizeof(buffer));
	//}

	if(currentEncoder == 4) currentEncoder = 0;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <TIM3_IRQHandler+0x130>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d103      	bne.n	80015da <TIM3_IRQHandler+0xd2>
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <TIM3_IRQHandler+0x130>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	e006      	b.n	80015e8 <TIM3_IRQHandler+0xe0>
	else currentEncoder++;
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <TIM3_IRQHandler+0x130>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	3301      	adds	r3, #1
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <TIM3_IRQHandler+0x130>)
 80015e6:	701a      	strb	r2, [r3, #0]

	//select the nth encoder here to allow the mux time to settle
	GPIOC->BRR = (3<<13); //clear GPIO Pins
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <TIM3_IRQHandler+0x140>)
 80015ea:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80015ee:	615a      	str	r2, [r3, #20]
	GPIOC->BSRR = ((currentEncoder&3)<<13);
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <TIM3_IRQHandler+0x130>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	035b      	lsls	r3, r3, #13
 80015f8:	4a13      	ldr	r2, [pc, #76]	; (8001648 <TIM3_IRQHandler+0x140>)
 80015fa:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80015fe:	6113      	str	r3, [r2, #16]
	GPIOA->BRR = (1<<15);
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <TIM3_IRQHandler+0x12c>)
 8001602:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001606:	615a      	str	r2, [r3, #20]
	if(currentEncoder&4) GPIOA->BSRR = (1<<15); //BLOODY SOLDER DAG!!! Shorted out the pins giving the result in DS14
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <TIM3_IRQHandler+0x130>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <TIM3_IRQHandler+0x116>
 8001616:	4b07      	ldr	r3, [pc, #28]	; (8001634 <TIM3_IRQHandler+0x12c>)
 8001618:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800161c:	611a      	str	r2, [r3, #16]

	GPIOA->BRR = 1<<6;
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <TIM3_IRQHandler+0x12c>)
 8001620:	2240      	movs	r2, #64	; 0x40
 8001622:	615a      	str	r2, [r3, #20]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001624:	4809      	ldr	r0, [pc, #36]	; (800164c <TIM3_IRQHandler+0x144>)
 8001626:	f004 fd28 	bl	800607a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40010800 	.word	0x40010800
 8001638:	200001b2 	.word	0x200001b2
 800163c:	200001b4 	.word	0x200001b4
 8001640:	20000004 	.word	0x20000004
 8001644:	200001bc 	.word	0x200001bc
 8001648:	40011000 	.word	0x40011000
 800164c:	200004e0 	.word	0x200004e0

08001650 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0

	//note: time to transfer 4 packets at this speed is about 382 us



	GPIOA->BSRR = 1<<7;
 8001654:	4b53      	ldr	r3, [pc, #332]	; (80017a4 <I2C1_EV_IRQHandler+0x154>)
 8001656:	2280      	movs	r2, #128	; 0x80
 8001658:	611a      	str	r2, [r3, #16]
	if(I2C1->SR1 & (1<<2)){ //BTF is set
 800165a:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8095 	beq.w	8001792 <I2C1_EV_IRQHandler+0x142>

		//might have to move this to the DMA isr
		I2C1->CR2 &= ~(1<<11); //disable I2C1 DMA requesting
 8001668:	4b4f      	ldr	r3, [pc, #316]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	4a4e      	ldr	r2, [pc, #312]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 800166e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001672:	6053      	str	r3, [r2, #4]

		//reconfigure the DMA
		if(DMA1->ISR & (1<<21)){ //channel 6 transfer complete
 8001674:	4b4d      	ldr	r3, [pc, #308]	; (80017ac <I2C1_EV_IRQHandler+0x15c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8088 	beq.w	8001792 <I2C1_EV_IRQHandler+0x142>


			DMA1_Channel6->CCR &= ~1; //disable DMA1 Channel 6 for reconfiguring
 8001682:	4b4b      	ldr	r3, [pc, #300]	; (80017b0 <I2C1_EV_IRQHandler+0x160>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a4a      	ldr	r2, [pc, #296]	; (80017b0 <I2C1_EV_IRQHandler+0x160>)
 8001688:	f023 0301 	bic.w	r3, r3, #1
 800168c:	6013      	str	r3, [r2, #0]
			if(currentLEDRow == 3) currentLEDRow = 0;
 800168e:	4b49      	ldr	r3, [pc, #292]	; (80017b4 <I2C1_EV_IRQHandler+0x164>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b03      	cmp	r3, #3
 8001696:	d103      	bne.n	80016a0 <I2C1_EV_IRQHandler+0x50>
 8001698:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <I2C1_EV_IRQHandler+0x164>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e006      	b.n	80016ae <I2C1_EV_IRQHandler+0x5e>
			else currentLEDRow++;
 80016a0:	4b44      	ldr	r3, [pc, #272]	; (80017b4 <I2C1_EV_IRQHandler+0x164>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	3301      	adds	r3, #1
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b42      	ldr	r3, [pc, #264]	; (80017b4 <I2C1_EV_IRQHandler+0x164>)
 80016ac:	701a      	strb	r2, [r3, #0]
			DMA1_Channel6->CNDTR = 3; //reload 3 bytes to transfer
 80016ae:	4b40      	ldr	r3, [pc, #256]	; (80017b0 <I2C1_EV_IRQHandler+0x160>)
 80016b0:	2203      	movs	r2, #3
 80016b2:	605a      	str	r2, [r3, #4]
			DMA1_Channel6->CMAR = (uint32_t)&(LEDMatrixBuffer[currentLEDRow*3]); //set next target
 80016b4:	4b3f      	ldr	r3, [pc, #252]	; (80017b4 <I2C1_EV_IRQHandler+0x164>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	4613      	mov	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4413      	add	r3, r2
 80016c2:	4a3d      	ldr	r2, [pc, #244]	; (80017b8 <I2C1_EV_IRQHandler+0x168>)
 80016c4:	441a      	add	r2, r3
 80016c6:	4b3a      	ldr	r3, [pc, #232]	; (80017b0 <I2C1_EV_IRQHandler+0x160>)
 80016c8:	60da      	str	r2, [r3, #12]
			DMA1_Channel6->CCR |= 1; //enable DMA1 Channel 6
 80016ca:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <I2C1_EV_IRQHandler+0x160>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a38      	ldr	r2, [pc, #224]	; (80017b0 <I2C1_EV_IRQHandler+0x160>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6013      	str	r3, [r2, #0]



			if(currentLEDRow == 0){
 80016d6:	4b37      	ldr	r3, [pc, #220]	; (80017b4 <I2C1_EV_IRQHandler+0x164>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d142      	bne.n	8001766 <I2C1_EV_IRQHandler+0x116>

				I2C1->CR1 |= (1<<8); //we've refreshed the matrix once, proceed to clear the outputs
 80016e0:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a30      	ldr	r2, [pc, #192]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 80016e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ea:	6013      	str	r3, [r2, #0]
				while ((I2C1->SR1 & 1) == 0); //clear SB
 80016ec:	bf00      	nop
 80016ee:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f9      	beq.n	80016ee <I2C1_EV_IRQHandler+0x9e>
				I2C1->DR = LEDMatrix_Address; //address the MCP23017
 80016fa:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 80016fc:	2248      	movs	r2, #72	; 0x48
 80016fe:	611a      	str	r2, [r3, #16]
				while ((I2C1->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8001700:	bf00      	nop
 8001702:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f9      	beq.n	8001702 <I2C1_EV_IRQHandler+0xb2>
				while ((I2C1->SR2 & (1<<2)) == 0); //read I2C SR2
 800170e:	bf00      	nop
 8001710:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f9      	beq.n	8001710 <I2C1_EV_IRQHandler+0xc0>
				while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800171c:	bf00      	nop
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f9      	beq.n	800171e <I2C1_EV_IRQHandler+0xce>
				I2C1->DR = 0x14; //write to IODIR_A
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 800172c:	2214      	movs	r2, #20
 800172e:	611a      	str	r2, [r3, #16]
				while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8001730:	bf00      	nop
 8001732:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f9      	beq.n	8001732 <I2C1_EV_IRQHandler+0xe2>
				I2C1->DR = 0xff; //all off
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 8001740:	22ff      	movs	r2, #255	; 0xff
 8001742:	611a      	str	r2, [r3, #16]
				while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8001744:	bf00      	nop
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f9      	beq.n	8001746 <I2C1_EV_IRQHandler+0xf6>
				//while ((I2C1->SR1 & (1<<2)) == 0); //make sure BTF is 1
				I2C1->CR1 |= (1<<9); //send stop condition
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 8001758:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175c:	6013      	str	r3, [r2, #0]
				blocked = 0; //give clearance for other blocking operations
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <I2C1_EV_IRQHandler+0x16c>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	e015      	b.n	8001792 <I2C1_EV_IRQHandler+0x142>
			}
			else{ //continue refreshing the next row of the matrix

				I2C1->CR1 |= (1<<8); //send restart condition
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001770:	6013      	str	r3, [r2, #0]
				while ((I2C1->SR1 & 1) == 0); //clear SB
 8001772:	bf00      	nop
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f9      	beq.n	8001774 <I2C1_EV_IRQHandler+0x124>
				I2C1->DR = LEDMatrix_Address; //address the MCP23017
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 8001782:	2248      	movs	r2, #72	; 0x48
 8001784:	611a      	str	r2, [r3, #16]


				I2C1->CR2 |= (1<<11); //enable DMA Requests
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <I2C1_EV_IRQHandler+0x158>)
 800178c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001790:	6053      	str	r3, [r2, #4]
			}
		}
	}

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001792:	480b      	ldr	r0, [pc, #44]	; (80017c0 <I2C1_EV_IRQHandler+0x170>)
 8001794:	f001 f848 	bl	8002828 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */
  	GPIOA->BRR = 1<<7;
 8001798:	4b02      	ldr	r3, [pc, #8]	; (80017a4 <I2C1_EV_IRQHandler+0x154>)
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	615a      	str	r2, [r3, #20]
  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40010800 	.word	0x40010800
 80017a8:	40005400 	.word	0x40005400
 80017ac:	40020000 	.word	0x40020000
 80017b0:	4002006c 	.word	0x4002006c
 80017b4:	200001d2 	.word	0x200001d2
 80017b8:	200005a0 	.word	0x200005a0
 80017bc:	200001b1 	.word	0x200001b1
 80017c0:	20000438 	.word	0x20000438

080017c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <Reset_Handler>:
 80017d0:	2100      	movs	r1, #0
 80017d2:	e003      	b.n	80017dc <LoopCopyDataInit>

080017d4 <CopyDataInit>:
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <LoopFillZerobss+0x14>)
 80017d6:	585b      	ldr	r3, [r3, r1]
 80017d8:	5043      	str	r3, [r0, r1]
 80017da:	3104      	adds	r1, #4

080017dc <LoopCopyDataInit>:
 80017dc:	480a      	ldr	r0, [pc, #40]	; (8001808 <LoopFillZerobss+0x18>)
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <LoopFillZerobss+0x1c>)
 80017e0:	1842      	adds	r2, r0, r1
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d3f6      	bcc.n	80017d4 <CopyDataInit>
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <LoopFillZerobss+0x20>)
 80017e8:	e002      	b.n	80017f0 <LoopFillZerobss>

080017ea <FillZerobss>:
 80017ea:	2300      	movs	r3, #0
 80017ec:	f842 3b04 	str.w	r3, [r2], #4

080017f0 <LoopFillZerobss>:
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <LoopFillZerobss+0x24>)
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d3f9      	bcc.n	80017ea <FillZerobss>
 80017f6:	f7ff ffe5 	bl	80017c4 <SystemInit>
 80017fa:	f008 ffeb 	bl	800a7d4 <__libc_init_array>
 80017fe:	f7ff f8db 	bl	80009b8 <main>
 8001802:	4770      	bx	lr
 8001804:	0800a8c8 	.word	0x0800a8c8
 8001808:	20000000 	.word	0x20000000
 800180c:	20000194 	.word	0x20000194
 8001810:	20000194 	.word	0x20000194
 8001814:	20001530 	.word	0x20001530

08001818 <ADC1_2_IRQHandler>:
 8001818:	e7fe      	b.n	8001818 <ADC1_2_IRQHandler>
	...

0800181c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_Init+0x28>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a07      	ldr	r2, [pc, #28]	; (8001844 <HAL_Init+0x28>)
 8001826:	f043 0310 	orr.w	r3, r3, #16
 800182a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182c:	2003      	movs	r0, #3
 800182e:	f000 fb2d 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001832:	2000      	movs	r0, #0
 8001834:	f000 f808 	bl	8001848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001838:	f7ff fbdc 	bl	8000ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40022000 	.word	0x40022000

08001848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_InitTick+0x54>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_InitTick+0x58>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001862:	fbb2 f3f3 	udiv	r3, r2, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fb45 	bl	8001ef6 <HAL_SYSTICK_Config>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e00e      	b.n	8001894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b0f      	cmp	r3, #15
 800187a:	d80a      	bhi.n	8001892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187c:	2200      	movs	r2, #0
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f000 fb0d 	bl	8001ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <HAL_InitTick+0x5c>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e000      	b.n	8001894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000018 	.word	0x20000018
 80018a0:	20000020 	.word	0x20000020
 80018a4:	2000001c 	.word	0x2000001c

080018a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_IncTick+0x1c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_IncTick+0x20>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a03      	ldr	r2, [pc, #12]	; (80018c8 <HAL_IncTick+0x20>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	20000020 	.word	0x20000020
 80018c8:	200005ac 	.word	0x200005ac

080018cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b02      	ldr	r3, [pc, #8]	; (80018dc <HAL_GetTick+0x10>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	200005ac 	.word	0x200005ac

080018e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e0be      	b.n	8001a80 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	2b00      	cmp	r3, #0
 800190e:	d109      	bne.n	8001924 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fb9a 	bl	8001058 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 f9ab 	bl	8001c80 <ADC_ConversionStop_Disable>
 800192a:	4603      	mov	r3, r0
 800192c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 8099 	bne.w	8001a6e <HAL_ADC_Init+0x18e>
 800193c:	7dfb      	ldrb	r3, [r7, #23]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f040 8095 	bne.w	8001a6e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800194c:	f023 0302 	bic.w	r3, r3, #2
 8001950:	f043 0202 	orr.w	r2, r3, #2
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001960:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7b1b      	ldrb	r3, [r3, #12]
 8001966:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001968:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	4313      	orrs	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001978:	d003      	beq.n	8001982 <HAL_ADC_Init+0xa2>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d102      	bne.n	8001988 <HAL_ADC_Init+0xa8>
 8001982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001986:	e000      	b.n	800198a <HAL_ADC_Init+0xaa>
 8001988:	2300      	movs	r3, #0
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7d1b      	ldrb	r3, [r3, #20]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d119      	bne.n	80019cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7b1b      	ldrb	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d109      	bne.n	80019b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	035a      	lsls	r2, r3, #13
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	e00b      	b.n	80019cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	f043 0220 	orr.w	r2, r3, #32
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	f043 0201 	orr.w	r2, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	430a      	orrs	r2, r1
 80019de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <HAL_ADC_Init+0x1a8>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	68b9      	ldr	r1, [r7, #8]
 80019f0:	430b      	orrs	r3, r1
 80019f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019fc:	d003      	beq.n	8001a06 <HAL_ADC_Init+0x126>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d104      	bne.n	8001a10 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	051b      	lsls	r3, r3, #20
 8001a0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <HAL_ADC_Init+0x1ac>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d10b      	bne.n	8001a4c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	f023 0303 	bic.w	r3, r3, #3
 8001a42:	f043 0201 	orr.w	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a4a:	e018      	b.n	8001a7e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	f023 0312 	bic.w	r3, r3, #18
 8001a54:	f043 0210 	orr.w	r2, r3, #16
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	f043 0201 	orr.w	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a6c:	e007      	b.n	8001a7e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	f043 0210 	orr.w	r2, r3, #16
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	ffe1f7fd 	.word	0xffe1f7fd
 8001a8c:	ff1f0efe 	.word	0xff1f0efe

08001a90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x20>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e0dc      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1da>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b06      	cmp	r3, #6
 8001abe:	d81c      	bhi.n	8001afa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	3b05      	subs	r3, #5
 8001ad2:	221f      	movs	r2, #31
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	4019      	ands	r1, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3b05      	subs	r3, #5
 8001aec:	fa00 f203 	lsl.w	r2, r0, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	635a      	str	r2, [r3, #52]	; 0x34
 8001af8:	e03c      	b.n	8001b74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b0c      	cmp	r3, #12
 8001b00:	d81c      	bhi.n	8001b3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	3b23      	subs	r3, #35	; 0x23
 8001b14:	221f      	movs	r2, #31
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	4019      	ands	r1, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3b23      	subs	r3, #35	; 0x23
 8001b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	631a      	str	r2, [r3, #48]	; 0x30
 8001b3a:	e01b      	b.n	8001b74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3b41      	subs	r3, #65	; 0x41
 8001b4e:	221f      	movs	r2, #31
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4019      	ands	r1, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	3b41      	subs	r3, #65	; 0x41
 8001b68:	fa00 f203 	lsl.w	r2, r0, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b09      	cmp	r3, #9
 8001b7a:	d91c      	bls.n	8001bb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68d9      	ldr	r1, [r3, #12]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b1e      	subs	r3, #30
 8001b8e:	2207      	movs	r2, #7
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	4019      	ands	r1, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	6898      	ldr	r0, [r3, #8]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3b1e      	subs	r3, #30
 8001ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	e019      	b.n	8001bea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6919      	ldr	r1, [r3, #16]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	2207      	movs	r2, #7
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	4019      	ands	r1, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	6898      	ldr	r0, [r3, #8]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	fa00 f203 	lsl.w	r2, r0, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b10      	cmp	r3, #16
 8001bf0:	d003      	beq.n	8001bfa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bf6:	2b11      	cmp	r3, #17
 8001bf8:	d132      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a1d      	ldr	r2, [pc, #116]	; (8001c74 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d125      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d126      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c20:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b10      	cmp	r3, #16
 8001c28:	d11a      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <HAL_ADC_ConfigChannel+0x1ec>)
 8001c30:	fba2 2303 	umull	r2, r3, r2, r3
 8001c34:	0c9a      	lsrs	r2, r3, #18
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c40:	e002      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f9      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x1b2>
 8001c4e:	e007      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	f043 0220 	orr.w	r2, r3, #32
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	40012400 	.word	0x40012400
 8001c78:	20000018 	.word	0x20000018
 8001c7c:	431bde83 	.word	0x431bde83

08001c80 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d127      	bne.n	8001cea <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0201 	bic.w	r2, r2, #1
 8001ca8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001caa:	f7ff fe0f 	bl	80018cc <HAL_GetTick>
 8001cae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cb0:	e014      	b.n	8001cdc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cb2:	f7ff fe0b 	bl	80018cc <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d90d      	bls.n	8001cdc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	f043 0210 	orr.w	r2, r3, #16
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e007      	b.n	8001cec <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d0e3      	beq.n	8001cb2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <__NVIC_SetPriorityGrouping>:
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4906      	ldr	r1, [pc, #24]	; (8001d8c <__NVIC_EnableIRQ+0x34>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100

08001d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db0a      	blt.n	8001dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	; (8001ddc <__NVIC_SetPriority+0x4c>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	440b      	add	r3, r1
 8001db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db8:	e00a      	b.n	8001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4908      	ldr	r1, [pc, #32]	; (8001de0 <__NVIC_SetPriority+0x50>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	761a      	strb	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
         );
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff90 	bl	8001d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff2d 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff42 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff90 	bl	8001de4 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5f 	bl	8001d90 <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff35 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffa2 	bl	8001e48 <SysTick_Config>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e043      	b.n	8001fae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <HAL_DMA_Init+0xa8>)
 8001f2e:	4413      	add	r3, r2
 8001f30:	4a22      	ldr	r2, [pc, #136]	; (8001fbc <HAL_DMA_Init+0xac>)
 8001f32:	fba2 2303 	umull	r2, r3, r2, r3
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	009a      	lsls	r2, r3, #2
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <HAL_DMA_Init+0xb0>)
 8001f42:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	bffdfff8 	.word	0xbffdfff8
 8001fbc:	cccccccd 	.word	0xcccccccd
 8001fc0:	40020000 	.word	0x40020000

08001fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d005      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2204      	movs	r2, #4
 8001fde:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	e051      	b.n	800208a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 020e 	bic.w	r2, r2, #14
 8001ff4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0201 	bic.w	r2, r2, #1
 8002004:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a22      	ldr	r2, [pc, #136]	; (8002094 <HAL_DMA_Abort_IT+0xd0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d029      	beq.n	8002064 <HAL_DMA_Abort_IT+0xa0>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a20      	ldr	r2, [pc, #128]	; (8002098 <HAL_DMA_Abort_IT+0xd4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d022      	beq.n	8002060 <HAL_DMA_Abort_IT+0x9c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1f      	ldr	r2, [pc, #124]	; (800209c <HAL_DMA_Abort_IT+0xd8>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d01a      	beq.n	800205a <HAL_DMA_Abort_IT+0x96>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1d      	ldr	r2, [pc, #116]	; (80020a0 <HAL_DMA_Abort_IT+0xdc>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d012      	beq.n	8002054 <HAL_DMA_Abort_IT+0x90>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <HAL_DMA_Abort_IT+0xe0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00a      	beq.n	800204e <HAL_DMA_Abort_IT+0x8a>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1a      	ldr	r2, [pc, #104]	; (80020a8 <HAL_DMA_Abort_IT+0xe4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d102      	bne.n	8002048 <HAL_DMA_Abort_IT+0x84>
 8002042:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002046:	e00e      	b.n	8002066 <HAL_DMA_Abort_IT+0xa2>
 8002048:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800204c:	e00b      	b.n	8002066 <HAL_DMA_Abort_IT+0xa2>
 800204e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002052:	e008      	b.n	8002066 <HAL_DMA_Abort_IT+0xa2>
 8002054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002058:	e005      	b.n	8002066 <HAL_DMA_Abort_IT+0xa2>
 800205a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800205e:	e002      	b.n	8002066 <HAL_DMA_Abort_IT+0xa2>
 8002060:	2310      	movs	r3, #16
 8002062:	e000      	b.n	8002066 <HAL_DMA_Abort_IT+0xa2>
 8002064:	2301      	movs	r3, #1
 8002066:	4a11      	ldr	r2, [pc, #68]	; (80020ac <HAL_DMA_Abort_IT+0xe8>)
 8002068:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	4798      	blx	r3
    } 
  }
  return status;
 800208a:	7bfb      	ldrb	r3, [r7, #15]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020008 	.word	0x40020008
 8002098:	4002001c 	.word	0x4002001c
 800209c:	40020030 	.word	0x40020030
 80020a0:	40020044 	.word	0x40020044
 80020a4:	40020058 	.word	0x40020058
 80020a8:	4002006c 	.word	0x4002006c
 80020ac:	40020000 	.word	0x40020000

080020b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	2204      	movs	r2, #4
 80020ce:	409a      	lsls	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d04f      	beq.n	8002178 <HAL_DMA_IRQHandler+0xc8>
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d04a      	beq.n	8002178 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d107      	bne.n	8002100 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0204 	bic.w	r2, r2, #4
 80020fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a66      	ldr	r2, [pc, #408]	; (80022a0 <HAL_DMA_IRQHandler+0x1f0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d029      	beq.n	800215e <HAL_DMA_IRQHandler+0xae>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a65      	ldr	r2, [pc, #404]	; (80022a4 <HAL_DMA_IRQHandler+0x1f4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d022      	beq.n	800215a <HAL_DMA_IRQHandler+0xaa>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a63      	ldr	r2, [pc, #396]	; (80022a8 <HAL_DMA_IRQHandler+0x1f8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d01a      	beq.n	8002154 <HAL_DMA_IRQHandler+0xa4>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a62      	ldr	r2, [pc, #392]	; (80022ac <HAL_DMA_IRQHandler+0x1fc>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d012      	beq.n	800214e <HAL_DMA_IRQHandler+0x9e>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a60      	ldr	r2, [pc, #384]	; (80022b0 <HAL_DMA_IRQHandler+0x200>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00a      	beq.n	8002148 <HAL_DMA_IRQHandler+0x98>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a5f      	ldr	r2, [pc, #380]	; (80022b4 <HAL_DMA_IRQHandler+0x204>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d102      	bne.n	8002142 <HAL_DMA_IRQHandler+0x92>
 800213c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002140:	e00e      	b.n	8002160 <HAL_DMA_IRQHandler+0xb0>
 8002142:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002146:	e00b      	b.n	8002160 <HAL_DMA_IRQHandler+0xb0>
 8002148:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800214c:	e008      	b.n	8002160 <HAL_DMA_IRQHandler+0xb0>
 800214e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002152:	e005      	b.n	8002160 <HAL_DMA_IRQHandler+0xb0>
 8002154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002158:	e002      	b.n	8002160 <HAL_DMA_IRQHandler+0xb0>
 800215a:	2340      	movs	r3, #64	; 0x40
 800215c:	e000      	b.n	8002160 <HAL_DMA_IRQHandler+0xb0>
 800215e:	2304      	movs	r3, #4
 8002160:	4a55      	ldr	r2, [pc, #340]	; (80022b8 <HAL_DMA_IRQHandler+0x208>)
 8002162:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 8094 	beq.w	8002296 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002176:	e08e      	b.n	8002296 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	2202      	movs	r2, #2
 800217e:	409a      	lsls	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d056      	beq.n	8002236 <HAL_DMA_IRQHandler+0x186>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d051      	beq.n	8002236 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10b      	bne.n	80021b8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 020a 	bic.w	r2, r2, #10
 80021ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a38      	ldr	r2, [pc, #224]	; (80022a0 <HAL_DMA_IRQHandler+0x1f0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d029      	beq.n	8002216 <HAL_DMA_IRQHandler+0x166>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a37      	ldr	r2, [pc, #220]	; (80022a4 <HAL_DMA_IRQHandler+0x1f4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d022      	beq.n	8002212 <HAL_DMA_IRQHandler+0x162>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a35      	ldr	r2, [pc, #212]	; (80022a8 <HAL_DMA_IRQHandler+0x1f8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01a      	beq.n	800220c <HAL_DMA_IRQHandler+0x15c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a34      	ldr	r2, [pc, #208]	; (80022ac <HAL_DMA_IRQHandler+0x1fc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d012      	beq.n	8002206 <HAL_DMA_IRQHandler+0x156>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a32      	ldr	r2, [pc, #200]	; (80022b0 <HAL_DMA_IRQHandler+0x200>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00a      	beq.n	8002200 <HAL_DMA_IRQHandler+0x150>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a31      	ldr	r2, [pc, #196]	; (80022b4 <HAL_DMA_IRQHandler+0x204>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d102      	bne.n	80021fa <HAL_DMA_IRQHandler+0x14a>
 80021f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021f8:	e00e      	b.n	8002218 <HAL_DMA_IRQHandler+0x168>
 80021fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021fe:	e00b      	b.n	8002218 <HAL_DMA_IRQHandler+0x168>
 8002200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002204:	e008      	b.n	8002218 <HAL_DMA_IRQHandler+0x168>
 8002206:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800220a:	e005      	b.n	8002218 <HAL_DMA_IRQHandler+0x168>
 800220c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002210:	e002      	b.n	8002218 <HAL_DMA_IRQHandler+0x168>
 8002212:	2320      	movs	r3, #32
 8002214:	e000      	b.n	8002218 <HAL_DMA_IRQHandler+0x168>
 8002216:	2302      	movs	r3, #2
 8002218:	4a27      	ldr	r2, [pc, #156]	; (80022b8 <HAL_DMA_IRQHandler+0x208>)
 800221a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	2b00      	cmp	r3, #0
 800222a:	d034      	beq.n	8002296 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002234:	e02f      	b.n	8002296 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	2208      	movs	r2, #8
 800223c:	409a      	lsls	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4013      	ands	r3, r2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d028      	beq.n	8002298 <HAL_DMA_IRQHandler+0x1e8>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d023      	beq.n	8002298 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 020e 	bic.w	r2, r2, #14
 800225e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002268:	2101      	movs	r1, #1
 800226a:	fa01 f202 	lsl.w	r2, r1, r2
 800226e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	2b00      	cmp	r3, #0
 800228c:	d004      	beq.n	8002298 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4798      	blx	r3
    }
  }
  return;
 8002296:	bf00      	nop
 8002298:	bf00      	nop
}
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40020008 	.word	0x40020008
 80022a4:	4002001c 	.word	0x4002001c
 80022a8:	40020030 	.word	0x40020030
 80022ac:	40020044 	.word	0x40020044
 80022b0:	40020058 	.word	0x40020058
 80022b4:	4002006c 	.word	0x4002006c
 80022b8:	40020000 	.word	0x40020000

080022bc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b08b      	sub	sp, #44	; 0x2c
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e6:	e127      	b.n	8002538 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022e8:	2201      	movs	r2, #1
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	429a      	cmp	r2, r3
 8002302:	f040 8116 	bne.w	8002532 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b12      	cmp	r3, #18
 800230c:	d034      	beq.n	8002378 <HAL_GPIO_Init+0xa4>
 800230e:	2b12      	cmp	r3, #18
 8002310:	d80d      	bhi.n	800232e <HAL_GPIO_Init+0x5a>
 8002312:	2b02      	cmp	r3, #2
 8002314:	d02b      	beq.n	800236e <HAL_GPIO_Init+0x9a>
 8002316:	2b02      	cmp	r3, #2
 8002318:	d804      	bhi.n	8002324 <HAL_GPIO_Init+0x50>
 800231a:	2b00      	cmp	r3, #0
 800231c:	d031      	beq.n	8002382 <HAL_GPIO_Init+0xae>
 800231e:	2b01      	cmp	r3, #1
 8002320:	d01c      	beq.n	800235c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002322:	e048      	b.n	80023b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002324:	2b03      	cmp	r3, #3
 8002326:	d043      	beq.n	80023b0 <HAL_GPIO_Init+0xdc>
 8002328:	2b11      	cmp	r3, #17
 800232a:	d01b      	beq.n	8002364 <HAL_GPIO_Init+0x90>
          break;
 800232c:	e043      	b.n	80023b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800232e:	4a89      	ldr	r2, [pc, #548]	; (8002554 <HAL_GPIO_Init+0x280>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d026      	beq.n	8002382 <HAL_GPIO_Init+0xae>
 8002334:	4a87      	ldr	r2, [pc, #540]	; (8002554 <HAL_GPIO_Init+0x280>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d806      	bhi.n	8002348 <HAL_GPIO_Init+0x74>
 800233a:	4a87      	ldr	r2, [pc, #540]	; (8002558 <HAL_GPIO_Init+0x284>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d020      	beq.n	8002382 <HAL_GPIO_Init+0xae>
 8002340:	4a86      	ldr	r2, [pc, #536]	; (800255c <HAL_GPIO_Init+0x288>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01d      	beq.n	8002382 <HAL_GPIO_Init+0xae>
          break;
 8002346:	e036      	b.n	80023b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002348:	4a85      	ldr	r2, [pc, #532]	; (8002560 <HAL_GPIO_Init+0x28c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d019      	beq.n	8002382 <HAL_GPIO_Init+0xae>
 800234e:	4a85      	ldr	r2, [pc, #532]	; (8002564 <HAL_GPIO_Init+0x290>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d016      	beq.n	8002382 <HAL_GPIO_Init+0xae>
 8002354:	4a84      	ldr	r2, [pc, #528]	; (8002568 <HAL_GPIO_Init+0x294>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d013      	beq.n	8002382 <HAL_GPIO_Init+0xae>
          break;
 800235a:	e02c      	b.n	80023b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	623b      	str	r3, [r7, #32]
          break;
 8002362:	e028      	b.n	80023b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	3304      	adds	r3, #4
 800236a:	623b      	str	r3, [r7, #32]
          break;
 800236c:	e023      	b.n	80023b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	3308      	adds	r3, #8
 8002374:	623b      	str	r3, [r7, #32]
          break;
 8002376:	e01e      	b.n	80023b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	330c      	adds	r3, #12
 800237e:	623b      	str	r3, [r7, #32]
          break;
 8002380:	e019      	b.n	80023b6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d102      	bne.n	8002390 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800238a:	2304      	movs	r3, #4
 800238c:	623b      	str	r3, [r7, #32]
          break;
 800238e:	e012      	b.n	80023b6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d105      	bne.n	80023a4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002398:	2308      	movs	r3, #8
 800239a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	611a      	str	r2, [r3, #16]
          break;
 80023a2:	e008      	b.n	80023b6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023a4:	2308      	movs	r3, #8
 80023a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	615a      	str	r2, [r3, #20]
          break;
 80023ae:	e002      	b.n	80023b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023b0:	2300      	movs	r3, #0
 80023b2:	623b      	str	r3, [r7, #32]
          break;
 80023b4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	2bff      	cmp	r3, #255	; 0xff
 80023ba:	d801      	bhi.n	80023c0 <HAL_GPIO_Init+0xec>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	e001      	b.n	80023c4 <HAL_GPIO_Init+0xf0>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3304      	adds	r3, #4
 80023c4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2bff      	cmp	r3, #255	; 0xff
 80023ca:	d802      	bhi.n	80023d2 <HAL_GPIO_Init+0xfe>
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	e002      	b.n	80023d8 <HAL_GPIO_Init+0x104>
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	3b08      	subs	r3, #8
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	210f      	movs	r1, #15
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	fa01 f303 	lsl.w	r3, r1, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	401a      	ands	r2, r3
 80023ea:	6a39      	ldr	r1, [r7, #32]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	431a      	orrs	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 8096 	beq.w	8002532 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002406:	4b59      	ldr	r3, [pc, #356]	; (800256c <HAL_GPIO_Init+0x298>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	4a58      	ldr	r2, [pc, #352]	; (800256c <HAL_GPIO_Init+0x298>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6193      	str	r3, [r2, #24]
 8002412:	4b56      	ldr	r3, [pc, #344]	; (800256c <HAL_GPIO_Init+0x298>)
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800241e:	4a54      	ldr	r2, [pc, #336]	; (8002570 <HAL_GPIO_Init+0x29c>)
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	3302      	adds	r3, #2
 8002426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	220f      	movs	r2, #15
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4013      	ands	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4b      	ldr	r2, [pc, #300]	; (8002574 <HAL_GPIO_Init+0x2a0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <HAL_GPIO_Init+0x19e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4a      	ldr	r2, [pc, #296]	; (8002578 <HAL_GPIO_Init+0x2a4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00d      	beq.n	800246e <HAL_GPIO_Init+0x19a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a49      	ldr	r2, [pc, #292]	; (800257c <HAL_GPIO_Init+0x2a8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d007      	beq.n	800246a <HAL_GPIO_Init+0x196>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a48      	ldr	r2, [pc, #288]	; (8002580 <HAL_GPIO_Init+0x2ac>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <HAL_GPIO_Init+0x192>
 8002462:	2303      	movs	r3, #3
 8002464:	e006      	b.n	8002474 <HAL_GPIO_Init+0x1a0>
 8002466:	2304      	movs	r3, #4
 8002468:	e004      	b.n	8002474 <HAL_GPIO_Init+0x1a0>
 800246a:	2302      	movs	r3, #2
 800246c:	e002      	b.n	8002474 <HAL_GPIO_Init+0x1a0>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <HAL_GPIO_Init+0x1a0>
 8002472:	2300      	movs	r3, #0
 8002474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002476:	f002 0203 	and.w	r2, r2, #3
 800247a:	0092      	lsls	r2, r2, #2
 800247c:	4093      	lsls	r3, r2
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002484:	493a      	ldr	r1, [pc, #232]	; (8002570 <HAL_GPIO_Init+0x29c>)
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	089b      	lsrs	r3, r3, #2
 800248a:	3302      	adds	r3, #2
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d006      	beq.n	80024ac <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800249e:	4b39      	ldr	r3, [pc, #228]	; (8002584 <HAL_GPIO_Init+0x2b0>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4938      	ldr	r1, [pc, #224]	; (8002584 <HAL_GPIO_Init+0x2b0>)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]
 80024aa:	e006      	b.n	80024ba <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024ac:	4b35      	ldr	r3, [pc, #212]	; (8002584 <HAL_GPIO_Init+0x2b0>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	4933      	ldr	r1, [pc, #204]	; (8002584 <HAL_GPIO_Init+0x2b0>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d006      	beq.n	80024d4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024c6:	4b2f      	ldr	r3, [pc, #188]	; (8002584 <HAL_GPIO_Init+0x2b0>)
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	492e      	ldr	r1, [pc, #184]	; (8002584 <HAL_GPIO_Init+0x2b0>)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
 80024d2:	e006      	b.n	80024e2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024d4:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <HAL_GPIO_Init+0x2b0>)
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	43db      	mvns	r3, r3
 80024dc:	4929      	ldr	r1, [pc, #164]	; (8002584 <HAL_GPIO_Init+0x2b0>)
 80024de:	4013      	ands	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d006      	beq.n	80024fc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024ee:	4b25      	ldr	r3, [pc, #148]	; (8002584 <HAL_GPIO_Init+0x2b0>)
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	4924      	ldr	r1, [pc, #144]	; (8002584 <HAL_GPIO_Init+0x2b0>)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
 80024fa:	e006      	b.n	800250a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024fc:	4b21      	ldr	r3, [pc, #132]	; (8002584 <HAL_GPIO_Init+0x2b0>)
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	43db      	mvns	r3, r3
 8002504:	491f      	ldr	r1, [pc, #124]	; (8002584 <HAL_GPIO_Init+0x2b0>)
 8002506:	4013      	ands	r3, r2
 8002508:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d006      	beq.n	8002524 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002516:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_GPIO_Init+0x2b0>)
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	491a      	ldr	r1, [pc, #104]	; (8002584 <HAL_GPIO_Init+0x2b0>)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	60cb      	str	r3, [r1, #12]
 8002522:	e006      	b.n	8002532 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002524:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_GPIO_Init+0x2b0>)
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	43db      	mvns	r3, r3
 800252c:	4915      	ldr	r1, [pc, #84]	; (8002584 <HAL_GPIO_Init+0x2b0>)
 800252e:	4013      	ands	r3, r2
 8002530:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	3301      	adds	r3, #1
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	f47f aed0 	bne.w	80022e8 <HAL_GPIO_Init+0x14>
  }
}
 8002548:	bf00      	nop
 800254a:	372c      	adds	r7, #44	; 0x2c
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	10210000 	.word	0x10210000
 8002558:	10110000 	.word	0x10110000
 800255c:	10120000 	.word	0x10120000
 8002560:	10310000 	.word	0x10310000
 8002564:	10320000 	.word	0x10320000
 8002568:	10220000 	.word	0x10220000
 800256c:	40021000 	.word	0x40021000
 8002570:	40010000 	.word	0x40010000
 8002574:	40010800 	.word	0x40010800
 8002578:	40010c00 	.word	0x40010c00
 800257c:	40011000 	.word	0x40011000
 8002580:	40011400 	.word	0x40011400
 8002584:	40010400 	.word	0x40010400

08002588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
 8002594:	4613      	mov	r3, r2
 8002596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002598:	787b      	ldrb	r3, [r7, #1]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800259e:	887a      	ldrh	r2, [r7, #2]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025a4:	e003      	b.n	80025ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025a6:	887b      	ldrh	r3, [r7, #2]
 80025a8:	041a      	lsls	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	611a      	str	r2, [r3, #16]
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e11f      	b.n	800280a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7fe fd76 	bl	80010d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2224      	movs	r2, #36	; 0x24
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800260a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800261a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800261c:	f003 fbf6 	bl	8005e0c <HAL_RCC_GetPCLK1Freq>
 8002620:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4a7b      	ldr	r2, [pc, #492]	; (8002814 <HAL_I2C_Init+0x25c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d807      	bhi.n	800263c <HAL_I2C_Init+0x84>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4a7a      	ldr	r2, [pc, #488]	; (8002818 <HAL_I2C_Init+0x260>)
 8002630:	4293      	cmp	r3, r2
 8002632:	bf94      	ite	ls
 8002634:	2301      	movls	r3, #1
 8002636:	2300      	movhi	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	e006      	b.n	800264a <HAL_I2C_Init+0x92>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4a77      	ldr	r2, [pc, #476]	; (800281c <HAL_I2C_Init+0x264>)
 8002640:	4293      	cmp	r3, r2
 8002642:	bf94      	ite	ls
 8002644:	2301      	movls	r3, #1
 8002646:	2300      	movhi	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e0db      	b.n	800280a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4a72      	ldr	r2, [pc, #456]	; (8002820 <HAL_I2C_Init+0x268>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	0c9b      	lsrs	r3, r3, #18
 800265c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4a64      	ldr	r2, [pc, #400]	; (8002814 <HAL_I2C_Init+0x25c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d802      	bhi.n	800268c <HAL_I2C_Init+0xd4>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	3301      	adds	r3, #1
 800268a:	e009      	b.n	80026a0 <HAL_I2C_Init+0xe8>
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002692:	fb02 f303 	mul.w	r3, r2, r3
 8002696:	4a63      	ldr	r2, [pc, #396]	; (8002824 <HAL_I2C_Init+0x26c>)
 8002698:	fba2 2303 	umull	r2, r3, r2, r3
 800269c:	099b      	lsrs	r3, r3, #6
 800269e:	3301      	adds	r3, #1
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	430b      	orrs	r3, r1
 80026a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4956      	ldr	r1, [pc, #344]	; (8002814 <HAL_I2C_Init+0x25c>)
 80026bc:	428b      	cmp	r3, r1
 80026be:	d80d      	bhi.n	80026dc <HAL_I2C_Init+0x124>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1e59      	subs	r1, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ce:	3301      	adds	r3, #1
 80026d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	bf38      	it	cc
 80026d8:	2304      	movcc	r3, #4
 80026da:	e04f      	b.n	800277c <HAL_I2C_Init+0x1c4>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d111      	bne.n	8002708 <HAL_I2C_Init+0x150>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1e58      	subs	r0, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	440b      	add	r3, r1
 80026f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f6:	3301      	adds	r3, #1
 80026f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf0c      	ite	eq
 8002700:	2301      	moveq	r3, #1
 8002702:	2300      	movne	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	e012      	b.n	800272e <HAL_I2C_Init+0x176>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1e58      	subs	r0, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6859      	ldr	r1, [r3, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	0099      	lsls	r1, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	fbb0 f3f3 	udiv	r3, r0, r3
 800271e:	3301      	adds	r3, #1
 8002720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf0c      	ite	eq
 8002728:	2301      	moveq	r3, #1
 800272a:	2300      	movne	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_I2C_Init+0x17e>
 8002732:	2301      	movs	r3, #1
 8002734:	e022      	b.n	800277c <HAL_I2C_Init+0x1c4>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10e      	bne.n	800275c <HAL_I2C_Init+0x1a4>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1e58      	subs	r0, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6859      	ldr	r1, [r3, #4]
 8002746:	460b      	mov	r3, r1
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	440b      	add	r3, r1
 800274c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002750:	3301      	adds	r3, #1
 8002752:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800275a:	e00f      	b.n	800277c <HAL_I2C_Init+0x1c4>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1e58      	subs	r0, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	0099      	lsls	r1, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002772:	3301      	adds	r3, #1
 8002774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	6809      	ldr	r1, [r1, #0]
 8002780:	4313      	orrs	r3, r2
 8002782:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69da      	ldr	r2, [r3, #28]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6911      	ldr	r1, [r2, #16]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68d2      	ldr	r2, [r2, #12]
 80027b6:	4311      	orrs	r1, r2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	430b      	orrs	r3, r1
 80027be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	000186a0 	.word	0x000186a0
 8002818:	001e847f 	.word	0x001e847f
 800281c:	003d08ff 	.word	0x003d08ff
 8002820:	431bde83 	.word	0x431bde83
 8002824:	10624dd3 	.word	0x10624dd3

08002828 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002848:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002850:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	2b10      	cmp	r3, #16
 8002856:	d003      	beq.n	8002860 <HAL_I2C_EV_IRQHandler+0x38>
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b40      	cmp	r3, #64	; 0x40
 800285c:	f040 80bd 	bne.w	80029da <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10d      	bne.n	8002896 <HAL_I2C_EV_IRQHandler+0x6e>
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002880:	d003      	beq.n	800288a <HAL_I2C_EV_IRQHandler+0x62>
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002888:	d101      	bne.n	800288e <HAL_I2C_EV_IRQHandler+0x66>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_I2C_EV_IRQHandler+0x68>
 800288e:	2300      	movs	r3, #0
 8002890:	2b01      	cmp	r3, #1
 8002892:	f000 812e 	beq.w	8002af2 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00c      	beq.n	80028ba <HAL_I2C_EV_IRQHandler+0x92>
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	0a5b      	lsrs	r3, r3, #9
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d006      	beq.n	80028ba <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f001 fb39 	bl	8003f24 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fcb1 	bl	800321a <I2C_Master_SB>
 80028b8:	e08e      	b.n	80029d8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	08db      	lsrs	r3, r3, #3
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <HAL_I2C_EV_IRQHandler+0xb2>
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	0a5b      	lsrs	r3, r3, #9
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fd26 	bl	8003324 <I2C_Master_ADD10>
 80028d8:	e07e      	b.n	80029d8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <HAL_I2C_EV_IRQHandler+0xd2>
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	0a5b      	lsrs	r3, r3, #9
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fd3f 	bl	8003376 <I2C_Master_ADDR>
 80028f8:	e06e      	b.n	80029d8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d037      	beq.n	8002976 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002914:	f000 80ef 	beq.w	8002af6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	09db      	lsrs	r3, r3, #7
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00f      	beq.n	8002944 <HAL_I2C_EV_IRQHandler+0x11c>
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	0a9b      	lsrs	r3, r3, #10
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d009      	beq.n	8002944 <HAL_I2C_EV_IRQHandler+0x11c>
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d103      	bne.n	8002944 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f93e 	bl	8002bbe <I2C_MasterTransmit_TXE>
 8002942:	e049      	b.n	80029d8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	089b      	lsrs	r3, r3, #2
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80d2 	beq.w	8002af6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	0a5b      	lsrs	r3, r3, #9
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 80cb 	beq.w	8002af6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	2b10      	cmp	r3, #16
 8002964:	d103      	bne.n	800296e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f9c5 	bl	8002cf6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800296c:	e0c3      	b.n	8002af6 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fa29 	bl	8002dc6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002974:	e0bf      	b.n	8002af6 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002984:	f000 80b7 	beq.w	8002af6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	099b      	lsrs	r3, r3, #6
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00f      	beq.n	80029b4 <HAL_I2C_EV_IRQHandler+0x18c>
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	0a9b      	lsrs	r3, r3, #10
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d009      	beq.n	80029b4 <HAL_I2C_EV_IRQHandler+0x18c>
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d103      	bne.n	80029b4 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 fa99 	bl	8002ee4 <I2C_MasterReceive_RXNE>
 80029b2:	e011      	b.n	80029d8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 809a 	beq.w	8002af6 <HAL_I2C_EV_IRQHandler+0x2ce>
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	0a5b      	lsrs	r3, r3, #9
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8093 	beq.w	8002af6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fb38 	bl	8003046 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029d6:	e08e      	b.n	8002af6 <HAL_I2C_EV_IRQHandler+0x2ce>
 80029d8:	e08d      	b.n	8002af6 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d004      	beq.n	80029ec <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	e007      	b.n	80029fc <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	085b      	lsrs	r3, r3, #1
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d012      	beq.n	8002a2e <HAL_I2C_EV_IRQHandler+0x206>
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	0a5b      	lsrs	r3, r3, #9
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00c      	beq.n	8002a2e <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002a24:	69b9      	ldr	r1, [r7, #24]
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fefc 	bl	8003824 <I2C_Slave_ADDR>
 8002a2c:	e066      	b.n	8002afc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <HAL_I2C_EV_IRQHandler+0x226>
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	0a5b      	lsrs	r3, r3, #9
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 ff30 	bl	80038ac <I2C_Slave_STOPF>
 8002a4c:	e056      	b.n	8002afc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a4e:	7bbb      	ldrb	r3, [r7, #14]
 8002a50:	2b21      	cmp	r3, #33	; 0x21
 8002a52:	d002      	beq.n	8002a5a <HAL_I2C_EV_IRQHandler+0x232>
 8002a54:	7bbb      	ldrb	r3, [r7, #14]
 8002a56:	2b29      	cmp	r3, #41	; 0x29
 8002a58:	d125      	bne.n	8002aa6 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	09db      	lsrs	r3, r3, #7
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00f      	beq.n	8002a86 <HAL_I2C_EV_IRQHandler+0x25e>
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	0a9b      	lsrs	r3, r3, #10
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <HAL_I2C_EV_IRQHandler+0x25e>
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	089b      	lsrs	r3, r3, #2
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d103      	bne.n	8002a86 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fe14 	bl	80036ac <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a84:	e039      	b.n	8002afa <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d033      	beq.n	8002afa <HAL_I2C_EV_IRQHandler+0x2d2>
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	0a5b      	lsrs	r3, r3, #9
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d02d      	beq.n	8002afa <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fe41 	bl	8003726 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aa4:	e029      	b.n	8002afa <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00f      	beq.n	8002ad2 <HAL_I2C_EV_IRQHandler+0x2aa>
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	0a9b      	lsrs	r3, r3, #10
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <HAL_I2C_EV_IRQHandler+0x2aa>
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	089b      	lsrs	r3, r3, #2
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d103      	bne.n	8002ad2 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fe4b 	bl	8003766 <I2C_SlaveReceive_RXNE>
 8002ad0:	e014      	b.n	8002afc <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00e      	beq.n	8002afc <HAL_I2C_EV_IRQHandler+0x2d4>
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	0a5b      	lsrs	r3, r3, #9
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fe79 	bl	80037e2 <I2C_SlaveReceive_BTF>
 8002af0:	e004      	b.n	8002afc <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8002af2:	bf00      	nop
 8002af4:	e002      	b.n	8002afc <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002af6:	bf00      	nop
 8002af8:	e000      	b.n	8002afc <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002afa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002afc:	3720      	adds	r7, #32
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	70fb      	strb	r3, [r7, #3]
 8002b56:	4613      	mov	r3, r2
 8002b58:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr

08002bbe <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bcc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d150      	bne.n	8002c86 <I2C_MasterTransmit_TXE+0xc8>
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2b21      	cmp	r3, #33	; 0x21
 8002be8:	d14d      	bne.n	8002c86 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d01d      	beq.n	8002c2c <I2C_MasterTransmit_TXE+0x6e>
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d01a      	beq.n	8002c2c <I2C_MasterTransmit_TXE+0x6e>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bfc:	d016      	beq.n	8002c2c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c0c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2211      	movs	r2, #17
 8002c12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff6c 	bl	8002b02 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c2a:	e060      	b.n	8002cee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c3a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b40      	cmp	r3, #64	; 0x40
 8002c64:	d107      	bne.n	8002c76 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff ff81 	bl	8002b76 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c74:	e03b      	b.n	8002cee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ff3f 	bl	8002b02 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c84:	e033      	b.n	8002cee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	2b21      	cmp	r3, #33	; 0x21
 8002c8a:	d005      	beq.n	8002c98 <I2C_MasterTransmit_TXE+0xda>
 8002c8c:	7bbb      	ldrb	r3, [r7, #14]
 8002c8e:	2b40      	cmp	r3, #64	; 0x40
 8002c90:	d12d      	bne.n	8002cee <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	2b22      	cmp	r3, #34	; 0x22
 8002c96:	d12a      	bne.n	8002cee <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d108      	bne.n	8002cb4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002cb2:	e01c      	b.n	8002cee <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b40      	cmp	r3, #64	; 0x40
 8002cbe:	d103      	bne.n	8002cc8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f880 	bl	8002dc6 <I2C_MemoryTransmit_TXE_BTF>
}
 8002cc6:	e012      	b.n	8002cee <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002cec:	e7ff      	b.n	8002cee <I2C_MasterTransmit_TXE+0x130>
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b21      	cmp	r3, #33	; 0x21
 8002d0e:	d156      	bne.n	8002dbe <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d012      	beq.n	8002d40 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	781a      	ldrb	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002d3e:	e03e      	b.n	8002dbe <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d01d      	beq.n	8002d82 <I2C_MasterTransmit_BTF+0x8c>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d01a      	beq.n	8002d82 <I2C_MasterTransmit_BTF+0x8c>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d52:	d016      	beq.n	8002d82 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d62:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2211      	movs	r2, #17
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff fec1 	bl	8002b02 <HAL_I2C_MasterTxCpltCallback>
}
 8002d80:	e01d      	b.n	8002dbe <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d90:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff fea2 	bl	8002b02 <HAL_I2C_MasterTxCpltCallback>
}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d11d      	bne.n	8002e1a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d10b      	bne.n	8002dfe <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df6:	1c9a      	adds	r2, r3, #2
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002dfc:	e06e      	b.n	8002edc <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	121b      	asrs	r3, r3, #8
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e18:	e060      	b.n	8002edc <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d10b      	bne.n	8002e3a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e38:	e050      	b.n	8002edc <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d14c      	bne.n	8002edc <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	2b22      	cmp	r3, #34	; 0x22
 8002e46:	d108      	bne.n	8002e5a <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e56:	601a      	str	r2, [r3, #0]
}
 8002e58:	e040      	b.n	8002edc <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d015      	beq.n	8002e90 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b21      	cmp	r3, #33	; 0x21
 8002e68:	d112      	bne.n	8002e90 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	781a      	ldrb	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e8e:	e025      	b.n	8002edc <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d120      	bne.n	8002edc <I2C_MemoryTransmit_TXE_BTF+0x116>
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	2b21      	cmp	r3, #33	; 0x21
 8002e9e:	d11d      	bne.n	8002edc <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002eae:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ebe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff fe4d 	bl	8002b76 <HAL_I2C_MemTxCpltCallback>
}
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b22      	cmp	r3, #34	; 0x22
 8002ef6:	f040 80a2 	bne.w	800303e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d921      	bls.n	8002f4c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691a      	ldr	r2, [r3, #16]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	f040 8082 	bne.w	800303e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f48:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002f4a:	e078      	b.n	800303e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d074      	beq.n	800303e <I2C_MasterReceive_RXNE+0x15a>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d002      	beq.n	8002f60 <I2C_MasterReceive_RXNE+0x7c>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d16e      	bne.n	800303e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 ffad 	bl	8003ec0 <I2C_WaitOnSTOPRequestThroughIT>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d142      	bne.n	8002ff2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f8a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b40      	cmp	r3, #64	; 0x40
 8002fc4:	d10a      	bne.n	8002fdc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff fdd7 	bl	8002b88 <HAL_I2C_MemRxCpltCallback>
}
 8002fda:	e030      	b.n	800303e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2212      	movs	r2, #18
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff fd92 	bl	8002b14 <HAL_I2C_MasterRxCpltCallback>
}
 8002ff0:	e025      	b.n	800303e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003000:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff fdae 	bl	8002b9a <HAL_I2C_ErrorCallback>
}
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b04      	cmp	r3, #4
 800305c:	d11b      	bne.n	8003096 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800306c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003094:	e0bd      	b.n	8003212 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	2b03      	cmp	r3, #3
 800309e:	d129      	bne.n	80030f4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ae:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d00a      	beq.n	80030cc <I2C_MasterReceive_BTF+0x86>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d007      	beq.n	80030cc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030f2:	e08e      	b.n	8003212 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d176      	bne.n	80031ec <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d002      	beq.n	800310a <I2C_MasterReceive_BTF+0xc4>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b10      	cmp	r3, #16
 8003108:	d108      	bne.n	800311c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	e019      	b.n	8003150 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2b04      	cmp	r3, #4
 8003120:	d002      	beq.n	8003128 <I2C_MasterReceive_BTF+0xe2>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d108      	bne.n	800313a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	e00a      	b.n	8003150 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2b10      	cmp	r3, #16
 800313e:	d007      	beq.n	8003150 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800314e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80031aa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b40      	cmp	r3, #64	; 0x40
 80031be:	d10a      	bne.n	80031d6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff fcda 	bl	8002b88 <HAL_I2C_MemRxCpltCallback>
}
 80031d4:	e01d      	b.n	8003212 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2212      	movs	r2, #18
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff fc95 	bl	8002b14 <HAL_I2C_MasterRxCpltCallback>
}
 80031ea:	e012      	b.n	8003212 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b40      	cmp	r3, #64	; 0x40
 800322c:	d117      	bne.n	800325e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003246:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003248:	e067      	b.n	800331a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	b2da      	uxtb	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	611a      	str	r2, [r3, #16]
}
 800325c:	e05d      	b.n	800331a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003266:	d133      	bne.n	80032d0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b21      	cmp	r3, #33	; 0x21
 8003272:	d109      	bne.n	8003288 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	b2db      	uxtb	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003284:	611a      	str	r2, [r3, #16]
 8003286:	e008      	b.n	800329a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	b2da      	uxtb	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d004      	beq.n	80032ac <I2C_Master_SB+0x92>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d108      	bne.n	80032be <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d032      	beq.n	800331a <I2C_Master_SB+0x100>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d02d      	beq.n	800331a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032cc:	605a      	str	r2, [r3, #4]
}
 80032ce:	e024      	b.n	800331a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10e      	bne.n	80032f6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	b29b      	uxth	r3, r3
 80032de:	11db      	asrs	r3, r3, #7
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f003 0306 	and.w	r3, r3, #6
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f063 030f 	orn	r3, r3, #15
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	611a      	str	r2, [r3, #16]
}
 80032f4:	e011      	b.n	800331a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d10d      	bne.n	800331a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	b29b      	uxth	r3, r3
 8003304:	11db      	asrs	r3, r3, #7
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f003 0306 	and.w	r3, r3, #6
 800330c:	b2db      	uxtb	r3, r3
 800330e:	f063 030e 	orn	r3, r3, #14
 8003312:	b2da      	uxtb	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	611a      	str	r2, [r3, #16]
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003330:	b2da      	uxtb	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333c:	2b00      	cmp	r3, #0
 800333e:	d103      	bne.n	8003348 <I2C_Master_ADD10+0x24>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	2b00      	cmp	r3, #0
 8003346:	d011      	beq.n	800336c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	2b00      	cmp	r3, #0
 8003350:	d104      	bne.n	800335c <I2C_Master_ADD10+0x38>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800336a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr

08003376 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003376:	b480      	push	{r7}
 8003378:	b091      	sub	sp, #68	; 0x44
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003384:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b22      	cmp	r3, #34	; 0x22
 800339e:	f040 8174 	bne.w	800368a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10f      	bne.n	80033ca <I2C_Master_ADDR+0x54>
 80033aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033ae:	2b40      	cmp	r3, #64	; 0x40
 80033b0:	d10b      	bne.n	80033ca <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b2:	2300      	movs	r3, #0
 80033b4:	633b      	str	r3, [r7, #48]	; 0x30
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	633b      	str	r3, [r7, #48]	; 0x30
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	633b      	str	r3, [r7, #48]	; 0x30
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	e16b      	b.n	80036a2 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d11d      	bne.n	800340e <I2C_Master_ADDR+0x98>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033da:	d118      	bne.n	800340e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033dc:	2300      	movs	r3, #0
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003400:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	651a      	str	r2, [r3, #80]	; 0x50
 800340c:	e149      	b.n	80036a2 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d113      	bne.n	8003440 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003418:	2300      	movs	r3, #0
 800341a:	62bb      	str	r3, [r7, #40]	; 0x28
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	62bb      	str	r3, [r7, #40]	; 0x28
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	62bb      	str	r3, [r7, #40]	; 0x28
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	e120      	b.n	8003682 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b01      	cmp	r3, #1
 8003448:	f040 808a 	bne.w	8003560 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003452:	d137      	bne.n	80034c4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003462:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800346e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003472:	d113      	bne.n	800349c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003482:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003484:	2300      	movs	r3, #0
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	e0f2      	b.n	8003682 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349c:	2300      	movs	r3, #0
 800349e:	623b      	str	r3, [r7, #32]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	623b      	str	r3, [r7, #32]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	623b      	str	r3, [r7, #32]
 80034b0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	e0de      	b.n	8003682 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80034c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d02e      	beq.n	8003528 <I2C_Master_ADDR+0x1b2>
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d02b      	beq.n	8003528 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80034d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d2:	2b12      	cmp	r3, #18
 80034d4:	d102      	bne.n	80034dc <I2C_Master_ADDR+0x166>
 80034d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d125      	bne.n	8003528 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80034dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d00e      	beq.n	8003500 <I2C_Master_ADDR+0x18a>
 80034e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d00b      	beq.n	8003500 <I2C_Master_ADDR+0x18a>
 80034e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ea:	2b10      	cmp	r3, #16
 80034ec:	d008      	beq.n	8003500 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	e007      	b.n	8003510 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800350e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003510:	2300      	movs	r3, #0
 8003512:	61fb      	str	r3, [r7, #28]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	61fb      	str	r3, [r7, #28]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	61fb      	str	r3, [r7, #28]
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	e0ac      	b.n	8003682 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003536:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003538:	2300      	movs	r3, #0
 800353a:	61bb      	str	r3, [r7, #24]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	61bb      	str	r3, [r7, #24]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e090      	b.n	8003682 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d158      	bne.n	800361c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800356a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356c:	2b04      	cmp	r3, #4
 800356e:	d021      	beq.n	80035b4 <I2C_Master_ADDR+0x23e>
 8003570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003572:	2b02      	cmp	r3, #2
 8003574:	d01e      	beq.n	80035b4 <I2C_Master_ADDR+0x23e>
 8003576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003578:	2b10      	cmp	r3, #16
 800357a:	d01b      	beq.n	80035b4 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800358a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e012      	b.n	80035da <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035c2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c4:	2300      	movs	r3, #0
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e8:	d14b      	bne.n	8003682 <I2C_Master_ADDR+0x30c>
 80035ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035f0:	d00b      	beq.n	800360a <I2C_Master_ADDR+0x294>
 80035f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d008      	beq.n	800360a <I2C_Master_ADDR+0x294>
 80035f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d005      	beq.n	800360a <I2C_Master_ADDR+0x294>
 80035fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003600:	2b10      	cmp	r3, #16
 8003602:	d002      	beq.n	800360a <I2C_Master_ADDR+0x294>
 8003604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003606:	2b20      	cmp	r3, #32
 8003608:	d13b      	bne.n	8003682 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	e032      	b.n	8003682 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800362a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800363a:	d117      	bne.n	800366c <I2C_Master_ADDR+0x2f6>
 800363c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003642:	d00b      	beq.n	800365c <I2C_Master_ADDR+0x2e6>
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	2b01      	cmp	r3, #1
 8003648:	d008      	beq.n	800365c <I2C_Master_ADDR+0x2e6>
 800364a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364c:	2b08      	cmp	r3, #8
 800364e:	d005      	beq.n	800365c <I2C_Master_ADDR+0x2e6>
 8003650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003652:	2b10      	cmp	r3, #16
 8003654:	d002      	beq.n	800365c <I2C_Master_ADDR+0x2e6>
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	2b20      	cmp	r3, #32
 800365a:	d107      	bne.n	800366c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800366a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003688:	e00b      	b.n	80036a2 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368a:	2300      	movs	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	68bb      	ldr	r3, [r7, #8]
}
 80036a0:	e7ff      	b.n	80036a2 <I2C_Master_ADDR+0x32c>
 80036a2:	bf00      	nop
 80036a4:	3744      	adds	r7, #68	; 0x44
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr

080036ac <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d02b      	beq.n	800371e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	781a      	ldrb	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d114      	bne.n	800371e <I2C_SlaveTransmit_TXE+0x72>
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	2b29      	cmp	r3, #41	; 0x29
 80036f8:	d111      	bne.n	800371e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003708:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2221      	movs	r2, #33	; 0x21
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2228      	movs	r2, #40	; 0x28
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff fa04 	bl	8002b26 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d011      	beq.n	800375c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr

08003766 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003774:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d02c      	beq.n	80037da <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d114      	bne.n	80037da <I2C_SlaveReceive_RXNE+0x74>
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b2a      	cmp	r3, #42	; 0x2a
 80037b4:	d111      	bne.n	80037da <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2222      	movs	r2, #34	; 0x22
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2228      	movs	r2, #40	; 0x28
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff f9af 	bl	8002b38 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d012      	beq.n	800381a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800383e:	2b28      	cmp	r3, #40	; 0x28
 8003840:	d127      	bne.n	8003892 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003850:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	089b      	lsrs	r3, r3, #2
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800385e:	2301      	movs	r3, #1
 8003860:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	09db      	lsrs	r3, r3, #7
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d103      	bne.n	8003876 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	81bb      	strh	r3, [r7, #12]
 8003874:	e002      	b.n	800387c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003884:	89ba      	ldrh	r2, [r7, #12]
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	4619      	mov	r1, r3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff f95d 	bl	8002b4a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003890:	e008      	b.n	80038a4 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f06f 0202 	mvn.w	r2, #2
 800389a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038ca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80038cc:	2300      	movs	r3, #0
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003908:	d172      	bne.n	80039f0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	2b22      	cmp	r3, #34	; 0x22
 800390e:	d002      	beq.n	8003916 <I2C_Slave_STOPF+0x6a>
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	2b2a      	cmp	r3, #42	; 0x2a
 8003914:	d135      	bne.n	8003982 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	b29a      	uxth	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f043 0204 	orr.w	r2, r3, #4
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003948:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe fcb4 	bl	80022bc <HAL_DMA_GetState>
 8003954:	4603      	mov	r3, r0
 8003956:	2b01      	cmp	r3, #1
 8003958:	d049      	beq.n	80039ee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	4a69      	ldr	r2, [pc, #420]	; (8003b04 <I2C_Slave_STOPF+0x258>)
 8003960:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe fb2c 	bl	8001fc4 <HAL_DMA_Abort_IT>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d03d      	beq.n	80039ee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800397c:	4610      	mov	r0, r2
 800397e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003980:	e035      	b.n	80039ee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	b29a      	uxth	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f043 0204 	orr.w	r2, r3, #4
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe fc7e 	bl	80022bc <HAL_DMA_GetState>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d014      	beq.n	80039f0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ca:	4a4e      	ldr	r2, [pc, #312]	; (8003b04 <I2C_Slave_STOPF+0x258>)
 80039cc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fe faf6 	bl	8001fc4 <HAL_DMA_Abort_IT>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039e8:	4610      	mov	r0, r2
 80039ea:	4798      	blx	r3
 80039ec:	e000      	b.n	80039f0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039ee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d03e      	beq.n	8003a78 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d112      	bne.n	8003a2e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a38:	2b40      	cmp	r3, #64	; 0x40
 8003a3a:	d112      	bne.n	8003a62 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	f043 0204 	orr.w	r2, r3, #4
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f843 	bl	8003b0c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003a86:	e039      	b.n	8003afc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a8c:	d109      	bne.n	8003aa2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2228      	movs	r2, #40	; 0x28
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff f84b 	bl	8002b38 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b28      	cmp	r3, #40	; 0x28
 8003aac:	d111      	bne.n	8003ad2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a15      	ldr	r2, [pc, #84]	; (8003b08 <I2C_Slave_STOPF+0x25c>)
 8003ab2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff f84a 	bl	8002b64 <HAL_I2C_ListenCpltCallback>
}
 8003ad0:	e014      	b.n	8003afc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	2b22      	cmp	r3, #34	; 0x22
 8003ad8:	d002      	beq.n	8003ae0 <I2C_Slave_STOPF+0x234>
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	2b22      	cmp	r3, #34	; 0x22
 8003ade:	d10d      	bne.n	8003afc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff f81e 	bl	8002b38 <HAL_I2C_SlaveRxCpltCallback>
}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	08003d71 	.word	0x08003d71
 8003b08:	ffff0000 	.word	0xffff0000

08003b0c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b24:	7bbb      	ldrb	r3, [r7, #14]
 8003b26:	2b10      	cmp	r3, #16
 8003b28:	d002      	beq.n	8003b30 <I2C_ITError+0x24>
 8003b2a:	7bbb      	ldrb	r3, [r7, #14]
 8003b2c:	2b40      	cmp	r3, #64	; 0x40
 8003b2e:	d10a      	bne.n	8003b46 <I2C_ITError+0x3a>
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
 8003b32:	2b22      	cmp	r3, #34	; 0x22
 8003b34:	d107      	bne.n	8003b46 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b44:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b4c:	2b28      	cmp	r3, #40	; 0x28
 8003b4e:	d107      	bne.n	8003b60 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2228      	movs	r2, #40	; 0x28
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b5e:	e015      	b.n	8003b8c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b6e:	d00a      	beq.n	8003b86 <I2C_ITError+0x7a>
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	2b60      	cmp	r3, #96	; 0x60
 8003b74:	d007      	beq.n	8003b86 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b9a:	d161      	bne.n	8003c60 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003baa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d020      	beq.n	8003bfa <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	4a6a      	ldr	r2, [pc, #424]	; (8003d68 <I2C_ITError+0x25c>)
 8003bbe:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fe f9fd 	bl	8001fc4 <HAL_DMA_Abort_IT>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8089 	beq.w	8003ce4 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4798      	blx	r3
 8003bf8:	e074      	b.n	8003ce4 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	4a5a      	ldr	r2, [pc, #360]	; (8003d68 <I2C_ITError+0x25c>)
 8003c00:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe f9dc 	bl	8001fc4 <HAL_DMA_Abort_IT>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d068      	beq.n	8003ce4 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1c:	2b40      	cmp	r3, #64	; 0x40
 8003c1e:	d10b      	bne.n	8003c38 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0201 	bic.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4798      	blx	r3
 8003c5e:	e041      	b.n	8003ce4 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b60      	cmp	r3, #96	; 0x60
 8003c6a:	d125      	bne.n	8003cb8 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c84:	2b40      	cmp	r3, #64	; 0x40
 8003c86:	d10b      	bne.n	8003ca0 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7fe ff7b 	bl	8002bac <HAL_I2C_AbortCpltCallback>
 8003cb6:	e015      	b.n	8003ce4 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc2:	2b40      	cmp	r3, #64	; 0x40
 8003cc4:	d10b      	bne.n	8003cde <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fe ff5b 	bl	8002b9a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10e      	bne.n	8003d12 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d104      	bne.n	8003d12 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d007      	beq.n	8003d22 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d20:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d28:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d113      	bne.n	8003d5e <I2C_ITError+0x252>
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	2b28      	cmp	r3, #40	; 0x28
 8003d3a:	d110      	bne.n	8003d5e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a0b      	ldr	r2, [pc, #44]	; (8003d6c <I2C_ITError+0x260>)
 8003d40:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7fe ff03 	bl	8002b64 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	08003d71 	.word	0x08003d71
 8003d6c:	ffff0000 	.word	0xffff0000

08003d70 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d88:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d8a:	4b4b      	ldr	r3, [pc, #300]	; (8003eb8 <I2C_DMAAbort+0x148>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	08db      	lsrs	r3, r3, #3
 8003d90:	4a4a      	ldr	r2, [pc, #296]	; (8003ebc <I2C_DMAAbort+0x14c>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	0a1a      	lsrs	r2, r3, #8
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	00da      	lsls	r2, r3, #3
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f043 0220 	orr.w	r2, r3, #32
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003db6:	e00a      	b.n	8003dce <I2C_DMAAbort+0x5e>
    }
    count--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dcc:	d0ea      	beq.n	8003da4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dda:	2200      	movs	r2, #0
 8003ddc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	2200      	movs	r2, #0
 8003dec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dfc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2200      	movs	r2, #0
 8003e02:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e10:	2200      	movs	r2, #0
 8003e12:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	2200      	movs	r2, #0
 8003e22:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0201 	bic.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b60      	cmp	r3, #96	; 0x60
 8003e3e:	d10e      	bne.n	8003e5e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2200      	movs	r2, #0
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e56:	6978      	ldr	r0, [r7, #20]
 8003e58:	f7fe fea8 	bl	8002bac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e5c:	e027      	b.n	8003eae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e5e:	7cfb      	ldrb	r3, [r7, #19]
 8003e60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e64:	2b28      	cmp	r3, #40	; 0x28
 8003e66:	d117      	bne.n	8003e98 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e86:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2228      	movs	r2, #40	; 0x28
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e96:	e007      	b.n	8003ea8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003ea8:	6978      	ldr	r0, [r7, #20]
 8003eaa:	f7fe fe76 	bl	8002b9a <HAL_I2C_ErrorCallback>
}
 8003eae:	bf00      	nop
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000018 	.word	0x20000018
 8003ebc:	14f8b589 	.word	0x14f8b589

08003ec0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ecc:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	08db      	lsrs	r3, r3, #3
 8003ed2:	4a13      	ldr	r2, [pc, #76]	; (8003f20 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed8:	0a1a      	lsrs	r2, r3, #8
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d107      	bne.n	8003efe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f043 0220 	orr.w	r2, r3, #32
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e008      	b.n	8003f10 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f0c:	d0e9      	beq.n	8003ee2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20000018 	.word	0x20000018
 8003f20:	14f8b589 	.word	0x14f8b589

08003f24 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f34:	d103      	bne.n	8003f3e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f3c:	e007      	b.n	8003f4e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f46:	d102      	bne.n	8003f4e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr

08003f58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f5a:	b08b      	sub	sp, #44	; 0x2c
 8003f5c:	af06      	add	r7, sp, #24
 8003f5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e0fd      	b.n	8004166 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f006 f97e 	bl	800a280 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2203      	movs	r2, #3
 8003f88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f002 fbed 	bl	8006770 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	687e      	ldr	r6, [r7, #4]
 8003f9e:	466d      	mov	r5, sp
 8003fa0:	f106 0410 	add.w	r4, r6, #16
 8003fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	602b      	str	r3, [r5, #0]
 8003fac:	1d33      	adds	r3, r6, #4
 8003fae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fb0:	6838      	ldr	r0, [r7, #0]
 8003fb2:	f002 fbb7 	bl	8006724 <USB_CoreInit>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0ce      	b.n	8004166 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2100      	movs	r1, #0
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f002 fbe8 	bl	80067a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]
 8003fd8:	e04c      	b.n	8004074 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	440b      	add	r3, r1
 8003fea:	3301      	adds	r3, #1
 8003fec:	2201      	movs	r2, #1
 8003fee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	440b      	add	r3, r1
 8004000:	7bfa      	ldrb	r2, [r7, #15]
 8004002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004004:	7bfa      	ldrb	r2, [r7, #15]
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	b298      	uxth	r0, r3
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	440b      	add	r3, r1
 8004016:	3336      	adds	r3, #54	; 0x36
 8004018:	4602      	mov	r2, r0
 800401a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	440b      	add	r3, r1
 800402c:	3303      	adds	r3, #3
 800402e:	2200      	movs	r2, #0
 8004030:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004032:	7bfa      	ldrb	r2, [r7, #15]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	440b      	add	r3, r1
 8004040:	3338      	adds	r3, #56	; 0x38
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004046:	7bfa      	ldrb	r2, [r7, #15]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	440b      	add	r3, r1
 8004054:	333c      	adds	r3, #60	; 0x3c
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800405a:	7bfa      	ldrb	r2, [r7, #15]
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	440b      	add	r3, r1
 8004068:	3340      	adds	r3, #64	; 0x40
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	3301      	adds	r3, #1
 8004072:	73fb      	strb	r3, [r7, #15]
 8004074:	7bfa      	ldrb	r2, [r7, #15]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	429a      	cmp	r2, r3
 800407c:	d3ad      	bcc.n	8003fda <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800407e:	2300      	movs	r3, #0
 8004080:	73fb      	strb	r3, [r7, #15]
 8004082:	e044      	b.n	800410e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004084:	7bfa      	ldrb	r2, [r7, #15]
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	440b      	add	r3, r1
 8004092:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004096:	2200      	movs	r2, #0
 8004098:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800409a:	7bfa      	ldrb	r2, [r7, #15]
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	440b      	add	r3, r1
 80040a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040ac:	7bfa      	ldrb	r2, [r7, #15]
 80040ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040b0:	7bfa      	ldrb	r2, [r7, #15]
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	440b      	add	r3, r1
 80040be:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80040c2:	2200      	movs	r2, #0
 80040c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040c6:	7bfa      	ldrb	r2, [r7, #15]
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	440b      	add	r3, r1
 80040d4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040dc:	7bfa      	ldrb	r2, [r7, #15]
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	440b      	add	r3, r1
 80040ea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040f2:	7bfa      	ldrb	r2, [r7, #15]
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	440b      	add	r3, r1
 8004100:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	3301      	adds	r3, #1
 800410c:	73fb      	strb	r3, [r7, #15]
 800410e:	7bfa      	ldrb	r2, [r7, #15]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	429a      	cmp	r2, r3
 8004116:	d3b5      	bcc.n	8004084 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	687e      	ldr	r6, [r7, #4]
 8004120:	466d      	mov	r5, sp
 8004122:	f106 0410 	add.w	r4, r6, #16
 8004126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	602b      	str	r3, [r5, #0]
 800412e:	1d33      	adds	r3, r6, #4
 8004130:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004132:	6838      	ldr	r0, [r7, #0]
 8004134:	f002 fb42 	bl	80067bc <USB_DevInit>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2202      	movs	r2, #2
 8004142:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e00d      	b.n	8004166 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f004 fadc 	bl	800871c <USB_DevDisconnect>

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800416e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_PCD_Start+0x16>
 8004180:	2302      	movs	r3, #2
 8004182:	e016      	b.n	80041b2 <HAL_PCD_Start+0x44>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f002 fad7 	bl	8006744 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004196:	2101      	movs	r1, #1
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f006 fae4 	bl	800a766 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f004 fab0 	bl	8008708 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b088      	sub	sp, #32
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f004 fab2 	bl	8008730 <USB_ReadInterrupts>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d6:	d102      	bne.n	80041de <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fb61 	bl	80048a0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f004 faa4 	bl	8008730 <USB_ReadInterrupts>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f2:	d112      	bne.n	800421a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004206:	b292      	uxth	r2, r2
 8004208:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f006 f8b2 	bl	800a376 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004212:	2100      	movs	r1, #0
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f925 	bl	8004464 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f004 fa86 	bl	8008730 <USB_ReadInterrupts>
 8004224:	4603      	mov	r3, r0
 8004226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800422a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800422e:	d10b      	bne.n	8004248 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004238:	b29a      	uxth	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004242:	b292      	uxth	r2, r2
 8004244:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4618      	mov	r0, r3
 800424e:	f004 fa6f 	bl	8008730 <USB_ReadInterrupts>
 8004252:	4603      	mov	r3, r0
 8004254:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800425c:	d10b      	bne.n	8004276 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004266:	b29a      	uxth	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004270:	b292      	uxth	r2, r2
 8004272:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f004 fa58 	bl	8008730 <USB_ReadInterrupts>
 8004280:	4603      	mov	r3, r0
 8004282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428a:	d126      	bne.n	80042da <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004294:	b29a      	uxth	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0204 	bic.w	r2, r2, #4
 800429e:	b292      	uxth	r2, r2
 80042a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0208 	bic.w	r2, r2, #8
 80042b6:	b292      	uxth	r2, r2
 80042b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f006 f893 	bl	800a3e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042d4:	b292      	uxth	r2, r2
 80042d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f004 fa26 	bl	8008730 <USB_ReadInterrupts>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ee:	f040 8084 	bne.w	80043fa <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80042f2:	2300      	movs	r3, #0
 80042f4:	77fb      	strb	r3, [r7, #31]
 80042f6:	e011      	b.n	800431c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	7ffb      	ldrb	r3, [r7, #31]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	441a      	add	r2, r3
 8004304:	7ffb      	ldrb	r3, [r7, #31]
 8004306:	8812      	ldrh	r2, [r2, #0]
 8004308:	b292      	uxth	r2, r2
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	f107 0120 	add.w	r1, r7, #32
 8004310:	440b      	add	r3, r1
 8004312:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004316:	7ffb      	ldrb	r3, [r7, #31]
 8004318:	3301      	adds	r3, #1
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	7ffb      	ldrb	r3, [r7, #31]
 800431e:	2b07      	cmp	r3, #7
 8004320:	d9ea      	bls.n	80042f8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800432a:	b29a      	uxth	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f042 0201 	orr.w	r2, r2, #1
 8004334:	b292      	uxth	r2, r2
 8004336:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004342:	b29a      	uxth	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	b292      	uxth	r2, r2
 800434e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004352:	bf00      	nop
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800435c:	b29b      	uxth	r3, r3
 800435e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f6      	beq.n	8004354 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800436e:	b29a      	uxth	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004378:	b292      	uxth	r2, r2
 800437a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800437e:	2300      	movs	r3, #0
 8004380:	77fb      	strb	r3, [r7, #31]
 8004382:	e010      	b.n	80043a6 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004384:	7ffb      	ldrb	r3, [r7, #31]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	4611      	mov	r1, r2
 800438c:	7ffa      	ldrb	r2, [r7, #31]
 800438e:	0092      	lsls	r2, r2, #2
 8004390:	440a      	add	r2, r1
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	f107 0120 	add.w	r1, r7, #32
 8004398:	440b      	add	r3, r1
 800439a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800439e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80043a0:	7ffb      	ldrb	r3, [r7, #31]
 80043a2:	3301      	adds	r3, #1
 80043a4:	77fb      	strb	r3, [r7, #31]
 80043a6:	7ffb      	ldrb	r3, [r7, #31]
 80043a8:	2b07      	cmp	r3, #7
 80043aa:	d9eb      	bls.n	8004384 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0208 	orr.w	r2, r2, #8
 80043be:	b292      	uxth	r2, r2
 80043c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d6:	b292      	uxth	r2, r2
 80043d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0204 	orr.w	r2, r2, #4
 80043ee:	b292      	uxth	r2, r2
 80043f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f005 ffdd 	bl	800a3b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f004 f996 	bl	8008730 <USB_ReadInterrupts>
 8004404:	4603      	mov	r3, r0
 8004406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800440a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800440e:	d10e      	bne.n	800442e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004418:	b29a      	uxth	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004422:	b292      	uxth	r2, r2
 8004424:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f005 ff96 	bl	800a35a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f004 f97c 	bl	8008730 <USB_ReadInterrupts>
 8004438:	4603      	mov	r3, r0
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004442:	d10b      	bne.n	800445c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800444c:	b29a      	uxth	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004456:	b292      	uxth	r2, r2
 8004458:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800445c:	bf00      	nop
 800445e:	3720      	adds	r7, #32
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_PCD_SetAddress+0x1a>
 800447a:	2302      	movs	r3, #2
 800447c:	e013      	b.n	80044a6 <HAL_PCD_SetAddress+0x42>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	78fa      	ldrb	r2, [r7, #3]
 800448a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	78fa      	ldrb	r2, [r7, #3]
 8004494:	4611      	mov	r1, r2
 8004496:	4618      	mov	r0, r3
 8004498:	f004 f923 	bl	80086e2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b084      	sub	sp, #16
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	4608      	mov	r0, r1
 80044b8:	4611      	mov	r1, r2
 80044ba:	461a      	mov	r2, r3
 80044bc:	4603      	mov	r3, r0
 80044be:	70fb      	strb	r3, [r7, #3]
 80044c0:	460b      	mov	r3, r1
 80044c2:	803b      	strh	r3, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	da0e      	bge.n	80044f2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	4413      	add	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	705a      	strb	r2, [r3, #1]
 80044f0:	e00e      	b.n	8004510 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	f003 0207 	and.w	r2, r3, #7
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	4413      	add	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	b2da      	uxtb	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800451c:	883a      	ldrh	r2, [r7, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	78ba      	ldrb	r2, [r7, #2]
 8004526:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	785b      	ldrb	r3, [r3, #1]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d004      	beq.n	800453a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800453a:	78bb      	ldrb	r3, [r7, #2]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d102      	bne.n	8004546 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_PCD_EP_Open+0xa6>
 8004550:	2302      	movs	r3, #2
 8004552:	e00e      	b.n	8004572 <HAL_PCD_EP_Open+0xc4>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68f9      	ldr	r1, [r7, #12]
 8004562:	4618      	mov	r0, r3
 8004564:	f002 f94a 	bl	80067fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004570:	7afb      	ldrb	r3, [r7, #11]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	460b      	mov	r3, r1
 8004584:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004586:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800458a:	2b00      	cmp	r3, #0
 800458c:	da0e      	bge.n	80045ac <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800458e:	78fb      	ldrb	r3, [r7, #3]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	4613      	mov	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	4413      	add	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2201      	movs	r2, #1
 80045a8:	705a      	strb	r2, [r3, #1]
 80045aa:	e00e      	b.n	80045ca <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045ac:	78fb      	ldrb	r3, [r7, #3]
 80045ae:	f003 0207 	and.w	r2, r3, #7
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4413      	add	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80045ca:	78fb      	ldrb	r3, [r7, #3]
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_PCD_EP_Close+0x6a>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e00e      	b.n	8004602 <HAL_PCD_EP_Close+0x88>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68f9      	ldr	r1, [r7, #12]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f002 fc6c 	bl	8006ed0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b086      	sub	sp, #24
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
 8004616:	460b      	mov	r3, r1
 8004618:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800461a:	7afb      	ldrb	r3, [r7, #11]
 800461c:	f003 0207 	and.w	r2, r3, #7
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4413      	add	r3, r2
 8004630:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2200      	movs	r2, #0
 8004642:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2200      	movs	r2, #0
 8004648:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800464a:	7afb      	ldrb	r3, [r7, #11]
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	b2da      	uxtb	r2, r3
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004656:	7afb      	ldrb	r3, [r7, #11]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6979      	ldr	r1, [r7, #20]
 8004666:	4618      	mov	r0, r3
 8004668:	f002 fe1e 	bl	80072a8 <USB_EPStartXfer>
 800466c:	e005      	b.n	800467a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6979      	ldr	r1, [r7, #20]
 8004674:	4618      	mov	r0, r3
 8004676:	f002 fe17 	bl	80072a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004690:	78fb      	ldrb	r3, [r7, #3]
 8004692:	f003 0207 	and.w	r2, r3, #7
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	440b      	add	r3, r1
 80046a2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80046a6:	681b      	ldr	r3, [r3, #0]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr

080046b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b086      	sub	sp, #24
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	460b      	mov	r3, r1
 80046c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046c2:	7afb      	ldrb	r3, [r7, #11]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4413      	add	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2200      	movs	r2, #0
 80046f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2201      	movs	r2, #1
 80046fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046fe:	7afb      	ldrb	r3, [r7, #11]
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	b2da      	uxtb	r2, r3
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800470a:	7afb      	ldrb	r3, [r7, #11]
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	2b00      	cmp	r3, #0
 8004712:	d106      	bne.n	8004722 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6979      	ldr	r1, [r7, #20]
 800471a:	4618      	mov	r0, r3
 800471c:	f002 fdc4 	bl	80072a8 <USB_EPStartXfer>
 8004720:	e005      	b.n	800472e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6979      	ldr	r1, [r7, #20]
 8004728:	4618      	mov	r0, r3
 800472a:	f002 fdbd 	bl	80072a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	f003 0207 	and.w	r2, r3, #7
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	429a      	cmp	r2, r3
 8004750:	d901      	bls.n	8004756 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e04c      	b.n	80047f0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004756:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800475a:	2b00      	cmp	r3, #0
 800475c:	da0e      	bge.n	800477c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800475e:	78fb      	ldrb	r3, [r7, #3]
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	4413      	add	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	705a      	strb	r2, [r3, #1]
 800477a:	e00c      	b.n	8004796 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800477c:	78fa      	ldrb	r2, [r7, #3]
 800477e:	4613      	mov	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	4413      	add	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800479c:	78fb      	ldrb	r3, [r7, #3]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_PCD_EP_SetStall+0x7e>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e01c      	b.n	80047f0 <HAL_PCD_EP_SetStall+0xb8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68f9      	ldr	r1, [r7, #12]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f003 fe8f 	bl	80084e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d108      	bne.n	80047e6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f003 ffb4 	bl	800874e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	f003 020f 	and.w	r2, r3, #15
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	429a      	cmp	r2, r3
 8004810:	d901      	bls.n	8004816 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e040      	b.n	8004898 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800481a:	2b00      	cmp	r3, #0
 800481c:	da0e      	bge.n	800483c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2201      	movs	r2, #1
 8004838:	705a      	strb	r2, [r3, #1]
 800483a:	e00e      	b.n	800485a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	f003 0207 	and.w	r2, r3, #7
 8004842:	4613      	mov	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	4413      	add	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	b2da      	uxtb	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_PCD_EP_ClrStall+0x82>
 8004876:	2302      	movs	r3, #2
 8004878:	e00e      	b.n	8004898 <HAL_PCD_EP_ClrStall+0xa0>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68f9      	ldr	r1, [r7, #12]
 8004888:	4618      	mov	r0, r3
 800488a:	f003 fe7d 	bl	8008588 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08e      	sub	sp, #56	; 0x38
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80048a8:	e2df      	b.n	8004e6a <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048b2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80048b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	f003 030f 	and.w	r3, r3, #15
 80048bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80048c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f040 8158 	bne.w	8004b7a <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80048ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d152      	bne.n	800497a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80048e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e4:	81fb      	strh	r3, [r7, #14]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	89fb      	ldrh	r3, [r7, #14]
 80048ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3328      	adds	r3, #40	; 0x28
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004906:	b29b      	uxth	r3, r3
 8004908:	461a      	mov	r2, r3
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4413      	add	r3, r2
 8004912:	3302      	adds	r3, #2
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	695a      	ldr	r2, [r3, #20]
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	441a      	add	r2, r3
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004938:	2100      	movs	r1, #0
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f005 fcf3 	bl	800a326 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 828e 	beq.w	8004e6a <PCD_EP_ISR_Handler+0x5ca>
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 8289 	bne.w	8004e6a <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800495e:	b2db      	uxtb	r3, r3
 8004960:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004964:	b2da      	uxtb	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	b292      	uxth	r2, r2
 800496c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004978:	e277      	b.n	8004e6a <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800498a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800498c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004990:	2b00      	cmp	r3, #0
 8004992:	d034      	beq.n	80049fe <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800499c:	b29b      	uxth	r3, r3
 800499e:	461a      	mov	r2, r3
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	4413      	add	r3, r2
 80049a8:	3306      	adds	r3, #6
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f003 ff0a 	bl	80087ec <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	b29a      	uxth	r2, r3
 80049e0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80049e4:	4013      	ands	r3, r2
 80049e6:	823b      	strh	r3, [r7, #16]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	8a3a      	ldrh	r2, [r7, #16]
 80049ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049f2:	b292      	uxth	r2, r2
 80049f4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f005 fc68 	bl	800a2cc <HAL_PCD_SetupStageCallback>
 80049fc:	e235      	b.n	8004e6a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80049fe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f280 8231 	bge.w	8004e6a <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a14:	4013      	ands	r3, r2
 8004a16:	83bb      	strh	r3, [r7, #28]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	8bba      	ldrh	r2, [r7, #28]
 8004a1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a22:	b292      	uxth	r2, r2
 8004a24:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	4413      	add	r3, r2
 8004a3a:	3306      	adds	r3, #6
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d019      	beq.n	8004a8e <PCD_EP_ISR_Handler+0x1ee>
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d015      	beq.n	8004a8e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	6959      	ldr	r1, [r3, #20]
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f003 feba 	bl	80087ec <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	695a      	ldr	r2, [r3, #20]
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	441a      	add	r2, r3
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004a86:	2100      	movs	r1, #0
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f005 fc31 	bl	800a2f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d112      	bne.n	8004adc <PCD_EP_ISR_Handler+0x23c>
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	801a      	strh	r2, [r3, #0]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	801a      	strh	r2, [r3, #0]
 8004ada:	e02f      	b.n	8004b3c <PCD_EP_ISR_Handler+0x29c>
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ae2:	d813      	bhi.n	8004b0c <PCD_EP_ISR_Handler+0x26c>
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	085b      	lsrs	r3, r3, #1
 8004aea:	633b      	str	r3, [r7, #48]	; 0x30
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <PCD_EP_ISR_Handler+0x25e>
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	3301      	adds	r3, #1
 8004afc:	633b      	str	r3, [r7, #48]	; 0x30
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	029b      	lsls	r3, r3, #10
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	801a      	strh	r2, [r3, #0]
 8004b0a:	e017      	b.n	8004b3c <PCD_EP_ISR_Handler+0x29c>
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	633b      	str	r3, [r7, #48]	; 0x30
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d102      	bne.n	8004b26 <PCD_EP_ISR_Handler+0x286>
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	3b01      	subs	r3, #1
 8004b24:	633b      	str	r3, [r7, #48]	; 0x30
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	029b      	lsls	r3, r3, #10
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4c:	827b      	strh	r3, [r7, #18]
 8004b4e:	8a7b      	ldrh	r3, [r7, #18]
 8004b50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b54:	827b      	strh	r3, [r7, #18]
 8004b56:	8a7b      	ldrh	r3, [r7, #18]
 8004b58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b5c:	827b      	strh	r3, [r7, #18]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	8a7b      	ldrh	r3, [r7, #18]
 8004b64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	8013      	strh	r3, [r2, #0]
 8004b78:	e177      	b.n	8004e6a <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b8c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f280 80ea 	bge.w	8004d6a <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004bac:	4013      	ands	r3, r2
 8004bae:	853b      	strh	r3, [r7, #40]	; 0x28
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004bc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bc4:	b292      	uxth	r2, r2
 8004bc6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004bc8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	4413      	add	r3, r2
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	7b1b      	ldrb	r3, [r3, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d122      	bne.n	8004c2c <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	3306      	adds	r3, #6
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6812      	ldr	r2, [r2, #0]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c0e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004c10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 8087 	beq.w	8004d26 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	6959      	ldr	r1, [r3, #20]
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	88da      	ldrh	r2, [r3, #6]
 8004c24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c26:	f003 fde1 	bl	80087ec <USB_ReadPMA>
 8004c2a:	e07c      	b.n	8004d26 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	78db      	ldrb	r3, [r3, #3]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d108      	bne.n	8004c46 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004c34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c36:	461a      	mov	r2, r3
 8004c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f923 	bl	8004e86 <HAL_PCD_EP_DB_Receive>
 8004c40:	4603      	mov	r3, r0
 8004c42:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004c44:	e06f      	b.n	8004d26 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c60:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	441a      	add	r2, r3
 8004c70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d021      	beq.n	8004ce4 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	461a      	mov	r2, r3
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	4413      	add	r3, r2
 8004cb4:	3302      	adds	r3, #2
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6812      	ldr	r2, [r2, #0]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cc8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004cca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d02a      	beq.n	8004d26 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6818      	ldr	r0, [r3, #0]
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	6959      	ldr	r1, [r3, #20]
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	891a      	ldrh	r2, [r3, #8]
 8004cdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004cde:	f003 fd85 	bl	80087ec <USB_ReadPMA>
 8004ce2:	e020      	b.n	8004d26 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3306      	adds	r3, #6
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d0c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004d0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	6959      	ldr	r1, [r3, #20]
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	895a      	ldrh	r2, [r3, #10]
 8004d20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d22:	f003 fd63 	bl	80087ec <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	69da      	ldr	r2, [r3, #28]
 8004d2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d2c:	441a      	add	r2, r3
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	695a      	ldr	r2, [r3, #20]
 8004d36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d38:	441a      	add	r2, r3
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d004      	beq.n	8004d50 <PCD_EP_ISR_Handler+0x4b0>
 8004d46:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d206      	bcs.n	8004d5e <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	4619      	mov	r1, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f005 faca 	bl	800a2f0 <HAL_PCD_DataOutStageCallback>
 8004d5c:	e005      	b.n	8004d6a <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d64:	4618      	mov	r0, r3
 8004d66:	f002 fa9f 	bl	80072a8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004d6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d07a      	beq.n	8004e6a <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8004d74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	4413      	add	r3, r2
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da2:	843b      	strh	r3, [r7, #32]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	441a      	add	r2, r3
 8004db2:	8c3b      	ldrh	r3, [r7, #32]
 8004db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	78db      	ldrb	r3, [r3, #3]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d108      	bne.n	8004dda <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d146      	bne.n	8004e5e <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004dd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d141      	bne.n	8004e5e <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	461a      	mov	r2, r3
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4413      	add	r3, r2
 8004dee:	3302      	adds	r3, #2
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6812      	ldr	r2, [r2, #0]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e02:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	699a      	ldr	r2, [r3, #24]
 8004e08:	8bfb      	ldrh	r3, [r7, #30]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d906      	bls.n	8004e1c <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	8bfb      	ldrh	r3, [r7, #30]
 8004e14:	1ad2      	subs	r2, r2, r3
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	619a      	str	r2, [r3, #24]
 8004e1a:	e002      	b.n	8004e22 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	2200      	movs	r2, #0
 8004e20:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f005 fa78 	bl	800a326 <HAL_PCD_DataInStageCallback>
 8004e36:	e018      	b.n	8004e6a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	695a      	ldr	r2, [r3, #20]
 8004e3c:	8bfb      	ldrh	r3, [r7, #30]
 8004e3e:	441a      	add	r2, r3
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	69da      	ldr	r2, [r3, #28]
 8004e48:	8bfb      	ldrh	r3, [r7, #30]
 8004e4a:	441a      	add	r2, r3
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e56:	4618      	mov	r0, r3
 8004e58:	f002 fa26 	bl	80072a8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004e5c:	e005      	b.n	8004e6a <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004e5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e60:	461a      	mov	r2, r3
 8004e62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f91b 	bl	80050a0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	b21b      	sxth	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f6ff ad17 	blt.w	80048aa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3738      	adds	r7, #56	; 0x38
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b088      	sub	sp, #32
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	4613      	mov	r3, r2
 8004e92:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d07e      	beq.n	8004f9c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	3302      	adds	r3, #2
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ec6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	699a      	ldr	r2, [r3, #24]
 8004ecc:	8b7b      	ldrh	r3, [r7, #26]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d306      	bcc.n	8004ee0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	8b7b      	ldrh	r3, [r7, #26]
 8004ed8:	1ad2      	subs	r2, r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	619a      	str	r2, [r3, #24]
 8004ede:	e002      	b.n	8004ee6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d123      	bne.n	8004f36 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f08:	833b      	strh	r3, [r7, #24]
 8004f0a:	8b3b      	ldrh	r3, [r7, #24]
 8004f0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f10:	833b      	strh	r3, [r7, #24]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	441a      	add	r2, r3
 8004f20:	8b3b      	ldrh	r3, [r7, #24]
 8004f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01f      	beq.n	8004f80 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	461a      	mov	r2, r3
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5a:	82fb      	strh	r3, [r7, #22]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	461a      	mov	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	441a      	add	r2, r3
 8004f6a:	8afb      	ldrh	r3, [r7, #22]
 8004f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004f80:	8b7b      	ldrh	r3, [r7, #26]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8087 	beq.w	8005096 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	6959      	ldr	r1, [r3, #20]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	891a      	ldrh	r2, [r3, #8]
 8004f94:	8b7b      	ldrh	r3, [r7, #26]
 8004f96:	f003 fc29 	bl	80087ec <USB_ReadPMA>
 8004f9a:	e07c      	b.n	8005096 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	4413      	add	r3, r2
 8004fb0:	3306      	adds	r3, #6
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fc4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	8b7b      	ldrh	r3, [r7, #26]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d306      	bcc.n	8004fde <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	699a      	ldr	r2, [r3, #24]
 8004fd4:	8b7b      	ldrh	r3, [r7, #26]
 8004fd6:	1ad2      	subs	r2, r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	619a      	str	r2, [r3, #24]
 8004fdc:	e002      	b.n	8004fe4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d123      	bne.n	8005034 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005006:	83fb      	strh	r3, [r7, #30]
 8005008:	8bfb      	ldrh	r3, [r7, #30]
 800500a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800500e:	83fb      	strh	r3, [r7, #30]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	461a      	mov	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	441a      	add	r2, r3
 800501e:	8bfb      	ldrh	r3, [r7, #30]
 8005020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800502c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005030:	b29b      	uxth	r3, r3
 8005032:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005034:	88fb      	ldrh	r3, [r7, #6]
 8005036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d11f      	bne.n	800507e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005058:	83bb      	strh	r3, [r7, #28]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	441a      	add	r2, r3
 8005068:	8bbb      	ldrh	r3, [r7, #28]
 800506a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800506e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005076:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800507a:	b29b      	uxth	r3, r3
 800507c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800507e:	8b7b      	ldrh	r3, [r7, #26]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6818      	ldr	r0, [r3, #0]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	6959      	ldr	r1, [r3, #20]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	895a      	ldrh	r2, [r3, #10]
 8005090:	8b7b      	ldrh	r3, [r7, #26]
 8005092:	f003 fbab 	bl	80087ec <USB_ReadPMA>
    }
  }

  return count;
 8005096:	8b7b      	ldrh	r3, [r7, #26]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3720      	adds	r7, #32
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b092      	sub	sp, #72	; 0x48
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	4613      	mov	r3, r2
 80050ac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 8132 	beq.w	800531e <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	4413      	add	r3, r2
 80050ce:	3302      	adds	r3, #2
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050e2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	699a      	ldr	r2, [r3, #24]
 80050e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d906      	bls.n	80050fc <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050f4:	1ad2      	subs	r2, r2, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	619a      	str	r2, [r3, #24]
 80050fa:	e002      	b.n	8005102 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2200      	movs	r2, #0
 8005100:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d12c      	bne.n	8005164 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	4619      	mov	r1, r3
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f005 f908 	bl	800a326 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 822f 	beq.w	8005580 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513c:	827b      	strh	r3, [r7, #18]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	441a      	add	r2, r3
 800514c:	8a7b      	ldrh	r3, [r7, #18]
 800514e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005156:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800515a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515e:	b29b      	uxth	r3, r3
 8005160:	8013      	strh	r3, [r2, #0]
 8005162:	e20d      	b.n	8005580 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005164:	88fb      	ldrh	r3, [r7, #6]
 8005166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d01f      	beq.n	80051ae <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005188:	84bb      	strh	r3, [r7, #36]	; 0x24
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	461a      	mov	r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	441a      	add	r2, r3
 8005198:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800519a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800519e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	f040 81e3 	bne.w	8005580 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051c0:	441a      	add	r2, r3
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	69da      	ldr	r2, [r3, #28]
 80051ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051cc:	441a      	add	r2, r3
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	6a1a      	ldr	r2, [r3, #32]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d309      	bcc.n	80051f2 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	6a1a      	ldr	r2, [r3, #32]
 80051e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ea:	1ad2      	subs	r2, r2, r3
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	621a      	str	r2, [r3, #32]
 80051f0:	e014      	b.n	800521c <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80051fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051fc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005206:	e009      	b.n	800521c <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2200      	movs	r2, #0
 800521a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	785b      	ldrb	r3, [r3, #1]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d155      	bne.n	80052d0 <HAL_PCD_EP_DB_Transmit+0x230>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	61bb      	str	r3, [r7, #24]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005232:	b29b      	uxth	r3, r3
 8005234:	461a      	mov	r2, r3
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	4413      	add	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	011a      	lsls	r2, r3, #4
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	4413      	add	r3, r2
 8005246:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	2b00      	cmp	r3, #0
 8005250:	d112      	bne.n	8005278 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	b29b      	uxth	r3, r3
 8005258:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800525c:	b29a      	uxth	r2, r3
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	801a      	strh	r2, [r3, #0]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29b      	uxth	r3, r3
 8005268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800526c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005270:	b29a      	uxth	r2, r3
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	801a      	strh	r2, [r3, #0]
 8005276:	e047      	b.n	8005308 <HAL_PCD_EP_DB_Transmit+0x268>
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	2b3e      	cmp	r3, #62	; 0x3e
 800527c:	d811      	bhi.n	80052a2 <HAL_PCD_EP_DB_Transmit+0x202>
 800527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005280:	085b      	lsrs	r3, r3, #1
 8005282:	62bb      	str	r3, [r7, #40]	; 0x28
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_PCD_EP_DB_Transmit+0x1f4>
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	3301      	adds	r3, #1
 8005292:	62bb      	str	r3, [r7, #40]	; 0x28
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	b29b      	uxth	r3, r3
 8005298:	029b      	lsls	r3, r3, #10
 800529a:	b29a      	uxth	r2, r3
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	801a      	strh	r2, [r3, #0]
 80052a0:	e032      	b.n	8005308 <HAL_PCD_EP_DB_Transmit+0x268>
 80052a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a4:	095b      	lsrs	r3, r3, #5
 80052a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	f003 031f 	and.w	r3, r3, #31
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d102      	bne.n	80052b8 <HAL_PCD_EP_DB_Transmit+0x218>
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	3b01      	subs	r3, #1
 80052b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	029b      	lsls	r3, r3, #10
 80052be:	b29b      	uxth	r3, r3
 80052c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	801a      	strh	r2, [r3, #0]
 80052ce:	e01b      	b.n	8005308 <HAL_PCD_EP_DB_Transmit+0x268>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	785b      	ldrb	r3, [r3, #1]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d117      	bne.n	8005308 <HAL_PCD_EP_DB_Transmit+0x268>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	623b      	str	r3, [r7, #32]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	4413      	add	r3, r2
 80052ee:	623b      	str	r3, [r7, #32]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	011a      	lsls	r2, r3, #4
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	4413      	add	r3, r2
 80052fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052fe:	61fb      	str	r3, [r7, #28]
 8005300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005302:	b29a      	uxth	r2, r3
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6818      	ldr	r0, [r3, #0]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	6959      	ldr	r1, [r3, #20]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	891a      	ldrh	r2, [r3, #8]
 8005314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005316:	b29b      	uxth	r3, r3
 8005318:	f003 fa24 	bl	8008764 <USB_WritePMA>
 800531c:	e130      	b.n	8005580 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005326:	b29b      	uxth	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	4413      	add	r3, r2
 8005332:	3306      	adds	r3, #6
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005346:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	699a      	ldr	r2, [r3, #24]
 800534c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800534e:	429a      	cmp	r2, r3
 8005350:	d306      	bcc.n	8005360 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	699a      	ldr	r2, [r3, #24]
 8005356:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005358:	1ad2      	subs	r2, r2, r3
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	619a      	str	r2, [r3, #24]
 800535e:	e002      	b.n	8005366 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2200      	movs	r2, #0
 8005364:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d12c      	bne.n	80053c8 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	4619      	mov	r1, r3
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f004 ffd6 	bl	800a326 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800537a:	88fb      	ldrh	r3, [r7, #6]
 800537c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005380:	2b00      	cmp	r3, #0
 8005382:	f040 80fd 	bne.w	8005580 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800539c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	441a      	add	r2, r3
 80053b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	8013      	strh	r3, [r2, #0]
 80053c6:	e0db      	b.n	8005580 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80053c8:	88fb      	ldrh	r3, [r7, #6]
 80053ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d11f      	bne.n	8005412 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ec:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	441a      	add	r2, r3
 80053fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80053fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005406:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800540a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800540e:	b29b      	uxth	r3, r3
 8005410:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005418:	2b01      	cmp	r3, #1
 800541a:	f040 80b1 	bne.w	8005580 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	695a      	ldr	r2, [r3, #20]
 8005422:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005424:	441a      	add	r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	69da      	ldr	r2, [r3, #28]
 800542e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005430:	441a      	add	r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	6a1a      	ldr	r2, [r3, #32]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	429a      	cmp	r2, r3
 8005440:	d309      	bcc.n	8005456 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	6a1a      	ldr	r2, [r3, #32]
 800544c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544e:	1ad2      	subs	r2, r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	621a      	str	r2, [r3, #32]
 8005454:	e014      	b.n	8005480 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 800545e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005460:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800546a:	e009      	b.n	8005480 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2200      	movs	r2, #0
 8005476:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	637b      	str	r3, [r7, #52]	; 0x34
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	785b      	ldrb	r3, [r3, #1]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d155      	bne.n	800553a <HAL_PCD_EP_DB_Transmit+0x49a>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	647b      	str	r3, [r7, #68]	; 0x44
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800549c:	b29b      	uxth	r3, r3
 800549e:	461a      	mov	r2, r3
 80054a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a2:	4413      	add	r3, r2
 80054a4:	647b      	str	r3, [r7, #68]	; 0x44
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	011a      	lsls	r2, r3, #4
 80054ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ae:	4413      	add	r3, r2
 80054b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054b4:	643b      	str	r3, [r7, #64]	; 0x40
 80054b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d112      	bne.n	80054e2 <HAL_PCD_EP_DB_Transmit+0x442>
 80054bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ca:	801a      	strh	r2, [r3, #0]
 80054cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054da:	b29a      	uxth	r2, r3
 80054dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054de:	801a      	strh	r2, [r3, #0]
 80054e0:	e044      	b.n	800556c <HAL_PCD_EP_DB_Transmit+0x4cc>
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	2b3e      	cmp	r3, #62	; 0x3e
 80054e6:	d811      	bhi.n	800550c <HAL_PCD_EP_DB_Transmit+0x46c>
 80054e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ea:	085b      	lsrs	r3, r3, #1
 80054ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <HAL_PCD_EP_DB_Transmit+0x45e>
 80054f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fa:	3301      	adds	r3, #1
 80054fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005500:	b29b      	uxth	r3, r3
 8005502:	029b      	lsls	r3, r3, #10
 8005504:	b29a      	uxth	r2, r3
 8005506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005508:	801a      	strh	r2, [r3, #0]
 800550a:	e02f      	b.n	800556c <HAL_PCD_EP_DB_Transmit+0x4cc>
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <HAL_PCD_EP_DB_Transmit+0x482>
 800551c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551e:	3b01      	subs	r3, #1
 8005520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005524:	b29b      	uxth	r3, r3
 8005526:	029b      	lsls	r3, r3, #10
 8005528:	b29b      	uxth	r3, r3
 800552a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800552e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005532:	b29a      	uxth	r2, r3
 8005534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	e018      	b.n	800556c <HAL_PCD_EP_DB_Transmit+0x4cc>
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	785b      	ldrb	r3, [r3, #1]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d114      	bne.n	800556c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554a:	b29b      	uxth	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005550:	4413      	add	r3, r2
 8005552:	637b      	str	r3, [r7, #52]	; 0x34
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	011a      	lsls	r2, r3, #4
 800555a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555c:	4413      	add	r3, r2
 800555e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005562:	633b      	str	r3, [r7, #48]	; 0x30
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	b29a      	uxth	r2, r3
 8005568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	6959      	ldr	r1, [r3, #20]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	895a      	ldrh	r2, [r3, #10]
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	b29b      	uxth	r3, r3
 800557c:	f003 f8f2 	bl	8008764 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	b29b      	uxth	r3, r3
 8005592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800559a:	823b      	strh	r3, [r7, #16]
 800559c:	8a3b      	ldrh	r3, [r7, #16]
 800559e:	f083 0310 	eor.w	r3, r3, #16
 80055a2:	823b      	strh	r3, [r7, #16]
 80055a4:	8a3b      	ldrh	r3, [r7, #16]
 80055a6:	f083 0320 	eor.w	r3, r3, #32
 80055aa:	823b      	strh	r3, [r7, #16]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	441a      	add	r2, r3
 80055ba:	8a3b      	ldrh	r3, [r7, #16]
 80055bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3748      	adds	r7, #72	; 0x48
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80055da:	b480      	push	{r7}
 80055dc:	b087      	sub	sp, #28
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	607b      	str	r3, [r7, #4]
 80055e4:	460b      	mov	r3, r1
 80055e6:	817b      	strh	r3, [r7, #10]
 80055e8:	4613      	mov	r3, r2
 80055ea:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80055ec:	897b      	ldrh	r3, [r7, #10]
 80055ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00b      	beq.n	8005610 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055f8:	897b      	ldrh	r3, [r7, #10]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	4613      	mov	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	e009      	b.n	8005624 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005610:	897a      	ldrh	r2, [r7, #10]
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4413      	add	r3, r2
 8005622:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005624:	893b      	ldrh	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d107      	bne.n	800563a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2200      	movs	r2, #0
 800562e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	b29a      	uxth	r2, r3
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	80da      	strh	r2, [r3, #6]
 8005638:	e00b      	b.n	8005652 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2201      	movs	r2, #1
 800563e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	b29a      	uxth	r2, r3
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	0c1b      	lsrs	r3, r3, #16
 800564c:	b29a      	uxth	r2, r3
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	371c      	adds	r7, #28
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr
	...

08005660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e26c      	b.n	8005b4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 8087 	beq.w	800578e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005680:	4b92      	ldr	r3, [pc, #584]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f003 030c 	and.w	r3, r3, #12
 8005688:	2b04      	cmp	r3, #4
 800568a:	d00c      	beq.n	80056a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800568c:	4b8f      	ldr	r3, [pc, #572]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f003 030c 	and.w	r3, r3, #12
 8005694:	2b08      	cmp	r3, #8
 8005696:	d112      	bne.n	80056be <HAL_RCC_OscConfig+0x5e>
 8005698:	4b8c      	ldr	r3, [pc, #560]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a4:	d10b      	bne.n	80056be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a6:	4b89      	ldr	r3, [pc, #548]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d06c      	beq.n	800578c <HAL_RCC_OscConfig+0x12c>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d168      	bne.n	800578c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e246      	b.n	8005b4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c6:	d106      	bne.n	80056d6 <HAL_RCC_OscConfig+0x76>
 80056c8:	4b80      	ldr	r3, [pc, #512]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a7f      	ldr	r2, [pc, #508]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 80056ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	e02e      	b.n	8005734 <HAL_RCC_OscConfig+0xd4>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10c      	bne.n	80056f8 <HAL_RCC_OscConfig+0x98>
 80056de:	4b7b      	ldr	r3, [pc, #492]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a7a      	ldr	r2, [pc, #488]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 80056e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	4b78      	ldr	r3, [pc, #480]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a77      	ldr	r2, [pc, #476]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 80056f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	e01d      	b.n	8005734 <HAL_RCC_OscConfig+0xd4>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005700:	d10c      	bne.n	800571c <HAL_RCC_OscConfig+0xbc>
 8005702:	4b72      	ldr	r3, [pc, #456]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a71      	ldr	r2, [pc, #452]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 8005708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	4b6f      	ldr	r3, [pc, #444]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a6e      	ldr	r2, [pc, #440]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 8005714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	e00b      	b.n	8005734 <HAL_RCC_OscConfig+0xd4>
 800571c:	4b6b      	ldr	r3, [pc, #428]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a6a      	ldr	r2, [pc, #424]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 8005722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	4b68      	ldr	r3, [pc, #416]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a67      	ldr	r2, [pc, #412]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 800572e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005732:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d013      	beq.n	8005764 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573c:	f7fc f8c6 	bl	80018cc <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005744:	f7fc f8c2 	bl	80018cc <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b64      	cmp	r3, #100	; 0x64
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e1fa      	b.n	8005b4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005756:	4b5d      	ldr	r3, [pc, #372]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0f0      	beq.n	8005744 <HAL_RCC_OscConfig+0xe4>
 8005762:	e014      	b.n	800578e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005764:	f7fc f8b2 	bl	80018cc <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800576c:	f7fc f8ae 	bl	80018cc <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b64      	cmp	r3, #100	; 0x64
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e1e6      	b.n	8005b4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800577e:	4b53      	ldr	r3, [pc, #332]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f0      	bne.n	800576c <HAL_RCC_OscConfig+0x10c>
 800578a:	e000      	b.n	800578e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800578c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d063      	beq.n	8005862 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800579a:	4b4c      	ldr	r3, [pc, #304]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f003 030c 	and.w	r3, r3, #12
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00b      	beq.n	80057be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80057a6:	4b49      	ldr	r3, [pc, #292]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f003 030c 	and.w	r3, r3, #12
 80057ae:	2b08      	cmp	r3, #8
 80057b0:	d11c      	bne.n	80057ec <HAL_RCC_OscConfig+0x18c>
 80057b2:	4b46      	ldr	r3, [pc, #280]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d116      	bne.n	80057ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057be:	4b43      	ldr	r3, [pc, #268]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <HAL_RCC_OscConfig+0x176>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d001      	beq.n	80057d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e1ba      	b.n	8005b4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d6:	4b3d      	ldr	r3, [pc, #244]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	4939      	ldr	r1, [pc, #228]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ea:	e03a      	b.n	8005862 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d020      	beq.n	8005836 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057f4:	4b36      	ldr	r3, [pc, #216]	; (80058d0 <HAL_RCC_OscConfig+0x270>)
 80057f6:	2201      	movs	r2, #1
 80057f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fa:	f7fc f867 	bl	80018cc <HAL_GetTick>
 80057fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005800:	e008      	b.n	8005814 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005802:	f7fc f863 	bl	80018cc <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b02      	cmp	r3, #2
 800580e:	d901      	bls.n	8005814 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e19b      	b.n	8005b4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005814:	4b2d      	ldr	r3, [pc, #180]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0f0      	beq.n	8005802 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005820:	4b2a      	ldr	r3, [pc, #168]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	4927      	ldr	r1, [pc, #156]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 8005830:	4313      	orrs	r3, r2
 8005832:	600b      	str	r3, [r1, #0]
 8005834:	e015      	b.n	8005862 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005836:	4b26      	ldr	r3, [pc, #152]	; (80058d0 <HAL_RCC_OscConfig+0x270>)
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800583c:	f7fc f846 	bl	80018cc <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005844:	f7fc f842 	bl	80018cc <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e17a      	b.n	8005b4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005856:	4b1d      	ldr	r3, [pc, #116]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f0      	bne.n	8005844 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d03a      	beq.n	80058e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d019      	beq.n	80058aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005876:	4b17      	ldr	r3, [pc, #92]	; (80058d4 <HAL_RCC_OscConfig+0x274>)
 8005878:	2201      	movs	r2, #1
 800587a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800587c:	f7fc f826 	bl	80018cc <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005884:	f7fc f822 	bl	80018cc <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e15a      	b.n	8005b4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005896:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <HAL_RCC_OscConfig+0x26c>)
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f0      	beq.n	8005884 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80058a2:	2001      	movs	r0, #1
 80058a4:	f000 fac6 	bl	8005e34 <RCC_Delay>
 80058a8:	e01c      	b.n	80058e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058aa:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <HAL_RCC_OscConfig+0x274>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058b0:	f7fc f80c 	bl	80018cc <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b6:	e00f      	b.n	80058d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058b8:	f7fc f808 	bl	80018cc <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d908      	bls.n	80058d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e140      	b.n	8005b4c <HAL_RCC_OscConfig+0x4ec>
 80058ca:	bf00      	nop
 80058cc:	40021000 	.word	0x40021000
 80058d0:	42420000 	.word	0x42420000
 80058d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d8:	4b9e      	ldr	r3, [pc, #632]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e9      	bne.n	80058b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 80a6 	beq.w	8005a3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058f2:	2300      	movs	r3, #0
 80058f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058f6:	4b97      	ldr	r3, [pc, #604]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10d      	bne.n	800591e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005902:	4b94      	ldr	r3, [pc, #592]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	4a93      	ldr	r2, [pc, #588]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 8005908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800590c:	61d3      	str	r3, [r2, #28]
 800590e:	4b91      	ldr	r3, [pc, #580]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005916:	60bb      	str	r3, [r7, #8]
 8005918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800591a:	2301      	movs	r3, #1
 800591c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800591e:	4b8e      	ldr	r3, [pc, #568]	; (8005b58 <HAL_RCC_OscConfig+0x4f8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005926:	2b00      	cmp	r3, #0
 8005928:	d118      	bne.n	800595c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800592a:	4b8b      	ldr	r3, [pc, #556]	; (8005b58 <HAL_RCC_OscConfig+0x4f8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a8a      	ldr	r2, [pc, #552]	; (8005b58 <HAL_RCC_OscConfig+0x4f8>)
 8005930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005936:	f7fb ffc9 	bl	80018cc <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593c:	e008      	b.n	8005950 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800593e:	f7fb ffc5 	bl	80018cc <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b64      	cmp	r3, #100	; 0x64
 800594a:	d901      	bls.n	8005950 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e0fd      	b.n	8005b4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005950:	4b81      	ldr	r3, [pc, #516]	; (8005b58 <HAL_RCC_OscConfig+0x4f8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0f0      	beq.n	800593e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d106      	bne.n	8005972 <HAL_RCC_OscConfig+0x312>
 8005964:	4b7b      	ldr	r3, [pc, #492]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	4a7a      	ldr	r2, [pc, #488]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	6213      	str	r3, [r2, #32]
 8005970:	e02d      	b.n	80059ce <HAL_RCC_OscConfig+0x36e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10c      	bne.n	8005994 <HAL_RCC_OscConfig+0x334>
 800597a:	4b76      	ldr	r3, [pc, #472]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	4a75      	ldr	r2, [pc, #468]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 8005980:	f023 0301 	bic.w	r3, r3, #1
 8005984:	6213      	str	r3, [r2, #32]
 8005986:	4b73      	ldr	r3, [pc, #460]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	4a72      	ldr	r2, [pc, #456]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 800598c:	f023 0304 	bic.w	r3, r3, #4
 8005990:	6213      	str	r3, [r2, #32]
 8005992:	e01c      	b.n	80059ce <HAL_RCC_OscConfig+0x36e>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	2b05      	cmp	r3, #5
 800599a:	d10c      	bne.n	80059b6 <HAL_RCC_OscConfig+0x356>
 800599c:	4b6d      	ldr	r3, [pc, #436]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	4a6c      	ldr	r2, [pc, #432]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 80059a2:	f043 0304 	orr.w	r3, r3, #4
 80059a6:	6213      	str	r3, [r2, #32]
 80059a8:	4b6a      	ldr	r3, [pc, #424]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	4a69      	ldr	r2, [pc, #420]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 80059ae:	f043 0301 	orr.w	r3, r3, #1
 80059b2:	6213      	str	r3, [r2, #32]
 80059b4:	e00b      	b.n	80059ce <HAL_RCC_OscConfig+0x36e>
 80059b6:	4b67      	ldr	r3, [pc, #412]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	4a66      	ldr	r2, [pc, #408]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 80059bc:	f023 0301 	bic.w	r3, r3, #1
 80059c0:	6213      	str	r3, [r2, #32]
 80059c2:	4b64      	ldr	r3, [pc, #400]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	4a63      	ldr	r2, [pc, #396]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 80059c8:	f023 0304 	bic.w	r3, r3, #4
 80059cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d015      	beq.n	8005a02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059d6:	f7fb ff79 	bl	80018cc <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059dc:	e00a      	b.n	80059f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059de:	f7fb ff75 	bl	80018cc <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e0ab      	b.n	8005b4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f4:	4b57      	ldr	r3, [pc, #348]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0ee      	beq.n	80059de <HAL_RCC_OscConfig+0x37e>
 8005a00:	e014      	b.n	8005a2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a02:	f7fb ff63 	bl	80018cc <HAL_GetTick>
 8005a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a08:	e00a      	b.n	8005a20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a0a:	f7fb ff5f 	bl	80018cc <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e095      	b.n	8005b4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a20:	4b4c      	ldr	r3, [pc, #304]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1ee      	bne.n	8005a0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d105      	bne.n	8005a3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a32:	4b48      	ldr	r3, [pc, #288]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	4a47      	ldr	r2, [pc, #284]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 8005a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 8081 	beq.w	8005b4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a48:	4b42      	ldr	r3, [pc, #264]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f003 030c 	and.w	r3, r3, #12
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d061      	beq.n	8005b18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d146      	bne.n	8005aea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a5c:	4b3f      	ldr	r3, [pc, #252]	; (8005b5c <HAL_RCC_OscConfig+0x4fc>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a62:	f7fb ff33 	bl	80018cc <HAL_GetTick>
 8005a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a6a:	f7fb ff2f 	bl	80018cc <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e067      	b.n	8005b4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a7c:	4b35      	ldr	r3, [pc, #212]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f0      	bne.n	8005a6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a90:	d108      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a92:	4b30      	ldr	r3, [pc, #192]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	492d      	ldr	r1, [pc, #180]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aa4:	4b2b      	ldr	r3, [pc, #172]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a19      	ldr	r1, [r3, #32]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	4927      	ldr	r1, [pc, #156]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005abc:	4b27      	ldr	r3, [pc, #156]	; (8005b5c <HAL_RCC_OscConfig+0x4fc>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac2:	f7fb ff03 	bl	80018cc <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aca:	f7fb feff 	bl	80018cc <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e037      	b.n	8005b4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005adc:	4b1d      	ldr	r3, [pc, #116]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0f0      	beq.n	8005aca <HAL_RCC_OscConfig+0x46a>
 8005ae8:	e02f      	b.n	8005b4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aea:	4b1c      	ldr	r3, [pc, #112]	; (8005b5c <HAL_RCC_OscConfig+0x4fc>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af0:	f7fb feec 	bl	80018cc <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af8:	f7fb fee8 	bl	80018cc <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e020      	b.n	8005b4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b0a:	4b12      	ldr	r3, [pc, #72]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f0      	bne.n	8005af8 <HAL_RCC_OscConfig+0x498>
 8005b16:	e018      	b.n	8005b4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e013      	b.n	8005b4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b24:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <HAL_RCC_OscConfig+0x4f4>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d106      	bne.n	8005b46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d001      	beq.n	8005b4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	40021000 	.word	0x40021000
 8005b58:	40007000 	.word	0x40007000
 8005b5c:	42420060 	.word	0x42420060

08005b60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e0d0      	b.n	8005d16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b74:	4b6a      	ldr	r3, [pc, #424]	; (8005d20 <HAL_RCC_ClockConfig+0x1c0>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d910      	bls.n	8005ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b82:	4b67      	ldr	r3, [pc, #412]	; (8005d20 <HAL_RCC_ClockConfig+0x1c0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f023 0207 	bic.w	r2, r3, #7
 8005b8a:	4965      	ldr	r1, [pc, #404]	; (8005d20 <HAL_RCC_ClockConfig+0x1c0>)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b92:	4b63      	ldr	r3, [pc, #396]	; (8005d20 <HAL_RCC_ClockConfig+0x1c0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d001      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e0b8      	b.n	8005d16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d020      	beq.n	8005bf2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d005      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bbc:	4b59      	ldr	r3, [pc, #356]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	4a58      	ldr	r2, [pc, #352]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005bc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d005      	beq.n	8005be0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bd4:	4b53      	ldr	r3, [pc, #332]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	4a52      	ldr	r2, [pc, #328]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005bda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005bde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005be0:	4b50      	ldr	r3, [pc, #320]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	494d      	ldr	r1, [pc, #308]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d040      	beq.n	8005c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d107      	bne.n	8005c16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c06:	4b47      	ldr	r3, [pc, #284]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d115      	bne.n	8005c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e07f      	b.n	8005d16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d107      	bne.n	8005c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c1e:	4b41      	ldr	r3, [pc, #260]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d109      	bne.n	8005c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e073      	b.n	8005d16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c2e:	4b3d      	ldr	r3, [pc, #244]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e06b      	b.n	8005d16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c3e:	4b39      	ldr	r3, [pc, #228]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f023 0203 	bic.w	r2, r3, #3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	4936      	ldr	r1, [pc, #216]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c50:	f7fb fe3c 	bl	80018cc <HAL_GetTick>
 8005c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c56:	e00a      	b.n	8005c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c58:	f7fb fe38 	bl	80018cc <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e053      	b.n	8005d16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c6e:	4b2d      	ldr	r3, [pc, #180]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f003 020c 	and.w	r2, r3, #12
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d1eb      	bne.n	8005c58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c80:	4b27      	ldr	r3, [pc, #156]	; (8005d20 <HAL_RCC_ClockConfig+0x1c0>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d210      	bcs.n	8005cb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8e:	4b24      	ldr	r3, [pc, #144]	; (8005d20 <HAL_RCC_ClockConfig+0x1c0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f023 0207 	bic.w	r2, r3, #7
 8005c96:	4922      	ldr	r1, [pc, #136]	; (8005d20 <HAL_RCC_ClockConfig+0x1c0>)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9e:	4b20      	ldr	r3, [pc, #128]	; (8005d20 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d001      	beq.n	8005cb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e032      	b.n	8005d16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d008      	beq.n	8005cce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cbc:	4b19      	ldr	r3, [pc, #100]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	4916      	ldr	r1, [pc, #88]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0308 	and.w	r3, r3, #8
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d009      	beq.n	8005cee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cda:	4b12      	ldr	r3, [pc, #72]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	490e      	ldr	r1, [pc, #56]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cee:	f000 f821 	bl	8005d34 <HAL_RCC_GetSysClockFreq>
 8005cf2:	4601      	mov	r1, r0
 8005cf4:	4b0b      	ldr	r3, [pc, #44]	; (8005d24 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	091b      	lsrs	r3, r3, #4
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	4a0a      	ldr	r2, [pc, #40]	; (8005d28 <HAL_RCC_ClockConfig+0x1c8>)
 8005d00:	5cd3      	ldrb	r3, [r2, r3]
 8005d02:	fa21 f303 	lsr.w	r3, r1, r3
 8005d06:	4a09      	ldr	r2, [pc, #36]	; (8005d2c <HAL_RCC_ClockConfig+0x1cc>)
 8005d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d0a:	4b09      	ldr	r3, [pc, #36]	; (8005d30 <HAL_RCC_ClockConfig+0x1d0>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fb fd9a 	bl	8001848 <HAL_InitTick>

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	40022000 	.word	0x40022000
 8005d24:	40021000 	.word	0x40021000
 8005d28:	0800a8a8 	.word	0x0800a8a8
 8005d2c:	20000018 	.word	0x20000018
 8005d30:	2000001c 	.word	0x2000001c

08005d34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d34:	b490      	push	{r4, r7}
 8005d36:	b08a      	sub	sp, #40	; 0x28
 8005d38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005d3a:	4b2a      	ldr	r3, [pc, #168]	; (8005de4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005d3c:	1d3c      	adds	r4, r7, #4
 8005d3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005d44:	4b28      	ldr	r3, [pc, #160]	; (8005de8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61fb      	str	r3, [r7, #28]
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61bb      	str	r3, [r7, #24]
 8005d52:	2300      	movs	r3, #0
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005d5e:	4b23      	ldr	r3, [pc, #140]	; (8005dec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f003 030c 	and.w	r3, r3, #12
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d002      	beq.n	8005d74 <HAL_RCC_GetSysClockFreq+0x40>
 8005d6e:	2b08      	cmp	r3, #8
 8005d70:	d003      	beq.n	8005d7a <HAL_RCC_GetSysClockFreq+0x46>
 8005d72:	e02d      	b.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d74:	4b1e      	ldr	r3, [pc, #120]	; (8005df0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d76:	623b      	str	r3, [r7, #32]
      break;
 8005d78:	e02d      	b.n	8005dd6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	0c9b      	lsrs	r3, r3, #18
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005d86:	4413      	add	r3, r2
 8005d88:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005d8c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d013      	beq.n	8005dc0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d98:	4b14      	ldr	r3, [pc, #80]	; (8005dec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	0c5b      	lsrs	r3, r3, #17
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005da6:	4413      	add	r3, r2
 8005da8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005dac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	4a0f      	ldr	r2, [pc, #60]	; (8005df0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005db2:	fb02 f203 	mul.w	r2, r2, r3
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dbe:	e004      	b.n	8005dca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	4a0c      	ldr	r2, [pc, #48]	; (8005df4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005dc4:	fb02 f303 	mul.w	r3, r2, r3
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	623b      	str	r3, [r7, #32]
      break;
 8005dce:	e002      	b.n	8005dd6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005dd0:	4b07      	ldr	r3, [pc, #28]	; (8005df0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005dd2:	623b      	str	r3, [r7, #32]
      break;
 8005dd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3728      	adds	r7, #40	; 0x28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bc90      	pop	{r4, r7}
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	0800a84c 	.word	0x0800a84c
 8005de8:	0800a85c 	.word	0x0800a85c
 8005dec:	40021000 	.word	0x40021000
 8005df0:	007a1200 	.word	0x007a1200
 8005df4:	003d0900 	.word	0x003d0900

08005df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dfc:	4b02      	ldr	r3, [pc, #8]	; (8005e08 <HAL_RCC_GetHCLKFreq+0x10>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr
 8005e08:	20000018 	.word	0x20000018

08005e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e10:	f7ff fff2 	bl	8005df8 <HAL_RCC_GetHCLKFreq>
 8005e14:	4601      	mov	r1, r0
 8005e16:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	0a1b      	lsrs	r3, r3, #8
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	4a03      	ldr	r2, [pc, #12]	; (8005e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e22:	5cd3      	ldrb	r3, [r2, r3]
 8005e24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	40021000 	.word	0x40021000
 8005e30:	0800a8b8 	.word	0x0800a8b8

08005e34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e3c:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <RCC_Delay+0x34>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a0a      	ldr	r2, [pc, #40]	; (8005e6c <RCC_Delay+0x38>)
 8005e42:	fba2 2303 	umull	r2, r3, r2, r3
 8005e46:	0a5b      	lsrs	r3, r3, #9
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	fb02 f303 	mul.w	r3, r2, r3
 8005e4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005e50:	bf00      	nop
  }
  while (Delay --);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	1e5a      	subs	r2, r3, #1
 8005e56:	60fa      	str	r2, [r7, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1f9      	bne.n	8005e50 <RCC_Delay+0x1c>
}
 8005e5c:	bf00      	nop
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	20000018 	.word	0x20000018
 8005e6c:	10624dd3 	.word	0x10624dd3

08005e70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	613b      	str	r3, [r7, #16]
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d07d      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e90:	4b4f      	ldr	r3, [pc, #316]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10d      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e9c:	4b4c      	ldr	r3, [pc, #304]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	4a4b      	ldr	r2, [pc, #300]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea6:	61d3      	str	r3, [r2, #28]
 8005ea8:	4b49      	ldr	r3, [pc, #292]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eb0:	60bb      	str	r3, [r7, #8]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb8:	4b46      	ldr	r3, [pc, #280]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d118      	bne.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ec4:	4b43      	ldr	r3, [pc, #268]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a42      	ldr	r2, [pc, #264]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ece:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ed0:	f7fb fcfc 	bl	80018cc <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed6:	e008      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed8:	f7fb fcf8 	bl	80018cc <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b64      	cmp	r3, #100	; 0x64
 8005ee4:	d901      	bls.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e06d      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eea:	4b3a      	ldr	r3, [pc, #232]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0f0      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ef6:	4b36      	ldr	r3, [pc, #216]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005efe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d02e      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d027      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f14:	4b2e      	ldr	r3, [pc, #184]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f1e:	4b2e      	ldr	r3, [pc, #184]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f20:	2201      	movs	r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f24:	4b2c      	ldr	r3, [pc, #176]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f2a:	4a29      	ldr	r2, [pc, #164]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d014      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f3a:	f7fb fcc7 	bl	80018cc <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f40:	e00a      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f42:	f7fb fcc3 	bl	80018cc <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e036      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f58:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0ee      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f64:	4b1a      	ldr	r3, [pc, #104]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	4917      	ldr	r1, [pc, #92]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005f76:	7dfb      	ldrb	r3, [r7, #23]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d105      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f7c:	4b14      	ldr	r3, [pc, #80]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f7e:	69db      	ldr	r3, [r3, #28]
 8005f80:	4a13      	ldr	r2, [pc, #76]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d008      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f94:	4b0e      	ldr	r3, [pc, #56]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	490b      	ldr	r1, [pc, #44]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0310 	and.w	r3, r3, #16
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d008      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fb2:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	4904      	ldr	r1, [pc, #16]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	40007000 	.word	0x40007000
 8005fd8:	42420440 	.word	0x42420440

08005fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e041      	b.n	8006072 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d106      	bne.n	8006008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fb f90a 	bl	800121c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3304      	adds	r3, #4
 8006018:	4619      	mov	r1, r3
 800601a:	4610      	mov	r0, r2
 800601c:	f000 fa1a 	bl	8006454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b02      	cmp	r3, #2
 800608e:	d122      	bne.n	80060d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b02      	cmp	r3, #2
 800609c:	d11b      	bne.n	80060d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f06f 0202 	mvn.w	r2, #2
 80060a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	f003 0303 	and.w	r3, r3, #3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f9ad 	bl	800641c <HAL_TIM_IC_CaptureCallback>
 80060c2:	e005      	b.n	80060d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f9a0 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f9af 	bl	800642e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d122      	bne.n	800612a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f003 0304 	and.w	r3, r3, #4
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d11b      	bne.n	800612a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f06f 0204 	mvn.w	r2, #4
 80060fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f983 	bl	800641c <HAL_TIM_IC_CaptureCallback>
 8006116:	e005      	b.n	8006124 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f976 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f985 	bl	800642e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b08      	cmp	r3, #8
 8006136:	d122      	bne.n	800617e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b08      	cmp	r3, #8
 8006144:	d11b      	bne.n	800617e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f06f 0208 	mvn.w	r2, #8
 800614e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2204      	movs	r2, #4
 8006154:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	f003 0303 	and.w	r3, r3, #3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f959 	bl	800641c <HAL_TIM_IC_CaptureCallback>
 800616a:	e005      	b.n	8006178 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f94c 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f95b 	bl	800642e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	2b10      	cmp	r3, #16
 800618a:	d122      	bne.n	80061d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f003 0310 	and.w	r3, r3, #16
 8006196:	2b10      	cmp	r3, #16
 8006198:	d11b      	bne.n	80061d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f06f 0210 	mvn.w	r2, #16
 80061a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2208      	movs	r2, #8
 80061a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f92f 	bl	800641c <HAL_TIM_IC_CaptureCallback>
 80061be:	e005      	b.n	80061cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f922 	bl	800640a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f931 	bl	800642e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d10e      	bne.n	80061fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d107      	bne.n	80061fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f06f 0201 	mvn.w	r2, #1
 80061f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f8fd 	bl	80063f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006208:	2b80      	cmp	r3, #128	; 0x80
 800620a:	d10e      	bne.n	800622a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006216:	2b80      	cmp	r3, #128	; 0x80
 8006218:	d107      	bne.n	800622a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fa74 	bl	8006712 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006234:	2b40      	cmp	r3, #64	; 0x40
 8006236:	d10e      	bne.n	8006256 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006242:	2b40      	cmp	r3, #64	; 0x40
 8006244:	d107      	bne.n	8006256 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800624e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f8f5 	bl	8006440 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b20      	cmp	r3, #32
 8006262:	d10e      	bne.n	8006282 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f003 0320 	and.w	r3, r3, #32
 800626e:	2b20      	cmp	r3, #32
 8006270:	d107      	bne.n	8006282 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f06f 0220 	mvn.w	r2, #32
 800627a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fa3f 	bl	8006700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006282:	bf00      	nop
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800629a:	2b01      	cmp	r3, #1
 800629c:	d101      	bne.n	80062a2 <HAL_TIM_ConfigClockSource+0x18>
 800629e:	2302      	movs	r3, #2
 80062a0:	e0a6      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0x166>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062c8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b40      	cmp	r3, #64	; 0x40
 80062d8:	d067      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x120>
 80062da:	2b40      	cmp	r3, #64	; 0x40
 80062dc:	d80b      	bhi.n	80062f6 <HAL_TIM_ConfigClockSource+0x6c>
 80062de:	2b10      	cmp	r3, #16
 80062e0:	d073      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x140>
 80062e2:	2b10      	cmp	r3, #16
 80062e4:	d802      	bhi.n	80062ec <HAL_TIM_ConfigClockSource+0x62>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d06f      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80062ea:	e078      	b.n	80063de <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80062ec:	2b20      	cmp	r3, #32
 80062ee:	d06c      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x140>
 80062f0:	2b30      	cmp	r3, #48	; 0x30
 80062f2:	d06a      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x140>
      break;
 80062f4:	e073      	b.n	80063de <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80062f6:	2b70      	cmp	r3, #112	; 0x70
 80062f8:	d00d      	beq.n	8006316 <HAL_TIM_ConfigClockSource+0x8c>
 80062fa:	2b70      	cmp	r3, #112	; 0x70
 80062fc:	d804      	bhi.n	8006308 <HAL_TIM_ConfigClockSource+0x7e>
 80062fe:	2b50      	cmp	r3, #80	; 0x50
 8006300:	d033      	beq.n	800636a <HAL_TIM_ConfigClockSource+0xe0>
 8006302:	2b60      	cmp	r3, #96	; 0x60
 8006304:	d041      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006306:	e06a      	b.n	80063de <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800630c:	d066      	beq.n	80063dc <HAL_TIM_ConfigClockSource+0x152>
 800630e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006312:	d017      	beq.n	8006344 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006314:	e063      	b.n	80063de <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6818      	ldr	r0, [r3, #0]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6899      	ldr	r1, [r3, #8]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f000 f96e 	bl	8006606 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006338:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	609a      	str	r2, [r3, #8]
      break;
 8006342:	e04c      	b.n	80063de <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6818      	ldr	r0, [r3, #0]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	6899      	ldr	r1, [r3, #8]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f000 f957 	bl	8006606 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006366:	609a      	str	r2, [r3, #8]
      break;
 8006368:	e039      	b.n	80063de <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6859      	ldr	r1, [r3, #4]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	461a      	mov	r2, r3
 8006378:	f000 f8ce 	bl	8006518 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2150      	movs	r1, #80	; 0x50
 8006382:	4618      	mov	r0, r3
 8006384:	f000 f925 	bl	80065d2 <TIM_ITRx_SetConfig>
      break;
 8006388:	e029      	b.n	80063de <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6818      	ldr	r0, [r3, #0]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	6859      	ldr	r1, [r3, #4]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	461a      	mov	r2, r3
 8006398:	f000 f8ec 	bl	8006574 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2160      	movs	r1, #96	; 0x60
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 f915 	bl	80065d2 <TIM_ITRx_SetConfig>
      break;
 80063a8:	e019      	b.n	80063de <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6859      	ldr	r1, [r3, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f000 f8ae 	bl	8006518 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2140      	movs	r1, #64	; 0x40
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 f905 	bl	80065d2 <TIM_ITRx_SetConfig>
      break;
 80063c8:	e009      	b.n	80063de <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4619      	mov	r1, r3
 80063d4:	4610      	mov	r0, r2
 80063d6:	f000 f8fc 	bl	80065d2 <TIM_ITRx_SetConfig>
        break;
 80063da:	e000      	b.n	80063de <HAL_TIM_ConfigClockSource+0x154>
      break;
 80063dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr

0800640a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr

0800641c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	bc80      	pop	{r7}
 800642c:	4770      	bx	lr

0800642e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr

08006440 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	bc80      	pop	{r7}
 8006450:	4770      	bx	lr
	...

08006454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a29      	ldr	r2, [pc, #164]	; (800650c <TIM_Base_SetConfig+0xb8>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00b      	beq.n	8006484 <TIM_Base_SetConfig+0x30>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006472:	d007      	beq.n	8006484 <TIM_Base_SetConfig+0x30>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a26      	ldr	r2, [pc, #152]	; (8006510 <TIM_Base_SetConfig+0xbc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d003      	beq.n	8006484 <TIM_Base_SetConfig+0x30>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a25      	ldr	r2, [pc, #148]	; (8006514 <TIM_Base_SetConfig+0xc0>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d108      	bne.n	8006496 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a1c      	ldr	r2, [pc, #112]	; (800650c <TIM_Base_SetConfig+0xb8>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00b      	beq.n	80064b6 <TIM_Base_SetConfig+0x62>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a4:	d007      	beq.n	80064b6 <TIM_Base_SetConfig+0x62>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a19      	ldr	r2, [pc, #100]	; (8006510 <TIM_Base_SetConfig+0xbc>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d003      	beq.n	80064b6 <TIM_Base_SetConfig+0x62>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a18      	ldr	r2, [pc, #96]	; (8006514 <TIM_Base_SetConfig+0xc0>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d108      	bne.n	80064c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a07      	ldr	r2, [pc, #28]	; (800650c <TIM_Base_SetConfig+0xb8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d103      	bne.n	80064fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	691a      	ldr	r2, [r3, #16]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	615a      	str	r2, [r3, #20]
}
 8006502:	bf00      	nop
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	bc80      	pop	{r7}
 800650a:	4770      	bx	lr
 800650c:	40012c00 	.word	0x40012c00
 8006510:	40000400 	.word	0x40000400
 8006514:	40000800 	.word	0x40000800

08006518 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	f023 0201 	bic.w	r2, r3, #1
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	011b      	lsls	r3, r3, #4
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4313      	orrs	r3, r2
 800654c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f023 030a 	bic.w	r3, r3, #10
 8006554:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4313      	orrs	r3, r2
 800655c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	621a      	str	r2, [r3, #32]
}
 800656a:	bf00      	nop
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr

08006574 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	f023 0210 	bic.w	r2, r3, #16
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800659e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	031b      	lsls	r3, r3, #12
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	621a      	str	r2, [r3, #32]
}
 80065c8:	bf00      	nop
 80065ca:	371c      	adds	r7, #28
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bc80      	pop	{r7}
 80065d0:	4770      	bx	lr

080065d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b085      	sub	sp, #20
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	f043 0307 	orr.w	r3, r3, #7
 80065f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	609a      	str	r2, [r3, #8]
}
 80065fc:	bf00      	nop
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	bc80      	pop	{r7}
 8006604:	4770      	bx	lr

08006606 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006606:	b480      	push	{r7}
 8006608:	b087      	sub	sp, #28
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	607a      	str	r2, [r7, #4]
 8006612:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006620:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	021a      	lsls	r2, r3, #8
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	431a      	orrs	r2, r3
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	4313      	orrs	r3, r2
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	4313      	orrs	r3, r2
 8006632:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	609a      	str	r2, [r3, #8]
}
 800663a:	bf00      	nop
 800663c:	371c      	adds	r7, #28
 800663e:	46bd      	mov	sp, r7
 8006640:	bc80      	pop	{r7}
 8006642:	4770      	bx	lr

08006644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006658:	2302      	movs	r3, #2
 800665a:	e046      	b.n	80066ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	4313      	orrs	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a16      	ldr	r2, [pc, #88]	; (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00e      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a8:	d009      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a12      	ldr	r2, [pc, #72]	; (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d004      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a10      	ldr	r2, [pc, #64]	; (80066fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d10c      	bne.n	80066d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr
 80066f4:	40012c00 	.word	0x40012c00
 80066f8:	40000400 	.word	0x40000400
 80066fc:	40000800 	.word	0x40000800

08006700 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	bc80      	pop	{r7}
 8006710:	4770      	bx	lr

08006712 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr

08006724 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006724:	b084      	sub	sp, #16
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	f107 0014 	add.w	r0, r7, #20
 8006732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	bc80      	pop	{r7}
 8006740:	b004      	add	sp, #16
 8006742:	4770      	bx	lr

08006744 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006754:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006758:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	b29a      	uxth	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	bc80      	pop	{r7}
 800676e:	4770      	bx	lr

08006770 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006778:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800677c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006784:	b29a      	uxth	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	b29b      	uxth	r3, r3
 800678a:	43db      	mvns	r3, r3
 800678c:	b29b      	uxth	r3, r3
 800678e:	4013      	ands	r3, r2
 8006790:	b29a      	uxth	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	bc80      	pop	{r7}
 80067a2:	4770      	bx	lr

080067a4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	460b      	mov	r3, r1
 80067ae:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr

080067bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80067bc:	b084      	sub	sp, #16
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	f107 0014 	add.w	r0, r7, #20
 80067ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bc80      	pop	{r7}
 80067f8:	b004      	add	sp, #16
 80067fa:	4770      	bx	lr

080067fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b09b      	sub	sp, #108	; 0x6c
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800681e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006822:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	78db      	ldrb	r3, [r3, #3]
 800682a:	2b03      	cmp	r3, #3
 800682c:	d81f      	bhi.n	800686e <USB_ActivateEndpoint+0x72>
 800682e:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <USB_ActivateEndpoint+0x38>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	08006845 	.word	0x08006845
 8006838:	08006861 	.word	0x08006861
 800683c:	08006877 	.word	0x08006877
 8006840:	08006853 	.word	0x08006853
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006844:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800684c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006850:	e012      	b.n	8006878 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006852:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006856:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800685a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800685e:	e00b      	b.n	8006878 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006860:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006864:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006868:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800686c:	e004      	b.n	8006878 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006874:	e000      	b.n	8006878 <USB_ActivateEndpoint+0x7c>
      break;
 8006876:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	441a      	add	r2, r3
 8006882:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800688a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800688e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006896:	b29b      	uxth	r3, r3
 8006898:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	4313      	orrs	r3, r2
 80068ba:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	441a      	add	r2, r3
 80068c8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80068cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068dc:	b29b      	uxth	r3, r3
 80068de:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	7b1b      	ldrb	r3, [r3, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f040 8149 	bne.w	8006b7c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	785b      	ldrb	r3, [r3, #1]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 8084 	beq.w	80069fc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	617b      	str	r3, [r7, #20]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068fe:	b29b      	uxth	r3, r3
 8006900:	461a      	mov	r2, r3
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	4413      	add	r3, r2
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	011a      	lsls	r2, r3, #4
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006916:	613b      	str	r3, [r7, #16]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	88db      	ldrh	r3, [r3, #6]
 800691c:	085b      	lsrs	r3, r3, #1
 800691e:	b29b      	uxth	r3, r3
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	81fb      	strh	r3, [r7, #14]
 8006936:	89fb      	ldrh	r3, [r7, #14]
 8006938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01b      	beq.n	8006978 <USB_ActivateEndpoint+0x17c>
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29b      	uxth	r3, r3
 800694e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006956:	81bb      	strh	r3, [r7, #12]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	441a      	add	r2, r3
 8006962:	89bb      	ldrh	r3, [r7, #12]
 8006964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800696c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006970:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006974:	b29b      	uxth	r3, r3
 8006976:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	78db      	ldrb	r3, [r3, #3]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d020      	beq.n	80069c2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006996:	813b      	strh	r3, [r7, #8]
 8006998:	893b      	ldrh	r3, [r7, #8]
 800699a:	f083 0320 	eor.w	r3, r3, #32
 800699e:	813b      	strh	r3, [r7, #8]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	441a      	add	r2, r3
 80069aa:	893b      	ldrh	r3, [r7, #8]
 80069ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069bc:	b29b      	uxth	r3, r3
 80069be:	8013      	strh	r3, [r2, #0]
 80069c0:	e27f      	b.n	8006ec2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069d8:	817b      	strh	r3, [r7, #10]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	441a      	add	r2, r3
 80069e4:	897b      	ldrh	r3, [r7, #10]
 80069e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	8013      	strh	r3, [r2, #0]
 80069fa:	e262      	b.n	8006ec2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	4413      	add	r3, r2
 8006a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	011a      	lsls	r2, r3, #4
 8006a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	88db      	ldrh	r3, [r3, #6]
 8006a24:	085b      	lsrs	r3, r3, #1
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	4413      	add	r3, r2
 8006a42:	627b      	str	r3, [r7, #36]	; 0x24
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	011a      	lsls	r2, r3, #4
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a52:	623b      	str	r3, [r7, #32]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d112      	bne.n	8006a82 <USB_ActivateEndpoint+0x286>
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	801a      	strh	r2, [r3, #0]
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	801a      	strh	r2, [r3, #0]
 8006a80:	e02f      	b.n	8006ae2 <USB_ActivateEndpoint+0x2e6>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b3e      	cmp	r3, #62	; 0x3e
 8006a88:	d813      	bhi.n	8006ab2 <USB_ActivateEndpoint+0x2b6>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	085b      	lsrs	r3, r3, #1
 8006a90:	663b      	str	r3, [r7, #96]	; 0x60
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <USB_ActivateEndpoint+0x2a8>
 8006a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	663b      	str	r3, [r7, #96]	; 0x60
 8006aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	029b      	lsls	r3, r3, #10
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	801a      	strh	r2, [r3, #0]
 8006ab0:	e017      	b.n	8006ae2 <USB_ActivateEndpoint+0x2e6>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	095b      	lsrs	r3, r3, #5
 8006ab8:	663b      	str	r3, [r7, #96]	; 0x60
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f003 031f 	and.w	r3, r3, #31
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d102      	bne.n	8006acc <USB_ActivateEndpoint+0x2d0>
 8006ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	663b      	str	r3, [r7, #96]	; 0x60
 8006acc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	029b      	lsls	r3, r3, #10
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	83fb      	strh	r3, [r7, #30]
 8006af0:	8bfb      	ldrh	r3, [r7, #30]
 8006af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d01b      	beq.n	8006b32 <USB_ActivateEndpoint+0x336>
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	881b      	ldrh	r3, [r3, #0]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b10:	83bb      	strh	r3, [r7, #28]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	441a      	add	r2, r3
 8006b1c:	8bbb      	ldrh	r3, [r7, #28]
 8006b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b48:	837b      	strh	r3, [r7, #26]
 8006b4a:	8b7b      	ldrh	r3, [r7, #26]
 8006b4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b50:	837b      	strh	r3, [r7, #26]
 8006b52:	8b7b      	ldrh	r3, [r7, #26]
 8006b54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b58:	837b      	strh	r3, [r7, #26]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	441a      	add	r2, r3
 8006b64:	8b7b      	ldrh	r3, [r7, #26]
 8006b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	8013      	strh	r3, [r2, #0]
 8006b7a:	e1a2      	b.n	8006ec2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b92:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	441a      	add	r2, r3
 8006ba0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bc8:	4413      	add	r3, r2
 8006bca:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	011a      	lsls	r2, r3, #4
 8006bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bda:	657b      	str	r3, [r7, #84]	; 0x54
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	891b      	ldrh	r3, [r3, #8]
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bea:	801a      	strh	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	653b      	str	r3, [r7, #80]	; 0x50
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bfc:	4413      	add	r3, r2
 8006bfe:	653b      	str	r3, [r7, #80]	; 0x50
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	011a      	lsls	r2, r3, #4
 8006c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	895b      	ldrh	r3, [r3, #10]
 8006c14:	085b      	lsrs	r3, r3, #1
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c1e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	785b      	ldrb	r3, [r3, #1]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f040 8091 	bne.w	8006d4c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006c38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d01b      	beq.n	8006c7a <USB_ActivateEndpoint+0x47e>
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c58:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	441a      	add	r2, r3
 8006c64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	873b      	strh	r3, [r7, #56]	; 0x38
 8006c88:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d01b      	beq.n	8006cca <USB_ActivateEndpoint+0x4ce>
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	441a      	add	r2, r3
 8006cb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006ce2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ce4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ce8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006cea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006cec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006cf0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	441a      	add	r2, r3
 8006cfc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d28:	867b      	strh	r3, [r7, #50]	; 0x32
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	441a      	add	r2, r3
 8006d34:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	8013      	strh	r3, [r2, #0]
 8006d4a:	e0ba      	b.n	8006ec2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006d5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d01d      	beq.n	8006da4 <USB_ActivateEndpoint+0x5a8>
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	441a      	add	r2, r3
 8006d8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006db4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d01d      	beq.n	8006dfc <USB_ActivateEndpoint+0x600>
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	441a      	add	r2, r3
 8006de4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	78db      	ldrb	r3, [r3, #3]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d024      	beq.n	8006e4e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006e1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e22:	f083 0320 	eor.w	r3, r3, #32
 8006e26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	441a      	add	r2, r3
 8006e34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	8013      	strh	r3, [r2, #0]
 8006e4c:	e01d      	b.n	8006e8a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	441a      	add	r2, r3
 8006e72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	441a      	add	r2, r3
 8006eac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006ec2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	376c      	adds	r7, #108	; 0x6c
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bc80      	pop	{r7}
 8006ece:	4770      	bx	lr

08006ed0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b08d      	sub	sp, #52	; 0x34
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	7b1b      	ldrb	r3, [r3, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f040 808e 	bne.w	8007000 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	785b      	ldrb	r3, [r3, #1]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d044      	beq.n	8006f76 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	81bb      	strh	r3, [r7, #12]
 8006efa:	89bb      	ldrh	r3, [r7, #12]
 8006efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d01b      	beq.n	8006f3c <USB_DeactivateEndpoint+0x6c>
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1a:	817b      	strh	r3, [r7, #10]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	441a      	add	r2, r3
 8006f26:	897b      	ldrh	r3, [r7, #10]
 8006f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f52:	813b      	strh	r3, [r7, #8]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	441a      	add	r2, r3
 8006f5e:	893b      	ldrh	r3, [r7, #8]
 8006f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	8013      	strh	r3, [r2, #0]
 8006f74:	e192      	b.n	800729c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	827b      	strh	r3, [r7, #18]
 8006f84:	8a7b      	ldrh	r3, [r7, #18]
 8006f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d01b      	beq.n	8006fc6 <USB_DeactivateEndpoint+0xf6>
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa4:	823b      	strh	r3, [r7, #16]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	441a      	add	r2, r3
 8006fb0:	8a3b      	ldrh	r3, [r7, #16]
 8006fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fdc:	81fb      	strh	r3, [r7, #14]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	441a      	add	r2, r3
 8006fe8:	89fb      	ldrh	r3, [r7, #14]
 8006fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	8013      	strh	r3, [r2, #0]
 8006ffe:	e14d      	b.n	800729c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	785b      	ldrb	r3, [r3, #1]
 8007004:	2b00      	cmp	r3, #0
 8007006:	f040 80a5 	bne.w	8007154 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	843b      	strh	r3, [r7, #32]
 8007018:	8c3b      	ldrh	r3, [r7, #32]
 800701a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d01b      	beq.n	800705a <USB_DeactivateEndpoint+0x18a>
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	b29b      	uxth	r3, r3
 8007030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007038:	83fb      	strh	r3, [r7, #30]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	441a      	add	r2, r3
 8007044:	8bfb      	ldrh	r3, [r7, #30]
 8007046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800704a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800704e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007056:	b29b      	uxth	r3, r3
 8007058:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	83bb      	strh	r3, [r7, #28]
 8007068:	8bbb      	ldrh	r3, [r7, #28]
 800706a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706e:	2b00      	cmp	r3, #0
 8007070:	d01b      	beq.n	80070aa <USB_DeactivateEndpoint+0x1da>
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	b29b      	uxth	r3, r3
 8007080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007088:	837b      	strh	r3, [r7, #26]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	441a      	add	r2, r3
 8007094:	8b7b      	ldrh	r3, [r7, #26]
 8007096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800709a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800709e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c0:	833b      	strh	r3, [r7, #24]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	441a      	add	r2, r3
 80070cc:	8b3b      	ldrh	r3, [r7, #24]
 80070ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070de:	b29b      	uxth	r3, r3
 80070e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f8:	82fb      	strh	r3, [r7, #22]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	441a      	add	r2, r3
 8007104:	8afb      	ldrh	r3, [r7, #22]
 8007106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800710a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800710e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007116:	b29b      	uxth	r3, r3
 8007118:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	b29b      	uxth	r3, r3
 8007128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800712c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007130:	82bb      	strh	r3, [r7, #20]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	441a      	add	r2, r3
 800713c:	8abb      	ldrh	r3, [r7, #20]
 800713e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800714a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714e:	b29b      	uxth	r3, r3
 8007150:	8013      	strh	r3, [r2, #0]
 8007152:	e0a3      	b.n	800729c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007162:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d01b      	beq.n	80071a4 <USB_DeactivateEndpoint+0x2d4>
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800717e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007182:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	441a      	add	r2, r3
 800718e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800719c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80071b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80071b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d01b      	beq.n	80071f4 <USB_DeactivateEndpoint+0x324>
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	441a      	add	r2, r3
 80071de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80071e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	b29b      	uxth	r3, r3
 8007202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	441a      	add	r2, r3
 8007216:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800721c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007220:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007228:	b29b      	uxth	r3, r3
 800722a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	b29b      	uxth	r3, r3
 800723a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800723e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007242:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	441a      	add	r2, r3
 800724e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800725c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007260:	b29b      	uxth	r3, r3
 8007262:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	b29b      	uxth	r3, r3
 8007272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727a:	847b      	strh	r3, [r7, #34]	; 0x22
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	441a      	add	r2, r3
 8007286:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800728c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007298:	b29b      	uxth	r3, r3
 800729a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3734      	adds	r7, #52	; 0x34
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr

080072a8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b0c4      	sub	sp, #272	; 0x110
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	1d3b      	adds	r3, r7, #4
 80072b0:	6018      	str	r0, [r3, #0]
 80072b2:	463b      	mov	r3, r7
 80072b4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072b6:	463b      	mov	r3, r7
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	785b      	ldrb	r3, [r3, #1]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	f040 8557 	bne.w	8007d70 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80072c2:	463b      	mov	r3, r7
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	699a      	ldr	r2, [r3, #24]
 80072c8:	463b      	mov	r3, r7
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d905      	bls.n	80072de <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80072d2:	463b      	mov	r3, r7
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80072dc:	e004      	b.n	80072e8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80072de:	463b      	mov	r3, r7
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80072e8:	463b      	mov	r3, r7
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	7b1b      	ldrb	r3, [r3, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d12c      	bne.n	800734c <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80072f2:	463b      	mov	r3, r7
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6959      	ldr	r1, [r3, #20]
 80072f8:	463b      	mov	r3, r7
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	88da      	ldrh	r2, [r3, #6]
 80072fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007302:	b29b      	uxth	r3, r3
 8007304:	1d38      	adds	r0, r7, #4
 8007306:	6800      	ldr	r0, [r0, #0]
 8007308:	f001 fa2c 	bl	8008764 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800730c:	1d3b      	adds	r3, r7, #4
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	617b      	str	r3, [r7, #20]
 8007312:	1d3b      	adds	r3, r7, #4
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800731a:	b29b      	uxth	r3, r3
 800731c:	461a      	mov	r2, r3
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	4413      	add	r3, r2
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	463b      	mov	r3, r7
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	011a      	lsls	r2, r3, #4
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	4413      	add	r3, r2
 8007330:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007334:	f107 0310 	add.w	r3, r7, #16
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800733e:	b29a      	uxth	r2, r3
 8007340:	f107 0310 	add.w	r3, r7, #16
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	801a      	strh	r2, [r3, #0]
 8007348:	f000 bcdd 	b.w	8007d06 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800734c:	463b      	mov	r3, r7
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	78db      	ldrb	r3, [r3, #3]
 8007352:	2b02      	cmp	r3, #2
 8007354:	f040 8347 	bne.w	80079e6 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007358:	463b      	mov	r3, r7
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6a1a      	ldr	r2, [r3, #32]
 800735e:	463b      	mov	r3, r7
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	429a      	cmp	r2, r3
 8007366:	f240 82eb 	bls.w	8007940 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800736a:	1d3b      	adds	r3, r7, #4
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	463b      	mov	r3, r7
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	b29b      	uxth	r3, r3
 800737c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007384:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8007388:	1d3b      	adds	r3, r7, #4
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	463b      	mov	r3, r7
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	441a      	add	r2, r3
 8007396:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800739a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800739e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80073a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80073ae:	463b      	mov	r3, r7
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6a1a      	ldr	r2, [r3, #32]
 80073b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073b8:	1ad2      	subs	r2, r2, r3
 80073ba:	463b      	mov	r3, r7
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80073c0:	1d3b      	adds	r3, r7, #4
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	463b      	mov	r3, r7
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	881b      	ldrh	r3, [r3, #0]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 8159 	beq.w	800768e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073dc:	1d3b      	adds	r3, r7, #4
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	637b      	str	r3, [r7, #52]	; 0x34
 80073e2:	463b      	mov	r3, r7
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	785b      	ldrb	r3, [r3, #1]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d164      	bne.n	80074b6 <USB_EPStartXfer+0x20e>
 80073ec:	1d3b      	adds	r3, r7, #4
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073f2:	1d3b      	adds	r3, r7, #4
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	461a      	mov	r2, r3
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	4413      	add	r3, r2
 8007402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007404:	463b      	mov	r3, r7
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	011a      	lsls	r2, r3, #4
 800740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740e:	4413      	add	r3, r2
 8007410:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007414:	62bb      	str	r3, [r7, #40]	; 0x28
 8007416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800741a:	2b00      	cmp	r3, #0
 800741c:	d112      	bne.n	8007444 <USB_EPStartXfer+0x19c>
 800741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	b29b      	uxth	r3, r3
 8007424:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007428:	b29a      	uxth	r2, r3
 800742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742c:	801a      	strh	r2, [r3, #0]
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	b29b      	uxth	r3, r3
 8007434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800743c:	b29a      	uxth	r2, r3
 800743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007440:	801a      	strh	r2, [r3, #0]
 8007442:	e054      	b.n	80074ee <USB_EPStartXfer+0x246>
 8007444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007448:	2b3e      	cmp	r3, #62	; 0x3e
 800744a:	d817      	bhi.n	800747c <USB_EPStartXfer+0x1d4>
 800744c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007450:	085b      	lsrs	r3, r3, #1
 8007452:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007456:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d004      	beq.n	800746c <USB_EPStartXfer+0x1c4>
 8007462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007466:	3301      	adds	r3, #1
 8007468:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800746c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007470:	b29b      	uxth	r3, r3
 8007472:	029b      	lsls	r3, r3, #10
 8007474:	b29a      	uxth	r2, r3
 8007476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007478:	801a      	strh	r2, [r3, #0]
 800747a:	e038      	b.n	80074ee <USB_EPStartXfer+0x246>
 800747c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007480:	095b      	lsrs	r3, r3, #5
 8007482:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800748a:	f003 031f 	and.w	r3, r3, #31
 800748e:	2b00      	cmp	r3, #0
 8007490:	d104      	bne.n	800749c <USB_EPStartXfer+0x1f4>
 8007492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007496:	3b01      	subs	r3, #1
 8007498:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800749c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	029b      	lsls	r3, r3, #10
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	801a      	strh	r2, [r3, #0]
 80074b4:	e01b      	b.n	80074ee <USB_EPStartXfer+0x246>
 80074b6:	463b      	mov	r3, r7
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	785b      	ldrb	r3, [r3, #1]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d116      	bne.n	80074ee <USB_EPStartXfer+0x246>
 80074c0:	1d3b      	adds	r3, r7, #4
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	461a      	mov	r2, r3
 80074cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ce:	4413      	add	r3, r2
 80074d0:	637b      	str	r3, [r7, #52]	; 0x34
 80074d2:	463b      	mov	r3, r7
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	011a      	lsls	r2, r3, #4
 80074da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074dc:	4413      	add	r3, r2
 80074de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074e2:	633b      	str	r3, [r7, #48]	; 0x30
 80074e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80074ee:	463b      	mov	r3, r7
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	895b      	ldrh	r3, [r3, #10]
 80074f4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074f8:	463b      	mov	r3, r7
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6959      	ldr	r1, [r3, #20]
 80074fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007502:	b29b      	uxth	r3, r3
 8007504:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007508:	1d38      	adds	r0, r7, #4
 800750a:	6800      	ldr	r0, [r0, #0]
 800750c:	f001 f92a 	bl	8008764 <USB_WritePMA>
            ep->xfer_buff += len;
 8007510:	463b      	mov	r3, r7
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695a      	ldr	r2, [r3, #20]
 8007516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800751a:	441a      	add	r2, r3
 800751c:	463b      	mov	r3, r7
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007522:	463b      	mov	r3, r7
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6a1a      	ldr	r2, [r3, #32]
 8007528:	463b      	mov	r3, r7
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	429a      	cmp	r2, r3
 8007530:	d909      	bls.n	8007546 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8007532:	463b      	mov	r3, r7
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6a1a      	ldr	r2, [r3, #32]
 8007538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800753c:	1ad2      	subs	r2, r2, r3
 800753e:	463b      	mov	r3, r7
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	621a      	str	r2, [r3, #32]
 8007544:	e008      	b.n	8007558 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8007546:	463b      	mov	r3, r7
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007550:	463b      	mov	r3, r7
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2200      	movs	r2, #0
 8007556:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007558:	463b      	mov	r3, r7
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	785b      	ldrb	r3, [r3, #1]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d164      	bne.n	800762c <USB_EPStartXfer+0x384>
 8007562:	1d3b      	adds	r3, r7, #4
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	61fb      	str	r3, [r7, #28]
 8007568:	1d3b      	adds	r3, r7, #4
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007570:	b29b      	uxth	r3, r3
 8007572:	461a      	mov	r2, r3
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	4413      	add	r3, r2
 8007578:	61fb      	str	r3, [r7, #28]
 800757a:	463b      	mov	r3, r7
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	011a      	lsls	r2, r3, #4
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	4413      	add	r3, r2
 8007586:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800758a:	61bb      	str	r3, [r7, #24]
 800758c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007590:	2b00      	cmp	r3, #0
 8007592:	d112      	bne.n	80075ba <USB_EPStartXfer+0x312>
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	b29b      	uxth	r3, r3
 800759a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800759e:	b29a      	uxth	r2, r3
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	801a      	strh	r2, [r3, #0]
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	801a      	strh	r2, [r3, #0]
 80075b8:	e057      	b.n	800766a <USB_EPStartXfer+0x3c2>
 80075ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075be:	2b3e      	cmp	r3, #62	; 0x3e
 80075c0:	d817      	bhi.n	80075f2 <USB_EPStartXfer+0x34a>
 80075c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075c6:	085b      	lsrs	r3, r3, #1
 80075c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d004      	beq.n	80075e2 <USB_EPStartXfer+0x33a>
 80075d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80075dc:	3301      	adds	r3, #1
 80075de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	029b      	lsls	r3, r3, #10
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	801a      	strh	r2, [r3, #0]
 80075f0:	e03b      	b.n	800766a <USB_EPStartXfer+0x3c2>
 80075f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075f6:	095b      	lsrs	r3, r3, #5
 80075f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007600:	f003 031f 	and.w	r3, r3, #31
 8007604:	2b00      	cmp	r3, #0
 8007606:	d104      	bne.n	8007612 <USB_EPStartXfer+0x36a>
 8007608:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800760c:	3b01      	subs	r3, #1
 800760e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007612:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007616:	b29b      	uxth	r3, r3
 8007618:	029b      	lsls	r3, r3, #10
 800761a:	b29b      	uxth	r3, r3
 800761c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007624:	b29a      	uxth	r2, r3
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	801a      	strh	r2, [r3, #0]
 800762a:	e01e      	b.n	800766a <USB_EPStartXfer+0x3c2>
 800762c:	463b      	mov	r3, r7
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	785b      	ldrb	r3, [r3, #1]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d119      	bne.n	800766a <USB_EPStartXfer+0x3c2>
 8007636:	1d3b      	adds	r3, r7, #4
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	627b      	str	r3, [r7, #36]	; 0x24
 800763c:	1d3b      	adds	r3, r7, #4
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007644:	b29b      	uxth	r3, r3
 8007646:	461a      	mov	r2, r3
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	4413      	add	r3, r2
 800764c:	627b      	str	r3, [r7, #36]	; 0x24
 800764e:	463b      	mov	r3, r7
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	011a      	lsls	r2, r3, #4
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	4413      	add	r3, r2
 800765a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800765e:	623b      	str	r3, [r7, #32]
 8007660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007664:	b29a      	uxth	r2, r3
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800766a:	463b      	mov	r3, r7
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	891b      	ldrh	r3, [r3, #8]
 8007670:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007674:	463b      	mov	r3, r7
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6959      	ldr	r1, [r3, #20]
 800767a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800767e:	b29b      	uxth	r3, r3
 8007680:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007684:	1d38      	adds	r0, r7, #4
 8007686:	6800      	ldr	r0, [r0, #0]
 8007688:	f001 f86c 	bl	8008764 <USB_WritePMA>
 800768c:	e33b      	b.n	8007d06 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800768e:	463b      	mov	r3, r7
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	785b      	ldrb	r3, [r3, #1]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d164      	bne.n	8007762 <USB_EPStartXfer+0x4ba>
 8007698:	1d3b      	adds	r3, r7, #4
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800769e:	1d3b      	adds	r3, r7, #4
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ac:	4413      	add	r3, r2
 80076ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076b0:	463b      	mov	r3, r7
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	011a      	lsls	r2, r3, #4
 80076b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ba:	4413      	add	r3, r2
 80076bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80076c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d112      	bne.n	80076f0 <USB_EPStartXfer+0x448>
 80076ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076d8:	801a      	strh	r2, [r3, #0]
 80076da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	b29b      	uxth	r3, r3
 80076e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ec:	801a      	strh	r2, [r3, #0]
 80076ee:	e057      	b.n	80077a0 <USB_EPStartXfer+0x4f8>
 80076f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076f4:	2b3e      	cmp	r3, #62	; 0x3e
 80076f6:	d817      	bhi.n	8007728 <USB_EPStartXfer+0x480>
 80076f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076fc:	085b      	lsrs	r3, r3, #1
 80076fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d004      	beq.n	8007718 <USB_EPStartXfer+0x470>
 800770e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007712:	3301      	adds	r3, #1
 8007714:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800771c:	b29b      	uxth	r3, r3
 800771e:	029b      	lsls	r3, r3, #10
 8007720:	b29a      	uxth	r2, r3
 8007722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007724:	801a      	strh	r2, [r3, #0]
 8007726:	e03b      	b.n	80077a0 <USB_EPStartXfer+0x4f8>
 8007728:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800772c:	095b      	lsrs	r3, r3, #5
 800772e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007736:	f003 031f 	and.w	r3, r3, #31
 800773a:	2b00      	cmp	r3, #0
 800773c:	d104      	bne.n	8007748 <USB_EPStartXfer+0x4a0>
 800773e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007742:	3b01      	subs	r3, #1
 8007744:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800774c:	b29b      	uxth	r3, r3
 800774e:	029b      	lsls	r3, r3, #10
 8007750:	b29b      	uxth	r3, r3
 8007752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800775a:	b29a      	uxth	r2, r3
 800775c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800775e:	801a      	strh	r2, [r3, #0]
 8007760:	e01e      	b.n	80077a0 <USB_EPStartXfer+0x4f8>
 8007762:	463b      	mov	r3, r7
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	785b      	ldrb	r3, [r3, #1]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d119      	bne.n	80077a0 <USB_EPStartXfer+0x4f8>
 800776c:	1d3b      	adds	r3, r7, #4
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	657b      	str	r3, [r7, #84]	; 0x54
 8007772:	1d3b      	adds	r3, r7, #4
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800777a:	b29b      	uxth	r3, r3
 800777c:	461a      	mov	r2, r3
 800777e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007780:	4413      	add	r3, r2
 8007782:	657b      	str	r3, [r7, #84]	; 0x54
 8007784:	463b      	mov	r3, r7
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	011a      	lsls	r2, r3, #4
 800778c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800778e:	4413      	add	r3, r2
 8007790:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007794:	653b      	str	r3, [r7, #80]	; 0x50
 8007796:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800779a:	b29a      	uxth	r2, r3
 800779c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800779e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80077a0:	463b      	mov	r3, r7
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	891b      	ldrh	r3, [r3, #8]
 80077a6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077aa:	463b      	mov	r3, r7
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6959      	ldr	r1, [r3, #20]
 80077b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80077ba:	1d38      	adds	r0, r7, #4
 80077bc:	6800      	ldr	r0, [r0, #0]
 80077be:	f000 ffd1 	bl	8008764 <USB_WritePMA>
            ep->xfer_buff += len;
 80077c2:	463b      	mov	r3, r7
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	695a      	ldr	r2, [r3, #20]
 80077c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077cc:	441a      	add	r2, r3
 80077ce:	463b      	mov	r3, r7
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077d4:	463b      	mov	r3, r7
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6a1a      	ldr	r2, [r3, #32]
 80077da:	463b      	mov	r3, r7
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d909      	bls.n	80077f8 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80077e4:	463b      	mov	r3, r7
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6a1a      	ldr	r2, [r3, #32]
 80077ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077ee:	1ad2      	subs	r2, r2, r3
 80077f0:	463b      	mov	r3, r7
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	621a      	str	r2, [r3, #32]
 80077f6:	e008      	b.n	800780a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80077f8:	463b      	mov	r3, r7
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007802:	463b      	mov	r3, r7
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2200      	movs	r2, #0
 8007808:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800780a:	1d3b      	adds	r3, r7, #4
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	647b      	str	r3, [r7, #68]	; 0x44
 8007810:	463b      	mov	r3, r7
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	785b      	ldrb	r3, [r3, #1]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d164      	bne.n	80078e4 <USB_EPStartXfer+0x63c>
 800781a:	1d3b      	adds	r3, r7, #4
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007820:	1d3b      	adds	r3, r7, #4
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007828:	b29b      	uxth	r3, r3
 800782a:	461a      	mov	r2, r3
 800782c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800782e:	4413      	add	r3, r2
 8007830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007832:	463b      	mov	r3, r7
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	011a      	lsls	r2, r3, #4
 800783a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800783c:	4413      	add	r3, r2
 800783e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007842:	63bb      	str	r3, [r7, #56]	; 0x38
 8007844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007848:	2b00      	cmp	r3, #0
 800784a:	d112      	bne.n	8007872 <USB_EPStartXfer+0x5ca>
 800784c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	b29b      	uxth	r3, r3
 8007852:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007856:	b29a      	uxth	r2, r3
 8007858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785a:	801a      	strh	r2, [r3, #0]
 800785c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	b29b      	uxth	r3, r3
 8007862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800786a:	b29a      	uxth	r2, r3
 800786c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786e:	801a      	strh	r2, [r3, #0]
 8007870:	e054      	b.n	800791c <USB_EPStartXfer+0x674>
 8007872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007876:	2b3e      	cmp	r3, #62	; 0x3e
 8007878:	d817      	bhi.n	80078aa <USB_EPStartXfer+0x602>
 800787a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800787e:	085b      	lsrs	r3, r3, #1
 8007880:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b00      	cmp	r3, #0
 800788e:	d004      	beq.n	800789a <USB_EPStartXfer+0x5f2>
 8007890:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007894:	3301      	adds	r3, #1
 8007896:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800789a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800789e:	b29b      	uxth	r3, r3
 80078a0:	029b      	lsls	r3, r3, #10
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a6:	801a      	strh	r2, [r3, #0]
 80078a8:	e038      	b.n	800791c <USB_EPStartXfer+0x674>
 80078aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80078b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078b8:	f003 031f 	and.w	r3, r3, #31
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d104      	bne.n	80078ca <USB_EPStartXfer+0x622>
 80078c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078c4:	3b01      	subs	r3, #1
 80078c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80078ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	029b      	lsls	r3, r3, #10
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078dc:	b29a      	uxth	r2, r3
 80078de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e0:	801a      	strh	r2, [r3, #0]
 80078e2:	e01b      	b.n	800791c <USB_EPStartXfer+0x674>
 80078e4:	463b      	mov	r3, r7
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	785b      	ldrb	r3, [r3, #1]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d116      	bne.n	800791c <USB_EPStartXfer+0x674>
 80078ee:	1d3b      	adds	r3, r7, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	461a      	mov	r2, r3
 80078fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078fc:	4413      	add	r3, r2
 80078fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007900:	463b      	mov	r3, r7
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	011a      	lsls	r2, r3, #4
 8007908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800790a:	4413      	add	r3, r2
 800790c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007910:	643b      	str	r3, [r7, #64]	; 0x40
 8007912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007916:	b29a      	uxth	r2, r3
 8007918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800791a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800791c:	463b      	mov	r3, r7
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	895b      	ldrh	r3, [r3, #10]
 8007922:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007926:	463b      	mov	r3, r7
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6959      	ldr	r1, [r3, #20]
 800792c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007930:	b29b      	uxth	r3, r3
 8007932:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007936:	1d38      	adds	r0, r7, #4
 8007938:	6800      	ldr	r0, [r0, #0]
 800793a:	f000 ff13 	bl	8008764 <USB_WritePMA>
 800793e:	e1e2      	b.n	8007d06 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007940:	463b      	mov	r3, r7
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800794a:	1d3b      	adds	r3, r7, #4
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	463b      	mov	r3, r7
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	b29b      	uxth	r3, r3
 800795c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007964:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007968:	1d3b      	adds	r3, r7, #4
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	463b      	mov	r3, r7
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	441a      	add	r2, r3
 8007976:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800797a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800797e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798a:	b29b      	uxth	r3, r3
 800798c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800798e:	1d3b      	adds	r3, r7, #4
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	663b      	str	r3, [r7, #96]	; 0x60
 8007994:	1d3b      	adds	r3, r7, #4
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800799c:	b29b      	uxth	r3, r3
 800799e:	461a      	mov	r2, r3
 80079a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079a2:	4413      	add	r3, r2
 80079a4:	663b      	str	r3, [r7, #96]	; 0x60
 80079a6:	463b      	mov	r3, r7
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	011a      	lsls	r2, r3, #4
 80079ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079b0:	4413      	add	r3, r2
 80079b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079bc:	b29a      	uxth	r2, r3
 80079be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80079c2:	463b      	mov	r3, r7
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	891b      	ldrh	r3, [r3, #8]
 80079c8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079cc:	463b      	mov	r3, r7
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6959      	ldr	r1, [r3, #20]
 80079d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80079dc:	1d38      	adds	r0, r7, #4
 80079de:	6800      	ldr	r0, [r0, #0]
 80079e0:	f000 fec0 	bl	8008764 <USB_WritePMA>
 80079e4:	e18f      	b.n	8007d06 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80079e6:	1d3b      	adds	r3, r7, #4
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	463b      	mov	r3, r7
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 808f 	beq.w	8007b20 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a02:	1d3b      	adds	r3, r7, #4
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a08:	463b      	mov	r3, r7
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d164      	bne.n	8007adc <USB_EPStartXfer+0x834>
 8007a12:	1d3b      	adds	r3, r7, #4
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	673b      	str	r3, [r7, #112]	; 0x70
 8007a18:	1d3b      	adds	r3, r7, #4
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a26:	4413      	add	r3, r2
 8007a28:	673b      	str	r3, [r7, #112]	; 0x70
 8007a2a:	463b      	mov	r3, r7
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	011a      	lsls	r2, r3, #4
 8007a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a34:	4413      	add	r3, r2
 8007a36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d112      	bne.n	8007a6a <USB_EPStartXfer+0x7c2>
 8007a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a52:	801a      	strh	r2, [r3, #0]
 8007a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a56:	881b      	ldrh	r3, [r3, #0]
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a66:	801a      	strh	r2, [r3, #0]
 8007a68:	e054      	b.n	8007b14 <USB_EPStartXfer+0x86c>
 8007a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a6e:	2b3e      	cmp	r3, #62	; 0x3e
 8007a70:	d817      	bhi.n	8007aa2 <USB_EPStartXfer+0x7fa>
 8007a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a76:	085b      	lsrs	r3, r3, #1
 8007a78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d004      	beq.n	8007a92 <USB_EPStartXfer+0x7ea>
 8007a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	029b      	lsls	r3, r3, #10
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a9e:	801a      	strh	r2, [r3, #0]
 8007aa0:	e038      	b.n	8007b14 <USB_EPStartXfer+0x86c>
 8007aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007aa6:	095b      	lsrs	r3, r3, #5
 8007aa8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ab0:	f003 031f 	and.w	r3, r3, #31
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d104      	bne.n	8007ac2 <USB_EPStartXfer+0x81a>
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007abc:	3b01      	subs	r3, #1
 8007abe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	029b      	lsls	r3, r3, #10
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad8:	801a      	strh	r2, [r3, #0]
 8007ada:	e01b      	b.n	8007b14 <USB_EPStartXfer+0x86c>
 8007adc:	463b      	mov	r3, r7
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	785b      	ldrb	r3, [r3, #1]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d116      	bne.n	8007b14 <USB_EPStartXfer+0x86c>
 8007ae6:	1d3b      	adds	r3, r7, #4
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	461a      	mov	r2, r3
 8007af2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007af4:	4413      	add	r3, r2
 8007af6:	67bb      	str	r3, [r7, #120]	; 0x78
 8007af8:	463b      	mov	r3, r7
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	011a      	lsls	r2, r3, #4
 8007b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b02:	4413      	add	r3, r2
 8007b04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b08:	677b      	str	r3, [r7, #116]	; 0x74
 8007b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007b14:	463b      	mov	r3, r7
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	895b      	ldrh	r3, [r3, #10]
 8007b1a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8007b1e:	e097      	b.n	8007c50 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b20:	463b      	mov	r3, r7
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	785b      	ldrb	r3, [r3, #1]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d168      	bne.n	8007bfc <USB_EPStartXfer+0x954>
 8007b2a:	1d3b      	adds	r3, r7, #4
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b32:	1d3b      	adds	r3, r7, #4
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b42:	4413      	add	r3, r2
 8007b44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b48:	463b      	mov	r3, r7
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	011a      	lsls	r2, r3, #4
 8007b50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b54:	4413      	add	r3, r2
 8007b56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d112      	bne.n	8007b8a <USB_EPStartXfer+0x8e2>
 8007b64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b72:	801a      	strh	r2, [r3, #0]
 8007b74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b76:	881b      	ldrh	r3, [r3, #0]
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b86:	801a      	strh	r2, [r3, #0]
 8007b88:	e05d      	b.n	8007c46 <USB_EPStartXfer+0x99e>
 8007b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b8e:	2b3e      	cmp	r3, #62	; 0x3e
 8007b90:	d817      	bhi.n	8007bc2 <USB_EPStartXfer+0x91a>
 8007b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b96:	085b      	lsrs	r3, r3, #1
 8007b98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d004      	beq.n	8007bb2 <USB_EPStartXfer+0x90a>
 8007ba8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007bac:	3301      	adds	r3, #1
 8007bae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007bb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	029b      	lsls	r3, r3, #10
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007bbe:	801a      	strh	r2, [r3, #0]
 8007bc0:	e041      	b.n	8007c46 <USB_EPStartXfer+0x99e>
 8007bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bc6:	095b      	lsrs	r3, r3, #5
 8007bc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bd0:	f003 031f 	and.w	r3, r3, #31
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d104      	bne.n	8007be2 <USB_EPStartXfer+0x93a>
 8007bd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007be2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	029b      	lsls	r3, r3, #10
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007bf8:	801a      	strh	r2, [r3, #0]
 8007bfa:	e024      	b.n	8007c46 <USB_EPStartXfer+0x99e>
 8007bfc:	463b      	mov	r3, r7
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	785b      	ldrb	r3, [r3, #1]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d11f      	bne.n	8007c46 <USB_EPStartXfer+0x99e>
 8007c06:	1d3b      	adds	r3, r7, #4
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c0e:	1d3b      	adds	r3, r7, #4
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	461a      	mov	r2, r3
 8007c1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c1e:	4413      	add	r3, r2
 8007c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c24:	463b      	mov	r3, r7
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	011a      	lsls	r2, r3, #4
 8007c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c30:	4413      	add	r3, r2
 8007c32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c44:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007c46:	463b      	mov	r3, r7
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	891b      	ldrh	r3, [r3, #8]
 8007c4c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c50:	463b      	mov	r3, r7
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6959      	ldr	r1, [r3, #20]
 8007c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007c60:	1d38      	adds	r0, r7, #4
 8007c62:	6800      	ldr	r0, [r0, #0]
 8007c64:	f000 fd7e 	bl	8008764 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007c68:	463b      	mov	r3, r7
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	785b      	ldrb	r3, [r3, #1]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d122      	bne.n	8007cb8 <USB_EPStartXfer+0xa10>
 8007c72:	1d3b      	adds	r3, r7, #4
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	463b      	mov	r3, r7
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4413      	add	r3, r2
 8007c80:	881b      	ldrh	r3, [r3, #0]
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c8c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007c90:	1d3b      	adds	r3, r7, #4
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	463b      	mov	r3, r7
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	441a      	add	r2, r3
 8007c9e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	8013      	strh	r3, [r2, #0]
 8007cb6:	e026      	b.n	8007d06 <USB_EPStartXfer+0xa5e>
 8007cb8:	463b      	mov	r3, r7
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	785b      	ldrb	r3, [r3, #1]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d121      	bne.n	8007d06 <USB_EPStartXfer+0xa5e>
 8007cc2:	1d3b      	adds	r3, r7, #4
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	463b      	mov	r3, r7
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	881b      	ldrh	r3, [r3, #0]
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cdc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8007ce0:	1d3b      	adds	r3, r7, #4
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	463b      	mov	r3, r7
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	441a      	add	r2, r3
 8007cee:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8007cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007d06:	1d3b      	adds	r3, r7, #4
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	463b      	mov	r3, r7
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4413      	add	r3, r2
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	f107 020e 	add.w	r2, r7, #14
 8007d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d24:	8013      	strh	r3, [r2, #0]
 8007d26:	f107 030e 	add.w	r3, r7, #14
 8007d2a:	f107 020e 	add.w	r2, r7, #14
 8007d2e:	8812      	ldrh	r2, [r2, #0]
 8007d30:	f082 0210 	eor.w	r2, r2, #16
 8007d34:	801a      	strh	r2, [r3, #0]
 8007d36:	f107 030e 	add.w	r3, r7, #14
 8007d3a:	f107 020e 	add.w	r2, r7, #14
 8007d3e:	8812      	ldrh	r2, [r2, #0]
 8007d40:	f082 0220 	eor.w	r2, r2, #32
 8007d44:	801a      	strh	r2, [r3, #0]
 8007d46:	1d3b      	adds	r3, r7, #4
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	463b      	mov	r3, r7
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	441a      	add	r2, r3
 8007d54:	f107 030e 	add.w	r3, r7, #14
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	8013      	strh	r3, [r2, #0]
 8007d6e:	e3b5      	b.n	80084dc <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007d70:	463b      	mov	r3, r7
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	7b1b      	ldrb	r3, [r3, #12]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f040 8090 	bne.w	8007e9c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007d7c:	463b      	mov	r3, r7
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699a      	ldr	r2, [r3, #24]
 8007d82:	463b      	mov	r3, r7
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d90e      	bls.n	8007daa <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8007d8c:	463b      	mov	r3, r7
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8007d96:	463b      	mov	r3, r7
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	699a      	ldr	r2, [r3, #24]
 8007d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007da0:	1ad2      	subs	r2, r2, r3
 8007da2:	463b      	mov	r3, r7
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	619a      	str	r2, [r3, #24]
 8007da8:	e008      	b.n	8007dbc <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8007daa:	463b      	mov	r3, r7
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8007db4:	463b      	mov	r3, r7
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2200      	movs	r2, #0
 8007dba:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007dbc:	1d3b      	adds	r3, r7, #4
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007dc4:	1d3b      	adds	r3, r7, #4
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007dda:	463b      	mov	r3, r7
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	011a      	lsls	r2, r3, #4
 8007de2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007de6:	4413      	add	r3, r2
 8007de8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d116      	bne.n	8007e26 <USB_EPStartXfer+0xb7e>
 8007df8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e0a:	801a      	strh	r2, [r3, #0]
 8007e0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e22:	801a      	strh	r2, [r3, #0]
 8007e24:	e32c      	b.n	8008480 <USB_EPStartXfer+0x11d8>
 8007e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e2a:	2b3e      	cmp	r3, #62	; 0x3e
 8007e2c:	d818      	bhi.n	8007e60 <USB_EPStartXfer+0xbb8>
 8007e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e32:	085b      	lsrs	r3, r3, #1
 8007e34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d004      	beq.n	8007e4e <USB_EPStartXfer+0xba6>
 8007e44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007e48:	3301      	adds	r3, #1
 8007e4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007e4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	029b      	lsls	r3, r3, #10
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e5c:	801a      	strh	r2, [r3, #0]
 8007e5e:	e30f      	b.n	8008480 <USB_EPStartXfer+0x11d8>
 8007e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e64:	095b      	lsrs	r3, r3, #5
 8007e66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e6e:	f003 031f 	and.w	r3, r3, #31
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d104      	bne.n	8007e80 <USB_EPStartXfer+0xbd8>
 8007e76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007e80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	029b      	lsls	r3, r3, #10
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e98:	801a      	strh	r2, [r3, #0]
 8007e9a:	e2f1      	b.n	8008480 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007e9c:	463b      	mov	r3, r7
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	78db      	ldrb	r3, [r3, #3]
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	f040 818f 	bne.w	80081c6 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007ea8:	463b      	mov	r3, r7
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	785b      	ldrb	r3, [r3, #1]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d175      	bne.n	8007f9e <USB_EPStartXfer+0xcf6>
 8007eb2:	1d3b      	adds	r3, r7, #4
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007eba:	1d3b      	adds	r3, r7, #4
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007eca:	4413      	add	r3, r2
 8007ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ed0:	463b      	mov	r3, r7
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	011a      	lsls	r2, r3, #4
 8007ed8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007edc:	4413      	add	r3, r2
 8007ede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ee6:	463b      	mov	r3, r7
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d116      	bne.n	8007f1e <USB_EPStartXfer+0xc76>
 8007ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ef4:	881b      	ldrh	r3, [r3, #0]
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f02:	801a      	strh	r2, [r3, #0]
 8007f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f1a:	801a      	strh	r2, [r3, #0]
 8007f1c:	e065      	b.n	8007fea <USB_EPStartXfer+0xd42>
 8007f1e:	463b      	mov	r3, r7
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	2b3e      	cmp	r3, #62	; 0x3e
 8007f26:	d81a      	bhi.n	8007f5e <USB_EPStartXfer+0xcb6>
 8007f28:	463b      	mov	r3, r7
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	085b      	lsrs	r3, r3, #1
 8007f30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f34:	463b      	mov	r3, r7
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d004      	beq.n	8007f4c <USB_EPStartXfer+0xca4>
 8007f42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f46:	3301      	adds	r3, #1
 8007f48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	029b      	lsls	r3, r3, #10
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f5a:	801a      	strh	r2, [r3, #0]
 8007f5c:	e045      	b.n	8007fea <USB_EPStartXfer+0xd42>
 8007f5e:	463b      	mov	r3, r7
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	095b      	lsrs	r3, r3, #5
 8007f66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f6a:	463b      	mov	r3, r7
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	f003 031f 	and.w	r3, r3, #31
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d104      	bne.n	8007f82 <USB_EPStartXfer+0xcda>
 8007f78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	029b      	lsls	r3, r3, #10
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f9a:	801a      	strh	r2, [r3, #0]
 8007f9c:	e025      	b.n	8007fea <USB_EPStartXfer+0xd42>
 8007f9e:	463b      	mov	r3, r7
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	785b      	ldrb	r3, [r3, #1]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d120      	bne.n	8007fea <USB_EPStartXfer+0xd42>
 8007fa8:	1d3b      	adds	r3, r7, #4
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fb0:	1d3b      	adds	r3, r7, #4
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	461a      	mov	r2, r3
 8007fbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fc6:	463b      	mov	r3, r7
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	011a      	lsls	r2, r3, #4
 8007fce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fdc:	463b      	mov	r3, r7
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007fe8:	801a      	strh	r2, [r3, #0]
 8007fea:	1d3b      	adds	r3, r7, #4
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ff2:	463b      	mov	r3, r7
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	785b      	ldrb	r3, [r3, #1]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d175      	bne.n	80080e8 <USB_EPStartXfer+0xe40>
 8007ffc:	1d3b      	adds	r3, r7, #4
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008004:	1d3b      	adds	r3, r7, #4
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800800c:	b29b      	uxth	r3, r3
 800800e:	461a      	mov	r2, r3
 8008010:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008014:	4413      	add	r3, r2
 8008016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800801a:	463b      	mov	r3, r7
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	011a      	lsls	r2, r3, #4
 8008022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008026:	4413      	add	r3, r2
 8008028:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800802c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008030:	463b      	mov	r3, r7
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d116      	bne.n	8008068 <USB_EPStartXfer+0xdc0>
 800803a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	b29b      	uxth	r3, r3
 8008042:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008046:	b29a      	uxth	r2, r3
 8008048:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800804c:	801a      	strh	r2, [r3, #0]
 800804e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	b29b      	uxth	r3, r3
 8008056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800805a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800805e:	b29a      	uxth	r2, r3
 8008060:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008064:	801a      	strh	r2, [r3, #0]
 8008066:	e061      	b.n	800812c <USB_EPStartXfer+0xe84>
 8008068:	463b      	mov	r3, r7
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	2b3e      	cmp	r3, #62	; 0x3e
 8008070:	d81a      	bhi.n	80080a8 <USB_EPStartXfer+0xe00>
 8008072:	463b      	mov	r3, r7
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	085b      	lsrs	r3, r3, #1
 800807a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800807e:	463b      	mov	r3, r7
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	2b00      	cmp	r3, #0
 800808a:	d004      	beq.n	8008096 <USB_EPStartXfer+0xdee>
 800808c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008090:	3301      	adds	r3, #1
 8008092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809a:	b29b      	uxth	r3, r3
 800809c:	029b      	lsls	r3, r3, #10
 800809e:	b29a      	uxth	r2, r3
 80080a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080a4:	801a      	strh	r2, [r3, #0]
 80080a6:	e041      	b.n	800812c <USB_EPStartXfer+0xe84>
 80080a8:	463b      	mov	r3, r7
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	095b      	lsrs	r3, r3, #5
 80080b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080b4:	463b      	mov	r3, r7
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	f003 031f 	and.w	r3, r3, #31
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d104      	bne.n	80080cc <USB_EPStartXfer+0xe24>
 80080c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c6:	3b01      	subs	r3, #1
 80080c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	029b      	lsls	r3, r3, #10
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080de:	b29a      	uxth	r2, r3
 80080e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080e4:	801a      	strh	r2, [r3, #0]
 80080e6:	e021      	b.n	800812c <USB_EPStartXfer+0xe84>
 80080e8:	463b      	mov	r3, r7
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	785b      	ldrb	r3, [r3, #1]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d11c      	bne.n	800812c <USB_EPStartXfer+0xe84>
 80080f2:	1d3b      	adds	r3, r7, #4
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	461a      	mov	r2, r3
 80080fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008102:	4413      	add	r3, r2
 8008104:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008108:	463b      	mov	r3, r7
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	011a      	lsls	r2, r3, #4
 8008110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008114:	4413      	add	r3, r2
 8008116:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800811a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800811e:	463b      	mov	r3, r7
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	b29a      	uxth	r2, r3
 8008126:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800812a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800812c:	463b      	mov	r3, r7
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 81a4 	beq.w	8008480 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008138:	1d3b      	adds	r3, r7, #4
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	463b      	mov	r3, r7
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800814c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d005      	beq.n	8008164 <USB_EPStartXfer+0xebc>
 8008158:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800815c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10d      	bne.n	8008180 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008164:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800816c:	2b00      	cmp	r3, #0
 800816e:	f040 8187 	bne.w	8008480 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008172:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817a:	2b00      	cmp	r3, #0
 800817c:	f040 8180 	bne.w	8008480 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008180:	1d3b      	adds	r3, r7, #4
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	463b      	mov	r3, r7
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	b29b      	uxth	r3, r3
 8008192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800819e:	1d3b      	adds	r3, r7, #4
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	463b      	mov	r3, r7
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	441a      	add	r2, r3
 80081ac:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80081b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	8013      	strh	r3, [r2, #0]
 80081c4:	e15c      	b.n	8008480 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80081c6:	463b      	mov	r3, r7
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	78db      	ldrb	r3, [r3, #3]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	f040 8155 	bne.w	800847c <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80081d2:	463b      	mov	r3, r7
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	699a      	ldr	r2, [r3, #24]
 80081d8:	463b      	mov	r3, r7
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d90e      	bls.n	8008200 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80081e2:	463b      	mov	r3, r7
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80081ec:	463b      	mov	r3, r7
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	699a      	ldr	r2, [r3, #24]
 80081f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081f6:	1ad2      	subs	r2, r2, r3
 80081f8:	463b      	mov	r3, r7
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	619a      	str	r2, [r3, #24]
 80081fe:	e008      	b.n	8008212 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8008200:	463b      	mov	r3, r7
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800820a:	463b      	mov	r3, r7
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2200      	movs	r2, #0
 8008210:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008212:	463b      	mov	r3, r7
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	785b      	ldrb	r3, [r3, #1]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d16f      	bne.n	80082fc <USB_EPStartXfer+0x1054>
 800821c:	1d3b      	adds	r3, r7, #4
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008224:	1d3b      	adds	r3, r7, #4
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800822c:	b29b      	uxth	r3, r3
 800822e:	461a      	mov	r2, r3
 8008230:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008234:	4413      	add	r3, r2
 8008236:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800823a:	463b      	mov	r3, r7
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	011a      	lsls	r2, r3, #4
 8008242:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008246:	4413      	add	r3, r2
 8008248:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800824c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008254:	2b00      	cmp	r3, #0
 8008256:	d116      	bne.n	8008286 <USB_EPStartXfer+0xfde>
 8008258:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	b29b      	uxth	r3, r3
 8008260:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008264:	b29a      	uxth	r2, r3
 8008266:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800826a:	801a      	strh	r2, [r3, #0]
 800826c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	b29b      	uxth	r3, r3
 8008274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800827c:	b29a      	uxth	r2, r3
 800827e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008282:	801a      	strh	r2, [r3, #0]
 8008284:	e05f      	b.n	8008346 <USB_EPStartXfer+0x109e>
 8008286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800828a:	2b3e      	cmp	r3, #62	; 0x3e
 800828c:	d818      	bhi.n	80082c0 <USB_EPStartXfer+0x1018>
 800828e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008292:	085b      	lsrs	r3, r3, #1
 8008294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d004      	beq.n	80082ae <USB_EPStartXfer+0x1006>
 80082a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082a8:	3301      	adds	r3, #1
 80082aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	029b      	lsls	r3, r3, #10
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80082bc:	801a      	strh	r2, [r3, #0]
 80082be:	e042      	b.n	8008346 <USB_EPStartXfer+0x109e>
 80082c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082c4:	095b      	lsrs	r3, r3, #5
 80082c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082ce:	f003 031f 	and.w	r3, r3, #31
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d104      	bne.n	80082e0 <USB_EPStartXfer+0x1038>
 80082d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082da:	3b01      	subs	r3, #1
 80082dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	029b      	lsls	r3, r3, #10
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80082f8:	801a      	strh	r2, [r3, #0]
 80082fa:	e024      	b.n	8008346 <USB_EPStartXfer+0x109e>
 80082fc:	463b      	mov	r3, r7
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	785b      	ldrb	r3, [r3, #1]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d11f      	bne.n	8008346 <USB_EPStartXfer+0x109e>
 8008306:	1d3b      	adds	r3, r7, #4
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800830e:	1d3b      	adds	r3, r7, #4
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008316:	b29b      	uxth	r3, r3
 8008318:	461a      	mov	r2, r3
 800831a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800831e:	4413      	add	r3, r2
 8008320:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008324:	463b      	mov	r3, r7
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	011a      	lsls	r2, r3, #4
 800832c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008330:	4413      	add	r3, r2
 8008332:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008336:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800833a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800833e:	b29a      	uxth	r2, r3
 8008340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008344:	801a      	strh	r2, [r3, #0]
 8008346:	1d3b      	adds	r3, r7, #4
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800834e:	463b      	mov	r3, r7
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	785b      	ldrb	r3, [r3, #1]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d16f      	bne.n	8008438 <USB_EPStartXfer+0x1190>
 8008358:	1d3b      	adds	r3, r7, #4
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008360:	1d3b      	adds	r3, r7, #4
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008368:	b29b      	uxth	r3, r3
 800836a:	461a      	mov	r2, r3
 800836c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008370:	4413      	add	r3, r2
 8008372:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008376:	463b      	mov	r3, r7
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	011a      	lsls	r2, r3, #4
 800837e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008382:	4413      	add	r3, r2
 8008384:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008388:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800838c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008390:	2b00      	cmp	r3, #0
 8008392:	d116      	bne.n	80083c2 <USB_EPStartXfer+0x111a>
 8008394:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	b29b      	uxth	r3, r3
 800839c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80083a6:	801a      	strh	r2, [r3, #0]
 80083a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80083be:	801a      	strh	r2, [r3, #0]
 80083c0:	e05e      	b.n	8008480 <USB_EPStartXfer+0x11d8>
 80083c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083c6:	2b3e      	cmp	r3, #62	; 0x3e
 80083c8:	d818      	bhi.n	80083fc <USB_EPStartXfer+0x1154>
 80083ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083ce:	085b      	lsrs	r3, r3, #1
 80083d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80083d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d004      	beq.n	80083ea <USB_EPStartXfer+0x1142>
 80083e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083e4:	3301      	adds	r3, #1
 80083e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80083ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	029b      	lsls	r3, r3, #10
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80083f8:	801a      	strh	r2, [r3, #0]
 80083fa:	e041      	b.n	8008480 <USB_EPStartXfer+0x11d8>
 80083fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008400:	095b      	lsrs	r3, r3, #5
 8008402:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800840a:	f003 031f 	and.w	r3, r3, #31
 800840e:	2b00      	cmp	r3, #0
 8008410:	d104      	bne.n	800841c <USB_EPStartXfer+0x1174>
 8008412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008416:	3b01      	subs	r3, #1
 8008418:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800841c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008420:	b29b      	uxth	r3, r3
 8008422:	029b      	lsls	r3, r3, #10
 8008424:	b29b      	uxth	r3, r3
 8008426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800842a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800842e:	b29a      	uxth	r2, r3
 8008430:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008434:	801a      	strh	r2, [r3, #0]
 8008436:	e023      	b.n	8008480 <USB_EPStartXfer+0x11d8>
 8008438:	463b      	mov	r3, r7
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	785b      	ldrb	r3, [r3, #1]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d11e      	bne.n	8008480 <USB_EPStartXfer+0x11d8>
 8008442:	1d3b      	adds	r3, r7, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800844a:	b29b      	uxth	r3, r3
 800844c:	461a      	mov	r2, r3
 800844e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008452:	4413      	add	r3, r2
 8008454:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008458:	463b      	mov	r3, r7
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	011a      	lsls	r2, r3, #4
 8008460:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008464:	4413      	add	r3, r2
 8008466:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800846a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800846e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008472:	b29a      	uxth	r2, r3
 8008474:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008478:	801a      	strh	r2, [r3, #0]
 800847a:	e001      	b.n	8008480 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e02e      	b.n	80084de <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008480:	1d3b      	adds	r3, r7, #4
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	463b      	mov	r3, r7
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	b29b      	uxth	r3, r3
 8008492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800849e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80084a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80084a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80084aa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80084ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80084b6:	1d3b      	adds	r3, r7, #4
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	463b      	mov	r3, r7
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	441a      	add	r2, r3
 80084c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80084c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d8:	b29b      	uxth	r3, r3
 80084da:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	785b      	ldrb	r3, [r3, #1]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d020      	beq.n	800853c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	b29b      	uxth	r3, r3
 8008508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800850c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008510:	81bb      	strh	r3, [r7, #12]
 8008512:	89bb      	ldrh	r3, [r7, #12]
 8008514:	f083 0310 	eor.w	r3, r3, #16
 8008518:	81bb      	strh	r3, [r7, #12]
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	441a      	add	r2, r3
 8008524:	89bb      	ldrh	r3, [r7, #12]
 8008526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800852a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800852e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008536:	b29b      	uxth	r3, r3
 8008538:	8013      	strh	r3, [r2, #0]
 800853a:	e01f      	b.n	800857c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4413      	add	r3, r2
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	b29b      	uxth	r3, r3
 800854a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800854e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008552:	81fb      	strh	r3, [r7, #14]
 8008554:	89fb      	ldrh	r3, [r7, #14]
 8008556:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800855a:	81fb      	strh	r3, [r7, #14]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	441a      	add	r2, r3
 8008566:	89fb      	ldrh	r3, [r7, #14]
 8008568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800856c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008578:	b29b      	uxth	r3, r3
 800857a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	bc80      	pop	{r7}
 8008586:	4770      	bx	lr

08008588 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008588:	b480      	push	{r7}
 800858a:	b087      	sub	sp, #28
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	7b1b      	ldrb	r3, [r3, #12]
 8008596:	2b00      	cmp	r3, #0
 8008598:	f040 809d 	bne.w	80086d6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	785b      	ldrb	r3, [r3, #1]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d04c      	beq.n	800863e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	823b      	strh	r3, [r7, #16]
 80085b2:	8a3b      	ldrh	r3, [r7, #16]
 80085b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d01b      	beq.n	80085f4 <USB_EPClearStall+0x6c>
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085d2:	81fb      	strh	r3, [r7, #14]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	441a      	add	r2, r3
 80085de:	89fb      	ldrh	r3, [r7, #14]
 80085e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	78db      	ldrb	r3, [r3, #3]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d06c      	beq.n	80086d6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4413      	add	r3, r2
 8008606:	881b      	ldrh	r3, [r3, #0]
 8008608:	b29b      	uxth	r3, r3
 800860a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800860e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008612:	81bb      	strh	r3, [r7, #12]
 8008614:	89bb      	ldrh	r3, [r7, #12]
 8008616:	f083 0320 	eor.w	r3, r3, #32
 800861a:	81bb      	strh	r3, [r7, #12]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	441a      	add	r2, r3
 8008626:	89bb      	ldrh	r3, [r7, #12]
 8008628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800862c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008638:	b29b      	uxth	r3, r3
 800863a:	8013      	strh	r3, [r2, #0]
 800863c:	e04b      	b.n	80086d6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	881b      	ldrh	r3, [r3, #0]
 800864a:	82fb      	strh	r3, [r7, #22]
 800864c:	8afb      	ldrh	r3, [r7, #22]
 800864e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d01b      	beq.n	800868e <USB_EPClearStall+0x106>
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	b29b      	uxth	r3, r3
 8008664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800866c:	82bb      	strh	r3, [r7, #20]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	441a      	add	r2, r3
 8008678:	8abb      	ldrh	r3, [r7, #20]
 800867a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800867e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800868a:	b29b      	uxth	r3, r3
 800868c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4413      	add	r3, r2
 8008698:	881b      	ldrh	r3, [r3, #0]
 800869a:	b29b      	uxth	r3, r3
 800869c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086a4:	827b      	strh	r3, [r7, #18]
 80086a6:	8a7b      	ldrh	r3, [r7, #18]
 80086a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80086ac:	827b      	strh	r3, [r7, #18]
 80086ae:	8a7b      	ldrh	r3, [r7, #18]
 80086b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80086b4:	827b      	strh	r3, [r7, #18]
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	441a      	add	r2, r3
 80086c0:	8a7b      	ldrh	r3, [r7, #18]
 80086c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	371c      	adds	r7, #28
 80086dc:	46bd      	mov	sp, r7
 80086de:	bc80      	pop	{r7}
 80086e0:	4770      	bx	lr

080086e2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	460b      	mov	r3, r1
 80086ec:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d103      	bne.n	80086fc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2280      	movs	r2, #128	; 0x80
 80086f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	bc80      	pop	{r7}
 8008706:	4770      	bx	lr

08008708 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	bc80      	pop	{r7}
 800871a:	4770      	bx	lr

0800871c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	bc80      	pop	{r7}
 800872e:	4770      	bx	lr

08008730 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800873e:	b29b      	uxth	r3, r3
 8008740:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008742:	68fb      	ldr	r3, [r7, #12]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	bc80      	pop	{r7}
 800874c:	4770      	bx	lr

0800874e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800874e:	b480      	push	{r7}
 8008750:	b083      	sub	sp, #12
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	bc80      	pop	{r7}
 8008762:	4770      	bx	lr

08008764 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008764:	b480      	push	{r7}
 8008766:	b08d      	sub	sp, #52	; 0x34
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	4611      	mov	r1, r2
 8008770:	461a      	mov	r2, r3
 8008772:	460b      	mov	r3, r1
 8008774:	80fb      	strh	r3, [r7, #6]
 8008776:	4613      	mov	r3, r2
 8008778:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800877a:	88bb      	ldrh	r3, [r7, #4]
 800877c:	3301      	adds	r3, #1
 800877e:	085b      	lsrs	r3, r3, #1
 8008780:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800878a:	88fb      	ldrh	r3, [r7, #6]
 800878c:	005a      	lsls	r2, r3, #1
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	4413      	add	r3, r2
 8008792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008796:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008798:	6a3b      	ldr	r3, [r7, #32]
 800879a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800879c:	e01e      	b.n	80087dc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	3301      	adds	r3, #1
 80087a8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	021b      	lsls	r3, r3, #8
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	461a      	mov	r2, r3
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	b29a      	uxth	r2, r3
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80087c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c6:	3302      	adds	r3, #2
 80087c8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	3302      	adds	r3, #2
 80087ce:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	3301      	adds	r3, #1
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80087d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d8:	3b01      	subs	r3, #1
 80087da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1dd      	bne.n	800879e <USB_WritePMA+0x3a>
  }
}
 80087e2:	bf00      	nop
 80087e4:	3734      	adds	r7, #52	; 0x34
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bc80      	pop	{r7}
 80087ea:	4770      	bx	lr

080087ec <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b08b      	sub	sp, #44	; 0x2c
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	4611      	mov	r1, r2
 80087f8:	461a      	mov	r2, r3
 80087fa:	460b      	mov	r3, r1
 80087fc:	80fb      	strh	r3, [r7, #6]
 80087fe:	4613      	mov	r3, r2
 8008800:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008802:	88bb      	ldrh	r3, [r7, #4]
 8008804:	085b      	lsrs	r3, r3, #1
 8008806:	b29b      	uxth	r3, r3
 8008808:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008812:	88fb      	ldrh	r3, [r7, #6]
 8008814:	005a      	lsls	r2, r3, #1
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	4413      	add	r3, r2
 800881a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800881e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	627b      	str	r3, [r7, #36]	; 0x24
 8008824:	e01b      	b.n	800885e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008826:	6a3b      	ldr	r3, [r7, #32]
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	b29b      	uxth	r3, r3
 800882c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800882e:	6a3b      	ldr	r3, [r7, #32]
 8008830:	3302      	adds	r3, #2
 8008832:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	b2da      	uxtb	r2, r3
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	3301      	adds	r3, #1
 8008840:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	0a1b      	lsrs	r3, r3, #8
 8008846:	b2da      	uxtb	r2, r3
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	3301      	adds	r3, #1
 8008850:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	3302      	adds	r3, #2
 8008856:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	3b01      	subs	r3, #1
 800885c:	627b      	str	r3, [r7, #36]	; 0x24
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1e0      	bne.n	8008826 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008864:	88bb      	ldrh	r3, [r7, #4]
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	b29b      	uxth	r3, r3
 800886c:	2b00      	cmp	r3, #0
 800886e:	d007      	beq.n	8008880 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	b29b      	uxth	r3, r3
 8008876:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	b2da      	uxtb	r2, r3
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	701a      	strb	r2, [r3, #0]
  }
}
 8008880:	bf00      	nop
 8008882:	372c      	adds	r7, #44	; 0x2c
 8008884:	46bd      	mov	sp, r7
 8008886:	bc80      	pop	{r7}
 8008888:	4770      	bx	lr

0800888a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	460b      	mov	r3, r1
 8008894:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	7c1b      	ldrb	r3, [r3, #16]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d115      	bne.n	80088ce <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088a6:	2202      	movs	r2, #2
 80088a8:	2181      	movs	r1, #129	; 0x81
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f001 fe1f 	bl	800a4ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088ba:	2202      	movs	r2, #2
 80088bc:	2101      	movs	r1, #1
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f001 fe15 	bl	800a4ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80088cc:	e012      	b.n	80088f4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088ce:	2340      	movs	r3, #64	; 0x40
 80088d0:	2202      	movs	r2, #2
 80088d2:	2181      	movs	r1, #129	; 0x81
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f001 fe0a 	bl	800a4ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088e0:	2340      	movs	r3, #64	; 0x40
 80088e2:	2202      	movs	r2, #2
 80088e4:	2101      	movs	r1, #1
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f001 fe01 	bl	800a4ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088f4:	2308      	movs	r3, #8
 80088f6:	2203      	movs	r2, #3
 80088f8:	2182      	movs	r1, #130	; 0x82
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f001 fdf7 	bl	800a4ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008906:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800890a:	f001 ff17 	bl	800a73c <USBD_static_malloc>
 800890e:	4602      	mov	r2, r0
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800891c:	2b00      	cmp	r3, #0
 800891e:	d102      	bne.n	8008926 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008920:	2301      	movs	r3, #1
 8008922:	73fb      	strb	r3, [r7, #15]
 8008924:	e026      	b.n	8008974 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800892c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	2200      	movs	r2, #0
 800893c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2200      	movs	r2, #0
 8008944:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	7c1b      	ldrb	r3, [r3, #16]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d109      	bne.n	8008964 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800895a:	2101      	movs	r1, #1
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 feb7 	bl	800a6d0 <USBD_LL_PrepareReceive>
 8008962:	e007      	b.n	8008974 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800896a:	2340      	movs	r3, #64	; 0x40
 800896c:	2101      	movs	r1, #1
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 feae 	bl	800a6d0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008974:	7bfb      	ldrb	r3, [r7, #15]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	460b      	mov	r3, r1
 8008988:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800898e:	2181      	movs	r1, #129	; 0x81
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f001 fdd2 	bl	800a53a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800899c:	2101      	movs	r1, #1
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 fdcb 	bl	800a53a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80089ac:	2182      	movs	r1, #130	; 0x82
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f001 fdc3 	bl	800a53a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00e      	beq.n	80089e2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d4:	4618      	mov	r0, r3
 80089d6:	f001 febd 	bl	800a754 <USBD_static_free>
    pdev->pClassData = NULL;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089fc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008a02:	2300      	movs	r3, #0
 8008a04:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d039      	beq.n	8008a8a <USBD_CDC_Setup+0x9e>
 8008a16:	2b20      	cmp	r3, #32
 8008a18:	d17c      	bne.n	8008b14 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	88db      	ldrh	r3, [r3, #6]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d029      	beq.n	8008a76 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	b25b      	sxtb	r3, r3
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	da11      	bge.n	8008a50 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	683a      	ldr	r2, [r7, #0]
 8008a36:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008a38:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	88d2      	ldrh	r2, [r2, #6]
 8008a3e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a40:	6939      	ldr	r1, [r7, #16]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	88db      	ldrh	r3, [r3, #6]
 8008a46:	461a      	mov	r2, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f001 f9c9 	bl	8009de0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008a4e:	e068      	b.n	8008b22 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	785a      	ldrb	r2, [r3, #1]
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	88db      	ldrh	r3, [r3, #6]
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a66:	6939      	ldr	r1, [r7, #16]
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	88db      	ldrh	r3, [r3, #6]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f001 f9e4 	bl	8009e3c <USBD_CtlPrepareRx>
      break;
 8008a74:	e055      	b.n	8008b22 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	7850      	ldrb	r0, [r2, #1]
 8008a82:	2200      	movs	r2, #0
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	4798      	blx	r3
      break;
 8008a88:	e04b      	b.n	8008b22 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	785b      	ldrb	r3, [r3, #1]
 8008a8e:	2b0a      	cmp	r3, #10
 8008a90:	d017      	beq.n	8008ac2 <USBD_CDC_Setup+0xd6>
 8008a92:	2b0b      	cmp	r3, #11
 8008a94:	d029      	beq.n	8008aea <USBD_CDC_Setup+0xfe>
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d133      	bne.n	8008b02 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa0:	2b03      	cmp	r3, #3
 8008aa2:	d107      	bne.n	8008ab4 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008aa4:	f107 030c 	add.w	r3, r7, #12
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f001 f997 	bl	8009de0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ab2:	e02e      	b.n	8008b12 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f001 f928 	bl	8009d0c <USBD_CtlError>
            ret = USBD_FAIL;
 8008abc:	2302      	movs	r3, #2
 8008abe:	75fb      	strb	r3, [r7, #23]
          break;
 8008ac0:	e027      	b.n	8008b12 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d107      	bne.n	8008adc <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008acc:	f107 030f 	add.w	r3, r7, #15
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 f983 	bl	8009de0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ada:	e01a      	b.n	8008b12 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f001 f914 	bl	8009d0c <USBD_CtlError>
            ret = USBD_FAIL;
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	75fb      	strb	r3, [r7, #23]
          break;
 8008ae8:	e013      	b.n	8008b12 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af0:	2b03      	cmp	r3, #3
 8008af2:	d00d      	beq.n	8008b10 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f001 f908 	bl	8009d0c <USBD_CtlError>
            ret = USBD_FAIL;
 8008afc:	2302      	movs	r3, #2
 8008afe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b00:	e006      	b.n	8008b10 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f001 f901 	bl	8009d0c <USBD_CtlError>
          ret = USBD_FAIL;
 8008b0a:	2302      	movs	r3, #2
 8008b0c:	75fb      	strb	r3, [r7, #23]
          break;
 8008b0e:	e000      	b.n	8008b12 <USBD_CDC_Setup+0x126>
          break;
 8008b10:	bf00      	nop
      }
      break;
 8008b12:	e006      	b.n	8008b22 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f001 f8f8 	bl	8009d0c <USBD_CtlError>
      ret = USBD_FAIL;
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b20:	bf00      	nop
  }

  return ret;
 8008b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b3e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b46:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d03a      	beq.n	8008bc8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b52:	78fa      	ldrb	r2, [r7, #3]
 8008b54:	6879      	ldr	r1, [r7, #4]
 8008b56:	4613      	mov	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	440b      	add	r3, r1
 8008b60:	331c      	adds	r3, #28
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d029      	beq.n	8008bbc <USBD_CDC_DataIn+0x90>
 8008b68:	78fa      	ldrb	r2, [r7, #3]
 8008b6a:	6879      	ldr	r1, [r7, #4]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	440b      	add	r3, r1
 8008b76:	331c      	adds	r3, #28
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	78f9      	ldrb	r1, [r7, #3]
 8008b7c:	68b8      	ldr	r0, [r7, #8]
 8008b7e:	460b      	mov	r3, r1
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	440b      	add	r3, r1
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	4403      	add	r3, r0
 8008b88:	3338      	adds	r3, #56	; 0x38
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b90:	fb03 f301 	mul.w	r3, r3, r1
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d110      	bne.n	8008bbc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008b9a:	78fa      	ldrb	r2, [r7, #3]
 8008b9c:	6879      	ldr	r1, [r7, #4]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	4413      	add	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	440b      	add	r3, r1
 8008ba8:	331c      	adds	r3, #28
 8008baa:	2200      	movs	r2, #0
 8008bac:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008bae:	78f9      	ldrb	r1, [r7, #3]
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f001 fd68 	bl	800a68a <USBD_LL_Transmit>
 8008bba:	e003      	b.n	8008bc4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	e000      	b.n	8008bca <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008bc8:	2302      	movs	r3, #2
  }
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b084      	sub	sp, #16
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	460b      	mov	r3, r1
 8008bdc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008be6:	78fb      	ldrb	r3, [r7, #3]
 8008be8:	4619      	mov	r1, r3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f001 fd93 	bl	800a716 <USBD_LL_GetRxDataSize>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00d      	beq.n	8008c1e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008c16:	4611      	mov	r1, r2
 8008c18:	4798      	blx	r3

    return USBD_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	e000      	b.n	8008c20 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008c1e:	2302      	movs	r3, #2
  }
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c36:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d015      	beq.n	8008c6e <USBD_CDC_EP0_RxReady+0x46>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008c48:	2bff      	cmp	r3, #255	; 0xff
 8008c4a:	d010      	beq.n	8008c6e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008c5a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c62:	b292      	uxth	r2, r2
 8008c64:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	22ff      	movs	r2, #255	; 0xff
 8008c6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2243      	movs	r2, #67	; 0x43
 8008c84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008c86:	4b03      	ldr	r3, [pc, #12]	; (8008c94 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bc80      	pop	{r7}
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	200000ac 	.word	0x200000ac

08008c98 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2243      	movs	r2, #67	; 0x43
 8008ca4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008ca6:	4b03      	ldr	r3, [pc, #12]	; (8008cb4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bc80      	pop	{r7}
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	20000068 	.word	0x20000068

08008cb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2243      	movs	r2, #67	; 0x43
 8008cc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008cc6:	4b03      	ldr	r3, [pc, #12]	; (8008cd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bc80      	pop	{r7}
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	200000f0 	.word	0x200000f0

08008cd8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	220a      	movs	r2, #10
 8008ce4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008ce6:	4b03      	ldr	r3, [pc, #12]	; (8008cf4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bc80      	pop	{r7}
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	20000024 	.word	0x20000024

08008cf8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008d02:	2302      	movs	r3, #2
 8008d04:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d005      	beq.n	8008d18 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bc80      	pop	{r7}
 8008d22:	4770      	bx	lr

08008d24 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d38:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d42:	88fa      	ldrh	r2, [r7, #6]
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	371c      	adds	r7, #28
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bc80      	pop	{r7}
 8008d54:	4770      	bx	lr

08008d56 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b085      	sub	sp, #20
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d66:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bc80      	pop	{r7}
 8008d7a:	4770      	bx	lr

08008d7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d017      	beq.n	8008dc6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	7c1b      	ldrb	r3, [r3, #16]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d109      	bne.n	8008db2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008da8:	2101      	movs	r1, #1
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f001 fc90 	bl	800a6d0 <USBD_LL_PrepareReceive>
 8008db0:	e007      	b.n	8008dc2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008db8:	2340      	movs	r3, #64	; 0x40
 8008dba:	2101      	movs	r1, #1
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f001 fc87 	bl	800a6d0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	e000      	b.n	8008dc8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008dc6:	2302      	movs	r3, #2
  }
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d101      	bne.n	8008de8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008de4:	2302      	movs	r3, #2
 8008de6:	e01a      	b.n	8008e1e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d003      	beq.n	8008dfa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d003      	beq.n	8008e08 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	79fa      	ldrb	r2, [r7, #7]
 8008e14:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f001 faf4 	bl	800a404 <USBD_LL_Init>

  return USBD_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e26:	b480      	push	{r7}
 8008e28:	b085      	sub	sp, #20
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d006      	beq.n	8008e48 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73fb      	strb	r3, [r7, #15]
 8008e46:	e001      	b.n	8008e4c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008e48:	2302      	movs	r3, #2
 8008e4a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3714      	adds	r7, #20
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bc80      	pop	{r7}
 8008e56:	4770      	bx	lr

08008e58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f001 fb29 	bl	800a4b8 <USBD_LL_Start>

  return USBD_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bc80      	pop	{r7}
 8008e82:	4770      	bx	lr

08008e84 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008e90:	2302      	movs	r3, #2
 8008e92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00c      	beq.n	8008eb8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	78fa      	ldrb	r2, [r7, #3]
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	4798      	blx	r3
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b082      	sub	sp, #8
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	460b      	mov	r3, r1
 8008ecc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	78fa      	ldrb	r2, [r7, #3]
 8008ed8:	4611      	mov	r1, r2
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	4798      	blx	r3

  return USBD_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	4618      	mov	r0, r3
 8008efc:	f000 feca 	bl	8009c94 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008f0e:	461a      	mov	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008f1c:	f003 031f 	and.w	r3, r3, #31
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d00c      	beq.n	8008f3e <USBD_LL_SetupStage+0x56>
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d302      	bcc.n	8008f2e <USBD_LL_SetupStage+0x46>
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d010      	beq.n	8008f4e <USBD_LL_SetupStage+0x66>
 8008f2c:	e017      	b.n	8008f5e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f9ca 	bl	80092d0 <USBD_StdDevReq>
      break;
 8008f3c:	e01a      	b.n	8008f74 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fa2c 	bl	80093a4 <USBD_StdItfReq>
      break;
 8008f4c:	e012      	b.n	8008f74 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fa6a 	bl	8009430 <USBD_StdEPReq>
      break;
 8008f5c:	e00a      	b.n	8008f74 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008f64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f001 fb03 	bl	800a578 <USBD_LL_StallEP>
      break;
 8008f72:	bf00      	nop
  }

  return USBD_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b086      	sub	sp, #24
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	60f8      	str	r0, [r7, #12]
 8008f86:	460b      	mov	r3, r1
 8008f88:	607a      	str	r2, [r7, #4]
 8008f8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008f8c:	7afb      	ldrb	r3, [r7, #11]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d14b      	bne.n	800902a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008f98:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	d134      	bne.n	800900e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	68da      	ldr	r2, [r3, #12]
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d919      	bls.n	8008fe4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	68da      	ldr	r2, [r3, #12]
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	1ad2      	subs	r2, r2, r3
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d203      	bcs.n	8008fd2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	e002      	b.n	8008fd8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	461a      	mov	r2, r3
 8008fda:	6879      	ldr	r1, [r7, #4]
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f000 ff4b 	bl	8009e78 <USBD_CtlContinueRx>
 8008fe2:	e038      	b.n	8009056 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00a      	beq.n	8009006 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d105      	bne.n	8009006 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f000 ff48 	bl	8009e9c <USBD_CtlSendStatus>
 800900c:	e023      	b.n	8009056 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009014:	2b05      	cmp	r3, #5
 8009016:	d11e      	bne.n	8009056 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009020:	2100      	movs	r1, #0
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f001 faa8 	bl	800a578 <USBD_LL_StallEP>
 8009028:	e015      	b.n	8009056 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00d      	beq.n	8009052 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800903c:	2b03      	cmp	r3, #3
 800903e:	d108      	bne.n	8009052 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	7afa      	ldrb	r2, [r7, #11]
 800904a:	4611      	mov	r1, r2
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	4798      	blx	r3
 8009050:	e001      	b.n	8009056 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009052:	2302      	movs	r3, #2
 8009054:	e000      	b.n	8009058 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3718      	adds	r7, #24
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	460b      	mov	r3, r1
 800906a:	607a      	str	r2, [r7, #4]
 800906c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800906e:	7afb      	ldrb	r3, [r7, #11]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d17f      	bne.n	8009174 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	3314      	adds	r3, #20
 8009078:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009080:	2b02      	cmp	r3, #2
 8009082:	d15c      	bne.n	800913e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	68da      	ldr	r2, [r3, #12]
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	429a      	cmp	r2, r3
 800908e:	d915      	bls.n	80090bc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	68da      	ldr	r2, [r3, #12]
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	1ad2      	subs	r2, r2, r3
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	461a      	mov	r2, r3
 80090a6:	6879      	ldr	r1, [r7, #4]
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f000 feb5 	bl	8009e18 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090ae:	2300      	movs	r3, #0
 80090b0:	2200      	movs	r2, #0
 80090b2:	2100      	movs	r1, #0
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f001 fb0b 	bl	800a6d0 <USBD_LL_PrepareReceive>
 80090ba:	e04e      	b.n	800915a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	6912      	ldr	r2, [r2, #16]
 80090c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80090c8:	fb02 f201 	mul.w	r2, r2, r1
 80090cc:	1a9b      	subs	r3, r3, r2
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d11c      	bne.n	800910c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	689a      	ldr	r2, [r3, #8]
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090da:	429a      	cmp	r2, r3
 80090dc:	d316      	bcc.n	800910c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	689a      	ldr	r2, [r3, #8]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d20f      	bcs.n	800910c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80090ec:	2200      	movs	r2, #0
 80090ee:	2100      	movs	r1, #0
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f000 fe91 	bl	8009e18 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090fe:	2300      	movs	r3, #0
 8009100:	2200      	movs	r2, #0
 8009102:	2100      	movs	r1, #0
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f001 fae3 	bl	800a6d0 <USBD_LL_PrepareReceive>
 800910a:	e026      	b.n	800915a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00a      	beq.n	800912e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800911e:	2b03      	cmp	r3, #3
 8009120:	d105      	bne.n	800912e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800912e:	2180      	movs	r1, #128	; 0x80
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f001 fa21 	bl	800a578 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f000 fec3 	bl	8009ec2 <USBD_CtlReceiveStatus>
 800913c:	e00d      	b.n	800915a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009144:	2b04      	cmp	r3, #4
 8009146:	d004      	beq.n	8009152 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800914e:	2b00      	cmp	r3, #0
 8009150:	d103      	bne.n	800915a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009152:	2180      	movs	r1, #128	; 0x80
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f001 fa0f 	bl	800a578 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009160:	2b01      	cmp	r3, #1
 8009162:	d11d      	bne.n	80091a0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f7ff fe83 	bl	8008e70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009172:	e015      	b.n	80091a0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800917a:	695b      	ldr	r3, [r3, #20]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00d      	beq.n	800919c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009186:	2b03      	cmp	r3, #3
 8009188:	d108      	bne.n	800919c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	7afa      	ldrb	r2, [r7, #11]
 8009194:	4611      	mov	r1, r2
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	4798      	blx	r3
 800919a:	e001      	b.n	80091a0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800919c:	2302      	movs	r3, #2
 800919e:	e000      	b.n	80091a2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3718      	adds	r7, #24
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b082      	sub	sp, #8
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091b2:	2340      	movs	r3, #64	; 0x40
 80091b4:	2200      	movs	r2, #0
 80091b6:	2100      	movs	r1, #0
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f001 f998 	bl	800a4ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2240      	movs	r2, #64	; 0x40
 80091ca:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091ce:	2340      	movs	r3, #64	; 0x40
 80091d0:	2200      	movs	r2, #0
 80091d2:	2180      	movs	r1, #128	; 0x80
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f001 f98a 	bl	800a4ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2240      	movs	r2, #64	; 0x40
 80091e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800920a:	2b00      	cmp	r3, #0
 800920c:	d009      	beq.n	8009222 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	6852      	ldr	r2, [r2, #4]
 800921a:	b2d2      	uxtb	r2, r2
 800921c:	4611      	mov	r1, r2
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	4798      	blx	r3
  }

  return USBD_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	460b      	mov	r3, r1
 8009236:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	78fa      	ldrb	r2, [r7, #3]
 800923c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	bc80      	pop	{r7}
 8009248:	4770      	bx	lr

0800924a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800924a:	b480      	push	{r7}
 800924c:	b083      	sub	sp, #12
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2204      	movs	r2, #4
 8009262:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	bc80      	pop	{r7}
 8009270:	4770      	bx	lr

08009272 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009272:	b480      	push	{r7}
 8009274:	b083      	sub	sp, #12
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009280:	2b04      	cmp	r3, #4
 8009282:	d105      	bne.n	8009290 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	bc80      	pop	{r7}
 800929a:	4770      	bx	lr

0800929c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092aa:	2b03      	cmp	r3, #3
 80092ac:	d10b      	bne.n	80092c6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092b4:	69db      	ldr	r3, [r3, #28]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d005      	beq.n	80092c6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092e6:	2b20      	cmp	r3, #32
 80092e8:	d004      	beq.n	80092f4 <USBD_StdDevReq+0x24>
 80092ea:	2b40      	cmp	r3, #64	; 0x40
 80092ec:	d002      	beq.n	80092f4 <USBD_StdDevReq+0x24>
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d008      	beq.n	8009304 <USBD_StdDevReq+0x34>
 80092f2:	e04c      	b.n	800938e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	4798      	blx	r3
      break;
 8009302:	e049      	b.n	8009398 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	2b09      	cmp	r3, #9
 800930a:	d83a      	bhi.n	8009382 <USBD_StdDevReq+0xb2>
 800930c:	a201      	add	r2, pc, #4	; (adr r2, 8009314 <USBD_StdDevReq+0x44>)
 800930e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009312:	bf00      	nop
 8009314:	08009365 	.word	0x08009365
 8009318:	08009379 	.word	0x08009379
 800931c:	08009383 	.word	0x08009383
 8009320:	0800936f 	.word	0x0800936f
 8009324:	08009383 	.word	0x08009383
 8009328:	08009347 	.word	0x08009347
 800932c:	0800933d 	.word	0x0800933d
 8009330:	08009383 	.word	0x08009383
 8009334:	0800935b 	.word	0x0800935b
 8009338:	08009351 	.word	0x08009351
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f9d4 	bl	80096ec <USBD_GetDescriptor>
          break;
 8009344:	e022      	b.n	800938c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009346:	6839      	ldr	r1, [r7, #0]
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fb37 	bl	80099bc <USBD_SetAddress>
          break;
 800934e:	e01d      	b.n	800938c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fb74 	bl	8009a40 <USBD_SetConfig>
          break;
 8009358:	e018      	b.n	800938c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fbfd 	bl	8009b5c <USBD_GetConfig>
          break;
 8009362:	e013      	b.n	800938c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fc2c 	bl	8009bc4 <USBD_GetStatus>
          break;
 800936c:	e00e      	b.n	800938c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fc5a 	bl	8009c2a <USBD_SetFeature>
          break;
 8009376:	e009      	b.n	800938c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fc69 	bl	8009c52 <USBD_ClrFeature>
          break;
 8009380:	e004      	b.n	800938c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fcc1 	bl	8009d0c <USBD_CtlError>
          break;
 800938a:	bf00      	nop
      }
      break;
 800938c:	e004      	b.n	8009398 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fcbb 	bl	8009d0c <USBD_CtlError>
      break;
 8009396:	bf00      	nop
  }

  return ret;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop

080093a4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093ba:	2b20      	cmp	r3, #32
 80093bc:	d003      	beq.n	80093c6 <USBD_StdItfReq+0x22>
 80093be:	2b40      	cmp	r3, #64	; 0x40
 80093c0:	d001      	beq.n	80093c6 <USBD_StdItfReq+0x22>
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d12a      	bne.n	800941c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093cc:	3b01      	subs	r3, #1
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d81d      	bhi.n	800940e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	889b      	ldrh	r3, [r3, #4]
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d813      	bhi.n	8009404 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	6839      	ldr	r1, [r7, #0]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	4798      	blx	r3
 80093ea:	4603      	mov	r3, r0
 80093ec:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	88db      	ldrh	r3, [r3, #6]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d110      	bne.n	8009418 <USBD_StdItfReq+0x74>
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10d      	bne.n	8009418 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fd4d 	bl	8009e9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009402:	e009      	b.n	8009418 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fc80 	bl	8009d0c <USBD_CtlError>
          break;
 800940c:	e004      	b.n	8009418 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800940e:	6839      	ldr	r1, [r7, #0]
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fc7b 	bl	8009d0c <USBD_CtlError>
          break;
 8009416:	e000      	b.n	800941a <USBD_StdItfReq+0x76>
          break;
 8009418:	bf00      	nop
      }
      break;
 800941a:	e004      	b.n	8009426 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fc74 	bl	8009d0c <USBD_CtlError>
      break;
 8009424:	bf00      	nop
  }

  return USBD_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800943a:	2300      	movs	r3, #0
 800943c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	889b      	ldrh	r3, [r3, #4]
 8009442:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800944c:	2b20      	cmp	r3, #32
 800944e:	d004      	beq.n	800945a <USBD_StdEPReq+0x2a>
 8009450:	2b40      	cmp	r3, #64	; 0x40
 8009452:	d002      	beq.n	800945a <USBD_StdEPReq+0x2a>
 8009454:	2b00      	cmp	r3, #0
 8009456:	d008      	beq.n	800946a <USBD_StdEPReq+0x3a>
 8009458:	e13d      	b.n	80096d6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	6839      	ldr	r1, [r7, #0]
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	4798      	blx	r3
      break;
 8009468:	e13a      	b.n	80096e0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009472:	2b20      	cmp	r3, #32
 8009474:	d10a      	bne.n	800948c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	4798      	blx	r3
 8009484:	4603      	mov	r3, r0
 8009486:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	e12a      	b.n	80096e2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	785b      	ldrb	r3, [r3, #1]
 8009490:	2b01      	cmp	r3, #1
 8009492:	d03e      	beq.n	8009512 <USBD_StdEPReq+0xe2>
 8009494:	2b03      	cmp	r3, #3
 8009496:	d002      	beq.n	800949e <USBD_StdEPReq+0x6e>
 8009498:	2b00      	cmp	r3, #0
 800949a:	d070      	beq.n	800957e <USBD_StdEPReq+0x14e>
 800949c:	e115      	b.n	80096ca <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d002      	beq.n	80094ae <USBD_StdEPReq+0x7e>
 80094a8:	2b03      	cmp	r3, #3
 80094aa:	d015      	beq.n	80094d8 <USBD_StdEPReq+0xa8>
 80094ac:	e02b      	b.n	8009506 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094ae:	7bbb      	ldrb	r3, [r7, #14]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00c      	beq.n	80094ce <USBD_StdEPReq+0x9e>
 80094b4:	7bbb      	ldrb	r3, [r7, #14]
 80094b6:	2b80      	cmp	r3, #128	; 0x80
 80094b8:	d009      	beq.n	80094ce <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f001 f85a 	bl	800a578 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80094c4:	2180      	movs	r1, #128	; 0x80
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f001 f856 	bl	800a578 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094cc:	e020      	b.n	8009510 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fc1b 	bl	8009d0c <USBD_CtlError>
              break;
 80094d6:	e01b      	b.n	8009510 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	885b      	ldrh	r3, [r3, #2]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d10e      	bne.n	80094fe <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00b      	beq.n	80094fe <USBD_StdEPReq+0xce>
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	2b80      	cmp	r3, #128	; 0x80
 80094ea:	d008      	beq.n	80094fe <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	88db      	ldrh	r3, [r3, #6]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d104      	bne.n	80094fe <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80094f4:	7bbb      	ldrb	r3, [r7, #14]
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f001 f83d 	bl	800a578 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fccc 	bl	8009e9c <USBD_CtlSendStatus>

              break;
 8009504:	e004      	b.n	8009510 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fbff 	bl	8009d0c <USBD_CtlError>
              break;
 800950e:	bf00      	nop
          }
          break;
 8009510:	e0e0      	b.n	80096d4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009518:	2b02      	cmp	r3, #2
 800951a:	d002      	beq.n	8009522 <USBD_StdEPReq+0xf2>
 800951c:	2b03      	cmp	r3, #3
 800951e:	d015      	beq.n	800954c <USBD_StdEPReq+0x11c>
 8009520:	e026      	b.n	8009570 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009522:	7bbb      	ldrb	r3, [r7, #14]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d00c      	beq.n	8009542 <USBD_StdEPReq+0x112>
 8009528:	7bbb      	ldrb	r3, [r7, #14]
 800952a:	2b80      	cmp	r3, #128	; 0x80
 800952c:	d009      	beq.n	8009542 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800952e:	7bbb      	ldrb	r3, [r7, #14]
 8009530:	4619      	mov	r1, r3
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f001 f820 	bl	800a578 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009538:	2180      	movs	r1, #128	; 0x80
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f001 f81c 	bl	800a578 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009540:	e01c      	b.n	800957c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fbe1 	bl	8009d0c <USBD_CtlError>
              break;
 800954a:	e017      	b.n	800957c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	885b      	ldrh	r3, [r3, #2]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d112      	bne.n	800957a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009554:	7bbb      	ldrb	r3, [r7, #14]
 8009556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800955a:	2b00      	cmp	r3, #0
 800955c:	d004      	beq.n	8009568 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800955e:	7bbb      	ldrb	r3, [r7, #14]
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f001 f827 	bl	800a5b6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fc97 	bl	8009e9c <USBD_CtlSendStatus>
              }
              break;
 800956e:	e004      	b.n	800957a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fbca 	bl	8009d0c <USBD_CtlError>
              break;
 8009578:	e000      	b.n	800957c <USBD_StdEPReq+0x14c>
              break;
 800957a:	bf00      	nop
          }
          break;
 800957c:	e0aa      	b.n	80096d4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009584:	2b02      	cmp	r3, #2
 8009586:	d002      	beq.n	800958e <USBD_StdEPReq+0x15e>
 8009588:	2b03      	cmp	r3, #3
 800958a:	d032      	beq.n	80095f2 <USBD_StdEPReq+0x1c2>
 800958c:	e097      	b.n	80096be <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800958e:	7bbb      	ldrb	r3, [r7, #14]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d007      	beq.n	80095a4 <USBD_StdEPReq+0x174>
 8009594:	7bbb      	ldrb	r3, [r7, #14]
 8009596:	2b80      	cmp	r3, #128	; 0x80
 8009598:	d004      	beq.n	80095a4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800959a:	6839      	ldr	r1, [r7, #0]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fbb5 	bl	8009d0c <USBD_CtlError>
                break;
 80095a2:	e091      	b.n	80096c8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	da0b      	bge.n	80095c4 <USBD_StdEPReq+0x194>
 80095ac:	7bbb      	ldrb	r3, [r7, #14]
 80095ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095b2:	4613      	mov	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	3310      	adds	r3, #16
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	4413      	add	r3, r2
 80095c0:	3304      	adds	r3, #4
 80095c2:	e00b      	b.n	80095dc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
 80095c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095ca:	4613      	mov	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	4413      	add	r3, r2
 80095da:	3304      	adds	r3, #4
 80095dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	2200      	movs	r2, #0
 80095e2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2202      	movs	r2, #2
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fbf8 	bl	8009de0 <USBD_CtlSendData>
              break;
 80095f0:	e06a      	b.n	80096c8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80095f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	da11      	bge.n	800961e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80095fa:	7bbb      	ldrb	r3, [r7, #14]
 80095fc:	f003 020f 	and.w	r2, r3, #15
 8009600:	6879      	ldr	r1, [r7, #4]
 8009602:	4613      	mov	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4413      	add	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	440b      	add	r3, r1
 800960c:	3318      	adds	r3, #24
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d117      	bne.n	8009644 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fb78 	bl	8009d0c <USBD_CtlError>
                  break;
 800961c:	e054      	b.n	80096c8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800961e:	7bbb      	ldrb	r3, [r7, #14]
 8009620:	f003 020f 	and.w	r2, r3, #15
 8009624:	6879      	ldr	r1, [r7, #4]
 8009626:	4613      	mov	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	4413      	add	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	440b      	add	r3, r1
 8009630:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d104      	bne.n	8009644 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800963a:	6839      	ldr	r1, [r7, #0]
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fb65 	bl	8009d0c <USBD_CtlError>
                  break;
 8009642:	e041      	b.n	80096c8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009644:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009648:	2b00      	cmp	r3, #0
 800964a:	da0b      	bge.n	8009664 <USBD_StdEPReq+0x234>
 800964c:	7bbb      	ldrb	r3, [r7, #14]
 800964e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009652:	4613      	mov	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	3310      	adds	r3, #16
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	4413      	add	r3, r2
 8009660:	3304      	adds	r3, #4
 8009662:	e00b      	b.n	800967c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009664:	7bbb      	ldrb	r3, [r7, #14]
 8009666:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800966a:	4613      	mov	r3, r2
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4413      	add	r3, r2
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	4413      	add	r3, r2
 800967a:	3304      	adds	r3, #4
 800967c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800967e:	7bbb      	ldrb	r3, [r7, #14]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <USBD_StdEPReq+0x25a>
 8009684:	7bbb      	ldrb	r3, [r7, #14]
 8009686:	2b80      	cmp	r3, #128	; 0x80
 8009688:	d103      	bne.n	8009692 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	2200      	movs	r2, #0
 800968e:	601a      	str	r2, [r3, #0]
 8009690:	e00e      	b.n	80096b0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009692:	7bbb      	ldrb	r3, [r7, #14]
 8009694:	4619      	mov	r1, r3
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 ffac 	bl	800a5f4 <USBD_LL_IsStallEP>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	2201      	movs	r2, #1
 80096a6:	601a      	str	r2, [r3, #0]
 80096a8:	e002      	b.n	80096b0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	2200      	movs	r2, #0
 80096ae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	2202      	movs	r2, #2
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fb92 	bl	8009de0 <USBD_CtlSendData>
              break;
 80096bc:	e004      	b.n	80096c8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fb23 	bl	8009d0c <USBD_CtlError>
              break;
 80096c6:	bf00      	nop
          }
          break;
 80096c8:	e004      	b.n	80096d4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fb1d 	bl	8009d0c <USBD_CtlError>
          break;
 80096d2:	bf00      	nop
      }
      break;
 80096d4:	e004      	b.n	80096e0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80096d6:	6839      	ldr	r1, [r7, #0]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fb17 	bl	8009d0c <USBD_CtlError>
      break;
 80096de:	bf00      	nop
  }

  return ret;
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
	...

080096ec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096f6:	2300      	movs	r3, #0
 80096f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80096fa:	2300      	movs	r3, #0
 80096fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80096fe:	2300      	movs	r3, #0
 8009700:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	885b      	ldrh	r3, [r3, #2]
 8009706:	0a1b      	lsrs	r3, r3, #8
 8009708:	b29b      	uxth	r3, r3
 800970a:	3b01      	subs	r3, #1
 800970c:	2b06      	cmp	r3, #6
 800970e:	f200 8128 	bhi.w	8009962 <USBD_GetDescriptor+0x276>
 8009712:	a201      	add	r2, pc, #4	; (adr r2, 8009718 <USBD_GetDescriptor+0x2c>)
 8009714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009718:	08009735 	.word	0x08009735
 800971c:	0800974d 	.word	0x0800974d
 8009720:	0800978d 	.word	0x0800978d
 8009724:	08009963 	.word	0x08009963
 8009728:	08009963 	.word	0x08009963
 800972c:	08009903 	.word	0x08009903
 8009730:	0800992f 	.word	0x0800992f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	7c12      	ldrb	r2, [r2, #16]
 8009740:	f107 0108 	add.w	r1, r7, #8
 8009744:	4610      	mov	r0, r2
 8009746:	4798      	blx	r3
 8009748:	60f8      	str	r0, [r7, #12]
      break;
 800974a:	e112      	b.n	8009972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	7c1b      	ldrb	r3, [r3, #16]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10d      	bne.n	8009770 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800975a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800975c:	f107 0208 	add.w	r2, r7, #8
 8009760:	4610      	mov	r0, r2
 8009762:	4798      	blx	r3
 8009764:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3301      	adds	r3, #1
 800976a:	2202      	movs	r2, #2
 800976c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800976e:	e100      	b.n	8009972 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009778:	f107 0208 	add.w	r2, r7, #8
 800977c:	4610      	mov	r0, r2
 800977e:	4798      	blx	r3
 8009780:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	3301      	adds	r3, #1
 8009786:	2202      	movs	r2, #2
 8009788:	701a      	strb	r2, [r3, #0]
      break;
 800978a:	e0f2      	b.n	8009972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	885b      	ldrh	r3, [r3, #2]
 8009790:	b2db      	uxtb	r3, r3
 8009792:	2b05      	cmp	r3, #5
 8009794:	f200 80ac 	bhi.w	80098f0 <USBD_GetDescriptor+0x204>
 8009798:	a201      	add	r2, pc, #4	; (adr r2, 80097a0 <USBD_GetDescriptor+0xb4>)
 800979a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979e:	bf00      	nop
 80097a0:	080097b9 	.word	0x080097b9
 80097a4:	080097ed 	.word	0x080097ed
 80097a8:	08009821 	.word	0x08009821
 80097ac:	08009855 	.word	0x08009855
 80097b0:	08009889 	.word	0x08009889
 80097b4:	080098bd 	.word	0x080098bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00b      	beq.n	80097dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	7c12      	ldrb	r2, [r2, #16]
 80097d0:	f107 0108 	add.w	r1, r7, #8
 80097d4:	4610      	mov	r0, r2
 80097d6:	4798      	blx	r3
 80097d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097da:	e091      	b.n	8009900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fa94 	bl	8009d0c <USBD_CtlError>
            err++;
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	3301      	adds	r3, #1
 80097e8:	72fb      	strb	r3, [r7, #11]
          break;
 80097ea:	e089      	b.n	8009900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00b      	beq.n	8009810 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	7c12      	ldrb	r2, [r2, #16]
 8009804:	f107 0108 	add.w	r1, r7, #8
 8009808:	4610      	mov	r0, r2
 800980a:	4798      	blx	r3
 800980c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800980e:	e077      	b.n	8009900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fa7a 	bl	8009d0c <USBD_CtlError>
            err++;
 8009818:	7afb      	ldrb	r3, [r7, #11]
 800981a:	3301      	adds	r3, #1
 800981c:	72fb      	strb	r3, [r7, #11]
          break;
 800981e:	e06f      	b.n	8009900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00b      	beq.n	8009844 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	7c12      	ldrb	r2, [r2, #16]
 8009838:	f107 0108 	add.w	r1, r7, #8
 800983c:	4610      	mov	r0, r2
 800983e:	4798      	blx	r3
 8009840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009842:	e05d      	b.n	8009900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fa60 	bl	8009d0c <USBD_CtlError>
            err++;
 800984c:	7afb      	ldrb	r3, [r7, #11]
 800984e:	3301      	adds	r3, #1
 8009850:	72fb      	strb	r3, [r7, #11]
          break;
 8009852:	e055      	b.n	8009900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00b      	beq.n	8009878 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	7c12      	ldrb	r2, [r2, #16]
 800986c:	f107 0108 	add.w	r1, r7, #8
 8009870:	4610      	mov	r0, r2
 8009872:	4798      	blx	r3
 8009874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009876:	e043      	b.n	8009900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fa46 	bl	8009d0c <USBD_CtlError>
            err++;
 8009880:	7afb      	ldrb	r3, [r7, #11]
 8009882:	3301      	adds	r3, #1
 8009884:	72fb      	strb	r3, [r7, #11]
          break;
 8009886:	e03b      	b.n	8009900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800988e:	695b      	ldr	r3, [r3, #20]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00b      	beq.n	80098ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800989a:	695b      	ldr	r3, [r3, #20]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	7c12      	ldrb	r2, [r2, #16]
 80098a0:	f107 0108 	add.w	r1, r7, #8
 80098a4:	4610      	mov	r0, r2
 80098a6:	4798      	blx	r3
 80098a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098aa:	e029      	b.n	8009900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098ac:	6839      	ldr	r1, [r7, #0]
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 fa2c 	bl	8009d0c <USBD_CtlError>
            err++;
 80098b4:	7afb      	ldrb	r3, [r7, #11]
 80098b6:	3301      	adds	r3, #1
 80098b8:	72fb      	strb	r3, [r7, #11]
          break;
 80098ba:	e021      	b.n	8009900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00b      	beq.n	80098e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	7c12      	ldrb	r2, [r2, #16]
 80098d4:	f107 0108 	add.w	r1, r7, #8
 80098d8:	4610      	mov	r0, r2
 80098da:	4798      	blx	r3
 80098dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098de:	e00f      	b.n	8009900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fa12 	bl	8009d0c <USBD_CtlError>
            err++;
 80098e8:	7afb      	ldrb	r3, [r7, #11]
 80098ea:	3301      	adds	r3, #1
 80098ec:	72fb      	strb	r3, [r7, #11]
          break;
 80098ee:	e007      	b.n	8009900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fa0a 	bl	8009d0c <USBD_CtlError>
          err++;
 80098f8:	7afb      	ldrb	r3, [r7, #11]
 80098fa:	3301      	adds	r3, #1
 80098fc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80098fe:	e038      	b.n	8009972 <USBD_GetDescriptor+0x286>
 8009900:	e037      	b.n	8009972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	7c1b      	ldrb	r3, [r3, #16]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d109      	bne.n	800991e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009912:	f107 0208 	add.w	r2, r7, #8
 8009916:	4610      	mov	r0, r2
 8009918:	4798      	blx	r3
 800991a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800991c:	e029      	b.n	8009972 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f9f3 	bl	8009d0c <USBD_CtlError>
        err++;
 8009926:	7afb      	ldrb	r3, [r7, #11]
 8009928:	3301      	adds	r3, #1
 800992a:	72fb      	strb	r3, [r7, #11]
      break;
 800992c:	e021      	b.n	8009972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	7c1b      	ldrb	r3, [r3, #16]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10d      	bne.n	8009952 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800993c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800993e:	f107 0208 	add.w	r2, r7, #8
 8009942:	4610      	mov	r0, r2
 8009944:	4798      	blx	r3
 8009946:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	3301      	adds	r3, #1
 800994c:	2207      	movs	r2, #7
 800994e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009950:	e00f      	b.n	8009972 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009952:	6839      	ldr	r1, [r7, #0]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f9d9 	bl	8009d0c <USBD_CtlError>
        err++;
 800995a:	7afb      	ldrb	r3, [r7, #11]
 800995c:	3301      	adds	r3, #1
 800995e:	72fb      	strb	r3, [r7, #11]
      break;
 8009960:	e007      	b.n	8009972 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 f9d1 	bl	8009d0c <USBD_CtlError>
      err++;
 800996a:	7afb      	ldrb	r3, [r7, #11]
 800996c:	3301      	adds	r3, #1
 800996e:	72fb      	strb	r3, [r7, #11]
      break;
 8009970:	bf00      	nop
  }

  if (err != 0U)
 8009972:	7afb      	ldrb	r3, [r7, #11]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d11c      	bne.n	80099b2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009978:	893b      	ldrh	r3, [r7, #8]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d011      	beq.n	80099a2 <USBD_GetDescriptor+0x2b6>
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	88db      	ldrh	r3, [r3, #6]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00d      	beq.n	80099a2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	88da      	ldrh	r2, [r3, #6]
 800998a:	893b      	ldrh	r3, [r7, #8]
 800998c:	4293      	cmp	r3, r2
 800998e:	bf28      	it	cs
 8009990:	4613      	movcs	r3, r2
 8009992:	b29b      	uxth	r3, r3
 8009994:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009996:	893b      	ldrh	r3, [r7, #8]
 8009998:	461a      	mov	r2, r3
 800999a:	68f9      	ldr	r1, [r7, #12]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fa1f 	bl	8009de0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	88db      	ldrh	r3, [r3, #6]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d104      	bne.n	80099b4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fa76 	bl	8009e9c <USBD_CtlSendStatus>
 80099b0:	e000      	b.n	80099b4 <USBD_GetDescriptor+0x2c8>
    return;
 80099b2:	bf00      	nop
    }
  }
}
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop

080099bc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	889b      	ldrh	r3, [r3, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d130      	bne.n	8009a30 <USBD_SetAddress+0x74>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	88db      	ldrh	r3, [r3, #6]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d12c      	bne.n	8009a30 <USBD_SetAddress+0x74>
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	885b      	ldrh	r3, [r3, #2]
 80099da:	2b7f      	cmp	r3, #127	; 0x7f
 80099dc:	d828      	bhi.n	8009a30 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	885b      	ldrh	r3, [r3, #2]
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d104      	bne.n	80099fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80099f4:	6839      	ldr	r1, [r7, #0]
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f988 	bl	8009d0c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099fc:	e01c      	b.n	8009a38 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	7bfa      	ldrb	r2, [r7, #15]
 8009a02:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
 8009a08:	4619      	mov	r1, r3
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fe1e 	bl	800a64c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fa43 	bl	8009e9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d004      	beq.n	8009a26 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2202      	movs	r2, #2
 8009a20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a24:	e008      	b.n	8009a38 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a2e:	e003      	b.n	8009a38 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f96a 	bl	8009d0c <USBD_CtlError>
  }
}
 8009a38:	bf00      	nop
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	885b      	ldrh	r3, [r3, #2]
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	4b41      	ldr	r3, [pc, #260]	; (8009b58 <USBD_SetConfig+0x118>)
 8009a52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a54:	4b40      	ldr	r3, [pc, #256]	; (8009b58 <USBD_SetConfig+0x118>)
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d904      	bls.n	8009a66 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f954 	bl	8009d0c <USBD_CtlError>
 8009a64:	e075      	b.n	8009b52 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d002      	beq.n	8009a76 <USBD_SetConfig+0x36>
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d023      	beq.n	8009abc <USBD_SetConfig+0x7c>
 8009a74:	e062      	b.n	8009b3c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009a76:	4b38      	ldr	r3, [pc, #224]	; (8009b58 <USBD_SetConfig+0x118>)
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d01a      	beq.n	8009ab4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009a7e:	4b36      	ldr	r3, [pc, #216]	; (8009b58 <USBD_SetConfig+0x118>)
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	461a      	mov	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2203      	movs	r2, #3
 8009a8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009a90:	4b31      	ldr	r3, [pc, #196]	; (8009b58 <USBD_SetConfig+0x118>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7ff f9f4 	bl	8008e84 <USBD_SetClassConfig>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d104      	bne.n	8009aac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f931 	bl	8009d0c <USBD_CtlError>
            return;
 8009aaa:	e052      	b.n	8009b52 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f9f5 	bl	8009e9c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009ab2:	e04e      	b.n	8009b52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 f9f1 	bl	8009e9c <USBD_CtlSendStatus>
        break;
 8009aba:	e04a      	b.n	8009b52 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009abc:	4b26      	ldr	r3, [pc, #152]	; (8009b58 <USBD_SetConfig+0x118>)
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d112      	bne.n	8009aea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009acc:	4b22      	ldr	r3, [pc, #136]	; (8009b58 <USBD_SetConfig+0x118>)
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009ad6:	4b20      	ldr	r3, [pc, #128]	; (8009b58 <USBD_SetConfig+0x118>)
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f7ff f9f0 	bl	8008ec2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f9da 	bl	8009e9c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009ae8:	e033      	b.n	8009b52 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009aea:	4b1b      	ldr	r3, [pc, #108]	; (8009b58 <USBD_SetConfig+0x118>)
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	461a      	mov	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d01d      	beq.n	8009b34 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7ff f9de 	bl	8008ec2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009b06:	4b14      	ldr	r3, [pc, #80]	; (8009b58 <USBD_SetConfig+0x118>)
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b10:	4b11      	ldr	r3, [pc, #68]	; (8009b58 <USBD_SetConfig+0x118>)
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7ff f9b4 	bl	8008e84 <USBD_SetClassConfig>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d104      	bne.n	8009b2c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f8f1 	bl	8009d0c <USBD_CtlError>
            return;
 8009b2a:	e012      	b.n	8009b52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f9b5 	bl	8009e9c <USBD_CtlSendStatus>
        break;
 8009b32:	e00e      	b.n	8009b52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f9b1 	bl	8009e9c <USBD_CtlSendStatus>
        break;
 8009b3a:	e00a      	b.n	8009b52 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f8e4 	bl	8009d0c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009b44:	4b04      	ldr	r3, [pc, #16]	; (8009b58 <USBD_SetConfig+0x118>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7ff f9b9 	bl	8008ec2 <USBD_ClrClassConfig>
        break;
 8009b50:	bf00      	nop
    }
  }
}
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	200001d3 	.word	0x200001d3

08009b5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	88db      	ldrh	r3, [r3, #6]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d004      	beq.n	8009b78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f8cb 	bl	8009d0c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b76:	e021      	b.n	8009bbc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	db17      	blt.n	8009bb2 <USBD_GetConfig+0x56>
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	dd02      	ble.n	8009b8c <USBD_GetConfig+0x30>
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d00b      	beq.n	8009ba2 <USBD_GetConfig+0x46>
 8009b8a:	e012      	b.n	8009bb2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	3308      	adds	r3, #8
 8009b96:	2201      	movs	r2, #1
 8009b98:	4619      	mov	r1, r3
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f920 	bl	8009de0 <USBD_CtlSendData>
        break;
 8009ba0:	e00c      	b.n	8009bbc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	3304      	adds	r3, #4
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	4619      	mov	r1, r3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f918 	bl	8009de0 <USBD_CtlSendData>
        break;
 8009bb0:	e004      	b.n	8009bbc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009bb2:	6839      	ldr	r1, [r7, #0]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 f8a9 	bl	8009d0c <USBD_CtlError>
        break;
 8009bba:	bf00      	nop
}
 8009bbc:	bf00      	nop
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d81e      	bhi.n	8009c18 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	88db      	ldrh	r3, [r3, #6]
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d004      	beq.n	8009bec <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f891 	bl	8009d0c <USBD_CtlError>
        break;
 8009bea:	e01a      	b.n	8009c22 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d005      	beq.n	8009c08 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	f043 0202 	orr.w	r2, r3, #2
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	330c      	adds	r3, #12
 8009c0c:	2202      	movs	r2, #2
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f8e5 	bl	8009de0 <USBD_CtlSendData>
      break;
 8009c16:	e004      	b.n	8009c22 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009c18:	6839      	ldr	r1, [r7, #0]
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 f876 	bl	8009d0c <USBD_CtlError>
      break;
 8009c20:	bf00      	nop
  }
}
 8009c22:	bf00      	nop
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b082      	sub	sp, #8
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	885b      	ldrh	r3, [r3, #2]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d106      	bne.n	8009c4a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f929 	bl	8009e9c <USBD_CtlSendStatus>
  }
}
 8009c4a:	bf00      	nop
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b082      	sub	sp, #8
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c62:	3b01      	subs	r3, #1
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d80b      	bhi.n	8009c80 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	885b      	ldrh	r3, [r3, #2]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d10c      	bne.n	8009c8a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 f90f 	bl	8009e9c <USBD_CtlSendStatus>
      }
      break;
 8009c7e:	e004      	b.n	8009c8a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f842 	bl	8009d0c <USBD_CtlError>
      break;
 8009c88:	e000      	b.n	8009c8c <USBD_ClrFeature+0x3a>
      break;
 8009c8a:	bf00      	nop
  }
}
 8009c8c:	bf00      	nop
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	781a      	ldrb	r2, [r3, #0]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	785a      	ldrb	r2, [r3, #1]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	3302      	adds	r3, #2
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	3303      	adds	r3, #3
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	021b      	lsls	r3, r3, #8
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	4413      	add	r3, r2
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	3304      	adds	r3, #4
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	b29a      	uxth	r2, r3
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	3305      	adds	r3, #5
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	021b      	lsls	r3, r3, #8
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	4413      	add	r3, r2
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	3306      	adds	r3, #6
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	3307      	adds	r3, #7
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	021b      	lsls	r3, r3, #8
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	4413      	add	r3, r2
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	80da      	strh	r2, [r3, #6]

}
 8009d02:	bf00      	nop
 8009d04:	370c      	adds	r7, #12
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bc80      	pop	{r7}
 8009d0a:	4770      	bx	lr

08009d0c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009d16:	2180      	movs	r1, #128	; 0x80
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fc2d 	bl	800a578 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009d1e:	2100      	movs	r1, #0
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fc29 	bl	800a578 <USBD_LL_StallEP>
}
 8009d26:	bf00      	nop
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b086      	sub	sp, #24
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	60f8      	str	r0, [r7, #12]
 8009d36:	60b9      	str	r1, [r7, #8]
 8009d38:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d032      	beq.n	8009daa <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f000 f834 	bl	8009db2 <USBD_GetLen>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	005b      	lsls	r3, r3, #1
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009d58:	7dfb      	ldrb	r3, [r7, #23]
 8009d5a:	1c5a      	adds	r2, r3, #1
 8009d5c:	75fa      	strb	r2, [r7, #23]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	4413      	add	r3, r2
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	7812      	ldrb	r2, [r2, #0]
 8009d68:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009d6a:	7dfb      	ldrb	r3, [r7, #23]
 8009d6c:	1c5a      	adds	r2, r3, #1
 8009d6e:	75fa      	strb	r2, [r7, #23]
 8009d70:	461a      	mov	r2, r3
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	4413      	add	r3, r2
 8009d76:	2203      	movs	r2, #3
 8009d78:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009d7a:	e012      	b.n	8009da2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	1c5a      	adds	r2, r3, #1
 8009d80:	60fa      	str	r2, [r7, #12]
 8009d82:	7dfa      	ldrb	r2, [r7, #23]
 8009d84:	1c51      	adds	r1, r2, #1
 8009d86:	75f9      	strb	r1, [r7, #23]
 8009d88:	4611      	mov	r1, r2
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	440a      	add	r2, r1
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	75fa      	strb	r2, [r7, #23]
 8009d98:	461a      	mov	r2, r3
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	2200      	movs	r2, #0
 8009da0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1e8      	bne.n	8009d7c <USBD_GetString+0x4e>
    }
  }
}
 8009daa:	bf00      	nop
 8009dac:	3718      	adds	r7, #24
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009db2:	b480      	push	{r7}
 8009db4:	b085      	sub	sp, #20
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009dbe:	e005      	b.n	8009dcc <USBD_GetLen+0x1a>
  {
    len++;
 8009dc0:	7bfb      	ldrb	r3, [r7, #15]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1f5      	bne.n	8009dc0 <USBD_GetLen+0xe>
  }

  return len;
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bc80      	pop	{r7}
 8009dde:	4770      	bx	lr

08009de0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	4613      	mov	r3, r2
 8009dec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2202      	movs	r2, #2
 8009df2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009df6:	88fa      	ldrh	r2, [r7, #6]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009dfc:	88fa      	ldrh	r2, [r7, #6]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e02:	88fb      	ldrh	r3, [r7, #6]
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	2100      	movs	r1, #0
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f000 fc3e 	bl	800a68a <USBD_LL_Transmit>

  return USBD_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	4613      	mov	r3, r2
 8009e24:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e26:	88fb      	ldrh	r3, [r7, #6]
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f000 fc2c 	bl	800a68a <USBD_LL_Transmit>

  return USBD_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	4613      	mov	r3, r2
 8009e48:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2203      	movs	r2, #3
 8009e4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009e52:	88fa      	ldrh	r2, [r7, #6]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009e5a:	88fa      	ldrh	r2, [r7, #6]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e62:	88fb      	ldrh	r3, [r7, #6]
 8009e64:	68ba      	ldr	r2, [r7, #8]
 8009e66:	2100      	movs	r1, #0
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f000 fc31 	bl	800a6d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	4613      	mov	r3, r2
 8009e84:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e86:	88fb      	ldrh	r3, [r7, #6]
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f000 fc1f 	bl	800a6d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2204      	movs	r2, #4
 8009ea8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009eac:	2300      	movs	r3, #0
 8009eae:	2200      	movs	r2, #0
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fbe9 	bl	800a68a <USBD_LL_Transmit>

  return USBD_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b082      	sub	sp, #8
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2205      	movs	r2, #5
 8009ece:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 fbf9 	bl	800a6d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009eec:	2200      	movs	r2, #0
 8009eee:	4912      	ldr	r1, [pc, #72]	; (8009f38 <MX_USB_DEVICE_Init+0x50>)
 8009ef0:	4812      	ldr	r0, [pc, #72]	; (8009f3c <MX_USB_DEVICE_Init+0x54>)
 8009ef2:	f7fe ff6d 	bl	8008dd0 <USBD_Init>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009efc:	f7f7 f876 	bl	8000fec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f00:	490f      	ldr	r1, [pc, #60]	; (8009f40 <MX_USB_DEVICE_Init+0x58>)
 8009f02:	480e      	ldr	r0, [pc, #56]	; (8009f3c <MX_USB_DEVICE_Init+0x54>)
 8009f04:	f7fe ff8f 	bl	8008e26 <USBD_RegisterClass>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f0e:	f7f7 f86d 	bl	8000fec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f12:	490c      	ldr	r1, [pc, #48]	; (8009f44 <MX_USB_DEVICE_Init+0x5c>)
 8009f14:	4809      	ldr	r0, [pc, #36]	; (8009f3c <MX_USB_DEVICE_Init+0x54>)
 8009f16:	f7fe feef 	bl	8008cf8 <USBD_CDC_RegisterInterface>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f20:	f7f7 f864 	bl	8000fec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f24:	4805      	ldr	r0, [pc, #20]	; (8009f3c <MX_USB_DEVICE_Init+0x54>)
 8009f26:	f7fe ff97 	bl	8008e58 <USBD_Start>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d001      	beq.n	8009f34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f30:	f7f7 f85c 	bl	8000fec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f34:	bf00      	nop
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	20000144 	.word	0x20000144
 8009f3c:	200005b0 	.word	0x200005b0
 8009f40:	20000030 	.word	0x20000030
 8009f44:	20000134 	.word	0x20000134

08009f48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	4905      	ldr	r1, [pc, #20]	; (8009f64 <CDC_Init_FS+0x1c>)
 8009f50:	4805      	ldr	r0, [pc, #20]	; (8009f68 <CDC_Init_FS+0x20>)
 8009f52:	f7fe fee7 	bl	8008d24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f56:	4905      	ldr	r1, [pc, #20]	; (8009f6c <CDC_Init_FS+0x24>)
 8009f58:	4803      	ldr	r0, [pc, #12]	; (8009f68 <CDC_Init_FS+0x20>)
 8009f5a:	f7fe fefc 	bl	8008d56 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	20000c5c 	.word	0x20000c5c
 8009f68:	200005b0 	.word	0x200005b0
 8009f6c:	20000874 	.word	0x20000874

08009f70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009f70:	b480      	push	{r7}
 8009f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009f74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bc80      	pop	{r7}
 8009f7c:	4770      	bx	lr
	...

08009f80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	4603      	mov	r3, r0
 8009f88:	6039      	str	r1, [r7, #0]
 8009f8a:	71fb      	strb	r3, [r7, #7]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009f90:	79fb      	ldrb	r3, [r7, #7]
 8009f92:	2b23      	cmp	r3, #35	; 0x23
 8009f94:	d84a      	bhi.n	800a02c <CDC_Control_FS+0xac>
 8009f96:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <CDC_Control_FS+0x1c>)
 8009f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9c:	0800a02d 	.word	0x0800a02d
 8009fa0:	0800a02d 	.word	0x0800a02d
 8009fa4:	0800a02d 	.word	0x0800a02d
 8009fa8:	0800a02d 	.word	0x0800a02d
 8009fac:	0800a02d 	.word	0x0800a02d
 8009fb0:	0800a02d 	.word	0x0800a02d
 8009fb4:	0800a02d 	.word	0x0800a02d
 8009fb8:	0800a02d 	.word	0x0800a02d
 8009fbc:	0800a02d 	.word	0x0800a02d
 8009fc0:	0800a02d 	.word	0x0800a02d
 8009fc4:	0800a02d 	.word	0x0800a02d
 8009fc8:	0800a02d 	.word	0x0800a02d
 8009fcc:	0800a02d 	.word	0x0800a02d
 8009fd0:	0800a02d 	.word	0x0800a02d
 8009fd4:	0800a02d 	.word	0x0800a02d
 8009fd8:	0800a02d 	.word	0x0800a02d
 8009fdc:	0800a02d 	.word	0x0800a02d
 8009fe0:	0800a02d 	.word	0x0800a02d
 8009fe4:	0800a02d 	.word	0x0800a02d
 8009fe8:	0800a02d 	.word	0x0800a02d
 8009fec:	0800a02d 	.word	0x0800a02d
 8009ff0:	0800a02d 	.word	0x0800a02d
 8009ff4:	0800a02d 	.word	0x0800a02d
 8009ff8:	0800a02d 	.word	0x0800a02d
 8009ffc:	0800a02d 	.word	0x0800a02d
 800a000:	0800a02d 	.word	0x0800a02d
 800a004:	0800a02d 	.word	0x0800a02d
 800a008:	0800a02d 	.word	0x0800a02d
 800a00c:	0800a02d 	.word	0x0800a02d
 800a010:	0800a02d 	.word	0x0800a02d
 800a014:	0800a02d 	.word	0x0800a02d
 800a018:	0800a02d 	.word	0x0800a02d
 800a01c:	0800a02d 	.word	0x0800a02d
 800a020:	0800a02d 	.word	0x0800a02d
 800a024:	0800a02d 	.word	0x0800a02d
 800a028:	0800a02d 	.word	0x0800a02d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a02c:	bf00      	nop
  }

  return (USBD_OK);
 800a02e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a030:	4618      	mov	r0, r3
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	bc80      	pop	{r7}
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop

0800a03c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a046:	6879      	ldr	r1, [r7, #4]
 800a048:	4805      	ldr	r0, [pc, #20]	; (800a060 <CDC_Receive_FS+0x24>)
 800a04a:	f7fe fe84 	bl	8008d56 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a04e:	4804      	ldr	r0, [pc, #16]	; (800a060 <CDC_Receive_FS+0x24>)
 800a050:	f7fe fe94 	bl	8008d7c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a054:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a056:	4618      	mov	r0, r3
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	200005b0 	.word	0x200005b0

0800a064 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	4603      	mov	r3, r0
 800a06c:	6039      	str	r1, [r7, #0]
 800a06e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	2212      	movs	r2, #18
 800a074:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a076:	4b03      	ldr	r3, [pc, #12]	; (800a084 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a078:	4618      	mov	r0, r3
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bc80      	pop	{r7}
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	20000160 	.word	0x20000160

0800a088 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	4603      	mov	r3, r0
 800a090:	6039      	str	r1, [r7, #0]
 800a092:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2204      	movs	r2, #4
 800a098:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a09a:	4b03      	ldr	r3, [pc, #12]	; (800a0a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bc80      	pop	{r7}
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	20000174 	.word	0x20000174

0800a0ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	6039      	str	r1, [r7, #0]
 800a0b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0b8:	79fb      	ldrb	r3, [r7, #7]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d105      	bne.n	800a0ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a0be:	683a      	ldr	r2, [r7, #0]
 800a0c0:	4907      	ldr	r1, [pc, #28]	; (800a0e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a0c2:	4808      	ldr	r0, [pc, #32]	; (800a0e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a0c4:	f7ff fe33 	bl	8009d2e <USBD_GetString>
 800a0c8:	e004      	b.n	800a0d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a0ca:	683a      	ldr	r2, [r7, #0]
 800a0cc:	4904      	ldr	r1, [pc, #16]	; (800a0e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a0ce:	4805      	ldr	r0, [pc, #20]	; (800a0e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a0d0:	f7ff fe2d 	bl	8009d2e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0d4:	4b02      	ldr	r3, [pc, #8]	; (800a0e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	20001044 	.word	0x20001044
 800a0e4:	0800a860 	.word	0x0800a860

0800a0e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	6039      	str	r1, [r7, #0]
 800a0f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	4904      	ldr	r1, [pc, #16]	; (800a108 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a0f8:	4804      	ldr	r0, [pc, #16]	; (800a10c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a0fa:	f7ff fe18 	bl	8009d2e <USBD_GetString>
  return USBD_StrDesc;
 800a0fe:	4b02      	ldr	r3, [pc, #8]	; (800a108 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a100:	4618      	mov	r0, r3
 800a102:	3708      	adds	r7, #8
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	20001044 	.word	0x20001044
 800a10c:	0800a878 	.word	0x0800a878

0800a110 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	4603      	mov	r3, r0
 800a118:	6039      	str	r1, [r7, #0]
 800a11a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	221a      	movs	r2, #26
 800a120:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a122:	f000 f843 	bl	800a1ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a126:	4b02      	ldr	r3, [pc, #8]	; (800a130 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	20000178 	.word	0x20000178

0800a134 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	4603      	mov	r3, r0
 800a13c:	6039      	str	r1, [r7, #0]
 800a13e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a140:	79fb      	ldrb	r3, [r7, #7]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d105      	bne.n	800a152 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	4907      	ldr	r1, [pc, #28]	; (800a168 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a14a:	4808      	ldr	r0, [pc, #32]	; (800a16c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a14c:	f7ff fdef 	bl	8009d2e <USBD_GetString>
 800a150:	e004      	b.n	800a15c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a152:	683a      	ldr	r2, [r7, #0]
 800a154:	4904      	ldr	r1, [pc, #16]	; (800a168 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a156:	4805      	ldr	r0, [pc, #20]	; (800a16c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a158:	f7ff fde9 	bl	8009d2e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a15c:	4b02      	ldr	r3, [pc, #8]	; (800a168 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3708      	adds	r7, #8
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	20001044 	.word	0x20001044
 800a16c:	0800a88c 	.word	0x0800a88c

0800a170 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	4603      	mov	r3, r0
 800a178:	6039      	str	r1, [r7, #0]
 800a17a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a17c:	79fb      	ldrb	r3, [r7, #7]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d105      	bne.n	800a18e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a182:	683a      	ldr	r2, [r7, #0]
 800a184:	4907      	ldr	r1, [pc, #28]	; (800a1a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a186:	4808      	ldr	r0, [pc, #32]	; (800a1a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a188:	f7ff fdd1 	bl	8009d2e <USBD_GetString>
 800a18c:	e004      	b.n	800a198 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a18e:	683a      	ldr	r2, [r7, #0]
 800a190:	4904      	ldr	r1, [pc, #16]	; (800a1a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a192:	4805      	ldr	r0, [pc, #20]	; (800a1a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a194:	f7ff fdcb 	bl	8009d2e <USBD_GetString>
  }
  return USBD_StrDesc;
 800a198:	4b02      	ldr	r3, [pc, #8]	; (800a1a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20001044 	.word	0x20001044
 800a1a8:	0800a898 	.word	0x0800a898

0800a1ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a1b2:	4b0f      	ldr	r3, [pc, #60]	; (800a1f0 <Get_SerialNum+0x44>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a1b8:	4b0e      	ldr	r3, [pc, #56]	; (800a1f4 <Get_SerialNum+0x48>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a1be:	4b0e      	ldr	r3, [pc, #56]	; (800a1f8 <Get_SerialNum+0x4c>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d009      	beq.n	800a1e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a1d2:	2208      	movs	r2, #8
 800a1d4:	4909      	ldr	r1, [pc, #36]	; (800a1fc <Get_SerialNum+0x50>)
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f000 f814 	bl	800a204 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a1dc:	2204      	movs	r2, #4
 800a1de:	4908      	ldr	r1, [pc, #32]	; (800a200 <Get_SerialNum+0x54>)
 800a1e0:	68b8      	ldr	r0, [r7, #8]
 800a1e2:	f000 f80f 	bl	800a204 <IntToUnicode>
  }
}
 800a1e6:	bf00      	nop
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	1ffff7e8 	.word	0x1ffff7e8
 800a1f4:	1ffff7ec 	.word	0x1ffff7ec
 800a1f8:	1ffff7f0 	.word	0x1ffff7f0
 800a1fc:	2000017a 	.word	0x2000017a
 800a200:	2000018a 	.word	0x2000018a

0800a204 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a204:	b480      	push	{r7}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	4613      	mov	r3, r2
 800a210:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a212:	2300      	movs	r3, #0
 800a214:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a216:	2300      	movs	r3, #0
 800a218:	75fb      	strb	r3, [r7, #23]
 800a21a:	e027      	b.n	800a26c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	0f1b      	lsrs	r3, r3, #28
 800a220:	2b09      	cmp	r3, #9
 800a222:	d80b      	bhi.n	800a23c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	0f1b      	lsrs	r3, r3, #28
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	7dfb      	ldrb	r3, [r7, #23]
 800a22c:	005b      	lsls	r3, r3, #1
 800a22e:	4619      	mov	r1, r3
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	440b      	add	r3, r1
 800a234:	3230      	adds	r2, #48	; 0x30
 800a236:	b2d2      	uxtb	r2, r2
 800a238:	701a      	strb	r2, [r3, #0]
 800a23a:	e00a      	b.n	800a252 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	0f1b      	lsrs	r3, r3, #28
 800a240:	b2da      	uxtb	r2, r3
 800a242:	7dfb      	ldrb	r3, [r7, #23]
 800a244:	005b      	lsls	r3, r3, #1
 800a246:	4619      	mov	r1, r3
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	440b      	add	r3, r1
 800a24c:	3237      	adds	r2, #55	; 0x37
 800a24e:	b2d2      	uxtb	r2, r2
 800a250:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	011b      	lsls	r3, r3, #4
 800a256:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a258:	7dfb      	ldrb	r3, [r7, #23]
 800a25a:	005b      	lsls	r3, r3, #1
 800a25c:	3301      	adds	r3, #1
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	4413      	add	r3, r2
 800a262:	2200      	movs	r2, #0
 800a264:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a266:	7dfb      	ldrb	r3, [r7, #23]
 800a268:	3301      	adds	r3, #1
 800a26a:	75fb      	strb	r3, [r7, #23]
 800a26c:	7dfa      	ldrb	r2, [r7, #23]
 800a26e:	79fb      	ldrb	r3, [r7, #7]
 800a270:	429a      	cmp	r2, r3
 800a272:	d3d3      	bcc.n	800a21c <IntToUnicode+0x18>
  }
}
 800a274:	bf00      	nop
 800a276:	371c      	adds	r7, #28
 800a278:	46bd      	mov	sp, r7
 800a27a:	bc80      	pop	{r7}
 800a27c:	4770      	bx	lr
	...

0800a280 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a0d      	ldr	r2, [pc, #52]	; (800a2c4 <HAL_PCD_MspInit+0x44>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d113      	bne.n	800a2ba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a292:	4b0d      	ldr	r3, [pc, #52]	; (800a2c8 <HAL_PCD_MspInit+0x48>)
 800a294:	69db      	ldr	r3, [r3, #28]
 800a296:	4a0c      	ldr	r2, [pc, #48]	; (800a2c8 <HAL_PCD_MspInit+0x48>)
 800a298:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a29c:	61d3      	str	r3, [r2, #28]
 800a29e:	4b0a      	ldr	r3, [pc, #40]	; (800a2c8 <HAL_PCD_MspInit+0x48>)
 800a2a0:	69db      	ldr	r3, [r3, #28]
 800a2a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2a6:	60fb      	str	r3, [r7, #12]
 800a2a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	2014      	movs	r0, #20
 800a2b0:	f7f7 fdf7 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a2b4:	2014      	movs	r0, #20
 800a2b6:	f7f7 fe10 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a2ba:	bf00      	nop
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	40005c00 	.word	0x40005c00
 800a2c8:	40021000 	.word	0x40021000

0800a2cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	4610      	mov	r0, r2
 800a2e4:	f7fe fe00 	bl	8008ee8 <USBD_LL_SetupStage>
}
 800a2e8:	bf00      	nop
 800a2ea:	3708      	adds	r7, #8
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a302:	78fa      	ldrb	r2, [r7, #3]
 800a304:	6879      	ldr	r1, [r7, #4]
 800a306:	4613      	mov	r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	4413      	add	r3, r2
 800a30c:	00db      	lsls	r3, r3, #3
 800a30e:	440b      	add	r3, r1
 800a310:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	78fb      	ldrb	r3, [r7, #3]
 800a318:	4619      	mov	r1, r3
 800a31a:	f7fe fe30 	bl	8008f7e <USBD_LL_DataOutStage>
}
 800a31e:	bf00      	nop
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b082      	sub	sp, #8
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	460b      	mov	r3, r1
 800a330:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a338:	78fa      	ldrb	r2, [r7, #3]
 800a33a:	6879      	ldr	r1, [r7, #4]
 800a33c:	4613      	mov	r3, r2
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	4413      	add	r3, r2
 800a342:	00db      	lsls	r3, r3, #3
 800a344:	440b      	add	r3, r1
 800a346:	333c      	adds	r3, #60	; 0x3c
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	78fb      	ldrb	r3, [r7, #3]
 800a34c:	4619      	mov	r1, r3
 800a34e:	f7fe fe87 	bl	8009060 <USBD_LL_DataInStage>
}
 800a352:	bf00      	nop
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b082      	sub	sp, #8
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a368:	4618      	mov	r0, r3
 800a36a:	f7fe ff97 	bl	800929c <USBD_LL_SOF>
}
 800a36e:	bf00      	nop
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b084      	sub	sp, #16
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a37e:	2301      	movs	r3, #1
 800a380:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	2b02      	cmp	r3, #2
 800a388:	d001      	beq.n	800a38e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a38a:	f7f6 fe2f 	bl	8000fec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a394:	7bfa      	ldrb	r2, [r7, #15]
 800a396:	4611      	mov	r1, r2
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fe ff47 	bl	800922c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fe ff00 	bl	80091aa <USBD_LL_Reset>
}
 800a3aa:	bf00      	nop
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
	...

0800a3b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7fe ff41 	bl	800924a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d005      	beq.n	800a3dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a3d0:	4b04      	ldr	r3, [pc, #16]	; (800a3e4 <HAL_PCD_SuspendCallback+0x30>)
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	4a03      	ldr	r2, [pc, #12]	; (800a3e4 <HAL_PCD_SuspendCallback+0x30>)
 800a3d6:	f043 0306 	orr.w	r3, r3, #6
 800a3da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a3dc:	bf00      	nop
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	e000ed00 	.word	0xe000ed00

0800a3e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fe ff3b 	bl	8009272 <USBD_LL_Resume>
}
 800a3fc:	bf00      	nop
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a40c:	4a28      	ldr	r2, [pc, #160]	; (800a4b0 <USBD_LL_Init+0xac>)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a26      	ldr	r2, [pc, #152]	; (800a4b0 <USBD_LL_Init+0xac>)
 800a418:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a41c:	4b24      	ldr	r3, [pc, #144]	; (800a4b0 <USBD_LL_Init+0xac>)
 800a41e:	4a25      	ldr	r2, [pc, #148]	; (800a4b4 <USBD_LL_Init+0xb0>)
 800a420:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a422:	4b23      	ldr	r3, [pc, #140]	; (800a4b0 <USBD_LL_Init+0xac>)
 800a424:	2208      	movs	r2, #8
 800a426:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a428:	4b21      	ldr	r3, [pc, #132]	; (800a4b0 <USBD_LL_Init+0xac>)
 800a42a:	2202      	movs	r2, #2
 800a42c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a42e:	4b20      	ldr	r3, [pc, #128]	; (800a4b0 <USBD_LL_Init+0xac>)
 800a430:	2200      	movs	r2, #0
 800a432:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a434:	4b1e      	ldr	r3, [pc, #120]	; (800a4b0 <USBD_LL_Init+0xac>)
 800a436:	2200      	movs	r2, #0
 800a438:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a43a:	4b1d      	ldr	r3, [pc, #116]	; (800a4b0 <USBD_LL_Init+0xac>)
 800a43c:	2200      	movs	r2, #0
 800a43e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a440:	481b      	ldr	r0, [pc, #108]	; (800a4b0 <USBD_LL_Init+0xac>)
 800a442:	f7f9 fd89 	bl	8003f58 <HAL_PCD_Init>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d001      	beq.n	800a450 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a44c:	f7f6 fdce 	bl	8000fec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a456:	2318      	movs	r3, #24
 800a458:	2200      	movs	r2, #0
 800a45a:	2100      	movs	r1, #0
 800a45c:	f7fb f8bd 	bl	80055da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a466:	2358      	movs	r3, #88	; 0x58
 800a468:	2200      	movs	r2, #0
 800a46a:	2180      	movs	r1, #128	; 0x80
 800a46c:	f7fb f8b5 	bl	80055da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a476:	23c0      	movs	r3, #192	; 0xc0
 800a478:	2200      	movs	r2, #0
 800a47a:	2181      	movs	r1, #129	; 0x81
 800a47c:	f7fb f8ad 	bl	80055da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a486:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a48a:	2200      	movs	r2, #0
 800a48c:	2101      	movs	r1, #1
 800a48e:	f7fb f8a4 	bl	80055da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a49c:	2200      	movs	r2, #0
 800a49e:	2182      	movs	r1, #130	; 0x82
 800a4a0:	f7fb f89b 	bl	80055da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	20001244 	.word	0x20001244
 800a4b4:	40005c00 	.word	0x40005c00

0800a4b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7f9 fe4d 	bl	800416e <HAL_PCD_Start>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 f94e 	bl	800a77c <USBD_Get_USB_Status>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b084      	sub	sp, #16
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	4608      	mov	r0, r1
 800a4f8:	4611      	mov	r1, r2
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	70fb      	strb	r3, [r7, #3]
 800a500:	460b      	mov	r3, r1
 800a502:	70bb      	strb	r3, [r7, #2]
 800a504:	4613      	mov	r3, r2
 800a506:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a508:	2300      	movs	r3, #0
 800a50a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a516:	78bb      	ldrb	r3, [r7, #2]
 800a518:	883a      	ldrh	r2, [r7, #0]
 800a51a:	78f9      	ldrb	r1, [r7, #3]
 800a51c:	f7f9 ffc7 	bl	80044ae <HAL_PCD_EP_Open>
 800a520:	4603      	mov	r3, r0
 800a522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a524:	7bfb      	ldrb	r3, [r7, #15]
 800a526:	4618      	mov	r0, r3
 800a528:	f000 f928 	bl	800a77c <USBD_Get_USB_Status>
 800a52c:	4603      	mov	r3, r0
 800a52e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a530:	7bbb      	ldrb	r3, [r7, #14]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b084      	sub	sp, #16
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	460b      	mov	r3, r1
 800a544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a554:	78fa      	ldrb	r2, [r7, #3]
 800a556:	4611      	mov	r1, r2
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fa f80e 	bl	800457a <HAL_PCD_EP_Close>
 800a55e:	4603      	mov	r3, r0
 800a560:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a562:	7bfb      	ldrb	r3, [r7, #15]
 800a564:	4618      	mov	r0, r3
 800a566:	f000 f909 	bl	800a77c <USBD_Get_USB_Status>
 800a56a:	4603      	mov	r3, r0
 800a56c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a56e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	460b      	mov	r3, r1
 800a582:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a592:	78fa      	ldrb	r2, [r7, #3]
 800a594:	4611      	mov	r1, r2
 800a596:	4618      	mov	r0, r3
 800a598:	f7fa f8ce 	bl	8004738 <HAL_PCD_EP_SetStall>
 800a59c:	4603      	mov	r3, r0
 800a59e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f000 f8ea 	bl	800a77c <USBD_Get_USB_Status>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b084      	sub	sp, #16
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
 800a5be:	460b      	mov	r3, r1
 800a5c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5d0:	78fa      	ldrb	r2, [r7, #3]
 800a5d2:	4611      	mov	r1, r2
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7fa f90f 	bl	80047f8 <HAL_PCD_EP_ClrStall>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5de:	7bfb      	ldrb	r3, [r7, #15]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 f8cb 	bl	800a77c <USBD_Get_USB_Status>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3710      	adds	r7, #16
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a606:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	da0c      	bge.n	800a62a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a610:	78fb      	ldrb	r3, [r7, #3]
 800a612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a616:	68f9      	ldr	r1, [r7, #12]
 800a618:	1c5a      	adds	r2, r3, #1
 800a61a:	4613      	mov	r3, r2
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	4413      	add	r3, r2
 800a620:	00db      	lsls	r3, r3, #3
 800a622:	440b      	add	r3, r1
 800a624:	3302      	adds	r3, #2
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	e00b      	b.n	800a642 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a62a:	78fb      	ldrb	r3, [r7, #3]
 800a62c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a630:	68f9      	ldr	r1, [r7, #12]
 800a632:	4613      	mov	r3, r2
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	4413      	add	r3, r2
 800a638:	00db      	lsls	r3, r3, #3
 800a63a:	440b      	add	r3, r1
 800a63c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a640:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a642:	4618      	mov	r0, r3
 800a644:	3714      	adds	r7, #20
 800a646:	46bd      	mov	sp, r7
 800a648:	bc80      	pop	{r7}
 800a64a:	4770      	bx	lr

0800a64c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	460b      	mov	r3, r1
 800a656:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a666:	78fa      	ldrb	r2, [r7, #3]
 800a668:	4611      	mov	r1, r2
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7f9 fefa 	bl	8004464 <HAL_PCD_SetAddress>
 800a670:	4603      	mov	r3, r0
 800a672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a674:	7bfb      	ldrb	r3, [r7, #15]
 800a676:	4618      	mov	r0, r3
 800a678:	f000 f880 	bl	800a77c <USBD_Get_USB_Status>
 800a67c:	4603      	mov	r3, r0
 800a67e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a680:	7bbb      	ldrb	r3, [r7, #14]
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b086      	sub	sp, #24
 800a68e:	af00      	add	r7, sp, #0
 800a690:	60f8      	str	r0, [r7, #12]
 800a692:	607a      	str	r2, [r7, #4]
 800a694:	461a      	mov	r2, r3
 800a696:	460b      	mov	r3, r1
 800a698:	72fb      	strb	r3, [r7, #11]
 800a69a:	4613      	mov	r3, r2
 800a69c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a6ac:	893b      	ldrh	r3, [r7, #8]
 800a6ae:	7af9      	ldrb	r1, [r7, #11]
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	f7f9 fffe 	bl	80046b2 <HAL_PCD_EP_Transmit>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6ba:	7dfb      	ldrb	r3, [r7, #23]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f000 f85d 	bl	800a77c <USBD_Get_USB_Status>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3718      	adds	r7, #24
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b086      	sub	sp, #24
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	607a      	str	r2, [r7, #4]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	460b      	mov	r3, r1
 800a6de:	72fb      	strb	r3, [r7, #11]
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a6f2:	893b      	ldrh	r3, [r7, #8]
 800a6f4:	7af9      	ldrb	r1, [r7, #11]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	f7f9 ff87 	bl	800460a <HAL_PCD_EP_Receive>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a700:	7dfb      	ldrb	r3, [r7, #23]
 800a702:	4618      	mov	r0, r3
 800a704:	f000 f83a 	bl	800a77c <USBD_Get_USB_Status>
 800a708:	4603      	mov	r3, r0
 800a70a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a70c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3718      	adds	r7, #24
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b082      	sub	sp, #8
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	460b      	mov	r3, r1
 800a720:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a728:	78fa      	ldrb	r2, [r7, #3]
 800a72a:	4611      	mov	r1, r2
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7f9 ffa9 	bl	8004684 <HAL_PCD_EP_GetRxCount>
 800a732:	4603      	mov	r3, r0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a744:	4b02      	ldr	r3, [pc, #8]	; (800a750 <USBD_static_malloc+0x14>)
}
 800a746:	4618      	mov	r0, r3
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bc80      	pop	{r7}
 800a74e:	4770      	bx	lr
 800a750:	200001d4 	.word	0x200001d4

0800a754 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]

}
 800a75c:	bf00      	nop
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	bc80      	pop	{r7}
 800a764:	4770      	bx	lr

0800a766 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a766:	b480      	push	{r7}
 800a768:	b083      	sub	sp, #12
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	460b      	mov	r3, r1
 800a770:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a772:	bf00      	nop
 800a774:	370c      	adds	r7, #12
 800a776:	46bd      	mov	sp, r7
 800a778:	bc80      	pop	{r7}
 800a77a:	4770      	bx	lr

0800a77c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	4603      	mov	r3, r0
 800a784:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a78a:	79fb      	ldrb	r3, [r7, #7]
 800a78c:	2b03      	cmp	r3, #3
 800a78e:	d817      	bhi.n	800a7c0 <USBD_Get_USB_Status+0x44>
 800a790:	a201      	add	r2, pc, #4	; (adr r2, 800a798 <USBD_Get_USB_Status+0x1c>)
 800a792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a796:	bf00      	nop
 800a798:	0800a7a9 	.word	0x0800a7a9
 800a79c:	0800a7af 	.word	0x0800a7af
 800a7a0:	0800a7b5 	.word	0x0800a7b5
 800a7a4:	0800a7bb 	.word	0x0800a7bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ac:	e00b      	b.n	800a7c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a7ae:	2302      	movs	r3, #2
 800a7b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a7b2:	e008      	b.n	800a7c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a7b8:	e005      	b.n	800a7c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a7ba:	2302      	movs	r3, #2
 800a7bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a7be:	e002      	b.n	800a7c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7c4:	bf00      	nop
  }
  return usb_status;
 800a7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bc80      	pop	{r7}
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop

0800a7d4 <__libc_init_array>:
 800a7d4:	b570      	push	{r4, r5, r6, lr}
 800a7d6:	2500      	movs	r5, #0
 800a7d8:	4e0c      	ldr	r6, [pc, #48]	; (800a80c <__libc_init_array+0x38>)
 800a7da:	4c0d      	ldr	r4, [pc, #52]	; (800a810 <__libc_init_array+0x3c>)
 800a7dc:	1ba4      	subs	r4, r4, r6
 800a7de:	10a4      	asrs	r4, r4, #2
 800a7e0:	42a5      	cmp	r5, r4
 800a7e2:	d109      	bne.n	800a7f8 <__libc_init_array+0x24>
 800a7e4:	f000 f822 	bl	800a82c <_init>
 800a7e8:	2500      	movs	r5, #0
 800a7ea:	4e0a      	ldr	r6, [pc, #40]	; (800a814 <__libc_init_array+0x40>)
 800a7ec:	4c0a      	ldr	r4, [pc, #40]	; (800a818 <__libc_init_array+0x44>)
 800a7ee:	1ba4      	subs	r4, r4, r6
 800a7f0:	10a4      	asrs	r4, r4, #2
 800a7f2:	42a5      	cmp	r5, r4
 800a7f4:	d105      	bne.n	800a802 <__libc_init_array+0x2e>
 800a7f6:	bd70      	pop	{r4, r5, r6, pc}
 800a7f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a7fc:	4798      	blx	r3
 800a7fe:	3501      	adds	r5, #1
 800a800:	e7ee      	b.n	800a7e0 <__libc_init_array+0xc>
 800a802:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a806:	4798      	blx	r3
 800a808:	3501      	adds	r5, #1
 800a80a:	e7f2      	b.n	800a7f2 <__libc_init_array+0x1e>
 800a80c:	0800a8c0 	.word	0x0800a8c0
 800a810:	0800a8c0 	.word	0x0800a8c0
 800a814:	0800a8c0 	.word	0x0800a8c0
 800a818:	0800a8c4 	.word	0x0800a8c4

0800a81c <memset>:
 800a81c:	4603      	mov	r3, r0
 800a81e:	4402      	add	r2, r0
 800a820:	4293      	cmp	r3, r2
 800a822:	d100      	bne.n	800a826 <memset+0xa>
 800a824:	4770      	bx	lr
 800a826:	f803 1b01 	strb.w	r1, [r3], #1
 800a82a:	e7f9      	b.n	800a820 <memset+0x4>

0800a82c <_init>:
 800a82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82e:	bf00      	nop
 800a830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a832:	bc08      	pop	{r3}
 800a834:	469e      	mov	lr, r3
 800a836:	4770      	bx	lr

0800a838 <_fini>:
 800a838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83a:	bf00      	nop
 800a83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a83e:	bc08      	pop	{r3}
 800a840:	469e      	mov	lr, r3
 800a842:	4770      	bx	lr
