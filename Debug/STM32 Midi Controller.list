
STM32 Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a834  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800a940  0800a940  0001a940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9bc  0800a9bc  00020194  2**0
                  CONTENTS
  4 .ARM          00000000  0800a9bc  0800a9bc  00020194  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a9bc  0800a9bc  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9bc  0800a9bc  0001a9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9c0  0800a9c0  0001a9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0800a9c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001420  20000194  0800ab58  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015b4  0800ab58  000215b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c76b  00000000  00000000  000201bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ba4  00000000  00000000  0003c928  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001568  00000000  00000000  000404d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013b8  00000000  00000000  00041a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c0b7  00000000  00000000  00042df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015916  00000000  00000000  0005eea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094cc9  00000000  00000000  000747bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00109486  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005854  00000000  00000000  00109504  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000194 	.word	0x20000194
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a928 	.word	0x0800a928

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000198 	.word	0x20000198
 8000148:	0800a928 	.word	0x0800a928

0800014c <DWT_Delay_Init>:

#include "DWT_Delay.h"

/* DWT based delay */
uint32_t DWT_Delay_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000150:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800015a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800015c:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <DWT_Delay_Init+0x58>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	4a10      	ldr	r2, [pc, #64]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000166:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000168:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0e      	ldr	r2, [pc, #56]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016e:	f023 0301 	bic.w	r3, r3, #1
 8000172:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a0b      	ldr	r2, [pc, #44]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000186:	bf00      	nop
    __ASM volatile ("NOP");
 8000188:	bf00      	nop
    __ASM volatile ("NOP");
 800018a:	bf00      	nop
    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000194:	2300      	movs	r3, #0
 8000196:	e000      	b.n	800019a <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000198:	2301      	movs	r3, #1
    }
}
 800019a:	4618      	mov	r0, r3
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	e000edf0 	.word	0xe000edf0
 80001a8:	e0001000 	.word	0xe0001000

080001ac <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80001b4:	4b0e      	ldr	r3, [pc, #56]	; (80001f0 <DWT_Delay_us+0x44>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80001ba:	f005 fe9b 	bl	8005ef4 <HAL_RCC_GetHCLKFreq>
 80001be:	4602      	mov	r2, r0
 80001c0:	4b0c      	ldr	r3, [pc, #48]	; (80001f4 <DWT_Delay_us+0x48>)
 80001c2:	fba3 2302 	umull	r2, r3, r3, r2
 80001c6:	0c9b      	lsrs	r3, r3, #18
 80001c8:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	68ba      	ldr	r2, [r7, #8]
 80001ce:	fb02 f303 	mul.w	r3, r2, r3
 80001d2:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80001d4:	bf00      	nop
 80001d6:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <DWT_Delay_us+0x44>)
 80001d8:	685a      	ldr	r2, [r3, #4]
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	1ad2      	subs	r2, r2, r3
 80001de:	6879      	ldr	r1, [r7, #4]
 80001e0:	68bb      	ldr	r3, [r7, #8]
 80001e2:	1acb      	subs	r3, r1, r3
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d3f6      	bcc.n	80001d6 <DWT_Delay_us+0x2a>
}
 80001e8:	bf00      	nop
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	e0001000 	.word	0xe0001000
 80001f4:	431bde83 	.word	0x431bde83

080001f8 <DWT_Delay_ms>:

void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <DWT_Delay_ms+0x40>)
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8000206:	f005 fe75 	bl	8005ef4 <HAL_RCC_GetHCLKFreq>
 800020a:	4602      	mov	r2, r0
 800020c:	4b0b      	ldr	r3, [pc, #44]	; (800023c <DWT_Delay_ms+0x44>)
 800020e:	fba3 2302 	umull	r2, r3, r3, r2
 8000212:	099b      	lsrs	r3, r3, #6
 8000214:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	68ba      	ldr	r2, [r7, #8]
 800021a:	fb02 f303 	mul.w	r3, r2, r3
 800021e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8000220:	bf00      	nop
 8000222:	4b05      	ldr	r3, [pc, #20]	; (8000238 <DWT_Delay_ms+0x40>)
 8000224:	685a      	ldr	r2, [r3, #4]
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	1ad2      	subs	r2, r2, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	429a      	cmp	r2, r3
 800022e:	d3f8      	bcc.n	8000222 <DWT_Delay_ms+0x2a>
}
 8000230:	bf00      	nop
 8000232:	3710      	adds	r7, #16
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	e0001000 	.word	0xe0001000
 800023c:	10624dd3 	.word	0x10624dd3

08000240 <MCP23017SetPin>:
volatile uint8_t currentLCDByte = 0; //which byte are we at (out of 9)


/* MCP23017 Defines */

void MCP23017SetPin(uint8_t pin, bank b, uint8_t addr){
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	71fb      	strb	r3, [r7, #7]
 800024a:	460b      	mov	r3, r1
 800024c:	71bb      	strb	r3, [r7, #6]
 800024e:	4613      	mov	r3, r2
 8000250:	717b      	strb	r3, [r7, #5]

	while(blocked); //wait for clearance
 8000252:	bf00      	nop
 8000254:	4b3f      	ldr	r3, [pc, #252]	; (8000354 <MCP23017SetPin+0x114>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	b2db      	uxtb	r3, r3
 800025a:	2b00      	cmp	r3, #0
 800025c:	d1fa      	bne.n	8000254 <MCP23017SetPin+0x14>
	//GPIOA->BSRR = (1<<7);

	currentIOState[b] |= (1<<pin);
 800025e:	79bb      	ldrb	r3, [r7, #6]
 8000260:	4a3d      	ldr	r2, [pc, #244]	; (8000358 <MCP23017SetPin+0x118>)
 8000262:	5cd3      	ldrb	r3, [r2, r3]
 8000264:	b25a      	sxtb	r2, r3
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	2101      	movs	r1, #1
 800026a:	fa01 f303 	lsl.w	r3, r1, r3
 800026e:	b25b      	sxtb	r3, r3
 8000270:	4313      	orrs	r3, r2
 8000272:	b25a      	sxtb	r2, r3
 8000274:	79bb      	ldrb	r3, [r7, #6]
 8000276:	b2d1      	uxtb	r1, r2
 8000278:	4a37      	ldr	r2, [pc, #220]	; (8000358 <MCP23017SetPin+0x118>)
 800027a:	54d1      	strb	r1, [r2, r3]
	//write out the new state
	//UPDATE: This messes up the BAM Driver because it causes the BAM to skip entire steps... its better just to pause TIM2
	//__disable_irq(); //the entire routine will be super duper unhappy unless this is in place


	TIM2->CR1 &= ~1; //disable BAM Driver
 800027c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000286:	f023 0301 	bic.w	r3, r3, #1
 800028a:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 800028c:	4b33      	ldr	r3, [pc, #204]	; (800035c <MCP23017SetPin+0x11c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a32      	ldr	r2, [pc, #200]	; (800035c <MCP23017SetPin+0x11c>)
 8000292:	f023 0301 	bic.w	r3, r3, #1
 8000296:	6013      	str	r3, [r2, #0]
	//__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 8000298:	4b31      	ldr	r3, [pc, #196]	; (8000360 <MCP23017SetPin+0x120>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a30      	ldr	r2, [pc, #192]	; (8000360 <MCP23017SetPin+0x120>)
 800029e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002a2:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80002a4:	bf00      	nop
 80002a6:	4b2e      	ldr	r3, [pc, #184]	; (8000360 <MCP23017SetPin+0x120>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0f9      	beq.n	80002a6 <MCP23017SetPin+0x66>
	I2C2->DR = addr; //address the MCP23017
 80002b2:	4a2b      	ldr	r2, [pc, #172]	; (8000360 <MCP23017SetPin+0x120>)
 80002b4:	797b      	ldrb	r3, [r7, #5]
 80002b6:	6113      	str	r3, [r2, #16]
	//__enable_irq(); didn't work here
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80002b8:	bf00      	nop
 80002ba:	4b29      	ldr	r3, [pc, #164]	; (8000360 <MCP23017SetPin+0x120>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f003 0302 	and.w	r3, r3, #2
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f9      	beq.n	80002ba <MCP23017SetPin+0x7a>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 80002c6:	bf00      	nop
 80002c8:	4b25      	ldr	r3, [pc, #148]	; (8000360 <MCP23017SetPin+0x120>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0304 	and.w	r3, r3, #4
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d0f9      	beq.n	80002c8 <MCP23017SetPin+0x88>

	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80002d4:	bf00      	nop
 80002d6:	4b22      	ldr	r3, [pc, #136]	; (8000360 <MCP23017SetPin+0x120>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0f9      	beq.n	80002d6 <MCP23017SetPin+0x96>
	if(b==A){
 80002e2:	79bb      	ldrb	r3, [r7, #6]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d103      	bne.n	80002f0 <MCP23017SetPin+0xb0>
		I2C2->DR = 0x14;
 80002e8:	4b1d      	ldr	r3, [pc, #116]	; (8000360 <MCP23017SetPin+0x120>)
 80002ea:	2214      	movs	r2, #20
 80002ec:	611a      	str	r2, [r3, #16]
 80002ee:	e002      	b.n	80002f6 <MCP23017SetPin+0xb6>
	}
	else{
		I2C2->DR = 0x15;
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <MCP23017SetPin+0x120>)
 80002f2:	2215      	movs	r2, #21
 80002f4:	611a      	str	r2, [r3, #16]
	}
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80002f6:	bf00      	nop
 80002f8:	4b19      	ldr	r3, [pc, #100]	; (8000360 <MCP23017SetPin+0x120>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000300:	2b00      	cmp	r3, #0
 8000302:	d0f9      	beq.n	80002f8 <MCP23017SetPin+0xb8>
	I2C2->DR = currentIOState[b]; //just pull everything low
 8000304:	79bb      	ldrb	r3, [r7, #6]
 8000306:	4a14      	ldr	r2, [pc, #80]	; (8000358 <MCP23017SetPin+0x118>)
 8000308:	5cd2      	ldrb	r2, [r2, r3]
 800030a:	4b15      	ldr	r3, [pc, #84]	; (8000360 <MCP23017SetPin+0x120>)
 800030c:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800030e:	bf00      	nop
 8000310:	4b13      	ldr	r3, [pc, #76]	; (8000360 <MCP23017SetPin+0x120>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f9      	beq.n	8000310 <MCP23017SetPin+0xd0>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 800031c:	4b10      	ldr	r3, [pc, #64]	; (8000360 <MCP23017SetPin+0x120>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a0f      	ldr	r2, [pc, #60]	; (8000360 <MCP23017SetPin+0x120>)
 8000322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000326:	6013      	str	r3, [r2, #0]

	while ((I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 8000328:	bf00      	nop
 800032a:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <MCP23017SetPin+0x120>)
 800032c:	699b      	ldr	r3, [r3, #24]

	//__enable_irq();
	TIM2->CR1 |= 1; //enable BAM Driver
 800032e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 800033e:	4b07      	ldr	r3, [pc, #28]	; (800035c <MCP23017SetPin+0x11c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a06      	ldr	r2, [pc, #24]	; (800035c <MCP23017SetPin+0x11c>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	6013      	str	r3, [r2, #0]

	//GPIOA->BRR = (1<<7);

}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	200001b8 	.word	0x200001b8
 8000358:	200001b0 	.word	0x200001b0
 800035c:	40000400 	.word	0x40000400
 8000360:	40005800 	.word	0x40005800

08000364 <MCP23017ClearPin>:

void MCP23017ClearPin(uint8_t pin, bank b, uint8_t addr){
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
 800036e:	460b      	mov	r3, r1
 8000370:	71bb      	strb	r3, [r7, #6]
 8000372:	4613      	mov	r3, r2
 8000374:	717b      	strb	r3, [r7, #5]

	while(blocked); //wait for clearance
 8000376:	bf00      	nop
 8000378:	4b40      	ldr	r3, [pc, #256]	; (800047c <MCP23017ClearPin+0x118>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	b2db      	uxtb	r3, r3
 800037e:	2b00      	cmp	r3, #0
 8000380:	d1fa      	bne.n	8000378 <MCP23017ClearPin+0x14>
	//GPIOA->BSRR = (1<<7);

	currentIOState[b] &= ~(1<<pin);
 8000382:	79bb      	ldrb	r3, [r7, #6]
 8000384:	4a3e      	ldr	r2, [pc, #248]	; (8000480 <MCP23017ClearPin+0x11c>)
 8000386:	5cd3      	ldrb	r3, [r2, r3]
 8000388:	b25a      	sxtb	r2, r3
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	2101      	movs	r1, #1
 800038e:	fa01 f303 	lsl.w	r3, r1, r3
 8000392:	b25b      	sxtb	r3, r3
 8000394:	43db      	mvns	r3, r3
 8000396:	b25b      	sxtb	r3, r3
 8000398:	4013      	ands	r3, r2
 800039a:	b25a      	sxtb	r2, r3
 800039c:	79bb      	ldrb	r3, [r7, #6]
 800039e:	b2d1      	uxtb	r1, r2
 80003a0:	4a37      	ldr	r2, [pc, #220]	; (8000480 <MCP23017ClearPin+0x11c>)
 80003a2:	54d1      	strb	r1, [r2, r3]
	//UPDATE: This messses up the BAM Driver... I think it'll be better just to stop TIM2
	//__disable_irq(); //the entire routine will be super duper unhappy unless this is in place

	//potential issue: the other interrupts may cause this crap to fail again...

	TIM2->CR1 &= ~1; //disable BAM Driver
 80003a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ae:	f023 0301 	bic.w	r3, r3, #1
 80003b2:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 80003b4:	4b33      	ldr	r3, [pc, #204]	; (8000484 <MCP23017ClearPin+0x120>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a32      	ldr	r2, [pc, #200]	; (8000484 <MCP23017ClearPin+0x120>)
 80003ba:	f023 0301 	bic.w	r3, r3, #1
 80003be:	6013      	str	r3, [r2, #0]
	//__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 80003c0:	4b31      	ldr	r3, [pc, #196]	; (8000488 <MCP23017ClearPin+0x124>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a30      	ldr	r2, [pc, #192]	; (8000488 <MCP23017ClearPin+0x124>)
 80003c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ca:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80003cc:	bf00      	nop
 80003ce:	4b2e      	ldr	r3, [pc, #184]	; (8000488 <MCP23017ClearPin+0x124>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0f9      	beq.n	80003ce <MCP23017ClearPin+0x6a>
	I2C2->DR = addr; //address the MCP23017
 80003da:	4a2b      	ldr	r2, [pc, #172]	; (8000488 <MCP23017ClearPin+0x124>)
 80003dc:	797b      	ldrb	r3, [r7, #5]
 80003de:	6113      	str	r3, [r2, #16]
	//__enable_irq(); didn't work here
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80003e0:	bf00      	nop
 80003e2:	4b29      	ldr	r3, [pc, #164]	; (8000488 <MCP23017ClearPin+0x124>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f003 0302 	and.w	r3, r3, #2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d0f9      	beq.n	80003e2 <MCP23017ClearPin+0x7e>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 80003ee:	bf00      	nop
 80003f0:	4b25      	ldr	r3, [pc, #148]	; (8000488 <MCP23017ClearPin+0x124>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0304 	and.w	r3, r3, #4
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d0f9      	beq.n	80003f0 <MCP23017ClearPin+0x8c>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80003fc:	bf00      	nop
 80003fe:	4b22      	ldr	r3, [pc, #136]	; (8000488 <MCP23017ClearPin+0x124>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000406:	2b00      	cmp	r3, #0
 8000408:	d0f9      	beq.n	80003fe <MCP23017ClearPin+0x9a>
	if(b==A){
 800040a:	79bb      	ldrb	r3, [r7, #6]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d103      	bne.n	8000418 <MCP23017ClearPin+0xb4>
		I2C2->DR = 0x14;
 8000410:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <MCP23017ClearPin+0x124>)
 8000412:	2214      	movs	r2, #20
 8000414:	611a      	str	r2, [r3, #16]
 8000416:	e002      	b.n	800041e <MCP23017ClearPin+0xba>
	}
	else{
		I2C2->DR = 0x15;
 8000418:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <MCP23017ClearPin+0x124>)
 800041a:	2215      	movs	r2, #21
 800041c:	611a      	str	r2, [r3, #16]
	}
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800041e:	bf00      	nop
 8000420:	4b19      	ldr	r3, [pc, #100]	; (8000488 <MCP23017ClearPin+0x124>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000428:	2b00      	cmp	r3, #0
 800042a:	d0f9      	beq.n	8000420 <MCP23017ClearPin+0xbc>
	I2C2->DR = currentIOState[b]; //just pull everything low
 800042c:	79bb      	ldrb	r3, [r7, #6]
 800042e:	4a14      	ldr	r2, [pc, #80]	; (8000480 <MCP23017ClearPin+0x11c>)
 8000430:	5cd2      	ldrb	r2, [r2, r3]
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <MCP23017ClearPin+0x124>)
 8000434:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000436:	bf00      	nop
 8000438:	4b13      	ldr	r3, [pc, #76]	; (8000488 <MCP23017ClearPin+0x124>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000440:	2b00      	cmp	r3, #0
 8000442:	d0f9      	beq.n	8000438 <MCP23017ClearPin+0xd4>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 8000444:	4b10      	ldr	r3, [pc, #64]	; (8000488 <MCP23017ClearPin+0x124>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a0f      	ldr	r2, [pc, #60]	; (8000488 <MCP23017ClearPin+0x124>)
 800044a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800044e:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 8000450:	bf00      	nop
 8000452:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <MCP23017ClearPin+0x124>)
 8000454:	699b      	ldr	r3, [r3, #24]

	//__enable_irq();
	TIM2->CR1 |= 1; //enable BAM Driver
 8000456:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 8000466:	4b07      	ldr	r3, [pc, #28]	; (8000484 <MCP23017ClearPin+0x120>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a06      	ldr	r2, [pc, #24]	; (8000484 <MCP23017ClearPin+0x120>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6013      	str	r3, [r2, #0]
	//__enable_irq();
	//GPIOA->BRR = (1<<7);

}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	200001b8 	.word	0x200001b8
 8000480:	200001b0 	.word	0x200001b0
 8000484:	40000400 	.word	0x40000400
 8000488:	40005800 	.word	0x40005800

0800048c <LCDInit>:
 * \fn LCDInit
 * @brief Initialises both the LCD and the MCP23017
 *
 * @param addr Address of the MCP23017
 */
void LCDInit(uint8_t addr){ //interrupts should be disabled here
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000496:	b672      	cpsid	i

	//while(blocked); //wait for clearance anyways just for good measure

	//Initialise the MCP23017 first
	__disable_irq(); //let's allow the init to go down peacefully
	I2C2->CR1 |= (1<<8); //send start condition
 8000498:	4b4a      	ldr	r3, [pc, #296]	; (80005c4 <LCDInit+0x138>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a49      	ldr	r2, [pc, #292]	; (80005c4 <LCDInit+0x138>)
 800049e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004a2:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80004a4:	bf00      	nop
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <LCDInit+0x138>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0f9      	beq.n	80004a6 <LCDInit+0x1a>
	I2C2->DR = addr; //address the MCP23017
 80004b2:	4a44      	ldr	r2, [pc, #272]	; (80005c4 <LCDInit+0x138>)
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80004b8:	bf00      	nop
 80004ba:	4b42      	ldr	r3, [pc, #264]	; (80005c4 <LCDInit+0x138>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f003 0302 	and.w	r3, r3, #2
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f9      	beq.n	80004ba <LCDInit+0x2e>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 80004c6:	bf00      	nop
 80004c8:	4b3e      	ldr	r3, [pc, #248]	; (80005c4 <LCDInit+0x138>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0304 	and.w	r3, r3, #4
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d0f9      	beq.n	80004c8 <LCDInit+0x3c>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80004d4:	bf00      	nop
 80004d6:	4b3b      	ldr	r3, [pc, #236]	; (80005c4 <LCDInit+0x138>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d0f9      	beq.n	80004d6 <LCDInit+0x4a>
	I2C2->DR = 0x00; //write to IODIR_A
 80004e2:	4b38      	ldr	r3, [pc, #224]	; (80005c4 <LCDInit+0x138>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80004e8:	bf00      	nop
 80004ea:	4b36      	ldr	r3, [pc, #216]	; (80005c4 <LCDInit+0x138>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0f9      	beq.n	80004ea <LCDInit+0x5e>
	I2C2->DR = 0x00; //all outputs
 80004f6:	4b33      	ldr	r3, [pc, #204]	; (80005c4 <LCDInit+0x138>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80004fc:	bf00      	nop
 80004fe:	4b31      	ldr	r3, [pc, #196]	; (80005c4 <LCDInit+0x138>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <LCDInit+0x72>
	I2C2->DR = 0x00; //all outputs for next address which is IODIR_B
 800050a:	4b2e      	ldr	r3, [pc, #184]	; (80005c4 <LCDInit+0x138>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000510:	bf00      	nop
 8000512:	4b2c      	ldr	r3, [pc, #176]	; (80005c4 <LCDInit+0x138>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051a:	2b00      	cmp	r3, #0
 800051c:	d0f9      	beq.n	8000512 <LCDInit+0x86>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 800051e:	4b29      	ldr	r3, [pc, #164]	; (80005c4 <LCDInit+0x138>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a28      	ldr	r2, [pc, #160]	; (80005c4 <LCDInit+0x138>)
 8000524:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000528:	6013      	str	r3, [r2, #0]


	//Pull RS, RW and E pins LOW
	MCP23017ClearPin(RS_Pin, B, LCD_Address);
 800052a:	224e      	movs	r2, #78	; 0x4e
 800052c:	2101      	movs	r1, #1
 800052e:	2002      	movs	r0, #2
 8000530:	f7ff ff18 	bl	8000364 <MCP23017ClearPin>
	MCP23017ClearPin(RW_Pin, B, LCD_Address);
 8000534:	224e      	movs	r2, #78	; 0x4e
 8000536:	2101      	movs	r1, #1
 8000538:	2001      	movs	r0, #1
 800053a:	f7ff ff13 	bl	8000364 <MCP23017ClearPin>
	GPIOA->BRR = 1<<8;
 800053e:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <LCDInit+0x13c>)
 8000540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000544:	615a      	str	r2, [r3, #20]



	LCDData(0x00, addr); //clear the data pins as well
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4619      	mov	r1, r3
 800054a:	2000      	movs	r0, #0
 800054c:	f000 f83e 	bl	80005cc <LCDData>
	DWT_Delay_ms(30);
 8000550:	201e      	movs	r0, #30
 8000552:	f7ff fe51 	bl	80001f8 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4619      	mov	r1, r3
 800055a:	2030      	movs	r0, #48	; 0x30
 800055c:	f000 f8b2 	bl	80006c4 <LCDCommand>
	DWT_Delay_ms(5);
 8000560:	2005      	movs	r0, #5
 8000562:	f7ff fe49 	bl	80001f8 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	4619      	mov	r1, r3
 800056a:	2030      	movs	r0, #48	; 0x30
 800056c:	f000 f8aa 	bl	80006c4 <LCDCommand>
	DWT_Delay_ms(5);
 8000570:	2005      	movs	r0, #5
 8000572:	f7ff fe41 	bl	80001f8 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4619      	mov	r1, r3
 800057a:	2030      	movs	r0, #48	; 0x30
 800057c:	f000 f8a2 	bl	80006c4 <LCDCommand>
	DWT_Delay_us(1000);
 8000580:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000584:	f7ff fe12 	bl	80001ac <DWT_Delay_us>

	LCDCommand(0x38, addr); //8-bit mode, 2 lines, smaller font
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	4619      	mov	r1, r3
 800058c:	2038      	movs	r0, #56	; 0x38
 800058e:	f000 f899 	bl	80006c4 <LCDCommand>

	LCDCommand(0x0C, addr); //display ON
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	4619      	mov	r1, r3
 8000596:	200c      	movs	r0, #12
 8000598:	f000 f894 	bl	80006c4 <LCDCommand>

	LCDCommand(0x01, addr); //display clear
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4619      	mov	r1, r3
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 f88f 	bl	80006c4 <LCDCommand>
	DWT_Delay_us(2000); //clear requires a substantial delay
 80005a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005aa:	f7ff fdff 	bl	80001ac <DWT_Delay_us>

	LCDCommand(0x06, addr); //set entry mode
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	4619      	mov	r1, r3
 80005b2:	2006      	movs	r0, #6
 80005b4:	f000 f886 	bl	80006c4 <LCDCommand>
  __ASM volatile ("cpsie i" : : : "memory");
 80005b8:	b662      	cpsie	i

	__enable_irq();


}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40005800 	.word	0x40005800
 80005c8:	40010800 	.word	0x40010800

080005cc <LCDData>:
 * @brief Presents the data to D0 to D7 (located on Bank A)
 *
 * @param data Data to send
 * @param addr I2C Address of the MCP23017
 */
void LCDData(char data, uint8_t addr){
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	460a      	mov	r2, r1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	4613      	mov	r3, r2
 80005da:	71bb      	strb	r3, [r7, #6]

	while(blocked); //wait for clearance
 80005dc:	bf00      	nop
 80005de:	4b36      	ldr	r3, [pc, #216]	; (80006b8 <LCDData+0xec>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1fa      	bne.n	80005de <LCDData+0x12>

	TIM2->CR1 &= ~1; //disable BAM Driver
 80005e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005f2:	f023 0301 	bic.w	r3, r3, #1
 80005f6:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 80005f8:	4b30      	ldr	r3, [pc, #192]	; (80006bc <LCDData+0xf0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a2f      	ldr	r2, [pc, #188]	; (80006bc <LCDData+0xf0>)
 80005fe:	f023 0301 	bic.w	r3, r3, #1
 8000602:	6013      	str	r3, [r2, #0]
	//__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 8000604:	4b2e      	ldr	r3, [pc, #184]	; (80006c0 <LCDData+0xf4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a2d      	ldr	r2, [pc, #180]	; (80006c0 <LCDData+0xf4>)
 800060a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800060e:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 8000610:	bf00      	nop
 8000612:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <LCDData+0xf4>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0f9      	beq.n	8000612 <LCDData+0x46>
	I2C2->DR = addr; //address the MCP23017
 800061e:	4a28      	ldr	r2, [pc, #160]	; (80006c0 <LCDData+0xf4>)
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000624:	bf00      	nop
 8000626:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <LCDData+0xf4>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0f9      	beq.n	8000626 <LCDData+0x5a>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000632:	bf00      	nop
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <LCDData+0xf4>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0304 	and.w	r3, r3, #4
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0f9      	beq.n	8000634 <LCDData+0x68>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000640:	bf00      	nop
 8000642:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <LCDData+0xf4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0f9      	beq.n	8000642 <LCDData+0x76>
	I2C2->DR = 0x14; //write to GPIO_A
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <LCDData+0xf4>)
 8000650:	2214      	movs	r2, #20
 8000652:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000654:	bf00      	nop
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <LCDData+0xf4>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	2b00      	cmp	r3, #0
 8000660:	d0f9      	beq.n	8000656 <LCDData+0x8a>
	I2C2->DR = data; //present data at output bank A
 8000662:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <LCDData+0xf4>)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000668:	bf00      	nop
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <LCDData+0xf4>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0f9      	beq.n	800066a <LCDData+0x9e>
	while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
 8000676:	bf00      	nop
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <LCDData+0xf4>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	f003 0304 	and.w	r3, r3, #4
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0f9      	beq.n	8000678 <LCDData+0xac>
	I2C2->CR1 |= (1<<9); //send stop condition
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <LCDData+0xf4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <LCDData+0xf4>)
 800068a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800068e:	6013      	str	r3, [r2, #0]

	//__enable_irq();
	TIM2->CR1 |= 1; //enable BAM Driver
 8000690:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <LCDData+0xf0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a05      	ldr	r2, [pc, #20]	; (80006bc <LCDData+0xf0>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]

}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	200001b8 	.word	0x200001b8
 80006bc:	40000400 	.word	0x40000400
 80006c0:	40005800 	.word	0x40005800

080006c4 <LCDCommand>:

void LCDCommand(char data, uint8_t addr){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	460a      	mov	r2, r1
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	4613      	mov	r3, r2
 80006d2:	71bb      	strb	r3, [r7, #6]


	MCP23017ClearPin(RS_Pin, B, addr);
 80006d4:	79bb      	ldrb	r3, [r7, #6]
 80006d6:	461a      	mov	r2, r3
 80006d8:	2101      	movs	r1, #1
 80006da:	2002      	movs	r0, #2
 80006dc:	f7ff fe42 	bl	8000364 <MCP23017ClearPin>

	LCDData(data, addr);
 80006e0:	79ba      	ldrb	r2, [r7, #6]
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	4611      	mov	r1, r2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff70 	bl	80005cc <LCDData>

	LCDCycleEN(addr);
 80006ec:	79bb      	ldrb	r3, [r7, #6]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f80a 	bl	8000708 <LCDCycleEN>

	MCP23017SetPin(RS_Pin, B, addr);
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	461a      	mov	r2, r3
 80006f8:	2101      	movs	r1, #1
 80006fa:	2002      	movs	r0, #2
 80006fc:	f7ff fda0 	bl	8000240 <MCP23017SetPin>

}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <LCDCycleEN>:

void LCDCycleEN(uint8_t addr){
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	DWT_Delay_us(1);
	MCP23017ClearPin(EN_Pin, B, addr);
	DWT_Delay_us(100);

*/
	GPIOA->BRR = 1<<8;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <LCDCycleEN+0x3c>)
 8000714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000718:	615a      	str	r2, [r3, #20]
	GPIOA->BSRR = 1<<8; //this pulse is 100ns, aka too short, datasheet specifies min of 230 ns
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <LCDCycleEN+0x3c>)
 800071c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000720:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = 1<<8;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <LCDCycleEN+0x3c>)
 8000724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000728:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = 1<<8;
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <LCDCycleEN+0x3c>)
 800072c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000730:	611a      	str	r2, [r3, #16]
	GPIOA->BRR = 1<<8;
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <LCDCycleEN+0x3c>)
 8000734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000738:	615a      	str	r2, [r3, #20]

}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	40010800 	.word	0x40010800

08000748 <LCDWriteChar>:

void LCDWriteChar(char data, uint8_t addr){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	460a      	mov	r2, r1
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	4613      	mov	r3, r2
 8000756:	71bb      	strb	r3, [r7, #6]

	//MCP23017SetPin(RS_Pin, B, addr);
	//I2C2->CR2 |= (1<<9); //enable event interrupts
	LCDData(data, addr);
 8000758:	79ba      	ldrb	r2, [r7, #6]
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	4611      	mov	r1, r2
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff34 	bl	80005cc <LCDData>
	LCDCycleEN(addr);
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ffce 	bl	8000708 <LCDCycleEN>

}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <LCDWriteString>:

void LCDWriteString(char *str, uint8_t addr){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	70fb      	strb	r3, [r7, #3]

	for(int i = 0; (volatile char)str[i] != '\x00' ; i++){ //Nice touch: take advantage of null byte terminated strings
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	e00b      	b.n	800079e <LCDWriteString+0x2a>
		LCDWriteChar(str[i], addr);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	78fa      	ldrb	r2, [r7, #3]
 8000790:	4611      	mov	r1, r2
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ffd8 	bl	8000748 <LCDWriteChar>
	for(int i = 0; (volatile char)str[i] != '\x00' ; i++){ //Nice touch: take advantage of null byte terminated strings
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3301      	adds	r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	4413      	add	r3, r2
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1ed      	bne.n	8000786 <LCDWriteString+0x12>
	}

}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <LCDClear>:

void LCDClear(uint8_t addr){
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	71fb      	strb	r3, [r7, #7]

	LCDCommand(1, addr);
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	4619      	mov	r1, r3
 80007c0:	2001      	movs	r0, #1
 80007c2:	f7ff ff7f 	bl	80006c4 <LCDCommand>
	DWT_Delay_us(2000);
 80007c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007ca:	f7ff fcef 	bl	80001ac <DWT_Delay_us>

}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <LCDSetCursor>:

void LCDSetCursor(uint8_t row, uint8_t col, uint8_t addr){
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b084      	sub	sp, #16
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4603      	mov	r3, r0
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	460b      	mov	r3, r1
 80007e2:	71bb      	strb	r3, [r7, #6]
 80007e4:	4613      	mov	r3, r2
 80007e6:	717b      	strb	r3, [r7, #5]

	char outbyte;

	if(row == 1){
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d109      	bne.n	8000802 <LCDSetCursor+0x2c>
		outbyte = 0x80 + col - 1;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	337f      	adds	r3, #127	; 0x7f
 80007f2:	73fb      	strb	r3, [r7, #15]
		LCDCommand(outbyte, addr);
 80007f4:	797a      	ldrb	r2, [r7, #5]
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff62 	bl	80006c4 <LCDCommand>
	else if(row == 2){
		outbyte = 0xC0 + col - 1;
		LCDCommand(outbyte, addr);
	}

}
 8000800:	e00b      	b.n	800081a <LCDSetCursor+0x44>
	else if(row == 2){
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b02      	cmp	r3, #2
 8000806:	d108      	bne.n	800081a <LCDSetCursor+0x44>
		outbyte = 0xC0 + col - 1;
 8000808:	79bb      	ldrb	r3, [r7, #6]
 800080a:	3b41      	subs	r3, #65	; 0x41
 800080c:	73fb      	strb	r3, [r7, #15]
		LCDCommand(outbyte, addr);
 800080e:	797a      	ldrb	r2, [r7, #5]
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff55 	bl	80006c4 <LCDCommand>
}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <LEDMatrixInit>:





void LEDMatrixInit(uint8_t addr){
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800082e:	b672      	cpsid	i
	//note: BTF clearing and stop generation are handled by the Event Interrupt
	__disable_irq();



	I2C1->CR1 |= (1<<8); //send start condition
 8000830:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <LEDMatrixInit+0xac>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a26      	ldr	r2, [pc, #152]	; (80008d0 <LEDMatrixInit+0xac>)
 8000836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800083a:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 800083c:	bf00      	nop
 800083e:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <LEDMatrixInit+0xac>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0f9      	beq.n	800083e <LEDMatrixInit+0x1a>
	I2C1->DR = addr; //address the MCP23017
 800084a:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <LEDMatrixInit+0xac>)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	6113      	str	r3, [r2, #16]
	while ((I2C1->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000850:	bf00      	nop
 8000852:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <LEDMatrixInit+0xac>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0f9      	beq.n	8000852 <LEDMatrixInit+0x2e>
	while ((I2C1->SR2 & (1<<2)) == 0); //read I2C SR2
 800085e:	bf00      	nop
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <LEDMatrixInit+0xac>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0304 	and.w	r3, r3, #4
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0f9      	beq.n	8000860 <LEDMatrixInit+0x3c>
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800086c:	bf00      	nop
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <LEDMatrixInit+0xac>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0f9      	beq.n	800086e <LEDMatrixInit+0x4a>
	I2C1->DR = 0x00; //write to IODIR_A
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <LEDMatrixInit+0xac>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000880:	bf00      	nop
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <LEDMatrixInit+0xac>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088a:	2b00      	cmp	r3, #0
 800088c:	d0f9      	beq.n	8000882 <LEDMatrixInit+0x5e>
	I2C1->DR = 0x00; //all outputs
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <LEDMatrixInit+0xac>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000894:	bf00      	nop
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <LEDMatrixInit+0xac>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d0f9      	beq.n	8000896 <LEDMatrixInit+0x72>
	I2C1->DR = 0x00; //all outputs for next address which is IODIR_B
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <LEDMatrixInit+0xac>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80008a8:	bf00      	nop
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <LEDMatrixInit+0xac>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d0f9      	beq.n	80008aa <LEDMatrixInit+0x86>
	//while ((I2C1->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C1->CR1 |= (1<<9); //send stop condition
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <LEDMatrixInit+0xac>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <LEDMatrixInit+0xac>)
 80008bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80008c2:	b662      	cpsie	i
	__enable_irq();

}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40005400 	.word	0x40005400

080008d4 <LEDMatrixStart>:

void LEDMatrixStart(uint8_t addr){
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]

	while(blocked); //just so nothing stupid happens
 80008de:	bf00      	nop
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <LEDMatrixStart+0x94>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1fa      	bne.n	80008e0 <LEDMatrixStart+0xc>


	DMA1_Channel6->CMAR = (uint32_t)LEDMatrixBuffer;
 80008ea:	4b20      	ldr	r3, [pc, #128]	; (800096c <LEDMatrixStart+0x98>)
 80008ec:	4a20      	ldr	r2, [pc, #128]	; (8000970 <LEDMatrixStart+0x9c>)
 80008ee:	60da      	str	r2, [r3, #12]
	DMA1_Channel6->CPAR = (uint32_t)&(I2C1->DR);
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <LEDMatrixStart+0x98>)
 80008f2:	4a20      	ldr	r2, [pc, #128]	; (8000974 <LEDMatrixStart+0xa0>)
 80008f4:	609a      	str	r2, [r3, #8]
	DMA1_Channel6->CNDTR = 3;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <LEDMatrixStart+0x98>)
 80008f8:	2203      	movs	r2, #3
 80008fa:	605a      	str	r2, [r3, #4]
	DMA1_Channel6->CCR |= (0b11<<12); //High Priority
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <LEDMatrixStart+0x98>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a1a      	ldr	r2, [pc, #104]	; (800096c <LEDMatrixStart+0x98>)
 8000902:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000906:	6013      	str	r3, [r2, #0]
	DMA1_Channel6->CCR |= (1<<4 | 1<<7); //set MINC and Read from Memory
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <LEDMatrixStart+0x98>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a17      	ldr	r2, [pc, #92]	; (800096c <LEDMatrixStart+0x98>)
 800090e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000912:	6013      	str	r3, [r2, #0]
	//DMA1_Channel6->CCR |= (1<<1); //enable transfer complete interrupt

	DMA1_Channel6->CCR |= 1; //activate DMA
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <LEDMatrixStart+0x98>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a14      	ldr	r2, [pc, #80]	; (800096c <LEDMatrixStart+0x98>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i

	__disable_irq();
	I2C1->CR2 |= (1<<9); //enable event interrupts
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <LEDMatrixStart+0xa4>)
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	4a14      	ldr	r2, [pc, #80]	; (8000978 <LEDMatrixStart+0xa4>)
 8000928:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800092c:	6053      	str	r3, [r2, #4]
	I2C1->CR1 |= (1<<8); //send start condition
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <LEDMatrixStart+0xa4>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a11      	ldr	r2, [pc, #68]	; (8000978 <LEDMatrixStart+0xa4>)
 8000934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000938:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 800093a:	bf00      	nop
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <LEDMatrixStart+0xa4>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	2b00      	cmp	r3, #0
 8000946:	d0f9      	beq.n	800093c <LEDMatrixStart+0x68>
	I2C1->DR = addr; //address the MCP23017
 8000948:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <LEDMatrixStart+0xa4>)
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	6113      	str	r3, [r2, #16]
	I2C1->CR2 |= (1<<11); //enable DMA Requests
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <LEDMatrixStart+0xa4>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	4a09      	ldr	r2, [pc, #36]	; (8000978 <LEDMatrixStart+0xa4>)
 8000954:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000958:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 800095a:	b662      	cpsie	i
	__enable_irq();



}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	200001b8 	.word	0x200001b8
 800096c:	4002006c 	.word	0x4002006c
 8000970:	20000420 	.word	0x20000420
 8000974:	40005410 	.word	0x40005410
 8000978:	40005400 	.word	0x40005400

0800097c <LEDMatrixNextRow>:
void LEDMatrixNextRow(uint8_t addr){
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]

	blocked = 1; //avoid issues
 8000986:	4b34      	ldr	r3, [pc, #208]	; (8000a58 <LEDMatrixNextRow+0xdc>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]

	DMA1_Channel6->CCR &= ~1; //disable DMA1 Channel 6 for reconfiguring
 800098c:	4b33      	ldr	r3, [pc, #204]	; (8000a5c <LEDMatrixNextRow+0xe0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a32      	ldr	r2, [pc, #200]	; (8000a5c <LEDMatrixNextRow+0xe0>)
 8000992:	f023 0301 	bic.w	r3, r3, #1
 8000996:	6013      	str	r3, [r2, #0]
	if(currentLEDRow == 3) currentLEDRow = 0;
 8000998:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <LEDMatrixNextRow+0xe4>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b03      	cmp	r3, #3
 80009a0:	d103      	bne.n	80009aa <LEDMatrixNextRow+0x2e>
 80009a2:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <LEDMatrixNextRow+0xe4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
 80009a8:	e006      	b.n	80009b8 <LEDMatrixNextRow+0x3c>
	else currentLEDRow++;
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <LEDMatrixNextRow+0xe4>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	3301      	adds	r3, #1
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <LEDMatrixNextRow+0xe4>)
 80009b6:	701a      	strb	r2, [r3, #0]
	DMA1_Channel6->CNDTR = 3; //reload 3 bytes to transfer
 80009b8:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <LEDMatrixNextRow+0xe0>)
 80009ba:	2203      	movs	r2, #3
 80009bc:	605a      	str	r2, [r3, #4]
	DMA1_Channel6->CMAR = (uint32_t)&(LEDMatrixBuffer[currentLEDRow*3]); //set next target
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <LEDMatrixNextRow+0xe4>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	461a      	mov	r2, r3
 80009c6:	4613      	mov	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	4413      	add	r3, r2
 80009cc:	4a25      	ldr	r2, [pc, #148]	; (8000a64 <LEDMatrixNextRow+0xe8>)
 80009ce:	441a      	add	r2, r3
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <LEDMatrixNextRow+0xe0>)
 80009d2:	60da      	str	r2, [r3, #12]
	DMA1_Channel6->CCR |= 1; //enable DMA1 Channel 6
 80009d4:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <LEDMatrixNextRow+0xe0>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a20      	ldr	r2, [pc, #128]	; (8000a5c <LEDMatrixNextRow+0xe0>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i

	__disable_irq();
	TIM2->CR1 &= ~1; //disable BAM Driver
 80009e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ec:	f023 0301 	bic.w	r3, r3, #1
 80009f0:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <LEDMatrixNextRow+0xec>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <LEDMatrixNextRow+0xec>)
 80009f8:	f023 0301 	bic.w	r3, r3, #1
 80009fc:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= (1<<8); //send restart condition
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <LEDMatrixNextRow+0xf0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <LEDMatrixNextRow+0xf0>)
 8000a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a08:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 8000a0a:	bf00      	nop
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <LEDMatrixNextRow+0xf0>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d0f9      	beq.n	8000a0c <LEDMatrixNextRow+0x90>
	I2C1->DR = LEDMatrix_Address; //address the MCP23017
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <LEDMatrixNextRow+0xf0>)
 8000a1a:	2248      	movs	r2, #72	; 0x48
 8000a1c:	611a      	str	r2, [r3, #16]
	I2C1->CR2 |= (1<<11); //enable DMA Requests
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <LEDMatrixNextRow+0xf0>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <LEDMatrixNextRow+0xf0>)
 8000a24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a28:	6053      	str	r3, [r2, #4]
	TIM2->CR1 |= 1; //enable BAM Driver
 8000a2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <LEDMatrixNextRow+0xec>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <LEDMatrixNextRow+0xec>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6013      	str	r3, [r2, #0]

	blocked = 0; //unblock
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <LEDMatrixNextRow+0xdc>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a4c:	b662      	cpsie	i
	else GPIOA->BRR = 1<<6;
	TIM2->CR1 |= 1; //enable BAM Driver
	TIM3->CR1 |= 1;
	__enable_irq();*/

}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	200001b8 	.word	0x200001b8
 8000a5c:	4002006c 	.word	0x4002006c
 8000a60:	200001b6 	.word	0x200001b6
 8000a64:	20000420 	.word	0x20000420
 8000a68:	40000400 	.word	0x40000400
 8000a6c:	40005400 	.word	0x40005400

08000a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	60d3      	str	r3, [r2, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abe:	f000 fef3 	bl	80018a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac2:	f000 f8a9 	bl	8000c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac6:	f000 fab3 	bl	8001030 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aca:	f000 fa9b 	bl	8001004 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000ace:	f009 fa89 	bl	8009fe4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000ad2:	f000 f92d 	bl	8000d30 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ad6:	f000 f969 	bl	8000dac <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ada:	f000 f995 	bl	8000e08 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000ade:	f000 f9db 	bl	8000e98 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ae2:	f000 fa35 	bl	8000f50 <MX_TIM3_Init>
  MX_IWDG_Init();
 8000ae6:	f000 f9bd 	bl	8000e64 <MX_IWDG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000aea:	f000 f8f4 	bl	8000cd6 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  NVIC_SetPriorityGrouping(0U); //use standard interrupt grouping
 8000aee:	2000      	movs	r0, #0
 8000af0:	f7ff ffbe 	bl	8000a70 <__NVIC_SetPriorityGrouping>
  DWT_Delay_Init();
 8000af4:	f7ff fb2a 	bl	800014c <DWT_Delay_Init>

  blocked = 0;
 8000af8:	4b3d      	ldr	r3, [pc, #244]	; (8000bf0 <main+0x138>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
  I2C2->CR1 |= 1; //enable i2c 2 peripheral for LCD and EEPROM
 8000afe:	4b3d      	ldr	r3, [pc, #244]	; (8000bf4 <main+0x13c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a3c      	ldr	r2, [pc, #240]	; (8000bf4 <main+0x13c>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6013      	str	r3, [r2, #0]
  I2C1->CR1 |= 1; //enable i2c 1 peripheral for LED Matrix
 8000b0a:	4b3b      	ldr	r3, [pc, #236]	; (8000bf8 <main+0x140>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a3a      	ldr	r2, [pc, #232]	; (8000bf8 <main+0x140>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6013      	str	r3, [r2, #0]

  LCDInit(LCD_Address);
 8000b16:	204e      	movs	r0, #78	; 0x4e
 8000b18:	f7ff fcb8 	bl	800048c <LCDInit>
  LEDMatrixInit(LEDMatrix_Address);
 8000b1c:	2048      	movs	r0, #72	; 0x48
 8000b1e:	f7ff fe81 	bl	8000824 <LEDMatrixInit>

  TIM2->CR1 |= 1; //enable BAM Driver
 8000b22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6013      	str	r3, [r2, #0]
  TIM3->CR1 |= 1; //enable encoder scan driver
 8000b32:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <main+0x144>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a31      	ldr	r2, [pc, #196]	; (8000bfc <main+0x144>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6013      	str	r3, [r2, #0]


  LCDClear(LCD_Address);
 8000b3e:	204e      	movs	r0, #78	; 0x4e
 8000b40:	f7ff fe37 	bl	80007b2 <LCDClear>

  LCDSetCursor(1, 1, LCD_Address);
 8000b44:	224e      	movs	r2, #78	; 0x4e
 8000b46:	2101      	movs	r1, #1
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f7ff fe44 	bl	80007d6 <LCDSetCursor>

  LCDWriteString("AAAA", LCD_Address);
 8000b4e:	214e      	movs	r1, #78	; 0x4e
 8000b50:	482b      	ldr	r0, [pc, #172]	; (8000c00 <main+0x148>)
 8000b52:	f7ff fe0f 	bl	8000774 <LCDWriteString>



  for(int i = 0; i < 4; i++){ //function to drive the LED's
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	e022      	b.n	8000ba2 <main+0xea>
	  LEDMatrixBuffer[i*3] = 0x14;
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	4413      	add	r3, r2
 8000b64:	4a27      	ldr	r2, [pc, #156]	; (8000c04 <main+0x14c>)
 8000b66:	2114      	movs	r1, #20
 8000b68:	54d1      	strb	r1, [r2, r3]
	  LEDMatrixBuffer[i*3+1] = ~(1<<i);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	b2d9      	uxtb	r1, r3
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	4613      	mov	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	4413      	add	r3, r2
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	43ca      	mvns	r2, r1
 8000b80:	b2d1      	uxtb	r1, r2
 8000b82:	4a20      	ldr	r2, [pc, #128]	; (8000c04 <main+0x14c>)
 8000b84:	54d1      	strb	r1, [r2, r3]
	  LEDMatrixBuffer[i*3+2] = LEDMatrix[i];
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	3302      	adds	r3, #2
 8000b90:	491d      	ldr	r1, [pc, #116]	; (8000c08 <main+0x150>)
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	440a      	add	r2, r1
 8000b96:	7811      	ldrb	r1, [r2, #0]
 8000b98:	4a1a      	ldr	r2, [pc, #104]	; (8000c04 <main+0x14c>)
 8000b9a:	54d1      	strb	r1, [r2, r3]
  for(int i = 0; i < 4; i++){ //function to drive the LED's
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	ddd9      	ble.n	8000b5c <main+0xa4>
  }

  LEDMatrixStart(LEDMatrix_Address);
 8000ba8:	2048      	movs	r0, #72	; 0x48
 8000baa:	f7ff fe93 	bl	80008d4 <LEDMatrixStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  IWDG->KR = 0xAAAA; //reset the watchdog timer
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <main+0x154>)
 8000bb0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000bb4:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  brightness[0] = encoderValues[3];
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <main+0x158>)
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <main+0x15c>)
 8000bbe:	701a      	strb	r2, [r3, #0]
	  brightness[1] = encoderValues[2];
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <main+0x158>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <main+0x15c>)
 8000bc8:	705a      	strb	r2, [r3, #1]
	  brightness[2] = encoderValues[1];
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <main+0x158>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <main+0x15c>)
 8000bd2:	709a      	strb	r2, [r3, #2]
	  brightness[3] = encoderValues[0];
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <main+0x158>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <main+0x15c>)
 8000bdc:	70da      	strb	r2, [r3, #3]
			  break;

		  }
	  }
	  */
	  LCDWriteChar(0x41, LCD_Address);
 8000bde:	214e      	movs	r1, #78	; 0x4e
 8000be0:	2041      	movs	r0, #65	; 0x41
 8000be2:	f7ff fdb1 	bl	8000748 <LCDWriteChar>
	  DWT_Delay_ms(10);
 8000be6:	200a      	movs	r0, #10
 8000be8:	f7ff fb06 	bl	80001f8 <DWT_Delay_ms>
	  IWDG->KR = 0xAAAA; //reset the watchdog timer
 8000bec:	e7df      	b.n	8000bae <main+0xf6>
 8000bee:	bf00      	nop
 8000bf0:	200001b8 	.word	0x200001b8
 8000bf4:	40005800 	.word	0x40005800
 8000bf8:	40005400 	.word	0x40005400
 8000bfc:	40000400 	.word	0x40000400
 8000c00:	0800a940 	.word	0x0800a940
 8000c04:	20000420 	.word	0x20000420
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	40003000 	.word	0x40003000
 8000c10:	200001c4 	.word	0x200001c4
 8000c14:	20000004 	.word	0x20000004

08000c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b094      	sub	sp, #80	; 0x50
 8000c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c22:	2228      	movs	r2, #40	; 0x28
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f009 fe76 	bl	800a918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000c48:	2309      	movs	r3, #9
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c56:	2301      	movs	r3, #1
 8000c58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c68:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c72:	4618      	mov	r0, r3
 8000c74:	f004 fd72 	bl	800575c <HAL_RCC_OscConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c7e:	f000 fa69 	bl	8001154 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c82:	230f      	movs	r3, #15
 8000c84:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f004 ffdc 	bl	8005c5c <HAL_RCC_ClockConfig>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000caa:	f000 fa53 	bl	8001154 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000cae:	2312      	movs	r3, #18
 8000cb0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cb6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f005 f954 	bl	8005f6c <HAL_RCCEx_PeriphCLKConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000cca:	f000 fa43 	bl	8001154 <Error_Handler>
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3750      	adds	r7, #80	; 0x50
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2101      	movs	r1, #1
 8000cde:	201c      	movs	r0, #28
 8000ce0:	f001 f925 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ce4:	201c      	movs	r0, #28
 8000ce6:	f001 f93e 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2102      	movs	r1, #2
 8000cee:	201d      	movs	r0, #29
 8000cf0:	f001 f91d 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cf4:	201d      	movs	r0, #29
 8000cf6:	f001 f936 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2010      	movs	r0, #16
 8000d00:	f001 f915 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000d04:	2010      	movs	r0, #16
 8000d06:	f001 f92e 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	201f      	movs	r0, #31
 8000d10:	f001 f90d 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d14:	201f      	movs	r0, #31
 8000d16:	f001 f926 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* I2C2_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2021      	movs	r0, #33	; 0x21
 8000d20:	f001 f905 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000d24:	2021      	movs	r0, #33	; 0x21
 8000d26:	f001 f91e 	bl	8001f66 <HAL_NVIC_EnableIRQ>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <MX_ADC1_Init+0x74>)
 8000d42:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <MX_ADC1_Init+0x78>)
 8000d44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_ADC1_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_ADC1_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_ADC1_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_ADC1_Init+0x74>)
 8000d5a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d60:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <MX_ADC1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_ADC1_Init+0x74>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d6c:	480d      	ldr	r0, [pc, #52]	; (8000da4 <MX_ADC1_Init+0x74>)
 8000d6e:	f000 fdfd 	bl	800196c <HAL_ADC_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d78:	f000 f9ec 	bl	8001154 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_ADC1_Init+0x74>)
 8000d8e:	f000 fec5 	bl	8001b1c <HAL_ADC_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d98:	f000 f9dc 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200005b8 	.word	0x200005b8
 8000da8:	40012400 	.word	0x40012400

08000dac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000db2:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <MX_I2C1_Init+0x54>)
 8000db4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000db8:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <MX_I2C1_Init+0x58>)
 8000dba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000dca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <MX_I2C1_Init+0x50>)
 8000dea:	f001 fc2b 	bl	8002644 <HAL_I2C_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000df4:	f000 f9ae 	bl	8001154 <Error_Handler>
  //dude, the code generation is evil... doesn't help you all the way!!! Came a gutsa so many times....


  /* USER CODE END I2C1_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000470 	.word	0x20000470
 8000e00:	40005400 	.word	0x40005400
 8000e04:	00061a80 	.word	0x00061a80

08000e08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_I2C2_Init+0x50>)
 8000e0e:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <MX_I2C2_Init+0x54>)
 8000e10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_I2C2_Init+0x50>)
 8000e14:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <MX_I2C2_Init+0x58>)
 8000e16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_I2C2_Init+0x50>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_I2C2_Init+0x50>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_I2C2_Init+0x50>)
 8000e26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e2a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <MX_I2C2_Init+0x50>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_I2C2_Init+0x50>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <MX_I2C2_Init+0x50>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_I2C2_Init+0x50>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_I2C2_Init+0x50>)
 8000e46:	f001 fbfd 	bl	8002644 <HAL_I2C_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e50:	f000 f980 	bl	8001154 <Error_Handler>
  /* USER CODE BEGIN I2C2_Init 2 */
  //I2C2->CR2 |= (1<<9); //enable event interrupts
  //TODO: this is just temporarily here, might cause issues
  /* USER CODE END I2C2_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200004d0 	.word	0x200004d0
 8000e5c:	40005800 	.word	0x40005800
 8000e60:	00061a80 	.word	0x00061a80

08000e64 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_IWDG_Init+0x2c>)
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <MX_IWDG_Init+0x30>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <MX_IWDG_Init+0x2c>)
 8000e70:	2202      	movs	r2, #2
 8000e72:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <MX_IWDG_Init+0x2c>)
 8000e76:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000e7a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000e7c:	4804      	ldr	r0, [pc, #16]	; (8000e90 <MX_IWDG_Init+0x2c>)
 8000e7e:	f003 f8b1 	bl	8003fe4 <HAL_IWDG_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000e88:	f000 f964 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200004c4 	.word	0x200004c4
 8000e94:	40003000 	.word	0x40003000

08000e98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	463b      	mov	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <MX_TIM2_Init+0xb4>)
 8000eb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000ebc:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <MX_TIM2_Init+0xb4>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec2:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <MX_TIM2_Init+0xb4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 511;
 8000ec8:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <MX_TIM2_Init+0xb4>)
 8000eca:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000ece:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <MX_TIM2_Init+0xb4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed6:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <MX_TIM2_Init+0xb4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000edc:	481b      	ldr	r0, [pc, #108]	; (8000f4c <MX_TIM2_Init+0xb4>)
 8000ede:	f005 f8fb 	bl	80060d8 <HAL_TIM_Base_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ee8:	f000 f934 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4814      	ldr	r0, [pc, #80]	; (8000f4c <MX_TIM2_Init+0xb4>)
 8000efa:	f005 fa44 	bl	8006386 <HAL_TIM_ConfigClockSource>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f04:	f000 f926 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f10:	463b      	mov	r3, r7
 8000f12:	4619      	mov	r1, r3
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <MX_TIM2_Init+0xb4>)
 8000f16:	f005 fc13 	bl	8006740 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f20:	f000 f918 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIM2->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the BAM Interrupt is triggered
 8000f24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f2e:	f023 0302 	bic.w	r3, r3, #2
 8000f32:	6013      	str	r3, [r2, #0]
  TIM2->DIER |= 1; //Update interrupt enable
 8000f34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	60d3      	str	r3, [r2, #12]

  /* USER CODE END TIM2_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200005e8 	.word	0x200005e8

08000f50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f64:	463b      	mov	r3, r7
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <MX_TIM3_Init+0xac>)
 8000f6e:	4a24      	ldr	r2, [pc, #144]	; (8001000 <MX_TIM3_Init+0xb0>)
 8000f70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <MX_TIM3_Init+0xac>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f78:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <MX_TIM3_Init+0xac>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16383;
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <MX_TIM3_Init+0xac>)
 8000f80:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000f84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <MX_TIM3_Init+0xac>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_TIM3_Init+0xac>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f92:	481a      	ldr	r0, [pc, #104]	; (8000ffc <MX_TIM3_Init+0xac>)
 8000f94:	f005 f8a0 	bl	80060d8 <HAL_TIM_Base_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f9e:	f000 f8d9 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	4619      	mov	r1, r3
 8000fae:	4813      	ldr	r0, [pc, #76]	; (8000ffc <MX_TIM3_Init+0xac>)
 8000fb0:	f005 f9e9 	bl	8006386 <HAL_TIM_ConfigClockSource>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000fba:	f000 f8cb 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480c      	ldr	r0, [pc, #48]	; (8000ffc <MX_TIM3_Init+0xac>)
 8000fcc:	f005 fbb8 	bl	8006740 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000fd6:	f000 f8bd 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the Encoder Scan Interrupt is triggered
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_TIM3_Init+0xb0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a08      	ldr	r2, [pc, #32]	; (8001000 <MX_TIM3_Init+0xb0>)
 8000fe0:	f023 0302 	bic.w	r3, r3, #2
 8000fe4:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= 1; //Update interrupt enable
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_TIM3_Init+0xb0>)
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <MX_TIM3_Init+0xb0>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM3_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000524 	.word	0x20000524
 8001000:	40000400 	.word	0x40000400

08001004 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <MX_DMA_Init+0x28>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	4a07      	ldr	r2, [pc, #28]	; (800102c <MX_DMA_Init+0x28>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6153      	str	r3, [r2, #20]
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <MX_DMA_Init+0x28>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]

}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	40021000 	.word	0x40021000

08001030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	4b3f      	ldr	r3, [pc, #252]	; (8001144 <MX_GPIO_Init+0x114>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a3e      	ldr	r2, [pc, #248]	; (8001144 <MX_GPIO_Init+0x114>)
 800104a:	f043 0310 	orr.w	r3, r3, #16
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <MX_GPIO_Init+0x114>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0310 	and.w	r3, r3, #16
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105c:	4b39      	ldr	r3, [pc, #228]	; (8001144 <MX_GPIO_Init+0x114>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a38      	ldr	r2, [pc, #224]	; (8001144 <MX_GPIO_Init+0x114>)
 8001062:	f043 0320 	orr.w	r3, r3, #32
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b36      	ldr	r3, [pc, #216]	; (8001144 <MX_GPIO_Init+0x114>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b33      	ldr	r3, [pc, #204]	; (8001144 <MX_GPIO_Init+0x114>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a32      	ldr	r2, [pc, #200]	; (8001144 <MX_GPIO_Init+0x114>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b30      	ldr	r3, [pc, #192]	; (8001144 <MX_GPIO_Init+0x114>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <MX_GPIO_Init+0x114>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a2c      	ldr	r2, [pc, #176]	; (8001144 <MX_GPIO_Init+0x114>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <MX_GPIO_Init+0x114>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80010aa:	4827      	ldr	r0, [pc, #156]	; (8001148 <MX_GPIO_Init+0x118>)
 80010ac:	f001 fab2 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f248 11c0 	movw	r1, #33216	; 0x81c0
 80010b6:	4825      	ldr	r0, [pc, #148]	; (800114c <MX_GPIO_Init+0x11c>)
 80010b8:	f001 faac 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80010c2:	4823      	ldr	r0, [pc, #140]	; (8001150 <MX_GPIO_Init+0x120>)
 80010c4:	f001 faa6 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010c8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010da:	f107 0310 	add.w	r3, r7, #16
 80010de:	4619      	mov	r1, r3
 80010e0:	4819      	ldr	r0, [pc, #100]	; (8001148 <MX_GPIO_Init+0x118>)
 80010e2:	f001 f93d 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
 80010e6:	f248 13c0 	movw	r3, #33216	; 0x81c0
 80010ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	4619      	mov	r1, r3
 80010fe:	4813      	ldr	r0, [pc, #76]	; (800114c <MX_GPIO_Init+0x11c>)
 8001100:	f001 f92e 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001104:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001108:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	4619      	mov	r1, r3
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <MX_GPIO_Init+0x120>)
 800111e:	f001 f91f 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001122:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001126:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	4619      	mov	r1, r3
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_GPIO_Init+0x11c>)
 8001138:	f001 f912 	bl	8002360 <HAL_GPIO_Init>

}
 800113c:	bf00      	nop
 800113e:	3720      	adds	r7, #32
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40021000 	.word	0x40021000
 8001148:	40011000 	.word	0x40011000
 800114c:	40010800 	.word	0x40010800
 8001150:	40010c00 	.word	0x40010c00

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115a:	e7fe      	b.n	800115a <Error_Handler+0x6>

0800115c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <HAL_MspInit+0x5c>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <HAL_MspInit+0x5c>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6193      	str	r3, [r2, #24]
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_MspInit+0x5c>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_MspInit+0x5c>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <HAL_MspInit+0x5c>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	61d3      	str	r3, [r2, #28]
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <HAL_MspInit+0x5c>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_MspInit+0x60>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_MspInit+0x60>)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010000 	.word	0x40010000

080011c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a14      	ldr	r2, [pc, #80]	; (800122c <HAL_ADC_MspInit+0x6c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d121      	bne.n	8001224 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <HAL_ADC_MspInit+0x70>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4a12      	ldr	r2, [pc, #72]	; (8001230 <HAL_ADC_MspInit+0x70>)
 80011e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ea:	6193      	str	r3, [r2, #24]
 80011ec:	4b10      	ldr	r3, [pc, #64]	; (8001230 <HAL_ADC_MspInit+0x70>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <HAL_ADC_MspInit+0x70>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a0c      	ldr	r2, [pc, #48]	; (8001230 <HAL_ADC_MspInit+0x70>)
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_ADC_MspInit+0x70>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001210:	230f      	movs	r3, #15
 8001212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001214:	2303      	movs	r3, #3
 8001216:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <HAL_ADC_MspInit+0x74>)
 8001220:	f001 f89e 	bl	8002360 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001224:	bf00      	nop
 8001226:	3720      	adds	r7, #32
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40012400 	.word	0x40012400
 8001230:	40021000 	.word	0x40021000
 8001234:	40010800 	.word	0x40010800

08001238 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	; 0x30
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a58      	ldr	r2, [pc, #352]	; (80013b4 <HAL_I2C_MspInit+0x17c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d159      	bne.n	800130c <HAL_I2C_MspInit+0xd4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001258:	4b57      	ldr	r3, [pc, #348]	; (80013b8 <HAL_I2C_MspInit+0x180>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a56      	ldr	r2, [pc, #344]	; (80013b8 <HAL_I2C_MspInit+0x180>)
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b54      	ldr	r3, [pc, #336]	; (80013b8 <HAL_I2C_MspInit+0x180>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	61bb      	str	r3, [r7, #24]
 800126e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001270:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001276:	2312      	movs	r3, #18
 8001278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	484d      	ldr	r0, [pc, #308]	; (80013bc <HAL_I2C_MspInit+0x184>)
 8001286:	f001 f86b 	bl	8002360 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800128a:	4b4d      	ldr	r3, [pc, #308]	; (80013c0 <HAL_I2C_MspInit+0x188>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001292:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012a0:	4a47      	ldr	r2, [pc, #284]	; (80013c0 <HAL_I2C_MspInit+0x188>)
 80012a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012a6:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <HAL_I2C_MspInit+0x180>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4a43      	ldr	r2, [pc, #268]	; (80013b8 <HAL_I2C_MspInit+0x180>)
 80012ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b0:	61d3      	str	r3, [r2, #28]
 80012b2:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <HAL_I2C_MspInit+0x180>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80012be:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <HAL_I2C_MspInit+0x18c>)
 80012c0:	4a41      	ldr	r2, [pc, #260]	; (80013c8 <HAL_I2C_MspInit+0x190>)
 80012c2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012c4:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <HAL_I2C_MspInit+0x18c>)
 80012c6:	2210      	movs	r2, #16
 80012c8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ca:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <HAL_I2C_MspInit+0x18c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012d0:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <HAL_I2C_MspInit+0x18c>)
 80012d2:	2280      	movs	r2, #128	; 0x80
 80012d4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012d6:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <HAL_I2C_MspInit+0x18c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012dc:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <HAL_I2C_MspInit+0x18c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80012e2:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <HAL_I2C_MspInit+0x18c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012e8:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <HAL_I2C_MspInit+0x18c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80012ee:	4835      	ldr	r0, [pc, #212]	; (80013c4 <HAL_I2C_MspInit+0x18c>)
 80012f0:	f000 fe54 	bl	8001f9c <HAL_DMA_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 80012fa:	f7ff ff2b 	bl	8001154 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a30      	ldr	r2, [pc, #192]	; (80013c4 <HAL_I2C_MspInit+0x18c>)
 8001302:	635a      	str	r2, [r3, #52]	; 0x34
 8001304:	4a2f      	ldr	r2, [pc, #188]	; (80013c4 <HAL_I2C_MspInit+0x18c>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800130a:	e04f      	b.n	80013ac <HAL_I2C_MspInit+0x174>
  else if(hi2c->Instance==I2C2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a2e      	ldr	r2, [pc, #184]	; (80013cc <HAL_I2C_MspInit+0x194>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d14a      	bne.n	80013ac <HAL_I2C_MspInit+0x174>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <HAL_I2C_MspInit+0x180>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <HAL_I2C_MspInit+0x180>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	6193      	str	r3, [r2, #24]
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <HAL_I2C_MspInit+0x180>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800132e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001334:	2312      	movs	r3, #18
 8001336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	481e      	ldr	r0, [pc, #120]	; (80013bc <HAL_I2C_MspInit+0x184>)
 8001344:	f001 f80c 	bl	8002360 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_I2C_MspInit+0x180>)
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	4a1a      	ldr	r2, [pc, #104]	; (80013b8 <HAL_I2C_MspInit+0x180>)
 800134e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001352:	61d3      	str	r3, [r2, #28]
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_I2C_MspInit+0x180>)
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_I2C_MspInit+0x198>)
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <HAL_I2C_MspInit+0x19c>)
 8001364:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_I2C_MspInit+0x198>)
 8001368:	2210      	movs	r2, #16
 800136a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_I2C_MspInit+0x198>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <HAL_I2C_MspInit+0x198>)
 8001374:	2280      	movs	r2, #128	; 0x80
 8001376:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_I2C_MspInit+0x198>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_I2C_MspInit+0x198>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_I2C_MspInit+0x198>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_I2C_MspInit+0x198>)
 800138c:	2200      	movs	r2, #0
 800138e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001390:	480f      	ldr	r0, [pc, #60]	; (80013d0 <HAL_I2C_MspInit+0x198>)
 8001392:	f000 fe03 	bl	8001f9c <HAL_DMA_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_I2C_MspInit+0x168>
      Error_Handler();
 800139c:	f7ff feda 	bl	8001154 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <HAL_I2C_MspInit+0x198>)
 80013a4:	635a      	str	r2, [r3, #52]	; 0x34
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <HAL_I2C_MspInit+0x198>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6253      	str	r3, [r2, #36]	; 0x24
}
 80013ac:	bf00      	nop
 80013ae:	3730      	adds	r7, #48	; 0x30
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40005400 	.word	0x40005400
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010c00 	.word	0x40010c00
 80013c0:	40010000 	.word	0x40010000
 80013c4:	2000042c 	.word	0x2000042c
 80013c8:	4002006c 	.word	0x4002006c
 80013cc:	40005800 	.word	0x40005800
 80013d0:	2000056c 	.word	0x2000056c
 80013d4:	40020044 	.word	0x40020044

080013d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e8:	d10c      	bne.n	8001404 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_TIM_Base_MspInit+0x58>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a10      	ldr	r2, [pc, #64]	; (8001430 <HAL_TIM_Base_MspInit+0x58>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	61d3      	str	r3, [r2, #28]
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_TIM_Base_MspInit+0x58>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001402:	e010      	b.n	8001426 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_TIM_Base_MspInit+0x5c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d10b      	bne.n	8001426 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_TIM_Base_MspInit+0x58>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_TIM_Base_MspInit+0x58>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_TIM_Base_MspInit+0x58>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	40021000 	.word	0x40021000
 8001434:	40000400 	.word	0x40000400

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800143c:	e7fe      	b.n	800143c <NMI_Handler+0x4>

0800143e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <HardFault_Handler+0x4>

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <MemManage_Handler+0x4>

0800144a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <BusFault_Handler+0x4>

08001450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <UsageFault_Handler+0x4>

08001456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800147e:	f000 fa59 	bl	8001934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	//GPIOA->BRR = 1<<6;



  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <DMA1_Channel6_IRQHandler+0x10>)
 800148e:	f000 fe55 	bl	800213c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  //GPIOA->BSRR = 1<<6;
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2000042c 	.word	0x2000042c

0800149c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80014a2:	f002 ff09 	bl	80042b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200012c8 	.word	0x200012c8

080014b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	GPIOA->BSRR = 1<<6;
 80014b4:	4b49      	ldr	r3, [pc, #292]	; (80015dc <TIM2_IRQHandler+0x12c>)
 80014b6:	2240      	movs	r2, #64	; 0x40
 80014b8:	611a      	str	r2, [r3, #16]
	if(BAMIndex == 0){
 80014ba:	4b49      	ldr	r3, [pc, #292]	; (80015e0 <TIM2_IRQHandler+0x130>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <TIM2_IRQHandler+0x1a>
		blocked = 1; //block to protect the time sensitive LSB's, otherwise it gets pretty flicker-ry
 80014c4:	4b47      	ldr	r3, [pc, #284]	; (80015e4 <TIM2_IRQHandler+0x134>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]


	}

	if(brightness[0] & (1 << BAMIndex))	GPIOB->BSRR = (1<<12);
 80014ca:	4b47      	ldr	r3, [pc, #284]	; (80015e8 <TIM2_IRQHandler+0x138>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b43      	ldr	r3, [pc, #268]	; (80015e0 <TIM2_IRQHandler+0x130>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	fa42 f303 	asr.w	r3, r2, r3
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d004      	beq.n	80014ee <TIM2_IRQHandler+0x3e>
 80014e4:	4b41      	ldr	r3, [pc, #260]	; (80015ec <TIM2_IRQHandler+0x13c>)
 80014e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ea:	611a      	str	r2, [r3, #16]
 80014ec:	e003      	b.n	80014f6 <TIM2_IRQHandler+0x46>
	else GPIOB->BRR = (1<<12);
 80014ee:	4b3f      	ldr	r3, [pc, #252]	; (80015ec <TIM2_IRQHandler+0x13c>)
 80014f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f4:	615a      	str	r2, [r3, #20]
	if(brightness[1] & (1 << BAMIndex))	GPIOB->BSRR = (1<<13);
 80014f6:	4b3c      	ldr	r3, [pc, #240]	; (80015e8 <TIM2_IRQHandler+0x138>)
 80014f8:	785b      	ldrb	r3, [r3, #1]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <TIM2_IRQHandler+0x130>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	fa42 f303 	asr.w	r3, r2, r3
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d004      	beq.n	800151a <TIM2_IRQHandler+0x6a>
 8001510:	4b36      	ldr	r3, [pc, #216]	; (80015ec <TIM2_IRQHandler+0x13c>)
 8001512:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001516:	611a      	str	r2, [r3, #16]
 8001518:	e003      	b.n	8001522 <TIM2_IRQHandler+0x72>
	else GPIOB->BRR = (1<<13);
 800151a:	4b34      	ldr	r3, [pc, #208]	; (80015ec <TIM2_IRQHandler+0x13c>)
 800151c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001520:	615a      	str	r2, [r3, #20]
	if(brightness[2] & (1 << BAMIndex))	GPIOB->BSRR = (1<<14);
 8001522:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <TIM2_IRQHandler+0x138>)
 8001524:	789b      	ldrb	r3, [r3, #2]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <TIM2_IRQHandler+0x130>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	fa42 f303 	asr.w	r3, r2, r3
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d004      	beq.n	8001546 <TIM2_IRQHandler+0x96>
 800153c:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <TIM2_IRQHandler+0x13c>)
 800153e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001542:	611a      	str	r2, [r3, #16]
 8001544:	e003      	b.n	800154e <TIM2_IRQHandler+0x9e>
	else GPIOB->BRR = (1<<14);
 8001546:	4b29      	ldr	r3, [pc, #164]	; (80015ec <TIM2_IRQHandler+0x13c>)
 8001548:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800154c:	615a      	str	r2, [r3, #20]
	if(brightness[3] & (1 << BAMIndex))	GPIOB->BSRR = (1<<15);
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <TIM2_IRQHandler+0x138>)
 8001550:	78db      	ldrb	r3, [r3, #3]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <TIM2_IRQHandler+0x130>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	fa42 f303 	asr.w	r3, r2, r3
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b00      	cmp	r3, #0
 8001566:	d004      	beq.n	8001572 <TIM2_IRQHandler+0xc2>
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <TIM2_IRQHandler+0x13c>)
 800156a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800156e:	611a      	str	r2, [r3, #16]
 8001570:	e003      	b.n	800157a <TIM2_IRQHandler+0xca>
	else GPIOB->BRR = (1<<15);
 8001572:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <TIM2_IRQHandler+0x13c>)
 8001574:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001578:	615a      	str	r2, [r3, #20]
	if(brightness[1] & (1 << BAMIndex))	GPIOB->BSRR = (1<<13);
	if(brightness[2] & (1 << BAMIndex))	GPIOB->BSRR = (1<<14);
	if(brightness[3] & (1 << BAMIndex))	GPIOB->BSRR = (1<<15);
	*/

	GPIOA->BRR = 1<<6;
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <TIM2_IRQHandler+0x12c>)
 800157c:	2240      	movs	r2, #64	; 0x40
 800157e:	615a      	str	r2, [r3, #20]


*/

	//FIXME this might potentially cause issues, as it blocks for half of the time
	if(BAMIndex == 5){
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <TIM2_IRQHandler+0x130>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b05      	cmp	r3, #5
 8001588:	d102      	bne.n	8001590 <TIM2_IRQHandler+0xe0>
		blocked = 0; //Time sensitive LSB's are done, unblock, value of 3 or less gives visible flicker
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <TIM2_IRQHandler+0x134>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]

	}

	if(BAMIndex == 7){ //We've passed one BAM cycle
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <TIM2_IRQHandler+0x130>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b07      	cmp	r3, #7
 8001598:	d10c      	bne.n	80015b4 <TIM2_IRQHandler+0x104>


		BAMIndex = 0;
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <TIM2_IRQHandler+0x130>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = 1;
 80015a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a4:	2201      	movs	r2, #1
 80015a6:	629a      	str	r2, [r3, #40]	; 0x28
		LEDMatrixNextRow(LEDMatrix_Address);
 80015a8:	2048      	movs	r0, #72	; 0x48
 80015aa:	f7ff f9e7 	bl	800097c <LEDMatrixNextRow>
		if(updateLCD){
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <TIM2_IRQHandler+0x140>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	e00d      	b.n	80015d0 <TIM2_IRQHandler+0x120>



	}
	else{
		BAMIndex++;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <TIM2_IRQHandler+0x130>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <TIM2_IRQHandler+0x130>)
 80015c0:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = (volatile)(TIM2->PSC << 1); //set next write to occupy twice the time of this current write.
 80015c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	6293      	str	r3, [r2, #40]	; 0x28
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015d0:	4808      	ldr	r0, [pc, #32]	; (80015f4 <TIM2_IRQHandler+0x144>)
 80015d2:	f004 fdd0 	bl	8006176 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40010800 	.word	0x40010800
 80015e0:	200001b7 	.word	0x200001b7
 80015e4:	200001b8 	.word	0x200001b8
 80015e8:	20000004 	.word	0x20000004
 80015ec:	40010c00 	.word	0x40010c00
 80015f0:	200001b2 	.word	0x200001b2
 80015f4:	200005e8 	.word	0x200005e8

080015f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	//GPIOA->BSRR = 1<<6;
	uint8_t currentReadoff = ((((GPIOA->IDR)>>9) & 1) << 1) | (((GPIOA->IDR)>>10) & 1); //read current encoder state
 80015fe:	4b4b      	ldr	r3, [pc, #300]	; (800172c <TIM3_IRQHandler+0x134>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	0a5b      	lsrs	r3, r3, #9
 8001604:	b2db      	uxtb	r3, r3
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	b2db      	uxtb	r3, r3
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	b2da      	uxtb	r2, r3
 8001610:	4b46      	ldr	r3, [pc, #280]	; (800172c <TIM3_IRQHandler+0x134>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	0a9b      	lsrs	r3, r3, #10
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	b2db      	uxtb	r3, r3
 800161e:	4313      	orrs	r3, r2
 8001620:	71fb      	strb	r3, [r7, #7]
	uint8_t index = (lastEncoder[currentEncoder]<<2) | currentReadoff;
 8001622:	4b43      	ldr	r3, [pc, #268]	; (8001730 <TIM3_IRQHandler+0x138>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	4b42      	ldr	r3, [pc, #264]	; (8001734 <TIM3_IRQHandler+0x13c>)
 800162c:	5c9b      	ldrb	r3, [r3, r2]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	b25a      	sxtb	r2, r3
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	4313      	orrs	r3, r2
 800163a:	b25b      	sxtb	r3, r3
 800163c:	71bb      	strb	r3, [r7, #6]
	encoderValues[currentEncoder] += encoderLUT[index];
 800163e:	79bb      	ldrb	r3, [r7, #6]
 8001640:	4a3d      	ldr	r2, [pc, #244]	; (8001738 <TIM3_IRQHandler+0x140>)
 8001642:	5cd3      	ldrb	r3, [r2, r3]
 8001644:	b259      	sxtb	r1, r3
 8001646:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <TIM3_IRQHandler+0x138>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4610      	mov	r0, r2
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <TIM3_IRQHandler+0x144>)
 8001650:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001654:	4608      	mov	r0, r1
 8001656:	4611      	mov	r1, r2
 8001658:	4403      	add	r3, r0
 800165a:	4a38      	ldr	r2, [pc, #224]	; (800173c <TIM3_IRQHandler+0x144>)
 800165c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	encoderChanged[currentEncoder] = encoderLUT[index];
 8001660:	79bb      	ldrb	r3, [r7, #6]
 8001662:	4a35      	ldr	r2, [pc, #212]	; (8001738 <TIM3_IRQHandler+0x140>)
 8001664:	5cd3      	ldrb	r3, [r2, r3]
 8001666:	b259      	sxtb	r1, r3
 8001668:	4b31      	ldr	r3, [pc, #196]	; (8001730 <TIM3_IRQHandler+0x138>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	461a      	mov	r2, r3
 8001670:	b2c9      	uxtb	r1, r1
 8001672:	4b33      	ldr	r3, [pc, #204]	; (8001740 <TIM3_IRQHandler+0x148>)
 8001674:	5499      	strb	r1, [r3, r2]

	//constrain encoderValues
	if(encoderValues[currentEncoder] > 255) encoderValues[currentEncoder] = 255;
 8001676:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <TIM3_IRQHandler+0x138>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	4b2f      	ldr	r3, [pc, #188]	; (800173c <TIM3_IRQHandler+0x144>)
 8001680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001684:	2bff      	cmp	r3, #255	; 0xff
 8001686:	dd07      	ble.n	8001698 <TIM3_IRQHandler+0xa0>
 8001688:	4b29      	ldr	r3, [pc, #164]	; (8001730 <TIM3_IRQHandler+0x138>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	4619      	mov	r1, r3
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <TIM3_IRQHandler+0x144>)
 8001692:	22ff      	movs	r2, #255	; 0xff
 8001694:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	if(encoderValues[currentEncoder] < 0) encoderValues[currentEncoder] = 0;
 8001698:	4b25      	ldr	r3, [pc, #148]	; (8001730 <TIM3_IRQHandler+0x138>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	4b26      	ldr	r3, [pc, #152]	; (800173c <TIM3_IRQHandler+0x144>)
 80016a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	da07      	bge.n	80016ba <TIM3_IRQHandler+0xc2>
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <TIM3_IRQHandler+0x138>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4619      	mov	r1, r3
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <TIM3_IRQHandler+0x144>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	lastEncoder[currentEncoder] = currentReadoff;
 80016ba:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <TIM3_IRQHandler+0x138>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	4619      	mov	r1, r3
 80016c2:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <TIM3_IRQHandler+0x13c>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	5453      	strb	r3, [r2, r1]
	//uint8_t buffer[256];
	//sprintf(buffer, "currentReadoff %d index %d encoderValue %d\r\n", currentReadoff, index, encoderValues[0]);
	//CDC_Transmit_FS(buffer, sizeof(buffer));
	//}

	if(currentEncoder == 4) currentEncoder = 0;
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <TIM3_IRQHandler+0x138>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d103      	bne.n	80016da <TIM3_IRQHandler+0xe2>
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <TIM3_IRQHandler+0x138>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
 80016d8:	e006      	b.n	80016e8 <TIM3_IRQHandler+0xf0>
	else currentEncoder++;
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <TIM3_IRQHandler+0x138>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	3301      	adds	r3, #1
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <TIM3_IRQHandler+0x138>)
 80016e6:	701a      	strb	r2, [r3, #0]

	//select the nth encoder here to allow the mux time to settle
	GPIOC->BRR = (3<<13); //clear GPIO Pins
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <TIM3_IRQHandler+0x14c>)
 80016ea:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80016ee:	615a      	str	r2, [r3, #20]
	GPIOC->BSRR = ((currentEncoder&3)<<13);
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <TIM3_IRQHandler+0x138>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	035b      	lsls	r3, r3, #13
 80016f8:	4a12      	ldr	r2, [pc, #72]	; (8001744 <TIM3_IRQHandler+0x14c>)
 80016fa:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80016fe:	6113      	str	r3, [r2, #16]
	GPIOA->BRR = (1<<15);
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <TIM3_IRQHandler+0x134>)
 8001702:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001706:	615a      	str	r2, [r3, #20]
	if(currentEncoder&4) GPIOA->BSRR = (1<<15); //BLOODY SOLDER DAG!!! Shorted out the pins giving the result in DS14
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <TIM3_IRQHandler+0x138>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <TIM3_IRQHandler+0x126>
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <TIM3_IRQHandler+0x134>)
 8001718:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800171c:	611a      	str	r2, [r3, #16]

	//GPIOA->BRR = 1<<6;
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800171e:	480a      	ldr	r0, [pc, #40]	; (8001748 <TIM3_IRQHandler+0x150>)
 8001720:	f004 fd29 	bl	8006176 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40010800 	.word	0x40010800
 8001730:	200001b9 	.word	0x200001b9
 8001734:	200001bc 	.word	0x200001bc
 8001738:	20000008 	.word	0x20000008
 800173c:	200001c4 	.word	0x200001c4
 8001740:	200005b0 	.word	0x200005b0
 8001744:	40011000 	.word	0x40011000
 8001748:	20000524 	.word	0x20000524

0800174c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
	//note: time to transfer 4 packets at this speed is about 100 us



	//GPIOA->BSRR = 1<<7;
	if(I2C1->SR1 & (1<<2)){ //BTF is set
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <I2C1_EV_IRQHandler+0x38>)
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00e      	beq.n	800177a <I2C1_EV_IRQHandler+0x2e>

		I2C1->CR2 &= ~(1<<11); //disable I2C1 DMA requesting
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <I2C1_EV_IRQHandler+0x38>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	4a08      	ldr	r2, [pc, #32]	; (8001784 <I2C1_EV_IRQHandler+0x38>)
 8001762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001766:	6053      	str	r3, [r2, #4]
		I2C1->CR1 |= (1<<9); //send stop condition
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <I2C1_EV_IRQHandler+0x38>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a05      	ldr	r2, [pc, #20]	; (8001784 <I2C1_EV_IRQHandler+0x38>)
 800176e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001772:	6013      	str	r3, [r2, #0]
		blocked = 0; //give clearance for other blocking operations
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <I2C1_EV_IRQHandler+0x3c>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
			}
		}*/
	}

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800177a:	4804      	ldr	r0, [pc, #16]	; (800178c <I2C1_EV_IRQHandler+0x40>)
 800177c:	f001 f89a 	bl	80028b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */
  	//GPIOA->BRR = 1<<7;
  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40005400 	.word	0x40005400
 8001788:	200001b8 	.word	0x200001b8
 800178c:	20000470 	.word	0x20000470

08001790 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
	if(I2C2->SR1 & (1<<2)){ //BTF is set
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <I2C2_EV_IRQHandler+0xa4>)
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d043      	beq.n	8001828 <I2C2_EV_IRQHandler+0x98>

		//I2C2->CR2 &= ~(1<<11); //disable I2C2 DMA requesting
		I2C2->CR1 |= (1<<9); //send stop condition
 80017a0:	4b24      	ldr	r3, [pc, #144]	; (8001834 <I2C2_EV_IRQHandler+0xa4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a23      	ldr	r2, [pc, #140]	; (8001834 <I2C2_EV_IRQHandler+0xa4>)
 80017a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017aa:	6013      	str	r3, [r2, #0]



		if(cycleEN){
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <I2C2_EV_IRQHandler+0xa8>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d013      	beq.n	80017de <I2C2_EV_IRQHandler+0x4e>

			GPIOA->BRR = 1<<8;
 80017b6:	4b21      	ldr	r3, [pc, #132]	; (800183c <I2C2_EV_IRQHandler+0xac>)
 80017b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017bc:	615a      	str	r2, [r3, #20]
			GPIOA->BSRR = 1<<8; //this pulse is 100ns, aka too short, datasheet specifies min of 230 ns
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <I2C2_EV_IRQHandler+0xac>)
 80017c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c4:	611a      	str	r2, [r3, #16]
			GPIOA->BSRR = 1<<8;
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <I2C2_EV_IRQHandler+0xac>)
 80017c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017cc:	611a      	str	r2, [r3, #16]
			GPIOA->BSRR = 1<<8;
 80017ce:	4b1b      	ldr	r3, [pc, #108]	; (800183c <I2C2_EV_IRQHandler+0xac>)
 80017d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d4:	611a      	str	r2, [r3, #16]
			GPIOA->BRR = 1<<8;
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <I2C2_EV_IRQHandler+0xac>)
 80017d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017dc:	615a      	str	r2, [r3, #20]


		}

		if(currentLCDByte == 0){
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <I2C2_EV_IRQHandler+0xb0>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00f      	beq.n	8001808 <I2C2_EV_IRQHandler+0x78>

			// we're done with the command byte, set RS
		}
		else if(currentLCDByte == 8){
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <I2C2_EV_IRQHandler+0xb0>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d103      	bne.n	80017fa <I2C2_EV_IRQHandler+0x6a>

			//we're done with all characters, disable cycleEN
			cycleEN = 0;
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <I2C2_EV_IRQHandler+0xa8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
 80017f8:	e006      	b.n	8001808 <I2C2_EV_IRQHandler+0x78>

		}
		else{

			currentLCDByte++;
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <I2C2_EV_IRQHandler+0xb0>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	3301      	adds	r3, #1
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <I2C2_EV_IRQHandler+0xb0>)
 8001806:	701a      	strb	r2, [r3, #0]

		}

		//load in next byte into DR here
		I2C2->DR = LCDBuffer[currentLCDByte+currentLCDSection * 9];
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <I2C2_EV_IRQHandler+0xb0>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	4619      	mov	r1, r3
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <I2C2_EV_IRQHandler+0xb4>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	4613      	mov	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4413      	add	r3, r2
 800181e:	440b      	add	r3, r1
 8001820:	4a09      	ldr	r2, [pc, #36]	; (8001848 <I2C2_EV_IRQHandler+0xb8>)
 8001822:	5cd2      	ldrb	r2, [r2, r3]
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <I2C2_EV_IRQHandler+0xa4>)
 8001826:	611a      	str	r2, [r3, #16]
	}

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001828:	4808      	ldr	r0, [pc, #32]	; (800184c <I2C2_EV_IRQHandler+0xbc>)
 800182a:	f001 f843 	bl	80028b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40005800 	.word	0x40005800
 8001838:	200001b4 	.word	0x200001b4
 800183c:	40010800 	.word	0x40010800
 8001840:	200001b5 	.word	0x200001b5
 8001844:	200001b3 	.word	0x200001b3
 8001848:	200003fc 	.word	0x200003fc
 800184c:	200004d0 	.word	0x200004d0

08001850 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <Reset_Handler>:
 800185c:	2100      	movs	r1, #0
 800185e:	e003      	b.n	8001868 <LoopCopyDataInit>

08001860 <CopyDataInit>:
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <LoopFillZerobss+0x14>)
 8001862:	585b      	ldr	r3, [r3, r1]
 8001864:	5043      	str	r3, [r0, r1]
 8001866:	3104      	adds	r1, #4

08001868 <LoopCopyDataInit>:
 8001868:	480a      	ldr	r0, [pc, #40]	; (8001894 <LoopFillZerobss+0x18>)
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <LoopFillZerobss+0x1c>)
 800186c:	1842      	adds	r2, r0, r1
 800186e:	429a      	cmp	r2, r3
 8001870:	d3f6      	bcc.n	8001860 <CopyDataInit>
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <LoopFillZerobss+0x20>)
 8001874:	e002      	b.n	800187c <LoopFillZerobss>

08001876 <FillZerobss>:
 8001876:	2300      	movs	r3, #0
 8001878:	f842 3b04 	str.w	r3, [r2], #4

0800187c <LoopFillZerobss>:
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <LoopFillZerobss+0x24>)
 800187e:	429a      	cmp	r2, r3
 8001880:	d3f9      	bcc.n	8001876 <FillZerobss>
 8001882:	f7ff ffe5 	bl	8001850 <SystemInit>
 8001886:	f009 f823 	bl	800a8d0 <__libc_init_array>
 800188a:	f7ff f915 	bl	8000ab8 <main>
 800188e:	4770      	bx	lr
 8001890:	0800a9c4 	.word	0x0800a9c4
 8001894:	20000000 	.word	0x20000000
 8001898:	20000194 	.word	0x20000194
 800189c:	20000194 	.word	0x20000194
 80018a0:	200015b4 	.word	0x200015b4

080018a4 <ADC1_2_IRQHandler>:
 80018a4:	e7fe      	b.n	80018a4 <ADC1_2_IRQHandler>
	...

080018a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_Init+0x28>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_Init+0x28>)
 80018b2:	f043 0310 	orr.w	r3, r3, #16
 80018b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 fb2d 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018be:	2000      	movs	r0, #0
 80018c0:	f000 f808 	bl	80018d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c4:	f7ff fc4a 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40022000 	.word	0x40022000

080018d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_InitTick+0x54>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x58>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fb45 	bl	8001f82 <HAL_SYSTICK_Config>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00e      	b.n	8001920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d80a      	bhi.n	800191e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f000 fb0d 	bl	8001f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001914:	4a06      	ldr	r2, [pc, #24]	; (8001930 <HAL_InitTick+0x5c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000018 	.word	0x20000018
 800192c:	20000020 	.word	0x20000020
 8001930:	2000001c 	.word	0x2000001c

08001934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_IncTick+0x1c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_IncTick+0x20>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4a03      	ldr	r2, [pc, #12]	; (8001954 <HAL_IncTick+0x20>)
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	20000020 	.word	0x20000020
 8001954:	20000630 	.word	0x20000630

08001958 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return uwTick;
 800195c:	4b02      	ldr	r3, [pc, #8]	; (8001968 <HAL_GetTick+0x10>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	20000630 	.word	0x20000630

0800196c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0be      	b.n	8001b0c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	2b00      	cmp	r3, #0
 800199a:	d109      	bne.n	80019b0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff fc08 	bl	80011c0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f9ab 	bl	8001d0c <ADC_ConversionStop_Disable>
 80019b6:	4603      	mov	r3, r0
 80019b8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f040 8099 	bne.w	8001afa <HAL_ADC_Init+0x18e>
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f040 8095 	bne.w	8001afa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019d8:	f023 0302 	bic.w	r3, r3, #2
 80019dc:	f043 0202 	orr.w	r2, r3, #2
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019ec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	7b1b      	ldrb	r3, [r3, #12]
 80019f2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019f4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a04:	d003      	beq.n	8001a0e <HAL_ADC_Init+0xa2>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d102      	bne.n	8001a14 <HAL_ADC_Init+0xa8>
 8001a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a12:	e000      	b.n	8001a16 <HAL_ADC_Init+0xaa>
 8001a14:	2300      	movs	r3, #0
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7d1b      	ldrb	r3, [r3, #20]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d119      	bne.n	8001a58 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7b1b      	ldrb	r3, [r3, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d109      	bne.n	8001a40 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	035a      	lsls	r2, r3, #13
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	e00b      	b.n	8001a58 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	f043 0220 	orr.w	r2, r3, #32
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	f043 0201 	orr.w	r2, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <HAL_ADC_Init+0x1a8>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	68b9      	ldr	r1, [r7, #8]
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a88:	d003      	beq.n	8001a92 <HAL_ADC_Init+0x126>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d104      	bne.n	8001a9c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	051b      	lsls	r3, r3, #20
 8001a9a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_ADC_Init+0x1ac>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d10b      	bne.n	8001ad8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	f023 0303 	bic.w	r3, r3, #3
 8001ace:	f043 0201 	orr.w	r2, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ad6:	e018      	b.n	8001b0a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	f023 0312 	bic.w	r3, r3, #18
 8001ae0:	f043 0210 	orr.w	r2, r3, #16
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	f043 0201 	orr.w	r2, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001af8:	e007      	b.n	8001b0a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	f043 0210 	orr.w	r2, r3, #16
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	ffe1f7fd 	.word	0xffe1f7fd
 8001b18:	ff1f0efe 	.word	0xff1f0efe

08001b1c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x20>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e0dc      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x1da>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b06      	cmp	r3, #6
 8001b4a:	d81c      	bhi.n	8001b86 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3b05      	subs	r3, #5
 8001b5e:	221f      	movs	r2, #31
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	4019      	ands	r1, r3
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	3b05      	subs	r3, #5
 8001b78:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	635a      	str	r2, [r3, #52]	; 0x34
 8001b84:	e03c      	b.n	8001c00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d81c      	bhi.n	8001bc8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3b23      	subs	r3, #35	; 0x23
 8001ba0:	221f      	movs	r2, #31
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	4019      	ands	r1, r3
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3b23      	subs	r3, #35	; 0x23
 8001bba:	fa00 f203 	lsl.w	r2, r0, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc6:	e01b      	b.n	8001c00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3b41      	subs	r3, #65	; 0x41
 8001bda:	221f      	movs	r2, #31
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	4019      	ands	r1, r3
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3b41      	subs	r3, #65	; 0x41
 8001bf4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b09      	cmp	r3, #9
 8001c06:	d91c      	bls.n	8001c42 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68d9      	ldr	r1, [r3, #12]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	3b1e      	subs	r3, #30
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	4019      	ands	r1, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	6898      	ldr	r0, [r3, #8]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	3b1e      	subs	r3, #30
 8001c34:	fa00 f203 	lsl.w	r2, r0, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	e019      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6919      	ldr	r1, [r3, #16]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4413      	add	r3, r2
 8001c52:	2207      	movs	r2, #7
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	4019      	ands	r1, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	6898      	ldr	r0, [r3, #8]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d003      	beq.n	8001c86 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c82:	2b11      	cmp	r3, #17
 8001c84:	d132      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d125      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d126      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001cac:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b10      	cmp	r3, #16
 8001cb4:	d11a      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <HAL_ADC_ConfigChannel+0x1e8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a13      	ldr	r2, [pc, #76]	; (8001d08 <HAL_ADC_ConfigChannel+0x1ec>)
 8001cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc0:	0c9a      	lsrs	r2, r3, #18
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ccc:	e002      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f9      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x1b2>
 8001cda:	e007      	b.n	8001cec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce0:	f043 0220 	orr.w	r2, r3, #32
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	40012400 	.word	0x40012400
 8001d04:	20000018 	.word	0x20000018
 8001d08:	431bde83 	.word	0x431bde83

08001d0c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d127      	bne.n	8001d76 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0201 	bic.w	r2, r2, #1
 8001d34:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d36:	f7ff fe0f 	bl	8001958 <HAL_GetTick>
 8001d3a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d3c:	e014      	b.n	8001d68 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d3e:	f7ff fe0b 	bl	8001958 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d90d      	bls.n	8001d68 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d50:	f043 0210 	orr.w	r2, r3, #16
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	f043 0201 	orr.w	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e007      	b.n	8001d78 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d0e3      	beq.n	8001d3e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <__NVIC_SetPriorityGrouping>:
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db2:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	60d3      	str	r3, [r2, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	f003 0307 	and.w	r3, r3, #7
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	db0b      	blt.n	8001e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	f003 021f 	and.w	r2, r3, #31
 8001dfc:	4906      	ldr	r1, [pc, #24]	; (8001e18 <__NVIC_EnableIRQ+0x34>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	2001      	movs	r0, #1
 8001e06:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
         );
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee4:	d301      	bcc.n	8001eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00f      	b.n	8001f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <SysTick_Config+0x40>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef8:	f7ff ff90 	bl	8001e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <SysTick_Config+0x40>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f02:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <SysTick_Config+0x40>)
 8001f04:	2207      	movs	r2, #7
 8001f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	e000e010 	.word	0xe000e010

08001f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff2d 	bl	8001d80 <__NVIC_SetPriorityGrouping>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f40:	f7ff ff42 	bl	8001dc8 <__NVIC_GetPriorityGrouping>
 8001f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	6978      	ldr	r0, [r7, #20]
 8001f4c:	f7ff ff90 	bl	8001e70 <NVIC_EncodePriority>
 8001f50:	4602      	mov	r2, r0
 8001f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff5f 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f5e:	bf00      	nop
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff35 	bl	8001de4 <__NVIC_EnableIRQ>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffa2 	bl	8001ed4 <SysTick_Config>
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e043      	b.n	800203a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b22      	ldr	r3, [pc, #136]	; (8002044 <HAL_DMA_Init+0xa8>)
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a22      	ldr	r2, [pc, #136]	; (8002048 <HAL_DMA_Init+0xac>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	091b      	lsrs	r3, r3, #4
 8001fc4:	009a      	lsls	r2, r3, #2
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a1f      	ldr	r2, [pc, #124]	; (800204c <HAL_DMA_Init+0xb0>)
 8001fce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fe6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001fea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002000:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800200c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	bffdfff8 	.word	0xbffdfff8
 8002048:	cccccccd 	.word	0xcccccccd
 800204c:	40020000 	.word	0x40020000

08002050 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002062:	2b02      	cmp	r3, #2
 8002064:	d005      	beq.n	8002072 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2204      	movs	r2, #4
 800206a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e051      	b.n	8002116 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 020e 	bic.w	r2, r2, #14
 8002080:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0201 	bic.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a22      	ldr	r2, [pc, #136]	; (8002120 <HAL_DMA_Abort_IT+0xd0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d029      	beq.n	80020f0 <HAL_DMA_Abort_IT+0xa0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a20      	ldr	r2, [pc, #128]	; (8002124 <HAL_DMA_Abort_IT+0xd4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d022      	beq.n	80020ec <HAL_DMA_Abort_IT+0x9c>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1f      	ldr	r2, [pc, #124]	; (8002128 <HAL_DMA_Abort_IT+0xd8>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d01a      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x96>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1d      	ldr	r2, [pc, #116]	; (800212c <HAL_DMA_Abort_IT+0xdc>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d012      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x90>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1c      	ldr	r2, [pc, #112]	; (8002130 <HAL_DMA_Abort_IT+0xe0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00a      	beq.n	80020da <HAL_DMA_Abort_IT+0x8a>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1a      	ldr	r2, [pc, #104]	; (8002134 <HAL_DMA_Abort_IT+0xe4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d102      	bne.n	80020d4 <HAL_DMA_Abort_IT+0x84>
 80020ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020d2:	e00e      	b.n	80020f2 <HAL_DMA_Abort_IT+0xa2>
 80020d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020d8:	e00b      	b.n	80020f2 <HAL_DMA_Abort_IT+0xa2>
 80020da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020de:	e008      	b.n	80020f2 <HAL_DMA_Abort_IT+0xa2>
 80020e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e4:	e005      	b.n	80020f2 <HAL_DMA_Abort_IT+0xa2>
 80020e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ea:	e002      	b.n	80020f2 <HAL_DMA_Abort_IT+0xa2>
 80020ec:	2310      	movs	r3, #16
 80020ee:	e000      	b.n	80020f2 <HAL_DMA_Abort_IT+0xa2>
 80020f0:	2301      	movs	r3, #1
 80020f2:	4a11      	ldr	r2, [pc, #68]	; (8002138 <HAL_DMA_Abort_IT+0xe8>)
 80020f4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	4798      	blx	r3
    } 
  }
  return status;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40020008 	.word	0x40020008
 8002124:	4002001c 	.word	0x4002001c
 8002128:	40020030 	.word	0x40020030
 800212c:	40020044 	.word	0x40020044
 8002130:	40020058 	.word	0x40020058
 8002134:	4002006c 	.word	0x4002006c
 8002138:	40020000 	.word	0x40020000

0800213c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	2204      	movs	r2, #4
 800215a:	409a      	lsls	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d04f      	beq.n	8002204 <HAL_DMA_IRQHandler+0xc8>
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d04a      	beq.n	8002204 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b00      	cmp	r3, #0
 800217a:	d107      	bne.n	800218c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0204 	bic.w	r2, r2, #4
 800218a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a66      	ldr	r2, [pc, #408]	; (800232c <HAL_DMA_IRQHandler+0x1f0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d029      	beq.n	80021ea <HAL_DMA_IRQHandler+0xae>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a65      	ldr	r2, [pc, #404]	; (8002330 <HAL_DMA_IRQHandler+0x1f4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d022      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xaa>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a63      	ldr	r2, [pc, #396]	; (8002334 <HAL_DMA_IRQHandler+0x1f8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01a      	beq.n	80021e0 <HAL_DMA_IRQHandler+0xa4>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a62      	ldr	r2, [pc, #392]	; (8002338 <HAL_DMA_IRQHandler+0x1fc>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d012      	beq.n	80021da <HAL_DMA_IRQHandler+0x9e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a60      	ldr	r2, [pc, #384]	; (800233c <HAL_DMA_IRQHandler+0x200>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00a      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x98>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a5f      	ldr	r2, [pc, #380]	; (8002340 <HAL_DMA_IRQHandler+0x204>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d102      	bne.n	80021ce <HAL_DMA_IRQHandler+0x92>
 80021c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021cc:	e00e      	b.n	80021ec <HAL_DMA_IRQHandler+0xb0>
 80021ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80021d2:	e00b      	b.n	80021ec <HAL_DMA_IRQHandler+0xb0>
 80021d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021d8:	e008      	b.n	80021ec <HAL_DMA_IRQHandler+0xb0>
 80021da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021de:	e005      	b.n	80021ec <HAL_DMA_IRQHandler+0xb0>
 80021e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021e4:	e002      	b.n	80021ec <HAL_DMA_IRQHandler+0xb0>
 80021e6:	2340      	movs	r3, #64	; 0x40
 80021e8:	e000      	b.n	80021ec <HAL_DMA_IRQHandler+0xb0>
 80021ea:	2304      	movs	r3, #4
 80021ec:	4a55      	ldr	r2, [pc, #340]	; (8002344 <HAL_DMA_IRQHandler+0x208>)
 80021ee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8094 	beq.w	8002322 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002202:	e08e      	b.n	8002322 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	2202      	movs	r2, #2
 800220a:	409a      	lsls	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d056      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x186>
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d051      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10b      	bne.n	8002244 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 020a 	bic.w	r2, r2, #10
 800223a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a38      	ldr	r2, [pc, #224]	; (800232c <HAL_DMA_IRQHandler+0x1f0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d029      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x166>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a37      	ldr	r2, [pc, #220]	; (8002330 <HAL_DMA_IRQHandler+0x1f4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d022      	beq.n	800229e <HAL_DMA_IRQHandler+0x162>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a35      	ldr	r2, [pc, #212]	; (8002334 <HAL_DMA_IRQHandler+0x1f8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01a      	beq.n	8002298 <HAL_DMA_IRQHandler+0x15c>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a34      	ldr	r2, [pc, #208]	; (8002338 <HAL_DMA_IRQHandler+0x1fc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d012      	beq.n	8002292 <HAL_DMA_IRQHandler+0x156>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a32      	ldr	r2, [pc, #200]	; (800233c <HAL_DMA_IRQHandler+0x200>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00a      	beq.n	800228c <HAL_DMA_IRQHandler+0x150>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a31      	ldr	r2, [pc, #196]	; (8002340 <HAL_DMA_IRQHandler+0x204>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d102      	bne.n	8002286 <HAL_DMA_IRQHandler+0x14a>
 8002280:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002284:	e00e      	b.n	80022a4 <HAL_DMA_IRQHandler+0x168>
 8002286:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800228a:	e00b      	b.n	80022a4 <HAL_DMA_IRQHandler+0x168>
 800228c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002290:	e008      	b.n	80022a4 <HAL_DMA_IRQHandler+0x168>
 8002292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002296:	e005      	b.n	80022a4 <HAL_DMA_IRQHandler+0x168>
 8002298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800229c:	e002      	b.n	80022a4 <HAL_DMA_IRQHandler+0x168>
 800229e:	2320      	movs	r3, #32
 80022a0:	e000      	b.n	80022a4 <HAL_DMA_IRQHandler+0x168>
 80022a2:	2302      	movs	r3, #2
 80022a4:	4a27      	ldr	r2, [pc, #156]	; (8002344 <HAL_DMA_IRQHandler+0x208>)
 80022a6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d034      	beq.n	8002322 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80022c0:	e02f      	b.n	8002322 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	2208      	movs	r2, #8
 80022c8:	409a      	lsls	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d028      	beq.n	8002324 <HAL_DMA_IRQHandler+0x1e8>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d023      	beq.n	8002324 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 020e 	bic.w	r2, r2, #14
 80022ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f4:	2101      	movs	r1, #1
 80022f6:	fa01 f202 	lsl.w	r2, r1, r2
 80022fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	2b00      	cmp	r3, #0
 8002318:	d004      	beq.n	8002324 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
    }
  }
  return;
 8002322:	bf00      	nop
 8002324:	bf00      	nop
}
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40020008 	.word	0x40020008
 8002330:	4002001c 	.word	0x4002001c
 8002334:	40020030 	.word	0x40020030
 8002338:	40020044 	.word	0x40020044
 800233c:	40020058 	.word	0x40020058
 8002340:	4002006c 	.word	0x4002006c
 8002344:	40020000 	.word	0x40020000

08002348 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002360:	b480      	push	{r7}
 8002362:	b08b      	sub	sp, #44	; 0x2c
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800236e:	2300      	movs	r3, #0
 8002370:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002372:	e127      	b.n	80025c4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002374:	2201      	movs	r2, #1
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	429a      	cmp	r2, r3
 800238e:	f040 8116 	bne.w	80025be <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b12      	cmp	r3, #18
 8002398:	d034      	beq.n	8002404 <HAL_GPIO_Init+0xa4>
 800239a:	2b12      	cmp	r3, #18
 800239c:	d80d      	bhi.n	80023ba <HAL_GPIO_Init+0x5a>
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d02b      	beq.n	80023fa <HAL_GPIO_Init+0x9a>
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d804      	bhi.n	80023b0 <HAL_GPIO_Init+0x50>
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d031      	beq.n	800240e <HAL_GPIO_Init+0xae>
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d01c      	beq.n	80023e8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023ae:	e048      	b.n	8002442 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d043      	beq.n	800243c <HAL_GPIO_Init+0xdc>
 80023b4:	2b11      	cmp	r3, #17
 80023b6:	d01b      	beq.n	80023f0 <HAL_GPIO_Init+0x90>
          break;
 80023b8:	e043      	b.n	8002442 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023ba:	4a89      	ldr	r2, [pc, #548]	; (80025e0 <HAL_GPIO_Init+0x280>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d026      	beq.n	800240e <HAL_GPIO_Init+0xae>
 80023c0:	4a87      	ldr	r2, [pc, #540]	; (80025e0 <HAL_GPIO_Init+0x280>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d806      	bhi.n	80023d4 <HAL_GPIO_Init+0x74>
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_GPIO_Init+0x284>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d020      	beq.n	800240e <HAL_GPIO_Init+0xae>
 80023cc:	4a86      	ldr	r2, [pc, #536]	; (80025e8 <HAL_GPIO_Init+0x288>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d01d      	beq.n	800240e <HAL_GPIO_Init+0xae>
          break;
 80023d2:	e036      	b.n	8002442 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023d4:	4a85      	ldr	r2, [pc, #532]	; (80025ec <HAL_GPIO_Init+0x28c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d019      	beq.n	800240e <HAL_GPIO_Init+0xae>
 80023da:	4a85      	ldr	r2, [pc, #532]	; (80025f0 <HAL_GPIO_Init+0x290>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d016      	beq.n	800240e <HAL_GPIO_Init+0xae>
 80023e0:	4a84      	ldr	r2, [pc, #528]	; (80025f4 <HAL_GPIO_Init+0x294>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_GPIO_Init+0xae>
          break;
 80023e6:	e02c      	b.n	8002442 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	623b      	str	r3, [r7, #32]
          break;
 80023ee:	e028      	b.n	8002442 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	3304      	adds	r3, #4
 80023f6:	623b      	str	r3, [r7, #32]
          break;
 80023f8:	e023      	b.n	8002442 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	3308      	adds	r3, #8
 8002400:	623b      	str	r3, [r7, #32]
          break;
 8002402:	e01e      	b.n	8002442 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	330c      	adds	r3, #12
 800240a:	623b      	str	r3, [r7, #32]
          break;
 800240c:	e019      	b.n	8002442 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d102      	bne.n	800241c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002416:	2304      	movs	r3, #4
 8002418:	623b      	str	r3, [r7, #32]
          break;
 800241a:	e012      	b.n	8002442 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d105      	bne.n	8002430 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002424:	2308      	movs	r3, #8
 8002426:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	611a      	str	r2, [r3, #16]
          break;
 800242e:	e008      	b.n	8002442 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002430:	2308      	movs	r3, #8
 8002432:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	615a      	str	r2, [r3, #20]
          break;
 800243a:	e002      	b.n	8002442 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800243c:	2300      	movs	r3, #0
 800243e:	623b      	str	r3, [r7, #32]
          break;
 8002440:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2bff      	cmp	r3, #255	; 0xff
 8002446:	d801      	bhi.n	800244c <HAL_GPIO_Init+0xec>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	e001      	b.n	8002450 <HAL_GPIO_Init+0xf0>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3304      	adds	r3, #4
 8002450:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2bff      	cmp	r3, #255	; 0xff
 8002456:	d802      	bhi.n	800245e <HAL_GPIO_Init+0xfe>
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	e002      	b.n	8002464 <HAL_GPIO_Init+0x104>
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	3b08      	subs	r3, #8
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	210f      	movs	r1, #15
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	401a      	ands	r2, r3
 8002476:	6a39      	ldr	r1, [r7, #32]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	431a      	orrs	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8096 	beq.w	80025be <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002492:	4b59      	ldr	r3, [pc, #356]	; (80025f8 <HAL_GPIO_Init+0x298>)
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	4a58      	ldr	r2, [pc, #352]	; (80025f8 <HAL_GPIO_Init+0x298>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6193      	str	r3, [r2, #24]
 800249e:	4b56      	ldr	r3, [pc, #344]	; (80025f8 <HAL_GPIO_Init+0x298>)
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024aa:	4a54      	ldr	r2, [pc, #336]	; (80025fc <HAL_GPIO_Init+0x29c>)
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	220f      	movs	r2, #15
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4013      	ands	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4b      	ldr	r2, [pc, #300]	; (8002600 <HAL_GPIO_Init+0x2a0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_GPIO_Init+0x19e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4a      	ldr	r2, [pc, #296]	; (8002604 <HAL_GPIO_Init+0x2a4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00d      	beq.n	80024fa <HAL_GPIO_Init+0x19a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a49      	ldr	r2, [pc, #292]	; (8002608 <HAL_GPIO_Init+0x2a8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d007      	beq.n	80024f6 <HAL_GPIO_Init+0x196>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a48      	ldr	r2, [pc, #288]	; (800260c <HAL_GPIO_Init+0x2ac>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d101      	bne.n	80024f2 <HAL_GPIO_Init+0x192>
 80024ee:	2303      	movs	r3, #3
 80024f0:	e006      	b.n	8002500 <HAL_GPIO_Init+0x1a0>
 80024f2:	2304      	movs	r3, #4
 80024f4:	e004      	b.n	8002500 <HAL_GPIO_Init+0x1a0>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e002      	b.n	8002500 <HAL_GPIO_Init+0x1a0>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_GPIO_Init+0x1a0>
 80024fe:	2300      	movs	r3, #0
 8002500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002502:	f002 0203 	and.w	r2, r2, #3
 8002506:	0092      	lsls	r2, r2, #2
 8002508:	4093      	lsls	r3, r2
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002510:	493a      	ldr	r1, [pc, #232]	; (80025fc <HAL_GPIO_Init+0x29c>)
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	089b      	lsrs	r3, r3, #2
 8002516:	3302      	adds	r3, #2
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d006      	beq.n	8002538 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800252a:	4b39      	ldr	r3, [pc, #228]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4938      	ldr	r1, [pc, #224]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]
 8002536:	e006      	b.n	8002546 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002538:	4b35      	ldr	r3, [pc, #212]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	43db      	mvns	r3, r3
 8002540:	4933      	ldr	r1, [pc, #204]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 8002542:	4013      	ands	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d006      	beq.n	8002560 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002552:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	492e      	ldr	r1, [pc, #184]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
 800255e:	e006      	b.n	800256e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002560:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	43db      	mvns	r3, r3
 8002568:	4929      	ldr	r1, [pc, #164]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 800256a:	4013      	ands	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d006      	beq.n	8002588 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800257a:	4b25      	ldr	r3, [pc, #148]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	4924      	ldr	r1, [pc, #144]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	608b      	str	r3, [r1, #8]
 8002586:	e006      	b.n	8002596 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002588:	4b21      	ldr	r3, [pc, #132]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	43db      	mvns	r3, r3
 8002590:	491f      	ldr	r1, [pc, #124]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 8002592:	4013      	ands	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d006      	beq.n	80025b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025a2:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	491a      	ldr	r1, [pc, #104]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60cb      	str	r3, [r1, #12]
 80025ae:	e006      	b.n	80025be <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	4915      	ldr	r1, [pc, #84]	; (8002610 <HAL_GPIO_Init+0x2b0>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	3301      	adds	r3, #1
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	fa22 f303 	lsr.w	r3, r2, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f47f aed0 	bne.w	8002374 <HAL_GPIO_Init+0x14>
  }
}
 80025d4:	bf00      	nop
 80025d6:	372c      	adds	r7, #44	; 0x2c
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	10210000 	.word	0x10210000
 80025e4:	10110000 	.word	0x10110000
 80025e8:	10120000 	.word	0x10120000
 80025ec:	10310000 	.word	0x10310000
 80025f0:	10320000 	.word	0x10320000
 80025f4:	10220000 	.word	0x10220000
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40010000 	.word	0x40010000
 8002600:	40010800 	.word	0x40010800
 8002604:	40010c00 	.word	0x40010c00
 8002608:	40011000 	.word	0x40011000
 800260c:	40011400 	.word	0x40011400
 8002610:	40010400 	.word	0x40010400

08002614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
 8002620:	4613      	mov	r3, r2
 8002622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002624:	787b      	ldrb	r3, [r7, #1]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262a:	887a      	ldrh	r2, [r7, #2]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002630:	e003      	b.n	800263a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002632:	887b      	ldrh	r3, [r7, #2]
 8002634:	041a      	lsls	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	611a      	str	r2, [r3, #16]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e11f      	b.n	8002896 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7fe fde4 	bl	8001238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2224      	movs	r2, #36	; 0x24
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002696:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026a8:	f003 fc2e 	bl	8005f08 <HAL_RCC_GetPCLK1Freq>
 80026ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4a7b      	ldr	r2, [pc, #492]	; (80028a0 <HAL_I2C_Init+0x25c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d807      	bhi.n	80026c8 <HAL_I2C_Init+0x84>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4a7a      	ldr	r2, [pc, #488]	; (80028a4 <HAL_I2C_Init+0x260>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	bf94      	ite	ls
 80026c0:	2301      	movls	r3, #1
 80026c2:	2300      	movhi	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	e006      	b.n	80026d6 <HAL_I2C_Init+0x92>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4a77      	ldr	r2, [pc, #476]	; (80028a8 <HAL_I2C_Init+0x264>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	bf94      	ite	ls
 80026d0:	2301      	movls	r3, #1
 80026d2:	2300      	movhi	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e0db      	b.n	8002896 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4a72      	ldr	r2, [pc, #456]	; (80028ac <HAL_I2C_Init+0x268>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	0c9b      	lsrs	r3, r3, #18
 80026e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4a64      	ldr	r2, [pc, #400]	; (80028a0 <HAL_I2C_Init+0x25c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d802      	bhi.n	8002718 <HAL_I2C_Init+0xd4>
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	3301      	adds	r3, #1
 8002716:	e009      	b.n	800272c <HAL_I2C_Init+0xe8>
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800271e:	fb02 f303 	mul.w	r3, r2, r3
 8002722:	4a63      	ldr	r2, [pc, #396]	; (80028b0 <HAL_I2C_Init+0x26c>)
 8002724:	fba2 2303 	umull	r2, r3, r2, r3
 8002728:	099b      	lsrs	r3, r3, #6
 800272a:	3301      	adds	r3, #1
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	430b      	orrs	r3, r1
 8002732:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800273e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4956      	ldr	r1, [pc, #344]	; (80028a0 <HAL_I2C_Init+0x25c>)
 8002748:	428b      	cmp	r3, r1
 800274a:	d80d      	bhi.n	8002768 <HAL_I2C_Init+0x124>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	1e59      	subs	r1, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fbb1 f3f3 	udiv	r3, r1, r3
 800275a:	3301      	adds	r3, #1
 800275c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002760:	2b04      	cmp	r3, #4
 8002762:	bf38      	it	cc
 8002764:	2304      	movcc	r3, #4
 8002766:	e04f      	b.n	8002808 <HAL_I2C_Init+0x1c4>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d111      	bne.n	8002794 <HAL_I2C_Init+0x150>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1e58      	subs	r0, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	440b      	add	r3, r1
 800277e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002782:	3301      	adds	r3, #1
 8002784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	e012      	b.n	80027ba <HAL_I2C_Init+0x176>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1e58      	subs	r0, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	0099      	lsls	r1, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027aa:	3301      	adds	r3, #1
 80027ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Init+0x17e>
 80027be:	2301      	movs	r3, #1
 80027c0:	e022      	b.n	8002808 <HAL_I2C_Init+0x1c4>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10e      	bne.n	80027e8 <HAL_I2C_Init+0x1a4>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1e58      	subs	r0, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6859      	ldr	r1, [r3, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	440b      	add	r3, r1
 80027d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027e6:	e00f      	b.n	8002808 <HAL_I2C_Init+0x1c4>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1e58      	subs	r0, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	0099      	lsls	r1, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fe:	3301      	adds	r3, #1
 8002800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002804:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	6809      	ldr	r1, [r1, #0]
 800280c:	4313      	orrs	r3, r2
 800280e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69da      	ldr	r2, [r3, #28]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002836:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6911      	ldr	r1, [r2, #16]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68d2      	ldr	r2, [r2, #12]
 8002842:	4311      	orrs	r1, r2
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	430b      	orrs	r3, r1
 800284a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	000186a0 	.word	0x000186a0
 80028a4:	001e847f 	.word	0x001e847f
 80028a8:	003d08ff 	.word	0x003d08ff
 80028ac:	431bde83 	.word	0x431bde83
 80028b0:	10624dd3 	.word	0x10624dd3

080028b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028dc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	2b10      	cmp	r3, #16
 80028e2:	d003      	beq.n	80028ec <HAL_I2C_EV_IRQHandler+0x38>
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	2b40      	cmp	r3, #64	; 0x40
 80028e8:	f040 80bd 	bne.w	8002a66 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10d      	bne.n	8002922 <HAL_I2C_EV_IRQHandler+0x6e>
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800290c:	d003      	beq.n	8002916 <HAL_I2C_EV_IRQHandler+0x62>
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002914:	d101      	bne.n	800291a <HAL_I2C_EV_IRQHandler+0x66>
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <HAL_I2C_EV_IRQHandler+0x68>
 800291a:	2300      	movs	r3, #0
 800291c:	2b01      	cmp	r3, #1
 800291e:	f000 812e 	beq.w	8002b7e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00c      	beq.n	8002946 <HAL_I2C_EV_IRQHandler+0x92>
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	0a5b      	lsrs	r3, r3, #9
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d006      	beq.n	8002946 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f001 fb39 	bl	8003fb0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fcb1 	bl	80032a6 <I2C_Master_SB>
 8002944:	e08e      	b.n	8002a64 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	08db      	lsrs	r3, r3, #3
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <HAL_I2C_EV_IRQHandler+0xb2>
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	0a5b      	lsrs	r3, r3, #9
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fd26 	bl	80033b0 <I2C_Master_ADD10>
 8002964:	e07e      	b.n	8002a64 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_I2C_EV_IRQHandler+0xd2>
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	0a5b      	lsrs	r3, r3, #9
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fd3f 	bl	8003402 <I2C_Master_ADDR>
 8002984:	e06e      	b.n	8002a64 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d037      	beq.n	8002a02 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800299c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a0:	f000 80ef 	beq.w	8002b82 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	09db      	lsrs	r3, r3, #7
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00f      	beq.n	80029d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	0a9b      	lsrs	r3, r3, #10
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d103      	bne.n	80029d0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f93e 	bl	8002c4a <I2C_MasterTransmit_TXE>
 80029ce:	e049      	b.n	8002a64 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80d2 	beq.w	8002b82 <HAL_I2C_EV_IRQHandler+0x2ce>
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	0a5b      	lsrs	r3, r3, #9
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80cb 	beq.w	8002b82 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	2b10      	cmp	r3, #16
 80029f0:	d103      	bne.n	80029fa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f9c5 	bl	8002d82 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029f8:	e0c3      	b.n	8002b82 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fa29 	bl	8002e52 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a00:	e0bf      	b.n	8002b82 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a10:	f000 80b7 	beq.w	8002b82 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	099b      	lsrs	r3, r3, #6
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00f      	beq.n	8002a40 <HAL_I2C_EV_IRQHandler+0x18c>
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	0a9b      	lsrs	r3, r3, #10
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d009      	beq.n	8002a40 <HAL_I2C_EV_IRQHandler+0x18c>
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d103      	bne.n	8002a40 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fa99 	bl	8002f70 <I2C_MasterReceive_RXNE>
 8002a3e:	e011      	b.n	8002a64 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 809a 	beq.w	8002b82 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	0a5b      	lsrs	r3, r3, #9
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8093 	beq.w	8002b82 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 fb38 	bl	80030d2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a62:	e08e      	b.n	8002b82 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002a64:	e08d      	b.n	8002b82 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d004      	beq.n	8002a78 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	61fb      	str	r3, [r7, #28]
 8002a76:	e007      	b.n	8002a88 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	085b      	lsrs	r3, r3, #1
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d012      	beq.n	8002aba <HAL_I2C_EV_IRQHandler+0x206>
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	0a5b      	lsrs	r3, r3, #9
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00c      	beq.n	8002aba <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002ab0:	69b9      	ldr	r1, [r7, #24]
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fefc 	bl	80038b0 <I2C_Slave_ADDR>
 8002ab8:	e066      	b.n	8002b88 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <HAL_I2C_EV_IRQHandler+0x226>
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	0a5b      	lsrs	r3, r3, #9
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 ff30 	bl	8003938 <I2C_Slave_STOPF>
 8002ad8:	e056      	b.n	8002b88 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ada:	7bbb      	ldrb	r3, [r7, #14]
 8002adc:	2b21      	cmp	r3, #33	; 0x21
 8002ade:	d002      	beq.n	8002ae6 <HAL_I2C_EV_IRQHandler+0x232>
 8002ae0:	7bbb      	ldrb	r3, [r7, #14]
 8002ae2:	2b29      	cmp	r3, #41	; 0x29
 8002ae4:	d125      	bne.n	8002b32 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	09db      	lsrs	r3, r3, #7
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00f      	beq.n	8002b12 <HAL_I2C_EV_IRQHandler+0x25e>
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	0a9b      	lsrs	r3, r3, #10
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_I2C_EV_IRQHandler+0x25e>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	089b      	lsrs	r3, r3, #2
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d103      	bne.n	8002b12 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fe14 	bl	8003738 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b10:	e039      	b.n	8002b86 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	089b      	lsrs	r3, r3, #2
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d033      	beq.n	8002b86 <HAL_I2C_EV_IRQHandler+0x2d2>
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	0a5b      	lsrs	r3, r3, #9
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d02d      	beq.n	8002b86 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fe41 	bl	80037b2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b30:	e029      	b.n	8002b86 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	099b      	lsrs	r3, r3, #6
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00f      	beq.n	8002b5e <HAL_I2C_EV_IRQHandler+0x2aa>
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	0a9b      	lsrs	r3, r3, #10
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <HAL_I2C_EV_IRQHandler+0x2aa>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d103      	bne.n	8002b5e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fe4b 	bl	80037f2 <I2C_SlaveReceive_RXNE>
 8002b5c:	e014      	b.n	8002b88 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	089b      	lsrs	r3, r3, #2
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00e      	beq.n	8002b88 <HAL_I2C_EV_IRQHandler+0x2d4>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	0a5b      	lsrs	r3, r3, #9
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d008      	beq.n	8002b88 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fe79 	bl	800386e <I2C_SlaveReceive_BTF>
 8002b7c:	e004      	b.n	8002b88 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8002b7e:	bf00      	nop
 8002b80:	e002      	b.n	8002b88 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b82:	bf00      	nop
 8002b84:	e000      	b.n	8002b88 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b86:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	460b      	mov	r3, r1
 8002be0:	70fb      	strb	r3, [r7, #3]
 8002be2:	4613      	mov	r3, r2
 8002be4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c60:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d150      	bne.n	8002d12 <I2C_MasterTransmit_TXE+0xc8>
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b21      	cmp	r3, #33	; 0x21
 8002c74:	d14d      	bne.n	8002d12 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d01d      	beq.n	8002cb8 <I2C_MasterTransmit_TXE+0x6e>
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d01a      	beq.n	8002cb8 <I2C_MasterTransmit_TXE+0x6e>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c88:	d016      	beq.n	8002cb8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c98:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2211      	movs	r2, #17
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff ff6c 	bl	8002b8e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cb6:	e060      	b.n	8002d7a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cc6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b40      	cmp	r3, #64	; 0x40
 8002cf0:	d107      	bne.n	8002d02 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff ff81 	bl	8002c02 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d00:	e03b      	b.n	8002d7a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff ff3f 	bl	8002b8e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d10:	e033      	b.n	8002d7a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	2b21      	cmp	r3, #33	; 0x21
 8002d16:	d005      	beq.n	8002d24 <I2C_MasterTransmit_TXE+0xda>
 8002d18:	7bbb      	ldrb	r3, [r7, #14]
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d12d      	bne.n	8002d7a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	2b22      	cmp	r3, #34	; 0x22
 8002d22:	d12a      	bne.n	8002d7a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d108      	bne.n	8002d40 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d3c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002d3e:	e01c      	b.n	8002d7a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	d103      	bne.n	8002d54 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f880 	bl	8002e52 <I2C_MemoryTransmit_TXE_BTF>
}
 8002d52:	e012      	b.n	8002d7a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d78:	e7ff      	b.n	8002d7a <I2C_MasterTransmit_TXE+0x130>
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b21      	cmp	r3, #33	; 0x21
 8002d9a:	d156      	bne.n	8002e4a <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d012      	beq.n	8002dcc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	781a      	ldrb	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002dca:	e03e      	b.n	8002e4a <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d01d      	beq.n	8002e0e <I2C_MasterTransmit_BTF+0x8c>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d01a      	beq.n	8002e0e <I2C_MasterTransmit_BTF+0x8c>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dde:	d016      	beq.n	8002e0e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dee:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2211      	movs	r2, #17
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff fec1 	bl	8002b8e <HAL_I2C_MasterTxCpltCallback>
}
 8002e0c:	e01d      	b.n	8002e4a <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e1c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff fea2 	bl	8002b8e <HAL_I2C_MasterTxCpltCallback>
}
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e60:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d11d      	bne.n	8002ea6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d10b      	bne.n	8002e8a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e82:	1c9a      	adds	r2, r3, #2
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002e88:	e06e      	b.n	8002f68 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	121b      	asrs	r3, r3, #8
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ea4:	e060      	b.n	8002f68 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d10b      	bne.n	8002ec6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ec4:	e050      	b.n	8002f68 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d14c      	bne.n	8002f68 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	2b22      	cmp	r3, #34	; 0x22
 8002ed2:	d108      	bne.n	8002ee6 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee2:	601a      	str	r2, [r3, #0]
}
 8002ee4:	e040      	b.n	8002f68 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d015      	beq.n	8002f1c <I2C_MemoryTransmit_TXE_BTF+0xca>
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	2b21      	cmp	r3, #33	; 0x21
 8002ef4:	d112      	bne.n	8002f1c <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	781a      	ldrb	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f1a:	e025      	b.n	8002f68 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d120      	bne.n	8002f68 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	2b21      	cmp	r3, #33	; 0x21
 8002f2a:	d11d      	bne.n	8002f68 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f3a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff fe4d 	bl	8002c02 <HAL_I2C_MemTxCpltCallback>
}
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b22      	cmp	r3, #34	; 0x22
 8002f82:	f040 80a2 	bne.w	80030ca <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d921      	bls.n	8002fd8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	f040 8082 	bne.w	80030ca <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002fd6:	e078      	b.n	80030ca <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d074      	beq.n	80030ca <I2C_MasterReceive_RXNE+0x15a>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d002      	beq.n	8002fec <I2C_MasterReceive_RXNE+0x7c>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d16e      	bne.n	80030ca <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 ffad 	bl	8003f4c <I2C_WaitOnSTOPRequestThroughIT>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d142      	bne.n	800307e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003006:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003016:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691a      	ldr	r2, [r3, #16]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b40      	cmp	r3, #64	; 0x40
 8003050:	d10a      	bne.n	8003068 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff fdd7 	bl	8002c14 <HAL_I2C_MemRxCpltCallback>
}
 8003066:	e030      	b.n	80030ca <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2212      	movs	r2, #18
 8003074:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fd92 	bl	8002ba0 <HAL_I2C_MasterRxCpltCallback>
}
 800307c:	e025      	b.n	80030ca <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800308c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff fdae 	bl	8002c26 <HAL_I2C_ErrorCallback>
}
 80030ca:	bf00      	nop
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d11b      	bne.n	8003122 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003120:	e0bd      	b.n	800329e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b03      	cmp	r3, #3
 800312a:	d129      	bne.n	8003180 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800313a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b04      	cmp	r3, #4
 8003140:	d00a      	beq.n	8003158 <I2C_MasterReceive_BTF+0x86>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d007      	beq.n	8003158 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003156:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800317e:	e08e      	b.n	800329e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d176      	bne.n	8003278 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d002      	beq.n	8003196 <I2C_MasterReceive_BTF+0xc4>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b10      	cmp	r3, #16
 8003194:	d108      	bne.n	80031a8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	e019      	b.n	80031dc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d002      	beq.n	80031b4 <I2C_MasterReceive_BTF+0xe2>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d108      	bne.n	80031c6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	e00a      	b.n	80031dc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d007      	beq.n	80031dc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003236:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b40      	cmp	r3, #64	; 0x40
 800324a:	d10a      	bne.n	8003262 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff fcda 	bl	8002c14 <HAL_I2C_MemRxCpltCallback>
}
 8003260:	e01d      	b.n	800329e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2212      	movs	r2, #18
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff fc95 	bl	8002ba0 <HAL_I2C_MasterRxCpltCallback>
}
 8003276:	e012      	b.n	800329e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	d117      	bne.n	80032ea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032d2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80032d4:	e067      	b.n	80033a6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	611a      	str	r2, [r3, #16]
}
 80032e8:	e05d      	b.n	80033a6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032f2:	d133      	bne.n	800335c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b21      	cmp	r3, #33	; 0x21
 80032fe:	d109      	bne.n	8003314 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003310:	611a      	str	r2, [r3, #16]
 8003312:	e008      	b.n	8003326 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	b2da      	uxtb	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332a:	2b00      	cmp	r3, #0
 800332c:	d004      	beq.n	8003338 <I2C_Master_SB+0x92>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	d108      	bne.n	800334a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	2b00      	cmp	r3, #0
 800333e:	d032      	beq.n	80033a6 <I2C_Master_SB+0x100>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003346:	2b00      	cmp	r3, #0
 8003348:	d02d      	beq.n	80033a6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003358:	605a      	str	r2, [r3, #4]
}
 800335a:	e024      	b.n	80033a6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10e      	bne.n	8003382 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	b29b      	uxth	r3, r3
 800336a:	11db      	asrs	r3, r3, #7
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f003 0306 	and.w	r3, r3, #6
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f063 030f 	orn	r3, r3, #15
 8003378:	b2da      	uxtb	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]
}
 8003380:	e011      	b.n	80033a6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003386:	2b01      	cmp	r3, #1
 8003388:	d10d      	bne.n	80033a6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	b29b      	uxth	r3, r3
 8003390:	11db      	asrs	r3, r3, #7
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f003 0306 	and.w	r3, r3, #6
 8003398:	b2db      	uxtb	r3, r3
 800339a:	f063 030e 	orn	r3, r3, #14
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	611a      	str	r2, [r3, #16]
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d103      	bne.n	80033d4 <I2C_Master_ADD10+0x24>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d011      	beq.n	80033f8 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d104      	bne.n	80033e8 <I2C_Master_ADD10+0x38>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d007      	beq.n	80033f8 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033f6:	605a      	str	r2, [r3, #4]
    }
  }
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr

08003402 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003402:	b480      	push	{r7}
 8003404:	b091      	sub	sp, #68	; 0x44
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003410:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b22      	cmp	r3, #34	; 0x22
 800342a:	f040 8174 	bne.w	8003716 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10f      	bne.n	8003456 <I2C_Master_ADDR+0x54>
 8003436:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800343a:	2b40      	cmp	r3, #64	; 0x40
 800343c:	d10b      	bne.n	8003456 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343e:	2300      	movs	r3, #0
 8003440:	633b      	str	r3, [r7, #48]	; 0x30
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	633b      	str	r3, [r7, #48]	; 0x30
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	633b      	str	r3, [r7, #48]	; 0x30
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	e16b      	b.n	800372e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345a:	2b00      	cmp	r3, #0
 800345c:	d11d      	bne.n	800349a <I2C_Master_ADDR+0x98>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003466:	d118      	bne.n	800349a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003468:	2300      	movs	r3, #0
 800346a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800348c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	651a      	str	r2, [r3, #80]	; 0x50
 8003498:	e149      	b.n	800372e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d113      	bne.n	80034cc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a4:	2300      	movs	r3, #0
 80034a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80034b8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	e120      	b.n	800370e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	f040 808a 	bne.w	80035ec <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80034d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034de:	d137      	bne.n	8003550 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ee:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034fe:	d113      	bne.n	8003528 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003510:	2300      	movs	r3, #0
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	e0f2      	b.n	800370e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003528:	2300      	movs	r3, #0
 800352a:	623b      	str	r3, [r7, #32]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	623b      	str	r3, [r7, #32]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	623b      	str	r3, [r7, #32]
 800353c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	e0de      	b.n	800370e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003552:	2b08      	cmp	r3, #8
 8003554:	d02e      	beq.n	80035b4 <I2C_Master_ADDR+0x1b2>
 8003556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003558:	2b20      	cmp	r3, #32
 800355a:	d02b      	beq.n	80035b4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800355c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355e:	2b12      	cmp	r3, #18
 8003560:	d102      	bne.n	8003568 <I2C_Master_ADDR+0x166>
 8003562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003564:	2b01      	cmp	r3, #1
 8003566:	d125      	bne.n	80035b4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356a:	2b04      	cmp	r3, #4
 800356c:	d00e      	beq.n	800358c <I2C_Master_ADDR+0x18a>
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	2b02      	cmp	r3, #2
 8003572:	d00b      	beq.n	800358c <I2C_Master_ADDR+0x18a>
 8003574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003576:	2b10      	cmp	r3, #16
 8003578:	d008      	beq.n	800358c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	e007      	b.n	800359c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800359a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	e0ac      	b.n	800370e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	61bb      	str	r3, [r7, #24]
 80035d8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	e090      	b.n	800370e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d158      	bne.n	80036a8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80035f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d021      	beq.n	8003640 <I2C_Master_ADDR+0x23e>
 80035fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d01e      	beq.n	8003640 <I2C_Master_ADDR+0x23e>
 8003602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003604:	2b10      	cmp	r3, #16
 8003606:	d01b      	beq.n	8003640 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003616:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	e012      	b.n	8003666 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800364e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003650:	2300      	movs	r3, #0
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003674:	d14b      	bne.n	800370e <I2C_Master_ADDR+0x30c>
 8003676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003678:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800367c:	d00b      	beq.n	8003696 <I2C_Master_ADDR+0x294>
 800367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003680:	2b01      	cmp	r3, #1
 8003682:	d008      	beq.n	8003696 <I2C_Master_ADDR+0x294>
 8003684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003686:	2b08      	cmp	r3, #8
 8003688:	d005      	beq.n	8003696 <I2C_Master_ADDR+0x294>
 800368a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368c:	2b10      	cmp	r3, #16
 800368e:	d002      	beq.n	8003696 <I2C_Master_ADDR+0x294>
 8003690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003692:	2b20      	cmp	r3, #32
 8003694:	d13b      	bne.n	800370e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	e032      	b.n	800370e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036b6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c6:	d117      	bne.n	80036f8 <I2C_Master_ADDR+0x2f6>
 80036c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036ce:	d00b      	beq.n	80036e8 <I2C_Master_ADDR+0x2e6>
 80036d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d008      	beq.n	80036e8 <I2C_Master_ADDR+0x2e6>
 80036d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d005      	beq.n	80036e8 <I2C_Master_ADDR+0x2e6>
 80036dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036de:	2b10      	cmp	r3, #16
 80036e0:	d002      	beq.n	80036e8 <I2C_Master_ADDR+0x2e6>
 80036e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	d107      	bne.n	80036f8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036f6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003714:	e00b      	b.n	800372e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003716:	2300      	movs	r3, #0
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	68bb      	ldr	r3, [r7, #8]
}
 800372c:	e7ff      	b.n	800372e <I2C_Master_ADDR+0x32c>
 800372e:	bf00      	nop
 8003730:	3744      	adds	r7, #68	; 0x44
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr

08003738 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003746:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d02b      	beq.n	80037aa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	781a      	ldrb	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d114      	bne.n	80037aa <I2C_SlaveTransmit_TXE+0x72>
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b29      	cmp	r3, #41	; 0x29
 8003784:	d111      	bne.n	80037aa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003794:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2221      	movs	r2, #33	; 0x21
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2228      	movs	r2, #40	; 0x28
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff fa04 	bl	8002bb2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d011      	beq.n	80037e8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	781a      	ldrb	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr

080037f2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003800:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003806:	b29b      	uxth	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d02c      	beq.n	8003866 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d114      	bne.n	8003866 <I2C_SlaveReceive_RXNE+0x74>
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	2b2a      	cmp	r3, #42	; 0x2a
 8003840:	d111      	bne.n	8003866 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003850:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2222      	movs	r2, #34	; 0x22
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2228      	movs	r2, #40	; 0x28
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff f9af 	bl	8002bc4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003866:	bf00      	nop
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d012      	beq.n	80038a6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80038ba:	2300      	movs	r3, #0
 80038bc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038ca:	2b28      	cmp	r3, #40	; 0x28
 80038cc:	d127      	bne.n	800391e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038dc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	089b      	lsrs	r3, r3, #2
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	09db      	lsrs	r3, r3, #7
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d103      	bne.n	8003902 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	81bb      	strh	r3, [r7, #12]
 8003900:	e002      	b.n	8003908 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003910:	89ba      	ldrh	r2, [r7, #12]
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	4619      	mov	r1, r3
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff f95d 	bl	8002bd6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800391c:	e008      	b.n	8003930 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f06f 0202 	mvn.w	r2, #2
 8003926:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003946:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003956:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003958:	2300      	movs	r3, #0
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003984:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003994:	d172      	bne.n	8003a7c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2b22      	cmp	r3, #34	; 0x22
 800399a:	d002      	beq.n	80039a2 <I2C_Slave_STOPF+0x6a>
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	2b2a      	cmp	r3, #42	; 0x2a
 80039a0:	d135      	bne.n	8003a0e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f043 0204 	orr.w	r2, r3, #4
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe fcb4 	bl	8002348 <HAL_DMA_GetState>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d049      	beq.n	8003a7a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	4a69      	ldr	r2, [pc, #420]	; (8003b90 <I2C_Slave_STOPF+0x258>)
 80039ec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fb2c 	bl	8002050 <HAL_DMA_Abort_IT>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d03d      	beq.n	8003a7a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a08:	4610      	mov	r0, r2
 8003a0a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a0c:	e035      	b.n	8003a7a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f043 0204 	orr.w	r2, r3, #4
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe fc7e 	bl	8002348 <HAL_DMA_GetState>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d014      	beq.n	8003a7c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	4a4e      	ldr	r2, [pc, #312]	; (8003b90 <I2C_Slave_STOPF+0x258>)
 8003a58:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe faf6 	bl	8002050 <HAL_DMA_Abort_IT>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a74:	4610      	mov	r0, r2
 8003a76:	4798      	blx	r3
 8003a78:	e000      	b.n	8003a7c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a7a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d03e      	beq.n	8003b04 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d112      	bne.n	8003aba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	d112      	bne.n	8003aee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	691a      	ldr	r2, [r3, #16]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	f043 0204 	orr.w	r2, r3, #4
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f843 	bl	8003b98 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003b12:	e039      	b.n	8003b88 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b2a      	cmp	r3, #42	; 0x2a
 8003b18:	d109      	bne.n	8003b2e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2228      	movs	r2, #40	; 0x28
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff f84b 	bl	8002bc4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b28      	cmp	r3, #40	; 0x28
 8003b38:	d111      	bne.n	8003b5e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <I2C_Slave_STOPF+0x25c>)
 8003b3e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff f84a 	bl	8002bf0 <HAL_I2C_ListenCpltCallback>
}
 8003b5c:	e014      	b.n	8003b88 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	2b22      	cmp	r3, #34	; 0x22
 8003b64:	d002      	beq.n	8003b6c <I2C_Slave_STOPF+0x234>
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	2b22      	cmp	r3, #34	; 0x22
 8003b6a:	d10d      	bne.n	8003b88 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff f81e 	bl	8002bc4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	08003dfd 	.word	0x08003dfd
 8003b94:	ffff0000 	.word	0xffff0000

08003b98 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003bb0:	7bbb      	ldrb	r3, [r7, #14]
 8003bb2:	2b10      	cmp	r3, #16
 8003bb4:	d002      	beq.n	8003bbc <I2C_ITError+0x24>
 8003bb6:	7bbb      	ldrb	r3, [r7, #14]
 8003bb8:	2b40      	cmp	r3, #64	; 0x40
 8003bba:	d10a      	bne.n	8003bd2 <I2C_ITError+0x3a>
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	2b22      	cmp	r3, #34	; 0x22
 8003bc0:	d107      	bne.n	8003bd2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bd8:	2b28      	cmp	r3, #40	; 0x28
 8003bda:	d107      	bne.n	8003bec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2228      	movs	r2, #40	; 0x28
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003bea:	e015      	b.n	8003c18 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bfa:	d00a      	beq.n	8003c12 <I2C_ITError+0x7a>
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b60      	cmp	r3, #96	; 0x60
 8003c00:	d007      	beq.n	8003c12 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c26:	d161      	bne.n	8003cec <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c36:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d020      	beq.n	8003c86 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c48:	4a6a      	ldr	r2, [pc, #424]	; (8003df4 <I2C_ITError+0x25c>)
 8003c4a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fe f9fd 	bl	8002050 <HAL_DMA_Abort_IT>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 8089 	beq.w	8003d70 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0201 	bic.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c80:	4610      	mov	r0, r2
 8003c82:	4798      	blx	r3
 8003c84:	e074      	b.n	8003d70 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	4a5a      	ldr	r2, [pc, #360]	; (8003df4 <I2C_ITError+0x25c>)
 8003c8c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe f9dc 	bl	8002050 <HAL_DMA_Abort_IT>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d068      	beq.n	8003d70 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d10b      	bne.n	8003cc4 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0201 	bic.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4798      	blx	r3
 8003cea:	e041      	b.n	8003d70 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b60      	cmp	r3, #96	; 0x60
 8003cf6:	d125      	bne.n	8003d44 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d10:	2b40      	cmp	r3, #64	; 0x40
 8003d12:	d10b      	bne.n	8003d2c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0201 	bic.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7fe ff7b 	bl	8002c38 <HAL_I2C_AbortCpltCallback>
 8003d42:	e015      	b.n	8003d70 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4e:	2b40      	cmp	r3, #64	; 0x40
 8003d50:	d10b      	bne.n	8003d6a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fe ff5b 	bl	8002c26 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10e      	bne.n	8003d9e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d104      	bne.n	8003d9e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dac:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db4:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d113      	bne.n	8003dea <I2C_ITError+0x252>
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	2b28      	cmp	r3, #40	; 0x28
 8003dc6:	d110      	bne.n	8003dea <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a0b      	ldr	r2, [pc, #44]	; (8003df8 <I2C_ITError+0x260>)
 8003dcc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7fe ff03 	bl	8002bf0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	08003dfd 	.word	0x08003dfd
 8003df8:	ffff0000 	.word	0xffff0000

08003dfc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e14:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e16:	4b4b      	ldr	r3, [pc, #300]	; (8003f44 <I2C_DMAAbort+0x148>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	08db      	lsrs	r3, r3, #3
 8003e1c:	4a4a      	ldr	r2, [pc, #296]	; (8003f48 <I2C_DMAAbort+0x14c>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	0a1a      	lsrs	r2, r3, #8
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	00da      	lsls	r2, r3, #3
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	f043 0220 	orr.w	r2, r3, #32
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003e42:	e00a      	b.n	8003e5a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e58:	d0ea      	beq.n	8003e30 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e66:	2200      	movs	r2, #0
 8003e68:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e76:	2200      	movs	r2, #0
 8003e78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e88:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	2200      	movs	r2, #0
 8003eae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0201 	bic.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b60      	cmp	r3, #96	; 0x60
 8003eca:	d10e      	bne.n	8003eea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ee2:	6978      	ldr	r0, [r7, #20]
 8003ee4:	f7fe fea8 	bl	8002c38 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ee8:	e027      	b.n	8003f3a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003eea:	7cfb      	ldrb	r3, [r7, #19]
 8003eec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ef0:	2b28      	cmp	r3, #40	; 0x28
 8003ef2:	d117      	bne.n	8003f24 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f12:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2200      	movs	r2, #0
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2228      	movs	r2, #40	; 0x28
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f22:	e007      	b.n	8003f34 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003f34:	6978      	ldr	r0, [r7, #20]
 8003f36:	f7fe fe76 	bl	8002c26 <HAL_I2C_ErrorCallback>
}
 8003f3a:	bf00      	nop
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20000018 	.word	0x20000018
 8003f48:	14f8b589 	.word	0x14f8b589

08003f4c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f58:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	08db      	lsrs	r3, r3, #3
 8003f5e:	4a13      	ldr	r2, [pc, #76]	; (8003fac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	0a1a      	lsrs	r2, r3, #8
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d107      	bne.n	8003f8a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f043 0220 	orr.w	r2, r3, #32
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e008      	b.n	8003f9c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f98:	d0e9      	beq.n	8003f6e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc80      	pop	{r7}
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000018 	.word	0x20000018
 8003fac:	14f8b589 	.word	0x14f8b589

08003fb0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003fc0:	d103      	bne.n	8003fca <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003fc8:	e007      	b.n	8003fda <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003fd2:	d102      	bne.n	8003fda <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2208      	movs	r2, #8
 8003fd8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e02b      	b.n	800404e <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003ffe:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f245 5255 	movw	r2, #21845	; 0x5555
 8004008:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6852      	ldr	r2, [r2, #4]
 8004012:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6892      	ldr	r2, [r2, #8]
 800401c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800401e:	f7fd fc9b 	bl	8001958 <HAL_GetTick>
 8004022:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8004024:	e008      	b.n	8004038 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004026:	f7fd fc97 	bl	8001958 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b26      	cmp	r3, #38	; 0x26
 8004032:	d901      	bls.n	8004038 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e00a      	b.n	800404e <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f1      	bne.n	8004026 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800404a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004056:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004058:	b08b      	sub	sp, #44	; 0x2c
 800405a:	af06      	add	r7, sp, #24
 800405c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0fd      	b.n	8004264 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d106      	bne.n	8004082 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f006 f97d 	bl	800a37c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2203      	movs	r2, #3
 8004086:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f002 fbec 	bl	800686c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	603b      	str	r3, [r7, #0]
 800409a:	687e      	ldr	r6, [r7, #4]
 800409c:	466d      	mov	r5, sp
 800409e:	f106 0410 	add.w	r4, r6, #16
 80040a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	602b      	str	r3, [r5, #0]
 80040aa:	1d33      	adds	r3, r6, #4
 80040ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040ae:	6838      	ldr	r0, [r7, #0]
 80040b0:	f002 fbb6 	bl	8006820 <USB_CoreInit>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d005      	beq.n	80040c6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2202      	movs	r2, #2
 80040be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e0ce      	b.n	8004264 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2100      	movs	r1, #0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f002 fbe7 	bl	80068a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040d2:	2300      	movs	r3, #0
 80040d4:	73fb      	strb	r3, [r7, #15]
 80040d6:	e04c      	b.n	8004172 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	440b      	add	r3, r1
 80040e8:	3301      	adds	r3, #1
 80040ea:	2201      	movs	r2, #1
 80040ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	440b      	add	r3, r1
 80040fe:	7bfa      	ldrb	r2, [r7, #15]
 8004100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004102:	7bfa      	ldrb	r2, [r7, #15]
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	b298      	uxth	r0, r3
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	440b      	add	r3, r1
 8004114:	3336      	adds	r3, #54	; 0x36
 8004116:	4602      	mov	r2, r0
 8004118:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	440b      	add	r3, r1
 800412a:	3303      	adds	r3, #3
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004130:	7bfa      	ldrb	r2, [r7, #15]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	440b      	add	r3, r1
 800413e:	3338      	adds	r3, #56	; 0x38
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004144:	7bfa      	ldrb	r2, [r7, #15]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	440b      	add	r3, r1
 8004152:	333c      	adds	r3, #60	; 0x3c
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004158:	7bfa      	ldrb	r2, [r7, #15]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	440b      	add	r3, r1
 8004166:	3340      	adds	r3, #64	; 0x40
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	3301      	adds	r3, #1
 8004170:	73fb      	strb	r3, [r7, #15]
 8004172:	7bfa      	ldrb	r2, [r7, #15]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	429a      	cmp	r2, r3
 800417a:	d3ad      	bcc.n	80040d8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800417c:	2300      	movs	r3, #0
 800417e:	73fb      	strb	r3, [r7, #15]
 8004180:	e044      	b.n	800420c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004182:	7bfa      	ldrb	r2, [r7, #15]
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	440b      	add	r3, r1
 8004190:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004194:	2200      	movs	r2, #0
 8004196:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004198:	7bfa      	ldrb	r2, [r7, #15]
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	440b      	add	r3, r1
 80041a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041aa:	7bfa      	ldrb	r2, [r7, #15]
 80041ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041ae:	7bfa      	ldrb	r2, [r7, #15]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	440b      	add	r3, r1
 80041bc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041c4:	7bfa      	ldrb	r2, [r7, #15]
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	440b      	add	r3, r1
 80041d2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041da:	7bfa      	ldrb	r2, [r7, #15]
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	440b      	add	r3, r1
 80041e8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041f0:	7bfa      	ldrb	r2, [r7, #15]
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	440b      	add	r3, r1
 80041fe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	3301      	adds	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
 800420c:	7bfa      	ldrb	r2, [r7, #15]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	429a      	cmp	r2, r3
 8004214:	d3b5      	bcc.n	8004182 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	687e      	ldr	r6, [r7, #4]
 800421e:	466d      	mov	r5, sp
 8004220:	f106 0410 	add.w	r4, r6, #16
 8004224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	602b      	str	r3, [r5, #0]
 800422c:	1d33      	adds	r3, r6, #4
 800422e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004230:	6838      	ldr	r0, [r7, #0]
 8004232:	f002 fb41 	bl	80068b8 <USB_DevInit>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e00d      	b.n	8004264 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f004 fadb 	bl	8008818 <USB_DevDisconnect>

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800426c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_PCD_Start+0x16>
 800427e:	2302      	movs	r3, #2
 8004280:	e016      	b.n	80042b0 <HAL_PCD_Start+0x44>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f002 fad6 	bl	8006840 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004294:	2101      	movs	r1, #1
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f006 fae3 	bl	800a862 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f004 faaf 	bl	8008804 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f004 fab1 	bl	800882c <USB_ReadInterrupts>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d4:	d102      	bne.n	80042dc <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fb61 	bl	800499e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f004 faa3 	bl	800882c <USB_ReadInterrupts>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f0:	d112      	bne.n	8004318 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004304:	b292      	uxth	r2, r2
 8004306:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f006 f8b1 	bl	800a472 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004310:	2100      	movs	r1, #0
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f925 	bl	8004562 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f004 fa85 	bl	800882c <USB_ReadInterrupts>
 8004322:	4603      	mov	r3, r0
 8004324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800432c:	d10b      	bne.n	8004346 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004336:	b29a      	uxth	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004340:	b292      	uxth	r2, r2
 8004342:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f004 fa6e 	bl	800882c <USB_ReadInterrupts>
 8004350:	4603      	mov	r3, r0
 8004352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800435a:	d10b      	bne.n	8004374 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004364:	b29a      	uxth	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800436e:	b292      	uxth	r2, r2
 8004370:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f004 fa57 	bl	800882c <USB_ReadInterrupts>
 800437e:	4603      	mov	r3, r0
 8004380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004388:	d126      	bne.n	80043d8 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004392:	b29a      	uxth	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0204 	bic.w	r2, r2, #4
 800439c:	b292      	uxth	r2, r2
 800439e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0208 	bic.w	r2, r2, #8
 80043b4:	b292      	uxth	r2, r2
 80043b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f006 f892 	bl	800a4e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043d2:	b292      	uxth	r2, r2
 80043d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f004 fa25 	bl	800882c <USB_ReadInterrupts>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ec:	f040 8084 	bne.w	80044f8 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80043f0:	2300      	movs	r3, #0
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e011      	b.n	800441a <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	7ffb      	ldrb	r3, [r7, #31]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	441a      	add	r2, r3
 8004402:	7ffb      	ldrb	r3, [r7, #31]
 8004404:	8812      	ldrh	r2, [r2, #0]
 8004406:	b292      	uxth	r2, r2
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	f107 0120 	add.w	r1, r7, #32
 800440e:	440b      	add	r3, r1
 8004410:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004414:	7ffb      	ldrb	r3, [r7, #31]
 8004416:	3301      	adds	r3, #1
 8004418:	77fb      	strb	r3, [r7, #31]
 800441a:	7ffb      	ldrb	r3, [r7, #31]
 800441c:	2b07      	cmp	r3, #7
 800441e:	d9ea      	bls.n	80043f6 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004428:	b29a      	uxth	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	b292      	uxth	r2, r2
 8004434:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004440:	b29a      	uxth	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	b292      	uxth	r2, r2
 800444c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004450:	bf00      	nop
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800445a:	b29b      	uxth	r3, r3
 800445c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f6      	beq.n	8004452 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800446c:	b29a      	uxth	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004476:	b292      	uxth	r2, r2
 8004478:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800447c:	2300      	movs	r3, #0
 800447e:	77fb      	strb	r3, [r7, #31]
 8004480:	e010      	b.n	80044a4 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004482:	7ffb      	ldrb	r3, [r7, #31]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	4611      	mov	r1, r2
 800448a:	7ffa      	ldrb	r2, [r7, #31]
 800448c:	0092      	lsls	r2, r2, #2
 800448e:	440a      	add	r2, r1
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	f107 0120 	add.w	r1, r7, #32
 8004496:	440b      	add	r3, r1
 8004498:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800449c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800449e:	7ffb      	ldrb	r3, [r7, #31]
 80044a0:	3301      	adds	r3, #1
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	7ffb      	ldrb	r3, [r7, #31]
 80044a6:	2b07      	cmp	r3, #7
 80044a8:	d9eb      	bls.n	8004482 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0208 	orr.w	r2, r2, #8
 80044bc:	b292      	uxth	r2, r2
 80044be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044d4:	b292      	uxth	r2, r2
 80044d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0204 	orr.w	r2, r2, #4
 80044ec:	b292      	uxth	r2, r2
 80044ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f005 ffdc 	bl	800a4b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f004 f995 	bl	800882c <USB_ReadInterrupts>
 8004502:	4603      	mov	r3, r0
 8004504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800450c:	d10e      	bne.n	800452c <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004520:	b292      	uxth	r2, r2
 8004522:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f005 ff95 	bl	800a456 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f004 f97b 	bl	800882c <USB_ReadInterrupts>
 8004536:	4603      	mov	r3, r0
 8004538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004540:	d10b      	bne.n	800455a <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800454a:	b29a      	uxth	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004554:	b292      	uxth	r2, r2
 8004556:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800455a:	bf00      	nop
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b082      	sub	sp, #8
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	460b      	mov	r3, r1
 800456c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_PCD_SetAddress+0x1a>
 8004578:	2302      	movs	r3, #2
 800457a:	e013      	b.n	80045a4 <HAL_PCD_SetAddress+0x42>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	78fa      	ldrb	r2, [r7, #3]
 8004588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	78fa      	ldrb	r2, [r7, #3]
 8004592:	4611      	mov	r1, r2
 8004594:	4618      	mov	r0, r3
 8004596:	f004 f922 	bl	80087de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	4608      	mov	r0, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	461a      	mov	r2, r3
 80045ba:	4603      	mov	r3, r0
 80045bc:	70fb      	strb	r3, [r7, #3]
 80045be:	460b      	mov	r3, r1
 80045c0:	803b      	strh	r3, [r7, #0]
 80045c2:	4613      	mov	r3, r2
 80045c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	da0e      	bge.n	80045f0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045d2:	78fb      	ldrb	r3, [r7, #3]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	4613      	mov	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	4413      	add	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2201      	movs	r2, #1
 80045ec:	705a      	strb	r2, [r3, #1]
 80045ee:	e00e      	b.n	800460e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	f003 0207 	and.w	r2, r3, #7
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	4413      	add	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	b2da      	uxtb	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800461a:	883a      	ldrh	r2, [r7, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	78ba      	ldrb	r2, [r7, #2]
 8004624:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	785b      	ldrb	r3, [r3, #1]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d004      	beq.n	8004638 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004638:	78bb      	ldrb	r3, [r7, #2]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d102      	bne.n	8004644 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_PCD_EP_Open+0xa6>
 800464e:	2302      	movs	r3, #2
 8004650:	e00e      	b.n	8004670 <HAL_PCD_EP_Open+0xc4>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68f9      	ldr	r1, [r7, #12]
 8004660:	4618      	mov	r0, r3
 8004662:	f002 f949 	bl	80068f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800466e:	7afb      	ldrb	r3, [r7, #11]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004688:	2b00      	cmp	r3, #0
 800468a:	da0e      	bge.n	80046aa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	4413      	add	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	705a      	strb	r2, [r3, #1]
 80046a8:	e00e      	b.n	80046c8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046aa:	78fb      	ldrb	r3, [r7, #3]
 80046ac:	f003 0207 	and.w	r2, r3, #7
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	4413      	add	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_PCD_EP_Close+0x6a>
 80046de:	2302      	movs	r3, #2
 80046e0:	e00e      	b.n	8004700 <HAL_PCD_EP_Close+0x88>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68f9      	ldr	r1, [r7, #12]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f002 fc6b 	bl	8006fcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	607a      	str	r2, [r7, #4]
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	460b      	mov	r3, r1
 8004716:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004718:	7afb      	ldrb	r3, [r7, #11]
 800471a:	f003 0207 	and.w	r2, r3, #7
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4413      	add	r3, r2
 800472e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2200      	movs	r2, #0
 8004740:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2200      	movs	r2, #0
 8004746:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004748:	7afb      	ldrb	r3, [r7, #11]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	b2da      	uxtb	r2, r3
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004754:	7afb      	ldrb	r3, [r7, #11]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6979      	ldr	r1, [r7, #20]
 8004764:	4618      	mov	r0, r3
 8004766:	f002 fe1d 	bl	80073a4 <USB_EPStartXfer>
 800476a:	e005      	b.n	8004778 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6979      	ldr	r1, [r7, #20]
 8004772:	4618      	mov	r0, r3
 8004774:	f002 fe16 	bl	80073a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	460b      	mov	r3, r1
 800478c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	f003 0207 	and.w	r2, r3, #7
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	4613      	mov	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	440b      	add	r3, r1
 80047a0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80047a4:	681b      	ldr	r3, [r3, #0]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	607a      	str	r2, [r7, #4]
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	460b      	mov	r3, r1
 80047be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047c0:	7afb      	ldrb	r3, [r7, #11]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2200      	movs	r2, #0
 80047f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2201      	movs	r2, #1
 80047fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047fc:	7afb      	ldrb	r3, [r7, #11]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	b2da      	uxtb	r2, r3
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004808:	7afb      	ldrb	r3, [r7, #11]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6979      	ldr	r1, [r7, #20]
 8004818:	4618      	mov	r0, r3
 800481a:	f002 fdc3 	bl	80073a4 <USB_EPStartXfer>
 800481e:	e005      	b.n	800482c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6979      	ldr	r1, [r7, #20]
 8004826:	4618      	mov	r0, r3
 8004828:	f002 fdbc 	bl	80073a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	460b      	mov	r3, r1
 8004840:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	f003 0207 	and.w	r2, r3, #7
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	429a      	cmp	r2, r3
 800484e:	d901      	bls.n	8004854 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e04c      	b.n	80048ee <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004858:	2b00      	cmp	r3, #0
 800485a:	da0e      	bge.n	800487a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	4413      	add	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	705a      	strb	r2, [r3, #1]
 8004878:	e00c      	b.n	8004894 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800487a:	78fa      	ldrb	r2, [r7, #3]
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	4413      	add	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_PCD_EP_SetStall+0x7e>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e01c      	b.n	80048ee <HAL_PCD_EP_SetStall+0xb8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68f9      	ldr	r1, [r7, #12]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f003 fe8e 	bl	80085e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d108      	bne.n	80048e4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f003 ffb3 	bl	800884a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b084      	sub	sp, #16
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	460b      	mov	r3, r1
 8004900:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004902:	78fb      	ldrb	r3, [r7, #3]
 8004904:	f003 020f 	and.w	r2, r3, #15
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	429a      	cmp	r2, r3
 800490e:	d901      	bls.n	8004914 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e040      	b.n	8004996 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004914:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004918:	2b00      	cmp	r3, #0
 800491a:	da0e      	bge.n	800493a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	4413      	add	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	705a      	strb	r2, [r3, #1]
 8004938:	e00e      	b.n	8004958 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	f003 0207 	and.w	r2, r3, #7
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	4413      	add	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	b2da      	uxtb	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_PCD_EP_ClrStall+0x82>
 8004974:	2302      	movs	r3, #2
 8004976:	e00e      	b.n	8004996 <HAL_PCD_EP_ClrStall+0xa0>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68f9      	ldr	r1, [r7, #12]
 8004986:	4618      	mov	r0, r3
 8004988:	f003 fe7c 	bl	8008684 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b08e      	sub	sp, #56	; 0x38
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80049a6:	e2df      	b.n	8004f68 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049b0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80049b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80049be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f040 8158 	bne.w	8004c78 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80049c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d152      	bne.n	8004a78 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80049de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e2:	81fb      	strh	r3, [r7, #14]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	89fb      	ldrh	r3, [r7, #14]
 80049ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3328      	adds	r3, #40	; 0x28
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	461a      	mov	r2, r3
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	4413      	add	r3, r2
 8004a10:	3302      	adds	r3, #2
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6812      	ldr	r2, [r2, #0]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	695a      	ldr	r2, [r3, #20]
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	441a      	add	r2, r3
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004a36:	2100      	movs	r1, #0
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f005 fcf2 	bl	800a422 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 828e 	beq.w	8004f68 <PCD_EP_ISR_Handler+0x5ca>
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f040 8289 	bne.w	8004f68 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	b292      	uxth	r2, r2
 8004a6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a76:	e277      	b.n	8004f68 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004a88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d034      	beq.n	8004afc <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3306      	adds	r3, #6
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6812      	ldr	r2, [r2, #0]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	f003 ff09 	bl	80088e8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	823b      	strh	r3, [r7, #16]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	8a3a      	ldrh	r2, [r7, #16]
 8004aec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004af0:	b292      	uxth	r2, r2
 8004af2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f005 fc67 	bl	800a3c8 <HAL_PCD_SetupStageCallback>
 8004afa:	e235      	b.n	8004f68 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004afc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f280 8231 	bge.w	8004f68 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b12:	4013      	ands	r3, r2
 8004b14:	83bb      	strh	r3, [r7, #28]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	8bba      	ldrh	r2, [r7, #28]
 8004b1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b20:	b292      	uxth	r2, r2
 8004b22:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	4413      	add	r3, r2
 8004b38:	3306      	adds	r3, #6
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d019      	beq.n	8004b8c <PCD_EP_ISR_Handler+0x1ee>
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d015      	beq.n	8004b8c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6818      	ldr	r0, [r3, #0]
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	6959      	ldr	r1, [r3, #20]
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	f003 feb9 	bl	80088e8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	695a      	ldr	r2, [r3, #20]
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	441a      	add	r2, r3
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004b84:	2100      	movs	r1, #0
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f005 fc30 	bl	800a3ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	61bb      	str	r3, [r7, #24]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d112      	bne.n	8004bda <PCD_EP_ISR_Handler+0x23c>
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	801a      	strh	r2, [r3, #0]
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	801a      	strh	r2, [r3, #0]
 8004bd8:	e02f      	b.n	8004c3a <PCD_EP_ISR_Handler+0x29c>
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b3e      	cmp	r3, #62	; 0x3e
 8004be0:	d813      	bhi.n	8004c0a <PCD_EP_ISR_Handler+0x26c>
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	085b      	lsrs	r3, r3, #1
 8004be8:	633b      	str	r3, [r7, #48]	; 0x30
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <PCD_EP_ISR_Handler+0x25e>
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	633b      	str	r3, [r7, #48]	; 0x30
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	029b      	lsls	r3, r3, #10
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	801a      	strh	r2, [r3, #0]
 8004c08:	e017      	b.n	8004c3a <PCD_EP_ISR_Handler+0x29c>
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	633b      	str	r3, [r7, #48]	; 0x30
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f003 031f 	and.w	r3, r3, #31
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d102      	bne.n	8004c24 <PCD_EP_ISR_Handler+0x286>
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c20:	3b01      	subs	r3, #1
 8004c22:	633b      	str	r3, [r7, #48]	; 0x30
 8004c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	029b      	lsls	r3, r3, #10
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4a:	827b      	strh	r3, [r7, #18]
 8004c4c:	8a7b      	ldrh	r3, [r7, #18]
 8004c4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c52:	827b      	strh	r3, [r7, #18]
 8004c54:	8a7b      	ldrh	r3, [r7, #18]
 8004c56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c5a:	827b      	strh	r3, [r7, #18]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	8a7b      	ldrh	r3, [r7, #18]
 8004c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	8013      	strh	r3, [r2, #0]
 8004c76:	e177      	b.n	8004f68 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c8a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f280 80ea 	bge.w	8004e68 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004caa:	4013      	ands	r3, r2
 8004cac:	853b      	strh	r3, [r7, #40]	; 0x28
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004cbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cc2:	b292      	uxth	r2, r2
 8004cc4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004cc6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	4413      	add	r3, r2
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	7b1b      	ldrb	r3, [r3, #12]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d122      	bne.n	8004d2a <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3306      	adds	r3, #6
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d0c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004d0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8087 	beq.w	8004e24 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	6959      	ldr	r1, [r3, #20]
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	88da      	ldrh	r2, [r3, #6]
 8004d22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d24:	f003 fde0 	bl	80088e8 <USB_ReadPMA>
 8004d28:	e07c      	b.n	8004e24 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	78db      	ldrb	r3, [r3, #3]
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d108      	bne.n	8004d44 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004d32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d34:	461a      	mov	r2, r3
 8004d36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f923 	bl	8004f84 <HAL_PCD_EP_DB_Receive>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004d42:	e06f      	b.n	8004e24 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d021      	beq.n	8004de2 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	4413      	add	r3, r2
 8004db2:	3302      	adds	r3, #2
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6812      	ldr	r2, [r2, #0]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dc6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004dc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d02a      	beq.n	8004e24 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	6959      	ldr	r1, [r3, #20]
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	891a      	ldrh	r2, [r3, #8]
 8004dda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ddc:	f003 fd84 	bl	80088e8 <USB_ReadPMA>
 8004de0:	e020      	b.n	8004e24 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4413      	add	r3, r2
 8004df6:	3306      	adds	r3, #6
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6812      	ldr	r2, [r2, #0]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e0a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004e0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d008      	beq.n	8004e24 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	6959      	ldr	r1, [r3, #20]
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	895a      	ldrh	r2, [r3, #10]
 8004e1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e20:	f003 fd62 	bl	80088e8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e2a:	441a      	add	r2, r3
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	695a      	ldr	r2, [r3, #20]
 8004e34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e36:	441a      	add	r2, r3
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d004      	beq.n	8004e4e <PCD_EP_ISR_Handler+0x4b0>
 8004e44:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d206      	bcs.n	8004e5c <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	4619      	mov	r1, r3
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f005 fac9 	bl	800a3ec <HAL_PCD_DataOutStageCallback>
 8004e5a:	e005      	b.n	8004e68 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e62:	4618      	mov	r0, r3
 8004e64:	f002 fa9e 	bl	80073a4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004e68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d07a      	beq.n	8004f68 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8004e72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	4413      	add	r3, r2
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea0:	843b      	strh	r3, [r7, #32]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	441a      	add	r2, r3
 8004eb0:	8c3b      	ldrh	r3, [r7, #32]
 8004eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	78db      	ldrb	r3, [r3, #3]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d108      	bne.n	8004ed8 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d146      	bne.n	8004f5c <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004ece:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d141      	bne.n	8004f5c <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	4413      	add	r3, r2
 8004eec:	3302      	adds	r3, #2
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6812      	ldr	r2, [r2, #0]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f00:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	699a      	ldr	r2, [r3, #24]
 8004f06:	8bfb      	ldrh	r3, [r7, #30]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d906      	bls.n	8004f1a <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	699a      	ldr	r2, [r3, #24]
 8004f10:	8bfb      	ldrh	r3, [r7, #30]
 8004f12:	1ad2      	subs	r2, r2, r3
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	619a      	str	r2, [r3, #24]
 8004f18:	e002      	b.n	8004f20 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d106      	bne.n	8004f36 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f005 fa77 	bl	800a422 <HAL_PCD_DataInStageCallback>
 8004f34:	e018      	b.n	8004f68 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	8bfb      	ldrh	r3, [r7, #30]
 8004f3c:	441a      	add	r2, r3
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	69da      	ldr	r2, [r3, #28]
 8004f46:	8bfb      	ldrh	r3, [r7, #30]
 8004f48:	441a      	add	r2, r3
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f54:	4618      	mov	r0, r3
 8004f56:	f002 fa25 	bl	80073a4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004f5a:	e005      	b.n	8004f68 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004f5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f5e:	461a      	mov	r2, r3
 8004f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f91b 	bl	800519e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	b21b      	sxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f6ff ad17 	blt.w	80049a8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3738      	adds	r7, #56	; 0x38
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d07e      	beq.n	800509a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	4413      	add	r3, r2
 8004fb0:	3302      	adds	r3, #2
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fc4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	8b7b      	ldrh	r3, [r7, #26]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d306      	bcc.n	8004fde <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	699a      	ldr	r2, [r3, #24]
 8004fd4:	8b7b      	ldrh	r3, [r7, #26]
 8004fd6:	1ad2      	subs	r2, r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	619a      	str	r2, [r3, #24]
 8004fdc:	e002      	b.n	8004fe4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d123      	bne.n	8005034 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005006:	833b      	strh	r3, [r7, #24]
 8005008:	8b3b      	ldrh	r3, [r7, #24]
 800500a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800500e:	833b      	strh	r3, [r7, #24]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	461a      	mov	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	441a      	add	r2, r3
 800501e:	8b3b      	ldrh	r3, [r7, #24]
 8005020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800502c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005030:	b29b      	uxth	r3, r3
 8005032:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005034:	88fb      	ldrh	r3, [r7, #6]
 8005036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d01f      	beq.n	800507e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005058:	82fb      	strh	r3, [r7, #22]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	441a      	add	r2, r3
 8005068:	8afb      	ldrh	r3, [r7, #22]
 800506a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800506e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005076:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800507a:	b29b      	uxth	r3, r3
 800507c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800507e:	8b7b      	ldrh	r3, [r7, #26]
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8087 	beq.w	8005194 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	6959      	ldr	r1, [r3, #20]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	891a      	ldrh	r2, [r3, #8]
 8005092:	8b7b      	ldrh	r3, [r7, #26]
 8005094:	f003 fc28 	bl	80088e8 <USB_ReadPMA>
 8005098:	e07c      	b.n	8005194 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	461a      	mov	r2, r3
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	4413      	add	r3, r2
 80050ae:	3306      	adds	r3, #6
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	6812      	ldr	r2, [r2, #0]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050c2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	699a      	ldr	r2, [r3, #24]
 80050c8:	8b7b      	ldrh	r3, [r7, #26]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d306      	bcc.n	80050dc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	699a      	ldr	r2, [r3, #24]
 80050d2:	8b7b      	ldrh	r3, [r7, #26]
 80050d4:	1ad2      	subs	r2, r2, r3
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	619a      	str	r2, [r3, #24]
 80050da:	e002      	b.n	80050e2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2200      	movs	r2, #0
 80050e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d123      	bne.n	8005132 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	461a      	mov	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005104:	83fb      	strh	r3, [r7, #30]
 8005106:	8bfb      	ldrh	r3, [r7, #30]
 8005108:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800510c:	83fb      	strh	r3, [r7, #30]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	441a      	add	r2, r3
 800511c:	8bfb      	ldrh	r3, [r7, #30]
 800511e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800512a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512e:	b29b      	uxth	r3, r3
 8005130:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005132:	88fb      	ldrh	r3, [r7, #6]
 8005134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005138:	2b00      	cmp	r3, #0
 800513a:	d11f      	bne.n	800517c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b29b      	uxth	r3, r3
 800514e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005156:	83bb      	strh	r3, [r7, #28]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	461a      	mov	r2, r3
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	441a      	add	r2, r3
 8005166:	8bbb      	ldrh	r3, [r7, #28]
 8005168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800516c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005174:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005178:	b29b      	uxth	r3, r3
 800517a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800517c:	8b7b      	ldrh	r3, [r7, #26]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d008      	beq.n	8005194 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6959      	ldr	r1, [r3, #20]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	895a      	ldrh	r2, [r3, #10]
 800518e:	8b7b      	ldrh	r3, [r7, #26]
 8005190:	f003 fbaa 	bl	80088e8 <USB_ReadPMA>
    }
  }

  return count;
 8005194:	8b7b      	ldrh	r3, [r7, #26]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3720      	adds	r7, #32
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b092      	sub	sp, #72	; 0x48
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	4613      	mov	r3, r2
 80051aa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80051ac:	88fb      	ldrh	r3, [r7, #6]
 80051ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 8132 	beq.w	800541c <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	4413      	add	r3, r2
 80051cc:	3302      	adds	r3, #2
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051e0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	699a      	ldr	r2, [r3, #24]
 80051e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d906      	bls.n	80051fa <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	699a      	ldr	r2, [r3, #24]
 80051f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051f2:	1ad2      	subs	r2, r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	619a      	str	r2, [r3, #24]
 80051f8:	e002      	b.n	8005200 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2200      	movs	r2, #0
 80051fe:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d12c      	bne.n	8005262 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	4619      	mov	r1, r3
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f005 f907 	bl	800a422 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 822f 	beq.w	800567e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	b29b      	uxth	r3, r3
 8005232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	827b      	strh	r3, [r7, #18]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	441a      	add	r2, r3
 800524a:	8a7b      	ldrh	r3, [r7, #18]
 800524c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800525c:	b29b      	uxth	r3, r3
 800525e:	8013      	strh	r3, [r2, #0]
 8005260:	e20d      	b.n	800567e <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005262:	88fb      	ldrh	r3, [r7, #6]
 8005264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d01f      	beq.n	80052ac <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	461a      	mov	r2, r3
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	441a      	add	r2, r3
 8005296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800529c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	f040 81e3 	bne.w	800567e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	695a      	ldr	r2, [r3, #20]
 80052bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052be:	441a      	add	r2, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052ca:	441a      	add	r2, r3
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	6a1a      	ldr	r2, [r3, #32]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d309      	bcc.n	80052f0 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	6a1a      	ldr	r2, [r3, #32]
 80052e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e8:	1ad2      	subs	r2, r2, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	621a      	str	r2, [r3, #32]
 80052ee:	e014      	b.n	800531a <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d106      	bne.n	8005306 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80052f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052fa:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005304:	e009      	b.n	800531a <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2200      	movs	r2, #0
 8005318:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	785b      	ldrb	r3, [r3, #1]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d155      	bne.n	80053ce <HAL_PCD_EP_DB_Transmit+0x230>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	61bb      	str	r3, [r7, #24]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005330:	b29b      	uxth	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	4413      	add	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	011a      	lsls	r2, r3, #4
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	4413      	add	r3, r2
 8005344:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534c:	2b00      	cmp	r3, #0
 800534e:	d112      	bne.n	8005376 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800535a:	b29a      	uxth	r2, r3
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	801a      	strh	r2, [r3, #0]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800536a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800536e:	b29a      	uxth	r2, r3
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	801a      	strh	r2, [r3, #0]
 8005374:	e047      	b.n	8005406 <HAL_PCD_EP_DB_Transmit+0x268>
 8005376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005378:	2b3e      	cmp	r3, #62	; 0x3e
 800537a:	d811      	bhi.n	80053a0 <HAL_PCD_EP_DB_Transmit+0x202>
 800537c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	62bb      	str	r3, [r7, #40]	; 0x28
 8005382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <HAL_PCD_EP_DB_Transmit+0x1f4>
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538e:	3301      	adds	r3, #1
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	b29b      	uxth	r3, r3
 8005396:	029b      	lsls	r3, r3, #10
 8005398:	b29a      	uxth	r2, r3
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	801a      	strh	r2, [r3, #0]
 800539e:	e032      	b.n	8005406 <HAL_PCD_EP_DB_Transmit+0x268>
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d102      	bne.n	80053b6 <HAL_PCD_EP_DB_Transmit+0x218>
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	3b01      	subs	r3, #1
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	029b      	lsls	r3, r3, #10
 80053bc:	b29b      	uxth	r3, r3
 80053be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	801a      	strh	r2, [r3, #0]
 80053cc:	e01b      	b.n	8005406 <HAL_PCD_EP_DB_Transmit+0x268>
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	785b      	ldrb	r3, [r3, #1]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d117      	bne.n	8005406 <HAL_PCD_EP_DB_Transmit+0x268>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	623b      	str	r3, [r7, #32]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	461a      	mov	r2, r3
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	4413      	add	r3, r2
 80053ec:	623b      	str	r3, [r7, #32]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	011a      	lsls	r2, r3, #4
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	4413      	add	r3, r2
 80053f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053fc:	61fb      	str	r3, [r7, #28]
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	b29a      	uxth	r2, r3
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	6959      	ldr	r1, [r3, #20]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	891a      	ldrh	r2, [r3, #8]
 8005412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005414:	b29b      	uxth	r3, r3
 8005416:	f003 fa23 	bl	8008860 <USB_WritePMA>
 800541a:	e130      	b.n	800567e <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005424:	b29b      	uxth	r3, r3
 8005426:	461a      	mov	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	4413      	add	r3, r2
 8005430:	3306      	adds	r3, #6
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	6812      	ldr	r2, [r2, #0]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005444:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	699a      	ldr	r2, [r3, #24]
 800544a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800544c:	429a      	cmp	r2, r3
 800544e:	d306      	bcc.n	800545e <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	699a      	ldr	r2, [r3, #24]
 8005454:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005456:	1ad2      	subs	r2, r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	619a      	str	r2, [r3, #24]
 800545c:	e002      	b.n	8005464 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2200      	movs	r2, #0
 8005462:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d12c      	bne.n	80054c6 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	4619      	mov	r1, r3
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f004 ffd5 	bl	800a422 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005478:	88fb      	ldrh	r3, [r7, #6]
 800547a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800547e:	2b00      	cmp	r3, #0
 8005480:	f040 80fd 	bne.w	800567e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29b      	uxth	r3, r3
 8005496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	461a      	mov	r2, r3
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	441a      	add	r2, r3
 80054ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	8013      	strh	r3, [r2, #0]
 80054c4:	e0db      	b.n	800567e <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80054c6:	88fb      	ldrh	r3, [r7, #6]
 80054c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d11f      	bne.n	8005510 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	441a      	add	r2, r3
 80054fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80054fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550c:	b29b      	uxth	r3, r3
 800550e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005516:	2b01      	cmp	r3, #1
 8005518:	f040 80b1 	bne.w	800567e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	695a      	ldr	r2, [r3, #20]
 8005520:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005522:	441a      	add	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800552e:	441a      	add	r2, r3
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	6a1a      	ldr	r2, [r3, #32]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	429a      	cmp	r2, r3
 800553e:	d309      	bcc.n	8005554 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	6a1a      	ldr	r2, [r3, #32]
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	1ad2      	subs	r2, r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	621a      	str	r2, [r3, #32]
 8005552:	e014      	b.n	800557e <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d106      	bne.n	800556a <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 800555c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800555e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005568:	e009      	b.n	800557e <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2200      	movs	r2, #0
 8005574:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	637b      	str	r3, [r7, #52]	; 0x34
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	785b      	ldrb	r3, [r3, #1]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d155      	bne.n	8005638 <HAL_PCD_EP_DB_Transmit+0x49a>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	647b      	str	r3, [r7, #68]	; 0x44
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800559a:	b29b      	uxth	r3, r3
 800559c:	461a      	mov	r2, r3
 800559e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055a0:	4413      	add	r3, r2
 80055a2:	647b      	str	r3, [r7, #68]	; 0x44
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	011a      	lsls	r2, r3, #4
 80055aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ac:	4413      	add	r3, r2
 80055ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055b2:	643b      	str	r3, [r7, #64]	; 0x40
 80055b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d112      	bne.n	80055e0 <HAL_PCD_EP_DB_Transmit+0x442>
 80055ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c8:	801a      	strh	r2, [r3, #0]
 80055ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055d8:	b29a      	uxth	r2, r3
 80055da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	e044      	b.n	800566a <HAL_PCD_EP_DB_Transmit+0x4cc>
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	2b3e      	cmp	r3, #62	; 0x3e
 80055e4:	d811      	bhi.n	800560a <HAL_PCD_EP_DB_Transmit+0x46c>
 80055e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e8:	085b      	lsrs	r3, r3, #1
 80055ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_PCD_EP_DB_Transmit+0x45e>
 80055f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f8:	3301      	adds	r3, #1
 80055fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fe:	b29b      	uxth	r3, r3
 8005600:	029b      	lsls	r3, r3, #10
 8005602:	b29a      	uxth	r2, r3
 8005604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005606:	801a      	strh	r2, [r3, #0]
 8005608:	e02f      	b.n	800566a <HAL_PCD_EP_DB_Transmit+0x4cc>
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	095b      	lsrs	r3, r3, #5
 800560e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	2b00      	cmp	r3, #0
 8005618:	d102      	bne.n	8005620 <HAL_PCD_EP_DB_Transmit+0x482>
 800561a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561c:	3b01      	subs	r3, #1
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005622:	b29b      	uxth	r3, r3
 8005624:	029b      	lsls	r3, r3, #10
 8005626:	b29b      	uxth	r3, r3
 8005628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800562c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005630:	b29a      	uxth	r2, r3
 8005632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005634:	801a      	strh	r2, [r3, #0]
 8005636:	e018      	b.n	800566a <HAL_PCD_EP_DB_Transmit+0x4cc>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	785b      	ldrb	r3, [r3, #1]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d114      	bne.n	800566a <HAL_PCD_EP_DB_Transmit+0x4cc>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005648:	b29b      	uxth	r3, r3
 800564a:	461a      	mov	r2, r3
 800564c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564e:	4413      	add	r3, r2
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	011a      	lsls	r2, r3, #4
 8005658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565a:	4413      	add	r3, r2
 800565c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005660:	633b      	str	r3, [r7, #48]	; 0x30
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	b29a      	uxth	r2, r3
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	6959      	ldr	r1, [r3, #20]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	895a      	ldrh	r2, [r3, #10]
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	b29b      	uxth	r3, r3
 800567a:	f003 f8f1 	bl	8008860 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	b29b      	uxth	r3, r3
 8005690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005698:	823b      	strh	r3, [r7, #16]
 800569a:	8a3b      	ldrh	r3, [r7, #16]
 800569c:	f083 0310 	eor.w	r3, r3, #16
 80056a0:	823b      	strh	r3, [r7, #16]
 80056a2:	8a3b      	ldrh	r3, [r7, #16]
 80056a4:	f083 0320 	eor.w	r3, r3, #32
 80056a8:	823b      	strh	r3, [r7, #16]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	441a      	add	r2, r3
 80056b8:	8a3b      	ldrh	r3, [r7, #16]
 80056ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3748      	adds	r7, #72	; 0x48
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	607b      	str	r3, [r7, #4]
 80056e2:	460b      	mov	r3, r1
 80056e4:	817b      	strh	r3, [r7, #10]
 80056e6:	4613      	mov	r3, r2
 80056e8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80056ea:	897b      	ldrh	r3, [r7, #10]
 80056ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056f6:	897b      	ldrh	r3, [r7, #10]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	4613      	mov	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4413      	add	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	e009      	b.n	8005722 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800570e:	897a      	ldrh	r2, [r7, #10]
 8005710:	4613      	mov	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005722:	893b      	ldrh	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d107      	bne.n	8005738 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	2200      	movs	r2, #0
 800572c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	b29a      	uxth	r2, r3
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	80da      	strh	r2, [r3, #6]
 8005736:	e00b      	b.n	8005750 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2201      	movs	r2, #1
 800573c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	b29a      	uxth	r2, r3
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	0c1b      	lsrs	r3, r3, #16
 800574a:	b29a      	uxth	r2, r3
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e26c      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 8087 	beq.w	800588a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800577c:	4b92      	ldr	r3, [pc, #584]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f003 030c 	and.w	r3, r3, #12
 8005784:	2b04      	cmp	r3, #4
 8005786:	d00c      	beq.n	80057a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005788:	4b8f      	ldr	r3, [pc, #572]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f003 030c 	and.w	r3, r3, #12
 8005790:	2b08      	cmp	r3, #8
 8005792:	d112      	bne.n	80057ba <HAL_RCC_OscConfig+0x5e>
 8005794:	4b8c      	ldr	r3, [pc, #560]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800579c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a0:	d10b      	bne.n	80057ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a2:	4b89      	ldr	r3, [pc, #548]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d06c      	beq.n	8005888 <HAL_RCC_OscConfig+0x12c>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d168      	bne.n	8005888 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e246      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c2:	d106      	bne.n	80057d2 <HAL_RCC_OscConfig+0x76>
 80057c4:	4b80      	ldr	r3, [pc, #512]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a7f      	ldr	r2, [pc, #508]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80057ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	e02e      	b.n	8005830 <HAL_RCC_OscConfig+0xd4>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10c      	bne.n	80057f4 <HAL_RCC_OscConfig+0x98>
 80057da:	4b7b      	ldr	r3, [pc, #492]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a7a      	ldr	r2, [pc, #488]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80057e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	4b78      	ldr	r3, [pc, #480]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a77      	ldr	r2, [pc, #476]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80057ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	e01d      	b.n	8005830 <HAL_RCC_OscConfig+0xd4>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057fc:	d10c      	bne.n	8005818 <HAL_RCC_OscConfig+0xbc>
 80057fe:	4b72      	ldr	r3, [pc, #456]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a71      	ldr	r2, [pc, #452]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	4b6f      	ldr	r3, [pc, #444]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a6e      	ldr	r2, [pc, #440]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	e00b      	b.n	8005830 <HAL_RCC_OscConfig+0xd4>
 8005818:	4b6b      	ldr	r3, [pc, #428]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a6a      	ldr	r2, [pc, #424]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 800581e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	4b68      	ldr	r3, [pc, #416]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a67      	ldr	r2, [pc, #412]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 800582a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800582e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d013      	beq.n	8005860 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005838:	f7fc f88e 	bl	8001958 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005840:	f7fc f88a 	bl	8001958 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b64      	cmp	r3, #100	; 0x64
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e1fa      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005852:	4b5d      	ldr	r3, [pc, #372]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0xe4>
 800585e:	e014      	b.n	800588a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005860:	f7fc f87a 	bl	8001958 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005868:	f7fc f876 	bl	8001958 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b64      	cmp	r3, #100	; 0x64
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e1e6      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800587a:	4b53      	ldr	r3, [pc, #332]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0x10c>
 8005886:	e000      	b.n	800588a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d063      	beq.n	800595e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005896:	4b4c      	ldr	r3, [pc, #304]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f003 030c 	and.w	r3, r3, #12
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00b      	beq.n	80058ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80058a2:	4b49      	ldr	r3, [pc, #292]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f003 030c 	and.w	r3, r3, #12
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d11c      	bne.n	80058e8 <HAL_RCC_OscConfig+0x18c>
 80058ae:	4b46      	ldr	r3, [pc, #280]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d116      	bne.n	80058e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ba:	4b43      	ldr	r3, [pc, #268]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_RCC_OscConfig+0x176>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d001      	beq.n	80058d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e1ba      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d2:	4b3d      	ldr	r3, [pc, #244]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	4939      	ldr	r1, [pc, #228]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058e6:	e03a      	b.n	800595e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d020      	beq.n	8005932 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058f0:	4b36      	ldr	r3, [pc, #216]	; (80059cc <HAL_RCC_OscConfig+0x270>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f6:	f7fc f82f 	bl	8001958 <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058fc:	e008      	b.n	8005910 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058fe:	f7fc f82b 	bl	8001958 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e19b      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005910:	4b2d      	ldr	r3, [pc, #180]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0f0      	beq.n	80058fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800591c:	4b2a      	ldr	r3, [pc, #168]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	4927      	ldr	r1, [pc, #156]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 800592c:	4313      	orrs	r3, r2
 800592e:	600b      	str	r3, [r1, #0]
 8005930:	e015      	b.n	800595e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005932:	4b26      	ldr	r3, [pc, #152]	; (80059cc <HAL_RCC_OscConfig+0x270>)
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005938:	f7fc f80e 	bl	8001958 <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005940:	f7fc f80a 	bl	8001958 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e17a      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005952:	4b1d      	ldr	r3, [pc, #116]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1f0      	bne.n	8005940 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d03a      	beq.n	80059e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d019      	beq.n	80059a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005972:	4b17      	ldr	r3, [pc, #92]	; (80059d0 <HAL_RCC_OscConfig+0x274>)
 8005974:	2201      	movs	r2, #1
 8005976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005978:	f7fb ffee 	bl	8001958 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005980:	f7fb ffea 	bl	8001958 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e15a      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005992:	4b0d      	ldr	r3, [pc, #52]	; (80059c8 <HAL_RCC_OscConfig+0x26c>)
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800599e:	2001      	movs	r0, #1
 80059a0:	f000 fac6 	bl	8005f30 <RCC_Delay>
 80059a4:	e01c      	b.n	80059e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a6:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <HAL_RCC_OscConfig+0x274>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ac:	f7fb ffd4 	bl	8001958 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b2:	e00f      	b.n	80059d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059b4:	f7fb ffd0 	bl	8001958 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d908      	bls.n	80059d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e140      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
 80059c6:	bf00      	nop
 80059c8:	40021000 	.word	0x40021000
 80059cc:	42420000 	.word	0x42420000
 80059d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059d4:	4b9e      	ldr	r3, [pc, #632]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e9      	bne.n	80059b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 80a6 	beq.w	8005b3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ee:	2300      	movs	r3, #0
 80059f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059f2:	4b97      	ldr	r3, [pc, #604]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10d      	bne.n	8005a1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059fe:	4b94      	ldr	r3, [pc, #592]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	4a93      	ldr	r2, [pc, #588]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a08:	61d3      	str	r3, [r2, #28]
 8005a0a:	4b91      	ldr	r3, [pc, #580]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a12:	60bb      	str	r3, [r7, #8]
 8005a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a16:	2301      	movs	r3, #1
 8005a18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a1a:	4b8e      	ldr	r3, [pc, #568]	; (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d118      	bne.n	8005a58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a26:	4b8b      	ldr	r3, [pc, #556]	; (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a8a      	ldr	r2, [pc, #552]	; (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a32:	f7fb ff91 	bl	8001958 <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a3a:	f7fb ff8d 	bl	8001958 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b64      	cmp	r3, #100	; 0x64
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e0fd      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a4c:	4b81      	ldr	r3, [pc, #516]	; (8005c54 <HAL_RCC_OscConfig+0x4f8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0f0      	beq.n	8005a3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d106      	bne.n	8005a6e <HAL_RCC_OscConfig+0x312>
 8005a60:	4b7b      	ldr	r3, [pc, #492]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	4a7a      	ldr	r2, [pc, #488]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	6213      	str	r3, [r2, #32]
 8005a6c:	e02d      	b.n	8005aca <HAL_RCC_OscConfig+0x36e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10c      	bne.n	8005a90 <HAL_RCC_OscConfig+0x334>
 8005a76:	4b76      	ldr	r3, [pc, #472]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	4a75      	ldr	r2, [pc, #468]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	6213      	str	r3, [r2, #32]
 8005a82:	4b73      	ldr	r3, [pc, #460]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	4a72      	ldr	r2, [pc, #456]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a88:	f023 0304 	bic.w	r3, r3, #4
 8005a8c:	6213      	str	r3, [r2, #32]
 8005a8e:	e01c      	b.n	8005aca <HAL_RCC_OscConfig+0x36e>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	2b05      	cmp	r3, #5
 8005a96:	d10c      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x356>
 8005a98:	4b6d      	ldr	r3, [pc, #436]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	4a6c      	ldr	r2, [pc, #432]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005a9e:	f043 0304 	orr.w	r3, r3, #4
 8005aa2:	6213      	str	r3, [r2, #32]
 8005aa4:	4b6a      	ldr	r3, [pc, #424]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	4a69      	ldr	r2, [pc, #420]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005aaa:	f043 0301 	orr.w	r3, r3, #1
 8005aae:	6213      	str	r3, [r2, #32]
 8005ab0:	e00b      	b.n	8005aca <HAL_RCC_OscConfig+0x36e>
 8005ab2:	4b67      	ldr	r3, [pc, #412]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	4a66      	ldr	r2, [pc, #408]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005ab8:	f023 0301 	bic.w	r3, r3, #1
 8005abc:	6213      	str	r3, [r2, #32]
 8005abe:	4b64      	ldr	r3, [pc, #400]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	4a63      	ldr	r2, [pc, #396]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005ac4:	f023 0304 	bic.w	r3, r3, #4
 8005ac8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d015      	beq.n	8005afe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ad2:	f7fb ff41 	bl	8001958 <HAL_GetTick>
 8005ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad8:	e00a      	b.n	8005af0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ada:	f7fb ff3d 	bl	8001958 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e0ab      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005af0:	4b57      	ldr	r3, [pc, #348]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0ee      	beq.n	8005ada <HAL_RCC_OscConfig+0x37e>
 8005afc:	e014      	b.n	8005b28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005afe:	f7fb ff2b 	bl	8001958 <HAL_GetTick>
 8005b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b04:	e00a      	b.n	8005b1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b06:	f7fb ff27 	bl	8001958 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e095      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b1c:	4b4c      	ldr	r3, [pc, #304]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1ee      	bne.n	8005b06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d105      	bne.n	8005b3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b2e:	4b48      	ldr	r3, [pc, #288]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	4a47      	ldr	r2, [pc, #284]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 8081 	beq.w	8005c46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b44:	4b42      	ldr	r3, [pc, #264]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f003 030c 	and.w	r3, r3, #12
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d061      	beq.n	8005c14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d146      	bne.n	8005be6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b58:	4b3f      	ldr	r3, [pc, #252]	; (8005c58 <HAL_RCC_OscConfig+0x4fc>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b5e:	f7fb fefb 	bl	8001958 <HAL_GetTick>
 8005b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b64:	e008      	b.n	8005b78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b66:	f7fb fef7 	bl	8001958 <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d901      	bls.n	8005b78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e067      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b78:	4b35      	ldr	r3, [pc, #212]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1f0      	bne.n	8005b66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b8c:	d108      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b8e:	4b30      	ldr	r3, [pc, #192]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	492d      	ldr	r1, [pc, #180]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ba0:	4b2b      	ldr	r3, [pc, #172]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a19      	ldr	r1, [r3, #32]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	4927      	ldr	r1, [pc, #156]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bb8:	4b27      	ldr	r3, [pc, #156]	; (8005c58 <HAL_RCC_OscConfig+0x4fc>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bbe:	f7fb fecb 	bl	8001958 <HAL_GetTick>
 8005bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc6:	f7fb fec7 	bl	8001958 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e037      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bd8:	4b1d      	ldr	r3, [pc, #116]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0f0      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x46a>
 8005be4:	e02f      	b.n	8005c46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be6:	4b1c      	ldr	r3, [pc, #112]	; (8005c58 <HAL_RCC_OscConfig+0x4fc>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bec:	f7fb feb4 	bl	8001958 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf4:	f7fb feb0 	bl	8001958 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e020      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c06:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f0      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x498>
 8005c12:	e018      	b.n	8005c46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e013      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <HAL_RCC_OscConfig+0x4f4>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d106      	bne.n	8005c42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d001      	beq.n	8005c46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40021000 	.word	0x40021000
 8005c54:	40007000 	.word	0x40007000
 8005c58:	42420060 	.word	0x42420060

08005c5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0d0      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c70:	4b6a      	ldr	r3, [pc, #424]	; (8005e1c <HAL_RCC_ClockConfig+0x1c0>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d910      	bls.n	8005ca0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c7e:	4b67      	ldr	r3, [pc, #412]	; (8005e1c <HAL_RCC_ClockConfig+0x1c0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f023 0207 	bic.w	r2, r3, #7
 8005c86:	4965      	ldr	r1, [pc, #404]	; (8005e1c <HAL_RCC_ClockConfig+0x1c0>)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c8e:	4b63      	ldr	r3, [pc, #396]	; (8005e1c <HAL_RCC_ClockConfig+0x1c0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d001      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e0b8      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d020      	beq.n	8005cee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d005      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cb8:	4b59      	ldr	r3, [pc, #356]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	4a58      	ldr	r2, [pc, #352]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d005      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cd0:	4b53      	ldr	r3, [pc, #332]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	4a52      	ldr	r2, [pc, #328]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005cda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cdc:	4b50      	ldr	r3, [pc, #320]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	494d      	ldr	r1, [pc, #308]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d040      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d107      	bne.n	8005d12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d02:	4b47      	ldr	r3, [pc, #284]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d115      	bne.n	8005d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e07f      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d107      	bne.n	8005d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d1a:	4b41      	ldr	r3, [pc, #260]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d109      	bne.n	8005d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e073      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d2a:	4b3d      	ldr	r3, [pc, #244]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e06b      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d3a:	4b39      	ldr	r3, [pc, #228]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f023 0203 	bic.w	r2, r3, #3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	4936      	ldr	r1, [pc, #216]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d4c:	f7fb fe04 	bl	8001958 <HAL_GetTick>
 8005d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d52:	e00a      	b.n	8005d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d54:	f7fb fe00 	bl	8001958 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e053      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6a:	4b2d      	ldr	r3, [pc, #180]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f003 020c 	and.w	r2, r3, #12
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d1eb      	bne.n	8005d54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d7c:	4b27      	ldr	r3, [pc, #156]	; (8005e1c <HAL_RCC_ClockConfig+0x1c0>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d210      	bcs.n	8005dac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d8a:	4b24      	ldr	r3, [pc, #144]	; (8005e1c <HAL_RCC_ClockConfig+0x1c0>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f023 0207 	bic.w	r2, r3, #7
 8005d92:	4922      	ldr	r1, [pc, #136]	; (8005e1c <HAL_RCC_ClockConfig+0x1c0>)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d9a:	4b20      	ldr	r3, [pc, #128]	; (8005e1c <HAL_RCC_ClockConfig+0x1c0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d001      	beq.n	8005dac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e032      	b.n	8005e12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d008      	beq.n	8005dca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005db8:	4b19      	ldr	r3, [pc, #100]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	4916      	ldr	r1, [pc, #88]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d009      	beq.n	8005dea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005dd6:	4b12      	ldr	r3, [pc, #72]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	490e      	ldr	r1, [pc, #56]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005dea:	f000 f821 	bl	8005e30 <HAL_RCC_GetSysClockFreq>
 8005dee:	4601      	mov	r1, r0
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <HAL_RCC_ClockConfig+0x1c4>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	091b      	lsrs	r3, r3, #4
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	4a0a      	ldr	r2, [pc, #40]	; (8005e24 <HAL_RCC_ClockConfig+0x1c8>)
 8005dfc:	5cd3      	ldrb	r3, [r2, r3]
 8005dfe:	fa21 f303 	lsr.w	r3, r1, r3
 8005e02:	4a09      	ldr	r2, [pc, #36]	; (8005e28 <HAL_RCC_ClockConfig+0x1cc>)
 8005e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e06:	4b09      	ldr	r3, [pc, #36]	; (8005e2c <HAL_RCC_ClockConfig+0x1d0>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fb fd62 	bl	80018d4 <HAL_InitTick>

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40022000 	.word	0x40022000
 8005e20:	40021000 	.word	0x40021000
 8005e24:	0800a9a4 	.word	0x0800a9a4
 8005e28:	20000018 	.word	0x20000018
 8005e2c:	2000001c 	.word	0x2000001c

08005e30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e30:	b490      	push	{r4, r7}
 8005e32:	b08a      	sub	sp, #40	; 0x28
 8005e34:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005e36:	4b2a      	ldr	r3, [pc, #168]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005e38:	1d3c      	adds	r4, r7, #4
 8005e3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005e40:	4b28      	ldr	r3, [pc, #160]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	61fb      	str	r3, [r7, #28]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61bb      	str	r3, [r7, #24]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e5a:	4b23      	ldr	r3, [pc, #140]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	f003 030c 	and.w	r3, r3, #12
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d002      	beq.n	8005e70 <HAL_RCC_GetSysClockFreq+0x40>
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d003      	beq.n	8005e76 <HAL_RCC_GetSysClockFreq+0x46>
 8005e6e:	e02d      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e70:	4b1e      	ldr	r3, [pc, #120]	; (8005eec <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e72:	623b      	str	r3, [r7, #32]
      break;
 8005e74:	e02d      	b.n	8005ed2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	0c9b      	lsrs	r3, r3, #18
 8005e7a:	f003 030f 	and.w	r3, r3, #15
 8005e7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e82:	4413      	add	r3, r2
 8005e84:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005e88:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d013      	beq.n	8005ebc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e94:	4b14      	ldr	r3, [pc, #80]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	0c5b      	lsrs	r3, r3, #17
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005ea8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	4a0f      	ldr	r2, [pc, #60]	; (8005eec <HAL_RCC_GetSysClockFreq+0xbc>)
 8005eae:	fb02 f203 	mul.w	r2, r2, r3
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eba:	e004      	b.n	8005ec6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	4a0c      	ldr	r2, [pc, #48]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ec0:	fb02 f303 	mul.w	r3, r2, r3
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	623b      	str	r3, [r7, #32]
      break;
 8005eca:	e002      	b.n	8005ed2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ecc:	4b07      	ldr	r3, [pc, #28]	; (8005eec <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ece:	623b      	str	r3, [r7, #32]
      break;
 8005ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3728      	adds	r7, #40	; 0x28
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bc90      	pop	{r4, r7}
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	0800a948 	.word	0x0800a948
 8005ee4:	0800a958 	.word	0x0800a958
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	007a1200 	.word	0x007a1200
 8005ef0:	003d0900 	.word	0x003d0900

08005ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ef8:	4b02      	ldr	r3, [pc, #8]	; (8005f04 <HAL_RCC_GetHCLKFreq+0x10>)
 8005efa:	681b      	ldr	r3, [r3, #0]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bc80      	pop	{r7}
 8005f02:	4770      	bx	lr
 8005f04:	20000018 	.word	0x20000018

08005f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f0c:	f7ff fff2 	bl	8005ef4 <HAL_RCC_GetHCLKFreq>
 8005f10:	4601      	mov	r1, r0
 8005f12:	4b05      	ldr	r3, [pc, #20]	; (8005f28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	0a1b      	lsrs	r3, r3, #8
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	4a03      	ldr	r2, [pc, #12]	; (8005f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f1e:	5cd3      	ldrb	r3, [r2, r3]
 8005f20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	0800a9b4 	.word	0x0800a9b4

08005f30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <RCC_Delay+0x34>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a0a      	ldr	r2, [pc, #40]	; (8005f68 <RCC_Delay+0x38>)
 8005f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f42:	0a5b      	lsrs	r3, r3, #9
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	fb02 f303 	mul.w	r3, r2, r3
 8005f4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f4c:	bf00      	nop
  }
  while (Delay --);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1e5a      	subs	r2, r3, #1
 8005f52:	60fa      	str	r2, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1f9      	bne.n	8005f4c <RCC_Delay+0x1c>
}
 8005f58:	bf00      	nop
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bc80      	pop	{r7}
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	20000018 	.word	0x20000018
 8005f68:	10624dd3 	.word	0x10624dd3

08005f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	613b      	str	r3, [r7, #16]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d07d      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f8c:	4b4f      	ldr	r3, [pc, #316]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10d      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f98:	4b4c      	ldr	r3, [pc, #304]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	4a4b      	ldr	r2, [pc, #300]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa2:	61d3      	str	r3, [r2, #28]
 8005fa4:	4b49      	ldr	r3, [pc, #292]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fac:	60bb      	str	r3, [r7, #8]
 8005fae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb4:	4b46      	ldr	r3, [pc, #280]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d118      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fc0:	4b43      	ldr	r3, [pc, #268]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a42      	ldr	r2, [pc, #264]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fcc:	f7fb fcc4 	bl	8001958 <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd4:	f7fb fcc0 	bl	8001958 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b64      	cmp	r3, #100	; 0x64
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e06d      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe6:	4b3a      	ldr	r3, [pc, #232]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0f0      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ff2:	4b36      	ldr	r3, [pc, #216]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ffa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d02e      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	429a      	cmp	r2, r3
 800600e:	d027      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006010:	4b2e      	ldr	r3, [pc, #184]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006018:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800601a:	4b2e      	ldr	r3, [pc, #184]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800601c:	2201      	movs	r2, #1
 800601e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006020:	4b2c      	ldr	r3, [pc, #176]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006026:	4a29      	ldr	r2, [pc, #164]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d014      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006036:	f7fb fc8f 	bl	8001958 <HAL_GetTick>
 800603a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800603c:	e00a      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800603e:	f7fb fc8b 	bl	8001958 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	f241 3288 	movw	r2, #5000	; 0x1388
 800604c:	4293      	cmp	r3, r2
 800604e:	d901      	bls.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e036      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006054:	4b1d      	ldr	r3, [pc, #116]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0ee      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006060:	4b1a      	ldr	r3, [pc, #104]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	4917      	ldr	r1, [pc, #92]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800606e:	4313      	orrs	r3, r2
 8006070:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006072:	7dfb      	ldrb	r3, [r7, #23]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d105      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006078:	4b14      	ldr	r3, [pc, #80]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	4a13      	ldr	r2, [pc, #76]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800607e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006082:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d008      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006090:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	490b      	ldr	r1, [pc, #44]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0310 	and.w	r3, r3, #16
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d008      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060ae:	4b07      	ldr	r3, [pc, #28]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	4904      	ldr	r1, [pc, #16]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	40021000 	.word	0x40021000
 80060d0:	40007000 	.word	0x40007000
 80060d4:	42420440 	.word	0x42420440

080060d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e041      	b.n	800616e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d106      	bne.n	8006104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7fb f96a 	bl	80013d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	3304      	adds	r3, #4
 8006114:	4619      	mov	r1, r3
 8006116:	4610      	mov	r0, r2
 8006118:	f000 fa1a 	bl	8006550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b082      	sub	sp, #8
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b02      	cmp	r3, #2
 800618a:	d122      	bne.n	80061d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b02      	cmp	r3, #2
 8006198:	d11b      	bne.n	80061d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f06f 0202 	mvn.w	r2, #2
 80061a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	f003 0303 	and.w	r3, r3, #3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f9ad 	bl	8006518 <HAL_TIM_IC_CaptureCallback>
 80061be:	e005      	b.n	80061cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f9a0 	bl	8006506 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f9af 	bl	800652a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d122      	bne.n	8006226 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f003 0304 	and.w	r3, r3, #4
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d11b      	bne.n	8006226 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f06f 0204 	mvn.w	r2, #4
 80061f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f983 	bl	8006518 <HAL_TIM_IC_CaptureCallback>
 8006212:	e005      	b.n	8006220 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f976 	bl	8006506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f985 	bl	800652a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	f003 0308 	and.w	r3, r3, #8
 8006230:	2b08      	cmp	r3, #8
 8006232:	d122      	bne.n	800627a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f003 0308 	and.w	r3, r3, #8
 800623e:	2b08      	cmp	r3, #8
 8006240:	d11b      	bne.n	800627a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f06f 0208 	mvn.w	r2, #8
 800624a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2204      	movs	r2, #4
 8006250:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	f003 0303 	and.w	r3, r3, #3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f959 	bl	8006518 <HAL_TIM_IC_CaptureCallback>
 8006266:	e005      	b.n	8006274 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f94c 	bl	8006506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f95b 	bl	800652a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	f003 0310 	and.w	r3, r3, #16
 8006284:	2b10      	cmp	r3, #16
 8006286:	d122      	bne.n	80062ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f003 0310 	and.w	r3, r3, #16
 8006292:	2b10      	cmp	r3, #16
 8006294:	d11b      	bne.n	80062ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f06f 0210 	mvn.w	r2, #16
 800629e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2208      	movs	r2, #8
 80062a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f92f 	bl	8006518 <HAL_TIM_IC_CaptureCallback>
 80062ba:	e005      	b.n	80062c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f922 	bl	8006506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f931 	bl	800652a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d10e      	bne.n	80062fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d107      	bne.n	80062fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f06f 0201 	mvn.w	r2, #1
 80062f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f8fd 	bl	80064f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006304:	2b80      	cmp	r3, #128	; 0x80
 8006306:	d10e      	bne.n	8006326 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006312:	2b80      	cmp	r3, #128	; 0x80
 8006314:	d107      	bne.n	8006326 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800631e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fa74 	bl	800680e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006330:	2b40      	cmp	r3, #64	; 0x40
 8006332:	d10e      	bne.n	8006352 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b40      	cmp	r3, #64	; 0x40
 8006340:	d107      	bne.n	8006352 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800634a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f8f5 	bl	800653c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b20      	cmp	r3, #32
 800635e:	d10e      	bne.n	800637e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b20      	cmp	r3, #32
 800636c:	d107      	bne.n	800637e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f06f 0220 	mvn.w	r2, #32
 8006376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fa3f 	bl	80067fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800637e:	bf00      	nop
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b084      	sub	sp, #16
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_TIM_ConfigClockSource+0x18>
 800639a:	2302      	movs	r3, #2
 800639c:	e0a6      	b.n	80064ec <HAL_TIM_ConfigClockSource+0x166>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2202      	movs	r2, #2
 80063aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063bc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063c4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b40      	cmp	r3, #64	; 0x40
 80063d4:	d067      	beq.n	80064a6 <HAL_TIM_ConfigClockSource+0x120>
 80063d6:	2b40      	cmp	r3, #64	; 0x40
 80063d8:	d80b      	bhi.n	80063f2 <HAL_TIM_ConfigClockSource+0x6c>
 80063da:	2b10      	cmp	r3, #16
 80063dc:	d073      	beq.n	80064c6 <HAL_TIM_ConfigClockSource+0x140>
 80063de:	2b10      	cmp	r3, #16
 80063e0:	d802      	bhi.n	80063e8 <HAL_TIM_ConfigClockSource+0x62>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d06f      	beq.n	80064c6 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80063e6:	e078      	b.n	80064da <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	d06c      	beq.n	80064c6 <HAL_TIM_ConfigClockSource+0x140>
 80063ec:	2b30      	cmp	r3, #48	; 0x30
 80063ee:	d06a      	beq.n	80064c6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80063f0:	e073      	b.n	80064da <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063f2:	2b70      	cmp	r3, #112	; 0x70
 80063f4:	d00d      	beq.n	8006412 <HAL_TIM_ConfigClockSource+0x8c>
 80063f6:	2b70      	cmp	r3, #112	; 0x70
 80063f8:	d804      	bhi.n	8006404 <HAL_TIM_ConfigClockSource+0x7e>
 80063fa:	2b50      	cmp	r3, #80	; 0x50
 80063fc:	d033      	beq.n	8006466 <HAL_TIM_ConfigClockSource+0xe0>
 80063fe:	2b60      	cmp	r3, #96	; 0x60
 8006400:	d041      	beq.n	8006486 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006402:	e06a      	b.n	80064da <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006408:	d066      	beq.n	80064d8 <HAL_TIM_ConfigClockSource+0x152>
 800640a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800640e:	d017      	beq.n	8006440 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006410:	e063      	b.n	80064da <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	6899      	ldr	r1, [r3, #8]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f000 f96e 	bl	8006702 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006434:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	609a      	str	r2, [r3, #8]
      break;
 800643e:	e04c      	b.n	80064da <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6818      	ldr	r0, [r3, #0]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	6899      	ldr	r1, [r3, #8]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f000 f957 	bl	8006702 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006462:	609a      	str	r2, [r3, #8]
      break;
 8006464:	e039      	b.n	80064da <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	6859      	ldr	r1, [r3, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	461a      	mov	r2, r3
 8006474:	f000 f8ce 	bl	8006614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2150      	movs	r1, #80	; 0x50
 800647e:	4618      	mov	r0, r3
 8006480:	f000 f925 	bl	80066ce <TIM_ITRx_SetConfig>
      break;
 8006484:	e029      	b.n	80064da <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6818      	ldr	r0, [r3, #0]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	6859      	ldr	r1, [r3, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	461a      	mov	r2, r3
 8006494:	f000 f8ec 	bl	8006670 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2160      	movs	r1, #96	; 0x60
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 f915 	bl	80066ce <TIM_ITRx_SetConfig>
      break;
 80064a4:	e019      	b.n	80064da <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6818      	ldr	r0, [r3, #0]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	6859      	ldr	r1, [r3, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	461a      	mov	r2, r3
 80064b4:	f000 f8ae 	bl	8006614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2140      	movs	r1, #64	; 0x40
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 f905 	bl	80066ce <TIM_ITRx_SetConfig>
      break;
 80064c4:	e009      	b.n	80064da <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4619      	mov	r1, r3
 80064d0:	4610      	mov	r0, r2
 80064d2:	f000 f8fc 	bl	80066ce <TIM_ITRx_SetConfig>
        break;
 80064d6:	e000      	b.n	80064da <HAL_TIM_ConfigClockSource+0x154>
      break;
 80064d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr

08006506 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800650e:	bf00      	nop
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	bc80      	pop	{r7}
 8006516:	4770      	bx	lr

08006518 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	bc80      	pop	{r7}
 8006528:	4770      	bx	lr

0800652a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006532:	bf00      	nop
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	bc80      	pop	{r7}
 800653a:	4770      	bx	lr

0800653c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	bc80      	pop	{r7}
 800654c:	4770      	bx	lr
	...

08006550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a29      	ldr	r2, [pc, #164]	; (8006608 <TIM_Base_SetConfig+0xb8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00b      	beq.n	8006580 <TIM_Base_SetConfig+0x30>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656e:	d007      	beq.n	8006580 <TIM_Base_SetConfig+0x30>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a26      	ldr	r2, [pc, #152]	; (800660c <TIM_Base_SetConfig+0xbc>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d003      	beq.n	8006580 <TIM_Base_SetConfig+0x30>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a25      	ldr	r2, [pc, #148]	; (8006610 <TIM_Base_SetConfig+0xc0>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d108      	bne.n	8006592 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a1c      	ldr	r2, [pc, #112]	; (8006608 <TIM_Base_SetConfig+0xb8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d00b      	beq.n	80065b2 <TIM_Base_SetConfig+0x62>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a0:	d007      	beq.n	80065b2 <TIM_Base_SetConfig+0x62>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a19      	ldr	r2, [pc, #100]	; (800660c <TIM_Base_SetConfig+0xbc>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d003      	beq.n	80065b2 <TIM_Base_SetConfig+0x62>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a18      	ldr	r2, [pc, #96]	; (8006610 <TIM_Base_SetConfig+0xc0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d108      	bne.n	80065c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	689a      	ldr	r2, [r3, #8]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a07      	ldr	r2, [pc, #28]	; (8006608 <TIM_Base_SetConfig+0xb8>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d103      	bne.n	80065f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	691a      	ldr	r2, [r3, #16]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	615a      	str	r2, [r3, #20]
}
 80065fe:	bf00      	nop
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	bc80      	pop	{r7}
 8006606:	4770      	bx	lr
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40000400 	.word	0x40000400
 8006610:	40000800 	.word	0x40000800

08006614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	f023 0201 	bic.w	r2, r3, #1
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800663e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f023 030a 	bic.w	r3, r3, #10
 8006650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	621a      	str	r2, [r3, #32]
}
 8006666:	bf00      	nop
 8006668:	371c      	adds	r7, #28
 800666a:	46bd      	mov	sp, r7
 800666c:	bc80      	pop	{r7}
 800666e:	4770      	bx	lr

08006670 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	f023 0210 	bic.w	r2, r3, #16
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800669a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	031b      	lsls	r3, r3, #12
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	011b      	lsls	r3, r3, #4
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	621a      	str	r2, [r3, #32]
}
 80066c4:	bf00      	nop
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bc80      	pop	{r7}
 80066cc:	4770      	bx	lr

080066ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b085      	sub	sp, #20
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	f043 0307 	orr.w	r3, r3, #7
 80066f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	609a      	str	r2, [r3, #8]
}
 80066f8:	bf00      	nop
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bc80      	pop	{r7}
 8006700:	4770      	bx	lr

08006702 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006702:	b480      	push	{r7}
 8006704:	b087      	sub	sp, #28
 8006706:	af00      	add	r7, sp, #0
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	607a      	str	r2, [r7, #4]
 800670e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800671c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	021a      	lsls	r2, r3, #8
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	431a      	orrs	r2, r3
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	4313      	orrs	r3, r2
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	4313      	orrs	r3, r2
 800672e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	609a      	str	r2, [r3, #8]
}
 8006736:	bf00      	nop
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	bc80      	pop	{r7}
 800673e:	4770      	bx	lr

08006740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006750:	2b01      	cmp	r3, #1
 8006752:	d101      	bne.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006754:	2302      	movs	r3, #2
 8006756:	e046      	b.n	80067e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a16      	ldr	r2, [pc, #88]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d00e      	beq.n	80067ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a4:	d009      	beq.n	80067ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a12      	ldr	r2, [pc, #72]	; (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d004      	beq.n	80067ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a10      	ldr	r2, [pc, #64]	; (80067f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d10c      	bne.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bc80      	pop	{r7}
 80067ee:	4770      	bx	lr
 80067f0:	40012c00 	.word	0x40012c00
 80067f4:	40000400 	.word	0x40000400
 80067f8:	40000800 	.word	0x40000800

080067fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	bc80      	pop	{r7}
 800680c:	4770      	bx	lr

0800680e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr

08006820 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006820:	b084      	sub	sp, #16
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	f107 0014 	add.w	r0, r7, #20
 800682e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	bc80      	pop	{r7}
 800683c:	b004      	add	sp, #16
 800683e:	4770      	bx	lr

08006840 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006850:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006854:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	b29a      	uxth	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	bc80      	pop	{r7}
 800686a:	4770      	bx	lr

0800686c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006874:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006878:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006880:	b29a      	uxth	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	b29b      	uxth	r3, r3
 8006886:	43db      	mvns	r3, r3
 8006888:	b29b      	uxth	r3, r3
 800688a:	4013      	ands	r3, r2
 800688c:	b29a      	uxth	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	bc80      	pop	{r7}
 800689e:	4770      	bx	lr

080068a0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bc80      	pop	{r7}
 80068b6:	4770      	bx	lr

080068b8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80068b8:	b084      	sub	sp, #16
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	f107 0014 	add.w	r0, r7, #20
 80068c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bc80      	pop	{r7}
 80068f4:	b004      	add	sp, #16
 80068f6:	4770      	bx	lr

080068f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b09b      	sub	sp, #108	; 0x6c
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	b29b      	uxth	r3, r3
 8006916:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800691a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	78db      	ldrb	r3, [r3, #3]
 8006926:	2b03      	cmp	r3, #3
 8006928:	d81f      	bhi.n	800696a <USB_ActivateEndpoint+0x72>
 800692a:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <USB_ActivateEndpoint+0x38>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	08006941 	.word	0x08006941
 8006934:	0800695d 	.word	0x0800695d
 8006938:	08006973 	.word	0x08006973
 800693c:	0800694f 	.word	0x0800694f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006940:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006944:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006948:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800694c:	e012      	b.n	8006974 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800694e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006952:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006956:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800695a:	e00b      	b.n	8006974 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800695c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006960:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006964:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006968:	e004      	b.n	8006974 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006970:	e000      	b.n	8006974 <USB_ActivateEndpoint+0x7c>
      break;
 8006972:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	441a      	add	r2, r3
 800697e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800698a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006992:	b29b      	uxth	r3, r3
 8006994:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	4313      	orrs	r3, r2
 80069b6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	441a      	add	r2, r3
 80069c4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80069c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d8:	b29b      	uxth	r3, r3
 80069da:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	7b1b      	ldrb	r3, [r3, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f040 8149 	bne.w	8006c78 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	785b      	ldrb	r3, [r3, #1]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 8084 	beq.w	8006af8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	461a      	mov	r2, r3
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	4413      	add	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	011a      	lsls	r2, r3, #4
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a12:	613b      	str	r3, [r7, #16]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	88db      	ldrh	r3, [r3, #6]
 8006a18:	085b      	lsrs	r3, r3, #1
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	81fb      	strh	r3, [r7, #14]
 8006a32:	89fb      	ldrh	r3, [r7, #14]
 8006a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d01b      	beq.n	8006a74 <USB_ActivateEndpoint+0x17c>
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a52:	81bb      	strh	r3, [r7, #12]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	441a      	add	r2, r3
 8006a5e:	89bb      	ldrh	r3, [r7, #12]
 8006a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	78db      	ldrb	r3, [r3, #3]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d020      	beq.n	8006abe <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a92:	813b      	strh	r3, [r7, #8]
 8006a94:	893b      	ldrh	r3, [r7, #8]
 8006a96:	f083 0320 	eor.w	r3, r3, #32
 8006a9a:	813b      	strh	r3, [r7, #8]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	441a      	add	r2, r3
 8006aa6:	893b      	ldrh	r3, [r7, #8]
 8006aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	8013      	strh	r3, [r2, #0]
 8006abc:	e27f      	b.n	8006fbe <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ad4:	817b      	strh	r3, [r7, #10]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	441a      	add	r2, r3
 8006ae0:	897b      	ldrh	r3, [r7, #10]
 8006ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	8013      	strh	r3, [r2, #0]
 8006af6:	e262      	b.n	8006fbe <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	461a      	mov	r2, r3
 8006b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b08:	4413      	add	r3, r2
 8006b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	011a      	lsls	r2, r3, #4
 8006b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	88db      	ldrh	r3, [r3, #6]
 8006b20:	085b      	lsrs	r3, r3, #1
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	4413      	add	r3, r2
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	011a      	lsls	r2, r3, #4
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	4413      	add	r3, r2
 8006b4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b4e:	623b      	str	r3, [r7, #32]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d112      	bne.n	8006b7e <USB_ActivateEndpoint+0x286>
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	801a      	strh	r2, [r3, #0]
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	801a      	strh	r2, [r3, #0]
 8006b7c:	e02f      	b.n	8006bde <USB_ActivateEndpoint+0x2e6>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	2b3e      	cmp	r3, #62	; 0x3e
 8006b84:	d813      	bhi.n	8006bae <USB_ActivateEndpoint+0x2b6>
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	085b      	lsrs	r3, r3, #1
 8006b8c:	663b      	str	r3, [r7, #96]	; 0x60
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <USB_ActivateEndpoint+0x2a8>
 8006b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	663b      	str	r3, [r7, #96]	; 0x60
 8006ba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	029b      	lsls	r3, r3, #10
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	801a      	strh	r2, [r3, #0]
 8006bac:	e017      	b.n	8006bde <USB_ActivateEndpoint+0x2e6>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	095b      	lsrs	r3, r3, #5
 8006bb4:	663b      	str	r3, [r7, #96]	; 0x60
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f003 031f 	and.w	r3, r3, #31
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d102      	bne.n	8006bc8 <USB_ActivateEndpoint+0x2d0>
 8006bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	663b      	str	r3, [r7, #96]	; 0x60
 8006bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	029b      	lsls	r3, r3, #10
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	83fb      	strh	r3, [r7, #30]
 8006bec:	8bfb      	ldrh	r3, [r7, #30]
 8006bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d01b      	beq.n	8006c2e <USB_ActivateEndpoint+0x336>
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0c:	83bb      	strh	r3, [r7, #28]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	441a      	add	r2, r3
 8006c18:	8bbb      	ldrh	r3, [r7, #28]
 8006c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c44:	837b      	strh	r3, [r7, #26]
 8006c46:	8b7b      	ldrh	r3, [r7, #26]
 8006c48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c4c:	837b      	strh	r3, [r7, #26]
 8006c4e:	8b7b      	ldrh	r3, [r7, #26]
 8006c50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c54:	837b      	strh	r3, [r7, #26]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	441a      	add	r2, r3
 8006c60:	8b7b      	ldrh	r3, [r7, #26]
 8006c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	8013      	strh	r3, [r2, #0]
 8006c76:	e1a2      	b.n	8006fbe <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	441a      	add	r2, r3
 8006c9c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cc4:	4413      	add	r3, r2
 8006cc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	011a      	lsls	r2, r3, #4
 8006cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cd6:	657b      	str	r3, [r7, #84]	; 0x54
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	891b      	ldrh	r3, [r3, #8]
 8006cdc:	085b      	lsrs	r3, r3, #1
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ce6:	801a      	strh	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	653b      	str	r3, [r7, #80]	; 0x50
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cf8:	4413      	add	r3, r2
 8006cfa:	653b      	str	r3, [r7, #80]	; 0x50
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	011a      	lsls	r2, r3, #4
 8006d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	895b      	ldrh	r3, [r3, #10]
 8006d10:	085b      	lsrs	r3, r3, #1
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d1a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	785b      	ldrb	r3, [r3, #1]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f040 8091 	bne.w	8006e48 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006d34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d01b      	beq.n	8006d76 <USB_ActivateEndpoint+0x47e>
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d54:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	441a      	add	r2, r3
 8006d60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	873b      	strh	r3, [r7, #56]	; 0x38
 8006d84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d01b      	beq.n	8006dc6 <USB_ActivateEndpoint+0x4ce>
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	441a      	add	r2, r3
 8006db0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	881b      	ldrh	r3, [r3, #0]
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ddc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006dde:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006de0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006de4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006de6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006de8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006dec:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	441a      	add	r2, r3
 8006df8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4413      	add	r3, r2
 8006e18:	881b      	ldrh	r3, [r3, #0]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e24:	867b      	strh	r3, [r7, #50]	; 0x32
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	441a      	add	r2, r3
 8006e30:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	8013      	strh	r3, [r2, #0]
 8006e46:	e0ba      	b.n	8006fbe <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006e58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01d      	beq.n	8006ea0 <USB_ActivateEndpoint+0x5a8>
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	441a      	add	r2, r3
 8006e88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006eb0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01d      	beq.n	8006ef8 <USB_ActivateEndpoint+0x600>
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	441a      	add	r2, r3
 8006ee0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	78db      	ldrb	r3, [r3, #3]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d024      	beq.n	8006f4a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	881b      	ldrh	r3, [r3, #0]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006f1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006f1e:	f083 0320 	eor.w	r3, r3, #32
 8006f22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	441a      	add	r2, r3
 8006f30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	8013      	strh	r3, [r2, #0]
 8006f48:	e01d      	b.n	8006f86 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	441a      	add	r2, r3
 8006f6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	441a      	add	r2, r3
 8006fa8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006fbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	376c      	adds	r7, #108	; 0x6c
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr

08006fcc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b08d      	sub	sp, #52	; 0x34
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	7b1b      	ldrb	r3, [r3, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f040 808e 	bne.w	80070fc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	785b      	ldrb	r3, [r3, #1]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d044      	beq.n	8007072 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	81bb      	strh	r3, [r7, #12]
 8006ff6:	89bb      	ldrh	r3, [r7, #12]
 8006ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01b      	beq.n	8007038 <USB_DeactivateEndpoint+0x6c>
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	b29b      	uxth	r3, r3
 800700e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007016:	817b      	strh	r3, [r7, #10]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	441a      	add	r2, r3
 8007022:	897b      	ldrh	r3, [r7, #10]
 8007024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800702c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007030:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007034:	b29b      	uxth	r3, r3
 8007036:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	b29b      	uxth	r3, r3
 8007046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800704a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800704e:	813b      	strh	r3, [r7, #8]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	441a      	add	r2, r3
 800705a:	893b      	ldrh	r3, [r7, #8]
 800705c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800706c:	b29b      	uxth	r3, r3
 800706e:	8013      	strh	r3, [r2, #0]
 8007070:	e192      	b.n	8007398 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	827b      	strh	r3, [r7, #18]
 8007080:	8a7b      	ldrh	r3, [r7, #18]
 8007082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d01b      	beq.n	80070c2 <USB_DeactivateEndpoint+0xf6>
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	b29b      	uxth	r3, r3
 8007098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800709c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a0:	823b      	strh	r3, [r7, #16]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	441a      	add	r2, r3
 80070ac:	8a3b      	ldrh	r3, [r7, #16]
 80070ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070be:	b29b      	uxth	r3, r3
 80070c0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d8:	81fb      	strh	r3, [r7, #14]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	441a      	add	r2, r3
 80070e4:	89fb      	ldrh	r3, [r7, #14]
 80070e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	8013      	strh	r3, [r2, #0]
 80070fa:	e14d      	b.n	8007398 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	785b      	ldrb	r3, [r3, #1]
 8007100:	2b00      	cmp	r3, #0
 8007102:	f040 80a5 	bne.w	8007250 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	843b      	strh	r3, [r7, #32]
 8007114:	8c3b      	ldrh	r3, [r7, #32]
 8007116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d01b      	beq.n	8007156 <USB_DeactivateEndpoint+0x18a>
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	b29b      	uxth	r3, r3
 800712c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007134:	83fb      	strh	r3, [r7, #30]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	441a      	add	r2, r3
 8007140:	8bfb      	ldrh	r3, [r7, #30]
 8007142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800714a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800714e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007152:	b29b      	uxth	r3, r3
 8007154:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	83bb      	strh	r3, [r7, #28]
 8007164:	8bbb      	ldrh	r3, [r7, #28]
 8007166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	d01b      	beq.n	80071a6 <USB_DeactivateEndpoint+0x1da>
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	b29b      	uxth	r3, r3
 800717c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007184:	837b      	strh	r3, [r7, #26]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	441a      	add	r2, r3
 8007190:	8b7b      	ldrh	r3, [r7, #26]
 8007192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800719a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800719e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071bc:	833b      	strh	r3, [r7, #24]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	441a      	add	r2, r3
 80071c8:	8b3b      	ldrh	r3, [r7, #24]
 80071ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071da:	b29b      	uxth	r3, r3
 80071dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f4:	82fb      	strh	r3, [r7, #22]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	441a      	add	r2, r3
 8007200:	8afb      	ldrh	r3, [r7, #22]
 8007202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800720a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800720e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007212:	b29b      	uxth	r3, r3
 8007214:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	b29b      	uxth	r3, r3
 8007224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800722c:	82bb      	strh	r3, [r7, #20]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	441a      	add	r2, r3
 8007238:	8abb      	ldrh	r3, [r7, #20]
 800723a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800723e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800724a:	b29b      	uxth	r3, r3
 800724c:	8013      	strh	r3, [r2, #0]
 800724e:	e0a3      	b.n	8007398 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800725e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d01b      	beq.n	80072a0 <USB_DeactivateEndpoint+0x2d4>
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	b29b      	uxth	r3, r3
 8007276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800727a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	441a      	add	r2, r3
 800728a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800728c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007294:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800729c:	b29b      	uxth	r3, r3
 800729e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80072ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80072b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d01b      	beq.n	80072f0 <USB_DeactivateEndpoint+0x324>
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	441a      	add	r2, r3
 80072da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80072dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007306:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	441a      	add	r2, r3
 8007312:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800731c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007324:	b29b      	uxth	r3, r3
 8007326:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	b29b      	uxth	r3, r3
 8007336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800733a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800733e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	441a      	add	r2, r3
 800734a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800734c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800735c:	b29b      	uxth	r3, r3
 800735e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	b29b      	uxth	r3, r3
 800736e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007376:	847b      	strh	r3, [r7, #34]	; 0x22
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	441a      	add	r2, r3
 8007382:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800738c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007394:	b29b      	uxth	r3, r3
 8007396:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3734      	adds	r7, #52	; 0x34
 800739e:	46bd      	mov	sp, r7
 80073a0:	bc80      	pop	{r7}
 80073a2:	4770      	bx	lr

080073a4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b0c4      	sub	sp, #272	; 0x110
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	1d3b      	adds	r3, r7, #4
 80073ac:	6018      	str	r0, [r3, #0]
 80073ae:	463b      	mov	r3, r7
 80073b0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073b2:	463b      	mov	r3, r7
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	785b      	ldrb	r3, [r3, #1]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	f040 8557 	bne.w	8007e6c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80073be:	463b      	mov	r3, r7
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	699a      	ldr	r2, [r3, #24]
 80073c4:	463b      	mov	r3, r7
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d905      	bls.n	80073da <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80073ce:	463b      	mov	r3, r7
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80073d8:	e004      	b.n	80073e4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80073da:	463b      	mov	r3, r7
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80073e4:	463b      	mov	r3, r7
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	7b1b      	ldrb	r3, [r3, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d12c      	bne.n	8007448 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80073ee:	463b      	mov	r3, r7
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6959      	ldr	r1, [r3, #20]
 80073f4:	463b      	mov	r3, r7
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	88da      	ldrh	r2, [r3, #6]
 80073fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073fe:	b29b      	uxth	r3, r3
 8007400:	1d38      	adds	r0, r7, #4
 8007402:	6800      	ldr	r0, [r0, #0]
 8007404:	f001 fa2c 	bl	8008860 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007408:	1d3b      	adds	r3, r7, #4
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	1d3b      	adds	r3, r7, #4
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007416:	b29b      	uxth	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	4413      	add	r3, r2
 800741e:	617b      	str	r3, [r7, #20]
 8007420:	463b      	mov	r3, r7
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	011a      	lsls	r2, r3, #4
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	4413      	add	r3, r2
 800742c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007430:	f107 0310 	add.w	r3, r7, #16
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800743a:	b29a      	uxth	r2, r3
 800743c:	f107 0310 	add.w	r3, r7, #16
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	801a      	strh	r2, [r3, #0]
 8007444:	f000 bcdd 	b.w	8007e02 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007448:	463b      	mov	r3, r7
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	78db      	ldrb	r3, [r3, #3]
 800744e:	2b02      	cmp	r3, #2
 8007450:	f040 8347 	bne.w	8007ae2 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007454:	463b      	mov	r3, r7
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6a1a      	ldr	r2, [r3, #32]
 800745a:	463b      	mov	r3, r7
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	429a      	cmp	r2, r3
 8007462:	f240 82eb 	bls.w	8007a3c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007466:	1d3b      	adds	r3, r7, #4
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	463b      	mov	r3, r7
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	b29b      	uxth	r3, r3
 8007478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800747c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007480:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8007484:	1d3b      	adds	r3, r7, #4
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	463b      	mov	r3, r7
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	441a      	add	r2, r3
 8007492:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800749a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800749e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80074a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80074aa:	463b      	mov	r3, r7
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6a1a      	ldr	r2, [r3, #32]
 80074b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074b4:	1ad2      	subs	r2, r2, r3
 80074b6:	463b      	mov	r3, r7
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80074bc:	1d3b      	adds	r3, r7, #4
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	463b      	mov	r3, r7
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 8159 	beq.w	800778a <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80074d8:	1d3b      	adds	r3, r7, #4
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	637b      	str	r3, [r7, #52]	; 0x34
 80074de:	463b      	mov	r3, r7
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	785b      	ldrb	r3, [r3, #1]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d164      	bne.n	80075b2 <USB_EPStartXfer+0x20e>
 80074e8:	1d3b      	adds	r3, r7, #4
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074ee:	1d3b      	adds	r3, r7, #4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	461a      	mov	r2, r3
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	4413      	add	r3, r2
 80074fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007500:	463b      	mov	r3, r7
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	011a      	lsls	r2, r3, #4
 8007508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750a:	4413      	add	r3, r2
 800750c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007510:	62bb      	str	r3, [r7, #40]	; 0x28
 8007512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007516:	2b00      	cmp	r3, #0
 8007518:	d112      	bne.n	8007540 <USB_EPStartXfer+0x19c>
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	b29b      	uxth	r3, r3
 8007520:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007524:	b29a      	uxth	r2, r3
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	801a      	strh	r2, [r3, #0]
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	b29b      	uxth	r3, r3
 8007530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007538:	b29a      	uxth	r2, r3
 800753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753c:	801a      	strh	r2, [r3, #0]
 800753e:	e054      	b.n	80075ea <USB_EPStartXfer+0x246>
 8007540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007544:	2b3e      	cmp	r3, #62	; 0x3e
 8007546:	d817      	bhi.n	8007578 <USB_EPStartXfer+0x1d4>
 8007548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800754c:	085b      	lsrs	r3, r3, #1
 800754e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	d004      	beq.n	8007568 <USB_EPStartXfer+0x1c4>
 800755e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007562:	3301      	adds	r3, #1
 8007564:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800756c:	b29b      	uxth	r3, r3
 800756e:	029b      	lsls	r3, r3, #10
 8007570:	b29a      	uxth	r2, r3
 8007572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007574:	801a      	strh	r2, [r3, #0]
 8007576:	e038      	b.n	80075ea <USB_EPStartXfer+0x246>
 8007578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800757c:	095b      	lsrs	r3, r3, #5
 800757e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007586:	f003 031f 	and.w	r3, r3, #31
 800758a:	2b00      	cmp	r3, #0
 800758c:	d104      	bne.n	8007598 <USB_EPStartXfer+0x1f4>
 800758e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007592:	3b01      	subs	r3, #1
 8007594:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800759c:	b29b      	uxth	r3, r3
 800759e:	029b      	lsls	r3, r3, #10
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ae:	801a      	strh	r2, [r3, #0]
 80075b0:	e01b      	b.n	80075ea <USB_EPStartXfer+0x246>
 80075b2:	463b      	mov	r3, r7
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	785b      	ldrb	r3, [r3, #1]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d116      	bne.n	80075ea <USB_EPStartXfer+0x246>
 80075bc:	1d3b      	adds	r3, r7, #4
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	461a      	mov	r2, r3
 80075c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ca:	4413      	add	r3, r2
 80075cc:	637b      	str	r3, [r7, #52]	; 0x34
 80075ce:	463b      	mov	r3, r7
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	011a      	lsls	r2, r3, #4
 80075d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d8:	4413      	add	r3, r2
 80075da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075de:	633b      	str	r3, [r7, #48]	; 0x30
 80075e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80075ea:	463b      	mov	r3, r7
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	895b      	ldrh	r3, [r3, #10]
 80075f0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075f4:	463b      	mov	r3, r7
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6959      	ldr	r1, [r3, #20]
 80075fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075fe:	b29b      	uxth	r3, r3
 8007600:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007604:	1d38      	adds	r0, r7, #4
 8007606:	6800      	ldr	r0, [r0, #0]
 8007608:	f001 f92a 	bl	8008860 <USB_WritePMA>
            ep->xfer_buff += len;
 800760c:	463b      	mov	r3, r7
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	695a      	ldr	r2, [r3, #20]
 8007612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007616:	441a      	add	r2, r3
 8007618:	463b      	mov	r3, r7
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800761e:	463b      	mov	r3, r7
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6a1a      	ldr	r2, [r3, #32]
 8007624:	463b      	mov	r3, r7
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	429a      	cmp	r2, r3
 800762c:	d909      	bls.n	8007642 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800762e:	463b      	mov	r3, r7
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6a1a      	ldr	r2, [r3, #32]
 8007634:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007638:	1ad2      	subs	r2, r2, r3
 800763a:	463b      	mov	r3, r7
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	621a      	str	r2, [r3, #32]
 8007640:	e008      	b.n	8007654 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8007642:	463b      	mov	r3, r7
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800764c:	463b      	mov	r3, r7
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2200      	movs	r2, #0
 8007652:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007654:	463b      	mov	r3, r7
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	785b      	ldrb	r3, [r3, #1]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d164      	bne.n	8007728 <USB_EPStartXfer+0x384>
 800765e:	1d3b      	adds	r3, r7, #4
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	61fb      	str	r3, [r7, #28]
 8007664:	1d3b      	adds	r3, r7, #4
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800766c:	b29b      	uxth	r3, r3
 800766e:	461a      	mov	r2, r3
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	4413      	add	r3, r2
 8007674:	61fb      	str	r3, [r7, #28]
 8007676:	463b      	mov	r3, r7
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	011a      	lsls	r2, r3, #4
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	4413      	add	r3, r2
 8007682:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007686:	61bb      	str	r3, [r7, #24]
 8007688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800768c:	2b00      	cmp	r3, #0
 800768e:	d112      	bne.n	80076b6 <USB_EPStartXfer+0x312>
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	b29b      	uxth	r3, r3
 8007696:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800769a:	b29a      	uxth	r2, r3
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	801a      	strh	r2, [r3, #0]
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	801a      	strh	r2, [r3, #0]
 80076b4:	e057      	b.n	8007766 <USB_EPStartXfer+0x3c2>
 80076b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076ba:	2b3e      	cmp	r3, #62	; 0x3e
 80076bc:	d817      	bhi.n	80076ee <USB_EPStartXfer+0x34a>
 80076be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076c2:	085b      	lsrs	r3, r3, #1
 80076c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d004      	beq.n	80076de <USB_EPStartXfer+0x33a>
 80076d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076d8:	3301      	adds	r3, #1
 80076da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	029b      	lsls	r3, r3, #10
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	801a      	strh	r2, [r3, #0]
 80076ec:	e03b      	b.n	8007766 <USB_EPStartXfer+0x3c2>
 80076ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076f2:	095b      	lsrs	r3, r3, #5
 80076f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076fc:	f003 031f 	and.w	r3, r3, #31
 8007700:	2b00      	cmp	r3, #0
 8007702:	d104      	bne.n	800770e <USB_EPStartXfer+0x36a>
 8007704:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007708:	3b01      	subs	r3, #1
 800770a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800770e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007712:	b29b      	uxth	r3, r3
 8007714:	029b      	lsls	r3, r3, #10
 8007716:	b29b      	uxth	r3, r3
 8007718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800771c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007720:	b29a      	uxth	r2, r3
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	801a      	strh	r2, [r3, #0]
 8007726:	e01e      	b.n	8007766 <USB_EPStartXfer+0x3c2>
 8007728:	463b      	mov	r3, r7
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	785b      	ldrb	r3, [r3, #1]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d119      	bne.n	8007766 <USB_EPStartXfer+0x3c2>
 8007732:	1d3b      	adds	r3, r7, #4
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	627b      	str	r3, [r7, #36]	; 0x24
 8007738:	1d3b      	adds	r3, r7, #4
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007740:	b29b      	uxth	r3, r3
 8007742:	461a      	mov	r2, r3
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	4413      	add	r3, r2
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
 800774a:	463b      	mov	r3, r7
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	011a      	lsls	r2, r3, #4
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	4413      	add	r3, r2
 8007756:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800775a:	623b      	str	r3, [r7, #32]
 800775c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007760:	b29a      	uxth	r2, r3
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007766:	463b      	mov	r3, r7
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	891b      	ldrh	r3, [r3, #8]
 800776c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007770:	463b      	mov	r3, r7
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6959      	ldr	r1, [r3, #20]
 8007776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800777a:	b29b      	uxth	r3, r3
 800777c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007780:	1d38      	adds	r0, r7, #4
 8007782:	6800      	ldr	r0, [r0, #0]
 8007784:	f001 f86c 	bl	8008860 <USB_WritePMA>
 8007788:	e33b      	b.n	8007e02 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800778a:	463b      	mov	r3, r7
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	785b      	ldrb	r3, [r3, #1]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d164      	bne.n	800785e <USB_EPStartXfer+0x4ba>
 8007794:	1d3b      	adds	r3, r7, #4
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	64fb      	str	r3, [r7, #76]	; 0x4c
 800779a:	1d3b      	adds	r3, r7, #4
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	461a      	mov	r2, r3
 80077a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077a8:	4413      	add	r3, r2
 80077aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077ac:	463b      	mov	r3, r7
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	011a      	lsls	r2, r3, #4
 80077b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b6:	4413      	add	r3, r2
 80077b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80077be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d112      	bne.n	80077ec <USB_EPStartXfer+0x448>
 80077c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077d4:	801a      	strh	r2, [r3, #0]
 80077d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077e8:	801a      	strh	r2, [r3, #0]
 80077ea:	e057      	b.n	800789c <USB_EPStartXfer+0x4f8>
 80077ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077f0:	2b3e      	cmp	r3, #62	; 0x3e
 80077f2:	d817      	bhi.n	8007824 <USB_EPStartXfer+0x480>
 80077f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077f8:	085b      	lsrs	r3, r3, #1
 80077fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80077fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d004      	beq.n	8007814 <USB_EPStartXfer+0x470>
 800780a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800780e:	3301      	adds	r3, #1
 8007810:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007818:	b29b      	uxth	r3, r3
 800781a:	029b      	lsls	r3, r3, #10
 800781c:	b29a      	uxth	r2, r3
 800781e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007820:	801a      	strh	r2, [r3, #0]
 8007822:	e03b      	b.n	800789c <USB_EPStartXfer+0x4f8>
 8007824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007828:	095b      	lsrs	r3, r3, #5
 800782a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800782e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007832:	f003 031f 	and.w	r3, r3, #31
 8007836:	2b00      	cmp	r3, #0
 8007838:	d104      	bne.n	8007844 <USB_EPStartXfer+0x4a0>
 800783a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800783e:	3b01      	subs	r3, #1
 8007840:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007848:	b29b      	uxth	r3, r3
 800784a:	029b      	lsls	r3, r3, #10
 800784c:	b29b      	uxth	r3, r3
 800784e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007856:	b29a      	uxth	r2, r3
 8007858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800785a:	801a      	strh	r2, [r3, #0]
 800785c:	e01e      	b.n	800789c <USB_EPStartXfer+0x4f8>
 800785e:	463b      	mov	r3, r7
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	785b      	ldrb	r3, [r3, #1]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d119      	bne.n	800789c <USB_EPStartXfer+0x4f8>
 8007868:	1d3b      	adds	r3, r7, #4
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	657b      	str	r3, [r7, #84]	; 0x54
 800786e:	1d3b      	adds	r3, r7, #4
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007876:	b29b      	uxth	r3, r3
 8007878:	461a      	mov	r2, r3
 800787a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800787c:	4413      	add	r3, r2
 800787e:	657b      	str	r3, [r7, #84]	; 0x54
 8007880:	463b      	mov	r3, r7
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	011a      	lsls	r2, r3, #4
 8007888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800788a:	4413      	add	r3, r2
 800788c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007890:	653b      	str	r3, [r7, #80]	; 0x50
 8007892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007896:	b29a      	uxth	r2, r3
 8007898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800789a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800789c:	463b      	mov	r3, r7
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	891b      	ldrh	r3, [r3, #8]
 80078a2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078a6:	463b      	mov	r3, r7
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6959      	ldr	r1, [r3, #20]
 80078ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80078b6:	1d38      	adds	r0, r7, #4
 80078b8:	6800      	ldr	r0, [r0, #0]
 80078ba:	f000 ffd1 	bl	8008860 <USB_WritePMA>
            ep->xfer_buff += len;
 80078be:	463b      	mov	r3, r7
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	695a      	ldr	r2, [r3, #20]
 80078c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078c8:	441a      	add	r2, r3
 80078ca:	463b      	mov	r3, r7
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80078d0:	463b      	mov	r3, r7
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6a1a      	ldr	r2, [r3, #32]
 80078d6:	463b      	mov	r3, r7
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d909      	bls.n	80078f4 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80078e0:	463b      	mov	r3, r7
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6a1a      	ldr	r2, [r3, #32]
 80078e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078ea:	1ad2      	subs	r2, r2, r3
 80078ec:	463b      	mov	r3, r7
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	621a      	str	r2, [r3, #32]
 80078f2:	e008      	b.n	8007906 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80078f4:	463b      	mov	r3, r7
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80078fe:	463b      	mov	r3, r7
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2200      	movs	r2, #0
 8007904:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007906:	1d3b      	adds	r3, r7, #4
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	647b      	str	r3, [r7, #68]	; 0x44
 800790c:	463b      	mov	r3, r7
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	785b      	ldrb	r3, [r3, #1]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d164      	bne.n	80079e0 <USB_EPStartXfer+0x63c>
 8007916:	1d3b      	adds	r3, r7, #4
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800791c:	1d3b      	adds	r3, r7, #4
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007924:	b29b      	uxth	r3, r3
 8007926:	461a      	mov	r2, r3
 8007928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800792a:	4413      	add	r3, r2
 800792c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800792e:	463b      	mov	r3, r7
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	011a      	lsls	r2, r3, #4
 8007936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007938:	4413      	add	r3, r2
 800793a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800793e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d112      	bne.n	800796e <USB_EPStartXfer+0x5ca>
 8007948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	b29b      	uxth	r3, r3
 800794e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007952:	b29a      	uxth	r2, r3
 8007954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007956:	801a      	strh	r2, [r3, #0]
 8007958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007966:	b29a      	uxth	r2, r3
 8007968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796a:	801a      	strh	r2, [r3, #0]
 800796c:	e054      	b.n	8007a18 <USB_EPStartXfer+0x674>
 800796e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007972:	2b3e      	cmp	r3, #62	; 0x3e
 8007974:	d817      	bhi.n	80079a6 <USB_EPStartXfer+0x602>
 8007976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800797a:	085b      	lsrs	r3, r3, #1
 800797c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b00      	cmp	r3, #0
 800798a:	d004      	beq.n	8007996 <USB_EPStartXfer+0x5f2>
 800798c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007990:	3301      	adds	r3, #1
 8007992:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007996:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800799a:	b29b      	uxth	r3, r3
 800799c:	029b      	lsls	r3, r3, #10
 800799e:	b29a      	uxth	r2, r3
 80079a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a2:	801a      	strh	r2, [r3, #0]
 80079a4:	e038      	b.n	8007a18 <USB_EPStartXfer+0x674>
 80079a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079aa:	095b      	lsrs	r3, r3, #5
 80079ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80079b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079b4:	f003 031f 	and.w	r3, r3, #31
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d104      	bne.n	80079c6 <USB_EPStartXfer+0x622>
 80079bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079c0:	3b01      	subs	r3, #1
 80079c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80079c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	029b      	lsls	r3, r3, #10
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d8:	b29a      	uxth	r2, r3
 80079da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079dc:	801a      	strh	r2, [r3, #0]
 80079de:	e01b      	b.n	8007a18 <USB_EPStartXfer+0x674>
 80079e0:	463b      	mov	r3, r7
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	785b      	ldrb	r3, [r3, #1]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d116      	bne.n	8007a18 <USB_EPStartXfer+0x674>
 80079ea:	1d3b      	adds	r3, r7, #4
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	461a      	mov	r2, r3
 80079f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079f8:	4413      	add	r3, r2
 80079fa:	647b      	str	r3, [r7, #68]	; 0x44
 80079fc:	463b      	mov	r3, r7
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	011a      	lsls	r2, r3, #4
 8007a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a06:	4413      	add	r3, r2
 8007a08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8007a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007a18:	463b      	mov	r3, r7
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	895b      	ldrh	r3, [r3, #10]
 8007a1e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a22:	463b      	mov	r3, r7
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	6959      	ldr	r1, [r3, #20]
 8007a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007a32:	1d38      	adds	r0, r7, #4
 8007a34:	6800      	ldr	r0, [r0, #0]
 8007a36:	f000 ff13 	bl	8008860 <USB_WritePMA>
 8007a3a:	e1e2      	b.n	8007e02 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007a3c:	463b      	mov	r3, r7
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007a46:	1d3b      	adds	r3, r7, #4
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	463b      	mov	r3, r7
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a60:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007a64:	1d3b      	adds	r3, r7, #4
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	463b      	mov	r3, r7
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	441a      	add	r2, r3
 8007a72:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a8a:	1d3b      	adds	r3, r7, #4
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	663b      	str	r3, [r7, #96]	; 0x60
 8007a90:	1d3b      	adds	r3, r7, #4
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a9e:	4413      	add	r3, r2
 8007aa0:	663b      	str	r3, [r7, #96]	; 0x60
 8007aa2:	463b      	mov	r3, r7
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	011a      	lsls	r2, r3, #4
 8007aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007aac:	4413      	add	r3, r2
 8007aae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007abc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007abe:	463b      	mov	r3, r7
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	891b      	ldrh	r3, [r3, #8]
 8007ac4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ac8:	463b      	mov	r3, r7
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6959      	ldr	r1, [r3, #20]
 8007ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007ad8:	1d38      	adds	r0, r7, #4
 8007ada:	6800      	ldr	r0, [r0, #0]
 8007adc:	f000 fec0 	bl	8008860 <USB_WritePMA>
 8007ae0:	e18f      	b.n	8007e02 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007ae2:	1d3b      	adds	r3, r7, #4
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 808f 	beq.w	8007c1c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007afe:	1d3b      	adds	r3, r7, #4
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b04:	463b      	mov	r3, r7
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	785b      	ldrb	r3, [r3, #1]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d164      	bne.n	8007bd8 <USB_EPStartXfer+0x834>
 8007b0e:	1d3b      	adds	r3, r7, #4
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	673b      	str	r3, [r7, #112]	; 0x70
 8007b14:	1d3b      	adds	r3, r7, #4
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	461a      	mov	r2, r3
 8007b20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b22:	4413      	add	r3, r2
 8007b24:	673b      	str	r3, [r7, #112]	; 0x70
 8007b26:	463b      	mov	r3, r7
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	011a      	lsls	r2, r3, #4
 8007b2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b30:	4413      	add	r3, r2
 8007b32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d112      	bne.n	8007b66 <USB_EPStartXfer+0x7c2>
 8007b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b4e:	801a      	strh	r2, [r3, #0]
 8007b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b62:	801a      	strh	r2, [r3, #0]
 8007b64:	e054      	b.n	8007c10 <USB_EPStartXfer+0x86c>
 8007b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b6a:	2b3e      	cmp	r3, #62	; 0x3e
 8007b6c:	d817      	bhi.n	8007b9e <USB_EPStartXfer+0x7fa>
 8007b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b72:	085b      	lsrs	r3, r3, #1
 8007b74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d004      	beq.n	8007b8e <USB_EPStartXfer+0x7ea>
 8007b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b88:	3301      	adds	r3, #1
 8007b8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	029b      	lsls	r3, r3, #10
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9a:	801a      	strh	r2, [r3, #0]
 8007b9c:	e038      	b.n	8007c10 <USB_EPStartXfer+0x86c>
 8007b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ba2:	095b      	lsrs	r3, r3, #5
 8007ba4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bac:	f003 031f 	and.w	r3, r3, #31
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d104      	bne.n	8007bbe <USB_EPStartXfer+0x81a>
 8007bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	029b      	lsls	r3, r3, #10
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd4:	801a      	strh	r2, [r3, #0]
 8007bd6:	e01b      	b.n	8007c10 <USB_EPStartXfer+0x86c>
 8007bd8:	463b      	mov	r3, r7
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	785b      	ldrb	r3, [r3, #1]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d116      	bne.n	8007c10 <USB_EPStartXfer+0x86c>
 8007be2:	1d3b      	adds	r3, r7, #4
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	461a      	mov	r2, r3
 8007bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bf0:	4413      	add	r3, r2
 8007bf2:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bf4:	463b      	mov	r3, r7
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	011a      	lsls	r2, r3, #4
 8007bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bfe:	4413      	add	r3, r2
 8007c00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c04:	677b      	str	r3, [r7, #116]	; 0x74
 8007c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007c10:	463b      	mov	r3, r7
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	895b      	ldrh	r3, [r3, #10]
 8007c16:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8007c1a:	e097      	b.n	8007d4c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c1c:	463b      	mov	r3, r7
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d168      	bne.n	8007cf8 <USB_EPStartXfer+0x954>
 8007c26:	1d3b      	adds	r3, r7, #4
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c2e:	1d3b      	adds	r3, r7, #4
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	461a      	mov	r2, r3
 8007c3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c3e:	4413      	add	r3, r2
 8007c40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c44:	463b      	mov	r3, r7
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	011a      	lsls	r2, r3, #4
 8007c4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c50:	4413      	add	r3, r2
 8007c52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d112      	bne.n	8007c86 <USB_EPStartXfer+0x8e2>
 8007c60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c6e:	801a      	strh	r2, [r3, #0]
 8007c70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c82:	801a      	strh	r2, [r3, #0]
 8007c84:	e05d      	b.n	8007d42 <USB_EPStartXfer+0x99e>
 8007c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c8a:	2b3e      	cmp	r3, #62	; 0x3e
 8007c8c:	d817      	bhi.n	8007cbe <USB_EPStartXfer+0x91a>
 8007c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c92:	085b      	lsrs	r3, r3, #1
 8007c94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d004      	beq.n	8007cae <USB_EPStartXfer+0x90a>
 8007ca4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ca8:	3301      	adds	r3, #1
 8007caa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007cae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	029b      	lsls	r3, r3, #10
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cba:	801a      	strh	r2, [r3, #0]
 8007cbc:	e041      	b.n	8007d42 <USB_EPStartXfer+0x99e>
 8007cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cc2:	095b      	lsrs	r3, r3, #5
 8007cc4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ccc:	f003 031f 	and.w	r3, r3, #31
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d104      	bne.n	8007cde <USB_EPStartXfer+0x93a>
 8007cd4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007cde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	029b      	lsls	r3, r3, #10
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cf4:	801a      	strh	r2, [r3, #0]
 8007cf6:	e024      	b.n	8007d42 <USB_EPStartXfer+0x99e>
 8007cf8:	463b      	mov	r3, r7
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	785b      	ldrb	r3, [r3, #1]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d11f      	bne.n	8007d42 <USB_EPStartXfer+0x99e>
 8007d02:	1d3b      	adds	r3, r7, #4
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d0a:	1d3b      	adds	r3, r7, #4
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	461a      	mov	r2, r3
 8007d16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d20:	463b      	mov	r3, r7
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	011a      	lsls	r2, r3, #4
 8007d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d40:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d42:	463b      	mov	r3, r7
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	891b      	ldrh	r3, [r3, #8]
 8007d48:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d4c:	463b      	mov	r3, r7
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6959      	ldr	r1, [r3, #20]
 8007d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007d5c:	1d38      	adds	r0, r7, #4
 8007d5e:	6800      	ldr	r0, [r0, #0]
 8007d60:	f000 fd7e 	bl	8008860 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007d64:	463b      	mov	r3, r7
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	785b      	ldrb	r3, [r3, #1]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d122      	bne.n	8007db4 <USB_EPStartXfer+0xa10>
 8007d6e:	1d3b      	adds	r3, r7, #4
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	463b      	mov	r3, r7
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d88:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007d8c:	1d3b      	adds	r3, r7, #4
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	463b      	mov	r3, r7
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	441a      	add	r2, r3
 8007d9a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007daa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	8013      	strh	r3, [r2, #0]
 8007db2:	e026      	b.n	8007e02 <USB_EPStartXfer+0xa5e>
 8007db4:	463b      	mov	r3, r7
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	785b      	ldrb	r3, [r3, #1]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d121      	bne.n	8007e02 <USB_EPStartXfer+0xa5e>
 8007dbe:	1d3b      	adds	r3, r7, #4
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	463b      	mov	r3, r7
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4413      	add	r3, r2
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8007ddc:	1d3b      	adds	r3, r7, #4
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	463b      	mov	r3, r7
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	441a      	add	r2, r3
 8007dea:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8007dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007df6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007e02:	1d3b      	adds	r3, r7, #4
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	463b      	mov	r3, r7
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	f107 020e 	add.w	r2, r7, #14
 8007e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e20:	8013      	strh	r3, [r2, #0]
 8007e22:	f107 030e 	add.w	r3, r7, #14
 8007e26:	f107 020e 	add.w	r2, r7, #14
 8007e2a:	8812      	ldrh	r2, [r2, #0]
 8007e2c:	f082 0210 	eor.w	r2, r2, #16
 8007e30:	801a      	strh	r2, [r3, #0]
 8007e32:	f107 030e 	add.w	r3, r7, #14
 8007e36:	f107 020e 	add.w	r2, r7, #14
 8007e3a:	8812      	ldrh	r2, [r2, #0]
 8007e3c:	f082 0220 	eor.w	r2, r2, #32
 8007e40:	801a      	strh	r2, [r3, #0]
 8007e42:	1d3b      	adds	r3, r7, #4
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	463b      	mov	r3, r7
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	441a      	add	r2, r3
 8007e50:	f107 030e 	add.w	r3, r7, #14
 8007e54:	881b      	ldrh	r3, [r3, #0]
 8007e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	8013      	strh	r3, [r2, #0]
 8007e6a:	e3b5      	b.n	80085d8 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007e6c:	463b      	mov	r3, r7
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	7b1b      	ldrb	r3, [r3, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f040 8090 	bne.w	8007f98 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007e78:	463b      	mov	r3, r7
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699a      	ldr	r2, [r3, #24]
 8007e7e:	463b      	mov	r3, r7
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d90e      	bls.n	8007ea6 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8007e88:	463b      	mov	r3, r7
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8007e92:	463b      	mov	r3, r7
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	699a      	ldr	r2, [r3, #24]
 8007e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e9c:	1ad2      	subs	r2, r2, r3
 8007e9e:	463b      	mov	r3, r7
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	619a      	str	r2, [r3, #24]
 8007ea4:	e008      	b.n	8007eb8 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8007ea6:	463b      	mov	r3, r7
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8007eb0:	463b      	mov	r3, r7
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007eb8:	1d3b      	adds	r3, r7, #4
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ec0:	1d3b      	adds	r3, r7, #4
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ed6:	463b      	mov	r3, r7
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	011a      	lsls	r2, r3, #4
 8007ede:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ee8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d116      	bne.n	8007f22 <USB_EPStartXfer+0xb7e>
 8007ef4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f06:	801a      	strh	r2, [r3, #0]
 8007f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f0c:	881b      	ldrh	r3, [r3, #0]
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f1e:	801a      	strh	r2, [r3, #0]
 8007f20:	e32c      	b.n	800857c <USB_EPStartXfer+0x11d8>
 8007f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f26:	2b3e      	cmp	r3, #62	; 0x3e
 8007f28:	d818      	bhi.n	8007f5c <USB_EPStartXfer+0xbb8>
 8007f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f2e:	085b      	lsrs	r3, r3, #1
 8007f30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d004      	beq.n	8007f4a <USB_EPStartXfer+0xba6>
 8007f40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f44:	3301      	adds	r3, #1
 8007f46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	029b      	lsls	r3, r3, #10
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f58:	801a      	strh	r2, [r3, #0]
 8007f5a:	e30f      	b.n	800857c <USB_EPStartXfer+0x11d8>
 8007f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f60:	095b      	lsrs	r3, r3, #5
 8007f62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f6a:	f003 031f 	and.w	r3, r3, #31
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d104      	bne.n	8007f7c <USB_EPStartXfer+0xbd8>
 8007f72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f76:	3b01      	subs	r3, #1
 8007f78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	029b      	lsls	r3, r3, #10
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f94:	801a      	strh	r2, [r3, #0]
 8007f96:	e2f1      	b.n	800857c <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007f98:	463b      	mov	r3, r7
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	78db      	ldrb	r3, [r3, #3]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	f040 818f 	bne.w	80082c2 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007fa4:	463b      	mov	r3, r7
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	785b      	ldrb	r3, [r3, #1]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d175      	bne.n	800809a <USB_EPStartXfer+0xcf6>
 8007fae:	1d3b      	adds	r3, r7, #4
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007fb6:	1d3b      	adds	r3, r7, #4
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007fcc:	463b      	mov	r3, r7
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	011a      	lsls	r2, r3, #4
 8007fd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007fd8:	4413      	add	r3, r2
 8007fda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007fe2:	463b      	mov	r3, r7
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d116      	bne.n	800801a <USB_EPStartXfer+0xc76>
 8007fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ffe:	801a      	strh	r2, [r3, #0]
 8008000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	b29b      	uxth	r3, r3
 8008008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800800c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008010:	b29a      	uxth	r2, r3
 8008012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008016:	801a      	strh	r2, [r3, #0]
 8008018:	e065      	b.n	80080e6 <USB_EPStartXfer+0xd42>
 800801a:	463b      	mov	r3, r7
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	2b3e      	cmp	r3, #62	; 0x3e
 8008022:	d81a      	bhi.n	800805a <USB_EPStartXfer+0xcb6>
 8008024:	463b      	mov	r3, r7
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	085b      	lsrs	r3, r3, #1
 800802c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008030:	463b      	mov	r3, r7
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	2b00      	cmp	r3, #0
 800803c:	d004      	beq.n	8008048 <USB_EPStartXfer+0xca4>
 800803e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008042:	3301      	adds	r3, #1
 8008044:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008048:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800804c:	b29b      	uxth	r3, r3
 800804e:	029b      	lsls	r3, r3, #10
 8008050:	b29a      	uxth	r2, r3
 8008052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008056:	801a      	strh	r2, [r3, #0]
 8008058:	e045      	b.n	80080e6 <USB_EPStartXfer+0xd42>
 800805a:	463b      	mov	r3, r7
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	095b      	lsrs	r3, r3, #5
 8008062:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008066:	463b      	mov	r3, r7
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	f003 031f 	and.w	r3, r3, #31
 8008070:	2b00      	cmp	r3, #0
 8008072:	d104      	bne.n	800807e <USB_EPStartXfer+0xcda>
 8008074:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008078:	3b01      	subs	r3, #1
 800807a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800807e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008082:	b29b      	uxth	r3, r3
 8008084:	029b      	lsls	r3, r3, #10
 8008086:	b29b      	uxth	r3, r3
 8008088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800808c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008090:	b29a      	uxth	r2, r3
 8008092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008096:	801a      	strh	r2, [r3, #0]
 8008098:	e025      	b.n	80080e6 <USB_EPStartXfer+0xd42>
 800809a:	463b      	mov	r3, r7
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	785b      	ldrb	r3, [r3, #1]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d120      	bne.n	80080e6 <USB_EPStartXfer+0xd42>
 80080a4:	1d3b      	adds	r3, r7, #4
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080ac:	1d3b      	adds	r3, r7, #4
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	461a      	mov	r2, r3
 80080b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080bc:	4413      	add	r3, r2
 80080be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080c2:	463b      	mov	r3, r7
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	011a      	lsls	r2, r3, #4
 80080ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080ce:	4413      	add	r3, r2
 80080d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080d8:	463b      	mov	r3, r7
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	b29a      	uxth	r2, r3
 80080e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080e4:	801a      	strh	r2, [r3, #0]
 80080e6:	1d3b      	adds	r3, r7, #4
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80080ee:	463b      	mov	r3, r7
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	785b      	ldrb	r3, [r3, #1]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d175      	bne.n	80081e4 <USB_EPStartXfer+0xe40>
 80080f8:	1d3b      	adds	r3, r7, #4
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008100:	1d3b      	adds	r3, r7, #4
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008108:	b29b      	uxth	r3, r3
 800810a:	461a      	mov	r2, r3
 800810c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008110:	4413      	add	r3, r2
 8008112:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008116:	463b      	mov	r3, r7
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	011a      	lsls	r2, r3, #4
 800811e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008122:	4413      	add	r3, r2
 8008124:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008128:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800812c:	463b      	mov	r3, r7
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d116      	bne.n	8008164 <USB_EPStartXfer+0xdc0>
 8008136:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800813a:	881b      	ldrh	r3, [r3, #0]
 800813c:	b29b      	uxth	r3, r3
 800813e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008142:	b29a      	uxth	r2, r3
 8008144:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008148:	801a      	strh	r2, [r3, #0]
 800814a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800814e:	881b      	ldrh	r3, [r3, #0]
 8008150:	b29b      	uxth	r3, r3
 8008152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800815a:	b29a      	uxth	r2, r3
 800815c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008160:	801a      	strh	r2, [r3, #0]
 8008162:	e061      	b.n	8008228 <USB_EPStartXfer+0xe84>
 8008164:	463b      	mov	r3, r7
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	2b3e      	cmp	r3, #62	; 0x3e
 800816c:	d81a      	bhi.n	80081a4 <USB_EPStartXfer+0xe00>
 800816e:	463b      	mov	r3, r7
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	085b      	lsrs	r3, r3, #1
 8008176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800817a:	463b      	mov	r3, r7
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	2b00      	cmp	r3, #0
 8008186:	d004      	beq.n	8008192 <USB_EPStartXfer+0xdee>
 8008188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800818c:	3301      	adds	r3, #1
 800818e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008196:	b29b      	uxth	r3, r3
 8008198:	029b      	lsls	r3, r3, #10
 800819a:	b29a      	uxth	r2, r3
 800819c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081a0:	801a      	strh	r2, [r3, #0]
 80081a2:	e041      	b.n	8008228 <USB_EPStartXfer+0xe84>
 80081a4:	463b      	mov	r3, r7
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	095b      	lsrs	r3, r3, #5
 80081ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081b0:	463b      	mov	r3, r7
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	f003 031f 	and.w	r3, r3, #31
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d104      	bne.n	80081c8 <USB_EPStartXfer+0xe24>
 80081be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c2:	3b01      	subs	r3, #1
 80081c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	029b      	lsls	r3, r3, #10
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081da:	b29a      	uxth	r2, r3
 80081dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081e0:	801a      	strh	r2, [r3, #0]
 80081e2:	e021      	b.n	8008228 <USB_EPStartXfer+0xe84>
 80081e4:	463b      	mov	r3, r7
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	785b      	ldrb	r3, [r3, #1]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d11c      	bne.n	8008228 <USB_EPStartXfer+0xe84>
 80081ee:	1d3b      	adds	r3, r7, #4
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	461a      	mov	r2, r3
 80081fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80081fe:	4413      	add	r3, r2
 8008200:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008204:	463b      	mov	r3, r7
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	011a      	lsls	r2, r3, #4
 800820c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008210:	4413      	add	r3, r2
 8008212:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008216:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800821a:	463b      	mov	r3, r7
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	b29a      	uxth	r2, r3
 8008222:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008226:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008228:	463b      	mov	r3, r7
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	2b00      	cmp	r3, #0
 8008230:	f000 81a4 	beq.w	800857c <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008234:	1d3b      	adds	r3, r7, #4
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	463b      	mov	r3, r7
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	881b      	ldrh	r3, [r3, #0]
 8008244:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008248:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800824c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d005      	beq.n	8008260 <USB_EPStartXfer+0xebc>
 8008254:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10d      	bne.n	800827c <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008260:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008268:	2b00      	cmp	r3, #0
 800826a:	f040 8187 	bne.w	800857c <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800826e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008276:	2b00      	cmp	r3, #0
 8008278:	f040 8180 	bne.w	800857c <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800827c:	1d3b      	adds	r3, r7, #4
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	463b      	mov	r3, r7
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	b29b      	uxth	r3, r3
 800828e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008296:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800829a:	1d3b      	adds	r3, r7, #4
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	463b      	mov	r3, r7
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	441a      	add	r2, r3
 80082a8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80082ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082bc:	b29b      	uxth	r3, r3
 80082be:	8013      	strh	r3, [r2, #0]
 80082c0:	e15c      	b.n	800857c <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80082c2:	463b      	mov	r3, r7
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	78db      	ldrb	r3, [r3, #3]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	f040 8155 	bne.w	8008578 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80082ce:	463b      	mov	r3, r7
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	699a      	ldr	r2, [r3, #24]
 80082d4:	463b      	mov	r3, r7
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d90e      	bls.n	80082fc <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80082de:	463b      	mov	r3, r7
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80082e8:	463b      	mov	r3, r7
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	699a      	ldr	r2, [r3, #24]
 80082ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082f2:	1ad2      	subs	r2, r2, r3
 80082f4:	463b      	mov	r3, r7
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	619a      	str	r2, [r3, #24]
 80082fa:	e008      	b.n	800830e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80082fc:	463b      	mov	r3, r7
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8008306:	463b      	mov	r3, r7
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2200      	movs	r2, #0
 800830c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800830e:	463b      	mov	r3, r7
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	785b      	ldrb	r3, [r3, #1]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d16f      	bne.n	80083f8 <USB_EPStartXfer+0x1054>
 8008318:	1d3b      	adds	r3, r7, #4
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008320:	1d3b      	adds	r3, r7, #4
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008328:	b29b      	uxth	r3, r3
 800832a:	461a      	mov	r2, r3
 800832c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008330:	4413      	add	r3, r2
 8008332:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008336:	463b      	mov	r3, r7
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	011a      	lsls	r2, r3, #4
 800833e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008342:	4413      	add	r3, r2
 8008344:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008348:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800834c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008350:	2b00      	cmp	r3, #0
 8008352:	d116      	bne.n	8008382 <USB_EPStartXfer+0xfde>
 8008354:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	b29b      	uxth	r3, r3
 800835c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008360:	b29a      	uxth	r2, r3
 8008362:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008366:	801a      	strh	r2, [r3, #0]
 8008368:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	b29b      	uxth	r3, r3
 8008370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008378:	b29a      	uxth	r2, r3
 800837a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800837e:	801a      	strh	r2, [r3, #0]
 8008380:	e05f      	b.n	8008442 <USB_EPStartXfer+0x109e>
 8008382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008386:	2b3e      	cmp	r3, #62	; 0x3e
 8008388:	d818      	bhi.n	80083bc <USB_EPStartXfer+0x1018>
 800838a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800838e:	085b      	lsrs	r3, r3, #1
 8008390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b00      	cmp	r3, #0
 800839e:	d004      	beq.n	80083aa <USB_EPStartXfer+0x1006>
 80083a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083a4:	3301      	adds	r3, #1
 80083a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80083aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	029b      	lsls	r3, r3, #10
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083b8:	801a      	strh	r2, [r3, #0]
 80083ba:	e042      	b.n	8008442 <USB_EPStartXfer+0x109e>
 80083bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80083c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083ca:	f003 031f 	and.w	r3, r3, #31
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d104      	bne.n	80083dc <USB_EPStartXfer+0x1038>
 80083d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083d6:	3b01      	subs	r3, #1
 80083d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80083dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	029b      	lsls	r3, r3, #10
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083f4:	801a      	strh	r2, [r3, #0]
 80083f6:	e024      	b.n	8008442 <USB_EPStartXfer+0x109e>
 80083f8:	463b      	mov	r3, r7
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	785b      	ldrb	r3, [r3, #1]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d11f      	bne.n	8008442 <USB_EPStartXfer+0x109e>
 8008402:	1d3b      	adds	r3, r7, #4
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800840a:	1d3b      	adds	r3, r7, #4
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008412:	b29b      	uxth	r3, r3
 8008414:	461a      	mov	r2, r3
 8008416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800841a:	4413      	add	r3, r2
 800841c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008420:	463b      	mov	r3, r7
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	011a      	lsls	r2, r3, #4
 8008428:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800842c:	4413      	add	r3, r2
 800842e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008432:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800843a:	b29a      	uxth	r2, r3
 800843c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008440:	801a      	strh	r2, [r3, #0]
 8008442:	1d3b      	adds	r3, r7, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800844a:	463b      	mov	r3, r7
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	785b      	ldrb	r3, [r3, #1]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d16f      	bne.n	8008534 <USB_EPStartXfer+0x1190>
 8008454:	1d3b      	adds	r3, r7, #4
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800845c:	1d3b      	adds	r3, r7, #4
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008464:	b29b      	uxth	r3, r3
 8008466:	461a      	mov	r2, r3
 8008468:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800846c:	4413      	add	r3, r2
 800846e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008472:	463b      	mov	r3, r7
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	011a      	lsls	r2, r3, #4
 800847a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800847e:	4413      	add	r3, r2
 8008480:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008484:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008488:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d116      	bne.n	80084be <USB_EPStartXfer+0x111a>
 8008490:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008494:	881b      	ldrh	r3, [r3, #0]
 8008496:	b29b      	uxth	r3, r3
 8008498:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800849c:	b29a      	uxth	r2, r3
 800849e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80084a2:	801a      	strh	r2, [r3, #0]
 80084a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80084a8:	881b      	ldrh	r3, [r3, #0]
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80084ba:	801a      	strh	r2, [r3, #0]
 80084bc:	e05e      	b.n	800857c <USB_EPStartXfer+0x11d8>
 80084be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084c2:	2b3e      	cmp	r3, #62	; 0x3e
 80084c4:	d818      	bhi.n	80084f8 <USB_EPStartXfer+0x1154>
 80084c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084ca:	085b      	lsrs	r3, r3, #1
 80084cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80084d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d004      	beq.n	80084e6 <USB_EPStartXfer+0x1142>
 80084dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084e0:	3301      	adds	r3, #1
 80084e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80084e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	029b      	lsls	r3, r3, #10
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80084f4:	801a      	strh	r2, [r3, #0]
 80084f6:	e041      	b.n	800857c <USB_EPStartXfer+0x11d8>
 80084f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084fc:	095b      	lsrs	r3, r3, #5
 80084fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008506:	f003 031f 	and.w	r3, r3, #31
 800850a:	2b00      	cmp	r3, #0
 800850c:	d104      	bne.n	8008518 <USB_EPStartXfer+0x1174>
 800850e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008512:	3b01      	subs	r3, #1
 8008514:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800851c:	b29b      	uxth	r3, r3
 800851e:	029b      	lsls	r3, r3, #10
 8008520:	b29b      	uxth	r3, r3
 8008522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800852a:	b29a      	uxth	r2, r3
 800852c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008530:	801a      	strh	r2, [r3, #0]
 8008532:	e023      	b.n	800857c <USB_EPStartXfer+0x11d8>
 8008534:	463b      	mov	r3, r7
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	785b      	ldrb	r3, [r3, #1]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d11e      	bne.n	800857c <USB_EPStartXfer+0x11d8>
 800853e:	1d3b      	adds	r3, r7, #4
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008546:	b29b      	uxth	r3, r3
 8008548:	461a      	mov	r2, r3
 800854a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800854e:	4413      	add	r3, r2
 8008550:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008554:	463b      	mov	r3, r7
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	011a      	lsls	r2, r3, #4
 800855c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008560:	4413      	add	r3, r2
 8008562:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008566:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800856a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800856e:	b29a      	uxth	r2, r3
 8008570:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008574:	801a      	strh	r2, [r3, #0]
 8008576:	e001      	b.n	800857c <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e02e      	b.n	80085da <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800857c:	1d3b      	adds	r3, r7, #4
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	463b      	mov	r3, r7
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	b29b      	uxth	r3, r3
 800858e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008596:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800859a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800859e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80085a2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80085a6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80085aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80085ae:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80085b2:	1d3b      	adds	r3, r7, #4
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	463b      	mov	r3, r7
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	441a      	add	r2, r3
 80085c0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80085c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	785b      	ldrb	r3, [r3, #1]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d020      	beq.n	8008638 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	881b      	ldrh	r3, [r3, #0]
 8008602:	b29b      	uxth	r3, r3
 8008604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800860c:	81bb      	strh	r3, [r7, #12]
 800860e:	89bb      	ldrh	r3, [r7, #12]
 8008610:	f083 0310 	eor.w	r3, r3, #16
 8008614:	81bb      	strh	r3, [r7, #12]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	441a      	add	r2, r3
 8008620:	89bb      	ldrh	r3, [r7, #12]
 8008622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800862a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800862e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008632:	b29b      	uxth	r3, r3
 8008634:	8013      	strh	r3, [r2, #0]
 8008636:	e01f      	b.n	8008678 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	881b      	ldrh	r3, [r3, #0]
 8008644:	b29b      	uxth	r3, r3
 8008646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800864a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800864e:	81fb      	strh	r3, [r7, #14]
 8008650:	89fb      	ldrh	r3, [r7, #14]
 8008652:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008656:	81fb      	strh	r3, [r7, #14]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	441a      	add	r2, r3
 8008662:	89fb      	ldrh	r3, [r7, #14]
 8008664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800866c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008674:	b29b      	uxth	r3, r3
 8008676:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	bc80      	pop	{r7}
 8008682:	4770      	bx	lr

08008684 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	7b1b      	ldrb	r3, [r3, #12]
 8008692:	2b00      	cmp	r3, #0
 8008694:	f040 809d 	bne.w	80087d2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	785b      	ldrb	r3, [r3, #1]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d04c      	beq.n	800873a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	823b      	strh	r3, [r7, #16]
 80086ae:	8a3b      	ldrh	r3, [r7, #16]
 80086b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d01b      	beq.n	80086f0 <USB_EPClearStall+0x6c>
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4413      	add	r3, r2
 80086c2:	881b      	ldrh	r3, [r3, #0]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ce:	81fb      	strh	r3, [r7, #14]
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	441a      	add	r2, r3
 80086da:	89fb      	ldrh	r3, [r7, #14]
 80086dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	78db      	ldrb	r3, [r3, #3]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d06c      	beq.n	80087d2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4413      	add	r3, r2
 8008702:	881b      	ldrh	r3, [r3, #0]
 8008704:	b29b      	uxth	r3, r3
 8008706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800870a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800870e:	81bb      	strh	r3, [r7, #12]
 8008710:	89bb      	ldrh	r3, [r7, #12]
 8008712:	f083 0320 	eor.w	r3, r3, #32
 8008716:	81bb      	strh	r3, [r7, #12]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	441a      	add	r2, r3
 8008722:	89bb      	ldrh	r3, [r7, #12]
 8008724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800872c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008734:	b29b      	uxth	r3, r3
 8008736:	8013      	strh	r3, [r2, #0]
 8008738:	e04b      	b.n	80087d2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	881b      	ldrh	r3, [r3, #0]
 8008746:	82fb      	strh	r3, [r7, #22]
 8008748:	8afb      	ldrh	r3, [r7, #22]
 800874a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d01b      	beq.n	800878a <USB_EPClearStall+0x106>
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	b29b      	uxth	r3, r3
 8008760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008768:	82bb      	strh	r3, [r7, #20]
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	441a      	add	r2, r3
 8008774:	8abb      	ldrh	r3, [r7, #20]
 8008776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800877a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800877e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008786:	b29b      	uxth	r3, r3
 8008788:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	881b      	ldrh	r3, [r3, #0]
 8008796:	b29b      	uxth	r3, r3
 8008798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800879c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a0:	827b      	strh	r3, [r7, #18]
 80087a2:	8a7b      	ldrh	r3, [r7, #18]
 80087a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80087a8:	827b      	strh	r3, [r7, #18]
 80087aa:	8a7b      	ldrh	r3, [r7, #18]
 80087ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80087b0:	827b      	strh	r3, [r7, #18]
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	441a      	add	r2, r3
 80087bc:	8a7b      	ldrh	r3, [r7, #18]
 80087be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	371c      	adds	r7, #28
 80087d8:	46bd      	mov	sp, r7
 80087da:	bc80      	pop	{r7}
 80087dc:	4770      	bx	lr

080087de <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	460b      	mov	r3, r1
 80087e8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80087ea:	78fb      	ldrb	r3, [r7, #3]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d103      	bne.n	80087f8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2280      	movs	r2, #128	; 0x80
 80087f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	bc80      	pop	{r7}
 8008802:	4770      	bx	lr

08008804 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	bc80      	pop	{r7}
 8008816:	4770      	bx	lr

08008818 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	bc80      	pop	{r7}
 800882a:	4770      	bx	lr

0800882c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800883a:	b29b      	uxth	r3, r3
 800883c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800883e:	68fb      	ldr	r3, [r7, #12]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	bc80      	pop	{r7}
 8008848:	4770      	bx	lr

0800884a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800884a:	b480      	push	{r7}
 800884c:	b083      	sub	sp, #12
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	bc80      	pop	{r7}
 800885e:	4770      	bx	lr

08008860 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008860:	b480      	push	{r7}
 8008862:	b08d      	sub	sp, #52	; 0x34
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	4611      	mov	r1, r2
 800886c:	461a      	mov	r2, r3
 800886e:	460b      	mov	r3, r1
 8008870:	80fb      	strh	r3, [r7, #6]
 8008872:	4613      	mov	r3, r2
 8008874:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008876:	88bb      	ldrh	r3, [r7, #4]
 8008878:	3301      	adds	r3, #1
 800887a:	085b      	lsrs	r3, r3, #1
 800887c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008886:	88fb      	ldrh	r3, [r7, #6]
 8008888:	005a      	lsls	r2, r3, #1
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	4413      	add	r3, r2
 800888e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008892:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008898:	e01e      	b.n	80088d8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800889a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	3301      	adds	r3, #1
 80088a4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	021b      	lsls	r3, r3, #8
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	461a      	mov	r2, r3
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80088c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c2:	3302      	adds	r3, #2
 80088c4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80088c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c8:	3302      	adds	r3, #2
 80088ca:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	3301      	adds	r3, #1
 80088d0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80088d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d4:	3b01      	subs	r3, #1
 80088d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1dd      	bne.n	800889a <USB_WritePMA+0x3a>
  }
}
 80088de:	bf00      	nop
 80088e0:	3734      	adds	r7, #52	; 0x34
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bc80      	pop	{r7}
 80088e6:	4770      	bx	lr

080088e8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b08b      	sub	sp, #44	; 0x2c
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	4611      	mov	r1, r2
 80088f4:	461a      	mov	r2, r3
 80088f6:	460b      	mov	r3, r1
 80088f8:	80fb      	strh	r3, [r7, #6]
 80088fa:	4613      	mov	r3, r2
 80088fc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80088fe:	88bb      	ldrh	r3, [r7, #4]
 8008900:	085b      	lsrs	r3, r3, #1
 8008902:	b29b      	uxth	r3, r3
 8008904:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800890e:	88fb      	ldrh	r3, [r7, #6]
 8008910:	005a      	lsls	r2, r3, #1
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	4413      	add	r3, r2
 8008916:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800891a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	627b      	str	r3, [r7, #36]	; 0x24
 8008920:	e01b      	b.n	800895a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	881b      	ldrh	r3, [r3, #0]
 8008926:	b29b      	uxth	r3, r3
 8008928:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	3302      	adds	r3, #2
 800892e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	b2da      	uxtb	r2, r3
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	3301      	adds	r3, #1
 800893c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	0a1b      	lsrs	r3, r3, #8
 8008942:	b2da      	uxtb	r2, r3
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	3301      	adds	r3, #1
 800894c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800894e:	6a3b      	ldr	r3, [r7, #32]
 8008950:	3302      	adds	r3, #2
 8008952:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	3b01      	subs	r3, #1
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e0      	bne.n	8008922 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008960:	88bb      	ldrh	r3, [r7, #4]
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	b29b      	uxth	r3, r3
 8008968:	2b00      	cmp	r3, #0
 800896a:	d007      	beq.n	800897c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	881b      	ldrh	r3, [r3, #0]
 8008970:	b29b      	uxth	r3, r3
 8008972:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	b2da      	uxtb	r2, r3
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	701a      	strb	r2, [r3, #0]
  }
}
 800897c:	bf00      	nop
 800897e:	372c      	adds	r7, #44	; 0x2c
 8008980:	46bd      	mov	sp, r7
 8008982:	bc80      	pop	{r7}
 8008984:	4770      	bx	lr

08008986 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	460b      	mov	r3, r1
 8008990:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	7c1b      	ldrb	r3, [r3, #16]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d115      	bne.n	80089ca <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800899e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089a2:	2202      	movs	r2, #2
 80089a4:	2181      	movs	r1, #129	; 0x81
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f001 fe1f 	bl	800a5ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80089b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089b6:	2202      	movs	r2, #2
 80089b8:	2101      	movs	r1, #1
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f001 fe15 	bl	800a5ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80089c8:	e012      	b.n	80089f0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80089ca:	2340      	movs	r3, #64	; 0x40
 80089cc:	2202      	movs	r2, #2
 80089ce:	2181      	movs	r1, #129	; 0x81
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 fe0a 	bl	800a5ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2201      	movs	r2, #1
 80089da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80089dc:	2340      	movs	r3, #64	; 0x40
 80089de:	2202      	movs	r2, #2
 80089e0:	2101      	movs	r1, #1
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f001 fe01 	bl	800a5ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80089f0:	2308      	movs	r3, #8
 80089f2:	2203      	movs	r2, #3
 80089f4:	2182      	movs	r1, #130	; 0x82
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f001 fdf7 	bl	800a5ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008a02:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008a06:	f001 ff17 	bl	800a838 <USBD_static_malloc>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d102      	bne.n	8008a22 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	73fb      	strb	r3, [r7, #15]
 8008a20:	e026      	b.n	8008a70 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a28:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	7c1b      	ldrb	r3, [r3, #16]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d109      	bne.n	8008a60 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a56:	2101      	movs	r1, #1
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f001 feb7 	bl	800a7cc <USBD_LL_PrepareReceive>
 8008a5e:	e007      	b.n	8008a70 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a66:	2340      	movs	r3, #64	; 0x40
 8008a68:	2101      	movs	r1, #1
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f001 feae 	bl	800a7cc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b084      	sub	sp, #16
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	460b      	mov	r3, r1
 8008a84:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008a86:	2300      	movs	r3, #0
 8008a88:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008a8a:	2181      	movs	r1, #129	; 0x81
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f001 fdd2 	bl	800a636 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008a98:	2101      	movs	r1, #1
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f001 fdcb 	bl	800a636 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008aa8:	2182      	movs	r1, #130	; 0x82
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f001 fdc3 	bl	800a636 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00e      	beq.n	8008ade <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f001 febd 	bl	800a850 <USBD_static_free>
    pdev->pClassData = NULL;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008afa:	2300      	movs	r3, #0
 8008afc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d039      	beq.n	8008b86 <USBD_CDC_Setup+0x9e>
 8008b12:	2b20      	cmp	r3, #32
 8008b14:	d17c      	bne.n	8008c10 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	88db      	ldrh	r3, [r3, #6]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d029      	beq.n	8008b72 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	b25b      	sxtb	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	da11      	bge.n	8008b4c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008b34:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	88d2      	ldrh	r2, [r2, #6]
 8008b3a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b3c:	6939      	ldr	r1, [r7, #16]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	88db      	ldrh	r3, [r3, #6]
 8008b42:	461a      	mov	r2, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f001 f9c9 	bl	8009edc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008b4a:	e068      	b.n	8008c1e <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	785a      	ldrb	r2, [r3, #1]
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	88db      	ldrh	r3, [r3, #6]
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b62:	6939      	ldr	r1, [r7, #16]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	88db      	ldrh	r3, [r3, #6]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f001 f9e4 	bl	8009f38 <USBD_CtlPrepareRx>
      break;
 8008b70:	e055      	b.n	8008c1e <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	7850      	ldrb	r0, [r2, #1]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	4798      	blx	r3
      break;
 8008b84:	e04b      	b.n	8008c1e <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	785b      	ldrb	r3, [r3, #1]
 8008b8a:	2b0a      	cmp	r3, #10
 8008b8c:	d017      	beq.n	8008bbe <USBD_CDC_Setup+0xd6>
 8008b8e:	2b0b      	cmp	r3, #11
 8008b90:	d029      	beq.n	8008be6 <USBD_CDC_Setup+0xfe>
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d133      	bne.n	8008bfe <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b9c:	2b03      	cmp	r3, #3
 8008b9e:	d107      	bne.n	8008bb0 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008ba0:	f107 030c 	add.w	r3, r7, #12
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 f997 	bl	8009edc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008bae:	e02e      	b.n	8008c0e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f001 f928 	bl	8009e08 <USBD_CtlError>
            ret = USBD_FAIL;
 8008bb8:	2302      	movs	r3, #2
 8008bba:	75fb      	strb	r3, [r7, #23]
          break;
 8008bbc:	e027      	b.n	8008c0e <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	d107      	bne.n	8008bd8 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008bc8:	f107 030f 	add.w	r3, r7, #15
 8008bcc:	2201      	movs	r2, #1
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f001 f983 	bl	8009edc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008bd6:	e01a      	b.n	8008c0e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008bd8:	6839      	ldr	r1, [r7, #0]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f001 f914 	bl	8009e08 <USBD_CtlError>
            ret = USBD_FAIL;
 8008be0:	2302      	movs	r3, #2
 8008be2:	75fb      	strb	r3, [r7, #23]
          break;
 8008be4:	e013      	b.n	8008c0e <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	d00d      	beq.n	8008c0c <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8008bf0:	6839      	ldr	r1, [r7, #0]
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f001 f908 	bl	8009e08 <USBD_CtlError>
            ret = USBD_FAIL;
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008bfc:	e006      	b.n	8008c0c <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 f901 	bl	8009e08 <USBD_CtlError>
          ret = USBD_FAIL;
 8008c06:	2302      	movs	r3, #2
 8008c08:	75fb      	strb	r3, [r7, #23]
          break;
 8008c0a:	e000      	b.n	8008c0e <USBD_CDC_Setup+0x126>
          break;
 8008c0c:	bf00      	nop
      }
      break;
 8008c0e:	e006      	b.n	8008c1e <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f001 f8f8 	bl	8009e08 <USBD_CtlError>
      ret = USBD_FAIL;
 8008c18:	2302      	movs	r3, #2
 8008c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c1c:	bf00      	nop
  }

  return ret;
 8008c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c3a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c42:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d03a      	beq.n	8008cc4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008c4e:	78fa      	ldrb	r2, [r7, #3]
 8008c50:	6879      	ldr	r1, [r7, #4]
 8008c52:	4613      	mov	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	440b      	add	r3, r1
 8008c5c:	331c      	adds	r3, #28
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d029      	beq.n	8008cb8 <USBD_CDC_DataIn+0x90>
 8008c64:	78fa      	ldrb	r2, [r7, #3]
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	440b      	add	r3, r1
 8008c72:	331c      	adds	r3, #28
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	78f9      	ldrb	r1, [r7, #3]
 8008c78:	68b8      	ldr	r0, [r7, #8]
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	440b      	add	r3, r1
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	4403      	add	r3, r0
 8008c84:	3338      	adds	r3, #56	; 0x38
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c8c:	fb03 f301 	mul.w	r3, r3, r1
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d110      	bne.n	8008cb8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008c96:	78fa      	ldrb	r2, [r7, #3]
 8008c98:	6879      	ldr	r1, [r7, #4]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	440b      	add	r3, r1
 8008ca4:	331c      	adds	r3, #28
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008caa:	78f9      	ldrb	r1, [r7, #3]
 8008cac:	2300      	movs	r3, #0
 8008cae:	2200      	movs	r2, #0
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f001 fd68 	bl	800a786 <USBD_LL_Transmit>
 8008cb6:	e003      	b.n	8008cc0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	e000      	b.n	8008cc6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008cc4:	2302      	movs	r3, #2
  }
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ce2:	78fb      	ldrb	r3, [r7, #3]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f001 fd93 	bl	800a812 <USBD_LL_GetRxDataSize>
 8008cec:	4602      	mov	r2, r0
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00d      	beq.n	8008d1a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d12:	4611      	mov	r1, r2
 8008d14:	4798      	blx	r3

    return USBD_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	e000      	b.n	8008d1c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008d1a:	2302      	movs	r3, #2
  }
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d32:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d015      	beq.n	8008d6a <USBD_CDC_EP0_RxReady+0x46>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008d44:	2bff      	cmp	r3, #255	; 0xff
 8008d46:	d010      	beq.n	8008d6a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008d56:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d5e:	b292      	uxth	r2, r2
 8008d60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	22ff      	movs	r2, #255	; 0xff
 8008d66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2243      	movs	r2, #67	; 0x43
 8008d80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008d82:	4b03      	ldr	r3, [pc, #12]	; (8008d90 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bc80      	pop	{r7}
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	200000ac 	.word	0x200000ac

08008d94 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2243      	movs	r2, #67	; 0x43
 8008da0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008da2:	4b03      	ldr	r3, [pc, #12]	; (8008db0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bc80      	pop	{r7}
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	20000068 	.word	0x20000068

08008db4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2243      	movs	r2, #67	; 0x43
 8008dc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008dc2:	4b03      	ldr	r3, [pc, #12]	; (8008dd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bc80      	pop	{r7}
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	200000f0 	.word	0x200000f0

08008dd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	220a      	movs	r2, #10
 8008de0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008de2:	4b03      	ldr	r3, [pc, #12]	; (8008df0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bc80      	pop	{r7}
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	20000024 	.word	0x20000024

08008df4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008dfe:	2302      	movs	r3, #2
 8008e00:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d005      	beq.n	8008e14 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bc80      	pop	{r7}
 8008e1e:	4770      	bx	lr

08008e20 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b087      	sub	sp, #28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e34:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008e3e:	88fa      	ldrh	r2, [r7, #6]
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	371c      	adds	r7, #28
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bc80      	pop	{r7}
 8008e50:	4770      	bx	lr

08008e52 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008e52:	b480      	push	{r7}
 8008e54:	b085      	sub	sp, #20
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e62:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bc80      	pop	{r7}
 8008e76:	4770      	bx	lr

08008e78 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d017      	beq.n	8008ec2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	7c1b      	ldrb	r3, [r3, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d109      	bne.n	8008eae <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f001 fc90 	bl	800a7cc <USBD_LL_PrepareReceive>
 8008eac:	e007      	b.n	8008ebe <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008eb4:	2340      	movs	r3, #64	; 0x40
 8008eb6:	2101      	movs	r1, #1
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f001 fc87 	bl	800a7cc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	e000      	b.n	8008ec4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008ec2:	2302      	movs	r3, #2
  }
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	e01a      	b.n	8008f1a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	79fa      	ldrb	r2, [r7, #7]
 8008f10:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f001 faf4 	bl	800a500 <USBD_LL_Init>

  return USBD_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b085      	sub	sp, #20
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d006      	beq.n	8008f44 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	73fb      	strb	r3, [r7, #15]
 8008f42:	e001      	b.n	8008f48 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008f44:	2302      	movs	r3, #2
 8008f46:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bc80      	pop	{r7}
 8008f52:	4770      	bx	lr

08008f54 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f001 fb29 	bl	800a5b4 <USBD_LL_Start>

  return USBD_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bc80      	pop	{r7}
 8008f7e:	4770      	bx	lr

08008f80 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00c      	beq.n	8008fb4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	78fa      	ldrb	r2, [r7, #3]
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	4798      	blx	r3
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d101      	bne.n	8008fb4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b082      	sub	sp, #8
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	78fa      	ldrb	r2, [r7, #3]
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	4798      	blx	r3

  return USBD_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 feca 	bl	8009d90 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800900a:	461a      	mov	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009018:	f003 031f 	and.w	r3, r3, #31
 800901c:	2b01      	cmp	r3, #1
 800901e:	d00c      	beq.n	800903a <USBD_LL_SetupStage+0x56>
 8009020:	2b01      	cmp	r3, #1
 8009022:	d302      	bcc.n	800902a <USBD_LL_SetupStage+0x46>
 8009024:	2b02      	cmp	r3, #2
 8009026:	d010      	beq.n	800904a <USBD_LL_SetupStage+0x66>
 8009028:	e017      	b.n	800905a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f9ca 	bl	80093cc <USBD_StdDevReq>
      break;
 8009038:	e01a      	b.n	8009070 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009040:	4619      	mov	r1, r3
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fa2c 	bl	80094a0 <USBD_StdItfReq>
      break;
 8009048:	e012      	b.n	8009070 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009050:	4619      	mov	r1, r3
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fa6a 	bl	800952c <USBD_StdEPReq>
      break;
 8009058:	e00a      	b.n	8009070 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009060:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009064:	b2db      	uxtb	r3, r3
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f001 fb03 	bl	800a674 <USBD_LL_StallEP>
      break;
 800906e:	bf00      	nop
  }

  return USBD_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b086      	sub	sp, #24
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	460b      	mov	r3, r1
 8009084:	607a      	str	r2, [r7, #4]
 8009086:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009088:	7afb      	ldrb	r3, [r7, #11]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d14b      	bne.n	8009126 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009094:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800909c:	2b03      	cmp	r3, #3
 800909e:	d134      	bne.n	800910a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	68da      	ldr	r2, [r3, #12]
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d919      	bls.n	80090e0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	68da      	ldr	r2, [r3, #12]
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	1ad2      	subs	r2, r2, r3
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d203      	bcs.n	80090ce <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	e002      	b.n	80090d4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	461a      	mov	r2, r3
 80090d6:	6879      	ldr	r1, [r7, #4]
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f000 ff4b 	bl	8009f74 <USBD_CtlContinueRx>
 80090de:	e038      	b.n	8009152 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00a      	beq.n	8009102 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80090f2:	2b03      	cmp	r3, #3
 80090f4:	d105      	bne.n	8009102 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f000 ff48 	bl	8009f98 <USBD_CtlSendStatus>
 8009108:	e023      	b.n	8009152 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009110:	2b05      	cmp	r3, #5
 8009112:	d11e      	bne.n	8009152 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2200      	movs	r2, #0
 8009118:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800911c:	2100      	movs	r1, #0
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f001 faa8 	bl	800a674 <USBD_LL_StallEP>
 8009124:	e015      	b.n	8009152 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00d      	beq.n	800914e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009138:	2b03      	cmp	r3, #3
 800913a:	d108      	bne.n	800914e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009142:	699b      	ldr	r3, [r3, #24]
 8009144:	7afa      	ldrb	r2, [r7, #11]
 8009146:	4611      	mov	r1, r2
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	4798      	blx	r3
 800914c:	e001      	b.n	8009152 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800914e:	2302      	movs	r3, #2
 8009150:	e000      	b.n	8009154 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3718      	adds	r7, #24
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	460b      	mov	r3, r1
 8009166:	607a      	str	r2, [r7, #4]
 8009168:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800916a:	7afb      	ldrb	r3, [r7, #11]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d17f      	bne.n	8009270 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	3314      	adds	r3, #20
 8009174:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800917c:	2b02      	cmp	r3, #2
 800917e:	d15c      	bne.n	800923a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	68da      	ldr	r2, [r3, #12]
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	429a      	cmp	r2, r3
 800918a:	d915      	bls.n	80091b8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	68da      	ldr	r2, [r3, #12]
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	1ad2      	subs	r2, r2, r3
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	b29b      	uxth	r3, r3
 80091a0:	461a      	mov	r2, r3
 80091a2:	6879      	ldr	r1, [r7, #4]
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f000 feb5 	bl	8009f14 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091aa:	2300      	movs	r3, #0
 80091ac:	2200      	movs	r2, #0
 80091ae:	2100      	movs	r1, #0
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f001 fb0b 	bl	800a7cc <USBD_LL_PrepareReceive>
 80091b6:	e04e      	b.n	8009256 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	697a      	ldr	r2, [r7, #20]
 80091be:	6912      	ldr	r2, [r2, #16]
 80091c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80091c4:	fb02 f201 	mul.w	r2, r2, r1
 80091c8:	1a9b      	subs	r3, r3, r2
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d11c      	bne.n	8009208 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	689a      	ldr	r2, [r3, #8]
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d316      	bcc.n	8009208 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	689a      	ldr	r2, [r3, #8]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d20f      	bcs.n	8009208 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80091e8:	2200      	movs	r2, #0
 80091ea:	2100      	movs	r1, #0
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 fe91 	bl	8009f14 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091fa:	2300      	movs	r3, #0
 80091fc:	2200      	movs	r2, #0
 80091fe:	2100      	movs	r1, #0
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f001 fae3 	bl	800a7cc <USBD_LL_PrepareReceive>
 8009206:	e026      	b.n	8009256 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00a      	beq.n	800922a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800921a:	2b03      	cmp	r3, #3
 800921c:	d105      	bne.n	800922a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800922a:	2180      	movs	r1, #128	; 0x80
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f001 fa21 	bl	800a674 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f000 fec3 	bl	8009fbe <USBD_CtlReceiveStatus>
 8009238:	e00d      	b.n	8009256 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009240:	2b04      	cmp	r3, #4
 8009242:	d004      	beq.n	800924e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800924a:	2b00      	cmp	r3, #0
 800924c:	d103      	bne.n	8009256 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800924e:	2180      	movs	r1, #128	; 0x80
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f001 fa0f 	bl	800a674 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800925c:	2b01      	cmp	r3, #1
 800925e:	d11d      	bne.n	800929c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f7ff fe83 	bl	8008f6c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800926e:	e015      	b.n	800929c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009276:	695b      	ldr	r3, [r3, #20]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00d      	beq.n	8009298 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009282:	2b03      	cmp	r3, #3
 8009284:	d108      	bne.n	8009298 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	7afa      	ldrb	r2, [r7, #11]
 8009290:	4611      	mov	r1, r2
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	4798      	blx	r3
 8009296:	e001      	b.n	800929c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009298:	2302      	movs	r3, #2
 800929a:	e000      	b.n	800929e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b082      	sub	sp, #8
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80092ae:	2340      	movs	r3, #64	; 0x40
 80092b0:	2200      	movs	r2, #0
 80092b2:	2100      	movs	r1, #0
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f001 f998 	bl	800a5ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2240      	movs	r2, #64	; 0x40
 80092c6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80092ca:	2340      	movs	r3, #64	; 0x40
 80092cc:	2200      	movs	r2, #0
 80092ce:	2180      	movs	r1, #128	; 0x80
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f001 f98a 	bl	800a5ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2240      	movs	r2, #64	; 0x40
 80092e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009306:	2b00      	cmp	r3, #0
 8009308:	d009      	beq.n	800931e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	6852      	ldr	r2, [r2, #4]
 8009316:	b2d2      	uxtb	r2, r2
 8009318:	4611      	mov	r1, r2
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	4798      	blx	r3
  }

  return USBD_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	460b      	mov	r3, r1
 8009332:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	bc80      	pop	{r7}
 8009344:	4770      	bx	lr

08009346 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009346:	b480      	push	{r7}
 8009348:	b083      	sub	sp, #12
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2204      	movs	r2, #4
 800935e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	bc80      	pop	{r7}
 800936c:	4770      	bx	lr

0800936e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800936e:	b480      	push	{r7}
 8009370:	b083      	sub	sp, #12
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800937c:	2b04      	cmp	r3, #4
 800937e:	d105      	bne.n	800938c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	bc80      	pop	{r7}
 8009396:	4770      	bx	lr

08009398 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093a6:	2b03      	cmp	r3, #3
 80093a8:	d10b      	bne.n	80093c2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093b0:	69db      	ldr	r3, [r3, #28]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d005      	beq.n	80093c2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093d6:	2300      	movs	r3, #0
 80093d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093e2:	2b20      	cmp	r3, #32
 80093e4:	d004      	beq.n	80093f0 <USBD_StdDevReq+0x24>
 80093e6:	2b40      	cmp	r3, #64	; 0x40
 80093e8:	d002      	beq.n	80093f0 <USBD_StdDevReq+0x24>
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d008      	beq.n	8009400 <USBD_StdDevReq+0x34>
 80093ee:	e04c      	b.n	800948a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	4798      	blx	r3
      break;
 80093fe:	e049      	b.n	8009494 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	785b      	ldrb	r3, [r3, #1]
 8009404:	2b09      	cmp	r3, #9
 8009406:	d83a      	bhi.n	800947e <USBD_StdDevReq+0xb2>
 8009408:	a201      	add	r2, pc, #4	; (adr r2, 8009410 <USBD_StdDevReq+0x44>)
 800940a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940e:	bf00      	nop
 8009410:	08009461 	.word	0x08009461
 8009414:	08009475 	.word	0x08009475
 8009418:	0800947f 	.word	0x0800947f
 800941c:	0800946b 	.word	0x0800946b
 8009420:	0800947f 	.word	0x0800947f
 8009424:	08009443 	.word	0x08009443
 8009428:	08009439 	.word	0x08009439
 800942c:	0800947f 	.word	0x0800947f
 8009430:	08009457 	.word	0x08009457
 8009434:	0800944d 	.word	0x0800944d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009438:	6839      	ldr	r1, [r7, #0]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f9d4 	bl	80097e8 <USBD_GetDescriptor>
          break;
 8009440:	e022      	b.n	8009488 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fb37 	bl	8009ab8 <USBD_SetAddress>
          break;
 800944a:	e01d      	b.n	8009488 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fb74 	bl	8009b3c <USBD_SetConfig>
          break;
 8009454:	e018      	b.n	8009488 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fbfd 	bl	8009c58 <USBD_GetConfig>
          break;
 800945e:	e013      	b.n	8009488 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 fc2c 	bl	8009cc0 <USBD_GetStatus>
          break;
 8009468:	e00e      	b.n	8009488 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fc5a 	bl	8009d26 <USBD_SetFeature>
          break;
 8009472:	e009      	b.n	8009488 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009474:	6839      	ldr	r1, [r7, #0]
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fc69 	bl	8009d4e <USBD_ClrFeature>
          break;
 800947c:	e004      	b.n	8009488 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fcc1 	bl	8009e08 <USBD_CtlError>
          break;
 8009486:	bf00      	nop
      }
      break;
 8009488:	e004      	b.n	8009494 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fcbb 	bl	8009e08 <USBD_CtlError>
      break;
 8009492:	bf00      	nop
  }

  return ret;
 8009494:	7bfb      	ldrb	r3, [r7, #15]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop

080094a0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094b6:	2b20      	cmp	r3, #32
 80094b8:	d003      	beq.n	80094c2 <USBD_StdItfReq+0x22>
 80094ba:	2b40      	cmp	r3, #64	; 0x40
 80094bc:	d001      	beq.n	80094c2 <USBD_StdItfReq+0x22>
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d12a      	bne.n	8009518 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c8:	3b01      	subs	r3, #1
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d81d      	bhi.n	800950a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	889b      	ldrh	r3, [r3, #4]
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d813      	bhi.n	8009500 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	4798      	blx	r3
 80094e6:	4603      	mov	r3, r0
 80094e8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	88db      	ldrh	r3, [r3, #6]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d110      	bne.n	8009514 <USBD_StdItfReq+0x74>
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10d      	bne.n	8009514 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fd4d 	bl	8009f98 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80094fe:	e009      	b.n	8009514 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fc80 	bl	8009e08 <USBD_CtlError>
          break;
 8009508:	e004      	b.n	8009514 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fc7b 	bl	8009e08 <USBD_CtlError>
          break;
 8009512:	e000      	b.n	8009516 <USBD_StdItfReq+0x76>
          break;
 8009514:	bf00      	nop
      }
      break;
 8009516:	e004      	b.n	8009522 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8009518:	6839      	ldr	r1, [r7, #0]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fc74 	bl	8009e08 <USBD_CtlError>
      break;
 8009520:	bf00      	nop
  }

  return USBD_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	889b      	ldrh	r3, [r3, #4]
 800953e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009548:	2b20      	cmp	r3, #32
 800954a:	d004      	beq.n	8009556 <USBD_StdEPReq+0x2a>
 800954c:	2b40      	cmp	r3, #64	; 0x40
 800954e:	d002      	beq.n	8009556 <USBD_StdEPReq+0x2a>
 8009550:	2b00      	cmp	r3, #0
 8009552:	d008      	beq.n	8009566 <USBD_StdEPReq+0x3a>
 8009554:	e13d      	b.n	80097d2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	4798      	blx	r3
      break;
 8009564:	e13a      	b.n	80097dc <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800956e:	2b20      	cmp	r3, #32
 8009570:	d10a      	bne.n	8009588 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	4798      	blx	r3
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009584:	7bfb      	ldrb	r3, [r7, #15]
 8009586:	e12a      	b.n	80097de <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	785b      	ldrb	r3, [r3, #1]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d03e      	beq.n	800960e <USBD_StdEPReq+0xe2>
 8009590:	2b03      	cmp	r3, #3
 8009592:	d002      	beq.n	800959a <USBD_StdEPReq+0x6e>
 8009594:	2b00      	cmp	r3, #0
 8009596:	d070      	beq.n	800967a <USBD_StdEPReq+0x14e>
 8009598:	e115      	b.n	80097c6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	d002      	beq.n	80095aa <USBD_StdEPReq+0x7e>
 80095a4:	2b03      	cmp	r3, #3
 80095a6:	d015      	beq.n	80095d4 <USBD_StdEPReq+0xa8>
 80095a8:	e02b      	b.n	8009602 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095aa:	7bbb      	ldrb	r3, [r7, #14]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00c      	beq.n	80095ca <USBD_StdEPReq+0x9e>
 80095b0:	7bbb      	ldrb	r3, [r7, #14]
 80095b2:	2b80      	cmp	r3, #128	; 0x80
 80095b4:	d009      	beq.n	80095ca <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	4619      	mov	r1, r3
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f001 f85a 	bl	800a674 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80095c0:	2180      	movs	r1, #128	; 0x80
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f001 f856 	bl	800a674 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095c8:	e020      	b.n	800960c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80095ca:	6839      	ldr	r1, [r7, #0]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fc1b 	bl	8009e08 <USBD_CtlError>
              break;
 80095d2:	e01b      	b.n	800960c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	885b      	ldrh	r3, [r3, #2]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10e      	bne.n	80095fa <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80095dc:	7bbb      	ldrb	r3, [r7, #14]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00b      	beq.n	80095fa <USBD_StdEPReq+0xce>
 80095e2:	7bbb      	ldrb	r3, [r7, #14]
 80095e4:	2b80      	cmp	r3, #128	; 0x80
 80095e6:	d008      	beq.n	80095fa <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	88db      	ldrh	r3, [r3, #6]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d104      	bne.n	80095fa <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f001 f83d 	bl	800a674 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fccc 	bl	8009f98 <USBD_CtlSendStatus>

              break;
 8009600:	e004      	b.n	800960c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8009602:	6839      	ldr	r1, [r7, #0]
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 fbff 	bl	8009e08 <USBD_CtlError>
              break;
 800960a:	bf00      	nop
          }
          break;
 800960c:	e0e0      	b.n	80097d0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009614:	2b02      	cmp	r3, #2
 8009616:	d002      	beq.n	800961e <USBD_StdEPReq+0xf2>
 8009618:	2b03      	cmp	r3, #3
 800961a:	d015      	beq.n	8009648 <USBD_StdEPReq+0x11c>
 800961c:	e026      	b.n	800966c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800961e:	7bbb      	ldrb	r3, [r7, #14]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00c      	beq.n	800963e <USBD_StdEPReq+0x112>
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	2b80      	cmp	r3, #128	; 0x80
 8009628:	d009      	beq.n	800963e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800962a:	7bbb      	ldrb	r3, [r7, #14]
 800962c:	4619      	mov	r1, r3
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f001 f820 	bl	800a674 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009634:	2180      	movs	r1, #128	; 0x80
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f001 f81c 	bl	800a674 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800963c:	e01c      	b.n	8009678 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fbe1 	bl	8009e08 <USBD_CtlError>
              break;
 8009646:	e017      	b.n	8009678 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	885b      	ldrh	r3, [r3, #2]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d112      	bne.n	8009676 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009650:	7bbb      	ldrb	r3, [r7, #14]
 8009652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009656:	2b00      	cmp	r3, #0
 8009658:	d004      	beq.n	8009664 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800965a:	7bbb      	ldrb	r3, [r7, #14]
 800965c:	4619      	mov	r1, r3
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f001 f827 	bl	800a6b2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fc97 	bl	8009f98 <USBD_CtlSendStatus>
              }
              break;
 800966a:	e004      	b.n	8009676 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fbca 	bl	8009e08 <USBD_CtlError>
              break;
 8009674:	e000      	b.n	8009678 <USBD_StdEPReq+0x14c>
              break;
 8009676:	bf00      	nop
          }
          break;
 8009678:	e0aa      	b.n	80097d0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009680:	2b02      	cmp	r3, #2
 8009682:	d002      	beq.n	800968a <USBD_StdEPReq+0x15e>
 8009684:	2b03      	cmp	r3, #3
 8009686:	d032      	beq.n	80096ee <USBD_StdEPReq+0x1c2>
 8009688:	e097      	b.n	80097ba <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800968a:	7bbb      	ldrb	r3, [r7, #14]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d007      	beq.n	80096a0 <USBD_StdEPReq+0x174>
 8009690:	7bbb      	ldrb	r3, [r7, #14]
 8009692:	2b80      	cmp	r3, #128	; 0x80
 8009694:	d004      	beq.n	80096a0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8009696:	6839      	ldr	r1, [r7, #0]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fbb5 	bl	8009e08 <USBD_CtlError>
                break;
 800969e:	e091      	b.n	80097c4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	da0b      	bge.n	80096c0 <USBD_StdEPReq+0x194>
 80096a8:	7bbb      	ldrb	r3, [r7, #14]
 80096aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096ae:	4613      	mov	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	3310      	adds	r3, #16
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	4413      	add	r3, r2
 80096bc:	3304      	adds	r3, #4
 80096be:	e00b      	b.n	80096d8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096c0:	7bbb      	ldrb	r3, [r7, #14]
 80096c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096c6:	4613      	mov	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	4413      	add	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	4413      	add	r3, r2
 80096d6:	3304      	adds	r3, #4
 80096d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2200      	movs	r2, #0
 80096de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	2202      	movs	r2, #2
 80096e4:	4619      	mov	r1, r3
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fbf8 	bl	8009edc <USBD_CtlSendData>
              break;
 80096ec:	e06a      	b.n	80097c4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80096ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	da11      	bge.n	800971a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
 80096f8:	f003 020f 	and.w	r2, r3, #15
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	4613      	mov	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	440b      	add	r3, r1
 8009708:	3318      	adds	r3, #24
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d117      	bne.n	8009740 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fb78 	bl	8009e08 <USBD_CtlError>
                  break;
 8009718:	e054      	b.n	80097c4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800971a:	7bbb      	ldrb	r3, [r7, #14]
 800971c:	f003 020f 	and.w	r2, r3, #15
 8009720:	6879      	ldr	r1, [r7, #4]
 8009722:	4613      	mov	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4413      	add	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	440b      	add	r3, r1
 800972c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d104      	bne.n	8009740 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fb65 	bl	8009e08 <USBD_CtlError>
                  break;
 800973e:	e041      	b.n	80097c4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009744:	2b00      	cmp	r3, #0
 8009746:	da0b      	bge.n	8009760 <USBD_StdEPReq+0x234>
 8009748:	7bbb      	ldrb	r3, [r7, #14]
 800974a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800974e:	4613      	mov	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	3310      	adds	r3, #16
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	4413      	add	r3, r2
 800975c:	3304      	adds	r3, #4
 800975e:	e00b      	b.n	8009778 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009760:	7bbb      	ldrb	r3, [r7, #14]
 8009762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009766:	4613      	mov	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	4413      	add	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	4413      	add	r3, r2
 8009776:	3304      	adds	r3, #4
 8009778:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800977a:	7bbb      	ldrb	r3, [r7, #14]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d002      	beq.n	8009786 <USBD_StdEPReq+0x25a>
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	2b80      	cmp	r3, #128	; 0x80
 8009784:	d103      	bne.n	800978e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	2200      	movs	r2, #0
 800978a:	601a      	str	r2, [r3, #0]
 800978c:	e00e      	b.n	80097ac <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800978e:	7bbb      	ldrb	r3, [r7, #14]
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 ffac 	bl	800a6f0 <USBD_LL_IsStallEP>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d003      	beq.n	80097a6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	2201      	movs	r2, #1
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	e002      	b.n	80097ac <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	2200      	movs	r2, #0
 80097aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	2202      	movs	r2, #2
 80097b0:	4619      	mov	r1, r3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fb92 	bl	8009edc <USBD_CtlSendData>
              break;
 80097b8:	e004      	b.n	80097c4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fb23 	bl	8009e08 <USBD_CtlError>
              break;
 80097c2:	bf00      	nop
          }
          break;
 80097c4:	e004      	b.n	80097d0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80097c6:	6839      	ldr	r1, [r7, #0]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fb1d 	bl	8009e08 <USBD_CtlError>
          break;
 80097ce:	bf00      	nop
      }
      break;
 80097d0:	e004      	b.n	80097dc <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fb17 	bl	8009e08 <USBD_CtlError>
      break;
 80097da:	bf00      	nop
  }

  return ret;
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
	...

080097e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097f2:	2300      	movs	r3, #0
 80097f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80097f6:	2300      	movs	r3, #0
 80097f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80097fa:	2300      	movs	r3, #0
 80097fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	885b      	ldrh	r3, [r3, #2]
 8009802:	0a1b      	lsrs	r3, r3, #8
 8009804:	b29b      	uxth	r3, r3
 8009806:	3b01      	subs	r3, #1
 8009808:	2b06      	cmp	r3, #6
 800980a:	f200 8128 	bhi.w	8009a5e <USBD_GetDescriptor+0x276>
 800980e:	a201      	add	r2, pc, #4	; (adr r2, 8009814 <USBD_GetDescriptor+0x2c>)
 8009810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009814:	08009831 	.word	0x08009831
 8009818:	08009849 	.word	0x08009849
 800981c:	08009889 	.word	0x08009889
 8009820:	08009a5f 	.word	0x08009a5f
 8009824:	08009a5f 	.word	0x08009a5f
 8009828:	080099ff 	.word	0x080099ff
 800982c:	08009a2b 	.word	0x08009a2b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	7c12      	ldrb	r2, [r2, #16]
 800983c:	f107 0108 	add.w	r1, r7, #8
 8009840:	4610      	mov	r0, r2
 8009842:	4798      	blx	r3
 8009844:	60f8      	str	r0, [r7, #12]
      break;
 8009846:	e112      	b.n	8009a6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	7c1b      	ldrb	r3, [r3, #16]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10d      	bne.n	800986c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009858:	f107 0208 	add.w	r2, r7, #8
 800985c:	4610      	mov	r0, r2
 800985e:	4798      	blx	r3
 8009860:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3301      	adds	r3, #1
 8009866:	2202      	movs	r2, #2
 8009868:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800986a:	e100      	b.n	8009a6e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009874:	f107 0208 	add.w	r2, r7, #8
 8009878:	4610      	mov	r0, r2
 800987a:	4798      	blx	r3
 800987c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	3301      	adds	r3, #1
 8009882:	2202      	movs	r2, #2
 8009884:	701a      	strb	r2, [r3, #0]
      break;
 8009886:	e0f2      	b.n	8009a6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	885b      	ldrh	r3, [r3, #2]
 800988c:	b2db      	uxtb	r3, r3
 800988e:	2b05      	cmp	r3, #5
 8009890:	f200 80ac 	bhi.w	80099ec <USBD_GetDescriptor+0x204>
 8009894:	a201      	add	r2, pc, #4	; (adr r2, 800989c <USBD_GetDescriptor+0xb4>)
 8009896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989a:	bf00      	nop
 800989c:	080098b5 	.word	0x080098b5
 80098a0:	080098e9 	.word	0x080098e9
 80098a4:	0800991d 	.word	0x0800991d
 80098a8:	08009951 	.word	0x08009951
 80098ac:	08009985 	.word	0x08009985
 80098b0:	080099b9 	.word	0x080099b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00b      	beq.n	80098d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	7c12      	ldrb	r2, [r2, #16]
 80098cc:	f107 0108 	add.w	r1, r7, #8
 80098d0:	4610      	mov	r0, r2
 80098d2:	4798      	blx	r3
 80098d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098d6:	e091      	b.n	80099fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098d8:	6839      	ldr	r1, [r7, #0]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa94 	bl	8009e08 <USBD_CtlError>
            err++;
 80098e0:	7afb      	ldrb	r3, [r7, #11]
 80098e2:	3301      	adds	r3, #1
 80098e4:	72fb      	strb	r3, [r7, #11]
          break;
 80098e6:	e089      	b.n	80099fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00b      	beq.n	800990c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	7c12      	ldrb	r2, [r2, #16]
 8009900:	f107 0108 	add.w	r1, r7, #8
 8009904:	4610      	mov	r0, r2
 8009906:	4798      	blx	r3
 8009908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800990a:	e077      	b.n	80099fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800990c:	6839      	ldr	r1, [r7, #0]
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fa7a 	bl	8009e08 <USBD_CtlError>
            err++;
 8009914:	7afb      	ldrb	r3, [r7, #11]
 8009916:	3301      	adds	r3, #1
 8009918:	72fb      	strb	r3, [r7, #11]
          break;
 800991a:	e06f      	b.n	80099fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00b      	beq.n	8009940 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	7c12      	ldrb	r2, [r2, #16]
 8009934:	f107 0108 	add.w	r1, r7, #8
 8009938:	4610      	mov	r0, r2
 800993a:	4798      	blx	r3
 800993c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800993e:	e05d      	b.n	80099fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fa60 	bl	8009e08 <USBD_CtlError>
            err++;
 8009948:	7afb      	ldrb	r3, [r7, #11]
 800994a:	3301      	adds	r3, #1
 800994c:	72fb      	strb	r3, [r7, #11]
          break;
 800994e:	e055      	b.n	80099fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00b      	beq.n	8009974 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	7c12      	ldrb	r2, [r2, #16]
 8009968:	f107 0108 	add.w	r1, r7, #8
 800996c:	4610      	mov	r0, r2
 800996e:	4798      	blx	r3
 8009970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009972:	e043      	b.n	80099fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009974:	6839      	ldr	r1, [r7, #0]
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fa46 	bl	8009e08 <USBD_CtlError>
            err++;
 800997c:	7afb      	ldrb	r3, [r7, #11]
 800997e:	3301      	adds	r3, #1
 8009980:	72fb      	strb	r3, [r7, #11]
          break;
 8009982:	e03b      	b.n	80099fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800998a:	695b      	ldr	r3, [r3, #20]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00b      	beq.n	80099a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	7c12      	ldrb	r2, [r2, #16]
 800999c:	f107 0108 	add.w	r1, r7, #8
 80099a0:	4610      	mov	r0, r2
 80099a2:	4798      	blx	r3
 80099a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099a6:	e029      	b.n	80099fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fa2c 	bl	8009e08 <USBD_CtlError>
            err++;
 80099b0:	7afb      	ldrb	r3, [r7, #11]
 80099b2:	3301      	adds	r3, #1
 80099b4:	72fb      	strb	r3, [r7, #11]
          break;
 80099b6:	e021      	b.n	80099fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d00b      	beq.n	80099dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	7c12      	ldrb	r2, [r2, #16]
 80099d0:	f107 0108 	add.w	r1, r7, #8
 80099d4:	4610      	mov	r0, r2
 80099d6:	4798      	blx	r3
 80099d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099da:	e00f      	b.n	80099fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099dc:	6839      	ldr	r1, [r7, #0]
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fa12 	bl	8009e08 <USBD_CtlError>
            err++;
 80099e4:	7afb      	ldrb	r3, [r7, #11]
 80099e6:	3301      	adds	r3, #1
 80099e8:	72fb      	strb	r3, [r7, #11]
          break;
 80099ea:	e007      	b.n	80099fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fa0a 	bl	8009e08 <USBD_CtlError>
          err++;
 80099f4:	7afb      	ldrb	r3, [r7, #11]
 80099f6:	3301      	adds	r3, #1
 80099f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80099fa:	e038      	b.n	8009a6e <USBD_GetDescriptor+0x286>
 80099fc:	e037      	b.n	8009a6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	7c1b      	ldrb	r3, [r3, #16]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d109      	bne.n	8009a1a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0e:	f107 0208 	add.w	r2, r7, #8
 8009a12:	4610      	mov	r0, r2
 8009a14:	4798      	blx	r3
 8009a16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a18:	e029      	b.n	8009a6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f9f3 	bl	8009e08 <USBD_CtlError>
        err++;
 8009a22:	7afb      	ldrb	r3, [r7, #11]
 8009a24:	3301      	adds	r3, #1
 8009a26:	72fb      	strb	r3, [r7, #11]
      break;
 8009a28:	e021      	b.n	8009a6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	7c1b      	ldrb	r3, [r3, #16]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10d      	bne.n	8009a4e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a3a:	f107 0208 	add.w	r2, r7, #8
 8009a3e:	4610      	mov	r0, r2
 8009a40:	4798      	blx	r3
 8009a42:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	3301      	adds	r3, #1
 8009a48:	2207      	movs	r2, #7
 8009a4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a4c:	e00f      	b.n	8009a6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 f9d9 	bl	8009e08 <USBD_CtlError>
        err++;
 8009a56:	7afb      	ldrb	r3, [r7, #11]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	72fb      	strb	r3, [r7, #11]
      break;
 8009a5c:	e007      	b.n	8009a6e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f9d1 	bl	8009e08 <USBD_CtlError>
      err++;
 8009a66:	7afb      	ldrb	r3, [r7, #11]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	72fb      	strb	r3, [r7, #11]
      break;
 8009a6c:	bf00      	nop
  }

  if (err != 0U)
 8009a6e:	7afb      	ldrb	r3, [r7, #11]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d11c      	bne.n	8009aae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009a74:	893b      	ldrh	r3, [r7, #8]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d011      	beq.n	8009a9e <USBD_GetDescriptor+0x2b6>
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	88db      	ldrh	r3, [r3, #6]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00d      	beq.n	8009a9e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	88da      	ldrh	r2, [r3, #6]
 8009a86:	893b      	ldrh	r3, [r7, #8]
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	bf28      	it	cs
 8009a8c:	4613      	movcs	r3, r2
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a92:	893b      	ldrh	r3, [r7, #8]
 8009a94:	461a      	mov	r2, r3
 8009a96:	68f9      	ldr	r1, [r7, #12]
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fa1f 	bl	8009edc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	88db      	ldrh	r3, [r3, #6]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d104      	bne.n	8009ab0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fa76 	bl	8009f98 <USBD_CtlSendStatus>
 8009aac:	e000      	b.n	8009ab0 <USBD_GetDescriptor+0x2c8>
    return;
 8009aae:	bf00      	nop
    }
  }
}
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop

08009ab8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	889b      	ldrh	r3, [r3, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d130      	bne.n	8009b2c <USBD_SetAddress+0x74>
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	88db      	ldrh	r3, [r3, #6]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d12c      	bne.n	8009b2c <USBD_SetAddress+0x74>
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	885b      	ldrh	r3, [r3, #2]
 8009ad6:	2b7f      	cmp	r3, #127	; 0x7f
 8009ad8:	d828      	bhi.n	8009b2c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	885b      	ldrh	r3, [r3, #2]
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ae4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aec:	2b03      	cmp	r3, #3
 8009aee:	d104      	bne.n	8009afa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 f988 	bl	8009e08 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009af8:	e01c      	b.n	8009b34 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	7bfa      	ldrb	r2, [r7, #15]
 8009afe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
 8009b04:	4619      	mov	r1, r3
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fe1e 	bl	800a748 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fa43 	bl	8009f98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b12:	7bfb      	ldrb	r3, [r7, #15]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d004      	beq.n	8009b22 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b20:	e008      	b.n	8009b34 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b2a:	e003      	b.n	8009b34 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f96a 	bl	8009e08 <USBD_CtlError>
  }
}
 8009b34:	bf00      	nop
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	885b      	ldrh	r3, [r3, #2]
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	4b41      	ldr	r3, [pc, #260]	; (8009c54 <USBD_SetConfig+0x118>)
 8009b4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b50:	4b40      	ldr	r3, [pc, #256]	; (8009c54 <USBD_SetConfig+0x118>)
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d904      	bls.n	8009b62 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f954 	bl	8009e08 <USBD_CtlError>
 8009b60:	e075      	b.n	8009c4e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d002      	beq.n	8009b72 <USBD_SetConfig+0x36>
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	d023      	beq.n	8009bb8 <USBD_SetConfig+0x7c>
 8009b70:	e062      	b.n	8009c38 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009b72:	4b38      	ldr	r3, [pc, #224]	; (8009c54 <USBD_SetConfig+0x118>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d01a      	beq.n	8009bb0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009b7a:	4b36      	ldr	r3, [pc, #216]	; (8009c54 <USBD_SetConfig+0x118>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2203      	movs	r2, #3
 8009b88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b8c:	4b31      	ldr	r3, [pc, #196]	; (8009c54 <USBD_SetConfig+0x118>)
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	4619      	mov	r1, r3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7ff f9f4 	bl	8008f80 <USBD_SetClassConfig>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d104      	bne.n	8009ba8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 f931 	bl	8009e08 <USBD_CtlError>
            return;
 8009ba6:	e052      	b.n	8009c4e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f9f5 	bl	8009f98 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009bae:	e04e      	b.n	8009c4e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f9f1 	bl	8009f98 <USBD_CtlSendStatus>
        break;
 8009bb6:	e04a      	b.n	8009c4e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009bb8:	4b26      	ldr	r3, [pc, #152]	; (8009c54 <USBD_SetConfig+0x118>)
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d112      	bne.n	8009be6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009bc8:	4b22      	ldr	r3, [pc, #136]	; (8009c54 <USBD_SetConfig+0x118>)
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	461a      	mov	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009bd2:	4b20      	ldr	r3, [pc, #128]	; (8009c54 <USBD_SetConfig+0x118>)
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f7ff f9f0 	bl	8008fbe <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f9da 	bl	8009f98 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009be4:	e033      	b.n	8009c4e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009be6:	4b1b      	ldr	r3, [pc, #108]	; (8009c54 <USBD_SetConfig+0x118>)
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	461a      	mov	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d01d      	beq.n	8009c30 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7ff f9de 	bl	8008fbe <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009c02:	4b14      	ldr	r3, [pc, #80]	; (8009c54 <USBD_SetConfig+0x118>)
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	461a      	mov	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009c0c:	4b11      	ldr	r3, [pc, #68]	; (8009c54 <USBD_SetConfig+0x118>)
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7ff f9b4 	bl	8008f80 <USBD_SetClassConfig>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d104      	bne.n	8009c28 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f8f1 	bl	8009e08 <USBD_CtlError>
            return;
 8009c26:	e012      	b.n	8009c4e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f9b5 	bl	8009f98 <USBD_CtlSendStatus>
        break;
 8009c2e:	e00e      	b.n	8009c4e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f9b1 	bl	8009f98 <USBD_CtlSendStatus>
        break;
 8009c36:	e00a      	b.n	8009c4e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f8e4 	bl	8009e08 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009c40:	4b04      	ldr	r3, [pc, #16]	; (8009c54 <USBD_SetConfig+0x118>)
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	4619      	mov	r1, r3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7ff f9b9 	bl	8008fbe <USBD_ClrClassConfig>
        break;
 8009c4c:	bf00      	nop
    }
  }
}
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	200001d8 	.word	0x200001d8

08009c58 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	88db      	ldrh	r3, [r3, #6]
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d004      	beq.n	8009c74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f8cb 	bl	8009e08 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009c72:	e021      	b.n	8009cb8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	db17      	blt.n	8009cae <USBD_GetConfig+0x56>
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	dd02      	ble.n	8009c88 <USBD_GetConfig+0x30>
 8009c82:	2b03      	cmp	r3, #3
 8009c84:	d00b      	beq.n	8009c9e <USBD_GetConfig+0x46>
 8009c86:	e012      	b.n	8009cae <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	3308      	adds	r3, #8
 8009c92:	2201      	movs	r2, #1
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f920 	bl	8009edc <USBD_CtlSendData>
        break;
 8009c9c:	e00c      	b.n	8009cb8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f918 	bl	8009edc <USBD_CtlSendData>
        break;
 8009cac:	e004      	b.n	8009cb8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f8a9 	bl	8009e08 <USBD_CtlError>
        break;
 8009cb6:	bf00      	nop
}
 8009cb8:	bf00      	nop
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d81e      	bhi.n	8009d14 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	88db      	ldrh	r3, [r3, #6]
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d004      	beq.n	8009ce8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009cde:	6839      	ldr	r1, [r7, #0]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f891 	bl	8009e08 <USBD_CtlError>
        break;
 8009ce6:	e01a      	b.n	8009d1e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d005      	beq.n	8009d04 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	f043 0202 	orr.w	r2, r3, #2
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	330c      	adds	r3, #12
 8009d08:	2202      	movs	r2, #2
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 f8e5 	bl	8009edc <USBD_CtlSendData>
      break;
 8009d12:	e004      	b.n	8009d1e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f876 	bl	8009e08 <USBD_CtlError>
      break;
 8009d1c:	bf00      	nop
  }
}
 8009d1e:	bf00      	nop
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b082      	sub	sp, #8
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
 8009d2e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	885b      	ldrh	r3, [r3, #2]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d106      	bne.n	8009d46 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 f929 	bl	8009f98 <USBD_CtlSendStatus>
  }
}
 8009d46:	bf00      	nop
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b082      	sub	sp, #8
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	d80b      	bhi.n	8009d7c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	885b      	ldrh	r3, [r3, #2]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d10c      	bne.n	8009d86 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 f90f 	bl	8009f98 <USBD_CtlSendStatus>
      }
      break;
 8009d7a:	e004      	b.n	8009d86 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009d7c:	6839      	ldr	r1, [r7, #0]
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f842 	bl	8009e08 <USBD_CtlError>
      break;
 8009d84:	e000      	b.n	8009d88 <USBD_ClrFeature+0x3a>
      break;
 8009d86:	bf00      	nop
  }
}
 8009d88:	bf00      	nop
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	781a      	ldrb	r2, [r3, #0]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	785a      	ldrb	r2, [r3, #1]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	3302      	adds	r3, #2
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	3303      	adds	r3, #3
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	021b      	lsls	r3, r3, #8
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	4413      	add	r3, r2
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	3304      	adds	r3, #4
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	3305      	adds	r3, #5
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	021b      	lsls	r3, r3, #8
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	4413      	add	r3, r2
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	3306      	adds	r3, #6
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	3307      	adds	r3, #7
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	021b      	lsls	r3, r3, #8
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	4413      	add	r3, r2
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	80da      	strh	r2, [r3, #6]

}
 8009dfe:	bf00      	nop
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bc80      	pop	{r7}
 8009e06:	4770      	bx	lr

08009e08 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009e12:	2180      	movs	r1, #128	; 0x80
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fc2d 	bl	800a674 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fc29 	bl	800a674 <USBD_LL_StallEP>
}
 8009e22:	bf00      	nop
 8009e24:	3708      	adds	r7, #8
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b086      	sub	sp, #24
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	60f8      	str	r0, [r7, #12]
 8009e32:	60b9      	str	r1, [r7, #8]
 8009e34:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e36:	2300      	movs	r3, #0
 8009e38:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d032      	beq.n	8009ea6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f000 f834 	bl	8009eae <USBD_GetLen>
 8009e46:	4603      	mov	r3, r0
 8009e48:	3301      	adds	r3, #1
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	005b      	lsls	r3, r3, #1
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009e54:	7dfb      	ldrb	r3, [r7, #23]
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	75fa      	strb	r2, [r7, #23]
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	4413      	add	r3, r2
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	7812      	ldrb	r2, [r2, #0]
 8009e64:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
 8009e68:	1c5a      	adds	r2, r3, #1
 8009e6a:	75fa      	strb	r2, [r7, #23]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	4413      	add	r3, r2
 8009e72:	2203      	movs	r2, #3
 8009e74:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009e76:	e012      	b.n	8009e9e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	1c5a      	adds	r2, r3, #1
 8009e7c:	60fa      	str	r2, [r7, #12]
 8009e7e:	7dfa      	ldrb	r2, [r7, #23]
 8009e80:	1c51      	adds	r1, r2, #1
 8009e82:	75f9      	strb	r1, [r7, #23]
 8009e84:	4611      	mov	r1, r2
 8009e86:	68ba      	ldr	r2, [r7, #8]
 8009e88:	440a      	add	r2, r1
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009e8e:	7dfb      	ldrb	r3, [r7, #23]
 8009e90:	1c5a      	adds	r2, r3, #1
 8009e92:	75fa      	strb	r2, [r7, #23]
 8009e94:	461a      	mov	r2, r3
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	4413      	add	r3, r2
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1e8      	bne.n	8009e78 <USBD_GetString+0x4e>
    }
  }
}
 8009ea6:	bf00      	nop
 8009ea8:	3718      	adds	r7, #24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b085      	sub	sp, #20
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009eba:	e005      	b.n	8009ec8 <USBD_GetLen+0x1a>
  {
    len++;
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1f5      	bne.n	8009ebc <USBD_GetLen+0xe>
  }

  return len;
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bc80      	pop	{r7}
 8009eda:	4770      	bx	lr

08009edc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2202      	movs	r2, #2
 8009eee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009ef2:	88fa      	ldrh	r2, [r7, #6]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009ef8:	88fa      	ldrh	r2, [r7, #6]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009efe:	88fb      	ldrh	r3, [r7, #6]
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	2100      	movs	r1, #0
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f000 fc3e 	bl	800a786 <USBD_LL_Transmit>

  return USBD_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f22:	88fb      	ldrh	r3, [r7, #6]
 8009f24:	68ba      	ldr	r2, [r7, #8]
 8009f26:	2100      	movs	r1, #0
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	f000 fc2c 	bl	800a786 <USBD_LL_Transmit>

  return USBD_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	4613      	mov	r3, r2
 8009f44:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2203      	movs	r2, #3
 8009f4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009f4e:	88fa      	ldrh	r2, [r7, #6]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009f56:	88fa      	ldrh	r2, [r7, #6]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f5e:	88fb      	ldrh	r3, [r7, #6]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	2100      	movs	r1, #0
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f000 fc31 	bl	800a7cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3710      	adds	r7, #16
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f82:	88fb      	ldrh	r3, [r7, #6]
 8009f84:	68ba      	ldr	r2, [r7, #8]
 8009f86:	2100      	movs	r1, #0
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 fc1f 	bl	800a7cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2204      	movs	r2, #4
 8009fa4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009fa8:	2300      	movs	r3, #0
 8009faa:	2200      	movs	r2, #0
 8009fac:	2100      	movs	r1, #0
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 fbe9 	bl	800a786 <USBD_LL_Transmit>

  return USBD_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b082      	sub	sp, #8
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2205      	movs	r2, #5
 8009fca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fce:	2300      	movs	r3, #0
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fbf9 	bl	800a7cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	4912      	ldr	r1, [pc, #72]	; (800a034 <MX_USB_DEVICE_Init+0x50>)
 8009fec:	4812      	ldr	r0, [pc, #72]	; (800a038 <MX_USB_DEVICE_Init+0x54>)
 8009fee:	f7fe ff6d 	bl	8008ecc <USBD_Init>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d001      	beq.n	8009ffc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009ff8:	f7f7 f8ac 	bl	8001154 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009ffc:	490f      	ldr	r1, [pc, #60]	; (800a03c <MX_USB_DEVICE_Init+0x58>)
 8009ffe:	480e      	ldr	r0, [pc, #56]	; (800a038 <MX_USB_DEVICE_Init+0x54>)
 800a000:	f7fe ff8f 	bl	8008f22 <USBD_RegisterClass>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d001      	beq.n	800a00e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a00a:	f7f7 f8a3 	bl	8001154 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a00e:	490c      	ldr	r1, [pc, #48]	; (800a040 <MX_USB_DEVICE_Init+0x5c>)
 800a010:	4809      	ldr	r0, [pc, #36]	; (800a038 <MX_USB_DEVICE_Init+0x54>)
 800a012:	f7fe feef 	bl	8008df4 <USBD_CDC_RegisterInterface>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d001      	beq.n	800a020 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a01c:	f7f7 f89a 	bl	8001154 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a020:	4805      	ldr	r0, [pc, #20]	; (800a038 <MX_USB_DEVICE_Init+0x54>)
 800a022:	f7fe ff97 	bl	8008f54 <USBD_Start>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d001      	beq.n	800a030 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a02c:	f7f7 f892 	bl	8001154 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a030:	bf00      	nop
 800a032:	bd80      	pop	{r7, pc}
 800a034:	20000144 	.word	0x20000144
 800a038:	20000634 	.word	0x20000634
 800a03c:	20000030 	.word	0x20000030
 800a040:	20000134 	.word	0x20000134

0800a044 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a048:	2200      	movs	r2, #0
 800a04a:	4905      	ldr	r1, [pc, #20]	; (800a060 <CDC_Init_FS+0x1c>)
 800a04c:	4805      	ldr	r0, [pc, #20]	; (800a064 <CDC_Init_FS+0x20>)
 800a04e:	f7fe fee7 	bl	8008e20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a052:	4905      	ldr	r1, [pc, #20]	; (800a068 <CDC_Init_FS+0x24>)
 800a054:	4803      	ldr	r0, [pc, #12]	; (800a064 <CDC_Init_FS+0x20>)
 800a056:	f7fe fefc 	bl	8008e52 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a05a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	20000ce0 	.word	0x20000ce0
 800a064:	20000634 	.word	0x20000634
 800a068:	200008f8 	.word	0x200008f8

0800a06c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a06c:	b480      	push	{r7}
 800a06e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a070:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a072:	4618      	mov	r0, r3
 800a074:	46bd      	mov	sp, r7
 800a076:	bc80      	pop	{r7}
 800a078:	4770      	bx	lr
	...

0800a07c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	4603      	mov	r3, r0
 800a084:	6039      	str	r1, [r7, #0]
 800a086:	71fb      	strb	r3, [r7, #7]
 800a088:	4613      	mov	r3, r2
 800a08a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a08c:	79fb      	ldrb	r3, [r7, #7]
 800a08e:	2b23      	cmp	r3, #35	; 0x23
 800a090:	d84a      	bhi.n	800a128 <CDC_Control_FS+0xac>
 800a092:	a201      	add	r2, pc, #4	; (adr r2, 800a098 <CDC_Control_FS+0x1c>)
 800a094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a098:	0800a129 	.word	0x0800a129
 800a09c:	0800a129 	.word	0x0800a129
 800a0a0:	0800a129 	.word	0x0800a129
 800a0a4:	0800a129 	.word	0x0800a129
 800a0a8:	0800a129 	.word	0x0800a129
 800a0ac:	0800a129 	.word	0x0800a129
 800a0b0:	0800a129 	.word	0x0800a129
 800a0b4:	0800a129 	.word	0x0800a129
 800a0b8:	0800a129 	.word	0x0800a129
 800a0bc:	0800a129 	.word	0x0800a129
 800a0c0:	0800a129 	.word	0x0800a129
 800a0c4:	0800a129 	.word	0x0800a129
 800a0c8:	0800a129 	.word	0x0800a129
 800a0cc:	0800a129 	.word	0x0800a129
 800a0d0:	0800a129 	.word	0x0800a129
 800a0d4:	0800a129 	.word	0x0800a129
 800a0d8:	0800a129 	.word	0x0800a129
 800a0dc:	0800a129 	.word	0x0800a129
 800a0e0:	0800a129 	.word	0x0800a129
 800a0e4:	0800a129 	.word	0x0800a129
 800a0e8:	0800a129 	.word	0x0800a129
 800a0ec:	0800a129 	.word	0x0800a129
 800a0f0:	0800a129 	.word	0x0800a129
 800a0f4:	0800a129 	.word	0x0800a129
 800a0f8:	0800a129 	.word	0x0800a129
 800a0fc:	0800a129 	.word	0x0800a129
 800a100:	0800a129 	.word	0x0800a129
 800a104:	0800a129 	.word	0x0800a129
 800a108:	0800a129 	.word	0x0800a129
 800a10c:	0800a129 	.word	0x0800a129
 800a110:	0800a129 	.word	0x0800a129
 800a114:	0800a129 	.word	0x0800a129
 800a118:	0800a129 	.word	0x0800a129
 800a11c:	0800a129 	.word	0x0800a129
 800a120:	0800a129 	.word	0x0800a129
 800a124:	0800a129 	.word	0x0800a129
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a128:	bf00      	nop
  }

  return (USBD_OK);
 800a12a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	bc80      	pop	{r7}
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop

0800a138 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a142:	6879      	ldr	r1, [r7, #4]
 800a144:	4805      	ldr	r0, [pc, #20]	; (800a15c <CDC_Receive_FS+0x24>)
 800a146:	f7fe fe84 	bl	8008e52 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a14a:	4804      	ldr	r0, [pc, #16]	; (800a15c <CDC_Receive_FS+0x24>)
 800a14c:	f7fe fe94 	bl	8008e78 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a150:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a152:	4618      	mov	r0, r3
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20000634 	.word	0x20000634

0800a160 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	4603      	mov	r3, r0
 800a168:	6039      	str	r1, [r7, #0]
 800a16a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	2212      	movs	r2, #18
 800a170:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a172:	4b03      	ldr	r3, [pc, #12]	; (800a180 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a174:	4618      	mov	r0, r3
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	bc80      	pop	{r7}
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	20000160 	.word	0x20000160

0800a184 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	4603      	mov	r3, r0
 800a18c:	6039      	str	r1, [r7, #0]
 800a18e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	2204      	movs	r2, #4
 800a194:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a196:	4b03      	ldr	r3, [pc, #12]	; (800a1a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a198:	4618      	mov	r0, r3
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bc80      	pop	{r7}
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	20000174 	.word	0x20000174

0800a1a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	6039      	str	r1, [r7, #0]
 800a1b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1b4:	79fb      	ldrb	r3, [r7, #7]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d105      	bne.n	800a1c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1ba:	683a      	ldr	r2, [r7, #0]
 800a1bc:	4907      	ldr	r1, [pc, #28]	; (800a1dc <USBD_FS_ProductStrDescriptor+0x34>)
 800a1be:	4808      	ldr	r0, [pc, #32]	; (800a1e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a1c0:	f7ff fe33 	bl	8009e2a <USBD_GetString>
 800a1c4:	e004      	b.n	800a1d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1c6:	683a      	ldr	r2, [r7, #0]
 800a1c8:	4904      	ldr	r1, [pc, #16]	; (800a1dc <USBD_FS_ProductStrDescriptor+0x34>)
 800a1ca:	4805      	ldr	r0, [pc, #20]	; (800a1e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a1cc:	f7ff fe2d 	bl	8009e2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1d0:	4b02      	ldr	r3, [pc, #8]	; (800a1dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	200010c8 	.word	0x200010c8
 800a1e0:	0800a95c 	.word	0x0800a95c

0800a1e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	6039      	str	r1, [r7, #0]
 800a1ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	4904      	ldr	r1, [pc, #16]	; (800a204 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a1f4:	4804      	ldr	r0, [pc, #16]	; (800a208 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a1f6:	f7ff fe18 	bl	8009e2a <USBD_GetString>
  return USBD_StrDesc;
 800a1fa:	4b02      	ldr	r3, [pc, #8]	; (800a204 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	200010c8 	.word	0x200010c8
 800a208:	0800a974 	.word	0x0800a974

0800a20c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	4603      	mov	r3, r0
 800a214:	6039      	str	r1, [r7, #0]
 800a216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	221a      	movs	r2, #26
 800a21c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a21e:	f000 f843 	bl	800a2a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a222:	4b02      	ldr	r3, [pc, #8]	; (800a22c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a224:	4618      	mov	r0, r3
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20000178 	.word	0x20000178

0800a230 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	4603      	mov	r3, r0
 800a238:	6039      	str	r1, [r7, #0]
 800a23a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a23c:	79fb      	ldrb	r3, [r7, #7]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d105      	bne.n	800a24e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	4907      	ldr	r1, [pc, #28]	; (800a264 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a246:	4808      	ldr	r0, [pc, #32]	; (800a268 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a248:	f7ff fdef 	bl	8009e2a <USBD_GetString>
 800a24c:	e004      	b.n	800a258 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	4904      	ldr	r1, [pc, #16]	; (800a264 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a252:	4805      	ldr	r0, [pc, #20]	; (800a268 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a254:	f7ff fde9 	bl	8009e2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a258:	4b02      	ldr	r3, [pc, #8]	; (800a264 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	200010c8 	.word	0x200010c8
 800a268:	0800a988 	.word	0x0800a988

0800a26c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	4603      	mov	r3, r0
 800a274:	6039      	str	r1, [r7, #0]
 800a276:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a278:	79fb      	ldrb	r3, [r7, #7]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d105      	bne.n	800a28a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	4907      	ldr	r1, [pc, #28]	; (800a2a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a282:	4808      	ldr	r0, [pc, #32]	; (800a2a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a284:	f7ff fdd1 	bl	8009e2a <USBD_GetString>
 800a288:	e004      	b.n	800a294 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	4904      	ldr	r1, [pc, #16]	; (800a2a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a28e:	4805      	ldr	r0, [pc, #20]	; (800a2a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a290:	f7ff fdcb 	bl	8009e2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a294:	4b02      	ldr	r3, [pc, #8]	; (800a2a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a296:	4618      	mov	r0, r3
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	200010c8 	.word	0x200010c8
 800a2a4:	0800a994 	.word	0x0800a994

0800a2a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a2ae:	4b0f      	ldr	r3, [pc, #60]	; (800a2ec <Get_SerialNum+0x44>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a2b4:	4b0e      	ldr	r3, [pc, #56]	; (800a2f0 <Get_SerialNum+0x48>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a2ba:	4b0e      	ldr	r3, [pc, #56]	; (800a2f4 <Get_SerialNum+0x4c>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d009      	beq.n	800a2e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a2ce:	2208      	movs	r2, #8
 800a2d0:	4909      	ldr	r1, [pc, #36]	; (800a2f8 <Get_SerialNum+0x50>)
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f000 f814 	bl	800a300 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a2d8:	2204      	movs	r2, #4
 800a2da:	4908      	ldr	r1, [pc, #32]	; (800a2fc <Get_SerialNum+0x54>)
 800a2dc:	68b8      	ldr	r0, [r7, #8]
 800a2de:	f000 f80f 	bl	800a300 <IntToUnicode>
  }
}
 800a2e2:	bf00      	nop
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	1ffff7e8 	.word	0x1ffff7e8
 800a2f0:	1ffff7ec 	.word	0x1ffff7ec
 800a2f4:	1ffff7f0 	.word	0x1ffff7f0
 800a2f8:	2000017a 	.word	0x2000017a
 800a2fc:	2000018a 	.word	0x2000018a

0800a300 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a300:	b480      	push	{r7}
 800a302:	b087      	sub	sp, #28
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	4613      	mov	r3, r2
 800a30c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a30e:	2300      	movs	r3, #0
 800a310:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a312:	2300      	movs	r3, #0
 800a314:	75fb      	strb	r3, [r7, #23]
 800a316:	e027      	b.n	800a368 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	0f1b      	lsrs	r3, r3, #28
 800a31c:	2b09      	cmp	r3, #9
 800a31e:	d80b      	bhi.n	800a338 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	0f1b      	lsrs	r3, r3, #28
 800a324:	b2da      	uxtb	r2, r3
 800a326:	7dfb      	ldrb	r3, [r7, #23]
 800a328:	005b      	lsls	r3, r3, #1
 800a32a:	4619      	mov	r1, r3
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	440b      	add	r3, r1
 800a330:	3230      	adds	r2, #48	; 0x30
 800a332:	b2d2      	uxtb	r2, r2
 800a334:	701a      	strb	r2, [r3, #0]
 800a336:	e00a      	b.n	800a34e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	0f1b      	lsrs	r3, r3, #28
 800a33c:	b2da      	uxtb	r2, r3
 800a33e:	7dfb      	ldrb	r3, [r7, #23]
 800a340:	005b      	lsls	r3, r3, #1
 800a342:	4619      	mov	r1, r3
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	440b      	add	r3, r1
 800a348:	3237      	adds	r2, #55	; 0x37
 800a34a:	b2d2      	uxtb	r2, r2
 800a34c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	011b      	lsls	r3, r3, #4
 800a352:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a354:	7dfb      	ldrb	r3, [r7, #23]
 800a356:	005b      	lsls	r3, r3, #1
 800a358:	3301      	adds	r3, #1
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	4413      	add	r3, r2
 800a35e:	2200      	movs	r2, #0
 800a360:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a362:	7dfb      	ldrb	r3, [r7, #23]
 800a364:	3301      	adds	r3, #1
 800a366:	75fb      	strb	r3, [r7, #23]
 800a368:	7dfa      	ldrb	r2, [r7, #23]
 800a36a:	79fb      	ldrb	r3, [r7, #7]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d3d3      	bcc.n	800a318 <IntToUnicode+0x18>
  }
}
 800a370:	bf00      	nop
 800a372:	371c      	adds	r7, #28
 800a374:	46bd      	mov	sp, r7
 800a376:	bc80      	pop	{r7}
 800a378:	4770      	bx	lr
	...

0800a37c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a0d      	ldr	r2, [pc, #52]	; (800a3c0 <HAL_PCD_MspInit+0x44>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d113      	bne.n	800a3b6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a38e:	4b0d      	ldr	r3, [pc, #52]	; (800a3c4 <HAL_PCD_MspInit+0x48>)
 800a390:	69db      	ldr	r3, [r3, #28]
 800a392:	4a0c      	ldr	r2, [pc, #48]	; (800a3c4 <HAL_PCD_MspInit+0x48>)
 800a394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a398:	61d3      	str	r3, [r2, #28]
 800a39a:	4b0a      	ldr	r3, [pc, #40]	; (800a3c4 <HAL_PCD_MspInit+0x48>)
 800a39c:	69db      	ldr	r3, [r3, #28]
 800a39e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3a2:	60fb      	str	r3, [r7, #12]
 800a3a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	2014      	movs	r0, #20
 800a3ac:	f7f7 fdbf 	bl	8001f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a3b0:	2014      	movs	r0, #20
 800a3b2:	f7f7 fdd8 	bl	8001f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a3b6:	bf00      	nop
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	40005c00 	.word	0x40005c00
 800a3c4:	40021000 	.word	0x40021000

0800a3c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a3dc:	4619      	mov	r1, r3
 800a3de:	4610      	mov	r0, r2
 800a3e0:	f7fe fe00 	bl	8008fe4 <USBD_LL_SetupStage>
}
 800a3e4:	bf00      	nop
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a3fe:	78fa      	ldrb	r2, [r7, #3]
 800a400:	6879      	ldr	r1, [r7, #4]
 800a402:	4613      	mov	r3, r2
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	4413      	add	r3, r2
 800a408:	00db      	lsls	r3, r3, #3
 800a40a:	440b      	add	r3, r1
 800a40c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	78fb      	ldrb	r3, [r7, #3]
 800a414:	4619      	mov	r1, r3
 800a416:	f7fe fe30 	bl	800907a <USBD_LL_DataOutStage>
}
 800a41a:	bf00      	nop
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b082      	sub	sp, #8
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	460b      	mov	r3, r1
 800a42c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a434:	78fa      	ldrb	r2, [r7, #3]
 800a436:	6879      	ldr	r1, [r7, #4]
 800a438:	4613      	mov	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	4413      	add	r3, r2
 800a43e:	00db      	lsls	r3, r3, #3
 800a440:	440b      	add	r3, r1
 800a442:	333c      	adds	r3, #60	; 0x3c
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	78fb      	ldrb	r3, [r7, #3]
 800a448:	4619      	mov	r1, r3
 800a44a:	f7fe fe87 	bl	800915c <USBD_LL_DataInStage>
}
 800a44e:	bf00      	nop
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b082      	sub	sp, #8
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a464:	4618      	mov	r0, r3
 800a466:	f7fe ff97 	bl	8009398 <USBD_LL_SOF>
}
 800a46a:	bf00      	nop
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b084      	sub	sp, #16
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a47a:	2301      	movs	r3, #1
 800a47c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	2b02      	cmp	r3, #2
 800a484:	d001      	beq.n	800a48a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a486:	f7f6 fe65 	bl	8001154 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a490:	7bfa      	ldrb	r2, [r7, #15]
 800a492:	4611      	mov	r1, r2
 800a494:	4618      	mov	r0, r3
 800a496:	f7fe ff47 	bl	8009328 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7fe ff00 	bl	80092a6 <USBD_LL_Reset>
}
 800a4a6:	bf00      	nop
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
	...

0800a4b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fe ff41 	bl	8009346 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	699b      	ldr	r3, [r3, #24]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d005      	beq.n	800a4d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4cc:	4b04      	ldr	r3, [pc, #16]	; (800a4e0 <HAL_PCD_SuspendCallback+0x30>)
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	4a03      	ldr	r2, [pc, #12]	; (800a4e0 <HAL_PCD_SuspendCallback+0x30>)
 800a4d2:	f043 0306 	orr.w	r3, r3, #6
 800a4d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a4d8:	bf00      	nop
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	e000ed00 	.word	0xe000ed00

0800a4e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fe ff3b 	bl	800936e <USBD_LL_Resume>
}
 800a4f8:	bf00      	nop
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a508:	4a28      	ldr	r2, [pc, #160]	; (800a5ac <USBD_LL_Init+0xac>)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a26      	ldr	r2, [pc, #152]	; (800a5ac <USBD_LL_Init+0xac>)
 800a514:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a518:	4b24      	ldr	r3, [pc, #144]	; (800a5ac <USBD_LL_Init+0xac>)
 800a51a:	4a25      	ldr	r2, [pc, #148]	; (800a5b0 <USBD_LL_Init+0xb0>)
 800a51c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a51e:	4b23      	ldr	r3, [pc, #140]	; (800a5ac <USBD_LL_Init+0xac>)
 800a520:	2208      	movs	r2, #8
 800a522:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a524:	4b21      	ldr	r3, [pc, #132]	; (800a5ac <USBD_LL_Init+0xac>)
 800a526:	2202      	movs	r2, #2
 800a528:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a52a:	4b20      	ldr	r3, [pc, #128]	; (800a5ac <USBD_LL_Init+0xac>)
 800a52c:	2200      	movs	r2, #0
 800a52e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a530:	4b1e      	ldr	r3, [pc, #120]	; (800a5ac <USBD_LL_Init+0xac>)
 800a532:	2200      	movs	r2, #0
 800a534:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a536:	4b1d      	ldr	r3, [pc, #116]	; (800a5ac <USBD_LL_Init+0xac>)
 800a538:	2200      	movs	r2, #0
 800a53a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a53c:	481b      	ldr	r0, [pc, #108]	; (800a5ac <USBD_LL_Init+0xac>)
 800a53e:	f7f9 fd8a 	bl	8004056 <HAL_PCD_Init>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d001      	beq.n	800a54c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a548:	f7f6 fe04 	bl	8001154 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a552:	2318      	movs	r3, #24
 800a554:	2200      	movs	r2, #0
 800a556:	2100      	movs	r1, #0
 800a558:	f7fb f8be 	bl	80056d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a562:	2358      	movs	r3, #88	; 0x58
 800a564:	2200      	movs	r2, #0
 800a566:	2180      	movs	r1, #128	; 0x80
 800a568:	f7fb f8b6 	bl	80056d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a572:	23c0      	movs	r3, #192	; 0xc0
 800a574:	2200      	movs	r2, #0
 800a576:	2181      	movs	r1, #129	; 0x81
 800a578:	f7fb f8ae 	bl	80056d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a582:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a586:	2200      	movs	r2, #0
 800a588:	2101      	movs	r1, #1
 800a58a:	f7fb f8a5 	bl	80056d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a594:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a598:	2200      	movs	r2, #0
 800a59a:	2182      	movs	r1, #130	; 0x82
 800a59c:	f7fb f89c 	bl	80056d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	200012c8 	.word	0x200012c8
 800a5b0:	40005c00 	.word	0x40005c00

0800a5b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7f9 fe4e 	bl	800426c <HAL_PCD_Start>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5d4:	7bfb      	ldrb	r3, [r7, #15]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 f94e 	bl	800a878 <USBD_Get_USB_Status>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	4608      	mov	r0, r1
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	70fb      	strb	r3, [r7, #3]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	70bb      	strb	r3, [r7, #2]
 800a600:	4613      	mov	r3, r2
 800a602:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a604:	2300      	movs	r3, #0
 800a606:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a612:	78bb      	ldrb	r3, [r7, #2]
 800a614:	883a      	ldrh	r2, [r7, #0]
 800a616:	78f9      	ldrb	r1, [r7, #3]
 800a618:	f7f9 ffc8 	bl	80045ac <HAL_PCD_EP_Open>
 800a61c:	4603      	mov	r3, r0
 800a61e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a620:	7bfb      	ldrb	r3, [r7, #15]
 800a622:	4618      	mov	r0, r3
 800a624:	f000 f928 	bl	800a878 <USBD_Get_USB_Status>
 800a628:	4603      	mov	r3, r0
 800a62a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a62c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b084      	sub	sp, #16
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	460b      	mov	r3, r1
 800a640:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a646:	2300      	movs	r3, #0
 800a648:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a650:	78fa      	ldrb	r2, [r7, #3]
 800a652:	4611      	mov	r1, r2
 800a654:	4618      	mov	r0, r3
 800a656:	f7fa f80f 	bl	8004678 <HAL_PCD_EP_Close>
 800a65a:	4603      	mov	r3, r0
 800a65c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a65e:	7bfb      	ldrb	r3, [r7, #15]
 800a660:	4618      	mov	r0, r3
 800a662:	f000 f909 	bl	800a878 <USBD_Get_USB_Status>
 800a666:	4603      	mov	r3, r0
 800a668:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	460b      	mov	r3, r1
 800a67e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a680:	2300      	movs	r3, #0
 800a682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a68e:	78fa      	ldrb	r2, [r7, #3]
 800a690:	4611      	mov	r1, r2
 800a692:	4618      	mov	r0, r3
 800a694:	f7fa f8cf 	bl	8004836 <HAL_PCD_EP_SetStall>
 800a698:	4603      	mov	r3, r0
 800a69a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f000 f8ea 	bl	800a878 <USBD_Get_USB_Status>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b084      	sub	sp, #16
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6cc:	78fa      	ldrb	r2, [r7, #3]
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fa f910 	bl	80048f6 <HAL_PCD_EP_ClrStall>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6da:	7bfb      	ldrb	r3, [r7, #15]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f000 f8cb 	bl	800a878 <USBD_Get_USB_Status>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a702:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a704:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	da0c      	bge.n	800a726 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a70c:	78fb      	ldrb	r3, [r7, #3]
 800a70e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a712:	68f9      	ldr	r1, [r7, #12]
 800a714:	1c5a      	adds	r2, r3, #1
 800a716:	4613      	mov	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4413      	add	r3, r2
 800a71c:	00db      	lsls	r3, r3, #3
 800a71e:	440b      	add	r3, r1
 800a720:	3302      	adds	r3, #2
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	e00b      	b.n	800a73e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a726:	78fb      	ldrb	r3, [r7, #3]
 800a728:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a72c:	68f9      	ldr	r1, [r7, #12]
 800a72e:	4613      	mov	r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	4413      	add	r3, r2
 800a734:	00db      	lsls	r3, r3, #3
 800a736:	440b      	add	r3, r1
 800a738:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a73c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3714      	adds	r7, #20
 800a742:	46bd      	mov	sp, r7
 800a744:	bc80      	pop	{r7}
 800a746:	4770      	bx	lr

0800a748 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	460b      	mov	r3, r1
 800a752:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a754:	2300      	movs	r3, #0
 800a756:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a758:	2300      	movs	r3, #0
 800a75a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a762:	78fa      	ldrb	r2, [r7, #3]
 800a764:	4611      	mov	r1, r2
 800a766:	4618      	mov	r0, r3
 800a768:	f7f9 fefb 	bl	8004562 <HAL_PCD_SetAddress>
 800a76c:	4603      	mov	r3, r0
 800a76e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a770:	7bfb      	ldrb	r3, [r7, #15]
 800a772:	4618      	mov	r0, r3
 800a774:	f000 f880 	bl	800a878 <USBD_Get_USB_Status>
 800a778:	4603      	mov	r3, r0
 800a77a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b086      	sub	sp, #24
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	60f8      	str	r0, [r7, #12]
 800a78e:	607a      	str	r2, [r7, #4]
 800a790:	461a      	mov	r2, r3
 800a792:	460b      	mov	r3, r1
 800a794:	72fb      	strb	r3, [r7, #11]
 800a796:	4613      	mov	r3, r2
 800a798:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7a8:	893b      	ldrh	r3, [r7, #8]
 800a7aa:	7af9      	ldrb	r1, [r7, #11]
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	f7f9 ffff 	bl	80047b0 <HAL_PCD_EP_Transmit>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7b6:	7dfb      	ldrb	r3, [r7, #23]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 f85d 	bl	800a878 <USBD_Get_USB_Status>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3718      	adds	r7, #24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b086      	sub	sp, #24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	607a      	str	r2, [r7, #4]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	460b      	mov	r3, r1
 800a7da:	72fb      	strb	r3, [r7, #11]
 800a7dc:	4613      	mov	r3, r2
 800a7de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7ee:	893b      	ldrh	r3, [r7, #8]
 800a7f0:	7af9      	ldrb	r1, [r7, #11]
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	f7f9 ff88 	bl	8004708 <HAL_PCD_EP_Receive>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7fc:	7dfb      	ldrb	r3, [r7, #23]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 f83a 	bl	800a878 <USBD_Get_USB_Status>
 800a804:	4603      	mov	r3, r0
 800a806:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a808:	7dbb      	ldrb	r3, [r7, #22]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b082      	sub	sp, #8
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	460b      	mov	r3, r1
 800a81c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a824:	78fa      	ldrb	r2, [r7, #3]
 800a826:	4611      	mov	r1, r2
 800a828:	4618      	mov	r0, r3
 800a82a:	f7f9 ffaa 	bl	8004782 <HAL_PCD_EP_GetRxCount>
 800a82e:	4603      	mov	r3, r0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a840:	4b02      	ldr	r3, [pc, #8]	; (800a84c <USBD_static_malloc+0x14>)
}
 800a842:	4618      	mov	r0, r3
 800a844:	370c      	adds	r7, #12
 800a846:	46bd      	mov	sp, r7
 800a848:	bc80      	pop	{r7}
 800a84a:	4770      	bx	lr
 800a84c:	200001dc 	.word	0x200001dc

0800a850 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]

}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bc80      	pop	{r7}
 800a860:	4770      	bx	lr

0800a862 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a862:	b480      	push	{r7}
 800a864:	b083      	sub	sp, #12
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	460b      	mov	r3, r1
 800a86c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a86e:	bf00      	nop
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	bc80      	pop	{r7}
 800a876:	4770      	bx	lr

0800a878 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	4603      	mov	r3, r0
 800a880:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a882:	2300      	movs	r3, #0
 800a884:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a886:	79fb      	ldrb	r3, [r7, #7]
 800a888:	2b03      	cmp	r3, #3
 800a88a:	d817      	bhi.n	800a8bc <USBD_Get_USB_Status+0x44>
 800a88c:	a201      	add	r2, pc, #4	; (adr r2, 800a894 <USBD_Get_USB_Status+0x1c>)
 800a88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a892:	bf00      	nop
 800a894:	0800a8a5 	.word	0x0800a8a5
 800a898:	0800a8ab 	.word	0x0800a8ab
 800a89c:	0800a8b1 	.word	0x0800a8b1
 800a8a0:	0800a8b7 	.word	0x0800a8b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a8:	e00b      	b.n	800a8c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8aa:	2302      	movs	r3, #2
 800a8ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ae:	e008      	b.n	800a8c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8b4:	e005      	b.n	800a8c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8b6:	2302      	movs	r3, #2
 800a8b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ba:	e002      	b.n	800a8c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a8bc:	2302      	movs	r3, #2
 800a8be:	73fb      	strb	r3, [r7, #15]
    break;
 800a8c0:	bf00      	nop
  }
  return usb_status;
 800a8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bc80      	pop	{r7}
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop

0800a8d0 <__libc_init_array>:
 800a8d0:	b570      	push	{r4, r5, r6, lr}
 800a8d2:	2500      	movs	r5, #0
 800a8d4:	4e0c      	ldr	r6, [pc, #48]	; (800a908 <__libc_init_array+0x38>)
 800a8d6:	4c0d      	ldr	r4, [pc, #52]	; (800a90c <__libc_init_array+0x3c>)
 800a8d8:	1ba4      	subs	r4, r4, r6
 800a8da:	10a4      	asrs	r4, r4, #2
 800a8dc:	42a5      	cmp	r5, r4
 800a8de:	d109      	bne.n	800a8f4 <__libc_init_array+0x24>
 800a8e0:	f000 f822 	bl	800a928 <_init>
 800a8e4:	2500      	movs	r5, #0
 800a8e6:	4e0a      	ldr	r6, [pc, #40]	; (800a910 <__libc_init_array+0x40>)
 800a8e8:	4c0a      	ldr	r4, [pc, #40]	; (800a914 <__libc_init_array+0x44>)
 800a8ea:	1ba4      	subs	r4, r4, r6
 800a8ec:	10a4      	asrs	r4, r4, #2
 800a8ee:	42a5      	cmp	r5, r4
 800a8f0:	d105      	bne.n	800a8fe <__libc_init_array+0x2e>
 800a8f2:	bd70      	pop	{r4, r5, r6, pc}
 800a8f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a8f8:	4798      	blx	r3
 800a8fa:	3501      	adds	r5, #1
 800a8fc:	e7ee      	b.n	800a8dc <__libc_init_array+0xc>
 800a8fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a902:	4798      	blx	r3
 800a904:	3501      	adds	r5, #1
 800a906:	e7f2      	b.n	800a8ee <__libc_init_array+0x1e>
 800a908:	0800a9bc 	.word	0x0800a9bc
 800a90c:	0800a9bc 	.word	0x0800a9bc
 800a910:	0800a9bc 	.word	0x0800a9bc
 800a914:	0800a9c0 	.word	0x0800a9c0

0800a918 <memset>:
 800a918:	4603      	mov	r3, r0
 800a91a:	4402      	add	r2, r0
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d100      	bne.n	800a922 <memset+0xa>
 800a920:	4770      	bx	lr
 800a922:	f803 1b01 	strb.w	r1, [r3], #1
 800a926:	e7f9      	b.n	800a91c <memset+0x4>

0800a928 <_init>:
 800a928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a92a:	bf00      	nop
 800a92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a92e:	bc08      	pop	{r3}
 800a930:	469e      	mov	lr, r3
 800a932:	4770      	bx	lr

0800a934 <_fini>:
 800a934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a936:	bf00      	nop
 800a938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a93a:	bc08      	pop	{r3}
 800a93c:	469e      	mov	lr, r3
 800a93e:	4770      	bx	lr
