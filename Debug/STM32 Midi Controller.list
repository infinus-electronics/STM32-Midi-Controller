
STM32 Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c954  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  0800ca60  0800ca60  0001ca60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cde4  0800cde4  0002031c  2**0
                  CONTENTS
  4 .ARM          00000000  0800cde4  0800cde4  0002031c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cde4  0800cde4  0002031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cde4  0800cde4  0001cde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cde8  0800cde8  0001cde8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000031c  20000000  0800cdec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019a0  2000031c  0800d108  0002031c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cbc  0800d108  00021cbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff60  00000000  00000000  00020345  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004396  00000000  00000000  000402a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001628  00000000  00000000  00044640  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001428  00000000  00000000  00045c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d0bb  00000000  00000000  00047090  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017e9a  00000000  00000000  0006414b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009574b  00000000  00000000  0007bfe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00111730  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d74  00000000  00000000  001117ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000031c 	.word	0x2000031c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ca48 	.word	0x0800ca48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000320 	.word	0x20000320
 8000148:	0800ca48 	.word	0x0800ca48

0800014c <ADC1ReadVal>:
 *      Author: yehen
 */
#include "main.h"


int ADC1ReadVal(uint8_t channel){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]

	//ADC1->CR2 &= ~(1);
	ADC1->SQR3 &= ~(0x1f);
 8000156:	4b12      	ldr	r3, [pc, #72]	; (80001a0 <ADC1ReadVal+0x54>)
 8000158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800015a:	4a11      	ldr	r2, [pc, #68]	; (80001a0 <ADC1ReadVal+0x54>)
 800015c:	f023 031f 	bic.w	r3, r3, #31
 8000160:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= channel & 0x1f;
 8000162:	4b0f      	ldr	r3, [pc, #60]	; (80001a0 <ADC1ReadVal+0x54>)
 8000164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	f003 031f 	and.w	r3, r3, #31
 800016c:	490c      	ldr	r1, [pc, #48]	; (80001a0 <ADC1ReadVal+0x54>)
 800016e:	4313      	orrs	r3, r2
 8000170:	634b      	str	r3, [r1, #52]	; 0x34
	//ADC1->CR2 |= 1;
	//ADC1->CR2 |= 1;
	ADC1->CR2 |= (1<22);
 8000172:	4b0b      	ldr	r3, [pc, #44]	; (80001a0 <ADC1ReadVal+0x54>)
 8000174:	689b      	ldr	r3, [r3, #8]
 8000176:	4a0a      	ldr	r2, [pc, #40]	; (80001a0 <ADC1ReadVal+0x54>)
 8000178:	f043 0301 	orr.w	r3, r3, #1
 800017c:	6093      	str	r3, [r2, #8]
	while((ADC1->SR & (1<<1)) == 0); //wait for EOC
 800017e:	bf00      	nop
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <ADC1ReadVal+0x54>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	f003 0302 	and.w	r3, r3, #2
 8000188:	2b00      	cmp	r3, #0
 800018a:	d0f9      	beq.n	8000180 <ADC1ReadVal+0x34>
	return ((ADC1->DR & 0x0fff));
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <ADC1ReadVal+0x54>)
 800018e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000190:	f3c3 030b 	ubfx	r3, r3, #0, #12



}
 8000194:	4618      	mov	r0, r3
 8000196:	370c      	adds	r7, #12
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	40012400 	.word	0x40012400

080001a4 <DWT_Delay_Init>:

#include "DWT_Delay.h"

/* DWT based delay */
uint32_t DWT_Delay_Init(void)
{
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80001a8:	4b14      	ldr	r3, [pc, #80]	; (80001fc <DWT_Delay_Init+0x58>)
 80001aa:	68db      	ldr	r3, [r3, #12]
 80001ac:	4a13      	ldr	r2, [pc, #76]	; (80001fc <DWT_Delay_Init+0x58>)
 80001ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80001b2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80001b4:	4b11      	ldr	r3, [pc, #68]	; (80001fc <DWT_Delay_Init+0x58>)
 80001b6:	68db      	ldr	r3, [r3, #12]
 80001b8:	4a10      	ldr	r2, [pc, #64]	; (80001fc <DWT_Delay_Init+0x58>)
 80001ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001be:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80001c0:	4b0f      	ldr	r3, [pc, #60]	; (8000200 <DWT_Delay_Init+0x5c>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a0e      	ldr	r2, [pc, #56]	; (8000200 <DWT_Delay_Init+0x5c>)
 80001c6:	f023 0301 	bic.w	r3, r3, #1
 80001ca:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80001cc:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <DWT_Delay_Init+0x5c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a0b      	ldr	r2, [pc, #44]	; (8000200 <DWT_Delay_Init+0x5c>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80001d8:	4b09      	ldr	r3, [pc, #36]	; (8000200 <DWT_Delay_Init+0x5c>)
 80001da:	2200      	movs	r2, #0
 80001dc:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80001de:	bf00      	nop
    __ASM volatile ("NOP");
 80001e0:	bf00      	nop
    __ASM volatile ("NOP");
 80001e2:	bf00      	nop
    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80001e4:	4b06      	ldr	r3, [pc, #24]	; (8000200 <DWT_Delay_Init+0x5c>)
 80001e6:	685b      	ldr	r3, [r3, #4]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80001ec:	2300      	movs	r3, #0
 80001ee:	e000      	b.n	80001f2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80001f0:	2301      	movs	r3, #1
    }
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	e000edf0 	.word	0xe000edf0
 8000200:	e0001000 	.word	0xe0001000

08000204 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800020c:	4b0e      	ldr	r3, [pc, #56]	; (8000248 <DWT_Delay_us+0x44>)
 800020e:	685b      	ldr	r3, [r3, #4]
 8000210:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000212:	f007 fa7d 	bl	8007710 <HAL_RCC_GetHCLKFreq>
 8000216:	4602      	mov	r2, r0
 8000218:	4b0c      	ldr	r3, [pc, #48]	; (800024c <DWT_Delay_us+0x48>)
 800021a:	fba3 2302 	umull	r2, r3, r3, r2
 800021e:	0c9b      	lsrs	r3, r3, #18
 8000220:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	68ba      	ldr	r2, [r7, #8]
 8000226:	fb02 f303 	mul.w	r3, r2, r3
 800022a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 800022c:	bf00      	nop
 800022e:	4b06      	ldr	r3, [pc, #24]	; (8000248 <DWT_Delay_us+0x44>)
 8000230:	685a      	ldr	r2, [r3, #4]
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	1ad2      	subs	r2, r2, r3
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	1acb      	subs	r3, r1, r3
 800023c:	429a      	cmp	r2, r3
 800023e:	d3f6      	bcc.n	800022e <DWT_Delay_us+0x2a>
}
 8000240:	bf00      	nop
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	e0001000 	.word	0xe0001000
 800024c:	431bde83 	.word	0x431bde83

08000250 <DWT_Delay_ms>:

void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000258:	4b0d      	ldr	r3, [pc, #52]	; (8000290 <DWT_Delay_ms+0x40>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 800025e:	f007 fa57 	bl	8007710 <HAL_RCC_GetHCLKFreq>
 8000262:	4602      	mov	r2, r0
 8000264:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <DWT_Delay_ms+0x44>)
 8000266:	fba3 2302 	umull	r2, r3, r3, r2
 800026a:	099b      	lsrs	r3, r3, #6
 800026c:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	68ba      	ldr	r2, [r7, #8]
 8000272:	fb02 f303 	mul.w	r3, r2, r3
 8000276:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8000278:	bf00      	nop
 800027a:	4b05      	ldr	r3, [pc, #20]	; (8000290 <DWT_Delay_ms+0x40>)
 800027c:	685a      	ldr	r2, [r3, #4]
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	1ad2      	subs	r2, r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	429a      	cmp	r2, r3
 8000286:	d3f8      	bcc.n	800027a <DWT_Delay_ms+0x2a>
}
 8000288:	bf00      	nop
 800028a:	3710      	adds	r7, #16
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	e0001000 	.word	0xe0001000
 8000294:	10624dd3 	.word	0x10624dd3

08000298 <EEPROMWriteParameter>:
uint8_t eepromDataQueue[64];
volatile int8_t inputEEPROMBufferPosition = 0;
volatile int8_t outputEEPROMBufferPosition = 0; //this will be incremented in an interrupt


void EEPROMWriteParameter(uint16_t parameterAddress, uint8_t value){
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	460a      	mov	r2, r1
 80002a2:	80fb      	strh	r3, [r7, #6]
 80002a4:	4613      	mov	r3, r2
 80002a6:	717b      	strb	r3, [r7, #5]

	eepromDataQueue[inputEEPROMBufferPosition] = (uint8_t)(parameterAddress >> 8); //load the address high byte into the queue
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	0a1b      	lsrs	r3, r3, #8
 80002ac:	b299      	uxth	r1, r3
 80002ae:	4b1f      	ldr	r3, [pc, #124]	; (800032c <EEPROMWriteParameter+0x94>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	b25b      	sxtb	r3, r3
 80002b4:	461a      	mov	r2, r3
 80002b6:	b2c9      	uxtb	r1, r1
 80002b8:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <EEPROMWriteParameter+0x98>)
 80002ba:	5499      	strb	r1, [r3, r2]
	inputEEPROMBufferPosition = ((inputEEPROMBufferPosition + 1) % (sizeof(eepromDataQueue)/sizeof(eepromDataQueue[0]))); //sizeof is compile time
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <EEPROMWriteParameter+0x94>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	b25b      	sxtb	r3, r3
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	3301      	adds	r3, #1
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	b25b      	sxtb	r3, r3
 80002ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002ce:	b25a      	sxtb	r2, r3
 80002d0:	4b16      	ldr	r3, [pc, #88]	; (800032c <EEPROMWriteParameter+0x94>)
 80002d2:	701a      	strb	r2, [r3, #0]
	eepromDataQueue[inputEEPROMBufferPosition] = (uint8_t)(parameterAddress & 0xff); //load the address low byte into the queue
 80002d4:	4b15      	ldr	r3, [pc, #84]	; (800032c <EEPROMWriteParameter+0x94>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	b25b      	sxtb	r3, r3
 80002da:	461a      	mov	r2, r3
 80002dc:	88fb      	ldrh	r3, [r7, #6]
 80002de:	b2d9      	uxtb	r1, r3
 80002e0:	4b13      	ldr	r3, [pc, #76]	; (8000330 <EEPROMWriteParameter+0x98>)
 80002e2:	5499      	strb	r1, [r3, r2]
	inputEEPROMBufferPosition = ((inputEEPROMBufferPosition + 1) % (sizeof(eepromDataQueue)/sizeof(eepromDataQueue[0]))); //sizeof is compile time
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <EEPROMWriteParameter+0x94>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	b25b      	sxtb	r3, r3
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	3301      	adds	r3, #1
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	b25b      	sxtb	r3, r3
 80002f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002f6:	b25a      	sxtb	r2, r3
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <EEPROMWriteParameter+0x94>)
 80002fa:	701a      	strb	r2, [r3, #0]
	eepromDataQueue[inputEEPROMBufferPosition] = value; //load the data into the queue
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <EEPROMWriteParameter+0x94>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	b25b      	sxtb	r3, r3
 8000302:	4619      	mov	r1, r3
 8000304:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <EEPROMWriteParameter+0x98>)
 8000306:	797b      	ldrb	r3, [r7, #5]
 8000308:	5453      	strb	r3, [r2, r1]
	inputEEPROMBufferPosition = ((inputEEPROMBufferPosition + 1) % (sizeof(eepromDataQueue)/sizeof(eepromDataQueue[0]))); //sizeof is compile time
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <EEPROMWriteParameter+0x94>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	b25b      	sxtb	r3, r3
 8000310:	b2db      	uxtb	r3, r3
 8000312:	3301      	adds	r3, #1
 8000314:	b2db      	uxtb	r3, r3
 8000316:	b25b      	sxtb	r3, r3
 8000318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800031c:	b25a      	sxtb	r2, r3
 800031e:	4b03      	ldr	r3, [pc, #12]	; (800032c <EEPROMWriteParameter+0x94>)
 8000320:	701a      	strb	r2, [r3, #0]

}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	20000338 	.word	0x20000338
 8000330:	200005cc 	.word	0x200005cc

08000334 <MCP23017ClearPin>:

	//GPIOA->BRR = (1<<7);

}

void MCP23017ClearPin(uint8_t pin, bank b, uint8_t addr){
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
 800033e:	460b      	mov	r3, r1
 8000340:	71bb      	strb	r3, [r7, #6]
 8000342:	4613      	mov	r3, r2
 8000344:	717b      	strb	r3, [r7, #5]

	while(blocked); //wait for clearance
 8000346:	bf00      	nop
 8000348:	4b40      	ldr	r3, [pc, #256]	; (800044c <MCP23017ClearPin+0x118>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	b2db      	uxtb	r3, r3
 800034e:	2b00      	cmp	r3, #0
 8000350:	d1fa      	bne.n	8000348 <MCP23017ClearPin+0x14>
	//GPIOA->BSRR = (1<<7);

	currentIOState[b] &= ~(1<<pin);
 8000352:	79bb      	ldrb	r3, [r7, #6]
 8000354:	4a3e      	ldr	r2, [pc, #248]	; (8000450 <MCP23017ClearPin+0x11c>)
 8000356:	5cd3      	ldrb	r3, [r2, r3]
 8000358:	b25a      	sxtb	r2, r3
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2101      	movs	r1, #1
 800035e:	fa01 f303 	lsl.w	r3, r1, r3
 8000362:	b25b      	sxtb	r3, r3
 8000364:	43db      	mvns	r3, r3
 8000366:	b25b      	sxtb	r3, r3
 8000368:	4013      	ands	r3, r2
 800036a:	b25a      	sxtb	r2, r3
 800036c:	79bb      	ldrb	r3, [r7, #6]
 800036e:	b2d1      	uxtb	r1, r2
 8000370:	4a37      	ldr	r2, [pc, #220]	; (8000450 <MCP23017ClearPin+0x11c>)
 8000372:	54d1      	strb	r1, [r2, r3]
	//UPDATE: This messses up the BAM Driver... I think it'll be better just to stop TIM2
	//__disable_irq(); //the entire routine will be super duper unhappy unless this is in place

	//potential issue: the other interrupts may cause this crap to fail again...

	TIM2->CR1 &= ~1; //disable BAM Driver
 8000374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800037e:	f023 0301 	bic.w	r3, r3, #1
 8000382:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 8000384:	4b33      	ldr	r3, [pc, #204]	; (8000454 <MCP23017ClearPin+0x120>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a32      	ldr	r2, [pc, #200]	; (8000454 <MCP23017ClearPin+0x120>)
 800038a:	f023 0301 	bic.w	r3, r3, #1
 800038e:	6013      	str	r3, [r2, #0]
	//__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 8000390:	4b31      	ldr	r3, [pc, #196]	; (8000458 <MCP23017ClearPin+0x124>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a30      	ldr	r2, [pc, #192]	; (8000458 <MCP23017ClearPin+0x124>)
 8000396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800039a:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 800039c:	bf00      	nop
 800039e:	4b2e      	ldr	r3, [pc, #184]	; (8000458 <MCP23017ClearPin+0x124>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0f9      	beq.n	800039e <MCP23017ClearPin+0x6a>
	I2C2->DR = addr; //address the MCP23017
 80003aa:	4a2b      	ldr	r2, [pc, #172]	; (8000458 <MCP23017ClearPin+0x124>)
 80003ac:	797b      	ldrb	r3, [r7, #5]
 80003ae:	6113      	str	r3, [r2, #16]
	//__enable_irq(); didn't work here
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80003b0:	bf00      	nop
 80003b2:	4b29      	ldr	r3, [pc, #164]	; (8000458 <MCP23017ClearPin+0x124>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f003 0302 	and.w	r3, r3, #2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d0f9      	beq.n	80003b2 <MCP23017ClearPin+0x7e>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 80003be:	bf00      	nop
 80003c0:	4b25      	ldr	r3, [pc, #148]	; (8000458 <MCP23017ClearPin+0x124>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0304 	and.w	r3, r3, #4
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d0f9      	beq.n	80003c0 <MCP23017ClearPin+0x8c>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80003cc:	bf00      	nop
 80003ce:	4b22      	ldr	r3, [pc, #136]	; (8000458 <MCP23017ClearPin+0x124>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0f9      	beq.n	80003ce <MCP23017ClearPin+0x9a>
	if(b==A){
 80003da:	79bb      	ldrb	r3, [r7, #6]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d103      	bne.n	80003e8 <MCP23017ClearPin+0xb4>
		I2C2->DR = 0x14;
 80003e0:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <MCP23017ClearPin+0x124>)
 80003e2:	2214      	movs	r2, #20
 80003e4:	611a      	str	r2, [r3, #16]
 80003e6:	e002      	b.n	80003ee <MCP23017ClearPin+0xba>
	}
	else{
		I2C2->DR = 0x15;
 80003e8:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <MCP23017ClearPin+0x124>)
 80003ea:	2215      	movs	r2, #21
 80003ec:	611a      	str	r2, [r3, #16]
	}
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80003ee:	bf00      	nop
 80003f0:	4b19      	ldr	r3, [pc, #100]	; (8000458 <MCP23017ClearPin+0x124>)
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d0f9      	beq.n	80003f0 <MCP23017ClearPin+0xbc>
	I2C2->DR = currentIOState[b]; //just pull everything low
 80003fc:	79bb      	ldrb	r3, [r7, #6]
 80003fe:	4a14      	ldr	r2, [pc, #80]	; (8000450 <MCP23017ClearPin+0x11c>)
 8000400:	5cd2      	ldrb	r2, [r2, r3]
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <MCP23017ClearPin+0x124>)
 8000404:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000406:	bf00      	nop
 8000408:	4b13      	ldr	r3, [pc, #76]	; (8000458 <MCP23017ClearPin+0x124>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000410:	2b00      	cmp	r3, #0
 8000412:	d0f9      	beq.n	8000408 <MCP23017ClearPin+0xd4>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 8000414:	4b10      	ldr	r3, [pc, #64]	; (8000458 <MCP23017ClearPin+0x124>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a0f      	ldr	r2, [pc, #60]	; (8000458 <MCP23017ClearPin+0x124>)
 800041a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800041e:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 8000420:	bf00      	nop
 8000422:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <MCP23017ClearPin+0x124>)
 8000424:	699b      	ldr	r3, [r3, #24]

	//__enable_irq();
	TIM2->CR1 |= 1; //enable BAM Driver
 8000426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <MCP23017ClearPin+0x120>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a06      	ldr	r2, [pc, #24]	; (8000454 <MCP23017ClearPin+0x120>)
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6013      	str	r3, [r2, #0]
	//__enable_irq();
	//GPIOA->BRR = (1<<7);

}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	2000034b 	.word	0x2000034b
 8000450:	2000033c 	.word	0x2000033c
 8000454:	40000400 	.word	0x40000400
 8000458:	40005800 	.word	0x40005800

0800045c <LCDInit>:
 * \fn LCDInit
 * @brief Initialises both the LCD and the MCP23017
 *
 * @param addr Address of the MCP23017
 */
void LCDInit(uint8_t addr){ //interrupts should be disabled here
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000466:	b672      	cpsid	i

	//while(blocked); //wait for clearance anyways just for good measure

	//Initialise the MCP23017 first
	__disable_irq(); //let's allow the init to go down peacefully
	I2C2->CR1 |= (1<<8); //send start condition
 8000468:	4b49      	ldr	r3, [pc, #292]	; (8000590 <LCDInit+0x134>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a48      	ldr	r2, [pc, #288]	; (8000590 <LCDInit+0x134>)
 800046e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000472:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 8000474:	bf00      	nop
 8000476:	4b46      	ldr	r3, [pc, #280]	; (8000590 <LCDInit+0x134>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	2b00      	cmp	r3, #0
 8000480:	d0f9      	beq.n	8000476 <LCDInit+0x1a>
	I2C2->DR = addr; //address the MCP23017
 8000482:	4a43      	ldr	r2, [pc, #268]	; (8000590 <LCDInit+0x134>)
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000488:	bf00      	nop
 800048a:	4b41      	ldr	r3, [pc, #260]	; (8000590 <LCDInit+0x134>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f003 0302 	and.w	r3, r3, #2
 8000492:	2b00      	cmp	r3, #0
 8000494:	d0f9      	beq.n	800048a <LCDInit+0x2e>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000496:	bf00      	nop
 8000498:	4b3d      	ldr	r3, [pc, #244]	; (8000590 <LCDInit+0x134>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d0f9      	beq.n	8000498 <LCDInit+0x3c>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80004a4:	bf00      	nop
 80004a6:	4b3a      	ldr	r3, [pc, #232]	; (8000590 <LCDInit+0x134>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0f9      	beq.n	80004a6 <LCDInit+0x4a>
	I2C2->DR = 0x00; //write to IODIR_A
 80004b2:	4b37      	ldr	r3, [pc, #220]	; (8000590 <LCDInit+0x134>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80004b8:	bf00      	nop
 80004ba:	4b35      	ldr	r3, [pc, #212]	; (8000590 <LCDInit+0x134>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f9      	beq.n	80004ba <LCDInit+0x5e>
	I2C2->DR = 0x00; //all outputs
 80004c6:	4b32      	ldr	r3, [pc, #200]	; (8000590 <LCDInit+0x134>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80004cc:	bf00      	nop
 80004ce:	4b30      	ldr	r3, [pc, #192]	; (8000590 <LCDInit+0x134>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d0f9      	beq.n	80004ce <LCDInit+0x72>
	I2C2->DR = 0x00; //all outputs for next address which is IODIR_B
 80004da:	4b2d      	ldr	r3, [pc, #180]	; (8000590 <LCDInit+0x134>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80004e0:	bf00      	nop
 80004e2:	4b2b      	ldr	r3, [pc, #172]	; (8000590 <LCDInit+0x134>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d0f9      	beq.n	80004e2 <LCDInit+0x86>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 80004ee:	4b28      	ldr	r3, [pc, #160]	; (8000590 <LCDInit+0x134>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a27      	ldr	r2, [pc, #156]	; (8000590 <LCDInit+0x134>)
 80004f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f8:	6013      	str	r3, [r2, #0]


	//Pull RS, RW and E pins LOW
	//MCP23017ClearPin(RS_Pin, B, LCD_Address);
	GPIOB->BRR = 1<<1;
 80004fa:	4b26      	ldr	r3, [pc, #152]	; (8000594 <LCDInit+0x138>)
 80004fc:	2202      	movs	r2, #2
 80004fe:	615a      	str	r2, [r3, #20]
	MCP23017ClearPin(RW_Pin, B, LCD_Address);
 8000500:	224e      	movs	r2, #78	; 0x4e
 8000502:	2101      	movs	r1, #1
 8000504:	2001      	movs	r0, #1
 8000506:	f7ff ff15 	bl	8000334 <MCP23017ClearPin>
	GPIOA->BRR = 1<<8;
 800050a:	4b23      	ldr	r3, [pc, #140]	; (8000598 <LCDInit+0x13c>)
 800050c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000510:	615a      	str	r2, [r3, #20]



	LCDData(0x00, addr); //clear the data pins as well
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	4619      	mov	r1, r3
 8000516:	2000      	movs	r0, #0
 8000518:	f000 f840 	bl	800059c <LCDData>
	DWT_Delay_ms(30);
 800051c:	201e      	movs	r0, #30
 800051e:	f7ff fe97 	bl	8000250 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	4619      	mov	r1, r3
 8000526:	2030      	movs	r0, #48	; 0x30
 8000528:	f000 f8b4 	bl	8000694 <LCDCommand>
	DWT_Delay_ms(5);
 800052c:	2005      	movs	r0, #5
 800052e:	f7ff fe8f 	bl	8000250 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	4619      	mov	r1, r3
 8000536:	2030      	movs	r0, #48	; 0x30
 8000538:	f000 f8ac 	bl	8000694 <LCDCommand>
	DWT_Delay_ms(5);
 800053c:	2005      	movs	r0, #5
 800053e:	f7ff fe87 	bl	8000250 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	4619      	mov	r1, r3
 8000546:	2030      	movs	r0, #48	; 0x30
 8000548:	f000 f8a4 	bl	8000694 <LCDCommand>
	DWT_Delay_us(1000);
 800054c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000550:	f7ff fe58 	bl	8000204 <DWT_Delay_us>

	LCDCommand(0x38, addr); //8-bit mode, 2 lines, smaller font
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	4619      	mov	r1, r3
 8000558:	2038      	movs	r0, #56	; 0x38
 800055a:	f000 f89b 	bl	8000694 <LCDCommand>

	LCDCommand(0x0C, addr); //display ON
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	4619      	mov	r1, r3
 8000562:	200c      	movs	r0, #12
 8000564:	f000 f896 	bl	8000694 <LCDCommand>

	LCDCommand(0x01, addr); //display clear
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	4619      	mov	r1, r3
 800056c:	2001      	movs	r0, #1
 800056e:	f000 f891 	bl	8000694 <LCDCommand>
	DWT_Delay_us(2000); //clear requires a substantial delay
 8000572:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000576:	f7ff fe45 	bl	8000204 <DWT_Delay_us>

	LCDCommand(0x06, addr); //set entry mode
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	4619      	mov	r1, r3
 800057e:	2006      	movs	r0, #6
 8000580:	f000 f888 	bl	8000694 <LCDCommand>
  __ASM volatile ("cpsie i" : : : "memory");
 8000584:	b662      	cpsie	i

	__enable_irq();


}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40005800 	.word	0x40005800
 8000594:	40010c00 	.word	0x40010c00
 8000598:	40010800 	.word	0x40010800

0800059c <LCDData>:
 * @brief Presents the data to D0 to D7 (located on Bank A)
 *
 * @param data Data to send
 * @param addr I2C Address of the MCP23017
 */
void LCDData(char data, uint8_t addr){
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]

	while(blocked); //wait for clearance
 80005ac:	bf00      	nop
 80005ae:	4b36      	ldr	r3, [pc, #216]	; (8000688 <LCDData+0xec>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d1fa      	bne.n	80005ae <LCDData+0x12>

	TIM2->CR1 &= ~1; //disable BAM Driver
 80005b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005c2:	f023 0301 	bic.w	r3, r3, #1
 80005c6:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 80005c8:	4b30      	ldr	r3, [pc, #192]	; (800068c <LCDData+0xf0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a2f      	ldr	r2, [pc, #188]	; (800068c <LCDData+0xf0>)
 80005ce:	f023 0301 	bic.w	r3, r3, #1
 80005d2:	6013      	str	r3, [r2, #0]
	//__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 80005d4:	4b2e      	ldr	r3, [pc, #184]	; (8000690 <LCDData+0xf4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a2d      	ldr	r2, [pc, #180]	; (8000690 <LCDData+0xf4>)
 80005da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005de:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80005e0:	bf00      	nop
 80005e2:	4b2b      	ldr	r3, [pc, #172]	; (8000690 <LCDData+0xf4>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f9      	beq.n	80005e2 <LCDData+0x46>
	I2C2->DR = addr; //address the MCP23017
 80005ee:	4a28      	ldr	r2, [pc, #160]	; (8000690 <LCDData+0xf4>)
 80005f0:	79bb      	ldrb	r3, [r7, #6]
 80005f2:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80005f4:	bf00      	nop
 80005f6:	4b26      	ldr	r3, [pc, #152]	; (8000690 <LCDData+0xf4>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0f9      	beq.n	80005f6 <LCDData+0x5a>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000602:	bf00      	nop
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <LCDData+0xf4>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0304 	and.w	r3, r3, #4
 800060c:	2b00      	cmp	r3, #0
 800060e:	d0f9      	beq.n	8000604 <LCDData+0x68>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000610:	bf00      	nop
 8000612:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <LCDData+0xf4>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0f9      	beq.n	8000612 <LCDData+0x76>
	I2C2->DR = 0x14; //write to GPIO_A
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <LCDData+0xf4>)
 8000620:	2214      	movs	r2, #20
 8000622:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000624:	bf00      	nop
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <LCDData+0xf4>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0f9      	beq.n	8000626 <LCDData+0x8a>
	I2C2->DR = data; //present data at output bank A
 8000632:	4a17      	ldr	r2, [pc, #92]	; (8000690 <LCDData+0xf4>)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000638:	bf00      	nop
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <LCDData+0xf4>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f9      	beq.n	800063a <LCDData+0x9e>
	while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
 8000646:	bf00      	nop
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <LCDData+0xf4>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	2b00      	cmp	r3, #0
 8000652:	d0f9      	beq.n	8000648 <LCDData+0xac>
	I2C2->CR1 |= (1<<9); //send stop condition
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <LCDData+0xf4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <LCDData+0xf4>)
 800065a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800065e:	6013      	str	r3, [r2, #0]

	//__enable_irq();
	TIM2->CR1 |= 1; //enable BAM Driver
 8000660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <LCDData+0xf0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a05      	ldr	r2, [pc, #20]	; (800068c <LCDData+0xf0>)
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6013      	str	r3, [r2, #0]

}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	2000034b 	.word	0x2000034b
 800068c:	40000400 	.word	0x40000400
 8000690:	40005800 	.word	0x40005800

08000694 <LCDCommand>:

void LCDCommand(char data, uint8_t addr){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	460a      	mov	r2, r1
 800069e:	71fb      	strb	r3, [r7, #7]
 80006a0:	4613      	mov	r3, r2
 80006a2:	71bb      	strb	r3, [r7, #6]


	//MCP23017ClearPin(RS_Pin, B, addr);
	GPIOB->BRR = 1<<1;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <LCDCommand+0x38>)
 80006a6:	2202      	movs	r2, #2
 80006a8:	615a      	str	r2, [r3, #20]
	LCDData(data, addr);
 80006aa:	79ba      	ldrb	r2, [r7, #6]
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	4611      	mov	r1, r2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff73 	bl	800059c <LCDData>

	LCDCycleEN(addr);
 80006b6:	79bb      	ldrb	r3, [r7, #6]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f809 	bl	80006d0 <LCDCycleEN>

	//MCP23017SetPin(RS_Pin, B, addr);
	GPIOB->BSRR = 1<<1;
 80006be:	4b03      	ldr	r3, [pc, #12]	; (80006cc <LCDCommand+0x38>)
 80006c0:	2202      	movs	r2, #2
 80006c2:	611a      	str	r2, [r3, #16]
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40010c00 	.word	0x40010c00

080006d0 <LCDCycleEN>:

void LCDCycleEN(uint8_t addr){
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
	DWT_Delay_us(1);
	MCP23017ClearPin(EN_Pin, B, addr);
	DWT_Delay_us(100);

*/
	GPIOA->BRR = 1<<8;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <LCDCycleEN+0x3c>)
 80006dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e0:	615a      	str	r2, [r3, #20]
	GPIOA->BSRR = 1<<8; //this pulse is 100ns, aka too short, datasheet specifies min of 230 ns
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <LCDCycleEN+0x3c>)
 80006e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e8:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = 1<<8;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <LCDCycleEN+0x3c>)
 80006ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006f0:	611a      	str	r2, [r3, #16]
	GPIOA->BSRR = 1<<8;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <LCDCycleEN+0x3c>)
 80006f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006f8:	611a      	str	r2, [r3, #16]
	GPIOA->BRR = 1<<8;
 80006fa:	4b04      	ldr	r3, [pc, #16]	; (800070c <LCDCycleEN+0x3c>)
 80006fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000700:	615a      	str	r2, [r3, #20]

}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	40010800 	.word	0x40010800

08000710 <LCDClear>:
		LCDWriteChar(str[i], addr);
	}

}

void LCDClear(uint8_t addr){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]

	LCDCommand(1, addr);
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4619      	mov	r1, r3
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff ffb8 	bl	8000694 <LCDCommand>
	DWT_Delay_us(2000);
 8000724:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000728:	f7ff fd6c 	bl	8000204 <DWT_Delay_us>

}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <LCDSetCursor>:

void LCDSetCursor(uint8_t row, uint8_t col, uint8_t addr){
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	460b      	mov	r3, r1
 8000740:	71bb      	strb	r3, [r7, #6]
 8000742:	4613      	mov	r3, r2
 8000744:	717b      	strb	r3, [r7, #5]

	char outbyte;

	if(row == 1){
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d109      	bne.n	8000760 <LCDSetCursor+0x2c>
		outbyte = 0x80 + col - 1;
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	337f      	adds	r3, #127	; 0x7f
 8000750:	73fb      	strb	r3, [r7, #15]
		LCDCommand(outbyte, addr);
 8000752:	797a      	ldrb	r2, [r7, #5]
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	4611      	mov	r1, r2
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff9b 	bl	8000694 <LCDCommand>
	else if(row == 2){
		outbyte = 0xC0 + col - 1;
		LCDCommand(outbyte, addr);
	}

}
 800075e:	e00b      	b.n	8000778 <LCDSetCursor+0x44>
	else if(row == 2){
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	2b02      	cmp	r3, #2
 8000764:	d108      	bne.n	8000778 <LCDSetCursor+0x44>
		outbyte = 0xC0 + col - 1;
 8000766:	79bb      	ldrb	r3, [r7, #6]
 8000768:	3b41      	subs	r3, #65	; 0x41
 800076a:	73fb      	strb	r3, [r7, #15]
		LCDCommand(outbyte, addr);
 800076c:	797a      	ldrb	r2, [r7, #5]
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	4611      	mov	r1, r2
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff8e 	bl	8000694 <LCDCommand>
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <LCDPrepareInt>:
 * \fn LCDPrepareInt
 *
 * @brief this function sets up the MCP23017 so that it can take on the interrupt based auto LCD updating routine
 */
//TODO: might want to convert this to DMA driven code
void LCDPrepareInt(){
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0



	TIM2->CR1 &= ~1; //disable BAM Driver
 8000784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800078e:	f023 0301 	bic.w	r3, r3, #1
 8000792:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 8000794:	4b2f      	ldr	r3, [pc, #188]	; (8000854 <LCDPrepareInt+0xd4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a2e      	ldr	r2, [pc, #184]	; (8000854 <LCDPrepareInt+0xd4>)
 800079a:	f023 0301 	bic.w	r3, r3, #1
 800079e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
	__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 80007a2:	4b2d      	ldr	r3, [pc, #180]	; (8000858 <LCDPrepareInt+0xd8>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a2c      	ldr	r2, [pc, #176]	; (8000858 <LCDPrepareInt+0xd8>)
 80007a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ac:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80007ae:	bf00      	nop
 80007b0:	4b29      	ldr	r3, [pc, #164]	; (8000858 <LCDPrepareInt+0xd8>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d0f9      	beq.n	80007b0 <LCDPrepareInt+0x30>
	I2C2->DR = LCD_Address; //address the MCP23017
 80007bc:	4b26      	ldr	r3, [pc, #152]	; (8000858 <LCDPrepareInt+0xd8>)
 80007be:	224e      	movs	r2, #78	; 0x4e
 80007c0:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80007c2:	bf00      	nop
 80007c4:	4b24      	ldr	r3, [pc, #144]	; (8000858 <LCDPrepareInt+0xd8>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	f003 0302 	and.w	r3, r3, #2
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d0f9      	beq.n	80007c4 <LCDPrepareInt+0x44>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 80007d0:	bf00      	nop
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <LCDPrepareInt+0xd8>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0f9      	beq.n	80007d2 <LCDPrepareInt+0x52>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80007de:	bf00      	nop
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <LCDPrepareInt+0xd8>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d0f9      	beq.n	80007e0 <LCDPrepareInt+0x60>
	I2C2->DR = 0x0A; //write to IOCON
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <LCDPrepareInt+0xd8>)
 80007ee:	220a      	movs	r2, #10
 80007f0:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80007f2:	bf00      	nop
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <LCDPrepareInt+0xd8>)
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0f9      	beq.n	80007f4 <LCDPrepareInt+0x74>
	I2C2->DR = (1<<5)|(1<<7); //disable address incrementation and enable bank = 1
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <LCDPrepareInt+0xd8>)
 8000802:	22a0      	movs	r2, #160	; 0xa0
 8000804:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000806:	bf00      	nop
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <LCDPrepareInt+0xd8>)
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000810:	2b00      	cmp	r3, #0
 8000812:	d0f9      	beq.n	8000808 <LCDPrepareInt+0x88>
	while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
 8000814:	bf00      	nop
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <LCDPrepareInt+0xd8>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	2b00      	cmp	r3, #0
 8000820:	d0f9      	beq.n	8000816 <LCDPrepareInt+0x96>
	I2C2->CR1 |= (1<<9); //send stop condition
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <LCDPrepareInt+0xd8>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <LCDPrepareInt+0xd8>)
 8000828:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800082c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800082e:	b662      	cpsie	i

	__enable_irq();
	TIM2->CR1 |= 1; //enable BAM Driver
 8000830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <LCDPrepareInt+0xd4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a03      	ldr	r2, [pc, #12]	; (8000854 <LCDPrepareInt+0xd4>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	6013      	str	r3, [r2, #0]


}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	40000400 	.word	0x40000400
 8000858:	40005800 	.word	0x40005800

0800085c <LCDPrintStringTop>:
 *
 * Interrupt driven auto printer thing for top line
 *
 * IMPORTANT: always pass a string 16 characters long into this function, any extra will get truncated at best, potential buffer ovf (CTF brain engaged)
 */
void LCDPrintStringTop(char* str){
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

	IWDG->KR = 0xAAAA;
 8000864:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <LCDPrintStringTop+0xb8>)
 8000866:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800086a:	601a      	str	r2, [r3, #0]
	snprintf(LCDBufferTop, 17, "%-16s", str); //dash to left pad
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a2a      	ldr	r2, [pc, #168]	; (8000918 <LCDPrintStringTop+0xbc>)
 8000870:	2111      	movs	r1, #17
 8000872:	482a      	ldr	r0, [pc, #168]	; (800091c <LCDPrintStringTop+0xc0>)
 8000874:	f00b fcc2 	bl	800c1fc <sniprintf>
	IWDG->KR = 0xAAAA;
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <LCDPrintStringTop+0xb8>)
 800087a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800087e:	601a      	str	r2, [r3, #0]

	currentLCDByte = 0;
 8000880:	4b27      	ldr	r3, [pc, #156]	; (8000920 <LCDPrintStringTop+0xc4>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
	isLCDPrinting = 1; //mark that the LCD is busy
 8000886:	4b27      	ldr	r3, [pc, #156]	; (8000924 <LCDPrintStringTop+0xc8>)
 8000888:	2201      	movs	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]

	GPIOB->BRR = 1<<1;
 800088c:	4b26      	ldr	r3, [pc, #152]	; (8000928 <LCDPrintStringTop+0xcc>)
 800088e:	2202      	movs	r2, #2
 8000890:	615a      	str	r2, [r3, #20]
	cycleEN = 1;
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <LCDPrintStringTop+0xd0>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i

	__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <LCDPrintStringTop+0xd4>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a24      	ldr	r2, [pc, #144]	; (8000930 <LCDPrintStringTop+0xd4>)
 80008a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a4:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80008a6:	bf00      	nop
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <LCDPrintStringTop+0xd4>)
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d0f9      	beq.n	80008a8 <LCDPrintStringTop+0x4c>
	I2C2->DR = LCD_Address; //address the LCD MCP23017
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <LCDPrintStringTop+0xd4>)
 80008b6:	224e      	movs	r2, #78	; 0x4e
 80008b8:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 80008ba:	b662      	cpsie	i
	__enable_irq();
	//I2C2->CR2 |= (1<<11); //enable DMA Requests
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80008bc:	bf00      	nop
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <LCDPrintStringTop+0xd4>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0f9      	beq.n	80008be <LCDPrintStringTop+0x62>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 80008ca:	bf00      	nop
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <LCDPrintStringTop+0xd4>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0304 	and.w	r3, r3, #4
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d0f9      	beq.n	80008cc <LCDPrintStringTop+0x70>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80008d8:	bf00      	nop
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <LCDPrintStringTop+0xd4>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0f9      	beq.n	80008da <LCDPrintStringTop+0x7e>
	I2C2->DR = 0x0A; //address OLATA
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <LCDPrintStringTop+0xd4>)
 80008e8:	220a      	movs	r2, #10
 80008ea:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80008ec:	bf00      	nop
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <LCDPrintStringTop+0xd4>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d0f9      	beq.n	80008ee <LCDPrintStringTop+0x92>
	I2C2->DR = 0x80; //select top row
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <LCDPrintStringTop+0xd4>)
 80008fc:	2280      	movs	r2, #128	; 0x80
 80008fe:	611a      	str	r2, [r3, #16]
	I2C2->CR2 |= 1<<9; //enable I2C2 event Interrupts
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <LCDPrintStringTop+0xd4>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <LCDPrintStringTop+0xd4>)
 8000906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800090a:	6053      	str	r3, [r2, #4]



}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40003000 	.word	0x40003000
 8000918:	0800ca60 	.word	0x0800ca60
 800091c:	20000620 	.word	0x20000620
 8000920:	20000340 	.word	0x20000340
 8000924:	2000033e 	.word	0x2000033e
 8000928:	40010c00 	.word	0x40010c00
 800092c:	2000033f 	.word	0x2000033f
 8000930:	40005800 	.word	0x40005800

08000934 <LCDPrintStringBottom>:


void LCDPrintStringBottom(char* str){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

	IWDG->KR = 0xAAAA;
 800093c:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <LCDPrintStringBottom+0xb8>)
 800093e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000942:	601a      	str	r2, [r3, #0]
	snprintf(LCDBufferTop, 17, "%-16s", str); //dash to left pad
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a2a      	ldr	r2, [pc, #168]	; (80009f0 <LCDPrintStringBottom+0xbc>)
 8000948:	2111      	movs	r1, #17
 800094a:	482a      	ldr	r0, [pc, #168]	; (80009f4 <LCDPrintStringBottom+0xc0>)
 800094c:	f00b fc56 	bl	800c1fc <sniprintf>
	IWDG->KR = 0xAAAA;
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <LCDPrintStringBottom+0xb8>)
 8000952:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000956:	601a      	str	r2, [r3, #0]

	currentLCDByte = 0;
 8000958:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <LCDPrintStringBottom+0xc4>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
	isLCDPrinting = 1; //mark that the LCD is busy
 800095e:	4b27      	ldr	r3, [pc, #156]	; (80009fc <LCDPrintStringBottom+0xc8>)
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]

	GPIOB->BRR = 1<<1;
 8000964:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <LCDPrintStringBottom+0xcc>)
 8000966:	2202      	movs	r2, #2
 8000968:	615a      	str	r2, [r3, #20]
	cycleEN = 1;
 800096a:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <LCDPrintStringBottom+0xd0>)
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i

	__disable_irq();

	I2C2->CR1 |= (1<<8); //send start condition
 8000972:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <LCDPrintStringBottom+0xd4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a24      	ldr	r2, [pc, #144]	; (8000a08 <LCDPrintStringBottom+0xd4>)
 8000978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800097c:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 800097e:	bf00      	nop
 8000980:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <LCDPrintStringBottom+0xd4>)
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	2b00      	cmp	r3, #0
 800098a:	d0f9      	beq.n	8000980 <LCDPrintStringBottom+0x4c>
	I2C2->DR = LCD_Address; //address the LCD MCP23017
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <LCDPrintStringBottom+0xd4>)
 800098e:	224e      	movs	r2, #78	; 0x4e
 8000990:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 8000992:	b662      	cpsie	i
	__enable_irq();
	//I2C2->CR2 |= (1<<11); //enable DMA Requests
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000994:	bf00      	nop
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <LCDPrintStringBottom+0xd4>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d0f9      	beq.n	8000996 <LCDPrintStringBottom+0x62>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 80009a2:	bf00      	nop
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <LCDPrintStringBottom+0xd4>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d0f9      	beq.n	80009a4 <LCDPrintStringBottom+0x70>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80009b0:	bf00      	nop
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <LCDPrintStringBottom+0xd4>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d0f9      	beq.n	80009b2 <LCDPrintStringBottom+0x7e>
	I2C2->DR = 0x0A; //address OLATA
 80009be:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <LCDPrintStringBottom+0xd4>)
 80009c0:	220a      	movs	r2, #10
 80009c2:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80009c4:	bf00      	nop
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <LCDPrintStringBottom+0xd4>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d0f9      	beq.n	80009c6 <LCDPrintStringBottom+0x92>
	I2C2->DR = 0xC0; //select bottom row
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <LCDPrintStringBottom+0xd4>)
 80009d4:	22c0      	movs	r2, #192	; 0xc0
 80009d6:	611a      	str	r2, [r3, #16]
	I2C2->CR2 |= 1<<9; //enable I2C2 event Interrupts
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <LCDPrintStringBottom+0xd4>)
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <LCDPrintStringBottom+0xd4>)
 80009de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e2:	6053      	str	r3, [r2, #4]



}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40003000 	.word	0x40003000
 80009f0:	0800ca60 	.word	0x0800ca60
 80009f4:	20000620 	.word	0x20000620
 80009f8:	20000340 	.word	0x20000340
 80009fc:	2000033e 	.word	0x2000033e
 8000a00:	40010c00 	.word	0x40010c00
 8000a04:	2000033f 	.word	0x2000033f
 8000a08:	40005800 	.word	0x40005800

08000a0c <LEDMatrixInit>:





void LEDMatrixInit(uint8_t addr){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8000a16:	b672      	cpsid	i
	//note: BTF clearing and stop generation are handled by the Event Interrupt
	__disable_irq();



	I2C1->CR1 |= (1<<8); //send start condition
 8000a18:	4b46      	ldr	r3, [pc, #280]	; (8000b34 <LEDMatrixInit+0x128>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a45      	ldr	r2, [pc, #276]	; (8000b34 <LEDMatrixInit+0x128>)
 8000a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a22:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 8000a24:	bf00      	nop
 8000a26:	4b43      	ldr	r3, [pc, #268]	; (8000b34 <LEDMatrixInit+0x128>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0f9      	beq.n	8000a26 <LEDMatrixInit+0x1a>
	I2C1->DR = addr; //address the MCP23017
 8000a32:	4a40      	ldr	r2, [pc, #256]	; (8000b34 <LEDMatrixInit+0x128>)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	6113      	str	r3, [r2, #16]
	while ((I2C1->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000a38:	bf00      	nop
 8000a3a:	4b3e      	ldr	r3, [pc, #248]	; (8000b34 <LEDMatrixInit+0x128>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d0f9      	beq.n	8000a3a <LEDMatrixInit+0x2e>
	while ((I2C1->SR2 & (1<<2)) == 0); //read I2C SR2
 8000a46:	bf00      	nop
 8000a48:	4b3a      	ldr	r3, [pc, #232]	; (8000b34 <LEDMatrixInit+0x128>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0304 	and.w	r3, r3, #4
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d0f9      	beq.n	8000a48 <LEDMatrixInit+0x3c>
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000a54:	bf00      	nop
 8000a56:	4b37      	ldr	r3, [pc, #220]	; (8000b34 <LEDMatrixInit+0x128>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d0f9      	beq.n	8000a56 <LEDMatrixInit+0x4a>
	I2C1->DR = 0x00; //write to IODIR_A
 8000a62:	4b34      	ldr	r3, [pc, #208]	; (8000b34 <LEDMatrixInit+0x128>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000a68:	bf00      	nop
 8000a6a:	4b32      	ldr	r3, [pc, #200]	; (8000b34 <LEDMatrixInit+0x128>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d0f9      	beq.n	8000a6a <LEDMatrixInit+0x5e>
	I2C1->DR = 0x00; //all outputs
 8000a76:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <LEDMatrixInit+0x128>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000a7c:	bf00      	nop
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <LEDMatrixInit+0x128>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0f9      	beq.n	8000a7e <LEDMatrixInit+0x72>
	I2C1->DR = 0x00; //all outputs for next address which is IODIR_B
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <LEDMatrixInit+0x128>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000a90:	bf00      	nop
 8000a92:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <LEDMatrixInit+0x128>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f9      	beq.n	8000a92 <LEDMatrixInit+0x86>
	//while ((I2C1->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C1->CR1 |= (1<<9); //send stop condition
 8000a9e:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <LEDMatrixInit+0x128>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a24      	ldr	r2, [pc, #144]	; (8000b34 <LEDMatrixInit+0x128>)
 8000aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa8:	6013      	str	r3, [r2, #0]

	I2C1->CR1 |= (1<<8); //send start condition
 8000aaa:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <LEDMatrixInit+0x128>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a21      	ldr	r2, [pc, #132]	; (8000b34 <LEDMatrixInit+0x128>)
 8000ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab4:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 8000ab6:	bf00      	nop
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <LEDMatrixInit+0x128>)
 8000aba:	695b      	ldr	r3, [r3, #20]
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f9      	beq.n	8000ab8 <LEDMatrixInit+0xac>
	I2C1->DR = addr; //address the MCP23017
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <LEDMatrixInit+0x128>)
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	6113      	str	r3, [r2, #16]
	while ((I2C1->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000aca:	bf00      	nop
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <LEDMatrixInit+0x128>)
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d0f9      	beq.n	8000acc <LEDMatrixInit+0xc0>
	while ((I2C1->SR2 & (1<<2)) == 0); //read I2C SR2
 8000ad8:	bf00      	nop
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <LEDMatrixInit+0x128>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d0f9      	beq.n	8000ada <LEDMatrixInit+0xce>
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000ae6:	bf00      	nop
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <LEDMatrixInit+0x128>)
 8000aea:	695b      	ldr	r3, [r3, #20]
 8000aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f9      	beq.n	8000ae8 <LEDMatrixInit+0xdc>
	I2C1->DR = 0x0A; //write to IOCON
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <LEDMatrixInit+0x128>)
 8000af6:	220a      	movs	r2, #10
 8000af8:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000afa:	bf00      	nop
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <LEDMatrixInit+0x128>)
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d0f9      	beq.n	8000afc <LEDMatrixInit+0xf0>
	I2C1->DR = (1<<5); //disable sequential operation
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <LEDMatrixInit+0x128>)
 8000b0a:	2220      	movs	r2, #32
 8000b0c:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000b0e:	bf00      	nop
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <LEDMatrixInit+0x128>)
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0f9      	beq.n	8000b10 <LEDMatrixInit+0x104>
	//while ((I2C1->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C1->CR1 |= (1<<9); //send stop condition
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <LEDMatrixInit+0x128>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <LEDMatrixInit+0x128>)
 8000b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b26:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b28:	b662      	cpsie	i

	__enable_irq();

}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	40005400 	.word	0x40005400

08000b38 <LEDMatrixStart>:

void LEDMatrixStart(uint8_t addr){
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]

	while(blocked); //just so nothing stupid happens
 8000b42:	bf00      	nop
 8000b44:	4b4b      	ldr	r3, [pc, #300]	; (8000c74 <LEDMatrixStart+0x13c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1fa      	bne.n	8000b44 <LEDMatrixStart+0xc>


	DMA1_Channel6->CMAR = (uint32_t)LEDMatrixBuffer;
 8000b4e:	4b4a      	ldr	r3, [pc, #296]	; (8000c78 <LEDMatrixStart+0x140>)
 8000b50:	4a4a      	ldr	r2, [pc, #296]	; (8000c7c <LEDMatrixStart+0x144>)
 8000b52:	60da      	str	r2, [r3, #12]
	DMA1_Channel6->CPAR = (uint32_t)&(I2C1->DR);
 8000b54:	4b48      	ldr	r3, [pc, #288]	; (8000c78 <LEDMatrixStart+0x140>)
 8000b56:	4a4a      	ldr	r2, [pc, #296]	; (8000c80 <LEDMatrixStart+0x148>)
 8000b58:	609a      	str	r2, [r3, #8]
	DMA1_Channel6->CNDTR = 16;
 8000b5a:	4b47      	ldr	r3, [pc, #284]	; (8000c78 <LEDMatrixStart+0x140>)
 8000b5c:	2210      	movs	r2, #16
 8000b5e:	605a      	str	r2, [r3, #4]
	DMA1_Channel6->CCR |= (0b11<<12); //High Priority
 8000b60:	4b45      	ldr	r3, [pc, #276]	; (8000c78 <LEDMatrixStart+0x140>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a44      	ldr	r2, [pc, #272]	; (8000c78 <LEDMatrixStart+0x140>)
 8000b66:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000b6a:	6013      	str	r3, [r2, #0]
	DMA1_Channel6->CCR |= (1<<4 | 1<<7); //set MINC and Read from Memory
 8000b6c:	4b42      	ldr	r3, [pc, #264]	; (8000c78 <LEDMatrixStart+0x140>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a41      	ldr	r2, [pc, #260]	; (8000c78 <LEDMatrixStart+0x140>)
 8000b72:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000b76:	6013      	str	r3, [r2, #0]
	//DMA1_Channel6->CCR |= (1<<1); //enable transfer complete interrupt

	DMA1_Channel6->CCR |= 1; //activate DMA
 8000b78:	4b3f      	ldr	r3, [pc, #252]	; (8000c78 <LEDMatrixStart+0x140>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a3e      	ldr	r2, [pc, #248]	; (8000c78 <LEDMatrixStart+0x140>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i

	__disable_irq();

	I2C1->CR1 |= (1<<8); //send start condition
 8000b86:	4b3f      	ldr	r3, [pc, #252]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a3e      	ldr	r2, [pc, #248]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b90:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 8000b92:	bf00      	nop
 8000b94:	4b3b      	ldr	r3, [pc, #236]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d0f9      	beq.n	8000b94 <LEDMatrixStart+0x5c>
	I2C1->DR = addr; //address the MCP23017
 8000ba0:	4a38      	ldr	r2, [pc, #224]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	6113      	str	r3, [r2, #16]
	while ((I2C1->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000ba6:	bf00      	nop
 8000ba8:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d0f9      	beq.n	8000ba8 <LEDMatrixStart+0x70>
	while ((I2C1->SR2 & (1<<2)) == 0); //read I2C SR2
 8000bb4:	bf00      	nop
 8000bb6:	4b33      	ldr	r3, [pc, #204]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0f9      	beq.n	8000bb6 <LEDMatrixStart+0x7e>
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000bc2:	bf00      	nop
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000bc6:	695b      	ldr	r3, [r3, #20]
 8000bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d0f9      	beq.n	8000bc4 <LEDMatrixStart+0x8c>
	I2C1->DR = 0x12; //write to GPIOA
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000bd2:	2212      	movs	r2, #18
 8000bd4:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000bd6:	bf00      	nop
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d0f9      	beq.n	8000bd8 <LEDMatrixStart+0xa0>
	while ((I2C1->SR1 & (1<<2)) == 0); //make sure BTF is 1
 8000be4:	bf00      	nop
 8000be6:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f9      	beq.n	8000be6 <LEDMatrixStart+0xae>
	I2C1->CR1 |= (1<<9); //send stop condition
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a23      	ldr	r2, [pc, #140]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000bf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfc:	6013      	str	r3, [r2, #0]

	//WARNING: the below implementation explicitly goes against RM0008 in that DMAEN is set late
	I2C1->CR2 |= (1<<9); //enable event interrupts
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	4a20      	ldr	r2, [pc, #128]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000c04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c08:	6053      	str	r3, [r2, #4]
	I2C1->CR1 |= (1<<8); //send start condition
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c14:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 8000c16:	bf00      	nop
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000c1a:	695b      	ldr	r3, [r3, #20]
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0f9      	beq.n	8000c18 <LEDMatrixStart+0xe0>
	I2C1->DR = addr; //address the MCP23017
 8000c24:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	6113      	str	r3, [r2, #16]
	while ((I2C1->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000c2a:	bf00      	nop
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0f9      	beq.n	8000c2c <LEDMatrixStart+0xf4>
	while ((I2C1->SR2 & (1<<2)) == 0); //read I2C SR2
 8000c38:	bf00      	nop
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d0f9      	beq.n	8000c3a <LEDMatrixStart+0x102>
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000c46:	bf00      	nop
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0f9      	beq.n	8000c48 <LEDMatrixStart+0x110>
	I2C1->DR = 0x12; //write to GPIOA
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000c56:	2212      	movs	r2, #18
 8000c58:	611a      	str	r2, [r3, #16]
	I2C1->CR2 |= (1<<11); //enable DMA Requests
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <LEDMatrixStart+0x14c>)
 8000c60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c64:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c66:	b662      	cpsie	i
	__enable_irq();



}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	2000034b 	.word	0x2000034b
 8000c78:	4002006c 	.word	0x4002006c
 8000c7c:	20000634 	.word	0x20000634
 8000c80:	40005410 	.word	0x40005410
 8000c84:	40005400 	.word	0x40005400

08000c88 <MidiCC>:

#include "usb_device.h"
#include "usbd_cdc_if.h"


void MidiCC(uint8_t channel, uint8_t cc, uint8_t val){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
 8000c92:	460b      	mov	r3, r1
 8000c94:	71bb      	strb	r3, [r7, #6]
 8000c96:	4613      	mov	r3, r2
 8000c98:	717b      	strb	r3, [r7, #5]

	uint8_t buffer[3];
	buffer[0] = 0b10110000 | channel;
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	733b      	strb	r3, [r7, #12]
	buffer[1] = cc;
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	737b      	strb	r3, [r7, #13]
	buffer[2] = val;
 8000ca8:	797b      	ldrb	r3, [r7, #5]
 8000caa:	73bb      	strb	r3, [r7, #14]
	//while(CDC_Transmit_FS(buffer, 3) == USBD_BUSY); //TODO: observe if it causes hangups
	CDC_Transmit_FS(buffer, 3);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f00a fe92 	bl	800b9dc <CDC_Transmit_FS>

}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <MidiNoteOn>:



void MidiNoteOn(uint8_t channel, uint8_t note, uint8_t velo){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	71bb      	strb	r3, [r7, #6]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	717b      	strb	r3, [r7, #5]

	uint8_t buffer[3];
	buffer[0] = 0b10010000 | channel;
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	733b      	strb	r3, [r7, #12]
	buffer[1] = note;
 8000cdc:	79bb      	ldrb	r3, [r7, #6]
 8000cde:	737b      	strb	r3, [r7, #13]
	buffer[2] = velo;
 8000ce0:	797b      	ldrb	r3, [r7, #5]
 8000ce2:	73bb      	strb	r3, [r7, #14]
	while(CDC_Transmit_FS(buffer, 3) == USBD_BUSY);
 8000ce4:	bf00      	nop
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	2103      	movs	r1, #3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f00a fe75 	bl	800b9dc <CDC_Transmit_FS>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d0f6      	beq.n	8000ce6 <MidiNoteOn+0x26>

}
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <MidiNoteOff>:


void MidiNoteOff(uint8_t channel, uint8_t note, uint8_t velo){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	71bb      	strb	r3, [r7, #6]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	717b      	strb	r3, [r7, #5]

	uint8_t buffer[3];
	buffer[0] = 0b10000000 | channel;
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	733b      	strb	r3, [r7, #12]
	buffer[1] = note;
 8000d1c:	79bb      	ldrb	r3, [r7, #6]
 8000d1e:	737b      	strb	r3, [r7, #13]
	buffer[2] = velo;
 8000d20:	797b      	ldrb	r3, [r7, #5]
 8000d22:	73bb      	strb	r3, [r7, #14]
	while(CDC_Transmit_FS(buffer, 3) == USBD_BUSY);
 8000d24:	bf00      	nop
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f00a fe55 	bl	800b9dc <CDC_Transmit_FS>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d0f6      	beq.n	8000d26 <MidiNoteOff+0x26>

}
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <initMovingAverage>:

#include "MovingAverage.h"



void initMovingAverage(int *arr, long *sum, int *oldestPos){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]

	memset(arr, 0, MAX_N_AVERAGES*sizeof(int)); //clear input buffer
 8000d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d50:	2100      	movs	r1, #0
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f00b fa4a 	bl	800c1ec <memset>
	*sum = 0;
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
	*oldestPos = 0;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <movingAverage>:




int movingAverage(int *arr, long *sum, int *oldestPos, int len, int nextNum){
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	603b      	str	r3, [r7, #0]

	*sum = *sum - arr[*oldestPos] + nextNum; //subtract the oldest data point, and add in the newest
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	68f9      	ldr	r1, [r7, #12]
 8000d86:	440b      	add	r3, r1
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	1ad2      	subs	r2, r2, r3
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	441a      	add	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	601a      	str	r2, [r3, #0]

	arr[*oldestPos] = nextNum; //put next num in its place
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	601a      	str	r2, [r3, #0]

	*oldestPos = (((*oldestPos) + 1) % len); //increment the pointer to the oldest position
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	fb93 f2f2 	sdiv	r2, r3, r2
 8000dae:	6839      	ldr	r1, [r7, #0]
 8000db0:	fb01 f202 	mul.w	r2, r1, r2
 8000db4:	1a9a      	subs	r2, r3, r2
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	601a      	str	r2, [r3, #0]

	return (*sum/len);
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
	...

08000dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	60d3      	str	r3, [r2, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <clampedIncrement>:
void debug(){
	GPIOA->BSRR = (1<<7);
	GPIOA->BRR = (1<<7);
}

void clampedIncrement(int8_t* n, int8_t inc, int8_t lo, int8_t hi){
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	4608      	mov	r0, r1
 8000e22:	4611      	mov	r1, r2
 8000e24:	461a      	mov	r2, r3
 8000e26:	4603      	mov	r3, r0
 8000e28:	70fb      	strb	r3, [r7, #3]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	70bb      	strb	r3, [r7, #2]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	707b      	strb	r3, [r7, #1]

	int a = *n;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f993 3000 	ldrsb.w	r3, [r3]
 8000e38:	60fb      	str	r3, [r7, #12]
	int temp = a + inc;
 8000e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	4413      	add	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]

	if(temp < lo){
 8000e44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	da03      	bge.n	8000e56 <clampedIncrement+0x3e>
		*n = lo;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	78ba      	ldrb	r2, [r7, #2]
 8000e52:	701a      	strb	r2, [r3, #0]
	}
	else{
		*n = (int8_t)temp;
	}

}
 8000e54:	e00c      	b.n	8000e70 <clampedIncrement+0x58>
	else if(temp > hi){
 8000e56:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dd03      	ble.n	8000e68 <clampedIncrement+0x50>
		*n = hi;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	787a      	ldrb	r2, [r7, #1]
 8000e64:	701a      	strb	r2, [r3, #0]
}
 8000e66:	e003      	b.n	8000e70 <clampedIncrement+0x58>
		*n = (int8_t)temp;
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	b25a      	sxtb	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	701a      	strb	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
	...

08000e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e7c:	b5b0      	push	{r4, r5, r7, lr}
 8000e7e:	b096      	sub	sp, #88	; 0x58
 8000e80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e82:	f002 f91f 	bl	80030c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e86:	f001 fa09 	bl	800229c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8a:	f001 fc11 	bl	80026b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e8e:	f001 fbf9 	bl	8002684 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000e92:	f00a fce5 	bl	800b860 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000e96:	f001 fa85 	bl	80023a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e9a:	f001 fac7 	bl	800242c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e9e:	f001 faf3 	bl	8002488 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000ea2:	f001 fb39 	bl	8002518 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ea6:	f001 fb93 	bl	80025d0 <MX_TIM3_Init>
  MX_IWDG_Init();
 8000eaa:	f001 fb1b 	bl	80024e4 <MX_IWDG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000eae:	f001 fa54 	bl	800235a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  NVIC_SetPriorityGrouping(0U); //use standard interrupt grouping
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f7ff ff8c 	bl	8000dd0 <__NVIC_SetPriorityGrouping>

  //init stuff
  DWT_Delay_Init();
 8000eb8:	f7ff f974 	bl	80001a4 <DWT_Delay_Init>

  DWT_Delay_ms(500);
  */

  //read in all user parameters from the EEPROM
  I2C2->CR1 |= (1<<8); //send start condition
 8000ebc:	4ba2      	ldr	r3, [pc, #648]	; (8001148 <main+0x2cc>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4aa1      	ldr	r2, [pc, #644]	; (8001148 <main+0x2cc>)
 8000ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec6:	6013      	str	r3, [r2, #0]

  while ((I2C2->SR1 & 1) == 0); //clear SB
 8000ec8:	bf00      	nop
 8000eca:	4b9f      	ldr	r3, [pc, #636]	; (8001148 <main+0x2cc>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0f9      	beq.n	8000eca <main+0x4e>
  I2C2->DR = 0xA0; //address the EEPROM in write mode
 8000ed6:	4b9c      	ldr	r3, [pc, #624]	; (8001148 <main+0x2cc>)
 8000ed8:	22a0      	movs	r2, #160	; 0xa0
 8000eda:	611a      	str	r2, [r3, #16]
  while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000edc:	bf00      	nop
 8000ede:	4b9a      	ldr	r3, [pc, #616]	; (8001148 <main+0x2cc>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f9      	beq.n	8000ede <main+0x62>
  while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000eea:	bf00      	nop
 8000eec:	4b96      	ldr	r3, [pc, #600]	; (8001148 <main+0x2cc>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0f9      	beq.n	8000eec <main+0x70>
  while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000ef8:	bf00      	nop
 8000efa:	4b93      	ldr	r3, [pc, #588]	; (8001148 <main+0x2cc>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0f9      	beq.n	8000efa <main+0x7e>
  I2C2->DR = 0x0; //address
 8000f06:	4b90      	ldr	r3, [pc, #576]	; (8001148 <main+0x2cc>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000f0c:	bf00      	nop
 8000f0e:	4b8e      	ldr	r3, [pc, #568]	; (8001148 <main+0x2cc>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f9      	beq.n	8000f0e <main+0x92>
  I2C2->DR = 0x0; //address
 8000f1a:	4b8b      	ldr	r3, [pc, #556]	; (8001148 <main+0x2cc>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000f20:	bf00      	nop
 8000f22:	4b89      	ldr	r3, [pc, #548]	; (8001148 <main+0x2cc>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0f9      	beq.n	8000f22 <main+0xa6>
  while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
 8000f2e:	bf00      	nop
 8000f30:	4b85      	ldr	r3, [pc, #532]	; (8001148 <main+0x2cc>)
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0f9      	beq.n	8000f30 <main+0xb4>
  I2C2->CR1 |= 1<<10;
 8000f3c:	4b82      	ldr	r3, [pc, #520]	; (8001148 <main+0x2cc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a81      	ldr	r2, [pc, #516]	; (8001148 <main+0x2cc>)
 8000f42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f46:	6013      	str	r3, [r2, #0]
  I2C2->CR1 |= (1<<8); //send start condition
 8000f48:	4b7f      	ldr	r3, [pc, #508]	; (8001148 <main+0x2cc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a7e      	ldr	r2, [pc, #504]	; (8001148 <main+0x2cc>)
 8000f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f52:	6013      	str	r3, [r2, #0]
  while ((I2C2->SR1 & 1) == 0); //clear SB
 8000f54:	bf00      	nop
 8000f56:	4b7c      	ldr	r3, [pc, #496]	; (8001148 <main+0x2cc>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f9      	beq.n	8000f56 <main+0xda>
  I2C2->DR = 0xA1; //address the EEPROM in read mode
 8000f62:	4b79      	ldr	r3, [pc, #484]	; (8001148 <main+0x2cc>)
 8000f64:	22a1      	movs	r2, #161	; 0xa1
 8000f66:	611a      	str	r2, [r3, #16]
  while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000f68:	bf00      	nop
 8000f6a:	4b77      	ldr	r3, [pc, #476]	; (8001148 <main+0x2cc>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f9      	beq.n	8000f6a <main+0xee>
  while ((I2C2->SR2) & 0); //read I2C SR2
 8000f76:	bf00      	nop
 8000f78:	4b73      	ldr	r3, [pc, #460]	; (8001148 <main+0x2cc>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 8000f7c:	bf00      	nop
 8000f7e:	4b72      	ldr	r3, [pc, #456]	; (8001148 <main+0x2cc>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f9      	beq.n	8000f7e <main+0x102>
  MidiNoteOffset = (I2C2->DR) & 0xff;
 8000f8a:	4b6f      	ldr	r3, [pc, #444]	; (8001148 <main+0x2cc>)
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	b25a      	sxtb	r2, r3
 8000f90:	4b6e      	ldr	r3, [pc, #440]	; (800114c <main+0x2d0>)
 8000f92:	701a      	strb	r2, [r3, #0]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 8000f94:	bf00      	nop
 8000f96:	4b6c      	ldr	r3, [pc, #432]	; (8001148 <main+0x2cc>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f9      	beq.n	8000f96 <main+0x11a>
  MidiNoteVelo = (I2C2->DR) & 0xff;
 8000fa2:	4b69      	ldr	r3, [pc, #420]	; (8001148 <main+0x2cc>)
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	b25a      	sxtb	r2, r3
 8000fa8:	4b69      	ldr	r3, [pc, #420]	; (8001150 <main+0x2d4>)
 8000faa:	701a      	strb	r2, [r3, #0]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 8000fac:	bf00      	nop
 8000fae:	4b66      	ldr	r3, [pc, #408]	; (8001148 <main+0x2cc>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f9      	beq.n	8000fae <main+0x132>
  MidiChannel = (I2C2->DR) & 0xff;
 8000fba:	4b63      	ldr	r3, [pc, #396]	; (8001148 <main+0x2cc>)
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	b25a      	sxtb	r2, r3
 8000fc0:	4b64      	ldr	r3, [pc, #400]	; (8001154 <main+0x2d8>)
 8000fc2:	701a      	strb	r2, [r3, #0]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 8000fc4:	bf00      	nop
 8000fc6:	4b60      	ldr	r3, [pc, #384]	; (8001148 <main+0x2cc>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f9      	beq.n	8000fc6 <main+0x14a>
  MidiCCFaderLUT[0] = (I2C2->DR) & 0xff;
 8000fd2:	4b5d      	ldr	r3, [pc, #372]	; (8001148 <main+0x2cc>)
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	b25a      	sxtb	r2, r3
 8000fd8:	4b5f      	ldr	r3, [pc, #380]	; (8001158 <main+0x2dc>)
 8000fda:	701a      	strb	r2, [r3, #0]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 8000fdc:	bf00      	nop
 8000fde:	4b5a      	ldr	r3, [pc, #360]	; (8001148 <main+0x2cc>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f9      	beq.n	8000fde <main+0x162>
  MidiCCFaderLUT[1] = (I2C2->DR) & 0xff;
 8000fea:	4b57      	ldr	r3, [pc, #348]	; (8001148 <main+0x2cc>)
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	b25a      	sxtb	r2, r3
 8000ff0:	4b59      	ldr	r3, [pc, #356]	; (8001158 <main+0x2dc>)
 8000ff2:	705a      	strb	r2, [r3, #1]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 8000ff4:	bf00      	nop
 8000ff6:	4b54      	ldr	r3, [pc, #336]	; (8001148 <main+0x2cc>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0f9      	beq.n	8000ff6 <main+0x17a>
  MidiCCFaderLUT[2] = (I2C2->DR) & 0xff;
 8001002:	4b51      	ldr	r3, [pc, #324]	; (8001148 <main+0x2cc>)
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	b25a      	sxtb	r2, r3
 8001008:	4b53      	ldr	r3, [pc, #332]	; (8001158 <main+0x2dc>)
 800100a:	709a      	strb	r2, [r3, #2]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 800100c:	bf00      	nop
 800100e:	4b4e      	ldr	r3, [pc, #312]	; (8001148 <main+0x2cc>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f9      	beq.n	800100e <main+0x192>
  MidiCCEncoderLUT[0] = (I2C2->DR) & 0xff;
 800101a:	4b4b      	ldr	r3, [pc, #300]	; (8001148 <main+0x2cc>)
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	b25a      	sxtb	r2, r3
 8001020:	4b4e      	ldr	r3, [pc, #312]	; (800115c <main+0x2e0>)
 8001022:	701a      	strb	r2, [r3, #0]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 8001024:	bf00      	nop
 8001026:	4b48      	ldr	r3, [pc, #288]	; (8001148 <main+0x2cc>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f9      	beq.n	8001026 <main+0x1aa>
  MidiCCEncoderLUT[1] = (I2C2->DR) & 0xff;
 8001032:	4b45      	ldr	r3, [pc, #276]	; (8001148 <main+0x2cc>)
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	b25a      	sxtb	r2, r3
 8001038:	4b48      	ldr	r3, [pc, #288]	; (800115c <main+0x2e0>)
 800103a:	705a      	strb	r2, [r3, #1]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 800103c:	bf00      	nop
 800103e:	4b42      	ldr	r3, [pc, #264]	; (8001148 <main+0x2cc>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f9      	beq.n	800103e <main+0x1c2>
  MidiCCEncoderLUT[2] = (I2C2->DR) & 0xff;
 800104a:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <main+0x2cc>)
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	b25a      	sxtb	r2, r3
 8001050:	4b42      	ldr	r3, [pc, #264]	; (800115c <main+0x2e0>)
 8001052:	709a      	strb	r2, [r3, #2]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 8001054:	bf00      	nop
 8001056:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <main+0x2cc>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0f9      	beq.n	8001056 <main+0x1da>
  MidiCCEncoderLUT[3] = (I2C2->DR) & 0xff;
 8001062:	4b39      	ldr	r3, [pc, #228]	; (8001148 <main+0x2cc>)
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	b25a      	sxtb	r2, r3
 8001068:	4b3c      	ldr	r3, [pc, #240]	; (800115c <main+0x2e0>)
 800106a:	70da      	strb	r2, [r3, #3]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 800106c:	bf00      	nop
 800106e:	4b36      	ldr	r3, [pc, #216]	; (8001148 <main+0x2cc>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0f9      	beq.n	800106e <main+0x1f2>
  EncoderSpeed[0] = (I2C2->DR) & 0xff;
 800107a:	4b33      	ldr	r3, [pc, #204]	; (8001148 <main+0x2cc>)
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	b25a      	sxtb	r2, r3
 8001080:	4b37      	ldr	r3, [pc, #220]	; (8001160 <main+0x2e4>)
 8001082:	701a      	strb	r2, [r3, #0]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 8001084:	bf00      	nop
 8001086:	4b30      	ldr	r3, [pc, #192]	; (8001148 <main+0x2cc>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f9      	beq.n	8001086 <main+0x20a>
  EncoderSpeed[1] = (I2C2->DR) & 0xff;
 8001092:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <main+0x2cc>)
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	b25a      	sxtb	r2, r3
 8001098:	4b31      	ldr	r3, [pc, #196]	; (8001160 <main+0x2e4>)
 800109a:	705a      	strb	r2, [r3, #1]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 800109c:	bf00      	nop
 800109e:	4b2a      	ldr	r3, [pc, #168]	; (8001148 <main+0x2cc>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0f9      	beq.n	800109e <main+0x222>
  EncoderSpeed[2] = (I2C2->DR) & 0xff;
 80010aa:	4b27      	ldr	r3, [pc, #156]	; (8001148 <main+0x2cc>)
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	b25a      	sxtb	r2, r3
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <main+0x2e4>)
 80010b2:	709a      	strb	r2, [r3, #2]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 80010b4:	bf00      	nop
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <main+0x2cc>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f9      	beq.n	80010b6 <main+0x23a>
  EncoderSpeed[3] = (I2C2->DR) & 0xff;
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <main+0x2cc>)
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	4b25      	ldr	r3, [pc, #148]	; (8001160 <main+0x2e4>)
 80010ca:	70da      	strb	r2, [r3, #3]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 80010cc:	bf00      	nop
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <main+0x2cc>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f9      	beq.n	80010ce <main+0x252>
  EncoderNote[0] = (I2C2->DR) & 0xff;
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <main+0x2cc>)
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	b25a      	sxtb	r2, r3
 80010e0:	4b20      	ldr	r3, [pc, #128]	; (8001164 <main+0x2e8>)
 80010e2:	701a      	strb	r2, [r3, #0]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 80010e4:	bf00      	nop
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <main+0x2cc>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f9      	beq.n	80010e6 <main+0x26a>
  EncoderNote[1] = (I2C2->DR) & 0xff;
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <main+0x2cc>)
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	b25a      	sxtb	r2, r3
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <main+0x2e8>)
 80010fa:	705a      	strb	r2, [r3, #1]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 80010fc:	bf00      	nop
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <main+0x2cc>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f9      	beq.n	80010fe <main+0x282>
  EncoderNote[2] = (I2C2->DR) & 0xff;
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <main+0x2cc>)
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	b25a      	sxtb	r2, r3
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <main+0x2e8>)
 8001112:	709a      	strb	r2, [r3, #2]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 8001114:	bf00      	nop
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <main+0x2cc>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f9      	beq.n	8001116 <main+0x29a>
  EncoderNote[3] = (I2C2->DR) & 0xff;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <main+0x2cc>)
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	b25a      	sxtb	r2, r3
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <main+0x2e8>)
 800112a:	70da      	strb	r2, [r3, #3]
  while ((I2C2->SR1 & 1<<6) == 0); //wait for RXNE
 800112c:	bf00      	nop
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <main+0x2cc>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f9      	beq.n	800112e <main+0x2b2>
  I2C2->CR1 &= ~(1<<10); //NACK
 800113a:	4b03      	ldr	r3, [pc, #12]	; (8001148 <main+0x2cc>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a02      	ldr	r2, [pc, #8]	; (8001148 <main+0x2cc>)
 8001140:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e00f      	b.n	8001168 <main+0x2ec>
 8001148:	40005800 	.word	0x40005800
 800114c:	20000000 	.word	0x20000000
 8001150:	20000001 	.word	0x20000001
 8001154:	20000348 	.word	0x20000348
 8001158:	20000004 	.word	0x20000004
 800115c:	20000008 	.word	0x20000008
 8001160:	2000000c 	.word	0x2000000c
 8001164:	20000010 	.word	0x20000010
  I2C2->CR1 |= 1<<9; //STOP
 8001168:	4ba4      	ldr	r3, [pc, #656]	; (80013fc <main+0x580>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4aa3      	ldr	r2, [pc, #652]	; (80013fc <main+0x580>)
 800116e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001172:	6013      	str	r3, [r2, #0]
  filterBeta = I2C2->DR;
 8001174:	4ba1      	ldr	r3, [pc, #644]	; (80013fc <main+0x580>)
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	b25a      	sxtb	r2, r3
 800117a:	4ba1      	ldr	r3, [pc, #644]	; (8001400 <main+0x584>)
 800117c:	701a      	strb	r2, [r3, #0]




  DWT_Delay_ms(50); //let stuff settle down properly
 800117e:	2032      	movs	r0, #50	; 0x32
 8001180:	f7ff f866 	bl	8000250 <DWT_Delay_ms>

  IWDG->KR = 0xAAAA; //reset the watchdog timer
 8001184:	4b9f      	ldr	r3, [pc, #636]	; (8001404 <main+0x588>)
 8001186:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800118a:	601a      	str	r2, [r3, #0]
  blocked = 0;
 800118c:	4b9e      	ldr	r3, [pc, #632]	; (8001408 <main+0x58c>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
  I2C2->CR1 |= 1; //enable i2c 2 peripheral for LCD and EEPROM
 8001192:	4b9a      	ldr	r3, [pc, #616]	; (80013fc <main+0x580>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a99      	ldr	r2, [pc, #612]	; (80013fc <main+0x580>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6013      	str	r3, [r2, #0]
  I2C1->CR1 |= 1; //enable i2c 1 peripheral for LED Matrix
 800119e:	4b9b      	ldr	r3, [pc, #620]	; (800140c <main+0x590>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a9a      	ldr	r2, [pc, #616]	; (800140c <main+0x590>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6013      	str	r3, [r2, #0]

  LCDInit(LCD_Address);
 80011aa:	204e      	movs	r0, #78	; 0x4e
 80011ac:	f7ff f956 	bl	800045c <LCDInit>
  LEDMatrixInit(LEDMatrix_Address);
 80011b0:	2048      	movs	r0, #72	; 0x48
 80011b2:	f7ff fc2b 	bl	8000a0c <LEDMatrixInit>

  LCDClear(LCD_Address);
 80011b6:	204e      	movs	r0, #78	; 0x4e
 80011b8:	f7ff faaa 	bl	8000710 <LCDClear>

  LCDSetCursor(1, 1, LCD_Address);
 80011bc:	224e      	movs	r2, #78	; 0x4e
 80011be:	2101      	movs	r1, #1
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff fab7 	bl	8000734 <LCDSetCursor>

  LCDPrepareInt();
 80011c6:	f7ff fadb 	bl	8000780 <LCDPrepareInt>


  TIM2->CR1 |= 1; //enable BAM Driver
 80011ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6013      	str	r3, [r2, #0]
  TIM3->CR1 |= 1; //enable encoder scan driver
 80011da:	4b8d      	ldr	r3, [pc, #564]	; (8001410 <main+0x594>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a8c      	ldr	r2, [pc, #560]	; (8001410 <main+0x594>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6013      	str	r3, [r2, #0]


  //indicate where are all the note C's
  for(int8_t i = 0; i < 4; i++){
 80011e6:	2300      	movs	r3, #0
 80011e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80011ec:	e011      	b.n	8001212 <main+0x396>
	  LEDMatrix[i] &= 0xf; //clear all the red channels
 80011ee:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80011f2:	4a88      	ldr	r2, [pc, #544]	; (8001414 <main+0x598>)
 80011f4:	5cd2      	ldrb	r2, [r2, r3]
 80011f6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80011fa:	f002 020f 	and.w	r2, r2, #15
 80011fe:	b2d1      	uxtb	r1, r2
 8001200:	4a84      	ldr	r2, [pc, #528]	; (8001414 <main+0x598>)
 8001202:	54d1      	strb	r1, [r2, r3]
  for(int8_t i = 0; i < 4; i++){
 8001204:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001208:	b2db      	uxtb	r3, r3
 800120a:	3301      	adds	r3, #1
 800120c:	b2db      	uxtb	r3, r3
 800120e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001212:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001216:	2b03      	cmp	r3, #3
 8001218:	dde9      	ble.n	80011ee <main+0x372>
  }

  for(int8_t i = 0; i < 16; i++){ //we have 16 keys
 800121a:	2300      	movs	r3, #0
 800121c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001220:	e040      	b.n	80012a4 <main+0x428>

	  int8_t row = 3-(i>>2);
 8001222:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001226:	109b      	asrs	r3, r3, #2
 8001228:	b25b      	sxtb	r3, r3
 800122a:	b2db      	uxtb	r3, r3
 800122c:	f1c3 0303 	rsb	r3, r3, #3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	70bb      	strb	r3, [r7, #2]
	  int8_t col = (i%4);
 8001234:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001238:	425a      	negs	r2, r3
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	bf58      	it	pl
 8001244:	4253      	negpl	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
	  if((MidiNoteOffset+i)%12 == 0){ //this key is a C
 8001248:	4b73      	ldr	r3, [pc, #460]	; (8001418 <main+0x59c>)
 800124a:	f993 3000 	ldrsb.w	r3, [r3]
 800124e:	461a      	mov	r2, r3
 8001250:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001254:	18d1      	adds	r1, r2, r3
 8001256:	4b71      	ldr	r3, [pc, #452]	; (800141c <main+0x5a0>)
 8001258:	fb83 2301 	smull	r2, r3, r3, r1
 800125c:	105a      	asrs	r2, r3, #1
 800125e:	17cb      	asrs	r3, r1, #31
 8001260:	1ad2      	subs	r2, r2, r3
 8001262:	4613      	mov	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	1aca      	subs	r2, r1, r3
 800126c:	2a00      	cmp	r2, #0
 800126e:	d112      	bne.n	8001296 <main+0x41a>
		  LEDMatrix[row] |= (1<<(4+col));
 8001270:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001274:	4a67      	ldr	r2, [pc, #412]	; (8001414 <main+0x598>)
 8001276:	5cd3      	ldrb	r3, [r2, r3]
 8001278:	b25a      	sxtb	r2, r3
 800127a:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800127e:	3304      	adds	r3, #4
 8001280:	2101      	movs	r1, #1
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	b25b      	sxtb	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b25a      	sxtb	r2, r3
 800128c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001290:	b2d1      	uxtb	r1, r2
 8001292:	4a60      	ldr	r2, [pc, #384]	; (8001414 <main+0x598>)
 8001294:	54d1      	strb	r1, [r2, r3]
  for(int8_t i = 0; i < 16; i++){ //we have 16 keys
 8001296:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800129a:	b2db      	uxtb	r3, r3
 800129c:	3301      	adds	r3, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80012a4:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80012a8:	2b0f      	cmp	r3, #15
 80012aa:	ddba      	ble.n	8001222 <main+0x3a6>

  }



  for(int i = 0; i < 4; i++){ //function to drive the LED's
 80012ac:	2300      	movs	r3, #0
 80012ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80012b0:	e022      	b.n	80012f8 <main+0x47c>
	  LEDMatrixBuffer[i*4] = 0b1111; //clear all pins first to prevent ghosting
 80012b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4a5a      	ldr	r2, [pc, #360]	; (8001420 <main+0x5a4>)
 80012b8:	210f      	movs	r1, #15
 80012ba:	54d1      	strb	r1, [r2, r3]
	  LEDMatrixBuffer[i*4+1] = 0x00;
 80012bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a57      	ldr	r2, [pc, #348]	; (8001420 <main+0x5a4>)
 80012c4:	2100      	movs	r1, #0
 80012c6:	54d1      	strb	r1, [r2, r3]
	  LEDMatrixBuffer[i*4+2] = ~(1<<i);
 80012c8:	2201      	movs	r2, #1
 80012ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	43d2      	mvns	r2, r2
 80012da:	b2d1      	uxtb	r1, r2
 80012dc:	4a50      	ldr	r2, [pc, #320]	; (8001420 <main+0x5a4>)
 80012de:	54d1      	strb	r1, [r2, r3]
	  LEDMatrixBuffer[i*4+3] = LEDMatrix[i];
 80012e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	3303      	adds	r3, #3
 80012e6:	494b      	ldr	r1, [pc, #300]	; (8001414 <main+0x598>)
 80012e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012ea:	440a      	add	r2, r1
 80012ec:	7811      	ldrb	r1, [r2, #0]
 80012ee:	4a4c      	ldr	r2, [pc, #304]	; (8001420 <main+0x5a4>)
 80012f0:	54d1      	strb	r1, [r2, r3]
  for(int i = 0; i < 4; i++){ //function to drive the LED's
 80012f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012f4:	3301      	adds	r3, #1
 80012f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80012f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	ddd9      	ble.n	80012b2 <main+0x436>
  }

  LEDMatrixStart(LEDMatrix_Address);
 80012fe:	2048      	movs	r0, #72	; 0x48
 8001300:	f7ff fc1a 	bl	8000b38 <LEDMatrixStart>




  for(int i = 0; i < 4; i++){ //function to fill in the MidiNoteLut
 8001304:	2300      	movs	r3, #0
 8001306:	647b      	str	r3, [r7, #68]	; 0x44
 8001308:	e025      	b.n	8001356 <main+0x4da>

	  for(int j = 0; j < 4; j++){
 800130a:	2300      	movs	r3, #0
 800130c:	643b      	str	r3, [r7, #64]	; 0x40
 800130e:	e01c      	b.n	800134a <main+0x4ce>

		  MidiNoteLUT[5*(3-i)+j+1] = MidiNoteOffset + (4*i+j); //math...
 8001310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001312:	b2db      	uxtb	r3, r3
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	b2da      	uxtb	r2, r3
 8001318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800131a:	b2db      	uxtb	r3, r3
 800131c:	4413      	add	r3, r2
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b3d      	ldr	r3, [pc, #244]	; (8001418 <main+0x59c>)
 8001322:	f993 3000 	ldrsb.w	r3, [r3]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	4413      	add	r3, r2
 800132a:	b2d9      	uxtb	r1, r3
 800132c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800132e:	f1c3 0203 	rsb	r2, r3, #3
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	441a      	add	r2, r3
 8001338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800133a:	4413      	add	r3, r2
 800133c:	3301      	adds	r3, #1
 800133e:	b249      	sxtb	r1, r1
 8001340:	4a38      	ldr	r2, [pc, #224]	; (8001424 <main+0x5a8>)
 8001342:	54d1      	strb	r1, [r2, r3]
	  for(int j = 0; j < 4; j++){
 8001344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001346:	3301      	adds	r3, #1
 8001348:	643b      	str	r3, [r7, #64]	; 0x40
 800134a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800134c:	2b03      	cmp	r3, #3
 800134e:	dddf      	ble.n	8001310 <main+0x494>
  for(int i = 0; i < 4; i++){ //function to fill in the MidiNoteLut
 8001350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001352:	3301      	adds	r3, #1
 8001354:	647b      	str	r3, [r7, #68]	; 0x44
 8001356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001358:	2b03      	cmp	r3, #3
 800135a:	ddd6      	ble.n	800130a <main+0x48e>
	  }

  }


  IWDG->KR = 0xAAAA; //reset the watchdog timer
 800135c:	4b29      	ldr	r3, [pc, #164]	; (8001404 <main+0x588>)
 800135e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001362:	601a      	str	r2, [r3, #0]
  for(int i = 1; i < 4; i++){
 8001364:	2301      	movs	r3, #1
 8001366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001368:	e041      	b.n	80013ee <main+0x572>

	  initMovingAverage(inputBuffer[i], &sum[i], &oldestPos[i]);
 800136a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	4a2e      	ldr	r2, [pc, #184]	; (8001428 <main+0x5ac>)
 8001370:	1898      	adds	r0, r3, r2
 8001372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4a2d      	ldr	r2, [pc, #180]	; (800142c <main+0x5b0>)
 8001378:	1899      	adds	r1, r3, r2
 800137a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4a2c      	ldr	r2, [pc, #176]	; (8001430 <main+0x5b4>)
 8001380:	4413      	add	r3, r2
 8001382:	461a      	mov	r2, r3
 8001384:	f7ff fcdc 	bl	8000d40 <initMovingAverage>
	  int currentADC;
	  for(int j = 0; j < NAverages; j++){
 8001388:	2300      	movs	r3, #0
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
 800138c:	e01e      	b.n	80013cc <main+0x550>
		  currentADC = ADC1ReadVal(i);
 800138e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001390:	b2db      	uxtb	r3, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f7fe feda 	bl	800014c <ADC1ReadVal>
 8001398:	63b8      	str	r0, [r7, #56]	; 0x38
		  currentADC = movingAverage(inputBuffer[i], &sum[i], &oldestPos[i], NAverages, currentADC); //service it N times to fill in the buffer
 800139a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	4a22      	ldr	r2, [pc, #136]	; (8001428 <main+0x5ac>)
 80013a0:	1898      	adds	r0, r3, r2
 80013a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4a21      	ldr	r2, [pc, #132]	; (800142c <main+0x5b0>)
 80013a8:	1899      	adds	r1, r3, r2
 80013aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4a20      	ldr	r2, [pc, #128]	; (8001430 <main+0x5b4>)
 80013b0:	441a      	add	r2, r3
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <main+0x5b8>)
 80013b4:	f993 3000 	ldrsb.w	r3, [r3]
 80013b8:	461c      	mov	r4, r3
 80013ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	4623      	mov	r3, r4
 80013c0:	f7ff fcd4 	bl	8000d6c <movingAverage>
 80013c4:	63b8      	str	r0, [r7, #56]	; 0x38
	  for(int j = 0; j < NAverages; j++){
 80013c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c8:	3301      	adds	r3, #1
 80013ca:	637b      	str	r3, [r7, #52]	; 0x34
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <main+0x5b8>)
 80013ce:	f993 3000 	ldrsb.w	r3, [r3]
 80013d2:	461a      	mov	r2, r3
 80013d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d6:	4293      	cmp	r3, r2
 80013d8:	dbd9      	blt.n	800138e <main+0x512>
	  }
	  lastFaderValues[i-1] = currentADC >> 5;
 80013da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013dc:	3b01      	subs	r3, #1
 80013de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013e0:	1152      	asrs	r2, r2, #5
 80013e2:	4915      	ldr	r1, [pc, #84]	; (8001438 <main+0x5bc>)
 80013e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 1; i < 4; i++){
 80013e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ea:	3301      	adds	r3, #1
 80013ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	ddba      	ble.n	800136a <main+0x4ee>


  }

  for(int i = 0; i < 5; i++){
 80013f4:	2300      	movs	r3, #0
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
 80013f8:	e02b      	b.n	8001452 <main+0x5d6>
 80013fa:	bf00      	nop
 80013fc:	40005800 	.word	0x40005800
 8001400:	20000014 	.word	0x20000014
 8001404:	40003000 	.word	0x40003000
 8001408:	2000034b 	.word	0x2000034b
 800140c:	40005400 	.word	0x40005400
 8001410:	40000400 	.word	0x40000400
 8001414:	20000344 	.word	0x20000344
 8001418:	20000000 	.word	0x20000000
 800141c:	2aaaaaab 	.word	0x2aaaaaab
 8001420:	20000634 	.word	0x20000634
 8001424:	20000bb0 	.word	0x20000bb0
 8001428:	20000644 	.word	0x20000644
 800142c:	20000a44 	.word	0x20000a44
 8001430:	20000a54 	.word	0x20000a54
 8001434:	20000015 	.word	0x20000015
 8001438:	2000038c 	.word	0x2000038c

	  lastEncoderValues[i] = encoderValues[i];
 800143c:	4aa9      	ldr	r2, [pc, #676]	; (80016e4 <main+0x868>)
 800143e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001440:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001444:	49a8      	ldr	r1, [pc, #672]	; (80016e8 <main+0x86c>)
 8001446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < 5; i++){
 800144c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800144e:	3301      	adds	r3, #1
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
 8001452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001454:	2b04      	cmp	r3, #4
 8001456:	ddf1      	ble.n	800143c <main+0x5c0>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  IWDG->KR = 0xAAAA; //reset the watchdog timer
 8001458:	4ba4      	ldr	r3, [pc, #656]	; (80016ec <main+0x870>)
 800145a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800145e:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  brightness[0] = MidiCCValues[MidiCCEncoderLUT[3]] << 1;
 8001460:	4ba3      	ldr	r3, [pc, #652]	; (80016f0 <main+0x874>)
 8001462:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001466:	461a      	mov	r2, r3
 8001468:	4ba2      	ldr	r3, [pc, #648]	; (80016f4 <main+0x878>)
 800146a:	569b      	ldrsb	r3, [r3, r2]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4ba1      	ldr	r3, [pc, #644]	; (80016f8 <main+0x87c>)
 8001474:	701a      	strb	r2, [r3, #0]
	  brightness[1] = MidiCCValues[MidiCCEncoderLUT[2]] << 1;
 8001476:	4b9e      	ldr	r3, [pc, #632]	; (80016f0 <main+0x874>)
 8001478:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800147c:	461a      	mov	r2, r3
 800147e:	4b9d      	ldr	r3, [pc, #628]	; (80016f4 <main+0x878>)
 8001480:	569b      	ldrsb	r3, [r3, r2]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b9b      	ldr	r3, [pc, #620]	; (80016f8 <main+0x87c>)
 800148a:	705a      	strb	r2, [r3, #1]
	  brightness[2] = MidiCCValues[MidiCCEncoderLUT[1]] << 1;
 800148c:	4b98      	ldr	r3, [pc, #608]	; (80016f0 <main+0x874>)
 800148e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001492:	461a      	mov	r2, r3
 8001494:	4b97      	ldr	r3, [pc, #604]	; (80016f4 <main+0x878>)
 8001496:	569b      	ldrsb	r3, [r3, r2]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b96      	ldr	r3, [pc, #600]	; (80016f8 <main+0x87c>)
 80014a0:	709a      	strb	r2, [r3, #2]
	  brightness[3] = MidiCCValues[MidiCCEncoderLUT[0]] << 1;
 80014a2:	4b93      	ldr	r3, [pc, #588]	; (80016f0 <main+0x874>)
 80014a4:	f993 3000 	ldrsb.w	r3, [r3]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b92      	ldr	r3, [pc, #584]	; (80016f4 <main+0x878>)
 80014ac:	569b      	ldrsb	r3, [r3, r2]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	4b90      	ldr	r3, [pc, #576]	; (80016f8 <main+0x87c>)
 80014b6:	70da      	strb	r2, [r3, #3]


	 uint8_t currentButtonState = ((GPIOB->IDR)&1);
 80014b8:	4b90      	ldr	r3, [pc, #576]	; (80016fc <main+0x880>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]

	 /* Step 1: Update the integrator based on the input signal.  Note that the
	 integrator follows the input, decreasing or increasing towards the limits as
	 determined by the input state (0 or 1). */

	 if (currentButtonState == 0){ //button is currently depressed
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10e      	bne.n	80014e8 <main+0x66c>
		 if(dIntegrator < MAXIMUM){
 80014ca:	4b8d      	ldr	r3, [pc, #564]	; (8001700 <main+0x884>)
 80014cc:	f993 3000 	ldrsb.w	r3, [r3]
 80014d0:	2b0e      	cmp	r3, #14
 80014d2:	dc17      	bgt.n	8001504 <main+0x688>
			 dIntegrator++;
 80014d4:	4b8a      	ldr	r3, [pc, #552]	; (8001700 <main+0x884>)
 80014d6:	f993 3000 	ldrsb.w	r3, [r3]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	3301      	adds	r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	b25a      	sxtb	r2, r3
 80014e2:	4b87      	ldr	r3, [pc, #540]	; (8001700 <main+0x884>)
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	e00d      	b.n	8001504 <main+0x688>
		 }
	 }
	 else if(dIntegrator > 0){ //button is not depressed
 80014e8:	4b85      	ldr	r3, [pc, #532]	; (8001700 <main+0x884>)
 80014ea:	f993 3000 	ldrsb.w	r3, [r3]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	dd08      	ble.n	8001504 <main+0x688>
		 dIntegrator--;
 80014f2:	4b83      	ldr	r3, [pc, #524]	; (8001700 <main+0x884>)
 80014f4:	f993 3000 	ldrsb.w	r3, [r3]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	3b01      	subs	r3, #1
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	b25a      	sxtb	r2, r3
 8001500:	4b7f      	ldr	r3, [pc, #508]	; (8001700 <main+0x884>)
 8001502:	701a      	strb	r2, [r3, #0]
	 /* Step 2: Update the output state based on the integrator.  Note that the
	 output will only change states if the integrator has reached a limit, either

	 0 or MAXIMUM. */

	 if(dIntegrator == 0){
 8001504:	4b7e      	ldr	r3, [pc, #504]	; (8001700 <main+0x884>)
 8001506:	f993 3000 	ldrsb.w	r3, [r3]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d103      	bne.n	8001516 <main+0x69a>
		 dOutput = 0;
 800150e:	4b7d      	ldr	r3, [pc, #500]	; (8001704 <main+0x888>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
 8001514:	e00a      	b.n	800152c <main+0x6b0>
	 }

	 else if(dIntegrator >= MAXIMUM){
 8001516:	4b7a      	ldr	r3, [pc, #488]	; (8001700 <main+0x884>)
 8001518:	f993 3000 	ldrsb.w	r3, [r3]
 800151c:	2b0e      	cmp	r3, #14
 800151e:	dd05      	ble.n	800152c <main+0x6b0>
		 dOutput = 1;
 8001520:	4b78      	ldr	r3, [pc, #480]	; (8001704 <main+0x888>)
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
		 dIntegrator = MAXIMUM; /* defensive code if integrator got corrupted */
 8001526:	4b76      	ldr	r3, [pc, #472]	; (8001700 <main+0x884>)
 8001528:	220f      	movs	r2, #15
 800152a:	701a      	strb	r2, [r3, #0]
	 }


	 /*begin button handler*/
	 if (dOutput == 1 && lastButtonState == 0){ //button has been pressed
 800152c:	4b75      	ldr	r3, [pc, #468]	; (8001704 <main+0x888>)
 800152e:	f993 3000 	ldrsb.w	r3, [r3]
 8001532:	2b01      	cmp	r3, #1
 8001534:	f040 81e6 	bne.w	8001904 <main+0xa88>
 8001538:	4b73      	ldr	r3, [pc, #460]	; (8001708 <main+0x88c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	f040 81e1 	bne.w	8001904 <main+0xa88>


		 switch (status){
 8001542:	4b72      	ldr	r3, [pc, #456]	; (800170c <main+0x890>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b03      	cmp	r3, #3
 8001548:	f200 81de 	bhi.w	8001908 <main+0xa8c>
 800154c:	a201      	add	r2, pc, #4	; (adr r2, 8001554 <main+0x6d8>)
 800154e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001552:	bf00      	nop
 8001554:	08001565 	.word	0x08001565
 8001558:	080015b7 	.word	0x080015b7
 800155c:	08001675 	.word	0x08001675
 8001560:	08001861 	.word	0x08001861

		 case Status:
			 //we are now entering menu mode
			 status = Menu;
 8001564:	4b69      	ldr	r3, [pc, #420]	; (800170c <main+0x890>)
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
			 menuItemSelected = 0; //start from the first item
 800156a:	4b69      	ldr	r3, [pc, #420]	; (8001710 <main+0x894>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
			 snprintf(LCDQueueTop, 17, "\x7E%s", menuItems[menuItemSelected]);
 8001570:	4b67      	ldr	r3, [pc, #412]	; (8001710 <main+0x894>)
 8001572:	f993 3000 	ldrsb.w	r3, [r3]
 8001576:	461a      	mov	r2, r3
 8001578:	4613      	mov	r3, r2
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	1a9b      	subs	r3, r3, r2
 800157e:	4a65      	ldr	r2, [pc, #404]	; (8001714 <main+0x898>)
 8001580:	4413      	add	r3, r2
 8001582:	4a65      	ldr	r2, [pc, #404]	; (8001718 <main+0x89c>)
 8001584:	2111      	movs	r1, #17
 8001586:	4865      	ldr	r0, [pc, #404]	; (800171c <main+0x8a0>)
 8001588:	f00a fe38 	bl	800c1fc <sniprintf>
			 snprintf(LCDQueueBottom, 17, " %s", menuItems[menuItemSelected+1]); //normally you'd have to check if there is a next item available, but since this is only the menu init, we don't have to. (We will have to in the encoder-rotated handler)
 800158c:	4b60      	ldr	r3, [pc, #384]	; (8001710 <main+0x894>)
 800158e:	f993 3000 	ldrsb.w	r3, [r3]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	4613      	mov	r3, r2
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	4a5e      	ldr	r2, [pc, #376]	; (8001714 <main+0x898>)
 800159c:	4413      	add	r3, r2
 800159e:	4a60      	ldr	r2, [pc, #384]	; (8001720 <main+0x8a4>)
 80015a0:	2111      	movs	r1, #17
 80015a2:	4860      	ldr	r0, [pc, #384]	; (8001724 <main+0x8a8>)
 80015a4:	f00a fe2a 	bl	800c1fc <sniprintf>
			 LCDTopQueued = 1; //signal that we need to update the LCD
 80015a8:	4b5f      	ldr	r3, [pc, #380]	; (8001728 <main+0x8ac>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	701a      	strb	r2, [r3, #0]
			 LCDBottomQueued = 1;
 80015ae:	4b5f      	ldr	r3, [pc, #380]	; (800172c <main+0x8b0>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
			 break;
 80015b4:	e1a9      	b.n	800190a <main+0xa8e>

		 case Menu:
			 //we are already in our menu, time to enter whatever submenu is selected (or exit)
			 if(menuItemSelected != MENU_SIZE){ //we have not selected "back", go into the selected SubMenu;
 80015b6:	4b56      	ldr	r3, [pc, #344]	; (8001710 <main+0x894>)
 80015b8:	f993 3000 	ldrsb.w	r3, [r3]
 80015bc:	2b05      	cmp	r3, #5
 80015be:	d039      	beq.n	8001634 <main+0x7b8>
				 status = SubMenu;
 80015c0:	4b52      	ldr	r3, [pc, #328]	; (800170c <main+0x890>)
 80015c2:	2202      	movs	r2, #2
 80015c4:	701a      	strb	r2, [r3, #0]
				 subMenuSelected = menuItemSelected;
 80015c6:	4b52      	ldr	r3, [pc, #328]	; (8001710 <main+0x894>)
 80015c8:	f993 2000 	ldrsb.w	r2, [r3]
 80015cc:	4b58      	ldr	r3, [pc, #352]	; (8001730 <main+0x8b4>)
 80015ce:	701a      	strb	r2, [r3, #0]
				 parameterSelected = 0; //start afresh
 80015d0:	4b58      	ldr	r3, [pc, #352]	; (8001734 <main+0x8b8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
				 snprintf(LCDQueueTop, 17, "\x7E%s", (*(subMenus[subMenuSelected]+parameterSelected)));
 80015d6:	4b56      	ldr	r3, [pc, #344]	; (8001730 <main+0x8b4>)
 80015d8:	f993 3000 	ldrsb.w	r3, [r3]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b56      	ldr	r3, [pc, #344]	; (8001738 <main+0x8bc>)
 80015e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80015e4:	4b53      	ldr	r3, [pc, #332]	; (8001734 <main+0x8b8>)
 80015e6:	f993 3000 	ldrsb.w	r3, [r3]
 80015ea:	4619      	mov	r1, r3
 80015ec:	460b      	mov	r3, r1
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	1a5b      	subs	r3, r3, r1
 80015f2:	4413      	add	r3, r2
 80015f4:	4a48      	ldr	r2, [pc, #288]	; (8001718 <main+0x89c>)
 80015f6:	2111      	movs	r1, #17
 80015f8:	4848      	ldr	r0, [pc, #288]	; (800171c <main+0x8a0>)
 80015fa:	f00a fdff 	bl	800c1fc <sniprintf>
				 snprintf(LCDQueueBottom, 17, " %s", (*(subMenus[subMenuSelected]+parameterSelected+1)));
 80015fe:	4b4c      	ldr	r3, [pc, #304]	; (8001730 <main+0x8b4>)
 8001600:	f993 3000 	ldrsb.w	r3, [r3]
 8001604:	461a      	mov	r2, r3
 8001606:	4b4c      	ldr	r3, [pc, #304]	; (8001738 <main+0x8bc>)
 8001608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800160c:	4b49      	ldr	r3, [pc, #292]	; (8001734 <main+0x8b8>)
 800160e:	f993 3000 	ldrsb.w	r3, [r3]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	4613      	mov	r3, r2
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	1a9b      	subs	r3, r3, r2
 800161a:	440b      	add	r3, r1
 800161c:	4a40      	ldr	r2, [pc, #256]	; (8001720 <main+0x8a4>)
 800161e:	2111      	movs	r1, #17
 8001620:	4840      	ldr	r0, [pc, #256]	; (8001724 <main+0x8a8>)
 8001622:	f00a fdeb 	bl	800c1fc <sniprintf>
				 LCDTopQueued = 1; //signal that we need to update the LCD
 8001626:	4b40      	ldr	r3, [pc, #256]	; (8001728 <main+0x8ac>)
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
				 LCDBottomQueued = 1;
 800162c:	4b3f      	ldr	r3, [pc, #252]	; (800172c <main+0x8b0>)
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
				 snprintf(LCDQueueTop, 17, "                "); //clear LCD
				 snprintf(LCDQueueBottom, 17, "                ");
				 LCDTopQueued = 1; //signal that we need to update the LCD
				 LCDBottomQueued = 1;
			 }
			 break;
 8001632:	e16a      	b.n	800190a <main+0xa8e>
				 status = Status;
 8001634:	4b35      	ldr	r3, [pc, #212]	; (800170c <main+0x890>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
				 snprintf(LCDQueueTop, 17, "                "); //clear LCD
 800163a:	4a38      	ldr	r2, [pc, #224]	; (800171c <main+0x8a0>)
 800163c:	4b3f      	ldr	r3, [pc, #252]	; (800173c <main+0x8c0>)
 800163e:	4615      	mov	r5, r2
 8001640:	461c      	mov	r4, r3
 8001642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001644:	6028      	str	r0, [r5, #0]
 8001646:	6069      	str	r1, [r5, #4]
 8001648:	60aa      	str	r2, [r5, #8]
 800164a:	60eb      	str	r3, [r5, #12]
 800164c:	7823      	ldrb	r3, [r4, #0]
 800164e:	742b      	strb	r3, [r5, #16]
				 snprintf(LCDQueueBottom, 17, "                ");
 8001650:	4a34      	ldr	r2, [pc, #208]	; (8001724 <main+0x8a8>)
 8001652:	4b3a      	ldr	r3, [pc, #232]	; (800173c <main+0x8c0>)
 8001654:	4615      	mov	r5, r2
 8001656:	461c      	mov	r4, r3
 8001658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165a:	6028      	str	r0, [r5, #0]
 800165c:	6069      	str	r1, [r5, #4]
 800165e:	60aa      	str	r2, [r5, #8]
 8001660:	60eb      	str	r3, [r5, #12]
 8001662:	7823      	ldrb	r3, [r4, #0]
 8001664:	742b      	strb	r3, [r5, #16]
				 LCDTopQueued = 1; //signal that we need to update the LCD
 8001666:	4b30      	ldr	r3, [pc, #192]	; (8001728 <main+0x8ac>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
				 LCDBottomQueued = 1;
 800166c:	4b2f      	ldr	r3, [pc, #188]	; (800172c <main+0x8b0>)
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
			 break;
 8001672:	e14a      	b.n	800190a <main+0xa8e>

		 case SubMenu:

			 if(parameterSelected != subMenuSizes[subMenuSelected]){//we have not selected "back", go into selected parameter page
 8001674:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <main+0x8b4>)
 8001676:	f993 3000 	ldrsb.w	r3, [r3]
 800167a:	461a      	mov	r2, r3
 800167c:	4b30      	ldr	r3, [pc, #192]	; (8001740 <main+0x8c4>)
 800167e:	569a      	ldrsb	r2, [r3, r2]
 8001680:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <main+0x8b8>)
 8001682:	f993 3000 	ldrsb.w	r3, [r3]
 8001686:	429a      	cmp	r2, r3
 8001688:	f000 80c4 	beq.w	8001814 <main+0x998>
				 status = ParaSet;
 800168c:	4b1f      	ldr	r3, [pc, #124]	; (800170c <main+0x890>)
 800168e:	2203      	movs	r2, #3
 8001690:	701a      	strb	r2, [r3, #0]
				 snprintf(LCDQueueTop, 17, "%s", (*(subMenus[subMenuSelected]+parameterSelected))); //print the current parameter on the top line
 8001692:	4b27      	ldr	r3, [pc, #156]	; (8001730 <main+0x8b4>)
 8001694:	f993 3000 	ldrsb.w	r3, [r3]
 8001698:	461a      	mov	r2, r3
 800169a:	4b27      	ldr	r3, [pc, #156]	; (8001738 <main+0x8bc>)
 800169c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <main+0x8b8>)
 80016a2:	f993 3000 	ldrsb.w	r3, [r3]
 80016a6:	4619      	mov	r1, r3
 80016a8:	460b      	mov	r3, r1
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	1a5b      	subs	r3, r3, r1
 80016ae:	4413      	add	r3, r2
 80016b0:	4a24      	ldr	r2, [pc, #144]	; (8001744 <main+0x8c8>)
 80016b2:	2111      	movs	r1, #17
 80016b4:	4819      	ldr	r0, [pc, #100]	; (800171c <main+0x8a0>)
 80016b6:	f00a fda1 	bl	800c1fc <sniprintf>
				 if((subMenuSelected == 2) | (subMenuSelected == 3 && parameterSelected == 0)){ //if we are changing notenames
 80016ba:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <main+0x8b4>)
 80016bc:	f993 3000 	ldrsb.w	r3, [r3]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	bf0c      	ite	eq
 80016c4:	2301      	moveq	r3, #1
 80016c6:	2300      	movne	r3, #0
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <main+0x8b4>)
 80016cc:	f993 3000 	ldrsb.w	r3, [r3]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d139      	bne.n	8001748 <main+0x8cc>
 80016d4:	4b17      	ldr	r3, [pc, #92]	; (8001734 <main+0x8b8>)
 80016d6:	f993 3000 	ldrsb.w	r3, [r3]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d134      	bne.n	8001748 <main+0x8cc>
 80016de:	2301      	movs	r3, #1
 80016e0:	e033      	b.n	800174a <main+0x8ce>
 80016e2:	bf00      	nop
 80016e4:	20000358 	.word	0x20000358
 80016e8:	2000036c 	.word	0x2000036c
 80016ec:	40003000 	.word	0x40003000
 80016f0:	20000008 	.word	0x20000008
 80016f4:	20000c44 	.word	0x20000c44
 80016f8:	20000128 	.word	0x20000128
 80016fc:	40010c00 	.word	0x40010c00
 8001700:	20000398 	.word	0x20000398
 8001704:	20000399 	.word	0x20000399
 8001708:	20000380 	.word	0x20000380
 800170c:	20000349 	.word	0x20000349
 8001710:	20000b60 	.word	0x20000b60
 8001714:	0800cb00 	.word	0x0800cb00
 8001718:	0800ca68 	.word	0x0800ca68
 800171c:	20000cc4 	.word	0x20000cc4
 8001720:	0800ca6c 	.word	0x0800ca6c
 8001724:	20000d20 	.word	0x20000d20
 8001728:	20000d32 	.word	0x20000d32
 800172c:	20000a64 	.word	0x20000a64
 8001730:	20000bac 	.word	0x20000bac
 8001734:	20000d31 	.word	0x20000d31
 8001738:	20000018 	.word	0x20000018
 800173c:	0800ca70 	.word	0x0800ca70
 8001740:	0800cccc 	.word	0x0800cccc
 8001744:	0800ca84 	.word	0x0800ca84
 8001748:	2300      	movs	r3, #0
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	4313      	orrs	r3, r2
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d042      	beq.n	80017de <main+0x962>
					 snprintf(LCDQueueBottom, 17, "%s%d", noteNames[(*(*(parameters[subMenuSelected]+parameterSelected))) % 12], (int8_t)(((*(*(parameters[subMenuSelected]+parameterSelected))) / 12) - 1)); //print the NOTENAME of the parameter under question
 8001758:	4bb1      	ldr	r3, [pc, #708]	; (8001a20 <main+0xba4>)
 800175a:	f993 3000 	ldrsb.w	r3, [r3]
 800175e:	461a      	mov	r2, r3
 8001760:	4bb0      	ldr	r3, [pc, #704]	; (8001a24 <main+0xba8>)
 8001762:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001766:	4bb0      	ldr	r3, [pc, #704]	; (8001a28 <main+0xbac>)
 8001768:	f993 3000 	ldrsb.w	r3, [r3]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f993 2000 	ldrsb.w	r2, [r3]
 8001776:	4bad      	ldr	r3, [pc, #692]	; (8001a2c <main+0xbb0>)
 8001778:	fb83 1302 	smull	r1, r3, r3, r2
 800177c:	1059      	asrs	r1, r3, #1
 800177e:	17d3      	asrs	r3, r2, #31
 8001780:	1ac9      	subs	r1, r1, r3
 8001782:	460b      	mov	r3, r1
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	440b      	add	r3, r1
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	b25b      	sxtb	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	4aa6      	ldr	r2, [pc, #664]	; (8001a30 <main+0xbb4>)
 8001798:	1899      	adds	r1, r3, r2
 800179a:	4ba1      	ldr	r3, [pc, #644]	; (8001a20 <main+0xba4>)
 800179c:	f993 3000 	ldrsb.w	r3, [r3]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4ba0      	ldr	r3, [pc, #640]	; (8001a24 <main+0xba8>)
 80017a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80017a8:	4b9f      	ldr	r3, [pc, #636]	; (8001a28 <main+0xbac>)
 80017aa:	f993 3000 	ldrsb.w	r3, [r3]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f993 3000 	ldrsb.w	r3, [r3]
 80017b8:	4a9c      	ldr	r2, [pc, #624]	; (8001a2c <main+0xbb0>)
 80017ba:	fb82 0203 	smull	r0, r2, r2, r3
 80017be:	1052      	asrs	r2, r2, #1
 80017c0:	17db      	asrs	r3, r3, #31
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	3b01      	subs	r3, #1
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	460b      	mov	r3, r1
 80017d2:	4a98      	ldr	r2, [pc, #608]	; (8001a34 <main+0xbb8>)
 80017d4:	2111      	movs	r1, #17
 80017d6:	4898      	ldr	r0, [pc, #608]	; (8001a38 <main+0xbbc>)
 80017d8:	f00a fd10 	bl	800c1fc <sniprintf>
 80017dc:	e013      	b.n	8001806 <main+0x98a>
				 }
				 else{
					 snprintf(LCDQueueBottom, 17, "%d", (*(*(parameters[subMenuSelected]+parameterSelected)))); //print the current value of the parameter under question
 80017de:	4b90      	ldr	r3, [pc, #576]	; (8001a20 <main+0xba4>)
 80017e0:	f993 3000 	ldrsb.w	r3, [r3]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b8f      	ldr	r3, [pc, #572]	; (8001a24 <main+0xba8>)
 80017e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80017ec:	4b8e      	ldr	r3, [pc, #568]	; (8001a28 <main+0xbac>)
 80017ee:	f993 3000 	ldrsb.w	r3, [r3]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f993 3000 	ldrsb.w	r3, [r3]
 80017fc:	4a8f      	ldr	r2, [pc, #572]	; (8001a3c <main+0xbc0>)
 80017fe:	2111      	movs	r1, #17
 8001800:	488d      	ldr	r0, [pc, #564]	; (8001a38 <main+0xbbc>)
 8001802:	f00a fcfb 	bl	800c1fc <sniprintf>
				 }
				 LCDTopQueued = 1; //signal that we need to update the LCD
 8001806:	4b8e      	ldr	r3, [pc, #568]	; (8001a40 <main+0xbc4>)
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
				 LCDBottomQueued = 1;
 800180c:	4b8d      	ldr	r3, [pc, #564]	; (8001a44 <main+0xbc8>)
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
				 snprintf(LCDQueueTop, 17, "\x7E%s", menuItems[menuItemSelected]);
				 snprintf(LCDQueueBottom, 17, " %s", menuItems[menuItemSelected+1]); //normally you'd have to check if there is a next item available, but since this is only the menu init, we don't have to. (We will have to in the encoder-rotated handler)
				 LCDTopQueued = 1; //signal that we need to update the LCD
				 LCDBottomQueued = 1;
			 }
			 break;
 8001812:	e07a      	b.n	800190a <main+0xa8e>
				 status = Menu;
 8001814:	4b8c      	ldr	r3, [pc, #560]	; (8001a48 <main+0xbcc>)
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
				 snprintf(LCDQueueTop, 17, "\x7E%s", menuItems[menuItemSelected]);
 800181a:	4b8c      	ldr	r3, [pc, #560]	; (8001a4c <main+0xbd0>)
 800181c:	f993 3000 	ldrsb.w	r3, [r3]
 8001820:	461a      	mov	r2, r3
 8001822:	4613      	mov	r3, r2
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	4a89      	ldr	r2, [pc, #548]	; (8001a50 <main+0xbd4>)
 800182a:	4413      	add	r3, r2
 800182c:	4a89      	ldr	r2, [pc, #548]	; (8001a54 <main+0xbd8>)
 800182e:	2111      	movs	r1, #17
 8001830:	4889      	ldr	r0, [pc, #548]	; (8001a58 <main+0xbdc>)
 8001832:	f00a fce3 	bl	800c1fc <sniprintf>
				 snprintf(LCDQueueBottom, 17, " %s", menuItems[menuItemSelected+1]); //normally you'd have to check if there is a next item available, but since this is only the menu init, we don't have to. (We will have to in the encoder-rotated handler)
 8001836:	4b85      	ldr	r3, [pc, #532]	; (8001a4c <main+0xbd0>)
 8001838:	f993 3000 	ldrsb.w	r3, [r3]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	4613      	mov	r3, r2
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	1a9b      	subs	r3, r3, r2
 8001844:	4a82      	ldr	r2, [pc, #520]	; (8001a50 <main+0xbd4>)
 8001846:	4413      	add	r3, r2
 8001848:	4a84      	ldr	r2, [pc, #528]	; (8001a5c <main+0xbe0>)
 800184a:	2111      	movs	r1, #17
 800184c:	487a      	ldr	r0, [pc, #488]	; (8001a38 <main+0xbbc>)
 800184e:	f00a fcd5 	bl	800c1fc <sniprintf>
				 LCDTopQueued = 1; //signal that we need to update the LCD
 8001852:	4b7b      	ldr	r3, [pc, #492]	; (8001a40 <main+0xbc4>)
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
				 LCDBottomQueued = 1;
 8001858:	4b7a      	ldr	r3, [pc, #488]	; (8001a44 <main+0xbc8>)
 800185a:	2201      	movs	r2, #1
 800185c:	701a      	strb	r2, [r3, #0]
			 break;
 800185e:	e054      	b.n	800190a <main+0xa8e>

		 case ParaSet: //save parameter and return to the SubMenu

			 status = SubMenu;
 8001860:	4b79      	ldr	r3, [pc, #484]	; (8001a48 <main+0xbcc>)
 8001862:	2202      	movs	r2, #2
 8001864:	701a      	strb	r2, [r3, #0]

			 EEPROMWriteParameter(*(parameterEAddrs[subMenuSelected]+parameterSelected), *(*(parameters[subMenuSelected]+parameterSelected)));
 8001866:	4b6e      	ldr	r3, [pc, #440]	; (8001a20 <main+0xba4>)
 8001868:	f993 3000 	ldrsb.w	r3, [r3]
 800186c:	461a      	mov	r2, r3
 800186e:	4b7c      	ldr	r3, [pc, #496]	; (8001a60 <main+0xbe4>)
 8001870:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001874:	4b6c      	ldr	r3, [pc, #432]	; (8001a28 <main+0xbac>)
 8001876:	f993 3000 	ldrsb.w	r3, [r3]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	8818      	ldrh	r0, [r3, #0]
 8001880:	4b67      	ldr	r3, [pc, #412]	; (8001a20 <main+0xba4>)
 8001882:	f993 3000 	ldrsb.w	r3, [r3]
 8001886:	461a      	mov	r2, r3
 8001888:	4b66      	ldr	r3, [pc, #408]	; (8001a24 <main+0xba8>)
 800188a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800188e:	4b66      	ldr	r3, [pc, #408]	; (8001a28 <main+0xbac>)
 8001890:	f993 3000 	ldrsb.w	r3, [r3]
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f993 3000 	ldrsb.w	r3, [r3]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7fe fcf9 	bl	8000298 <EEPROMWriteParameter>


			 snprintf(LCDQueueTop, 17, "\x7E%s", (*(subMenus[subMenuSelected]+parameterSelected)));
 80018a6:	4b5e      	ldr	r3, [pc, #376]	; (8001a20 <main+0xba4>)
 80018a8:	f993 3000 	ldrsb.w	r3, [r3]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b6d      	ldr	r3, [pc, #436]	; (8001a64 <main+0xbe8>)
 80018b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80018b4:	4b5c      	ldr	r3, [pc, #368]	; (8001a28 <main+0xbac>)
 80018b6:	f993 3000 	ldrsb.w	r3, [r3]
 80018ba:	4619      	mov	r1, r3
 80018bc:	460b      	mov	r3, r1
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	1a5b      	subs	r3, r3, r1
 80018c2:	4413      	add	r3, r2
 80018c4:	4a63      	ldr	r2, [pc, #396]	; (8001a54 <main+0xbd8>)
 80018c6:	2111      	movs	r1, #17
 80018c8:	4863      	ldr	r0, [pc, #396]	; (8001a58 <main+0xbdc>)
 80018ca:	f00a fc97 	bl	800c1fc <sniprintf>
			 snprintf(LCDQueueBottom, 17, " %s", (*(subMenus[subMenuSelected]+parameterSelected+1)));
 80018ce:	4b54      	ldr	r3, [pc, #336]	; (8001a20 <main+0xba4>)
 80018d0:	f993 3000 	ldrsb.w	r3, [r3]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b63      	ldr	r3, [pc, #396]	; (8001a64 <main+0xbe8>)
 80018d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80018dc:	4b52      	ldr	r3, [pc, #328]	; (8001a28 <main+0xbac>)
 80018de:	f993 3000 	ldrsb.w	r3, [r3]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	4613      	mov	r3, r2
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	440b      	add	r3, r1
 80018ec:	4a5b      	ldr	r2, [pc, #364]	; (8001a5c <main+0xbe0>)
 80018ee:	2111      	movs	r1, #17
 80018f0:	4851      	ldr	r0, [pc, #324]	; (8001a38 <main+0xbbc>)
 80018f2:	f00a fc83 	bl	800c1fc <sniprintf>
			 LCDTopQueued = 1; //signal that we need to update the LCD
 80018f6:	4b52      	ldr	r3, [pc, #328]	; (8001a40 <main+0xbc4>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
			 LCDBottomQueued = 1;
 80018fc:	4b51      	ldr	r3, [pc, #324]	; (8001a44 <main+0xbc8>)
 80018fe:	2201      	movs	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]


			 break;
 8001902:	e002      	b.n	800190a <main+0xa8e>


		 }


	 }
 8001904:	bf00      	nop
 8001906:	e000      	b.n	800190a <main+0xa8e>
			 break;
 8001908:	bf00      	nop
	 lastButtonState = dOutput;
 800190a:	4b57      	ldr	r3, [pc, #348]	; (8001a68 <main+0xbec>)
 800190c:	f993 3000 	ldrsb.w	r3, [r3]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b56      	ldr	r3, [pc, #344]	; (8001a6c <main+0xbf0>)
 8001914:	701a      	strb	r2, [r3, #0]
	 /* end button handler */



	 /* begin control encoder rotated handler */
	 if(((encoderValues[4] - lastEncoderValues[4]) >= 2) | ((lastEncoderValues[4] - encoderValues[4]) >= 2)){ //control encoder has been rotated
 8001916:	4b56      	ldr	r3, [pc, #344]	; (8001a70 <main+0xbf4>)
 8001918:	691a      	ldr	r2, [r3, #16]
 800191a:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <main+0xbf8>)
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b01      	cmp	r3, #1
 8001922:	bfcc      	ite	gt
 8001924:	2301      	movgt	r3, #1
 8001926:	2300      	movle	r3, #0
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4b52      	ldr	r3, [pc, #328]	; (8001a74 <main+0xbf8>)
 800192c:	6919      	ldr	r1, [r3, #16]
 800192e:	4b50      	ldr	r3, [pc, #320]	; (8001a70 <main+0xbf4>)
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	1acb      	subs	r3, r1, r3
 8001934:	2b01      	cmp	r3, #1
 8001936:	bfcc      	ite	gt
 8001938:	2301      	movgt	r3, #1
 800193a:	2300      	movle	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8275 	beq.w	8001e32 <main+0xfb6>

		 int8_t increment = encoderValues[4]>lastEncoderValues[4] ? 1 : -1; //this control encoder is 2 counts per indent
 8001948:	4b49      	ldr	r3, [pc, #292]	; (8001a70 <main+0xbf4>)
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	4b49      	ldr	r3, [pc, #292]	; (8001a74 <main+0xbf8>)
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	429a      	cmp	r2, r3
 8001952:	dd01      	ble.n	8001958 <main+0xadc>
 8001954:	2301      	movs	r3, #1
 8001956:	e001      	b.n	800195c <main+0xae0>
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
 800195c:	73bb      	strb	r3, [r7, #14]

		 switch (status){
 800195e:	4b3a      	ldr	r3, [pc, #232]	; (8001a48 <main+0xbcc>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b02      	cmp	r3, #2
 8001964:	f000 8088 	beq.w	8001a78 <main+0xbfc>
 8001968:	2b03      	cmp	r3, #3
 800196a:	f000 80fe 	beq.w	8001b6a <main+0xcee>
 800196e:	2b01      	cmp	r3, #1
 8001970:	d000      	beq.n	8001974 <main+0xaf8>
			 }
			 LCDBottomQueued = 1;
			 break;

		 default:
			 break;
 8001972:	e25a      	b.n	8001e2a <main+0xfae>
			 clampedIncrement(&menuItemSelected, increment, 0, MENU_SIZE);
 8001974:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001978:	2305      	movs	r3, #5
 800197a:	2200      	movs	r2, #0
 800197c:	4833      	ldr	r0, [pc, #204]	; (8001a4c <main+0xbd0>)
 800197e:	f7ff fa4b 	bl	8000e18 <clampedIncrement>
			 if(increment > 0 && menuItemSelected != 0){ //we advance in the menu, pointer should be in second row
 8001982:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001986:	2b00      	cmp	r3, #0
 8001988:	dd21      	ble.n	80019ce <main+0xb52>
 800198a:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <main+0xbd0>)
 800198c:	f993 3000 	ldrsb.w	r3, [r3]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01c      	beq.n	80019ce <main+0xb52>
				 snprintf(LCDQueueTop, 17, " %s", menuItems[menuItemSelected-1]);
 8001994:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <main+0xbd0>)
 8001996:	f993 3000 	ldrsb.w	r3, [r3]
 800199a:	1e5a      	subs	r2, r3, #1
 800199c:	4613      	mov	r3, r2
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	4a2b      	ldr	r2, [pc, #172]	; (8001a50 <main+0xbd4>)
 80019a4:	4413      	add	r3, r2
 80019a6:	4a2d      	ldr	r2, [pc, #180]	; (8001a5c <main+0xbe0>)
 80019a8:	2111      	movs	r1, #17
 80019aa:	482b      	ldr	r0, [pc, #172]	; (8001a58 <main+0xbdc>)
 80019ac:	f00a fc26 	bl	800c1fc <sniprintf>
				 snprintf(LCDQueueBottom, 17, "\x7E%s", menuItems[menuItemSelected]);
 80019b0:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <main+0xbd0>)
 80019b2:	f993 3000 	ldrsb.w	r3, [r3]
 80019b6:	461a      	mov	r2, r3
 80019b8:	4613      	mov	r3, r2
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	4a24      	ldr	r2, [pc, #144]	; (8001a50 <main+0xbd4>)
 80019c0:	4413      	add	r3, r2
 80019c2:	4a24      	ldr	r2, [pc, #144]	; (8001a54 <main+0xbd8>)
 80019c4:	2111      	movs	r1, #17
 80019c6:	481c      	ldr	r0, [pc, #112]	; (8001a38 <main+0xbbc>)
 80019c8:	f00a fc18 	bl	800c1fc <sniprintf>
 80019cc:	e020      	b.n	8001a10 <main+0xb94>
			 else if(menuItemSelected != MENU_SIZE){
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <main+0xbd0>)
 80019d0:	f993 3000 	ldrsb.w	r3, [r3]
 80019d4:	2b05      	cmp	r3, #5
 80019d6:	d01b      	beq.n	8001a10 <main+0xb94>
				 snprintf(LCDQueueTop, 17, "\x7E%s", menuItems[menuItemSelected]);
 80019d8:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <main+0xbd0>)
 80019da:	f993 3000 	ldrsb.w	r3, [r3]
 80019de:	461a      	mov	r2, r3
 80019e0:	4613      	mov	r3, r2
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	4a1a      	ldr	r2, [pc, #104]	; (8001a50 <main+0xbd4>)
 80019e8:	4413      	add	r3, r2
 80019ea:	4a1a      	ldr	r2, [pc, #104]	; (8001a54 <main+0xbd8>)
 80019ec:	2111      	movs	r1, #17
 80019ee:	481a      	ldr	r0, [pc, #104]	; (8001a58 <main+0xbdc>)
 80019f0:	f00a fc04 	bl	800c1fc <sniprintf>
				 snprintf(LCDQueueBottom, 17, " %s", menuItems[menuItemSelected+1]);
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <main+0xbd0>)
 80019f6:	f993 3000 	ldrsb.w	r3, [r3]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	4613      	mov	r3, r2
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <main+0xbd4>)
 8001a04:	4413      	add	r3, r2
 8001a06:	4a15      	ldr	r2, [pc, #84]	; (8001a5c <main+0xbe0>)
 8001a08:	2111      	movs	r1, #17
 8001a0a:	480b      	ldr	r0, [pc, #44]	; (8001a38 <main+0xbbc>)
 8001a0c:	f00a fbf6 	bl	800c1fc <sniprintf>
			 LCDTopQueued = 1; //signal that we need to update the LCD
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <main+0xbc4>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
			 LCDBottomQueued = 1;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <main+0xbc8>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
			 break;
 8001a1c:	e205      	b.n	8001e2a <main+0xfae>
 8001a1e:	bf00      	nop
 8001a20:	20000bac 	.word	0x20000bac
 8001a24:	200000cc 	.word	0x200000cc
 8001a28:	20000d31 	.word	0x20000d31
 8001a2c:	2aaaaaab 	.word	0x2aaaaaab
 8001a30:	0800cd74 	.word	0x0800cd74
 8001a34:	0800ca88 	.word	0x0800ca88
 8001a38:	20000d20 	.word	0x20000d20
 8001a3c:	0800ca90 	.word	0x0800ca90
 8001a40:	20000d32 	.word	0x20000d32
 8001a44:	20000a64 	.word	0x20000a64
 8001a48:	20000349 	.word	0x20000349
 8001a4c:	20000b60 	.word	0x20000b60
 8001a50:	0800cb00 	.word	0x0800cb00
 8001a54:	0800ca68 	.word	0x0800ca68
 8001a58:	20000cc4 	.word	0x20000cc4
 8001a5c:	0800ca6c 	.word	0x0800ca6c
 8001a60:	200000ec 	.word	0x200000ec
 8001a64:	20000018 	.word	0x20000018
 8001a68:	20000399 	.word	0x20000399
 8001a6c:	20000380 	.word	0x20000380
 8001a70:	20000358 	.word	0x20000358
 8001a74:	2000036c 	.word	0x2000036c
			 clampedIncrement(&parameterSelected, increment, 0, subMenuSizes[subMenuSelected]);
 8001a78:	4bba      	ldr	r3, [pc, #744]	; (8001d64 <main+0xee8>)
 8001a7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4bb9      	ldr	r3, [pc, #740]	; (8001d68 <main+0xeec>)
 8001a82:	569b      	ldrsb	r3, [r3, r2]
 8001a84:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	48b8      	ldr	r0, [pc, #736]	; (8001d6c <main+0xef0>)
 8001a8c:	f7ff f9c4 	bl	8000e18 <clampedIncrement>
			 if(increment > 0 && parameterSelected != 0){ //we advance in the menu, pointer should be in second row
 8001a90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	dd2e      	ble.n	8001af6 <main+0xc7a>
 8001a98:	4bb4      	ldr	r3, [pc, #720]	; (8001d6c <main+0xef0>)
 8001a9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d029      	beq.n	8001af6 <main+0xc7a>
				 snprintf(LCDQueueTop, 17, " %s", (*(subMenus[subMenuSelected]+parameterSelected-1)));
 8001aa2:	4bb0      	ldr	r3, [pc, #704]	; (8001d64 <main+0xee8>)
 8001aa4:	f993 3000 	ldrsb.w	r3, [r3]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4bb1      	ldr	r3, [pc, #708]	; (8001d70 <main+0xef4>)
 8001aac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ab0:	4bae      	ldr	r3, [pc, #696]	; (8001d6c <main+0xef0>)
 8001ab2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	460b      	mov	r3, r1
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	1a5b      	subs	r3, r3, r1
 8001abe:	3b0f      	subs	r3, #15
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4aac      	ldr	r2, [pc, #688]	; (8001d74 <main+0xef8>)
 8001ac4:	2111      	movs	r1, #17
 8001ac6:	48ac      	ldr	r0, [pc, #688]	; (8001d78 <main+0xefc>)
 8001ac8:	f00a fb98 	bl	800c1fc <sniprintf>
				 snprintf(LCDQueueBottom, 17, "\x7E%s", (*(subMenus[subMenuSelected]+parameterSelected)));
 8001acc:	4ba5      	ldr	r3, [pc, #660]	; (8001d64 <main+0xee8>)
 8001ace:	f993 3000 	ldrsb.w	r3, [r3]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4ba6      	ldr	r3, [pc, #664]	; (8001d70 <main+0xef4>)
 8001ad6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ada:	4ba4      	ldr	r3, [pc, #656]	; (8001d6c <main+0xef0>)
 8001adc:	f993 3000 	ldrsb.w	r3, [r3]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	1a5b      	subs	r3, r3, r1
 8001ae8:	4413      	add	r3, r2
 8001aea:	4aa4      	ldr	r2, [pc, #656]	; (8001d7c <main+0xf00>)
 8001aec:	2111      	movs	r1, #17
 8001aee:	48a4      	ldr	r0, [pc, #656]	; (8001d80 <main+0xf04>)
 8001af0:	f00a fb84 	bl	800c1fc <sniprintf>
 8001af4:	e032      	b.n	8001b5c <main+0xce0>
			 else if(parameterSelected != subMenuSizes[subMenuSelected]){
 8001af6:	4b9b      	ldr	r3, [pc, #620]	; (8001d64 <main+0xee8>)
 8001af8:	f993 3000 	ldrsb.w	r3, [r3]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b9a      	ldr	r3, [pc, #616]	; (8001d68 <main+0xeec>)
 8001b00:	569a      	ldrsb	r2, [r3, r2]
 8001b02:	4b9a      	ldr	r3, [pc, #616]	; (8001d6c <main+0xef0>)
 8001b04:	f993 3000 	ldrsb.w	r3, [r3]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d027      	beq.n	8001b5c <main+0xce0>
				 snprintf(LCDQueueTop, 17, "\x7E%s", (*(subMenus[subMenuSelected]+parameterSelected)));
 8001b0c:	4b95      	ldr	r3, [pc, #596]	; (8001d64 <main+0xee8>)
 8001b0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b12:	461a      	mov	r2, r3
 8001b14:	4b96      	ldr	r3, [pc, #600]	; (8001d70 <main+0xef4>)
 8001b16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001b1a:	4b94      	ldr	r3, [pc, #592]	; (8001d6c <main+0xef0>)
 8001b1c:	f993 3000 	ldrsb.w	r3, [r3]
 8001b20:	4619      	mov	r1, r3
 8001b22:	460b      	mov	r3, r1
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	1a5b      	subs	r3, r3, r1
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a94      	ldr	r2, [pc, #592]	; (8001d7c <main+0xf00>)
 8001b2c:	2111      	movs	r1, #17
 8001b2e:	4892      	ldr	r0, [pc, #584]	; (8001d78 <main+0xefc>)
 8001b30:	f00a fb64 	bl	800c1fc <sniprintf>
				 snprintf(LCDQueueBottom, 17, " %s", (*(subMenus[subMenuSelected]+parameterSelected+1)));
 8001b34:	4b8b      	ldr	r3, [pc, #556]	; (8001d64 <main+0xee8>)
 8001b36:	f993 3000 	ldrsb.w	r3, [r3]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b8c      	ldr	r3, [pc, #560]	; (8001d70 <main+0xef4>)
 8001b3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001b42:	4b8a      	ldr	r3, [pc, #552]	; (8001d6c <main+0xef0>)
 8001b44:	f993 3000 	ldrsb.w	r3, [r3]
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	1a9b      	subs	r3, r3, r2
 8001b50:	440b      	add	r3, r1
 8001b52:	4a88      	ldr	r2, [pc, #544]	; (8001d74 <main+0xef8>)
 8001b54:	2111      	movs	r1, #17
 8001b56:	488a      	ldr	r0, [pc, #552]	; (8001d80 <main+0xf04>)
 8001b58:	f00a fb50 	bl	800c1fc <sniprintf>
			 LCDTopQueued = 1; //signal that we need to update the LCD
 8001b5c:	4b89      	ldr	r3, [pc, #548]	; (8001d84 <main+0xf08>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
			 LCDBottomQueued = 1;
 8001b62:	4b89      	ldr	r3, [pc, #548]	; (8001d88 <main+0xf0c>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]
			 break;
 8001b68:	e15f      	b.n	8001e2a <main+0xfae>
			 clampedIncrement((*(parameters[subMenuSelected]+parameterSelected)), increment, (*(parameterLBs[subMenuSelected]+parameterSelected)), (*(parameterUBs[subMenuSelected]+parameterSelected)));
 8001b6a:	4b7e      	ldr	r3, [pc, #504]	; (8001d64 <main+0xee8>)
 8001b6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b86      	ldr	r3, [pc, #536]	; (8001d8c <main+0xf10>)
 8001b74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001b78:	4b7c      	ldr	r3, [pc, #496]	; (8001d6c <main+0xef0>)
 8001b7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	4b77      	ldr	r3, [pc, #476]	; (8001d64 <main+0xee8>)
 8001b86:	f993 3000 	ldrsb.w	r3, [r3]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b80      	ldr	r3, [pc, #512]	; (8001d90 <main+0xf14>)
 8001b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b92:	4a76      	ldr	r2, [pc, #472]	; (8001d6c <main+0xef0>)
 8001b94:	f992 2000 	ldrsb.w	r2, [r2]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f993 4000 	ldrsb.w	r4, [r3]
 8001b9e:	4b71      	ldr	r3, [pc, #452]	; (8001d64 <main+0xee8>)
 8001ba0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b7b      	ldr	r3, [pc, #492]	; (8001d94 <main+0xf18>)
 8001ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bac:	4a6f      	ldr	r2, [pc, #444]	; (8001d6c <main+0xef0>)
 8001bae:	f992 2000 	ldrsb.w	r2, [r2]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f993 3000 	ldrsb.w	r3, [r3]
 8001bb8:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001bbc:	4622      	mov	r2, r4
 8001bbe:	f7ff f92b 	bl	8000e18 <clampedIncrement>
			 if((subMenuSelected == 2) | (subMenuSelected == 3 && parameterSelected == 0)){
 8001bc2:	4b68      	ldr	r3, [pc, #416]	; (8001d64 <main+0xee8>)
 8001bc4:	f993 3000 	ldrsb.w	r3, [r3]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	bf0c      	ite	eq
 8001bcc:	2301      	moveq	r3, #1
 8001bce:	2300      	movne	r3, #0
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b64      	ldr	r3, [pc, #400]	; (8001d64 <main+0xee8>)
 8001bd4:	f993 3000 	ldrsb.w	r3, [r3]
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d106      	bne.n	8001bea <main+0xd6e>
 8001bdc:	4b63      	ldr	r3, [pc, #396]	; (8001d6c <main+0xef0>)
 8001bde:	f993 3000 	ldrsb.w	r3, [r3]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <main+0xd6e>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <main+0xd70>
 8001bea:	2300      	movs	r3, #0
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d041      	beq.n	8001c7e <main+0xe02>
				 snprintf(LCDQueueBottom, 17, "%s%d", noteNames[(*(*(parameters[subMenuSelected]+parameterSelected))) % 12], (int8_t)(((*(*(parameters[subMenuSelected]+parameterSelected))) / 12) - 1)); //print the NOTENAME of the parameter under question
 8001bfa:	4b5a      	ldr	r3, [pc, #360]	; (8001d64 <main+0xee8>)
 8001bfc:	f993 3000 	ldrsb.w	r3, [r3]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b62      	ldr	r3, [pc, #392]	; (8001d8c <main+0xf10>)
 8001c04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001c08:	4b58      	ldr	r3, [pc, #352]	; (8001d6c <main+0xef0>)
 8001c0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f993 2000 	ldrsb.w	r2, [r3]
 8001c18:	4b5f      	ldr	r3, [pc, #380]	; (8001d98 <main+0xf1c>)
 8001c1a:	fb83 1302 	smull	r1, r3, r3, r2
 8001c1e:	1059      	asrs	r1, r3, #1
 8001c20:	17d3      	asrs	r3, r2, #31
 8001c22:	1ac9      	subs	r1, r1, r3
 8001c24:	460b      	mov	r3, r1
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	440b      	add	r3, r1
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	b25b      	sxtb	r3, r3
 8001c30:	461a      	mov	r2, r3
 8001c32:	4613      	mov	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	4a58      	ldr	r2, [pc, #352]	; (8001d9c <main+0xf20>)
 8001c3a:	1899      	adds	r1, r3, r2
 8001c3c:	4b49      	ldr	r3, [pc, #292]	; (8001d64 <main+0xee8>)
 8001c3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b51      	ldr	r3, [pc, #324]	; (8001d8c <main+0xf10>)
 8001c46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001c4a:	4b48      	ldr	r3, [pc, #288]	; (8001d6c <main+0xef0>)
 8001c4c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f993 3000 	ldrsb.w	r3, [r3]
 8001c5a:	4a4f      	ldr	r2, [pc, #316]	; (8001d98 <main+0xf1c>)
 8001c5c:	fb82 0203 	smull	r0, r2, r2, r3
 8001c60:	1052      	asrs	r2, r2, #1
 8001c62:	17db      	asrs	r3, r3, #31
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	b25b      	sxtb	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	b25b      	sxtb	r3, r3
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	460b      	mov	r3, r1
 8001c74:	4a4a      	ldr	r2, [pc, #296]	; (8001da0 <main+0xf24>)
 8001c76:	2111      	movs	r1, #17
 8001c78:	4841      	ldr	r0, [pc, #260]	; (8001d80 <main+0xf04>)
 8001c7a:	f00a fabf 	bl	800c1fc <sniprintf>
			 if(subMenuSelected == 3 && parameterSelected == 0){
 8001c7e:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <main+0xee8>)
 8001c80:	f993 3000 	ldrsb.w	r3, [r3]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	f040 80b8 	bne.w	8001dfa <main+0xf7e>
 8001c8a:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <main+0xef0>)
 8001c8c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f040 80b2 	bne.w	8001dfa <main+0xf7e>
				 for(int8_t i = 0; i < 4; i++){
 8001c96:	2300      	movs	r3, #0
 8001c98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001c9c:	e011      	b.n	8001cc2 <main+0xe46>
					 LEDMatrix[i] &= 0xf; //clear all the red channels
 8001c9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001ca2:	4a40      	ldr	r2, [pc, #256]	; (8001da4 <main+0xf28>)
 8001ca4:	5cd2      	ldrb	r2, [r2, r3]
 8001ca6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001caa:	f002 020f 	and.w	r2, r2, #15
 8001cae:	b2d1      	uxtb	r1, r2
 8001cb0:	4a3c      	ldr	r2, [pc, #240]	; (8001da4 <main+0xf28>)
 8001cb2:	54d1      	strb	r1, [r2, r3]
				 for(int8_t i = 0; i < 4; i++){
 8001cb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001cc2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	dde9      	ble.n	8001c9e <main+0xe22>
				 for(int8_t i = 0; i < 16; i++){ //we have 16 keys
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001cd0:	e040      	b.n	8001d54 <main+0xed8>
					 int8_t row = 3-(i>>2);
 8001cd2:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8001cd6:	109b      	asrs	r3, r3, #2
 8001cd8:	b25b      	sxtb	r3, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f1c3 0303 	rsb	r3, r3, #3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	737b      	strb	r3, [r7, #13]
					 int8_t col = (i%4);
 8001ce4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8001ce8:	425a      	negs	r2, r3
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	f002 0203 	and.w	r2, r2, #3
 8001cf2:	bf58      	it	pl
 8001cf4:	4253      	negpl	r3, r2
 8001cf6:	733b      	strb	r3, [r7, #12]
					 if((MidiNoteOffset+i)%12 == 0){ //this key is a C
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <main+0xf2c>)
 8001cfa:	f993 3000 	ldrsb.w	r3, [r3]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8001d04:	18d1      	adds	r1, r2, r3
 8001d06:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <main+0xf1c>)
 8001d08:	fb83 2301 	smull	r2, r3, r3, r1
 8001d0c:	105a      	asrs	r2, r3, #1
 8001d0e:	17cb      	asrs	r3, r1, #31
 8001d10:	1ad2      	subs	r2, r2, r3
 8001d12:	4613      	mov	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	1aca      	subs	r2, r1, r3
 8001d1c:	2a00      	cmp	r2, #0
 8001d1e:	d112      	bne.n	8001d46 <main+0xeca>
						 LEDMatrix[row] |= (1<<(4+col));
 8001d20:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d24:	4a1f      	ldr	r2, [pc, #124]	; (8001da4 <main+0xf28>)
 8001d26:	5cd3      	ldrb	r3, [r2, r3]
 8001d28:	b25a      	sxtb	r2, r3
 8001d2a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001d2e:	3304      	adds	r3, #4
 8001d30:	2101      	movs	r1, #1
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	b25b      	sxtb	r3, r3
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	b25a      	sxtb	r2, r3
 8001d3c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d40:	b2d1      	uxtb	r1, r2
 8001d42:	4a18      	ldr	r2, [pc, #96]	; (8001da4 <main+0xf28>)
 8001d44:	54d1      	strb	r1, [r2, r3]
				 for(int8_t i = 0; i < 16; i++){ //we have 16 keys
 8001d46:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001d54:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8001d58:	2b0f      	cmp	r3, #15
 8001d5a:	ddba      	ble.n	8001cd2 <main+0xe56>
				 for(int i = 0; i < 4; i++){ //function to drive the LED's
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d60:	e047      	b.n	8001df2 <main+0xf76>
 8001d62:	bf00      	nop
 8001d64:	20000bac 	.word	0x20000bac
 8001d68:	0800cccc 	.word	0x0800cccc
 8001d6c:	20000d31 	.word	0x20000d31
 8001d70:	20000018 	.word	0x20000018
 8001d74:	0800ca6c 	.word	0x0800ca6c
 8001d78:	20000cc4 	.word	0x20000cc4
 8001d7c:	0800ca68 	.word	0x0800ca68
 8001d80:	20000d20 	.word	0x20000d20
 8001d84:	20000d32 	.word	0x20000d32
 8001d88:	20000a64 	.word	0x20000a64
 8001d8c:	200000cc 	.word	0x200000cc
 8001d90:	20000100 	.word	0x20000100
 8001d94:	20000114 	.word	0x20000114
 8001d98:	2aaaaaab 	.word	0x2aaaaaab
 8001d9c:	0800cd74 	.word	0x0800cd74
 8001da0:	0800ca88 	.word	0x0800ca88
 8001da4:	20000344 	.word	0x20000344
 8001da8:	20000000 	.word	0x20000000
					 LEDMatrixBuffer[i*4] = 0b1111; //clear all pins first to prevent ghosting
 8001dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4a9b      	ldr	r2, [pc, #620]	; (8002020 <main+0x11a4>)
 8001db2:	210f      	movs	r1, #15
 8001db4:	54d1      	strb	r1, [r2, r3]
					 LEDMatrixBuffer[i*4+1] = 0x00;
 8001db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	3301      	adds	r3, #1
 8001dbc:	4a98      	ldr	r2, [pc, #608]	; (8002020 <main+0x11a4>)
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	54d1      	strb	r1, [r2, r3]
					 LEDMatrixBuffer[i*4+2] = ~(1<<i);
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	43d2      	mvns	r2, r2
 8001dd4:	b2d1      	uxtb	r1, r2
 8001dd6:	4a92      	ldr	r2, [pc, #584]	; (8002020 <main+0x11a4>)
 8001dd8:	54d1      	strb	r1, [r2, r3]
					 LEDMatrixBuffer[i*4+3] = LEDMatrix[i];
 8001dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	3303      	adds	r3, #3
 8001de0:	4990      	ldr	r1, [pc, #576]	; (8002024 <main+0x11a8>)
 8001de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001de4:	440a      	add	r2, r1
 8001de6:	7811      	ldrb	r1, [r2, #0]
 8001de8:	4a8d      	ldr	r2, [pc, #564]	; (8002020 <main+0x11a4>)
 8001dea:	54d1      	strb	r1, [r2, r3]
				 for(int i = 0; i < 4; i++){ //function to drive the LED's
 8001dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dee:	3301      	adds	r3, #1
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	ddd9      	ble.n	8001dac <main+0xf30>
 8001df8:	e013      	b.n	8001e22 <main+0xfa6>
				 snprintf(LCDQueueBottom, 17, "%d", (*(*(parameters[subMenuSelected]+parameterSelected))));//print the current value of the parameter under question
 8001dfa:	4b8b      	ldr	r3, [pc, #556]	; (8002028 <main+0x11ac>)
 8001dfc:	f993 3000 	ldrsb.w	r3, [r3]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b8a      	ldr	r3, [pc, #552]	; (800202c <main+0x11b0>)
 8001e04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e08:	4b89      	ldr	r3, [pc, #548]	; (8002030 <main+0x11b4>)
 8001e0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f993 3000 	ldrsb.w	r3, [r3]
 8001e18:	4a86      	ldr	r2, [pc, #536]	; (8002034 <main+0x11b8>)
 8001e1a:	2111      	movs	r1, #17
 8001e1c:	4886      	ldr	r0, [pc, #536]	; (8002038 <main+0x11bc>)
 8001e1e:	f00a f9ed 	bl	800c1fc <sniprintf>
			 LCDBottomQueued = 1;
 8001e22:	4b86      	ldr	r3, [pc, #536]	; (800203c <main+0x11c0>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]
			 break;
 8001e28:	bf00      	nop


		 }


		 lastEncoderValues[4] = encoderValues[4];
 8001e2a:	4b85      	ldr	r3, [pc, #532]	; (8002040 <main+0x11c4>)
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	4a85      	ldr	r2, [pc, #532]	; (8002044 <main+0x11c8>)
 8001e30:	6113      	str	r3, [r2, #16]
	 /* end control encoder rotated handler */



	 /*begin CC encoder handler*/
	  for(int i = 0; i < 4; i++){ //send encoder CC Values
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
 8001e36:	e071      	b.n	8001f1c <main+0x10a0>

		  if(encoderValues[i] != lastEncoderValues[i]){ //encoder was rotated
 8001e38:	4a81      	ldr	r2, [pc, #516]	; (8002040 <main+0x11c4>)
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e40:	4980      	ldr	r1, [pc, #512]	; (8002044 <main+0x11c8>)
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d064      	beq.n	8001f16 <main+0x109a>

			  int8_t increment = encoderValues[i] > lastEncoderValues[i] ? 1 : -1;
 8001e4c:	4a7c      	ldr	r2, [pc, #496]	; (8002040 <main+0x11c4>)
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e54:	497b      	ldr	r1, [pc, #492]	; (8002044 <main+0x11c8>)
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	dd01      	ble.n	8001e64 <main+0xfe8>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e001      	b.n	8001e68 <main+0xfec>
 8001e64:	f04f 33ff 	mov.w	r3, #4294967295
 8001e68:	70fb      	strb	r3, [r7, #3]
			  clampedIncrement(&MidiCCValues[MidiCCEncoderLUT[i]], increment*EncoderSpeed[i], 0, 127);
 8001e6a:	4a77      	ldr	r2, [pc, #476]	; (8002048 <main+0x11cc>)
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	4413      	add	r3, r2
 8001e70:	f993 3000 	ldrsb.w	r3, [r3]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b75      	ldr	r3, [pc, #468]	; (800204c <main+0x11d0>)
 8001e78:	18d0      	adds	r0, r2, r3
 8001e7a:	4a75      	ldr	r2, [pc, #468]	; (8002050 <main+0x11d4>)
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	4413      	add	r3, r2
 8001e80:	f993 3000 	ldrsb.w	r3, [r3]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	78fa      	ldrb	r2, [r7, #3]
 8001e88:	fb02 f303 	mul.w	r3, r2, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	b259      	sxtb	r1, r3
 8001e90:	237f      	movs	r3, #127	; 0x7f
 8001e92:	2200      	movs	r2, #0
 8001e94:	f7fe ffc0 	bl	8000e18 <clampedIncrement>
			  MidiCC(MidiChannel, MidiCCEncoderLUT[i], MidiCCValues[MidiCCEncoderLUT[i]]);
 8001e98:	4b6e      	ldr	r3, [pc, #440]	; (8002054 <main+0x11d8>)
 8001e9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e9e:	b2d8      	uxtb	r0, r3
 8001ea0:	4a69      	ldr	r2, [pc, #420]	; (8002048 <main+0x11cc>)
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f993 3000 	ldrsb.w	r3, [r3]
 8001eaa:	b2d9      	uxtb	r1, r3
 8001eac:	4a66      	ldr	r2, [pc, #408]	; (8002048 <main+0x11cc>)
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f993 3000 	ldrsb.w	r3, [r3]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b64      	ldr	r3, [pc, #400]	; (800204c <main+0x11d0>)
 8001eba:	569b      	ldrsb	r3, [r3, r2]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f7fe fee2 	bl	8000c88 <MidiCC>

			  if(status == Status){
 8001ec4:	4b64      	ldr	r3, [pc, #400]	; (8002058 <main+0x11dc>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d11c      	bne.n	8001f06 <main+0x108a>
				  snprintf(LCDQueueTop, 17, "CC %d", MidiCCEncoderLUT[i]);
 8001ecc:	4a5e      	ldr	r2, [pc, #376]	; (8002048 <main+0x11cc>)
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ed6:	4a61      	ldr	r2, [pc, #388]	; (800205c <main+0x11e0>)
 8001ed8:	2111      	movs	r1, #17
 8001eda:	4861      	ldr	r0, [pc, #388]	; (8002060 <main+0x11e4>)
 8001edc:	f00a f98e 	bl	800c1fc <sniprintf>
				  LCDTopQueued = 1;
 8001ee0:	4b60      	ldr	r3, [pc, #384]	; (8002064 <main+0x11e8>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
				  snprintf(LCDQueueBottom, 17, "%-16d", MidiCCValues[MidiCCEncoderLUT[i]]);
 8001ee6:	4a58      	ldr	r2, [pc, #352]	; (8002048 <main+0x11cc>)
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	4413      	add	r3, r2
 8001eec:	f993 3000 	ldrsb.w	r3, [r3]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b56      	ldr	r3, [pc, #344]	; (800204c <main+0x11d0>)
 8001ef4:	569b      	ldrsb	r3, [r3, r2]
 8001ef6:	4a5c      	ldr	r2, [pc, #368]	; (8002068 <main+0x11ec>)
 8001ef8:	2111      	movs	r1, #17
 8001efa:	484f      	ldr	r0, [pc, #316]	; (8002038 <main+0x11bc>)
 8001efc:	f00a f97e 	bl	800c1fc <sniprintf>
				  LCDBottomQueued = 1;
 8001f00:	4b4e      	ldr	r3, [pc, #312]	; (800203c <main+0x11c0>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
			  }

			  lastEncoderValues[i] = encoderValues[i];
 8001f06:	4a4e      	ldr	r2, [pc, #312]	; (8002040 <main+0x11c4>)
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f0e:	494d      	ldr	r1, [pc, #308]	; (8002044 <main+0x11c8>)
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int i = 0; i < 4; i++){ //send encoder CC Values
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	3301      	adds	r3, #1
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	dd8a      	ble.n	8001e38 <main+0xfbc>

	  }
	  /*end CC encoder handler*/

	  /*begin ADC handler*/
	  for(int j = 1; j < 4; j++){
 8001f22:	2301      	movs	r3, #1
 8001f24:	623b      	str	r3, [r7, #32]
 8001f26:	e075      	b.n	8002014 <main+0x1198>

		  int i = j-1;
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	60bb      	str	r3, [r7, #8]
		  int currentADC = ADC1ReadVal(j);
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe f90a 	bl	800014c <ADC1ReadVal>
 8001f38:	6078      	str	r0, [r7, #4]
		  //Note: lastFaderValues[i] is 7 bit
		  //Note: this is NOT division for signed ints, due to the sign bit in front
		   *
		   *
		   */
		  currentADC = movingAverage(inputBuffer[i], &sum[i], &oldestPos[i], NAverages, currentADC);
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	4a4b      	ldr	r2, [pc, #300]	; (800206c <main+0x11f0>)
 8001f40:	1898      	adds	r0, r3, r2
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4a4a      	ldr	r2, [pc, #296]	; (8002070 <main+0x11f4>)
 8001f48:	1899      	adds	r1, r3, r2
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4a49      	ldr	r2, [pc, #292]	; (8002074 <main+0x11f8>)
 8001f50:	441a      	add	r2, r3
 8001f52:	4b49      	ldr	r3, [pc, #292]	; (8002078 <main+0x11fc>)
 8001f54:	f993 3000 	ldrsb.w	r3, [r3]
 8001f58:	461c      	mov	r4, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	4623      	mov	r3, r4
 8001f60:	f7fe ff04 	bl	8000d6c <movingAverage>
 8001f64:	6078      	str	r0, [r7, #4]
		  currentADC = (currentADC >> 5) & 0x7f; //convert to 7 bit
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	115b      	asrs	r3, r3, #5
 8001f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f6e:	607b      	str	r3, [r7, #4]


		  if(lastFaderValues[i] != currentADC){ // this particular ADC Channel has been updated
 8001f70:	4a42      	ldr	r2, [pc, #264]	; (800207c <main+0x1200>)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d047      	beq.n	800200e <main+0x1192>

			  MidiCCValues[MidiCCFaderLUT[i]] = currentADC & 0x7f; //mask off only last 7 bits
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	b25b      	sxtb	r3, r3
 8001f82:	493f      	ldr	r1, [pc, #252]	; (8002080 <main+0x1204>)
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	440a      	add	r2, r1
 8001f88:	f992 2000 	ldrsb.w	r2, [r2]
 8001f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f90:	b259      	sxtb	r1, r3
 8001f92:	4b2e      	ldr	r3, [pc, #184]	; (800204c <main+0x11d0>)
 8001f94:	5499      	strb	r1, [r3, r2]

			  MidiCC(MidiChannel, MidiCCFaderLUT[i], MidiCCValues[MidiCCFaderLUT[i]]);
 8001f96:	4b2f      	ldr	r3, [pc, #188]	; (8002054 <main+0x11d8>)
 8001f98:	f993 3000 	ldrsb.w	r3, [r3]
 8001f9c:	b2d8      	uxtb	r0, r3
 8001f9e:	4a38      	ldr	r2, [pc, #224]	; (8002080 <main+0x1204>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f993 3000 	ldrsb.w	r3, [r3]
 8001fa8:	b2d9      	uxtb	r1, r3
 8001faa:	4a35      	ldr	r2, [pc, #212]	; (8002080 <main+0x1204>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f993 3000 	ldrsb.w	r3, [r3]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b25      	ldr	r3, [pc, #148]	; (800204c <main+0x11d0>)
 8001fb8:	569b      	ldrsb	r3, [r3, r2]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	f7fe fe63 	bl	8000c88 <MidiCC>

			  if(status == Status){
 8001fc2:	4b25      	ldr	r3, [pc, #148]	; (8002058 <main+0x11dc>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d11c      	bne.n	8002004 <main+0x1188>
				  snprintf(LCDQueueTop, 17, "CC %d", MidiCCFaderLUT[i]);
 8001fca:	4a2d      	ldr	r2, [pc, #180]	; (8002080 <main+0x1204>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f993 3000 	ldrsb.w	r3, [r3]
 8001fd4:	4a21      	ldr	r2, [pc, #132]	; (800205c <main+0x11e0>)
 8001fd6:	2111      	movs	r1, #17
 8001fd8:	4821      	ldr	r0, [pc, #132]	; (8002060 <main+0x11e4>)
 8001fda:	f00a f90f 	bl	800c1fc <sniprintf>
				  LCDTopQueued = 1;
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <main+0x11e8>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
				  snprintf(LCDQueueBottom, 17, "%-16d", MidiCCValues[MidiCCFaderLUT[i]]);
 8001fe4:	4a26      	ldr	r2, [pc, #152]	; (8002080 <main+0x1204>)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f993 3000 	ldrsb.w	r3, [r3]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b16      	ldr	r3, [pc, #88]	; (800204c <main+0x11d0>)
 8001ff2:	569b      	ldrsb	r3, [r3, r2]
 8001ff4:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <main+0x11ec>)
 8001ff6:	2111      	movs	r1, #17
 8001ff8:	480f      	ldr	r0, [pc, #60]	; (8002038 <main+0x11bc>)
 8001ffa:	f00a f8ff 	bl	800c1fc <sniprintf>
				  LCDBottomQueued = 1;
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <main+0x11c0>)
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
			  }


			  lastFaderValues[i] = currentADC;
 8002004:	491d      	ldr	r1, [pc, #116]	; (800207c <main+0x1200>)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(int j = 1; j < 4; j++){
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	3301      	adds	r3, #1
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	2b03      	cmp	r3, #3
 8002018:	dd86      	ble.n	8001f28 <main+0x10ac>




	  //scan key matrix
	  for(int i = 0; i < 4; i++){
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	e04d      	b.n	80020bc <main+0x1240>
 8002020:	20000634 	.word	0x20000634
 8002024:	20000344 	.word	0x20000344
 8002028:	20000bac 	.word	0x20000bac
 800202c:	200000cc 	.word	0x200000cc
 8002030:	20000d31 	.word	0x20000d31
 8002034:	0800ca90 	.word	0x0800ca90
 8002038:	20000d20 	.word	0x20000d20
 800203c:	20000a64 	.word	0x20000a64
 8002040:	20000358 	.word	0x20000358
 8002044:	2000036c 	.word	0x2000036c
 8002048:	20000008 	.word	0x20000008
 800204c:	20000c44 	.word	0x20000c44
 8002050:	2000000c 	.word	0x2000000c
 8002054:	20000348 	.word	0x20000348
 8002058:	20000349 	.word	0x20000349
 800205c:	0800ca94 	.word	0x0800ca94
 8002060:	20000cc4 	.word	0x20000cc4
 8002064:	20000d32 	.word	0x20000d32
 8002068:	0800ca9c 	.word	0x0800ca9c
 800206c:	20000644 	.word	0x20000644
 8002070:	20000a44 	.word	0x20000a44
 8002074:	20000a54 	.word	0x20000a54
 8002078:	20000015 	.word	0x20000015
 800207c:	2000038c 	.word	0x2000038c
 8002080:	20000004 	.word	0x20000004

		  GPIOA->BRR = (0b1111 << 4);  //clear all of PA 4,5,6,7
 8002084:	4b78      	ldr	r3, [pc, #480]	; (8002268 <main+0x13ec>)
 8002086:	22f0      	movs	r2, #240	; 0xf0
 8002088:	615a      	str	r2, [r3, #20]
		  GPIOA->BSRR = (1 << (4+i));  //energize the ith row
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3304      	adds	r3, #4
 800208e:	2201      	movs	r2, #1
 8002090:	409a      	lsls	r2, r3
 8002092:	4b75      	ldr	r3, [pc, #468]	; (8002268 <main+0x13ec>)
 8002094:	611a      	str	r2, [r3, #16]
		  currentKeyMatrix |= ((((GPIOB->IDR) >> 3) & 0b11111) << (5*i)); //hmmmmmmmmm
 8002096:	4b75      	ldr	r3, [pc, #468]	; (800226c <main+0x13f0>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	08db      	lsrs	r3, r3, #3
 800209c:	f003 011f 	and.w	r1, r3, #31
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	fa01 f203 	lsl.w	r2, r1, r3
 80020ac:	4b70      	ldr	r3, [pc, #448]	; (8002270 <main+0x13f4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	4a6f      	ldr	r2, [pc, #444]	; (8002270 <main+0x13f4>)
 80020b4:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < 4; i++){
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3301      	adds	r3, #1
 80020ba:	61fb      	str	r3, [r7, #28]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	2b03      	cmp	r3, #3
 80020c0:	dde0      	ble.n	8002084 <main+0x1208>

	  }

	  //a key was pressed
	  if(currentKeyMatrix != lastKeyMatrix){
 80020c2:	4b6b      	ldr	r3, [pc, #428]	; (8002270 <main+0x13f4>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4b6b      	ldr	r3, [pc, #428]	; (8002274 <main+0x13f8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	f000 80aa 	beq.w	8002224 <main+0x13a8>

		  //handle keys here
		  for(int i = 0; i < 4; i++){
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
 80020d4:	e028      	b.n	8002128 <main+0x12ac>
			  LEDMatrix[3-i] &= 0xf0; //clear the greens
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	f1c3 0303 	rsb	r3, r3, #3
 80020dc:	4a66      	ldr	r2, [pc, #408]	; (8002278 <main+0x13fc>)
 80020de:	5cd2      	ldrb	r2, [r2, r3]
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f1c3 0303 	rsb	r3, r3, #3
 80020e6:	f022 020f 	bic.w	r2, r2, #15
 80020ea:	b2d1      	uxtb	r1, r2
 80020ec:	4a62      	ldr	r2, [pc, #392]	; (8002278 <main+0x13fc>)
 80020ee:	54d1      	strb	r1, [r2, r3]
			  LEDMatrix[3-i] |= (currentKeyMatrix >> ((5*i)+1)) & 0b1111;
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	f1c3 0303 	rsb	r3, r3, #3
 80020f6:	4a60      	ldr	r2, [pc, #384]	; (8002278 <main+0x13fc>)
 80020f8:	5cd1      	ldrb	r1, [r2, r3]
 80020fa:	4b5d      	ldr	r3, [pc, #372]	; (8002270 <main+0x13f4>)
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	3301      	adds	r3, #1
 8002108:	fa20 f303 	lsr.w	r3, r0, r3
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	b2da      	uxtb	r2, r3
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	f1c3 0303 	rsb	r3, r3, #3
 800211a:	430a      	orrs	r2, r1
 800211c:	b2d1      	uxtb	r1, r2
 800211e:	4a56      	ldr	r2, [pc, #344]	; (8002278 <main+0x13fc>)
 8002120:	54d1      	strb	r1, [r2, r3]
		  for(int i = 0; i < 4; i++){
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	3301      	adds	r3, #1
 8002126:	61bb      	str	r3, [r7, #24]
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	2b03      	cmp	r3, #3
 800212c:	ddd3      	ble.n	80020d6 <main+0x125a>
			  //LEDMatrix[3-i] = (1<<i); //FRAK ZERO INDEXING alkfjngkjkfla (originally the idiot me had 4-i)
			  //hmmm, but on a more serious note tho, why is this array out of bounds not detected... that's definitely something to keep in mind
		  }

		  for(int i = 0; i < 4; i++){ //function to drive the LED's
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	e022      	b.n	800217a <main+0x12fe>

			  LEDMatrixBuffer[i*4] = 0b1111; //clear all pins first to prevent ghosting
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4a50      	ldr	r2, [pc, #320]	; (800227c <main+0x1400>)
 800213a:	210f      	movs	r1, #15
 800213c:	54d1      	strb	r1, [r2, r3]
			  LEDMatrixBuffer[i*4+1] = 0x00;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	3301      	adds	r3, #1
 8002144:	4a4d      	ldr	r2, [pc, #308]	; (800227c <main+0x1400>)
 8002146:	2100      	movs	r1, #0
 8002148:	54d1      	strb	r1, [r2, r3]
			  LEDMatrixBuffer[i*4+2] = ~(1<<i);
 800214a:	2201      	movs	r2, #1
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	b2da      	uxtb	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	43d2      	mvns	r2, r2
 800215c:	b2d1      	uxtb	r1, r2
 800215e:	4a47      	ldr	r2, [pc, #284]	; (800227c <main+0x1400>)
 8002160:	54d1      	strb	r1, [r2, r3]
			  LEDMatrixBuffer[i*4+3] = LEDMatrix[i];
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	3303      	adds	r3, #3
 8002168:	4943      	ldr	r1, [pc, #268]	; (8002278 <main+0x13fc>)
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	440a      	add	r2, r1
 800216e:	7811      	ldrb	r1, [r2, #0]
 8002170:	4a42      	ldr	r2, [pc, #264]	; (800227c <main+0x1400>)
 8002172:	54d1      	strb	r1, [r2, r3]
		  for(int i = 0; i < 4; i++){ //function to drive the LED's
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3301      	adds	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2b03      	cmp	r3, #3
 800217e:	ddd9      	ble.n	8002134 <main+0x12b8>

		   }

		  for(int i = 0; i < 20; i++){ //iterate through all 20 bits and send out Midi Note messages as necessary
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	e047      	b.n	8002216 <main+0x139a>

			  if((currentKeyMatrix & (1<<i)) && ((lastKeyMatrix & (1<<i)) == 0)){ //this key was pressed
 8002186:	2201      	movs	r2, #1
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	461a      	mov	r2, r3
 8002190:	4b37      	ldr	r3, [pc, #220]	; (8002270 <main+0x13f4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4013      	ands	r3, r2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d018      	beq.n	80021cc <main+0x1350>
 800219a:	2201      	movs	r2, #1
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	4b33      	ldr	r3, [pc, #204]	; (8002274 <main+0x13f8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10e      	bne.n	80021cc <main+0x1350>

				  MidiNoteOn(MidiChannel, MidiNoteLUT[i], 127);
 80021ae:	4b34      	ldr	r3, [pc, #208]	; (8002280 <main+0x1404>)
 80021b0:	f993 3000 	ldrsb.w	r3, [r3]
 80021b4:	b2d8      	uxtb	r0, r3
 80021b6:	4a33      	ldr	r2, [pc, #204]	; (8002284 <main+0x1408>)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f993 3000 	ldrsb.w	r3, [r3]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	227f      	movs	r2, #127	; 0x7f
 80021c4:	4619      	mov	r1, r3
 80021c6:	f7fe fd7b 	bl	8000cc0 <MidiNoteOn>
 80021ca:	e021      	b.n	8002210 <main+0x1394>

			  }


			  else if((lastKeyMatrix & (1<<i)) && ((currentKeyMatrix & (1<<i)) == 0)){
 80021cc:	2201      	movs	r2, #1
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b27      	ldr	r3, [pc, #156]	; (8002274 <main+0x13f8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d017      	beq.n	8002210 <main+0x1394>
 80021e0:	2201      	movs	r2, #1
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b21      	ldr	r3, [pc, #132]	; (8002270 <main+0x13f4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10d      	bne.n	8002210 <main+0x1394>

				  MidiNoteOff(MidiChannel, MidiNoteLUT[i], 0);
 80021f4:	4b22      	ldr	r3, [pc, #136]	; (8002280 <main+0x1404>)
 80021f6:	f993 3000 	ldrsb.w	r3, [r3]
 80021fa:	b2d8      	uxtb	r0, r3
 80021fc:	4a21      	ldr	r2, [pc, #132]	; (8002284 <main+0x1408>)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4413      	add	r3, r2
 8002202:	f993 3000 	ldrsb.w	r3, [r3]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2200      	movs	r2, #0
 800220a:	4619      	mov	r1, r3
 800220c:	f7fe fd78 	bl	8000d00 <MidiNoteOff>
		  for(int i = 0; i < 20; i++){ //iterate through all 20 bits and send out Midi Note messages as necessary
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	3301      	adds	r3, #1
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b13      	cmp	r3, #19
 800221a:	ddb4      	ble.n	8002186 <main+0x130a>

			  }

		  }

		  lastKeyMatrix = currentKeyMatrix;
 800221c:	4b14      	ldr	r3, [pc, #80]	; (8002270 <main+0x13f4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <main+0x13f8>)
 8002222:	6013      	str	r3, [r2, #0]
	  }

	  currentKeyMatrix = 0; //start afresh
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <main+0x13f4>)
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]


	  if(!isLCDPrinting){ //update LCD here
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <main+0x140c>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	f47f a911 	bne.w	8001458 <main+0x5dc>
		  //assumption: at most only one parameter will be changed with each loop, therefore, only allow for 1 queued write

		  if(LCDTopQueued){
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <main+0x1410>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <main+0x13d2>
			  LCDPrintStringTop(LCDQueueTop);
 800223e:	4814      	ldr	r0, [pc, #80]	; (8002290 <main+0x1414>)
 8002240:	f7fe fb0c 	bl	800085c <LCDPrintStringTop>
			  LCDTopQueued = 0;
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <main+0x1410>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	f7ff b905 	b.w	8001458 <main+0x5dc>
		  }
		  else if(LCDBottomQueued){
 800224e:	4b11      	ldr	r3, [pc, #68]	; (8002294 <main+0x1418>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f43f a900 	beq.w	8001458 <main+0x5dc>
			  LCDPrintStringBottom(LCDQueueBottom);
 8002258:	480f      	ldr	r0, [pc, #60]	; (8002298 <main+0x141c>)
 800225a:	f7fe fb6b 	bl	8000934 <LCDPrintStringBottom>
			  LCDBottomQueued = 0;
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <main+0x1418>)
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
  {
 8002264:	f7ff b8f8 	b.w	8001458 <main+0x5dc>
 8002268:	40010800 	.word	0x40010800
 800226c:	40010c00 	.word	0x40010c00
 8002270:	20000388 	.word	0x20000388
 8002274:	20000384 	.word	0x20000384
 8002278:	20000344 	.word	0x20000344
 800227c:	20000634 	.word	0x20000634
 8002280:	20000348 	.word	0x20000348
 8002284:	20000bb0 	.word	0x20000bb0
 8002288:	2000033e 	.word	0x2000033e
 800228c:	20000d32 	.word	0x20000d32
 8002290:	20000cc4 	.word	0x20000cc4
 8002294:	20000a64 	.word	0x20000a64
 8002298:	20000d20 	.word	0x20000d20

0800229c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b094      	sub	sp, #80	; 0x50
 80022a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a6:	2228      	movs	r2, #40	; 0x28
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f009 ff9e 	bl	800c1ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80022cc:	2309      	movs	r3, #9
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022da:	2301      	movs	r3, #1
 80022dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80022de:	2301      	movs	r3, #1
 80022e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e2:	2302      	movs	r3, #2
 80022e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80022f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022f6:	4618      	mov	r0, r3
 80022f8:	f004 fe3e 	bl	8006f78 <HAL_RCC_OscConfig>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002302:	f000 fa8d 	bl	8002820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002306:	230f      	movs	r3, #15
 8002308:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800230a:	2302      	movs	r3, #2
 800230c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002316:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	2102      	movs	r1, #2
 8002322:	4618      	mov	r0, r3
 8002324:	f005 f8a8 	bl	8007478 <HAL_RCC_ClockConfig>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800232e:	f000 fa77 	bl	8002820 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002332:	2312      	movs	r3, #18
 8002334:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800233a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800233c:	2300      	movs	r3, #0
 800233e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002340:	1d3b      	adds	r3, r7, #4
 8002342:	4618      	mov	r0, r3
 8002344:	f005 fa20 	bl	8007788 <HAL_RCCEx_PeriphCLKConfig>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800234e:	f000 fa67 	bl	8002820 <Error_Handler>
  }
}
 8002352:	bf00      	nop
 8002354:	3750      	adds	r7, #80	; 0x50
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2101      	movs	r1, #1
 8002362:	201c      	movs	r0, #28
 8002364:	f001 f9f1 	bl	800374a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002368:	201c      	movs	r0, #28
 800236a:	f001 fa0a 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2102      	movs	r1, #2
 8002372:	201d      	movs	r0, #29
 8002374:	f001 f9e9 	bl	800374a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002378:	201d      	movs	r0, #29
 800237a:	f001 fa02 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800237e:	2200      	movs	r2, #0
 8002380:	2100      	movs	r1, #0
 8002382:	2010      	movs	r0, #16
 8002384:	f001 f9e1 	bl	800374a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002388:	2010      	movs	r0, #16
 800238a:	f001 f9fa 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* I2C2_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	2100      	movs	r1, #0
 8002392:	2021      	movs	r0, #33	; 0x21
 8002394:	f001 f9d9 	bl	800374a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002398:	2021      	movs	r0, #33	; 0x21
 800239a:	f001 f9f2 	bl	8003782 <HAL_NVIC_EnableIRQ>
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <MX_ADC1_Init+0x80>)
 80023b6:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <MX_ADC1_Init+0x84>)
 80023b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80023ba:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <MX_ADC1_Init+0x80>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80023c0:	4b18      	ldr	r3, [pc, #96]	; (8002424 <MX_ADC1_Init+0x80>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023c6:	4b17      	ldr	r3, [pc, #92]	; (8002424 <MX_ADC1_Init+0x80>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023cc:	4b15      	ldr	r3, [pc, #84]	; (8002424 <MX_ADC1_Init+0x80>)
 80023ce:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80023d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <MX_ADC1_Init+0x80>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <MX_ADC1_Init+0x80>)
 80023dc:	2201      	movs	r2, #1
 80023de:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023e0:	4810      	ldr	r0, [pc, #64]	; (8002424 <MX_ADC1_Init+0x80>)
 80023e2:	f000 fed1 	bl	8003188 <HAL_ADC_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80023ec:	f000 fa18 	bl	8002820 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80023f0:	2301      	movs	r3, #1
 80023f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023f4:	2301      	movs	r3, #1
 80023f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	4619      	mov	r1, r3
 8002400:	4808      	ldr	r0, [pc, #32]	; (8002424 <MX_ADC1_Init+0x80>)
 8002402:	f000 ff99 	bl	8003338 <HAL_ADC_ConfigChannel>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800240c:	f000 fa08 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ADC1->CR2 |= 1; //turn on ADC1
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <MX_ADC1_Init+0x84>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <MX_ADC1_Init+0x84>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC1_Init 2 */

}
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000c08 	.word	0x20000c08
 8002428:	40012400 	.word	0x40012400

0800242c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002430:	4b12      	ldr	r3, [pc, #72]	; (800247c <MX_I2C1_Init+0x50>)
 8002432:	4a13      	ldr	r2, [pc, #76]	; (8002480 <MX_I2C1_Init+0x54>)
 8002434:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <MX_I2C1_Init+0x50>)
 8002438:	4a12      	ldr	r2, [pc, #72]	; (8002484 <MX_I2C1_Init+0x58>)
 800243a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <MX_I2C1_Init+0x50>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002442:	4b0e      	ldr	r3, [pc, #56]	; (800247c <MX_I2C1_Init+0x50>)
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <MX_I2C1_Init+0x50>)
 800244a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800244e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <MX_I2C1_Init+0x50>)
 8002452:	2200      	movs	r2, #0
 8002454:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <MX_I2C1_Init+0x50>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800245c:	4b07      	ldr	r3, [pc, #28]	; (800247c <MX_I2C1_Init+0x50>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <MX_I2C1_Init+0x50>)
 8002464:	2200      	movs	r2, #0
 8002466:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002468:	4804      	ldr	r0, [pc, #16]	; (800247c <MX_I2C1_Init+0x50>)
 800246a:	f001 fcf9 	bl	8003e60 <HAL_I2C_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002474:	f000 f9d4 	bl	8002820 <Error_Handler>
  //dude, the code generation is evil... doesn't help you all the way!!! Came a gutsa so many times....


  /* USER CODE END I2C1_Init 2 */

}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000aac 	.word	0x20000aac
 8002480:	40005400 	.word	0x40005400
 8002484:	00061a80 	.word	0x00061a80

08002488 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <MX_I2C2_Init+0x50>)
 800248e:	4a13      	ldr	r2, [pc, #76]	; (80024dc <MX_I2C2_Init+0x54>)
 8002490:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <MX_I2C2_Init+0x50>)
 8002494:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <MX_I2C2_Init+0x58>)
 8002496:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <MX_I2C2_Init+0x50>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <MX_I2C2_Init+0x50>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <MX_I2C2_Init+0x50>)
 80024a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <MX_I2C2_Init+0x50>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <MX_I2C2_Init+0x50>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <MX_I2C2_Init+0x50>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <MX_I2C2_Init+0x50>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024c4:	4804      	ldr	r0, [pc, #16]	; (80024d8 <MX_I2C2_Init+0x50>)
 80024c6:	f001 fccb 	bl	8003e60 <HAL_I2C_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80024d0:	f000 f9a6 	bl	8002820 <Error_Handler>
  /* USER CODE BEGIN I2C2_Init 2 */
  //I2C2->CR2 |= (1<<9); //enable event interrupts
  //TODO: this is just temporarily here, might cause issues
  /* USER CODE END I2C2_Init 2 */

}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000b0c 	.word	0x20000b0c
 80024dc:	40005800 	.word	0x40005800
 80024e0:	000186a0 	.word	0x000186a0

080024e4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <MX_IWDG_Init+0x2c>)
 80024ea:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <MX_IWDG_Init+0x30>)
 80024ec:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <MX_IWDG_Init+0x2c>)
 80024f0:	2202      	movs	r2, #2
 80024f2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <MX_IWDG_Init+0x2c>)
 80024f6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80024fa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80024fc:	4804      	ldr	r0, [pc, #16]	; (8002510 <MX_IWDG_Init+0x2c>)
 80024fe:	f003 f97f 	bl	8005800 <HAL_IWDG_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002508:	f000 f98a 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000b00 	.word	0x20000b00
 8002514:	40003000 	.word	0x40003000

08002518 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251e:	f107 0308 	add.w	r3, r7, #8
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800252c:	463b      	mov	r3, r7
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002534:	4b25      	ldr	r3, [pc, #148]	; (80025cc <MX_TIM2_Init+0xb4>)
 8002536:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800253a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800253c:	4b23      	ldr	r3, [pc, #140]	; (80025cc <MX_TIM2_Init+0xb4>)
 800253e:	2201      	movs	r2, #1
 8002540:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002542:	4b22      	ldr	r3, [pc, #136]	; (80025cc <MX_TIM2_Init+0xb4>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 511;
 8002548:	4b20      	ldr	r3, [pc, #128]	; (80025cc <MX_TIM2_Init+0xb4>)
 800254a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800254e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002550:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <MX_TIM2_Init+0xb4>)
 8002552:	2200      	movs	r2, #0
 8002554:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002556:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <MX_TIM2_Init+0xb4>)
 8002558:	2200      	movs	r2, #0
 800255a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800255c:	481b      	ldr	r0, [pc, #108]	; (80025cc <MX_TIM2_Init+0xb4>)
 800255e:	f005 f9c9 	bl	80078f4 <HAL_TIM_Base_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002568:	f000 f95a 	bl	8002820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800256c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002570:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002572:	f107 0308 	add.w	r3, r7, #8
 8002576:	4619      	mov	r1, r3
 8002578:	4814      	ldr	r0, [pc, #80]	; (80025cc <MX_TIM2_Init+0xb4>)
 800257a:	f005 fb12 	bl	8007ba2 <HAL_TIM_ConfigClockSource>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002584:	f000 f94c 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002588:	2300      	movs	r3, #0
 800258a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002590:	463b      	mov	r3, r7
 8002592:	4619      	mov	r1, r3
 8002594:	480d      	ldr	r0, [pc, #52]	; (80025cc <MX_TIM2_Init+0xb4>)
 8002596:	f005 fce1 	bl	8007f5c <HAL_TIMEx_MasterConfigSynchronization>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80025a0:	f000 f93e 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIM2->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the BAM Interrupt is triggered
 80025a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025ae:	f023 0302 	bic.w	r3, r3, #2
 80025b2:	6013      	str	r3, [r2, #0]
  TIM2->DIER |= 1; //Update interrupt enable
 80025b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	60d3      	str	r3, [r2, #12]

  /* USER CODE END TIM2_Init 2 */

}
 80025c4:	bf00      	nop
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000cd8 	.word	0x20000cd8

080025d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025d6:	f107 0308 	add.w	r3, r7, #8
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	609a      	str	r2, [r3, #8]
 80025e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e4:	463b      	mov	r3, r7
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025ec:	4b23      	ldr	r3, [pc, #140]	; (800267c <MX_TIM3_Init+0xac>)
 80025ee:	4a24      	ldr	r2, [pc, #144]	; (8002680 <MX_TIM3_Init+0xb0>)
 80025f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025f2:	4b22      	ldr	r3, [pc, #136]	; (800267c <MX_TIM3_Init+0xac>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f8:	4b20      	ldr	r3, [pc, #128]	; (800267c <MX_TIM3_Init+0xac>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16383;
 80025fe:	4b1f      	ldr	r3, [pc, #124]	; (800267c <MX_TIM3_Init+0xac>)
 8002600:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8002604:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002606:	4b1d      	ldr	r3, [pc, #116]	; (800267c <MX_TIM3_Init+0xac>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <MX_TIM3_Init+0xac>)
 800260e:	2200      	movs	r2, #0
 8002610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002612:	481a      	ldr	r0, [pc, #104]	; (800267c <MX_TIM3_Init+0xac>)
 8002614:	f005 f96e 	bl	80078f4 <HAL_TIM_Base_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800261e:	f000 f8ff 	bl	8002820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002626:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002628:	f107 0308 	add.w	r3, r7, #8
 800262c:	4619      	mov	r1, r3
 800262e:	4813      	ldr	r0, [pc, #76]	; (800267c <MX_TIM3_Init+0xac>)
 8002630:	f005 fab7 	bl	8007ba2 <HAL_TIM_ConfigClockSource>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800263a:	f000 f8f1 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002642:	2300      	movs	r3, #0
 8002644:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002646:	463b      	mov	r3, r7
 8002648:	4619      	mov	r1, r3
 800264a:	480c      	ldr	r0, [pc, #48]	; (800267c <MX_TIM3_Init+0xac>)
 800264c:	f005 fc86 	bl	8007f5c <HAL_TIMEx_MasterConfigSynchronization>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002656:	f000 f8e3 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the Encoder Scan Interrupt is triggered
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <MX_TIM3_Init+0xb0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a08      	ldr	r2, [pc, #32]	; (8002680 <MX_TIM3_Init+0xb0>)
 8002660:	f023 0302 	bic.w	r3, r3, #2
 8002664:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= 1; //Update interrupt enable
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <MX_TIM3_Init+0xb0>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	4a05      	ldr	r2, [pc, #20]	; (8002680 <MX_TIM3_Init+0xb0>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM3_Init 2 */

}
 8002672:	bf00      	nop
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000b64 	.word	0x20000b64
 8002680:	40000400 	.word	0x40000400

08002684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <MX_DMA_Init+0x28>)
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	4a07      	ldr	r2, [pc, #28]	; (80026ac <MX_DMA_Init+0x28>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6153      	str	r3, [r2, #20]
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <MX_DMA_Init+0x28>)
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]

}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	40021000 	.word	0x40021000

080026b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b6:	f107 0310 	add.w	r3, r7, #16
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	609a      	str	r2, [r3, #8]
 80026c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c4:	4b52      	ldr	r3, [pc, #328]	; (8002810 <MX_GPIO_Init+0x160>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	4a51      	ldr	r2, [pc, #324]	; (8002810 <MX_GPIO_Init+0x160>)
 80026ca:	f043 0310 	orr.w	r3, r3, #16
 80026ce:	6193      	str	r3, [r2, #24]
 80026d0:	4b4f      	ldr	r3, [pc, #316]	; (8002810 <MX_GPIO_Init+0x160>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026dc:	4b4c      	ldr	r3, [pc, #304]	; (8002810 <MX_GPIO_Init+0x160>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4a4b      	ldr	r2, [pc, #300]	; (8002810 <MX_GPIO_Init+0x160>)
 80026e2:	f043 0320 	orr.w	r3, r3, #32
 80026e6:	6193      	str	r3, [r2, #24]
 80026e8:	4b49      	ldr	r3, [pc, #292]	; (8002810 <MX_GPIO_Init+0x160>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0320 	and.w	r3, r3, #32
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f4:	4b46      	ldr	r3, [pc, #280]	; (8002810 <MX_GPIO_Init+0x160>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	4a45      	ldr	r2, [pc, #276]	; (8002810 <MX_GPIO_Init+0x160>)
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	6193      	str	r3, [r2, #24]
 8002700:	4b43      	ldr	r3, [pc, #268]	; (8002810 <MX_GPIO_Init+0x160>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800270c:	4b40      	ldr	r3, [pc, #256]	; (8002810 <MX_GPIO_Init+0x160>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	4a3f      	ldr	r2, [pc, #252]	; (8002810 <MX_GPIO_Init+0x160>)
 8002712:	f043 0308 	orr.w	r3, r3, #8
 8002716:	6193      	str	r3, [r2, #24]
 8002718:	4b3d      	ldr	r3, [pc, #244]	; (8002810 <MX_GPIO_Init+0x160>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	603b      	str	r3, [r7, #0]
 8002722:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002724:	2200      	movs	r2, #0
 8002726:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800272a:	483a      	ldr	r0, [pc, #232]	; (8002814 <MX_GPIO_Init+0x164>)
 800272c:	f001 fb80 	bl	8003e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002730:	2200      	movs	r2, #0
 8002732:	f248 11f0 	movw	r1, #33264	; 0x81f0
 8002736:	4838      	ldr	r0, [pc, #224]	; (8002818 <MX_GPIO_Init+0x168>)
 8002738:	f001 fb7a 	bl	8003e30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 800273c:	2200      	movs	r2, #0
 800273e:	f24f 0106 	movw	r1, #61446	; 0xf006
 8002742:	4836      	ldr	r0, [pc, #216]	; (800281c <MX_GPIO_Init+0x16c>)
 8002744:	f001 fb74 	bl	8003e30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002748:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800274c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800274e:	2301      	movs	r3, #1
 8002750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002756:	2303      	movs	r3, #3
 8002758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275a:	f107 0310 	add.w	r3, r7, #16
 800275e:	4619      	mov	r1, r3
 8002760:	482c      	ldr	r0, [pc, #176]	; (8002814 <MX_GPIO_Init+0x164>)
 8002762:	f001 fa0b 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002766:	f248 13f0 	movw	r3, #33264	; 0x81f0
 800276a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276c:	2301      	movs	r3, #1
 800276e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002774:	2303      	movs	r3, #3
 8002776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f107 0310 	add.w	r3, r7, #16
 800277c:	4619      	mov	r1, r3
 800277e:	4826      	ldr	r0, [pc, #152]	; (8002818 <MX_GPIO_Init+0x168>)
 8002780:	f001 f9fc 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002784:	2301      	movs	r3, #1
 8002786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800278c:	2301      	movs	r3, #1
 800278e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002790:	f107 0310 	add.w	r3, r7, #16
 8002794:	4619      	mov	r1, r3
 8002796:	4821      	ldr	r0, [pc, #132]	; (800281c <MX_GPIO_Init+0x16c>)
 8002798:	f001 f9f0 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800279c:	f24f 0302 	movw	r3, #61442	; 0xf002
 80027a0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a2:	2301      	movs	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027aa:	2303      	movs	r3, #3
 80027ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ae:	f107 0310 	add.w	r3, r7, #16
 80027b2:	4619      	mov	r1, r3
 80027b4:	4819      	ldr	r0, [pc, #100]	; (800281c <MX_GPIO_Init+0x16c>)
 80027b6:	f001 f9e1 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027ba:	2304      	movs	r3, #4
 80027bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027be:	2301      	movs	r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c6:	2302      	movs	r3, #2
 80027c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ca:	f107 0310 	add.w	r3, r7, #16
 80027ce:	4619      	mov	r1, r3
 80027d0:	4812      	ldr	r0, [pc, #72]	; (800281c <MX_GPIO_Init+0x16c>)
 80027d2:	f001 f9d3 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e4:	f107 0310 	add.w	r3, r7, #16
 80027e8:	4619      	mov	r1, r3
 80027ea:	480b      	ldr	r0, [pc, #44]	; (8002818 <MX_GPIO_Init+0x168>)
 80027ec:	f001 f9c6 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80027f0:	23f8      	movs	r3, #248	; 0xf8
 80027f2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027f8:	2302      	movs	r3, #2
 80027fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fc:	f107 0310 	add.w	r3, r7, #16
 8002800:	4619      	mov	r1, r3
 8002802:	4806      	ldr	r0, [pc, #24]	; (800281c <MX_GPIO_Init+0x16c>)
 8002804:	f001 f9ba 	bl	8003b7c <HAL_GPIO_Init>

}
 8002808:	bf00      	nop
 800280a:	3720      	adds	r7, #32
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40021000 	.word	0x40021000
 8002814:	40011000 	.word	0x40011000
 8002818:	40010800 	.word	0x40010800
 800281c:	40010c00 	.word	0x40010c00

08002820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002824:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002826:	e7fe      	b.n	8002826 <Error_Handler+0x6>

08002828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <HAL_MspInit+0x5c>)
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	4a14      	ldr	r2, [pc, #80]	; (8002884 <HAL_MspInit+0x5c>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6193      	str	r3, [r2, #24]
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_MspInit+0x5c>)
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_MspInit+0x5c>)
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <HAL_MspInit+0x5c>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002850:	61d3      	str	r3, [r2, #28]
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_MspInit+0x5c>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <HAL_MspInit+0x60>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	4a04      	ldr	r2, [pc, #16]	; (8002888 <HAL_MspInit+0x60>)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	40021000 	.word	0x40021000
 8002888:	40010000 	.word	0x40010000

0800288c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 0310 	add.w	r3, r7, #16
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <HAL_ADC_MspInit+0x6c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d121      	bne.n	80028f0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <HAL_ADC_MspInit+0x70>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	4a12      	ldr	r2, [pc, #72]	; (80028fc <HAL_ADC_MspInit+0x70>)
 80028b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028b6:	6193      	str	r3, [r2, #24]
 80028b8:	4b10      	ldr	r3, [pc, #64]	; (80028fc <HAL_ADC_MspInit+0x70>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c4:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <HAL_ADC_MspInit+0x70>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <HAL_ADC_MspInit+0x70>)
 80028ca:	f043 0304 	orr.w	r3, r3, #4
 80028ce:	6193      	str	r3, [r2, #24]
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <HAL_ADC_MspInit+0x70>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80028dc:	230f      	movs	r3, #15
 80028de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028e0:	2303      	movs	r3, #3
 80028e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e4:	f107 0310 	add.w	r3, r7, #16
 80028e8:	4619      	mov	r1, r3
 80028ea:	4805      	ldr	r0, [pc, #20]	; (8002900 <HAL_ADC_MspInit+0x74>)
 80028ec:	f001 f946 	bl	8003b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028f0:	bf00      	nop
 80028f2:	3720      	adds	r7, #32
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40012400 	.word	0x40012400
 80028fc:	40021000 	.word	0x40021000
 8002900:	40010800 	.word	0x40010800

08002904 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08c      	sub	sp, #48	; 0x30
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	f107 031c 	add.w	r3, r7, #28
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <HAL_I2C_MspInit+0x17c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d159      	bne.n	80029d8 <HAL_I2C_MspInit+0xd4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002924:	4b57      	ldr	r3, [pc, #348]	; (8002a84 <HAL_I2C_MspInit+0x180>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	4a56      	ldr	r2, [pc, #344]	; (8002a84 <HAL_I2C_MspInit+0x180>)
 800292a:	f043 0308 	orr.w	r3, r3, #8
 800292e:	6193      	str	r3, [r2, #24]
 8002930:	4b54      	ldr	r3, [pc, #336]	; (8002a84 <HAL_I2C_MspInit+0x180>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800293c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002942:	2312      	movs	r3, #18
 8002944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002946:	2303      	movs	r3, #3
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294a:	f107 031c 	add.w	r3, r7, #28
 800294e:	4619      	mov	r1, r3
 8002950:	484d      	ldr	r0, [pc, #308]	; (8002a88 <HAL_I2C_MspInit+0x184>)
 8002952:	f001 f913 	bl	8003b7c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002956:	4b4d      	ldr	r3, [pc, #308]	; (8002a8c <HAL_I2C_MspInit+0x188>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800296c:	4a47      	ldr	r2, [pc, #284]	; (8002a8c <HAL_I2C_MspInit+0x188>)
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002972:	4b44      	ldr	r3, [pc, #272]	; (8002a84 <HAL_I2C_MspInit+0x180>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	4a43      	ldr	r2, [pc, #268]	; (8002a84 <HAL_I2C_MspInit+0x180>)
 8002978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800297c:	61d3      	str	r3, [r2, #28]
 800297e:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <HAL_I2C_MspInit+0x180>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800298a:	4b41      	ldr	r3, [pc, #260]	; (8002a90 <HAL_I2C_MspInit+0x18c>)
 800298c:	4a41      	ldr	r2, [pc, #260]	; (8002a94 <HAL_I2C_MspInit+0x190>)
 800298e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002990:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <HAL_I2C_MspInit+0x18c>)
 8002992:	2210      	movs	r2, #16
 8002994:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002996:	4b3e      	ldr	r3, [pc, #248]	; (8002a90 <HAL_I2C_MspInit+0x18c>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800299c:	4b3c      	ldr	r3, [pc, #240]	; (8002a90 <HAL_I2C_MspInit+0x18c>)
 800299e:	2280      	movs	r2, #128	; 0x80
 80029a0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029a2:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <HAL_I2C_MspInit+0x18c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029a8:	4b39      	ldr	r3, [pc, #228]	; (8002a90 <HAL_I2C_MspInit+0x18c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 80029ae:	4b38      	ldr	r3, [pc, #224]	; (8002a90 <HAL_I2C_MspInit+0x18c>)
 80029b0:	2220      	movs	r2, #32
 80029b2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029b4:	4b36      	ldr	r3, [pc, #216]	; (8002a90 <HAL_I2C_MspInit+0x18c>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80029ba:	4835      	ldr	r0, [pc, #212]	; (8002a90 <HAL_I2C_MspInit+0x18c>)
 80029bc:	f000 fefc 	bl	80037b8 <HAL_DMA_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 80029c6:	f7ff ff2b 	bl	8002820 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a30      	ldr	r2, [pc, #192]	; (8002a90 <HAL_I2C_MspInit+0x18c>)
 80029ce:	635a      	str	r2, [r3, #52]	; 0x34
 80029d0:	4a2f      	ldr	r2, [pc, #188]	; (8002a90 <HAL_I2C_MspInit+0x18c>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80029d6:	e04f      	b.n	8002a78 <HAL_I2C_MspInit+0x174>
  else if(hi2c->Instance==I2C2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a2e      	ldr	r2, [pc, #184]	; (8002a98 <HAL_I2C_MspInit+0x194>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d14a      	bne.n	8002a78 <HAL_I2C_MspInit+0x174>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e2:	4b28      	ldr	r3, [pc, #160]	; (8002a84 <HAL_I2C_MspInit+0x180>)
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	4a27      	ldr	r2, [pc, #156]	; (8002a84 <HAL_I2C_MspInit+0x180>)
 80029e8:	f043 0308 	orr.w	r3, r3, #8
 80029ec:	6193      	str	r3, [r2, #24]
 80029ee:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <HAL_I2C_MspInit+0x180>)
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a00:	2312      	movs	r3, #18
 8002a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a04:	2303      	movs	r3, #3
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a08:	f107 031c 	add.w	r3, r7, #28
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	481e      	ldr	r0, [pc, #120]	; (8002a88 <HAL_I2C_MspInit+0x184>)
 8002a10:	f001 f8b4 	bl	8003b7c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a14:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_I2C_MspInit+0x180>)
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	4a1a      	ldr	r2, [pc, #104]	; (8002a84 <HAL_I2C_MspInit+0x180>)
 8002a1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a1e:	61d3      	str	r3, [r2, #28]
 8002a20:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <HAL_I2C_MspInit+0x180>)
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <HAL_I2C_MspInit+0x198>)
 8002a2e:	4a1c      	ldr	r2, [pc, #112]	; (8002aa0 <HAL_I2C_MspInit+0x19c>)
 8002a30:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a32:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <HAL_I2C_MspInit+0x198>)
 8002a34:	2210      	movs	r2, #16
 8002a36:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a38:	4b18      	ldr	r3, [pc, #96]	; (8002a9c <HAL_I2C_MspInit+0x198>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a3e:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <HAL_I2C_MspInit+0x198>)
 8002a40:	2280      	movs	r2, #128	; 0x80
 8002a42:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a44:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <HAL_I2C_MspInit+0x198>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a4a:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <HAL_I2C_MspInit+0x198>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002a50:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <HAL_I2C_MspInit+0x198>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a56:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <HAL_I2C_MspInit+0x198>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002a5c:	480f      	ldr	r0, [pc, #60]	; (8002a9c <HAL_I2C_MspInit+0x198>)
 8002a5e:	f000 feab 	bl	80037b8 <HAL_DMA_Init>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_I2C_MspInit+0x168>
      Error_Handler();
 8002a68:	f7ff feda 	bl	8002820 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a0b      	ldr	r2, [pc, #44]	; (8002a9c <HAL_I2C_MspInit+0x198>)
 8002a70:	635a      	str	r2, [r3, #52]	; 0x34
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <HAL_I2C_MspInit+0x198>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002a78:	bf00      	nop
 8002a7a:	3730      	adds	r7, #48	; 0x30
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40005400 	.word	0x40005400
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40010c00 	.word	0x40010c00
 8002a8c:	40010000 	.word	0x40010000
 8002a90:	20000a68 	.word	0x20000a68
 8002a94:	4002006c 	.word	0x4002006c
 8002a98:	40005800 	.word	0x40005800
 8002a9c:	20000bc4 	.word	0x20000bc4
 8002aa0:	40020044 	.word	0x40020044

08002aa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_TIM_Base_MspInit+0x58>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4a10      	ldr	r2, [pc, #64]	; (8002afc <HAL_TIM_Base_MspInit+0x58>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	61d3      	str	r3, [r2, #28]
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <HAL_TIM_Base_MspInit+0x58>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002ace:	e010      	b.n	8002af2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <HAL_TIM_Base_MspInit+0x5c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d10b      	bne.n	8002af2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <HAL_TIM_Base_MspInit+0x58>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	4a07      	ldr	r2, [pc, #28]	; (8002afc <HAL_TIM_Base_MspInit+0x58>)
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	61d3      	str	r3, [r2, #28]
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_TIM_Base_MspInit+0x58>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40000400 	.word	0x40000400

08002b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b08:	e7fe      	b.n	8002b08 <NMI_Handler+0x4>

08002b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0e:	e7fe      	b.n	8002b0e <HardFault_Handler+0x4>

08002b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b14:	e7fe      	b.n	8002b14 <MemManage_Handler+0x4>

08002b16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1a:	e7fe      	b.n	8002b1a <BusFault_Handler+0x4>

08002b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b20:	e7fe      	b.n	8002b20 <UsageFault_Handler+0x4>

08002b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr

08002b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b4a:	f000 fb01 	bl	8003150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
	//GPIOA->BRR = 1<<6;



  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002b58:	4802      	ldr	r0, [pc, #8]	; (8002b64 <DMA1_Channel6_IRQHandler+0x10>)
 8002b5a:	f000 fefd 	bl	8003958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  //GPIOA->BSRR = 1<<6;
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000a68 	.word	0x20000a68

08002b68 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b6c:	4802      	ldr	r0, [pc, #8]	; (8002b78 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002b6e:	f002 ffb1 	bl	8005ad4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200019cc 	.word	0x200019cc

08002b7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//GPIOA->BSRR = 1<<6;
	if(BAMIndex == 0){
 8002b80:	4b43      	ldr	r3, [pc, #268]	; (8002c90 <TIM2_IRQHandler+0x114>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d102      	bne.n	8002b90 <TIM2_IRQHandler+0x14>
		blocked = 1; //block to protect the time sensitive LSB's, otherwise it gets pretty flicker-ry
 8002b8a:	4b42      	ldr	r3, [pc, #264]	; (8002c94 <TIM2_IRQHandler+0x118>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]


	}

	if(brightness[0] & (1 << BAMIndex))	GPIOB->BSRR = (1<<12);
 8002b90:	4b41      	ldr	r3, [pc, #260]	; (8002c98 <TIM2_IRQHandler+0x11c>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	4b3d      	ldr	r3, [pc, #244]	; (8002c90 <TIM2_IRQHandler+0x114>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	fa42 f303 	asr.w	r3, r2, r3
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d004      	beq.n	8002bb4 <TIM2_IRQHandler+0x38>
 8002baa:	4b3c      	ldr	r3, [pc, #240]	; (8002c9c <TIM2_IRQHandler+0x120>)
 8002bac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bb0:	611a      	str	r2, [r3, #16]
 8002bb2:	e003      	b.n	8002bbc <TIM2_IRQHandler+0x40>
	else GPIOB->BRR = (1<<12);
 8002bb4:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <TIM2_IRQHandler+0x120>)
 8002bb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bba:	615a      	str	r2, [r3, #20]
	if(brightness[1] & (1 << BAMIndex))	GPIOB->BSRR = (1<<13);
 8002bbc:	4b36      	ldr	r3, [pc, #216]	; (8002c98 <TIM2_IRQHandler+0x11c>)
 8002bbe:	785b      	ldrb	r3, [r3, #1]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <TIM2_IRQHandler+0x114>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	fa42 f303 	asr.w	r3, r2, r3
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d004      	beq.n	8002be0 <TIM2_IRQHandler+0x64>
 8002bd6:	4b31      	ldr	r3, [pc, #196]	; (8002c9c <TIM2_IRQHandler+0x120>)
 8002bd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bdc:	611a      	str	r2, [r3, #16]
 8002bde:	e003      	b.n	8002be8 <TIM2_IRQHandler+0x6c>
	else GPIOB->BRR = (1<<13);
 8002be0:	4b2e      	ldr	r3, [pc, #184]	; (8002c9c <TIM2_IRQHandler+0x120>)
 8002be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002be6:	615a      	str	r2, [r3, #20]
	if(brightness[2] & (1 << BAMIndex))	GPIOB->BSRR = (1<<14);
 8002be8:	4b2b      	ldr	r3, [pc, #172]	; (8002c98 <TIM2_IRQHandler+0x11c>)
 8002bea:	789b      	ldrb	r3, [r3, #2]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <TIM2_IRQHandler+0x114>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	fa42 f303 	asr.w	r3, r2, r3
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d004      	beq.n	8002c0c <TIM2_IRQHandler+0x90>
 8002c02:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <TIM2_IRQHandler+0x120>)
 8002c04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c08:	611a      	str	r2, [r3, #16]
 8002c0a:	e003      	b.n	8002c14 <TIM2_IRQHandler+0x98>
	else GPIOB->BRR = (1<<14);
 8002c0c:	4b23      	ldr	r3, [pc, #140]	; (8002c9c <TIM2_IRQHandler+0x120>)
 8002c0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c12:	615a      	str	r2, [r3, #20]
	if(brightness[3] & (1 << BAMIndex))	GPIOB->BSRR = (1<<15);
 8002c14:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <TIM2_IRQHandler+0x11c>)
 8002c16:	78db      	ldrb	r3, [r3, #3]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <TIM2_IRQHandler+0x114>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	fa42 f303 	asr.w	r3, r2, r3
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d004      	beq.n	8002c38 <TIM2_IRQHandler+0xbc>
 8002c2e:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <TIM2_IRQHandler+0x120>)
 8002c30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c34:	611a      	str	r2, [r3, #16]
 8002c36:	e003      	b.n	8002c40 <TIM2_IRQHandler+0xc4>
	else GPIOB->BRR = (1<<15);
 8002c38:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <TIM2_IRQHandler+0x120>)
 8002c3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c3e:	615a      	str	r2, [r3, #20]


*/

	//FIXME this might potentially cause issues, as it blocks for half of the time
	if(BAMIndex == 5){
 8002c40:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <TIM2_IRQHandler+0x114>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b05      	cmp	r3, #5
 8002c48:	d102      	bne.n	8002c50 <TIM2_IRQHandler+0xd4>
		blocked = 0; //Time sensitive LSB's are done, unblock, value of 3 or less gives visible flicker
 8002c4a:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <TIM2_IRQHandler+0x118>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]

	}

	if(BAMIndex == 7){ //We've passed one BAM cycle
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <TIM2_IRQHandler+0x114>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b07      	cmp	r3, #7
 8002c58:	d107      	bne.n	8002c6a <TIM2_IRQHandler+0xee>


		BAMIndex = 0;
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <TIM2_IRQHandler+0x114>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = 1;
 8002c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c64:	2201      	movs	r2, #1
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28
 8002c68:	e00d      	b.n	8002c86 <TIM2_IRQHandler+0x10a>



	}
	else{
		BAMIndex++;
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <TIM2_IRQHandler+0x114>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <TIM2_IRQHandler+0x114>)
 8002c76:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = (volatile)(TIM2->PSC << 1); //set next write to occupy twice the time of this current write.
 8002c78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	6293      	str	r3, [r2, #40]	; 0x28
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c86:	4806      	ldr	r0, [pc, #24]	; (8002ca0 <TIM2_IRQHandler+0x124>)
 8002c88:	f004 fe83 	bl	8007992 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	2000034a 	.word	0x2000034a
 8002c94:	2000034b 	.word	0x2000034b
 8002c98:	20000128 	.word	0x20000128
 8002c9c:	40010c00 	.word	0x40010c00
 8002ca0:	20000cd8 	.word	0x20000cd8

08002ca4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	//GPIOA->BSRR = 1<<6;
	uint8_t currentReadoff = ((((GPIOA->IDR)>>9) & 1) << 1) | (((GPIOA->IDR)>>10) & 1); //read current encoder state
 8002caa:	4b35      	ldr	r3, [pc, #212]	; (8002d80 <TIM3_IRQHandler+0xdc>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	0a5b      	lsrs	r3, r3, #9
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <TIM3_IRQHandler+0xdc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	0a9b      	lsrs	r3, r3, #10
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	71fb      	strb	r3, [r7, #7]
	uint8_t index = (lastEncoder[currentEncoder]<<2) | currentReadoff;
 8002cce:	4b2d      	ldr	r3, [pc, #180]	; (8002d84 <TIM3_IRQHandler+0xe0>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b2c      	ldr	r3, [pc, #176]	; (8002d88 <TIM3_IRQHandler+0xe4>)
 8002cd8:	5c9b      	ldrb	r3, [r3, r2]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	b25a      	sxtb	r2, r3
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	b25b      	sxtb	r3, r3
 8002ce8:	71bb      	strb	r3, [r7, #6]
	encoderValues[currentEncoder] += encoderLUT[index];
 8002cea:	79bb      	ldrb	r3, [r7, #6]
 8002cec:	4a27      	ldr	r2, [pc, #156]	; (8002d8c <TIM3_IRQHandler+0xe8>)
 8002cee:	5cd3      	ldrb	r3, [r2, r3]
 8002cf0:	b259      	sxtb	r1, r3
 8002cf2:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <TIM3_IRQHandler+0xe0>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <TIM3_IRQHandler+0xec>)
 8002cfc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002d00:	4608      	mov	r0, r1
 8002d02:	4611      	mov	r1, r2
 8002d04:	4403      	add	r3, r0
 8002d06:	4a22      	ldr	r2, [pc, #136]	; (8002d90 <TIM3_IRQHandler+0xec>)
 8002d08:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//constrain encoderValues
	if(encoderValues[currentEncoder] > 255) encoderValues[currentEncoder] = 255;
	if(encoderValues[currentEncoder] < 0) encoderValues[currentEncoder] = 0;
	*/

	lastEncoder[currentEncoder] = currentReadoff;
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <TIM3_IRQHandler+0xe0>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	4619      	mov	r1, r3
 8002d14:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <TIM3_IRQHandler+0xe4>)
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	5453      	strb	r3, [r2, r1]
	//uint8_t buffer[256];
	//sprintf(buffer, "currentReadoff %d index %d encoderValue %d\r\n", currentReadoff, index, encoderValues[0]);
	//CDC_Transmit_FS(buffer, sizeof(buffer));
	//}

	if(currentEncoder == 4) currentEncoder = 0;
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <TIM3_IRQHandler+0xe0>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d103      	bne.n	8002d2c <TIM3_IRQHandler+0x88>
 8002d24:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <TIM3_IRQHandler+0xe0>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	e006      	b.n	8002d3a <TIM3_IRQHandler+0x96>
	else currentEncoder++;
 8002d2c:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <TIM3_IRQHandler+0xe0>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	3301      	adds	r3, #1
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <TIM3_IRQHandler+0xe0>)
 8002d38:	701a      	strb	r2, [r3, #0]

	//select the nth encoder here to allow the mux time to settle
	GPIOC->BRR = (3<<13); //clear GPIO Pins
 8002d3a:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <TIM3_IRQHandler+0xf0>)
 8002d3c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8002d40:	615a      	str	r2, [r3, #20]
	GPIOC->BSRR = ((currentEncoder&3)<<13);
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <TIM3_IRQHandler+0xe0>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	035b      	lsls	r3, r3, #13
 8002d4a:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <TIM3_IRQHandler+0xf0>)
 8002d4c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8002d50:	6113      	str	r3, [r2, #16]
	GPIOA->BRR = (1<<15);
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <TIM3_IRQHandler+0xdc>)
 8002d54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d58:	615a      	str	r2, [r3, #20]
	if(currentEncoder&4) GPIOA->BSRR = (1<<15); //BLOODY SOLDER DAG!!! Shorted out the pins giving the result in DS14
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <TIM3_IRQHandler+0xe0>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <TIM3_IRQHandler+0xcc>
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <TIM3_IRQHandler+0xdc>)
 8002d6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d6e:	611a      	str	r2, [r3, #16]

	//GPIOA->BRR = 1<<6;
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d70:	4809      	ldr	r0, [pc, #36]	; (8002d98 <TIM3_IRQHandler+0xf4>)
 8002d72:	f004 fe0e 	bl	8007992 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40010800 	.word	0x40010800
 8002d84:	2000034c 	.word	0x2000034c
 8002d88:	20000350 	.word	0x20000350
 8002d8c:	2000012c 	.word	0x2000012c
 8002d90:	20000358 	.word	0x20000358
 8002d94:	40011000 	.word	0x40011000
 8002d98:	20000b64 	.word	0x20000b64

08002d9c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

	if(I2C2->SR1 & (1<<2)){ //BTF is set
 8002da0:	4b8b      	ldr	r3, [pc, #556]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 810c 	beq.w	8002fc6 <I2C2_EV_IRQHandler+0x22a>


		if(EEPROMWriting){ //we are in the middle of an EEPROMWrite
 8002dae:	4b89      	ldr	r3, [pc, #548]	; (8002fd4 <I2C2_EV_IRQHandler+0x238>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d02e      	beq.n	8002e16 <I2C2_EV_IRQHandler+0x7a>

			if(outputEEPROMBufferPosition != inputEEPROMBufferPosition){ //we still have data queued
 8002db8:	4b87      	ldr	r3, [pc, #540]	; (8002fd8 <I2C2_EV_IRQHandler+0x23c>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b25a      	sxtb	r2, r3
 8002dbe:	4b87      	ldr	r3, [pc, #540]	; (8002fdc <I2C2_EV_IRQHandler+0x240>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	b25b      	sxtb	r3, r3
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d014      	beq.n	8002df2 <I2C2_EV_IRQHandler+0x56>
				I2C2->DR = eepromDataQueue[outputEEPROMBufferPosition]; //load the current byte into the eeprom
 8002dc8:	4b83      	ldr	r3, [pc, #524]	; (8002fd8 <I2C2_EV_IRQHandler+0x23c>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	b25b      	sxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4b83      	ldr	r3, [pc, #524]	; (8002fe0 <I2C2_EV_IRQHandler+0x244>)
 8002dd2:	5c9a      	ldrb	r2, [r3, r2]
 8002dd4:	4b7e      	ldr	r3, [pc, #504]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002dd6:	611a      	str	r2, [r3, #16]
				outputEEPROMBufferPosition = ((outputEEPROMBufferPosition + 1) % (sizeof(eepromDataQueue)/sizeof(eepromDataQueue[0]))); //advance the output pointer
 8002dd8:	4b7f      	ldr	r3, [pc, #508]	; (8002fd8 <I2C2_EV_IRQHandler+0x23c>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	b25b      	sxtb	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	b25b      	sxtb	r3, r3
 8002de6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dea:	b25a      	sxtb	r2, r3
 8002dec:	4b7a      	ldr	r3, [pc, #488]	; (8002fd8 <I2C2_EV_IRQHandler+0x23c>)
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	e011      	b.n	8002e16 <I2C2_EV_IRQHandler+0x7a>
			}
			else{ //we are done with the EEPROM, clear everything

				I2C2->CR1 |= (1<<9); //send stop condition
 8002df2:	4b77      	ldr	r3, [pc, #476]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a76      	ldr	r2, [pc, #472]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002df8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dfc:	6013      	str	r3, [r2, #0]

				isLCDPrinting = 0; //mark the I2C Bus as free for the next LCD Request
 8002dfe:	4b79      	ldr	r3, [pc, #484]	; (8002fe4 <I2C2_EV_IRQHandler+0x248>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
				EEPROMWriting = 0; //mark the EEPROM Writing process as done
 8002e04:	4b73      	ldr	r3, [pc, #460]	; (8002fd4 <I2C2_EV_IRQHandler+0x238>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]

				I2C2->CR2 &= ~(1<<9); //disable I2C2 Event Interrupt
 8002e0a:	4b71      	ldr	r3, [pc, #452]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4a70      	ldr	r2, [pc, #448]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e14:	6053      	str	r3, [r2, #4]
			}
		}



		if(cycleEN){
 8002e16:	4b74      	ldr	r3, [pc, #464]	; (8002fe8 <I2C2_EV_IRQHandler+0x24c>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d033      	beq.n	8002e88 <I2C2_EV_IRQHandler+0xec>

			GPIOA->BRR = 1<<8; //wait for the MCP23017 to have valid data
 8002e20:	4b72      	ldr	r3, [pc, #456]	; (8002fec <I2C2_EV_IRQHandler+0x250>)
 8002e22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e26:	615a      	str	r2, [r3, #20]
			GPIOA->BRR = 1<<8;
 8002e28:	4b70      	ldr	r3, [pc, #448]	; (8002fec <I2C2_EV_IRQHandler+0x250>)
 8002e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e2e:	615a      	str	r2, [r3, #20]
			GPIOA->BRR = 1<<8;
 8002e30:	4b6e      	ldr	r3, [pc, #440]	; (8002fec <I2C2_EV_IRQHandler+0x250>)
 8002e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e36:	615a      	str	r2, [r3, #20]
			GPIOA->BRR = 1<<8;
 8002e38:	4b6c      	ldr	r3, [pc, #432]	; (8002fec <I2C2_EV_IRQHandler+0x250>)
 8002e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e3e:	615a      	str	r2, [r3, #20]
			GPIOA->BRR = 1<<8;
 8002e40:	4b6a      	ldr	r3, [pc, #424]	; (8002fec <I2C2_EV_IRQHandler+0x250>)
 8002e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e46:	615a      	str	r2, [r3, #20]
			GPIOA->BRR = 1<<8;
 8002e48:	4b68      	ldr	r3, [pc, #416]	; (8002fec <I2C2_EV_IRQHandler+0x250>)
 8002e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e4e:	615a      	str	r2, [r3, #20]
			GPIOA->BRR = 1<<8;
 8002e50:	4b66      	ldr	r3, [pc, #408]	; (8002fec <I2C2_EV_IRQHandler+0x250>)
 8002e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e56:	615a      	str	r2, [r3, #20]
			GPIOA->BSRR = 1<<8; //this pulse is 100ns, aka too short, datasheet specifies min of 230 ns
 8002e58:	4b64      	ldr	r3, [pc, #400]	; (8002fec <I2C2_EV_IRQHandler+0x250>)
 8002e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e5e:	611a      	str	r2, [r3, #16]
			GPIOA->BSRR = 1<<8;
 8002e60:	4b62      	ldr	r3, [pc, #392]	; (8002fec <I2C2_EV_IRQHandler+0x250>)
 8002e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e66:	611a      	str	r2, [r3, #16]
			GPIOA->BSRR = 1<<8;
 8002e68:	4b60      	ldr	r3, [pc, #384]	; (8002fec <I2C2_EV_IRQHandler+0x250>)
 8002e6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e6e:	611a      	str	r2, [r3, #16]
			GPIOA->BSRR = 1<<8;
 8002e70:	4b5e      	ldr	r3, [pc, #376]	; (8002fec <I2C2_EV_IRQHandler+0x250>)
 8002e72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e76:	611a      	str	r2, [r3, #16]
			GPIOA->BSRR = 1<<8;
 8002e78:	4b5c      	ldr	r3, [pc, #368]	; (8002fec <I2C2_EV_IRQHandler+0x250>)
 8002e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e7e:	611a      	str	r2, [r3, #16]
			GPIOA->BRR = 1<<8;
 8002e80:	4b5a      	ldr	r3, [pc, #360]	; (8002fec <I2C2_EV_IRQHandler+0x250>)
 8002e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e86:	615a      	str	r2, [r3, #20]


		}

		if(currentLCDByte == 0 && EEPROMWriting == 0){
 8002e88:	4b59      	ldr	r3, [pc, #356]	; (8002ff0 <I2C2_EV_IRQHandler+0x254>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d117      	bne.n	8002ec2 <I2C2_EV_IRQHandler+0x126>
 8002e92:	4b50      	ldr	r3, [pc, #320]	; (8002fd4 <I2C2_EV_IRQHandler+0x238>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d112      	bne.n	8002ec2 <I2C2_EV_IRQHandler+0x126>

			// we're done with the command byte, set RS
			GPIOB->BSRR = (1<<1);
 8002e9c:	4b55      	ldr	r3, [pc, #340]	; (8002ff4 <I2C2_EV_IRQHandler+0x258>)
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	611a      	str	r2, [r3, #16]
			currentLCDByte++;
 8002ea2:	4b53      	ldr	r3, [pc, #332]	; (8002ff0 <I2C2_EV_IRQHandler+0x254>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	4b50      	ldr	r3, [pc, #320]	; (8002ff0 <I2C2_EV_IRQHandler+0x254>)
 8002eae:	701a      	strb	r2, [r3, #0]
			//I2C2->DR = LCDBuffer[currentLCDByte+currentLCDSection * 9];
			I2C2->DR = LCDBufferTop[currentLCDByte-1];
 8002eb0:	4b4f      	ldr	r3, [pc, #316]	; (8002ff0 <I2C2_EV_IRQHandler+0x254>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	4a4f      	ldr	r2, [pc, #316]	; (8002ff8 <I2C2_EV_IRQHandler+0x25c>)
 8002eba:	5cd2      	ldrb	r2, [r2, r3]
 8002ebc:	4b44      	ldr	r3, [pc, #272]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002ebe:	611a      	str	r2, [r3, #16]
 8002ec0:	e081      	b.n	8002fc6 <I2C2_EV_IRQHandler+0x22a>
			//I2C2->DR = 0x42;
		}
		else if(currentLCDByte == 17 && EEPROMWriting == 0){ //if we are done with the LCD, but the EEPROM is not in the middle of a write to prevent restarting
 8002ec2:	4b4b      	ldr	r3, [pc, #300]	; (8002ff0 <I2C2_EV_IRQHandler+0x254>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b11      	cmp	r3, #17
 8002eca:	d168      	bne.n	8002f9e <I2C2_EV_IRQHandler+0x202>
 8002ecc:	4b41      	ldr	r3, [pc, #260]	; (8002fd4 <I2C2_EV_IRQHandler+0x238>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d163      	bne.n	8002f9e <I2C2_EV_IRQHandler+0x202>

			//we're done with all characters, disable cycleEN
			cycleEN = 0;
 8002ed6:	4b44      	ldr	r3, [pc, #272]	; (8002fe8 <I2C2_EV_IRQHandler+0x24c>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]


			I2C2->CR1 |= (1<<9); //send stop condition
 8002edc:	4b3c      	ldr	r3, [pc, #240]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a3b      	ldr	r2, [pc, #236]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ee6:	6013      	str	r3, [r2, #0]
			I2C2->CR2 &= ~(1<<9); //disable I2C2 Event Interrupt
 8002ee8:	4b39      	ldr	r3, [pc, #228]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4a38      	ldr	r2, [pc, #224]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002eee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ef2:	6053      	str	r3, [r2, #4]

			if(outputEEPROMBufferPosition != inputEEPROMBufferPosition){ //we have data queued in the eeprom fifo, initiate a write
 8002ef4:	4b38      	ldr	r3, [pc, #224]	; (8002fd8 <I2C2_EV_IRQHandler+0x23c>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	b25a      	sxtb	r2, r3
 8002efa:	4b38      	ldr	r3, [pc, #224]	; (8002fdc <I2C2_EV_IRQHandler+0x240>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	b25b      	sxtb	r3, r3
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d048      	beq.n	8002f96 <I2C2_EV_IRQHandler+0x1fa>


				EEPROMWriting = 1; //mark that we are now flushing data out to the EEPROM
 8002f04:	4b33      	ldr	r3, [pc, #204]	; (8002fd4 <I2C2_EV_IRQHandler+0x238>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
				//I2C2->CR2 &= ~(1<<9); //disable I2C2 Event Interrupt
				I2C2->CR1 &= ~(1<<8);
 8002f0a:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a30      	ldr	r2, [pc, #192]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f14:	6013      	str	r3, [r2, #0]
				I2C2->CR1 |= 1<<8; //send start condition
 8002f16:	4b2e      	ldr	r3, [pc, #184]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a2d      	ldr	r2, [pc, #180]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f20:	6013      	str	r3, [r2, #0]

				while ((I2C2->SR1 & 1) == 0); //clear SB
 8002f22:	bf00      	nop
 8002f24:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f9      	beq.n	8002f24 <I2C2_EV_IRQHandler+0x188>
				I2C2->DR = 0xA0; //address the EEPROM
 8002f30:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002f32:	22a0      	movs	r2, #160	; 0xa0
 8002f34:	611a      	str	r2, [r3, #16]
				while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8002f36:	bf00      	nop
 8002f38:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f9      	beq.n	8002f38 <I2C2_EV_IRQHandler+0x19c>
				while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8002f44:	bf00      	nop
 8002f46:	4b22      	ldr	r3, [pc, #136]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f9      	beq.n	8002f46 <I2C2_EV_IRQHandler+0x1aa>
				while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8002f52:	bf00      	nop
 8002f54:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f9      	beq.n	8002f54 <I2C2_EV_IRQHandler+0x1b8>
				I2C2->DR = eepromDataQueue[outputEEPROMBufferPosition]; //load the current byte into the eeprom
 8002f60:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <I2C2_EV_IRQHandler+0x23c>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	b25b      	sxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <I2C2_EV_IRQHandler+0x244>)
 8002f6a:	5c9a      	ldrb	r2, [r3, r2]
 8002f6c:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002f6e:	611a      	str	r2, [r3, #16]
				I2C2->CR2 |= (1<<9); //disable I2C2 Event Interrupt
 8002f70:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a16      	ldr	r2, [pc, #88]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f7a:	6053      	str	r3, [r2, #4]
				outputEEPROMBufferPosition = ((outputEEPROMBufferPosition + 1) % (sizeof(eepromDataQueue)/sizeof(eepromDataQueue[0]))); //advance the output pointer
 8002f7c:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <I2C2_EV_IRQHandler+0x23c>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	b25b      	sxtb	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	3301      	adds	r3, #1
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	b25b      	sxtb	r3, r3
 8002f8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f8e:	b25a      	sxtb	r2, r3
 8002f90:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <I2C2_EV_IRQHandler+0x23c>)
 8002f92:	701a      	strb	r2, [r3, #0]
			if(outputEEPROMBufferPosition != inputEEPROMBufferPosition){ //we have data queued in the eeprom fifo, initiate a write
 8002f94:	e017      	b.n	8002fc6 <I2C2_EV_IRQHandler+0x22a>
			}
			else{

				isLCDPrinting = 0; //mark the I2C Bus as free for the next LCD Request
 8002f96:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <I2C2_EV_IRQHandler+0x248>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
			if(outputEEPROMBufferPosition != inputEEPROMBufferPosition){ //we have data queued in the eeprom fifo, initiate a write
 8002f9c:	e013      	b.n	8002fc6 <I2C2_EV_IRQHandler+0x22a>
			}

		}
		else if(EEPROMWriting == 0){ //only load in LCD Data if we are not in the middle of an EEPROM write
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <I2C2_EV_IRQHandler+0x238>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10e      	bne.n	8002fc6 <I2C2_EV_IRQHandler+0x22a>

			currentLCDByte++;
 8002fa8:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <I2C2_EV_IRQHandler+0x254>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <I2C2_EV_IRQHandler+0x254>)
 8002fb4:	701a      	strb	r2, [r3, #0]
			//load in next byte into DR here
			//I2C2->DR = LCDBuffer[currentLCDByte+currentLCDSection * 9];
			I2C2->DR = LCDBufferTop[currentLCDByte-1];
 8002fb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <I2C2_EV_IRQHandler+0x254>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	4a0e      	ldr	r2, [pc, #56]	; (8002ff8 <I2C2_EV_IRQHandler+0x25c>)
 8002fc0:	5cd2      	ldrb	r2, [r2, r3]
 8002fc2:	4b03      	ldr	r3, [pc, #12]	; (8002fd0 <I2C2_EV_IRQHandler+0x234>)
 8002fc4:	611a      	str	r2, [r3, #16]


	}

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002fc6:	480d      	ldr	r0, [pc, #52]	; (8002ffc <I2C2_EV_IRQHandler+0x260>)
 8002fc8:	f001 f882 	bl	80040d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002fcc:	bf00      	nop
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40005800 	.word	0x40005800
 8002fd4:	2000039a 	.word	0x2000039a
 8002fd8:	20000339 	.word	0x20000339
 8002fdc:	20000338 	.word	0x20000338
 8002fe0:	200005cc 	.word	0x200005cc
 8002fe4:	2000033e 	.word	0x2000033e
 8002fe8:	2000033f 	.word	0x2000033f
 8002fec:	40010800 	.word	0x40010800
 8002ff0:	20000340 	.word	0x20000340
 8002ff4:	40010c00 	.word	0x40010c00
 8002ff8:	20000620 	.word	0x20000620
 8002ffc:	20000b0c 	.word	0x20000b0c

08003000 <_sbrk>:
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	4a14      	ldr	r2, [pc, #80]	; (800305c <_sbrk+0x5c>)
 800300a:	4b15      	ldr	r3, [pc, #84]	; (8003060 <_sbrk+0x60>)
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	4b13      	ldr	r3, [pc, #76]	; (8003064 <_sbrk+0x64>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d102      	bne.n	8003022 <_sbrk+0x22>
 800301c:	4b11      	ldr	r3, [pc, #68]	; (8003064 <_sbrk+0x64>)
 800301e:	4a12      	ldr	r2, [pc, #72]	; (8003068 <_sbrk+0x68>)
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <_sbrk+0x64>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	429a      	cmp	r2, r3
 800302e:	d207      	bcs.n	8003040 <_sbrk+0x40>
 8003030:	f009 f8b2 	bl	800c198 <__errno>
 8003034:	4602      	mov	r2, r0
 8003036:	230c      	movs	r3, #12
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	f04f 33ff 	mov.w	r3, #4294967295
 800303e:	e009      	b.n	8003054 <_sbrk+0x54>
 8003040:	4b08      	ldr	r3, [pc, #32]	; (8003064 <_sbrk+0x64>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	4b07      	ldr	r3, [pc, #28]	; (8003064 <_sbrk+0x64>)
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	4a05      	ldr	r2, [pc, #20]	; (8003064 <_sbrk+0x64>)
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20005000 	.word	0x20005000
 8003060:	00000400 	.word	0x00000400
 8003064:	2000039c 	.word	0x2000039c
 8003068:	20001cc0 	.word	0x20001cc0

0800306c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <Reset_Handler>:
 8003078:	2100      	movs	r1, #0
 800307a:	e003      	b.n	8003084 <LoopCopyDataInit>

0800307c <CopyDataInit>:
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <LoopFillZerobss+0x14>)
 800307e:	585b      	ldr	r3, [r3, r1]
 8003080:	5043      	str	r3, [r0, r1]
 8003082:	3104      	adds	r1, #4

08003084 <LoopCopyDataInit>:
 8003084:	480a      	ldr	r0, [pc, #40]	; (80030b0 <LoopFillZerobss+0x18>)
 8003086:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <LoopFillZerobss+0x1c>)
 8003088:	1842      	adds	r2, r0, r1
 800308a:	429a      	cmp	r2, r3
 800308c:	d3f6      	bcc.n	800307c <CopyDataInit>
 800308e:	4a0a      	ldr	r2, [pc, #40]	; (80030b8 <LoopFillZerobss+0x20>)
 8003090:	e002      	b.n	8003098 <LoopFillZerobss>

08003092 <FillZerobss>:
 8003092:	2300      	movs	r3, #0
 8003094:	f842 3b04 	str.w	r3, [r2], #4

08003098 <LoopFillZerobss>:
 8003098:	4b08      	ldr	r3, [pc, #32]	; (80030bc <LoopFillZerobss+0x24>)
 800309a:	429a      	cmp	r2, r3
 800309c:	d3f9      	bcc.n	8003092 <FillZerobss>
 800309e:	f7ff ffe5 	bl	800306c <SystemInit>
 80030a2:	f009 f87f 	bl	800c1a4 <__libc_init_array>
 80030a6:	f7fd fee9 	bl	8000e7c <main>
 80030aa:	4770      	bx	lr
 80030ac:	0800cdec 	.word	0x0800cdec
 80030b0:	20000000 	.word	0x20000000
 80030b4:	2000031c 	.word	0x2000031c
 80030b8:	2000031c 	.word	0x2000031c
 80030bc:	20001cbc 	.word	0x20001cbc

080030c0 <ADC1_2_IRQHandler>:
 80030c0:	e7fe      	b.n	80030c0 <ADC1_2_IRQHandler>
	...

080030c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c8:	4b08      	ldr	r3, [pc, #32]	; (80030ec <HAL_Init+0x28>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a07      	ldr	r2, [pc, #28]	; (80030ec <HAL_Init+0x28>)
 80030ce:	f043 0310 	orr.w	r3, r3, #16
 80030d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d4:	2003      	movs	r0, #3
 80030d6:	f000 fb2d 	bl	8003734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030da:	2000      	movs	r0, #0
 80030dc:	f000 f808 	bl	80030f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030e0:	f7ff fba2 	bl	8002828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40022000 	.word	0x40022000

080030f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030f8:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_InitTick+0x54>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_InitTick+0x58>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	4619      	mov	r1, r3
 8003102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003106:	fbb3 f3f1 	udiv	r3, r3, r1
 800310a:	fbb2 f3f3 	udiv	r3, r2, r3
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fb45 	bl	800379e <HAL_SYSTICK_Config>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e00e      	b.n	800313c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b0f      	cmp	r3, #15
 8003122:	d80a      	bhi.n	800313a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003124:	2200      	movs	r2, #0
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	f04f 30ff 	mov.w	r0, #4294967295
 800312c:	f000 fb0d 	bl	800374a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003130:	4a06      	ldr	r2, [pc, #24]	; (800314c <HAL_InitTick+0x5c>)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	e000      	b.n	800313c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
}
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	2000013c 	.word	0x2000013c
 8003148:	20000144 	.word	0x20000144
 800314c:	20000140 	.word	0x20000140

08003150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_IncTick+0x1c>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_IncTick+0x20>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4413      	add	r3, r2
 8003160:	4a03      	ldr	r2, [pc, #12]	; (8003170 <HAL_IncTick+0x20>)
 8003162:	6013      	str	r3, [r2, #0]
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	20000144 	.word	0x20000144
 8003170:	20000d34 	.word	0x20000d34

08003174 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return uwTick;
 8003178:	4b02      	ldr	r3, [pc, #8]	; (8003184 <HAL_GetTick+0x10>)
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr
 8003184:	20000d34 	.word	0x20000d34

08003188 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e0be      	b.n	8003328 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d109      	bne.n	80031cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff fb60 	bl	800288c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f9ab 	bl	8003528 <ADC_ConversionStop_Disable>
 80031d2:	4603      	mov	r3, r0
 80031d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f040 8099 	bne.w	8003316 <HAL_ADC_Init+0x18e>
 80031e4:	7dfb      	ldrb	r3, [r7, #23]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f040 8095 	bne.w	8003316 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031f4:	f023 0302 	bic.w	r3, r3, #2
 80031f8:	f043 0202 	orr.w	r2, r3, #2
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003208:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	7b1b      	ldrb	r3, [r3, #12]
 800320e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003210:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	4313      	orrs	r3, r2
 8003216:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003220:	d003      	beq.n	800322a <HAL_ADC_Init+0xa2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d102      	bne.n	8003230 <HAL_ADC_Init+0xa8>
 800322a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800322e:	e000      	b.n	8003232 <HAL_ADC_Init+0xaa>
 8003230:	2300      	movs	r3, #0
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7d1b      	ldrb	r3, [r3, #20]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d119      	bne.n	8003274 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	7b1b      	ldrb	r3, [r3, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	3b01      	subs	r3, #1
 800324e:	035a      	lsls	r2, r3, #13
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	e00b      	b.n	8003274 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	f043 0201 	orr.w	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	430a      	orrs	r2, r1
 8003286:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	4b28      	ldr	r3, [pc, #160]	; (8003330 <HAL_ADC_Init+0x1a8>)
 8003290:	4013      	ands	r3, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	430b      	orrs	r3, r1
 800329a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a4:	d003      	beq.n	80032ae <HAL_ADC_Init+0x126>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d104      	bne.n	80032b8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	051b      	lsls	r3, r3, #20
 80032b6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	4b18      	ldr	r3, [pc, #96]	; (8003334 <HAL_ADC_Init+0x1ac>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d10b      	bne.n	80032f4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	f023 0303 	bic.w	r3, r3, #3
 80032ea:	f043 0201 	orr.w	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032f2:	e018      	b.n	8003326 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	f023 0312 	bic.w	r3, r3, #18
 80032fc:	f043 0210 	orr.w	r2, r3, #16
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	f043 0201 	orr.w	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003314:	e007      	b.n	8003326 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	f043 0210 	orr.w	r2, r3, #16
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003326:	7dfb      	ldrb	r3, [r7, #23]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	ffe1f7fd 	.word	0xffe1f7fd
 8003334:	ff1f0efe 	.word	0xff1f0efe

08003338 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x20>
 8003354:	2302      	movs	r3, #2
 8003356:	e0dc      	b.n	8003512 <HAL_ADC_ConfigChannel+0x1da>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b06      	cmp	r3, #6
 8003366:	d81c      	bhi.n	80033a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	3b05      	subs	r3, #5
 800337a:	221f      	movs	r2, #31
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	4019      	ands	r1, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	3b05      	subs	r3, #5
 8003394:	fa00 f203 	lsl.w	r2, r0, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	635a      	str	r2, [r3, #52]	; 0x34
 80033a0:	e03c      	b.n	800341c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b0c      	cmp	r3, #12
 80033a8:	d81c      	bhi.n	80033e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	3b23      	subs	r3, #35	; 0x23
 80033bc:	221f      	movs	r2, #31
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	4019      	ands	r1, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6818      	ldr	r0, [r3, #0]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	3b23      	subs	r3, #35	; 0x23
 80033d6:	fa00 f203 	lsl.w	r2, r0, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
 80033e2:	e01b      	b.n	800341c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	3b41      	subs	r3, #65	; 0x41
 80033f6:	221f      	movs	r2, #31
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	4019      	ands	r1, r3
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	3b41      	subs	r3, #65	; 0x41
 8003410:	fa00 f203 	lsl.w	r2, r0, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b09      	cmp	r3, #9
 8003422:	d91c      	bls.n	800345e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68d9      	ldr	r1, [r3, #12]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	3b1e      	subs	r3, #30
 8003436:	2207      	movs	r2, #7
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	4019      	ands	r1, r3
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	6898      	ldr	r0, [r3, #8]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4613      	mov	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4413      	add	r3, r2
 800344e:	3b1e      	subs	r3, #30
 8003450:	fa00 f203 	lsl.w	r2, r0, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	60da      	str	r2, [r3, #12]
 800345c:	e019      	b.n	8003492 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6919      	ldr	r1, [r3, #16]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	2207      	movs	r2, #7
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	4019      	ands	r1, r3
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	6898      	ldr	r0, [r3, #8]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	fa00 f203 	lsl.w	r2, r0, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b10      	cmp	r3, #16
 8003498:	d003      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800349e:	2b11      	cmp	r3, #17
 80034a0:	d132      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1d      	ldr	r2, [pc, #116]	; (800351c <HAL_ADC_ConfigChannel+0x1e4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d125      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d126      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80034c8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b10      	cmp	r3, #16
 80034d0:	d11a      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034d2:	4b13      	ldr	r3, [pc, #76]	; (8003520 <HAL_ADC_ConfigChannel+0x1e8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a13      	ldr	r2, [pc, #76]	; (8003524 <HAL_ADC_ConfigChannel+0x1ec>)
 80034d8:	fba2 2303 	umull	r2, r3, r2, r3
 80034dc:	0c9a      	lsrs	r2, r3, #18
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034e8:	e002      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f9      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x1b2>
 80034f6:	e007      	b.n	8003508 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	f043 0220 	orr.w	r2, r3, #32
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003510:	7bfb      	ldrb	r3, [r7, #15]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr
 800351c:	40012400 	.word	0x40012400
 8003520:	2000013c 	.word	0x2000013c
 8003524:	431bde83 	.word	0x431bde83

08003528 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d127      	bne.n	8003592 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003552:	f7ff fe0f 	bl	8003174 <HAL_GetTick>
 8003556:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003558:	e014      	b.n	8003584 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800355a:	f7ff fe0b 	bl	8003174 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d90d      	bls.n	8003584 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	f043 0210 	orr.w	r2, r3, #16
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	f043 0201 	orr.w	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e007      	b.n	8003594 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b01      	cmp	r3, #1
 8003590:	d0e3      	beq.n	800355a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <__NVIC_SetPriorityGrouping>:
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035ac:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <__NVIC_SetPriorityGrouping+0x44>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035b8:	4013      	ands	r3, r2
 80035ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ce:	4a04      	ldr	r2, [pc, #16]	; (80035e0 <__NVIC_SetPriorityGrouping+0x44>)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	60d3      	str	r3, [r2, #12]
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e8:	4b04      	ldr	r3, [pc, #16]	; (80035fc <__NVIC_GetPriorityGrouping+0x18>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	0a1b      	lsrs	r3, r3, #8
 80035ee:	f003 0307 	and.w	r3, r3, #7
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	e000ed00 	.word	0xe000ed00

08003600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800360a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360e:	2b00      	cmp	r3, #0
 8003610:	db0b      	blt.n	800362a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	f003 021f 	and.w	r2, r3, #31
 8003618:	4906      	ldr	r1, [pc, #24]	; (8003634 <__NVIC_EnableIRQ+0x34>)
 800361a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	2001      	movs	r0, #1
 8003622:	fa00 f202 	lsl.w	r2, r0, r2
 8003626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr
 8003634:	e000e100 	.word	0xe000e100

08003638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	6039      	str	r1, [r7, #0]
 8003642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003648:	2b00      	cmp	r3, #0
 800364a:	db0a      	blt.n	8003662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	b2da      	uxtb	r2, r3
 8003650:	490c      	ldr	r1, [pc, #48]	; (8003684 <__NVIC_SetPriority+0x4c>)
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	0112      	lsls	r2, r2, #4
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	440b      	add	r3, r1
 800365c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003660:	e00a      	b.n	8003678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	b2da      	uxtb	r2, r3
 8003666:	4908      	ldr	r1, [pc, #32]	; (8003688 <__NVIC_SetPriority+0x50>)
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	3b04      	subs	r3, #4
 8003670:	0112      	lsls	r2, r2, #4
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	440b      	add	r3, r1
 8003676:	761a      	strb	r2, [r3, #24]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	e000e100 	.word	0xe000e100
 8003688:	e000ed00 	.word	0xe000ed00

0800368c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800368c:	b480      	push	{r7}
 800368e:	b089      	sub	sp, #36	; 0x24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f1c3 0307 	rsb	r3, r3, #7
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	bf28      	it	cs
 80036aa:	2304      	movcs	r3, #4
 80036ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3304      	adds	r3, #4
 80036b2:	2b06      	cmp	r3, #6
 80036b4:	d902      	bls.n	80036bc <NVIC_EncodePriority+0x30>
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3b03      	subs	r3, #3
 80036ba:	e000      	b.n	80036be <NVIC_EncodePriority+0x32>
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c0:	f04f 32ff 	mov.w	r2, #4294967295
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43da      	mvns	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	401a      	ands	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036d4:	f04f 31ff 	mov.w	r1, #4294967295
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	fa01 f303 	lsl.w	r3, r1, r3
 80036de:	43d9      	mvns	r1, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e4:	4313      	orrs	r3, r2
         );
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3724      	adds	r7, #36	; 0x24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003700:	d301      	bcc.n	8003706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003702:	2301      	movs	r3, #1
 8003704:	e00f      	b.n	8003726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003706:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <SysTick_Config+0x40>)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3b01      	subs	r3, #1
 800370c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800370e:	210f      	movs	r1, #15
 8003710:	f04f 30ff 	mov.w	r0, #4294967295
 8003714:	f7ff ff90 	bl	8003638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <SysTick_Config+0x40>)
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800371e:	4b04      	ldr	r3, [pc, #16]	; (8003730 <SysTick_Config+0x40>)
 8003720:	2207      	movs	r2, #7
 8003722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	e000e010 	.word	0xe000e010

08003734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff ff2d 	bl	800359c <__NVIC_SetPriorityGrouping>
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	4603      	mov	r3, r0
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800375c:	f7ff ff42 	bl	80035e4 <__NVIC_GetPriorityGrouping>
 8003760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	6978      	ldr	r0, [r7, #20]
 8003768:	f7ff ff90 	bl	800368c <NVIC_EncodePriority>
 800376c:	4602      	mov	r2, r0
 800376e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003772:	4611      	mov	r1, r2
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff ff5f 	bl	8003638 <__NVIC_SetPriority>
}
 800377a:	bf00      	nop
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	4603      	mov	r3, r0
 800378a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800378c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff ff35 	bl	8003600 <__NVIC_EnableIRQ>
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff ffa2 	bl	80036f0 <SysTick_Config>
 80037ac:	4603      	mov	r3, r0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e043      	b.n	8003856 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	4b22      	ldr	r3, [pc, #136]	; (8003860 <HAL_DMA_Init+0xa8>)
 80037d6:	4413      	add	r3, r2
 80037d8:	4a22      	ldr	r2, [pc, #136]	; (8003864 <HAL_DMA_Init+0xac>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	091b      	lsrs	r3, r3, #4
 80037e0:	009a      	lsls	r2, r3, #2
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <HAL_DMA_Init+0xb0>)
 80037ea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003802:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003806:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003810:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003828:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	bffdfff8 	.word	0xbffdfff8
 8003864:	cccccccd 	.word	0xcccccccd
 8003868:	40020000 	.word	0x40020000

0800386c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800387e:	2b02      	cmp	r3, #2
 8003880:	d005      	beq.n	800388e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2204      	movs	r2, #4
 8003886:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
 800388c:	e051      	b.n	8003932 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 020e 	bic.w	r2, r2, #14
 800389c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a22      	ldr	r2, [pc, #136]	; (800393c <HAL_DMA_Abort_IT+0xd0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d029      	beq.n	800390c <HAL_DMA_Abort_IT+0xa0>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a20      	ldr	r2, [pc, #128]	; (8003940 <HAL_DMA_Abort_IT+0xd4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d022      	beq.n	8003908 <HAL_DMA_Abort_IT+0x9c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1f      	ldr	r2, [pc, #124]	; (8003944 <HAL_DMA_Abort_IT+0xd8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d01a      	beq.n	8003902 <HAL_DMA_Abort_IT+0x96>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <HAL_DMA_Abort_IT+0xdc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d012      	beq.n	80038fc <HAL_DMA_Abort_IT+0x90>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1c      	ldr	r2, [pc, #112]	; (800394c <HAL_DMA_Abort_IT+0xe0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00a      	beq.n	80038f6 <HAL_DMA_Abort_IT+0x8a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1a      	ldr	r2, [pc, #104]	; (8003950 <HAL_DMA_Abort_IT+0xe4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d102      	bne.n	80038f0 <HAL_DMA_Abort_IT+0x84>
 80038ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80038ee:	e00e      	b.n	800390e <HAL_DMA_Abort_IT+0xa2>
 80038f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038f4:	e00b      	b.n	800390e <HAL_DMA_Abort_IT+0xa2>
 80038f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038fa:	e008      	b.n	800390e <HAL_DMA_Abort_IT+0xa2>
 80038fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003900:	e005      	b.n	800390e <HAL_DMA_Abort_IT+0xa2>
 8003902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003906:	e002      	b.n	800390e <HAL_DMA_Abort_IT+0xa2>
 8003908:	2310      	movs	r3, #16
 800390a:	e000      	b.n	800390e <HAL_DMA_Abort_IT+0xa2>
 800390c:	2301      	movs	r3, #1
 800390e:	4a11      	ldr	r2, [pc, #68]	; (8003954 <HAL_DMA_Abort_IT+0xe8>)
 8003910:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
    } 
  }
  return status;
 8003932:	7bfb      	ldrb	r3, [r7, #15]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40020008 	.word	0x40020008
 8003940:	4002001c 	.word	0x4002001c
 8003944:	40020030 	.word	0x40020030
 8003948:	40020044 	.word	0x40020044
 800394c:	40020058 	.word	0x40020058
 8003950:	4002006c 	.word	0x4002006c
 8003954:	40020000 	.word	0x40020000

08003958 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	2204      	movs	r2, #4
 8003976:	409a      	lsls	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d04f      	beq.n	8003a20 <HAL_DMA_IRQHandler+0xc8>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d04a      	beq.n	8003a20 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b00      	cmp	r3, #0
 8003996:	d107      	bne.n	80039a8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0204 	bic.w	r2, r2, #4
 80039a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a66      	ldr	r2, [pc, #408]	; (8003b48 <HAL_DMA_IRQHandler+0x1f0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d029      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xae>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a65      	ldr	r2, [pc, #404]	; (8003b4c <HAL_DMA_IRQHandler+0x1f4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d022      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xaa>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a63      	ldr	r2, [pc, #396]	; (8003b50 <HAL_DMA_IRQHandler+0x1f8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d01a      	beq.n	80039fc <HAL_DMA_IRQHandler+0xa4>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a62      	ldr	r2, [pc, #392]	; (8003b54 <HAL_DMA_IRQHandler+0x1fc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d012      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x9e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a60      	ldr	r2, [pc, #384]	; (8003b58 <HAL_DMA_IRQHandler+0x200>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00a      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x98>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a5f      	ldr	r2, [pc, #380]	; (8003b5c <HAL_DMA_IRQHandler+0x204>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d102      	bne.n	80039ea <HAL_DMA_IRQHandler+0x92>
 80039e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039e8:	e00e      	b.n	8003a08 <HAL_DMA_IRQHandler+0xb0>
 80039ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80039ee:	e00b      	b.n	8003a08 <HAL_DMA_IRQHandler+0xb0>
 80039f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039f4:	e008      	b.n	8003a08 <HAL_DMA_IRQHandler+0xb0>
 80039f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039fa:	e005      	b.n	8003a08 <HAL_DMA_IRQHandler+0xb0>
 80039fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a00:	e002      	b.n	8003a08 <HAL_DMA_IRQHandler+0xb0>
 8003a02:	2340      	movs	r3, #64	; 0x40
 8003a04:	e000      	b.n	8003a08 <HAL_DMA_IRQHandler+0xb0>
 8003a06:	2304      	movs	r3, #4
 8003a08:	4a55      	ldr	r2, [pc, #340]	; (8003b60 <HAL_DMA_IRQHandler+0x208>)
 8003a0a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8094 	beq.w	8003b3e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003a1e:	e08e      	b.n	8003b3e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	2202      	movs	r2, #2
 8003a26:	409a      	lsls	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d056      	beq.n	8003ade <HAL_DMA_IRQHandler+0x186>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d051      	beq.n	8003ade <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10b      	bne.n	8003a60 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 020a 	bic.w	r2, r2, #10
 8003a56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a38      	ldr	r2, [pc, #224]	; (8003b48 <HAL_DMA_IRQHandler+0x1f0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d029      	beq.n	8003abe <HAL_DMA_IRQHandler+0x166>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a37      	ldr	r2, [pc, #220]	; (8003b4c <HAL_DMA_IRQHandler+0x1f4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d022      	beq.n	8003aba <HAL_DMA_IRQHandler+0x162>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a35      	ldr	r2, [pc, #212]	; (8003b50 <HAL_DMA_IRQHandler+0x1f8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01a      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x15c>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a34      	ldr	r2, [pc, #208]	; (8003b54 <HAL_DMA_IRQHandler+0x1fc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d012      	beq.n	8003aae <HAL_DMA_IRQHandler+0x156>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a32      	ldr	r2, [pc, #200]	; (8003b58 <HAL_DMA_IRQHandler+0x200>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00a      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x150>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a31      	ldr	r2, [pc, #196]	; (8003b5c <HAL_DMA_IRQHandler+0x204>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d102      	bne.n	8003aa2 <HAL_DMA_IRQHandler+0x14a>
 8003a9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003aa0:	e00e      	b.n	8003ac0 <HAL_DMA_IRQHandler+0x168>
 8003aa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aa6:	e00b      	b.n	8003ac0 <HAL_DMA_IRQHandler+0x168>
 8003aa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aac:	e008      	b.n	8003ac0 <HAL_DMA_IRQHandler+0x168>
 8003aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ab2:	e005      	b.n	8003ac0 <HAL_DMA_IRQHandler+0x168>
 8003ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ab8:	e002      	b.n	8003ac0 <HAL_DMA_IRQHandler+0x168>
 8003aba:	2320      	movs	r3, #32
 8003abc:	e000      	b.n	8003ac0 <HAL_DMA_IRQHandler+0x168>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	4a27      	ldr	r2, [pc, #156]	; (8003b60 <HAL_DMA_IRQHandler+0x208>)
 8003ac2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d034      	beq.n	8003b3e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003adc:	e02f      	b.n	8003b3e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	2208      	movs	r2, #8
 8003ae4:	409a      	lsls	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d028      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x1e8>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d023      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 020e 	bic.w	r2, r2, #14
 8003b06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b10:	2101      	movs	r1, #1
 8003b12:	fa01 f202 	lsl.w	r2, r1, r2
 8003b16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d004      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	4798      	blx	r3
    }
  }
  return;
 8003b3e:	bf00      	nop
 8003b40:	bf00      	nop
}
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40020008 	.word	0x40020008
 8003b4c:	4002001c 	.word	0x4002001c
 8003b50:	40020030 	.word	0x40020030
 8003b54:	40020044 	.word	0x40020044
 8003b58:	40020058 	.word	0x40020058
 8003b5c:	4002006c 	.word	0x4002006c
 8003b60:	40020000 	.word	0x40020000

08003b64 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr

08003b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b08b      	sub	sp, #44	; 0x2c
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b86:	2300      	movs	r3, #0
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b8e:	e127      	b.n	8003de0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b90:	2201      	movs	r2, #1
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	f040 8116 	bne.w	8003dda <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b12      	cmp	r3, #18
 8003bb4:	d034      	beq.n	8003c20 <HAL_GPIO_Init+0xa4>
 8003bb6:	2b12      	cmp	r3, #18
 8003bb8:	d80d      	bhi.n	8003bd6 <HAL_GPIO_Init+0x5a>
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d02b      	beq.n	8003c16 <HAL_GPIO_Init+0x9a>
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d804      	bhi.n	8003bcc <HAL_GPIO_Init+0x50>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d031      	beq.n	8003c2a <HAL_GPIO_Init+0xae>
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d01c      	beq.n	8003c04 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003bca:	e048      	b.n	8003c5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d043      	beq.n	8003c58 <HAL_GPIO_Init+0xdc>
 8003bd0:	2b11      	cmp	r3, #17
 8003bd2:	d01b      	beq.n	8003c0c <HAL_GPIO_Init+0x90>
          break;
 8003bd4:	e043      	b.n	8003c5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003bd6:	4a89      	ldr	r2, [pc, #548]	; (8003dfc <HAL_GPIO_Init+0x280>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d026      	beq.n	8003c2a <HAL_GPIO_Init+0xae>
 8003bdc:	4a87      	ldr	r2, [pc, #540]	; (8003dfc <HAL_GPIO_Init+0x280>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d806      	bhi.n	8003bf0 <HAL_GPIO_Init+0x74>
 8003be2:	4a87      	ldr	r2, [pc, #540]	; (8003e00 <HAL_GPIO_Init+0x284>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d020      	beq.n	8003c2a <HAL_GPIO_Init+0xae>
 8003be8:	4a86      	ldr	r2, [pc, #536]	; (8003e04 <HAL_GPIO_Init+0x288>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d01d      	beq.n	8003c2a <HAL_GPIO_Init+0xae>
          break;
 8003bee:	e036      	b.n	8003c5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003bf0:	4a85      	ldr	r2, [pc, #532]	; (8003e08 <HAL_GPIO_Init+0x28c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d019      	beq.n	8003c2a <HAL_GPIO_Init+0xae>
 8003bf6:	4a85      	ldr	r2, [pc, #532]	; (8003e0c <HAL_GPIO_Init+0x290>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d016      	beq.n	8003c2a <HAL_GPIO_Init+0xae>
 8003bfc:	4a84      	ldr	r2, [pc, #528]	; (8003e10 <HAL_GPIO_Init+0x294>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d013      	beq.n	8003c2a <HAL_GPIO_Init+0xae>
          break;
 8003c02:	e02c      	b.n	8003c5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	623b      	str	r3, [r7, #32]
          break;
 8003c0a:	e028      	b.n	8003c5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	3304      	adds	r3, #4
 8003c12:	623b      	str	r3, [r7, #32]
          break;
 8003c14:	e023      	b.n	8003c5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	3308      	adds	r3, #8
 8003c1c:	623b      	str	r3, [r7, #32]
          break;
 8003c1e:	e01e      	b.n	8003c5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	330c      	adds	r3, #12
 8003c26:	623b      	str	r3, [r7, #32]
          break;
 8003c28:	e019      	b.n	8003c5e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c32:	2304      	movs	r3, #4
 8003c34:	623b      	str	r3, [r7, #32]
          break;
 8003c36:	e012      	b.n	8003c5e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d105      	bne.n	8003c4c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c40:	2308      	movs	r3, #8
 8003c42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	611a      	str	r2, [r3, #16]
          break;
 8003c4a:	e008      	b.n	8003c5e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	615a      	str	r2, [r3, #20]
          break;
 8003c56:	e002      	b.n	8003c5e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	623b      	str	r3, [r7, #32]
          break;
 8003c5c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	2bff      	cmp	r3, #255	; 0xff
 8003c62:	d801      	bhi.n	8003c68 <HAL_GPIO_Init+0xec>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	e001      	b.n	8003c6c <HAL_GPIO_Init+0xf0>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	2bff      	cmp	r3, #255	; 0xff
 8003c72:	d802      	bhi.n	8003c7a <HAL_GPIO_Init+0xfe>
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	e002      	b.n	8003c80 <HAL_GPIO_Init+0x104>
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	3b08      	subs	r3, #8
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	210f      	movs	r1, #15
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	401a      	ands	r2, r3
 8003c92:	6a39      	ldr	r1, [r7, #32]
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8096 	beq.w	8003dda <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003cae:	4b59      	ldr	r3, [pc, #356]	; (8003e14 <HAL_GPIO_Init+0x298>)
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	4a58      	ldr	r2, [pc, #352]	; (8003e14 <HAL_GPIO_Init+0x298>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6193      	str	r3, [r2, #24]
 8003cba:	4b56      	ldr	r3, [pc, #344]	; (8003e14 <HAL_GPIO_Init+0x298>)
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003cc6:	4a54      	ldr	r2, [pc, #336]	; (8003e18 <HAL_GPIO_Init+0x29c>)
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	089b      	lsrs	r3, r3, #2
 8003ccc:	3302      	adds	r3, #2
 8003cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	220f      	movs	r2, #15
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a4b      	ldr	r2, [pc, #300]	; (8003e1c <HAL_GPIO_Init+0x2a0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d013      	beq.n	8003d1a <HAL_GPIO_Init+0x19e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a4a      	ldr	r2, [pc, #296]	; (8003e20 <HAL_GPIO_Init+0x2a4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00d      	beq.n	8003d16 <HAL_GPIO_Init+0x19a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a49      	ldr	r2, [pc, #292]	; (8003e24 <HAL_GPIO_Init+0x2a8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d007      	beq.n	8003d12 <HAL_GPIO_Init+0x196>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a48      	ldr	r2, [pc, #288]	; (8003e28 <HAL_GPIO_Init+0x2ac>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d101      	bne.n	8003d0e <HAL_GPIO_Init+0x192>
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e006      	b.n	8003d1c <HAL_GPIO_Init+0x1a0>
 8003d0e:	2304      	movs	r3, #4
 8003d10:	e004      	b.n	8003d1c <HAL_GPIO_Init+0x1a0>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e002      	b.n	8003d1c <HAL_GPIO_Init+0x1a0>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_GPIO_Init+0x1a0>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1e:	f002 0203 	and.w	r2, r2, #3
 8003d22:	0092      	lsls	r2, r2, #2
 8003d24:	4093      	lsls	r3, r2
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d2c:	493a      	ldr	r1, [pc, #232]	; (8003e18 <HAL_GPIO_Init+0x29c>)
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	089b      	lsrs	r3, r3, #2
 8003d32:	3302      	adds	r3, #2
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d006      	beq.n	8003d54 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d46:	4b39      	ldr	r3, [pc, #228]	; (8003e2c <HAL_GPIO_Init+0x2b0>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	4938      	ldr	r1, [pc, #224]	; (8003e2c <HAL_GPIO_Init+0x2b0>)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]
 8003d52:	e006      	b.n	8003d62 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d54:	4b35      	ldr	r3, [pc, #212]	; (8003e2c <HAL_GPIO_Init+0x2b0>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	4933      	ldr	r1, [pc, #204]	; (8003e2c <HAL_GPIO_Init+0x2b0>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d006      	beq.n	8003d7c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d6e:	4b2f      	ldr	r3, [pc, #188]	; (8003e2c <HAL_GPIO_Init+0x2b0>)
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	492e      	ldr	r1, [pc, #184]	; (8003e2c <HAL_GPIO_Init+0x2b0>)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]
 8003d7a:	e006      	b.n	8003d8a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d7c:	4b2b      	ldr	r3, [pc, #172]	; (8003e2c <HAL_GPIO_Init+0x2b0>)
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	43db      	mvns	r3, r3
 8003d84:	4929      	ldr	r1, [pc, #164]	; (8003e2c <HAL_GPIO_Init+0x2b0>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d006      	beq.n	8003da4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d96:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <HAL_GPIO_Init+0x2b0>)
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	4924      	ldr	r1, [pc, #144]	; (8003e2c <HAL_GPIO_Init+0x2b0>)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
 8003da2:	e006      	b.n	8003db2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003da4:	4b21      	ldr	r3, [pc, #132]	; (8003e2c <HAL_GPIO_Init+0x2b0>)
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	43db      	mvns	r3, r3
 8003dac:	491f      	ldr	r1, [pc, #124]	; (8003e2c <HAL_GPIO_Init+0x2b0>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d006      	beq.n	8003dcc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003dbe:	4b1b      	ldr	r3, [pc, #108]	; (8003e2c <HAL_GPIO_Init+0x2b0>)
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	491a      	ldr	r1, [pc, #104]	; (8003e2c <HAL_GPIO_Init+0x2b0>)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60cb      	str	r3, [r1, #12]
 8003dca:	e006      	b.n	8003dda <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003dcc:	4b17      	ldr	r3, [pc, #92]	; (8003e2c <HAL_GPIO_Init+0x2b0>)
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	4915      	ldr	r1, [pc, #84]	; (8003e2c <HAL_GPIO_Init+0x2b0>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	3301      	adds	r3, #1
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f47f aed0 	bne.w	8003b90 <HAL_GPIO_Init+0x14>
  }
}
 8003df0:	bf00      	nop
 8003df2:	372c      	adds	r7, #44	; 0x2c
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	10210000 	.word	0x10210000
 8003e00:	10110000 	.word	0x10110000
 8003e04:	10120000 	.word	0x10120000
 8003e08:	10310000 	.word	0x10310000
 8003e0c:	10320000 	.word	0x10320000
 8003e10:	10220000 	.word	0x10220000
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40010000 	.word	0x40010000
 8003e1c:	40010800 	.word	0x40010800
 8003e20:	40010c00 	.word	0x40010c00
 8003e24:	40011000 	.word	0x40011000
 8003e28:	40011400 	.word	0x40011400
 8003e2c:	40010400 	.word	0x40010400

08003e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	807b      	strh	r3, [r7, #2]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e40:	787b      	ldrb	r3, [r7, #1]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e46:	887a      	ldrh	r2, [r7, #2]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e4c:	e003      	b.n	8003e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e4e:	887b      	ldrh	r3, [r7, #2]
 8003e50:	041a      	lsls	r2, r3, #16
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	611a      	str	r2, [r3, #16]
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr

08003e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e11f      	b.n	80040b2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fe fd3c 	bl	8002904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2224      	movs	r2, #36	; 0x24
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0201 	bic.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ec4:	f003 fc2e 	bl	8007724 <HAL_RCC_GetPCLK1Freq>
 8003ec8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	4a7b      	ldr	r2, [pc, #492]	; (80040bc <HAL_I2C_Init+0x25c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d807      	bhi.n	8003ee4 <HAL_I2C_Init+0x84>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4a7a      	ldr	r2, [pc, #488]	; (80040c0 <HAL_I2C_Init+0x260>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	bf94      	ite	ls
 8003edc:	2301      	movls	r3, #1
 8003ede:	2300      	movhi	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	e006      	b.n	8003ef2 <HAL_I2C_Init+0x92>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4a77      	ldr	r2, [pc, #476]	; (80040c4 <HAL_I2C_Init+0x264>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	bf94      	ite	ls
 8003eec:	2301      	movls	r3, #1
 8003eee:	2300      	movhi	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e0db      	b.n	80040b2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4a72      	ldr	r2, [pc, #456]	; (80040c8 <HAL_I2C_Init+0x268>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	0c9b      	lsrs	r3, r3, #18
 8003f04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	4a64      	ldr	r2, [pc, #400]	; (80040bc <HAL_I2C_Init+0x25c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d802      	bhi.n	8003f34 <HAL_I2C_Init+0xd4>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	3301      	adds	r3, #1
 8003f32:	e009      	b.n	8003f48 <HAL_I2C_Init+0xe8>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	4a63      	ldr	r2, [pc, #396]	; (80040cc <HAL_I2C_Init+0x26c>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	099b      	lsrs	r3, r3, #6
 8003f46:	3301      	adds	r3, #1
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6812      	ldr	r2, [r2, #0]
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	4956      	ldr	r1, [pc, #344]	; (80040bc <HAL_I2C_Init+0x25c>)
 8003f64:	428b      	cmp	r3, r1
 8003f66:	d80d      	bhi.n	8003f84 <HAL_I2C_Init+0x124>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	1e59      	subs	r1, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f76:	3301      	adds	r3, #1
 8003f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	bf38      	it	cc
 8003f80:	2304      	movcc	r3, #4
 8003f82:	e04f      	b.n	8004024 <HAL_I2C_Init+0x1c4>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d111      	bne.n	8003fb0 <HAL_I2C_Init+0x150>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	1e58      	subs	r0, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6859      	ldr	r1, [r3, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	440b      	add	r3, r1
 8003f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	e012      	b.n	8003fd6 <HAL_I2C_Init+0x176>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	1e58      	subs	r0, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	0099      	lsls	r1, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	bf0c      	ite	eq
 8003fd0:	2301      	moveq	r3, #1
 8003fd2:	2300      	movne	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_I2C_Init+0x17e>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e022      	b.n	8004024 <HAL_I2C_Init+0x1c4>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10e      	bne.n	8004004 <HAL_I2C_Init+0x1a4>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1e58      	subs	r0, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6859      	ldr	r1, [r3, #4]
 8003fee:	460b      	mov	r3, r1
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	440b      	add	r3, r1
 8003ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004002:	e00f      	b.n	8004024 <HAL_I2C_Init+0x1c4>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1e58      	subs	r0, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6859      	ldr	r1, [r3, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	0099      	lsls	r1, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	fbb0 f3f3 	udiv	r3, r0, r3
 800401a:	3301      	adds	r3, #1
 800401c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	6809      	ldr	r1, [r1, #0]
 8004028:	4313      	orrs	r3, r2
 800402a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69da      	ldr	r2, [r3, #28]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6911      	ldr	r1, [r2, #16]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68d2      	ldr	r2, [r2, #12]
 800405e:	4311      	orrs	r1, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	430b      	orrs	r3, r1
 8004066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695a      	ldr	r2, [r3, #20]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	000186a0 	.word	0x000186a0
 80040c0:	001e847f 	.word	0x001e847f
 80040c4:	003d08ff 	.word	0x003d08ff
 80040c8:	431bde83 	.word	0x431bde83
 80040cc:	10624dd3 	.word	0x10624dd3

080040d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d003      	beq.n	8004108 <HAL_I2C_EV_IRQHandler+0x38>
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	2b40      	cmp	r3, #64	; 0x40
 8004104:	f040 80bd 	bne.w	8004282 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10d      	bne.n	800413e <HAL_I2C_EV_IRQHandler+0x6e>
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004128:	d003      	beq.n	8004132 <HAL_I2C_EV_IRQHandler+0x62>
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004130:	d101      	bne.n	8004136 <HAL_I2C_EV_IRQHandler+0x66>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <HAL_I2C_EV_IRQHandler+0x68>
 8004136:	2300      	movs	r3, #0
 8004138:	2b01      	cmp	r3, #1
 800413a:	f000 812e 	beq.w	800439a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00c      	beq.n	8004162 <HAL_I2C_EV_IRQHandler+0x92>
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	0a5b      	lsrs	r3, r3, #9
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d006      	beq.n	8004162 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f001 fb39 	bl	80057cc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 fcb1 	bl	8004ac2 <I2C_Master_SB>
 8004160:	e08e      	b.n	8004280 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	08db      	lsrs	r3, r3, #3
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d009      	beq.n	8004182 <HAL_I2C_EV_IRQHandler+0xb2>
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	0a5b      	lsrs	r3, r3, #9
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fd26 	bl	8004bcc <I2C_Master_ADD10>
 8004180:	e07e      	b.n	8004280 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	085b      	lsrs	r3, r3, #1
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d009      	beq.n	80041a2 <HAL_I2C_EV_IRQHandler+0xd2>
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	0a5b      	lsrs	r3, r3, #9
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fd3f 	bl	8004c1e <I2C_Master_ADDR>
 80041a0:	e06e      	b.n	8004280 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	089b      	lsrs	r3, r3, #2
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d037      	beq.n	800421e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041bc:	f000 80ef 	beq.w	800439e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	09db      	lsrs	r3, r3, #7
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00f      	beq.n	80041ec <HAL_I2C_EV_IRQHandler+0x11c>
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	0a9b      	lsrs	r3, r3, #10
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d009      	beq.n	80041ec <HAL_I2C_EV_IRQHandler+0x11c>
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	089b      	lsrs	r3, r3, #2
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d103      	bne.n	80041ec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f93e 	bl	8004466 <I2C_MasterTransmit_TXE>
 80041ea:	e049      	b.n	8004280 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	089b      	lsrs	r3, r3, #2
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80d2 	beq.w	800439e <HAL_I2C_EV_IRQHandler+0x2ce>
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	0a5b      	lsrs	r3, r3, #9
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 80cb 	beq.w	800439e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	2b10      	cmp	r3, #16
 800420c:	d103      	bne.n	8004216 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f9c5 	bl	800459e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004214:	e0c3      	b.n	800439e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fa29 	bl	800466e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800421c:	e0bf      	b.n	800439e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800422c:	f000 80b7 	beq.w	800439e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	099b      	lsrs	r3, r3, #6
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00f      	beq.n	800425c <HAL_I2C_EV_IRQHandler+0x18c>
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	0a9b      	lsrs	r3, r3, #10
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d009      	beq.n	800425c <HAL_I2C_EV_IRQHandler+0x18c>
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	089b      	lsrs	r3, r3, #2
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d103      	bne.n	800425c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fa99 	bl	800478c <I2C_MasterReceive_RXNE>
 800425a:	e011      	b.n	8004280 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	089b      	lsrs	r3, r3, #2
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 809a 	beq.w	800439e <HAL_I2C_EV_IRQHandler+0x2ce>
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	0a5b      	lsrs	r3, r3, #9
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8093 	beq.w	800439e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 fb38 	bl	80048ee <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800427e:	e08e      	b.n	800439e <HAL_I2C_EV_IRQHandler+0x2ce>
 8004280:	e08d      	b.n	800439e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d004      	beq.n	8004294 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	e007      	b.n	80042a4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d012      	beq.n	80042d6 <HAL_I2C_EV_IRQHandler+0x206>
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	0a5b      	lsrs	r3, r3, #9
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00c      	beq.n	80042d6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80042cc:	69b9      	ldr	r1, [r7, #24]
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fefc 	bl	80050cc <I2C_Slave_ADDR>
 80042d4:	e066      	b.n	80043a4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	091b      	lsrs	r3, r3, #4
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <HAL_I2C_EV_IRQHandler+0x226>
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	0a5b      	lsrs	r3, r3, #9
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 ff30 	bl	8005154 <I2C_Slave_STOPF>
 80042f4:	e056      	b.n	80043a4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042f6:	7bbb      	ldrb	r3, [r7, #14]
 80042f8:	2b21      	cmp	r3, #33	; 0x21
 80042fa:	d002      	beq.n	8004302 <HAL_I2C_EV_IRQHandler+0x232>
 80042fc:	7bbb      	ldrb	r3, [r7, #14]
 80042fe:	2b29      	cmp	r3, #41	; 0x29
 8004300:	d125      	bne.n	800434e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	09db      	lsrs	r3, r3, #7
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00f      	beq.n	800432e <HAL_I2C_EV_IRQHandler+0x25e>
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	0a9b      	lsrs	r3, r3, #10
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d009      	beq.n	800432e <HAL_I2C_EV_IRQHandler+0x25e>
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	089b      	lsrs	r3, r3, #2
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d103      	bne.n	800432e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fe14 	bl	8004f54 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800432c:	e039      	b.n	80043a2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	089b      	lsrs	r3, r3, #2
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d033      	beq.n	80043a2 <HAL_I2C_EV_IRQHandler+0x2d2>
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	0a5b      	lsrs	r3, r3, #9
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d02d      	beq.n	80043a2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fe41 	bl	8004fce <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800434c:	e029      	b.n	80043a2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	099b      	lsrs	r3, r3, #6
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00f      	beq.n	800437a <HAL_I2C_EV_IRQHandler+0x2aa>
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	0a9b      	lsrs	r3, r3, #10
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <HAL_I2C_EV_IRQHandler+0x2aa>
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	089b      	lsrs	r3, r3, #2
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d103      	bne.n	800437a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fe4b 	bl	800500e <I2C_SlaveReceive_RXNE>
 8004378:	e014      	b.n	80043a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	089b      	lsrs	r3, r3, #2
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00e      	beq.n	80043a4 <HAL_I2C_EV_IRQHandler+0x2d4>
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	0a5b      	lsrs	r3, r3, #9
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d008      	beq.n	80043a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fe79 	bl	800508a <I2C_SlaveReceive_BTF>
 8004398:	e004      	b.n	80043a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800439a:	bf00      	nop
 800439c:	e002      	b.n	80043a4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800439e:	bf00      	nop
 80043a0:	e000      	b.n	80043a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80043a4:	3720      	adds	r7, #32
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr

080043bc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr

080043ce <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr

080043e0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	460b      	mov	r3, r1
 80043fc:	70fb      	strb	r3, [r7, #3]
 80043fe:	4613      	mov	r3, r2
 8004400:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	bc80      	pop	{r7}
 800441c:	4770      	bx	lr

0800441e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr

08004442 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr

08004466 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004474:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800447c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004488:	2b00      	cmp	r3, #0
 800448a:	d150      	bne.n	800452e <I2C_MasterTransmit_TXE+0xc8>
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	2b21      	cmp	r3, #33	; 0x21
 8004490:	d14d      	bne.n	800452e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b08      	cmp	r3, #8
 8004496:	d01d      	beq.n	80044d4 <I2C_MasterTransmit_TXE+0x6e>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b20      	cmp	r3, #32
 800449c:	d01a      	beq.n	80044d4 <I2C_MasterTransmit_TXE+0x6e>
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044a4:	d016      	beq.n	80044d4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044b4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2211      	movs	r2, #17
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ff6c 	bl	80043aa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044d2:	e060      	b.n	8004596 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044e2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d107      	bne.n	800451e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff ff81 	bl	800441e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800451c:	e03b      	b.n	8004596 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff ff3f 	bl	80043aa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800452c:	e033      	b.n	8004596 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	2b21      	cmp	r3, #33	; 0x21
 8004532:	d005      	beq.n	8004540 <I2C_MasterTransmit_TXE+0xda>
 8004534:	7bbb      	ldrb	r3, [r7, #14]
 8004536:	2b40      	cmp	r3, #64	; 0x40
 8004538:	d12d      	bne.n	8004596 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	2b22      	cmp	r3, #34	; 0x22
 800453e:	d12a      	bne.n	8004596 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d108      	bne.n	800455c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004558:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800455a:	e01c      	b.n	8004596 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b40      	cmp	r3, #64	; 0x40
 8004566:	d103      	bne.n	8004570 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f880 	bl	800466e <I2C_MemoryTransmit_TXE_BTF>
}
 800456e:	e012      	b.n	8004596 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	781a      	ldrb	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004594:	e7ff      	b.n	8004596 <I2C_MasterTransmit_TXE+0x130>
 8004596:	bf00      	nop
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b21      	cmp	r3, #33	; 0x21
 80045b6:	d156      	bne.n	8004666 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d012      	beq.n	80045e8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	781a      	ldrb	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80045e6:	e03e      	b.n	8004666 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d01d      	beq.n	800462a <I2C_MasterTransmit_BTF+0x8c>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	d01a      	beq.n	800462a <I2C_MasterTransmit_BTF+0x8c>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045fa:	d016      	beq.n	800462a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800460a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2211      	movs	r2, #17
 8004610:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff fec1 	bl	80043aa <HAL_I2C_MasterTxCpltCallback>
}
 8004628:	e01d      	b.n	8004666 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004638:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004648:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff fea2 	bl	80043aa <HAL_I2C_MasterTxCpltCallback>
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004682:	2b00      	cmp	r3, #0
 8004684:	d11d      	bne.n	80046c2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468a:	2b01      	cmp	r3, #1
 800468c:	d10b      	bne.n	80046a6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004692:	b2da      	uxtb	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469e:	1c9a      	adds	r2, r3, #2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80046a4:	e06e      	b.n	8004784 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	121b      	asrs	r3, r3, #8
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80046c0:	e060      	b.n	8004784 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d10b      	bne.n	80046e2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80046e0:	e050      	b.n	8004784 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d14c      	bne.n	8004784 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	2b22      	cmp	r3, #34	; 0x22
 80046ee:	d108      	bne.n	8004702 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046fe:	601a      	str	r2, [r3, #0]
}
 8004700:	e040      	b.n	8004784 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004706:	b29b      	uxth	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d015      	beq.n	8004738 <I2C_MemoryTransmit_TXE_BTF+0xca>
 800470c:	7bfb      	ldrb	r3, [r7, #15]
 800470e:	2b21      	cmp	r3, #33	; 0x21
 8004710:	d112      	bne.n	8004738 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	781a      	ldrb	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004736:	e025      	b.n	8004784 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d120      	bne.n	8004784 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	2b21      	cmp	r3, #33	; 0x21
 8004746:	d11d      	bne.n	8004784 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004756:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004766:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff fe4d 	bl	800441e <HAL_I2C_MemTxCpltCallback>
}
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b22      	cmp	r3, #34	; 0x22
 800479e:	f040 80a2 	bne.w	80048e6 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d921      	bls.n	80047f4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b03      	cmp	r3, #3
 80047de:	f040 8082 	bne.w	80048e6 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80047f2:	e078      	b.n	80048e6 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d074      	beq.n	80048e6 <I2C_MasterReceive_RXNE+0x15a>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d002      	beq.n	8004808 <I2C_MasterReceive_RXNE+0x7c>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d16e      	bne.n	80048e6 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 ffad 	bl	8005768 <I2C_WaitOnSTOPRequestThroughIT>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d142      	bne.n	800489a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004822:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004832:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2220      	movs	r2, #32
 800485e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b40      	cmp	r3, #64	; 0x40
 800486c:	d10a      	bne.n	8004884 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff fdd7 	bl	8004430 <HAL_I2C_MemRxCpltCallback>
}
 8004882:	e030      	b.n	80048e6 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2212      	movs	r2, #18
 8004890:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff fd92 	bl	80043bc <HAL_I2C_MasterRxCpltCallback>
}
 8004898:	e025      	b.n	80048e6 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048a8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	691a      	ldr	r2, [r3, #16]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff fdae 	bl	8004442 <HAL_I2C_ErrorCallback>
}
 80048e6:	bf00      	nop
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b04      	cmp	r3, #4
 8004904:	d11b      	bne.n	800493e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004914:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800493c:	e0bd      	b.n	8004aba <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b03      	cmp	r3, #3
 8004946:	d129      	bne.n	800499c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004956:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b04      	cmp	r3, #4
 800495c:	d00a      	beq.n	8004974 <I2C_MasterReceive_BTF+0x86>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d007      	beq.n	8004974 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004972:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800499a:	e08e      	b.n	8004aba <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d176      	bne.n	8004a94 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d002      	beq.n	80049b2 <I2C_MasterReceive_BTF+0xc4>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b10      	cmp	r3, #16
 80049b0:	d108      	bne.n	80049c4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e019      	b.n	80049f8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d002      	beq.n	80049d0 <I2C_MasterReceive_BTF+0xe2>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d108      	bne.n	80049e2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	e00a      	b.n	80049f8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d007      	beq.n	80049f8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a52:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b40      	cmp	r3, #64	; 0x40
 8004a66:	d10a      	bne.n	8004a7e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff fcda 	bl	8004430 <HAL_I2C_MemRxCpltCallback>
}
 8004a7c:	e01d      	b.n	8004aba <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2212      	movs	r2, #18
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff fc95 	bl	80043bc <HAL_I2C_MasterRxCpltCallback>
}
 8004a92:	e012      	b.n	8004aba <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004aba:	bf00      	nop
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	d117      	bne.n	8004b06 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004aee:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004af0:	e067      	b.n	8004bc2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	f043 0301 	orr.w	r3, r3, #1
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	611a      	str	r2, [r3, #16]
}
 8004b04:	e05d      	b.n	8004bc2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b0e:	d133      	bne.n	8004b78 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b21      	cmp	r3, #33	; 0x21
 8004b1a:	d109      	bne.n	8004b30 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b2c:	611a      	str	r2, [r3, #16]
 8004b2e:	e008      	b.n	8004b42 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d004      	beq.n	8004b54 <I2C_Master_SB+0x92>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d108      	bne.n	8004b66 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d032      	beq.n	8004bc2 <I2C_Master_SB+0x100>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d02d      	beq.n	8004bc2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b74:	605a      	str	r2, [r3, #4]
}
 8004b76:	e024      	b.n	8004bc2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10e      	bne.n	8004b9e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	11db      	asrs	r3, r3, #7
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	f003 0306 	and.w	r3, r3, #6
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	f063 030f 	orn	r3, r3, #15
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	611a      	str	r2, [r3, #16]
}
 8004b9c:	e011      	b.n	8004bc2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d10d      	bne.n	8004bc2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	11db      	asrs	r3, r3, #7
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	f003 0306 	and.w	r3, r3, #6
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	f063 030e 	orn	r3, r3, #14
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	611a      	str	r2, [r3, #16]
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr

08004bcc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d103      	bne.n	8004bf0 <I2C_Master_ADD10+0x24>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d011      	beq.n	8004c14 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d104      	bne.n	8004c04 <I2C_Master_ADD10+0x38>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d007      	beq.n	8004c14 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c12:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr

08004c1e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b091      	sub	sp, #68	; 0x44
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b22      	cmp	r3, #34	; 0x22
 8004c46:	f040 8174 	bne.w	8004f32 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10f      	bne.n	8004c72 <I2C_Master_ADDR+0x54>
 8004c52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004c56:	2b40      	cmp	r3, #64	; 0x40
 8004c58:	d10b      	bne.n	8004c72 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	633b      	str	r3, [r7, #48]	; 0x30
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	e16b      	b.n	8004f4a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d11d      	bne.n	8004cb6 <I2C_Master_ADDR+0x98>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c82:	d118      	bne.n	8004cb6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c84:	2300      	movs	r3, #0
 8004c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ca8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	651a      	str	r2, [r3, #80]	; 0x50
 8004cb4:	e149      	b.n	8004f4a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d113      	bne.n	8004ce8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	e120      	b.n	8004f2a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	f040 808a 	bne.w	8004e08 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cfa:	d137      	bne.n	8004d6c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d1a:	d113      	bne.n	8004d44 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d2a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	e0f2      	b.n	8004f2a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d44:	2300      	movs	r3, #0
 8004d46:	623b      	str	r3, [r7, #32]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	623b      	str	r3, [r7, #32]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	623b      	str	r3, [r7, #32]
 8004d58:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	e0de      	b.n	8004f2a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d02e      	beq.n	8004dd0 <I2C_Master_ADDR+0x1b2>
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	d02b      	beq.n	8004dd0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7a:	2b12      	cmp	r3, #18
 8004d7c:	d102      	bne.n	8004d84 <I2C_Master_ADDR+0x166>
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d125      	bne.n	8004dd0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d00e      	beq.n	8004da8 <I2C_Master_ADDR+0x18a>
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d00b      	beq.n	8004da8 <I2C_Master_ADDR+0x18a>
 8004d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d92:	2b10      	cmp	r3, #16
 8004d94:	d008      	beq.n	8004da8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e007      	b.n	8004db8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004db6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004db8:	2300      	movs	r3, #0
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	61fb      	str	r3, [r7, #28]
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	e0ac      	b.n	8004f2a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dde:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de0:	2300      	movs	r3, #0
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	61bb      	str	r3, [r7, #24]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	e090      	b.n	8004f2a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d158      	bne.n	8004ec4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d021      	beq.n	8004e5c <I2C_Master_ADDR+0x23e>
 8004e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d01e      	beq.n	8004e5c <I2C_Master_ADDR+0x23e>
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	2b10      	cmp	r3, #16
 8004e22:	d01b      	beq.n	8004e5c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e32:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	e012      	b.n	8004e82 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e6a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	613b      	str	r3, [r7, #16]
 8004e80:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e90:	d14b      	bne.n	8004f2a <I2C_Master_ADDR+0x30c>
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e98:	d00b      	beq.n	8004eb2 <I2C_Master_ADDR+0x294>
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d008      	beq.n	8004eb2 <I2C_Master_ADDR+0x294>
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea2:	2b08      	cmp	r3, #8
 8004ea4:	d005      	beq.n	8004eb2 <I2C_Master_ADDR+0x294>
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d002      	beq.n	8004eb2 <I2C_Master_ADDR+0x294>
 8004eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d13b      	bne.n	8004f2a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ec0:	605a      	str	r2, [r3, #4]
 8004ec2:	e032      	b.n	8004f2a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ed2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee2:	d117      	bne.n	8004f14 <I2C_Master_ADDR+0x2f6>
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004eea:	d00b      	beq.n	8004f04 <I2C_Master_ADDR+0x2e6>
 8004eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d008      	beq.n	8004f04 <I2C_Master_ADDR+0x2e6>
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d005      	beq.n	8004f04 <I2C_Master_ADDR+0x2e6>
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d002      	beq.n	8004f04 <I2C_Master_ADDR+0x2e6>
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d107      	bne.n	8004f14 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f12:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004f30:	e00b      	b.n	8004f4a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f32:	2300      	movs	r3, #0
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	60bb      	str	r3, [r7, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	60bb      	str	r3, [r7, #8]
 8004f46:	68bb      	ldr	r3, [r7, #8]
}
 8004f48:	e7ff      	b.n	8004f4a <I2C_Master_ADDR+0x32c>
 8004f4a:	bf00      	nop
 8004f4c:	3744      	adds	r7, #68	; 0x44
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d02b      	beq.n	8004fc6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	781a      	ldrb	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d114      	bne.n	8004fc6 <I2C_SlaveTransmit_TXE+0x72>
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	2b29      	cmp	r3, #41	; 0x29
 8004fa0:	d111      	bne.n	8004fc6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2221      	movs	r2, #33	; 0x21
 8004fb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2228      	movs	r2, #40	; 0x28
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7ff fa04 	bl	80043ce <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004fc6:	bf00      	nop
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d011      	beq.n	8005004 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	781a      	ldrb	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	bc80      	pop	{r7}
 800500c:	4770      	bx	lr

0800500e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d02c      	beq.n	8005082 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691a      	ldr	r2, [r3, #16]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d114      	bne.n	8005082 <I2C_SlaveReceive_RXNE+0x74>
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	2b2a      	cmp	r3, #42	; 0x2a
 800505c:	d111      	bne.n	8005082 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2222      	movs	r2, #34	; 0x22
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2228      	movs	r2, #40	; 0x28
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff f9af 	bl	80043e0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005082:	bf00      	nop
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d012      	beq.n	80050c2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr

080050cc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80050d6:	2300      	movs	r3, #0
 80050d8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050e6:	2b28      	cmp	r3, #40	; 0x28
 80050e8:	d127      	bne.n	800513a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	089b      	lsrs	r3, r3, #2
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005106:	2301      	movs	r3, #1
 8005108:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	09db      	lsrs	r3, r3, #7
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d103      	bne.n	800511e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	81bb      	strh	r3, [r7, #12]
 800511c:	e002      	b.n	8005124 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800512c:	89ba      	ldrh	r2, [r7, #12]
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff f95d 	bl	80043f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005138:	e008      	b.n	800514c <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f06f 0202 	mvn.w	r2, #2
 8005142:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005162:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005172:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005174:	2300      	movs	r3, #0
 8005176:	60bb      	str	r3, [r7, #8]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	60bb      	str	r3, [r7, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b0:	d172      	bne.n	8005298 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
 80051b4:	2b22      	cmp	r3, #34	; 0x22
 80051b6:	d002      	beq.n	80051be <I2C_Slave_STOPF+0x6a>
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	2b2a      	cmp	r3, #42	; 0x2a
 80051bc:	d135      	bne.n	800522a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d005      	beq.n	80051e2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	f043 0204 	orr.w	r2, r3, #4
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fe fcb4 	bl	8003b64 <HAL_DMA_GetState>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d049      	beq.n	8005296 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	4a69      	ldr	r2, [pc, #420]	; (80053ac <I2C_Slave_STOPF+0x258>)
 8005208:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	4618      	mov	r0, r3
 8005210:	f7fe fb2c 	bl	800386c <HAL_DMA_Abort_IT>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d03d      	beq.n	8005296 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005224:	4610      	mov	r0, r2
 8005226:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005228:	e035      	b.n	8005296 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	b29a      	uxth	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	f043 0204 	orr.w	r2, r3, #4
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800525c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005262:	4618      	mov	r0, r3
 8005264:	f7fe fc7e 	bl	8003b64 <HAL_DMA_GetState>
 8005268:	4603      	mov	r3, r0
 800526a:	2b01      	cmp	r3, #1
 800526c:	d014      	beq.n	8005298 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005272:	4a4e      	ldr	r2, [pc, #312]	; (80053ac <I2C_Slave_STOPF+0x258>)
 8005274:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe faf6 	bl	800386c <HAL_DMA_Abort_IT>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d008      	beq.n	8005298 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005290:	4610      	mov	r0, r2
 8005292:	4798      	blx	r3
 8005294:	e000      	b.n	8005298 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005296:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d03e      	beq.n	8005320 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d112      	bne.n	80052d6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691a      	ldr	r2, [r3, #16]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e0:	2b40      	cmp	r3, #64	; 0x40
 80052e2:	d112      	bne.n	800530a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d005      	beq.n	8005320 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	f043 0204 	orr.w	r2, r3, #4
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f843 	bl	80053b4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800532e:	e039      	b.n	80053a4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005330:	7bfb      	ldrb	r3, [r7, #15]
 8005332:	2b2a      	cmp	r3, #42	; 0x2a
 8005334:	d109      	bne.n	800534a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2228      	movs	r2, #40	; 0x28
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff f84b 	bl	80043e0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b28      	cmp	r3, #40	; 0x28
 8005354:	d111      	bne.n	800537a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a15      	ldr	r2, [pc, #84]	; (80053b0 <I2C_Slave_STOPF+0x25c>)
 800535a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7ff f84a 	bl	800440c <HAL_I2C_ListenCpltCallback>
}
 8005378:	e014      	b.n	80053a4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	2b22      	cmp	r3, #34	; 0x22
 8005380:	d002      	beq.n	8005388 <I2C_Slave_STOPF+0x234>
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	2b22      	cmp	r3, #34	; 0x22
 8005386:	d10d      	bne.n	80053a4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff f81e 	bl	80043e0 <HAL_I2C_SlaveRxCpltCallback>
}
 80053a4:	bf00      	nop
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	08005619 	.word	0x08005619
 80053b0:	ffff0000 	.word	0xffff0000

080053b4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053cc:	7bbb      	ldrb	r3, [r7, #14]
 80053ce:	2b10      	cmp	r3, #16
 80053d0:	d002      	beq.n	80053d8 <I2C_ITError+0x24>
 80053d2:	7bbb      	ldrb	r3, [r7, #14]
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d10a      	bne.n	80053ee <I2C_ITError+0x3a>
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
 80053da:	2b22      	cmp	r3, #34	; 0x22
 80053dc:	d107      	bne.n	80053ee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
 80053f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053f4:	2b28      	cmp	r3, #40	; 0x28
 80053f6:	d107      	bne.n	8005408 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2228      	movs	r2, #40	; 0x28
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005406:	e015      	b.n	8005434 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005416:	d00a      	beq.n	800542e <I2C_ITError+0x7a>
 8005418:	7bfb      	ldrb	r3, [r7, #15]
 800541a:	2b60      	cmp	r3, #96	; 0x60
 800541c:	d007      	beq.n	800542e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800543e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005442:	d161      	bne.n	8005508 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005452:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005458:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800545c:	2b01      	cmp	r3, #1
 800545e:	d020      	beq.n	80054a2 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005464:	4a6a      	ldr	r2, [pc, #424]	; (8005610 <I2C_ITError+0x25c>)
 8005466:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe f9fd 	bl	800386c <HAL_DMA_Abort_IT>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8089 	beq.w	800558c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0201 	bic.w	r2, r2, #1
 8005488:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800549c:	4610      	mov	r0, r2
 800549e:	4798      	blx	r3
 80054a0:	e074      	b.n	800558c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	4a5a      	ldr	r2, [pc, #360]	; (8005610 <I2C_ITError+0x25c>)
 80054a8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7fe f9dc 	bl	800386c <HAL_DMA_Abort_IT>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d068      	beq.n	800558c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c4:	2b40      	cmp	r3, #64	; 0x40
 80054c6:	d10b      	bne.n	80054e0 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0201 	bic.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005502:	4610      	mov	r0, r2
 8005504:	4798      	blx	r3
 8005506:	e041      	b.n	800558c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b60      	cmp	r3, #96	; 0x60
 8005512:	d125      	bne.n	8005560 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552c:	2b40      	cmp	r3, #64	; 0x40
 800552e:	d10b      	bne.n	8005548 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0201 	bic.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7fe ff7b 	bl	8004454 <HAL_I2C_AbortCpltCallback>
 800555e:	e015      	b.n	800558c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556a:	2b40      	cmp	r3, #64	; 0x40
 800556c:	d10b      	bne.n	8005586 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7fe ff5b 	bl	8004442 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10e      	bne.n	80055ba <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d109      	bne.n	80055ba <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d104      	bne.n	80055ba <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055c8:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d0:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d113      	bne.n	8005606 <I2C_ITError+0x252>
 80055de:	7bfb      	ldrb	r3, [r7, #15]
 80055e0:	2b28      	cmp	r3, #40	; 0x28
 80055e2:	d110      	bne.n	8005606 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a0b      	ldr	r2, [pc, #44]	; (8005614 <I2C_ITError+0x260>)
 80055e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7fe ff03 	bl	800440c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005606:	bf00      	nop
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	08005619 	.word	0x08005619
 8005614:	ffff0000 	.word	0xffff0000

08005618 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005630:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005632:	4b4b      	ldr	r3, [pc, #300]	; (8005760 <I2C_DMAAbort+0x148>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	08db      	lsrs	r3, r3, #3
 8005638:	4a4a      	ldr	r2, [pc, #296]	; (8005764 <I2C_DMAAbort+0x14c>)
 800563a:	fba2 2303 	umull	r2, r3, r2, r3
 800563e:	0a1a      	lsrs	r2, r3, #8
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	00da      	lsls	r2, r3, #3
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	f043 0220 	orr.w	r2, r3, #32
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800565e:	e00a      	b.n	8005676 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3b01      	subs	r3, #1
 8005664:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005674:	d0ea      	beq.n	800564c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005682:	2200      	movs	r2, #0
 8005684:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	2200      	movs	r2, #0
 8005694:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2200      	movs	r2, #0
 80056aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b8:	2200      	movs	r2, #0
 80056ba:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	2200      	movs	r2, #0
 80056ca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0201 	bic.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b60      	cmp	r3, #96	; 0x60
 80056e6:	d10e      	bne.n	8005706 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2200      	movs	r2, #0
 80056fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056fe:	6978      	ldr	r0, [r7, #20]
 8005700:	f7fe fea8 	bl	8004454 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005704:	e027      	b.n	8005756 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005706:	7cfb      	ldrb	r3, [r7, #19]
 8005708:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800570c:	2b28      	cmp	r3, #40	; 0x28
 800570e:	d117      	bne.n	8005740 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800572e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	2200      	movs	r2, #0
 8005734:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2228      	movs	r2, #40	; 0x28
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800573e:	e007      	b.n	8005750 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	2220      	movs	r2, #32
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005750:	6978      	ldr	r0, [r7, #20]
 8005752:	f7fe fe76 	bl	8004442 <HAL_I2C_ErrorCallback>
}
 8005756:	bf00      	nop
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	2000013c 	.word	0x2000013c
 8005764:	14f8b589 	.word	0x14f8b589

08005768 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005774:	4b13      	ldr	r3, [pc, #76]	; (80057c4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	08db      	lsrs	r3, r3, #3
 800577a:	4a13      	ldr	r2, [pc, #76]	; (80057c8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800577c:	fba2 2303 	umull	r2, r3, r2, r3
 8005780:	0a1a      	lsrs	r2, r3, #8
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3b01      	subs	r3, #1
 800578e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d107      	bne.n	80057a6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f043 0220 	orr.w	r2, r3, #32
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e008      	b.n	80057b8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b4:	d0e9      	beq.n	800578a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	bc80      	pop	{r7}
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	2000013c 	.word	0x2000013c
 80057c8:	14f8b589 	.word	0x14f8b589

080057cc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80057dc:	d103      	bne.n	80057e6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80057e4:	e007      	b.n	80057f6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80057ee:	d102      	bne.n	80057f6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2208      	movs	r2, #8
 80057f4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bc80      	pop	{r7}
 80057fe:	4770      	bx	lr

08005800 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e02b      	b.n	800586a <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800581a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f245 5255 	movw	r2, #21845	; 0x5555
 8005824:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6852      	ldr	r2, [r2, #4]
 800582e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6892      	ldr	r2, [r2, #8]
 8005838:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800583a:	f7fd fc9b 	bl	8003174 <HAL_GetTick>
 800583e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8005840:	e008      	b.n	8005854 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005842:	f7fd fc97 	bl	8003174 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b26      	cmp	r3, #38	; 0x26
 800584e:	d901      	bls.n	8005854 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e00a      	b.n	800586a <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1f1      	bne.n	8005842 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005866:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005872:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005874:	b08b      	sub	sp, #44	; 0x2c
 8005876:	af06      	add	r7, sp, #24
 8005878:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0fd      	b.n	8005a80 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d106      	bne.n	800589e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f006 f9d3 	bl	800bc44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2203      	movs	r2, #3
 80058a2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f002 fbec 	bl	8008088 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	603b      	str	r3, [r7, #0]
 80058b6:	687e      	ldr	r6, [r7, #4]
 80058b8:	466d      	mov	r5, sp
 80058ba:	f106 0410 	add.w	r4, r6, #16
 80058be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	602b      	str	r3, [r5, #0]
 80058c6:	1d33      	adds	r3, r6, #4
 80058c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058ca:	6838      	ldr	r0, [r7, #0]
 80058cc:	f002 fbb6 	bl	800803c <USB_CoreInit>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d005      	beq.n	80058e2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2202      	movs	r2, #2
 80058da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e0ce      	b.n	8005a80 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2100      	movs	r1, #0
 80058e8:	4618      	mov	r0, r3
 80058ea:	f002 fbe7 	bl	80080bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058ee:	2300      	movs	r3, #0
 80058f0:	73fb      	strb	r3, [r7, #15]
 80058f2:	e04c      	b.n	800598e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	440b      	add	r3, r1
 8005904:	3301      	adds	r3, #1
 8005906:	2201      	movs	r2, #1
 8005908:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	440b      	add	r3, r1
 800591a:	7bfa      	ldrb	r2, [r7, #15]
 800591c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800591e:	7bfa      	ldrb	r2, [r7, #15]
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	b298      	uxth	r0, r3
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	440b      	add	r3, r1
 8005930:	3336      	adds	r3, #54	; 0x36
 8005932:	4602      	mov	r2, r0
 8005934:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	440b      	add	r3, r1
 8005946:	3303      	adds	r3, #3
 8005948:	2200      	movs	r2, #0
 800594a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800594c:	7bfa      	ldrb	r2, [r7, #15]
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	440b      	add	r3, r1
 800595a:	3338      	adds	r3, #56	; 0x38
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005960:	7bfa      	ldrb	r2, [r7, #15]
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	440b      	add	r3, r1
 800596e:	333c      	adds	r3, #60	; 0x3c
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005974:	7bfa      	ldrb	r2, [r7, #15]
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	4613      	mov	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	440b      	add	r3, r1
 8005982:	3340      	adds	r3, #64	; 0x40
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	3301      	adds	r3, #1
 800598c:	73fb      	strb	r3, [r7, #15]
 800598e:	7bfa      	ldrb	r2, [r7, #15]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	429a      	cmp	r2, r3
 8005996:	d3ad      	bcc.n	80058f4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005998:	2300      	movs	r3, #0
 800599a:	73fb      	strb	r3, [r7, #15]
 800599c:	e044      	b.n	8005a28 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800599e:	7bfa      	ldrb	r2, [r7, #15]
 80059a0:	6879      	ldr	r1, [r7, #4]
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	440b      	add	r3, r1
 80059ac:	f203 1369 	addw	r3, r3, #361	; 0x169
 80059b0:	2200      	movs	r2, #0
 80059b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059b4:	7bfa      	ldrb	r2, [r7, #15]
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	4613      	mov	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	440b      	add	r3, r1
 80059c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80059c6:	7bfa      	ldrb	r2, [r7, #15]
 80059c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80059ca:	7bfa      	ldrb	r2, [r7, #15]
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	440b      	add	r3, r1
 80059d8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80059dc:	2200      	movs	r2, #0
 80059de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80059e0:	7bfa      	ldrb	r2, [r7, #15]
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	440b      	add	r3, r1
 80059ee:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80059f2:	2200      	movs	r2, #0
 80059f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80059f6:	7bfa      	ldrb	r2, [r7, #15]
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	4613      	mov	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	440b      	add	r3, r1
 8005a04:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a0c:	7bfa      	ldrb	r2, [r7, #15]
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	440b      	add	r3, r1
 8005a1a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
 8005a24:	3301      	adds	r3, #1
 8005a26:	73fb      	strb	r3, [r7, #15]
 8005a28:	7bfa      	ldrb	r2, [r7, #15]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d3b5      	bcc.n	800599e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	687e      	ldr	r6, [r7, #4]
 8005a3a:	466d      	mov	r5, sp
 8005a3c:	f106 0410 	add.w	r4, r6, #16
 8005a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	1d33      	adds	r3, r6, #4
 8005a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a4c:	6838      	ldr	r0, [r7, #0]
 8005a4e:	f002 fb41 	bl	80080d4 <USB_DevInit>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e00d      	b.n	8005a80 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f004 fadb 	bl	800a034 <USB_DevDisconnect>

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a88 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_PCD_Start+0x16>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e016      	b.n	8005acc <HAL_PCD_Start+0x44>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f002 fad6 	bl	800805c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f006 fb39 	bl	800c12a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f004 faaf 	bl	800a020 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f004 fab1 	bl	800a048 <USB_ReadInterrupts>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005af0:	d102      	bne.n	8005af8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fb61 	bl	80061ba <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f004 faa3 	bl	800a048 <USB_ReadInterrupts>
 8005b02:	4603      	mov	r3, r0
 8005b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b0c:	d112      	bne.n	8005b34 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b20:	b292      	uxth	r2, r2
 8005b22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f006 f907 	bl	800bd3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f925 	bl	8005d7e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f004 fa85 	bl	800a048 <USB_ReadInterrupts>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b48:	d10b      	bne.n	8005b62 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b5c:	b292      	uxth	r2, r2
 8005b5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f004 fa6e 	bl	800a048 <USB_ReadInterrupts>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b76:	d10b      	bne.n	8005b90 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b8a:	b292      	uxth	r2, r2
 8005b8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f004 fa57 	bl	800a048 <USB_ReadInterrupts>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba4:	d126      	bne.n	8005bf4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0204 	bic.w	r2, r2, #4
 8005bb8:	b292      	uxth	r2, r2
 8005bba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0208 	bic.w	r2, r2, #8
 8005bd0:	b292      	uxth	r2, r2
 8005bd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f006 f8e8 	bl	800bdac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bee:	b292      	uxth	r2, r2
 8005bf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f004 fa25 	bl	800a048 <USB_ReadInterrupts>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c08:	f040 8084 	bne.w	8005d14 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	77fb      	strb	r3, [r7, #31]
 8005c10:	e011      	b.n	8005c36 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	7ffb      	ldrb	r3, [r7, #31]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	441a      	add	r2, r3
 8005c1e:	7ffb      	ldrb	r3, [r7, #31]
 8005c20:	8812      	ldrh	r2, [r2, #0]
 8005c22:	b292      	uxth	r2, r2
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	f107 0120 	add.w	r1, r7, #32
 8005c2a:	440b      	add	r3, r1
 8005c2c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8005c30:	7ffb      	ldrb	r3, [r7, #31]
 8005c32:	3301      	adds	r3, #1
 8005c34:	77fb      	strb	r3, [r7, #31]
 8005c36:	7ffb      	ldrb	r3, [r7, #31]
 8005c38:	2b07      	cmp	r3, #7
 8005c3a:	d9ea      	bls.n	8005c12 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 0201 	orr.w	r2, r2, #1
 8005c4e:	b292      	uxth	r2, r2
 8005c50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0201 	bic.w	r2, r2, #1
 8005c66:	b292      	uxth	r2, r2
 8005c68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005c6c:	bf00      	nop
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0f6      	beq.n	8005c6e <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c92:	b292      	uxth	r2, r2
 8005c94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005c98:	2300      	movs	r3, #0
 8005c9a:	77fb      	strb	r3, [r7, #31]
 8005c9c:	e010      	b.n	8005cc0 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005c9e:	7ffb      	ldrb	r3, [r7, #31]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6812      	ldr	r2, [r2, #0]
 8005ca4:	4611      	mov	r1, r2
 8005ca6:	7ffa      	ldrb	r2, [r7, #31]
 8005ca8:	0092      	lsls	r2, r2, #2
 8005caa:	440a      	add	r2, r1
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	f107 0120 	add.w	r1, r7, #32
 8005cb2:	440b      	add	r3, r1
 8005cb4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005cb8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005cba:	7ffb      	ldrb	r3, [r7, #31]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	77fb      	strb	r3, [r7, #31]
 8005cc0:	7ffb      	ldrb	r3, [r7, #31]
 8005cc2:	2b07      	cmp	r3, #7
 8005cc4:	d9eb      	bls.n	8005c9e <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f042 0208 	orr.w	r2, r2, #8
 8005cd8:	b292      	uxth	r2, r2
 8005cda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cf0:	b292      	uxth	r2, r2
 8005cf2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0204 	orr.w	r2, r2, #4
 8005d08:	b292      	uxth	r2, r2
 8005d0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f006 f832 	bl	800bd78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f004 f995 	bl	800a048 <USB_ReadInterrupts>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d28:	d10e      	bne.n	8005d48 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d3c:	b292      	uxth	r2, r2
 8005d3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f005 ffeb 	bl	800bd1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f004 f97b 	bl	800a048 <USB_ReadInterrupts>
 8005d52:	4603      	mov	r3, r0
 8005d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d5c:	d10b      	bne.n	8005d76 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d70:	b292      	uxth	r2, r2
 8005d72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005d76:	bf00      	nop
 8005d78:	3720      	adds	r7, #32
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b082      	sub	sp, #8
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	460b      	mov	r3, r1
 8005d88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_PCD_SetAddress+0x1a>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e013      	b.n	8005dc0 <HAL_PCD_SetAddress+0x42>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	78fa      	ldrb	r2, [r7, #3]
 8005da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	78fa      	ldrb	r2, [r7, #3]
 8005dae:	4611      	mov	r1, r2
 8005db0:	4618      	mov	r0, r3
 8005db2:	f004 f922 	bl	8009ffa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	4608      	mov	r0, r1
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	70fb      	strb	r3, [r7, #3]
 8005dda:	460b      	mov	r3, r1
 8005ddc:	803b      	strh	r3, [r7, #0]
 8005dde:	4613      	mov	r3, r2
 8005de0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	da0e      	bge.n	8005e0c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	f003 0307 	and.w	r3, r3, #7
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	4613      	mov	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	4413      	add	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2201      	movs	r2, #1
 8005e08:	705a      	strb	r2, [r3, #1]
 8005e0a:	e00e      	b.n	8005e2a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	f003 0207 	and.w	r2, r3, #7
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	00db      	lsls	r3, r3, #3
 8005e1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	4413      	add	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e2a:	78fb      	ldrb	r3, [r7, #3]
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005e36:	883a      	ldrh	r2, [r7, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	78ba      	ldrb	r2, [r7, #2]
 8005e40:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	785b      	ldrb	r3, [r3, #1]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d004      	beq.n	8005e54 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e54:	78bb      	ldrb	r3, [r7, #2]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d102      	bne.n	8005e60 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d101      	bne.n	8005e6e <HAL_PCD_EP_Open+0xa6>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e00e      	b.n	8005e8c <HAL_PCD_EP_Open+0xc4>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68f9      	ldr	r1, [r7, #12]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f002 f949 	bl	8008114 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005e8a:	7afb      	ldrb	r3, [r7, #11]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	da0e      	bge.n	8005ec6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ea8:	78fb      	ldrb	r3, [r7, #3]
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	4413      	add	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	705a      	strb	r2, [r3, #1]
 8005ec4:	e00e      	b.n	8005ee4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	f003 0207 	and.w	r2, r3, #7
 8005ecc:	4613      	mov	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	4413      	add	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d101      	bne.n	8005efe <HAL_PCD_EP_Close+0x6a>
 8005efa:	2302      	movs	r3, #2
 8005efc:	e00e      	b.n	8005f1c <HAL_PCD_EP_Close+0x88>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68f9      	ldr	r1, [r7, #12]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f002 fc6b 	bl	80087e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	607a      	str	r2, [r7, #4]
 8005f2e:	603b      	str	r3, [r7, #0]
 8005f30:	460b      	mov	r3, r1
 8005f32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f34:	7afb      	ldrb	r3, [r7, #11]
 8005f36:	f003 0207 	and.w	r2, r3, #7
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4413      	add	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2200      	movs	r2, #0
 8005f62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f64:	7afb      	ldrb	r3, [r7, #11]
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f70:	7afb      	ldrb	r3, [r7, #11]
 8005f72:	f003 0307 	and.w	r3, r3, #7
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6979      	ldr	r1, [r7, #20]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f002 fe1d 	bl	8008bc0 <USB_EPStartXfer>
 8005f86:	e005      	b.n	8005f94 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6979      	ldr	r1, [r7, #20]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f002 fe16 	bl	8008bc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005faa:	78fb      	ldrb	r3, [r7, #3]
 8005fac:	f003 0207 	and.w	r2, r3, #7
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	440b      	add	r3, r1
 8005fbc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005fc0:	681b      	ldr	r3, [r3, #0]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr

08005fcc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	607a      	str	r2, [r7, #4]
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fdc:	7afb      	ldrb	r3, [r7, #11]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	2200      	movs	r2, #0
 8006010:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2201      	movs	r2, #1
 8006016:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006018:	7afb      	ldrb	r3, [r7, #11]
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	b2da      	uxtb	r2, r3
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006024:	7afb      	ldrb	r3, [r7, #11]
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6979      	ldr	r1, [r7, #20]
 8006034:	4618      	mov	r0, r3
 8006036:	f002 fdc3 	bl	8008bc0 <USB_EPStartXfer>
 800603a:	e005      	b.n	8006048 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6979      	ldr	r1, [r7, #20]
 8006042:	4618      	mov	r0, r3
 8006044:	f002 fdbc 	bl	8008bc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	460b      	mov	r3, r1
 800605c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	f003 0207 	and.w	r2, r3, #7
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	429a      	cmp	r2, r3
 800606a:	d901      	bls.n	8006070 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e04c      	b.n	800610a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006074:	2b00      	cmp	r3, #0
 8006076:	da0e      	bge.n	8006096 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	4413      	add	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	705a      	strb	r2, [r3, #1]
 8006094:	e00c      	b.n	80060b0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006096:	78fa      	ldrb	r2, [r7, #3]
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	4413      	add	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2201      	movs	r2, #1
 80060b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060b6:	78fb      	ldrb	r3, [r7, #3]
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_PCD_EP_SetStall+0x7e>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e01c      	b.n	800610a <HAL_PCD_EP_SetStall+0xb8>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68f9      	ldr	r1, [r7, #12]
 80060de:	4618      	mov	r0, r3
 80060e0:	f003 fe8e 	bl	8009e00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d108      	bne.n	8006100 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80060f8:	4619      	mov	r1, r3
 80060fa:	4610      	mov	r0, r2
 80060fc:	f003 ffb3 	bl	800a066 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	460b      	mov	r3, r1
 800611c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800611e:	78fb      	ldrb	r3, [r7, #3]
 8006120:	f003 020f 	and.w	r2, r3, #15
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	429a      	cmp	r2, r3
 800612a:	d901      	bls.n	8006130 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e040      	b.n	80061b2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006134:	2b00      	cmp	r3, #0
 8006136:	da0e      	bge.n	8006156 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	4413      	add	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	705a      	strb	r2, [r3, #1]
 8006154:	e00e      	b.n	8006174 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	f003 0207 	and.w	r2, r3, #7
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	4413      	add	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	b2da      	uxtb	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_PCD_EP_ClrStall+0x82>
 8006190:	2302      	movs	r3, #2
 8006192:	e00e      	b.n	80061b2 <HAL_PCD_EP_ClrStall+0xa0>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68f9      	ldr	r1, [r7, #12]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f003 fe7c 	bl	8009ea0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b08e      	sub	sp, #56	; 0x38
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80061c2:	e2df      	b.n	8006784 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061cc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80061ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	f003 030f 	and.w	r3, r3, #15
 80061d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80061da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f040 8158 	bne.w	8006494 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80061e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061e6:	f003 0310 	and.w	r3, r3, #16
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d152      	bne.n	8006294 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80061fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fe:	81fb      	strh	r3, [r7, #14]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	89fb      	ldrh	r3, [r7, #14]
 8006206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800620e:	b29b      	uxth	r3, r3
 8006210:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	3328      	adds	r3, #40	; 0x28
 8006216:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006220:	b29b      	uxth	r3, r3
 8006222:	461a      	mov	r2, r3
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	4413      	add	r3, r2
 800622c:	3302      	adds	r3, #2
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	6812      	ldr	r2, [r2, #0]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	695a      	ldr	r2, [r3, #20]
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	441a      	add	r2, r3
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006252:	2100      	movs	r1, #0
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f005 fd48 	bl	800bcea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 828e 	beq.w	8006784 <PCD_EP_ISR_Handler+0x5ca>
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	2b00      	cmp	r3, #0
 800626e:	f040 8289 	bne.w	8006784 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006278:	b2db      	uxtb	r3, r3
 800627a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800627e:	b2da      	uxtb	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	b292      	uxth	r2, r2
 8006286:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006292:	e277      	b.n	8006784 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80062a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80062a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d034      	beq.n	8006318 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	461a      	mov	r2, r3
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	4413      	add	r3, r2
 80062c2:	3306      	adds	r3, #6
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6812      	ldr	r2, [r2, #0]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f003 ff09 	bl	800a104 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80062fe:	4013      	ands	r3, r2
 8006300:	823b      	strh	r3, [r7, #16]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	8a3a      	ldrh	r2, [r7, #16]
 8006308:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800630c:	b292      	uxth	r2, r2
 800630e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f005 fcbd 	bl	800bc90 <HAL_PCD_SetupStageCallback>
 8006316:	e235      	b.n	8006784 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006318:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800631c:	2b00      	cmp	r3, #0
 800631e:	f280 8231 	bge.w	8006784 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	b29a      	uxth	r2, r3
 800632a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800632e:	4013      	ands	r3, r2
 8006330:	83bb      	strh	r3, [r7, #28]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	8bba      	ldrh	r2, [r7, #28]
 8006338:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800633c:	b292      	uxth	r2, r2
 800633e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006348:	b29b      	uxth	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	4413      	add	r3, r2
 8006354:	3306      	adds	r3, #6
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d019      	beq.n	80063a8 <PCD_EP_ISR_Handler+0x1ee>
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d015      	beq.n	80063a8 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	6959      	ldr	r1, [r3, #20]
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800638c:	b29b      	uxth	r3, r3
 800638e:	f003 feb9 	bl	800a104 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	695a      	ldr	r2, [r3, #20]
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	441a      	add	r2, r3
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80063a0:	2100      	movs	r1, #0
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f005 fc86 	bl	800bcb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	4413      	add	r3, r2
 80063be:	61bb      	str	r3, [r7, #24]
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d112      	bne.n	80063f6 <PCD_EP_ISR_Handler+0x23c>
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063da:	b29a      	uxth	r2, r3
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	801a      	strh	r2, [r3, #0]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	801a      	strh	r2, [r3, #0]
 80063f4:	e02f      	b.n	8006456 <PCD_EP_ISR_Handler+0x29c>
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b3e      	cmp	r3, #62	; 0x3e
 80063fc:	d813      	bhi.n	8006426 <PCD_EP_ISR_Handler+0x26c>
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	085b      	lsrs	r3, r3, #1
 8006404:	633b      	str	r3, [r7, #48]	; 0x30
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <PCD_EP_ISR_Handler+0x25e>
 8006412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006414:	3301      	adds	r3, #1
 8006416:	633b      	str	r3, [r7, #48]	; 0x30
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	b29b      	uxth	r3, r3
 800641c:	029b      	lsls	r3, r3, #10
 800641e:	b29a      	uxth	r2, r3
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	801a      	strh	r2, [r3, #0]
 8006424:	e017      	b.n	8006456 <PCD_EP_ISR_Handler+0x29c>
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	633b      	str	r3, [r7, #48]	; 0x30
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f003 031f 	and.w	r3, r3, #31
 8006436:	2b00      	cmp	r3, #0
 8006438:	d102      	bne.n	8006440 <PCD_EP_ISR_Handler+0x286>
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	3b01      	subs	r3, #1
 800643e:	633b      	str	r3, [r7, #48]	; 0x30
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	b29b      	uxth	r3, r3
 8006444:	029b      	lsls	r3, r3, #10
 8006446:	b29b      	uxth	r3, r3
 8006448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800644c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006450:	b29a      	uxth	r2, r3
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29b      	uxth	r3, r3
 800645e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006466:	827b      	strh	r3, [r7, #18]
 8006468:	8a7b      	ldrh	r3, [r7, #18]
 800646a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800646e:	827b      	strh	r3, [r7, #18]
 8006470:	8a7b      	ldrh	r3, [r7, #18]
 8006472:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006476:	827b      	strh	r3, [r7, #18]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	8a7b      	ldrh	r3, [r7, #18]
 800647e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800648a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648e:	b29b      	uxth	r3, r3
 8006490:	8013      	strh	r3, [r2, #0]
 8006492:	e177      	b.n	8006784 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	461a      	mov	r2, r3
 800649a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80064a6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f280 80ea 	bge.w	8006684 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	461a      	mov	r2, r3
 80064b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80064c6:	4013      	ands	r3, r2
 80064c8:	853b      	strh	r3, [r7, #40]	; 0x28
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80064da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064de:	b292      	uxth	r2, r2
 80064e0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80064e2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80064e6:	4613      	mov	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	4413      	add	r3, r2
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	7b1b      	ldrb	r3, [r3, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d122      	bne.n	8006546 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006508:	b29b      	uxth	r3, r3
 800650a:	461a      	mov	r2, r3
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	4413      	add	r3, r2
 8006514:	3306      	adds	r3, #6
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6812      	ldr	r2, [r2, #0]
 800651c:	4413      	add	r3, r2
 800651e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006528:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800652a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 8087 	beq.w	8006640 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	6959      	ldr	r1, [r3, #20]
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	88da      	ldrh	r2, [r3, #6]
 800653e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006540:	f003 fde0 	bl	800a104 <USB_ReadPMA>
 8006544:	e07c      	b.n	8006640 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	78db      	ldrb	r3, [r3, #3]
 800654a:	2b02      	cmp	r3, #2
 800654c:	d108      	bne.n	8006560 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800654e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006550:	461a      	mov	r2, r3
 8006552:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f923 	bl	80067a0 <HAL_PCD_EP_DB_Receive>
 800655a:	4603      	mov	r3, r0
 800655c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800655e:	e06f      	b.n	8006640 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	461a      	mov	r2, r3
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	b29b      	uxth	r3, r3
 8006572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657a:	847b      	strh	r3, [r7, #34]	; 0x22
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	441a      	add	r2, r3
 800658a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800658c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006598:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800659c:	b29b      	uxth	r3, r3
 800659e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	461a      	mov	r2, r3
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d021      	beq.n	80065fe <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	461a      	mov	r2, r3
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	4413      	add	r3, r2
 80065ce:	3302      	adds	r3, #2
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	6812      	ldr	r2, [r2, #0]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065e2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80065e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d02a      	beq.n	8006640 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6818      	ldr	r0, [r3, #0]
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	6959      	ldr	r1, [r3, #20]
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	891a      	ldrh	r2, [r3, #8]
 80065f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80065f8:	f003 fd84 	bl	800a104 <USB_ReadPMA>
 80065fc:	e020      	b.n	8006640 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006606:	b29b      	uxth	r3, r3
 8006608:	461a      	mov	r2, r3
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	00db      	lsls	r3, r3, #3
 8006610:	4413      	add	r3, r2
 8006612:	3306      	adds	r3, #6
 8006614:	005b      	lsls	r3, r3, #1
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6812      	ldr	r2, [r2, #0]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006626:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006628:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800662a:	2b00      	cmp	r3, #0
 800662c:	d008      	beq.n	8006640 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	6959      	ldr	r1, [r3, #20]
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	895a      	ldrh	r2, [r3, #10]
 800663a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800663c:	f003 fd62 	bl	800a104 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	69da      	ldr	r2, [r3, #28]
 8006644:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006646:	441a      	add	r2, r3
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	695a      	ldr	r2, [r3, #20]
 8006650:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006652:	441a      	add	r2, r3
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d004      	beq.n	800666a <PCD_EP_ISR_Handler+0x4b0>
 8006660:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	429a      	cmp	r2, r3
 8006668:	d206      	bcs.n	8006678 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f005 fb1f 	bl	800bcb4 <HAL_PCD_DataOutStageCallback>
 8006676:	e005      	b.n	8006684 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800667e:	4618      	mov	r0, r3
 8006680:	f002 fa9e 	bl	8008bc0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006684:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668a:	2b00      	cmp	r3, #0
 800668c:	d07a      	beq.n	8006784 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800668e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	4413      	add	r3, r2
 80066a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80066b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066bc:	843b      	strh	r3, [r7, #32]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	441a      	add	r2, r3
 80066cc:	8c3b      	ldrh	r3, [r7, #32]
 80066ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	78db      	ldrb	r3, [r3, #3]
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d108      	bne.n	80066f4 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d146      	bne.n	8006778 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80066ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80066ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d141      	bne.n	8006778 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	461a      	mov	r2, r3
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	4413      	add	r3, r2
 8006708:	3302      	adds	r3, #2
 800670a:	005b      	lsls	r3, r3, #1
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	6812      	ldr	r2, [r2, #0]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800671c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	699a      	ldr	r2, [r3, #24]
 8006722:	8bfb      	ldrh	r3, [r7, #30]
 8006724:	429a      	cmp	r2, r3
 8006726:	d906      	bls.n	8006736 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	699a      	ldr	r2, [r3, #24]
 800672c:	8bfb      	ldrh	r3, [r7, #30]
 800672e:	1ad2      	subs	r2, r2, r3
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	619a      	str	r2, [r3, #24]
 8006734:	e002      	b.n	800673c <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	2200      	movs	r2, #0
 800673a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d106      	bne.n	8006752 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f005 facd 	bl	800bcea <HAL_PCD_DataInStageCallback>
 8006750:	e018      	b.n	8006784 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	695a      	ldr	r2, [r3, #20]
 8006756:	8bfb      	ldrh	r3, [r7, #30]
 8006758:	441a      	add	r2, r3
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	69da      	ldr	r2, [r3, #28]
 8006762:	8bfb      	ldrh	r3, [r7, #30]
 8006764:	441a      	add	r2, r3
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006770:	4618      	mov	r0, r3
 8006772:	f002 fa25 	bl	8008bc0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8006776:	e005      	b.n	8006784 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006778:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800677a:	461a      	mov	r2, r3
 800677c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f91b 	bl	80069ba <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800678c:	b29b      	uxth	r3, r3
 800678e:	b21b      	sxth	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	f6ff ad17 	blt.w	80061c4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3738      	adds	r7, #56	; 0x38
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	4613      	mov	r3, r2
 80067ac:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d07e      	beq.n	80068b6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	461a      	mov	r2, r3
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	4413      	add	r3, r2
 80067cc:	3302      	adds	r3, #2
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	6812      	ldr	r2, [r2, #0]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067e0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	699a      	ldr	r2, [r3, #24]
 80067e6:	8b7b      	ldrh	r3, [r7, #26]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d306      	bcc.n	80067fa <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	699a      	ldr	r2, [r3, #24]
 80067f0:	8b7b      	ldrh	r3, [r7, #26]
 80067f2:	1ad2      	subs	r2, r2, r3
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	619a      	str	r2, [r3, #24]
 80067f8:	e002      	b.n	8006800 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2200      	movs	r2, #0
 80067fe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d123      	bne.n	8006850 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	461a      	mov	r2, r3
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800681e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006822:	833b      	strh	r3, [r7, #24]
 8006824:	8b3b      	ldrh	r3, [r7, #24]
 8006826:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800682a:	833b      	strh	r3, [r7, #24]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	461a      	mov	r2, r3
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	441a      	add	r2, r3
 800683a:	8b3b      	ldrh	r3, [r7, #24]
 800683c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684c:	b29b      	uxth	r3, r3
 800684e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006850:	88fb      	ldrh	r3, [r7, #6]
 8006852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d01f      	beq.n	800689a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	b29b      	uxth	r3, r3
 800686c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006874:	82fb      	strh	r3, [r7, #22]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	441a      	add	r2, r3
 8006884:	8afb      	ldrh	r3, [r7, #22]
 8006886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800688a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800688e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006892:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006896:	b29b      	uxth	r3, r3
 8006898:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800689a:	8b7b      	ldrh	r3, [r7, #26]
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 8087 	beq.w	80069b0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6818      	ldr	r0, [r3, #0]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	6959      	ldr	r1, [r3, #20]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	891a      	ldrh	r2, [r3, #8]
 80068ae:	8b7b      	ldrh	r3, [r7, #26]
 80068b0:	f003 fc28 	bl	800a104 <USB_ReadPMA>
 80068b4:	e07c      	b.n	80069b0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068be:	b29b      	uxth	r3, r3
 80068c0:	461a      	mov	r2, r3
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	4413      	add	r3, r2
 80068ca:	3306      	adds	r3, #6
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	6812      	ldr	r2, [r2, #0]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068de:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	699a      	ldr	r2, [r3, #24]
 80068e4:	8b7b      	ldrh	r3, [r7, #26]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d306      	bcc.n	80068f8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	8b7b      	ldrh	r3, [r7, #26]
 80068f0:	1ad2      	subs	r2, r2, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	619a      	str	r2, [r3, #24]
 80068f6:	e002      	b.n	80068fe <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2200      	movs	r2, #0
 80068fc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d123      	bne.n	800694e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800691c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006920:	83fb      	strh	r3, [r7, #30]
 8006922:	8bfb      	ldrh	r3, [r7, #30]
 8006924:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006928:	83fb      	strh	r3, [r7, #30]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	441a      	add	r2, r3
 8006938:	8bfb      	ldrh	r3, [r7, #30]
 800693a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800693e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694a:	b29b      	uxth	r3, r3
 800694c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800694e:	88fb      	ldrh	r3, [r7, #6]
 8006950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006954:	2b00      	cmp	r3, #0
 8006956:	d11f      	bne.n	8006998 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800696e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006972:	83bb      	strh	r3, [r7, #28]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	441a      	add	r2, r3
 8006982:	8bbb      	ldrh	r3, [r7, #28]
 8006984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800698c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006990:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006994:	b29b      	uxth	r3, r3
 8006996:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006998:	8b7b      	ldrh	r3, [r7, #26]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d008      	beq.n	80069b0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6818      	ldr	r0, [r3, #0]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	6959      	ldr	r1, [r3, #20]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	895a      	ldrh	r2, [r3, #10]
 80069aa:	8b7b      	ldrh	r3, [r7, #26]
 80069ac:	f003 fbaa 	bl	800a104 <USB_ReadPMA>
    }
  }

  return count;
 80069b0:	8b7b      	ldrh	r3, [r7, #26]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3720      	adds	r7, #32
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b092      	sub	sp, #72	; 0x48
 80069be:	af00      	add	r7, sp, #0
 80069c0:	60f8      	str	r0, [r7, #12]
 80069c2:	60b9      	str	r1, [r7, #8]
 80069c4:	4613      	mov	r3, r2
 80069c6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80069c8:	88fb      	ldrh	r3, [r7, #6]
 80069ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f000 8132 	beq.w	8006c38 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069dc:	b29b      	uxth	r3, r3
 80069de:	461a      	mov	r2, r3
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	00db      	lsls	r3, r3, #3
 80069e6:	4413      	add	r3, r2
 80069e8:	3302      	adds	r3, #2
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	6812      	ldr	r2, [r2, #0]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069fc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	699a      	ldr	r2, [r3, #24]
 8006a02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d906      	bls.n	8006a16 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	699a      	ldr	r2, [r3, #24]
 8006a0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a0e:	1ad2      	subs	r2, r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	619a      	str	r2, [r3, #24]
 8006a14:	e002      	b.n	8006a1c <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d12c      	bne.n	8006a7e <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	4619      	mov	r1, r3
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f005 f95d 	bl	800bcea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006a30:	88fb      	ldrh	r3, [r7, #6]
 8006a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 822f 	beq.w	8006e9a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	461a      	mov	r2, r3
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a56:	827b      	strh	r3, [r7, #18]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	441a      	add	r2, r3
 8006a66:	8a7b      	ldrh	r3, [r7, #18]
 8006a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	8013      	strh	r3, [r2, #0]
 8006a7c:	e20d      	b.n	8006e9a <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006a7e:	88fb      	ldrh	r3, [r7, #6]
 8006a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01f      	beq.n	8006ac8 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	441a      	add	r2, r3
 8006ab2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006abc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	f040 81e3 	bne.w	8006e9a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	695a      	ldr	r2, [r3, #20]
 8006ad8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ada:	441a      	add	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	69da      	ldr	r2, [r3, #28]
 8006ae4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ae6:	441a      	add	r2, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	6a1a      	ldr	r2, [r3, #32]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d309      	bcc.n	8006b0c <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	6a1a      	ldr	r2, [r3, #32]
 8006b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b04:	1ad2      	subs	r2, r2, r3
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	621a      	str	r2, [r3, #32]
 8006b0a:	e014      	b.n	8006b36 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d106      	bne.n	8006b22 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8006b14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b16:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006b20:	e009      	b.n	8006b36 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2200      	movs	r2, #0
 8006b34:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	785b      	ldrb	r3, [r3, #1]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d155      	bne.n	8006bea <HAL_PCD_EP_DB_Transmit+0x230>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	461a      	mov	r2, r3
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	4413      	add	r3, r2
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	011a      	lsls	r2, r3, #4
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d112      	bne.n	8006b92 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	801a      	strh	r2, [r3, #0]
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	801a      	strh	r2, [r3, #0]
 8006b90:	e047      	b.n	8006c22 <HAL_PCD_EP_DB_Transmit+0x268>
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	2b3e      	cmp	r3, #62	; 0x3e
 8006b96:	d811      	bhi.n	8006bbc <HAL_PCD_EP_DB_Transmit+0x202>
 8006b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9a:	085b      	lsrs	r3, r3, #1
 8006b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <HAL_PCD_EP_DB_Transmit+0x1f4>
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	3301      	adds	r3, #1
 8006bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	029b      	lsls	r3, r3, #10
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	801a      	strh	r2, [r3, #0]
 8006bba:	e032      	b.n	8006c22 <HAL_PCD_EP_DB_Transmit+0x268>
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbe:	095b      	lsrs	r3, r3, #5
 8006bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc4:	f003 031f 	and.w	r3, r3, #31
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d102      	bne.n	8006bd2 <HAL_PCD_EP_DB_Transmit+0x218>
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	029b      	lsls	r3, r3, #10
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	801a      	strh	r2, [r3, #0]
 8006be8:	e01b      	b.n	8006c22 <HAL_PCD_EP_DB_Transmit+0x268>
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	785b      	ldrb	r3, [r3, #1]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d117      	bne.n	8006c22 <HAL_PCD_EP_DB_Transmit+0x268>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	623b      	str	r3, [r7, #32]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	461a      	mov	r2, r3
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	4413      	add	r3, r2
 8006c08:	623b      	str	r3, [r7, #32]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	011a      	lsls	r2, r3, #4
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	4413      	add	r3, r2
 8006c14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c18:	61fb      	str	r3, [r7, #28]
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6818      	ldr	r0, [r3, #0]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	6959      	ldr	r1, [r3, #20]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	891a      	ldrh	r2, [r3, #8]
 8006c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	f003 fa23 	bl	800a07c <USB_WritePMA>
 8006c36:	e130      	b.n	8006e9a <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	461a      	mov	r2, r3
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3306      	adds	r3, #6
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	6812      	ldr	r2, [r2, #0]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c60:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	699a      	ldr	r2, [r3, #24]
 8006c66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d306      	bcc.n	8006c7a <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	699a      	ldr	r2, [r3, #24]
 8006c70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c72:	1ad2      	subs	r2, r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	619a      	str	r2, [r3, #24]
 8006c78:	e002      	b.n	8006c80 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d12c      	bne.n	8006ce2 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f005 f82b 	bl	800bcea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006c94:	88fb      	ldrh	r3, [r7, #6]
 8006c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f040 80fd 	bne.w	8006e9a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	881b      	ldrh	r3, [r3, #0]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cba:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	441a      	add	r2, r3
 8006cca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	8013      	strh	r3, [r2, #0]
 8006ce0:	e0db      	b.n	8006e9a <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006ce2:	88fb      	ldrh	r3, [r7, #6]
 8006ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d11f      	bne.n	8006d2c <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d06:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	441a      	add	r2, r3
 8006d16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	f040 80b1 	bne.w	8006e9a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	695a      	ldr	r2, [r3, #20]
 8006d3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d3e:	441a      	add	r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	69da      	ldr	r2, [r3, #28]
 8006d48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d4a:	441a      	add	r2, r3
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	6a1a      	ldr	r2, [r3, #32]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d309      	bcc.n	8006d70 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	6a1a      	ldr	r2, [r3, #32]
 8006d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d68:	1ad2      	subs	r2, r2, r3
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	621a      	str	r2, [r3, #32]
 8006d6e:	e014      	b.n	8006d9a <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	6a1b      	ldr	r3, [r3, #32]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d106      	bne.n	8006d86 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8006d78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d7a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006d84:	e009      	b.n	8006d9a <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	785b      	ldrb	r3, [r3, #1]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d155      	bne.n	8006e54 <HAL_PCD_EP_DB_Transmit+0x49a>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	647b      	str	r3, [r7, #68]	; 0x44
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	461a      	mov	r2, r3
 8006dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dbc:	4413      	add	r3, r2
 8006dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	011a      	lsls	r2, r3, #4
 8006dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dc8:	4413      	add	r3, r2
 8006dca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dce:	643b      	str	r3, [r7, #64]	; 0x40
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d112      	bne.n	8006dfc <HAL_PCD_EP_DB_Transmit+0x442>
 8006dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de4:	801a      	strh	r2, [r3, #0]
 8006de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df8:	801a      	strh	r2, [r3, #0]
 8006dfa:	e044      	b.n	8006e86 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	2b3e      	cmp	r3, #62	; 0x3e
 8006e00:	d811      	bhi.n	8006e26 <HAL_PCD_EP_DB_Transmit+0x46c>
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	085b      	lsrs	r3, r3, #1
 8006e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <HAL_PCD_EP_DB_Transmit+0x45e>
 8006e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e14:	3301      	adds	r3, #1
 8006e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	029b      	lsls	r3, r3, #10
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e22:	801a      	strh	r2, [r3, #0]
 8006e24:	e02f      	b.n	8006e86 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8006e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e28:	095b      	lsrs	r3, r3, #5
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	f003 031f 	and.w	r3, r3, #31
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d102      	bne.n	8006e3c <HAL_PCD_EP_DB_Transmit+0x482>
 8006e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	029b      	lsls	r3, r3, #10
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e50:	801a      	strh	r2, [r3, #0]
 8006e52:	e018      	b.n	8006e86 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	785b      	ldrb	r3, [r3, #1]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d114      	bne.n	8006e86 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6a:	4413      	add	r3, r2
 8006e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	011a      	lsls	r2, r3, #4
 8006e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e76:	4413      	add	r3, r2
 8006e78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e84:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	6959      	ldr	r1, [r3, #20]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	895a      	ldrh	r2, [r3, #10]
 8006e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	f003 f8f1 	bl	800a07c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eb4:	823b      	strh	r3, [r7, #16]
 8006eb6:	8a3b      	ldrh	r3, [r7, #16]
 8006eb8:	f083 0310 	eor.w	r3, r3, #16
 8006ebc:	823b      	strh	r3, [r7, #16]
 8006ebe:	8a3b      	ldrh	r3, [r7, #16]
 8006ec0:	f083 0320 	eor.w	r3, r3, #32
 8006ec4:	823b      	strh	r3, [r7, #16]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	441a      	add	r2, r3
 8006ed4:	8a3b      	ldrh	r3, [r7, #16]
 8006ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3748      	adds	r7, #72	; 0x48
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	607b      	str	r3, [r7, #4]
 8006efe:	460b      	mov	r3, r1
 8006f00:	817b      	strh	r3, [r7, #10]
 8006f02:	4613      	mov	r3, r2
 8006f04:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006f06:	897b      	ldrh	r3, [r7, #10]
 8006f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00b      	beq.n	8006f2a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f12:	897b      	ldrh	r3, [r7, #10]
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	00db      	lsls	r3, r3, #3
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4413      	add	r3, r2
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	e009      	b.n	8006f3e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006f2a:	897a      	ldrh	r2, [r7, #10]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006f3e:	893b      	ldrh	r3, [r7, #8]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d107      	bne.n	8006f54 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2200      	movs	r2, #0
 8006f48:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	80da      	strh	r2, [r3, #6]
 8006f52:	e00b      	b.n	8006f6c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2201      	movs	r2, #1
 8006f58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	0c1b      	lsrs	r3, r3, #16
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bc80      	pop	{r7}
 8006f76:	4770      	bx	lr

08006f78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e26c      	b.n	8007464 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 8087 	beq.w	80070a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f98:	4b92      	ldr	r3, [pc, #584]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f003 030c 	and.w	r3, r3, #12
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d00c      	beq.n	8006fbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006fa4:	4b8f      	ldr	r3, [pc, #572]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f003 030c 	and.w	r3, r3, #12
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d112      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x5e>
 8006fb0:	4b8c      	ldr	r3, [pc, #560]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fbc:	d10b      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fbe:	4b89      	ldr	r3, [pc, #548]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d06c      	beq.n	80070a4 <HAL_RCC_OscConfig+0x12c>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d168      	bne.n	80070a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e246      	b.n	8007464 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fde:	d106      	bne.n	8006fee <HAL_RCC_OscConfig+0x76>
 8006fe0:	4b80      	ldr	r3, [pc, #512]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a7f      	ldr	r2, [pc, #508]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8006fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	e02e      	b.n	800704c <HAL_RCC_OscConfig+0xd4>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10c      	bne.n	8007010 <HAL_RCC_OscConfig+0x98>
 8006ff6:	4b7b      	ldr	r3, [pc, #492]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a7a      	ldr	r2, [pc, #488]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8006ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	4b78      	ldr	r3, [pc, #480]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a77      	ldr	r2, [pc, #476]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	e01d      	b.n	800704c <HAL_RCC_OscConfig+0xd4>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007018:	d10c      	bne.n	8007034 <HAL_RCC_OscConfig+0xbc>
 800701a:	4b72      	ldr	r3, [pc, #456]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a71      	ldr	r2, [pc, #452]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	4b6f      	ldr	r3, [pc, #444]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a6e      	ldr	r2, [pc, #440]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 800702c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	e00b      	b.n	800704c <HAL_RCC_OscConfig+0xd4>
 8007034:	4b6b      	ldr	r3, [pc, #428]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a6a      	ldr	r2, [pc, #424]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 800703a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	4b68      	ldr	r3, [pc, #416]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a67      	ldr	r2, [pc, #412]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800704a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d013      	beq.n	800707c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007054:	f7fc f88e 	bl	8003174 <HAL_GetTick>
 8007058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800705a:	e008      	b.n	800706e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800705c:	f7fc f88a 	bl	8003174 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b64      	cmp	r3, #100	; 0x64
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e1fa      	b.n	8007464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800706e:	4b5d      	ldr	r3, [pc, #372]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0f0      	beq.n	800705c <HAL_RCC_OscConfig+0xe4>
 800707a:	e014      	b.n	80070a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800707c:	f7fc f87a 	bl	8003174 <HAL_GetTick>
 8007080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007082:	e008      	b.n	8007096 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007084:	f7fc f876 	bl	8003174 <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b64      	cmp	r3, #100	; 0x64
 8007090:	d901      	bls.n	8007096 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e1e6      	b.n	8007464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007096:	4b53      	ldr	r3, [pc, #332]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1f0      	bne.n	8007084 <HAL_RCC_OscConfig+0x10c>
 80070a2:	e000      	b.n	80070a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d063      	beq.n	800717a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070b2:	4b4c      	ldr	r3, [pc, #304]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f003 030c 	and.w	r3, r3, #12
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00b      	beq.n	80070d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80070be:	4b49      	ldr	r3, [pc, #292]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f003 030c 	and.w	r3, r3, #12
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d11c      	bne.n	8007104 <HAL_RCC_OscConfig+0x18c>
 80070ca:	4b46      	ldr	r3, [pc, #280]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d116      	bne.n	8007104 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070d6:	4b43      	ldr	r3, [pc, #268]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d005      	beq.n	80070ee <HAL_RCC_OscConfig+0x176>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d001      	beq.n	80070ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e1ba      	b.n	8007464 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ee:	4b3d      	ldr	r3, [pc, #244]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	4939      	ldr	r1, [pc, #228]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007102:	e03a      	b.n	800717a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d020      	beq.n	800714e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800710c:	4b36      	ldr	r3, [pc, #216]	; (80071e8 <HAL_RCC_OscConfig+0x270>)
 800710e:	2201      	movs	r2, #1
 8007110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007112:	f7fc f82f 	bl	8003174 <HAL_GetTick>
 8007116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007118:	e008      	b.n	800712c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800711a:	f7fc f82b 	bl	8003174 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d901      	bls.n	800712c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e19b      	b.n	8007464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800712c:	4b2d      	ldr	r3, [pc, #180]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0f0      	beq.n	800711a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007138:	4b2a      	ldr	r3, [pc, #168]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	00db      	lsls	r3, r3, #3
 8007146:	4927      	ldr	r1, [pc, #156]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007148:	4313      	orrs	r3, r2
 800714a:	600b      	str	r3, [r1, #0]
 800714c:	e015      	b.n	800717a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800714e:	4b26      	ldr	r3, [pc, #152]	; (80071e8 <HAL_RCC_OscConfig+0x270>)
 8007150:	2200      	movs	r2, #0
 8007152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007154:	f7fc f80e 	bl	8003174 <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800715c:	f7fc f80a 	bl	8003174 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e17a      	b.n	8007464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800716e:	4b1d      	ldr	r3, [pc, #116]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f0      	bne.n	800715c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0308 	and.w	r3, r3, #8
 8007182:	2b00      	cmp	r3, #0
 8007184:	d03a      	beq.n	80071fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d019      	beq.n	80071c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800718e:	4b17      	ldr	r3, [pc, #92]	; (80071ec <HAL_RCC_OscConfig+0x274>)
 8007190:	2201      	movs	r2, #1
 8007192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007194:	f7fb ffee 	bl	8003174 <HAL_GetTick>
 8007198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800719a:	e008      	b.n	80071ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800719c:	f7fb ffea 	bl	8003174 <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d901      	bls.n	80071ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e15a      	b.n	8007464 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071ae:	4b0d      	ldr	r3, [pc, #52]	; (80071e4 <HAL_RCC_OscConfig+0x26c>)
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d0f0      	beq.n	800719c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80071ba:	2001      	movs	r0, #1
 80071bc:	f000 fac6 	bl	800774c <RCC_Delay>
 80071c0:	e01c      	b.n	80071fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071c2:	4b0a      	ldr	r3, [pc, #40]	; (80071ec <HAL_RCC_OscConfig+0x274>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071c8:	f7fb ffd4 	bl	8003174 <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071ce:	e00f      	b.n	80071f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071d0:	f7fb ffd0 	bl	8003174 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d908      	bls.n	80071f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e140      	b.n	8007464 <HAL_RCC_OscConfig+0x4ec>
 80071e2:	bf00      	nop
 80071e4:	40021000 	.word	0x40021000
 80071e8:	42420000 	.word	0x42420000
 80071ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071f0:	4b9e      	ldr	r3, [pc, #632]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e9      	bne.n	80071d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0304 	and.w	r3, r3, #4
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 80a6 	beq.w	8007356 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800720a:	2300      	movs	r3, #0
 800720c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800720e:	4b97      	ldr	r3, [pc, #604]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10d      	bne.n	8007236 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800721a:	4b94      	ldr	r3, [pc, #592]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	4a93      	ldr	r2, [pc, #588]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 8007220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007224:	61d3      	str	r3, [r2, #28]
 8007226:	4b91      	ldr	r3, [pc, #580]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800722e:	60bb      	str	r3, [r7, #8]
 8007230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007232:	2301      	movs	r3, #1
 8007234:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007236:	4b8e      	ldr	r3, [pc, #568]	; (8007470 <HAL_RCC_OscConfig+0x4f8>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800723e:	2b00      	cmp	r3, #0
 8007240:	d118      	bne.n	8007274 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007242:	4b8b      	ldr	r3, [pc, #556]	; (8007470 <HAL_RCC_OscConfig+0x4f8>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a8a      	ldr	r2, [pc, #552]	; (8007470 <HAL_RCC_OscConfig+0x4f8>)
 8007248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800724c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800724e:	f7fb ff91 	bl	8003174 <HAL_GetTick>
 8007252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007254:	e008      	b.n	8007268 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007256:	f7fb ff8d 	bl	8003174 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b64      	cmp	r3, #100	; 0x64
 8007262:	d901      	bls.n	8007268 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e0fd      	b.n	8007464 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007268:	4b81      	ldr	r3, [pc, #516]	; (8007470 <HAL_RCC_OscConfig+0x4f8>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007270:	2b00      	cmp	r3, #0
 8007272:	d0f0      	beq.n	8007256 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d106      	bne.n	800728a <HAL_RCC_OscConfig+0x312>
 800727c:	4b7b      	ldr	r3, [pc, #492]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	4a7a      	ldr	r2, [pc, #488]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 8007282:	f043 0301 	orr.w	r3, r3, #1
 8007286:	6213      	str	r3, [r2, #32]
 8007288:	e02d      	b.n	80072e6 <HAL_RCC_OscConfig+0x36e>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10c      	bne.n	80072ac <HAL_RCC_OscConfig+0x334>
 8007292:	4b76      	ldr	r3, [pc, #472]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	4a75      	ldr	r2, [pc, #468]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 8007298:	f023 0301 	bic.w	r3, r3, #1
 800729c:	6213      	str	r3, [r2, #32]
 800729e:	4b73      	ldr	r3, [pc, #460]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	4a72      	ldr	r2, [pc, #456]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 80072a4:	f023 0304 	bic.w	r3, r3, #4
 80072a8:	6213      	str	r3, [r2, #32]
 80072aa:	e01c      	b.n	80072e6 <HAL_RCC_OscConfig+0x36e>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	2b05      	cmp	r3, #5
 80072b2:	d10c      	bne.n	80072ce <HAL_RCC_OscConfig+0x356>
 80072b4:	4b6d      	ldr	r3, [pc, #436]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	4a6c      	ldr	r2, [pc, #432]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 80072ba:	f043 0304 	orr.w	r3, r3, #4
 80072be:	6213      	str	r3, [r2, #32]
 80072c0:	4b6a      	ldr	r3, [pc, #424]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	4a69      	ldr	r2, [pc, #420]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 80072c6:	f043 0301 	orr.w	r3, r3, #1
 80072ca:	6213      	str	r3, [r2, #32]
 80072cc:	e00b      	b.n	80072e6 <HAL_RCC_OscConfig+0x36e>
 80072ce:	4b67      	ldr	r3, [pc, #412]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	4a66      	ldr	r2, [pc, #408]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 80072d4:	f023 0301 	bic.w	r3, r3, #1
 80072d8:	6213      	str	r3, [r2, #32]
 80072da:	4b64      	ldr	r3, [pc, #400]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	4a63      	ldr	r2, [pc, #396]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 80072e0:	f023 0304 	bic.w	r3, r3, #4
 80072e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d015      	beq.n	800731a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072ee:	f7fb ff41 	bl	8003174 <HAL_GetTick>
 80072f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072f4:	e00a      	b.n	800730c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072f6:	f7fb ff3d 	bl	8003174 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	f241 3288 	movw	r2, #5000	; 0x1388
 8007304:	4293      	cmp	r3, r2
 8007306:	d901      	bls.n	800730c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e0ab      	b.n	8007464 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800730c:	4b57      	ldr	r3, [pc, #348]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	f003 0302 	and.w	r3, r3, #2
 8007314:	2b00      	cmp	r3, #0
 8007316:	d0ee      	beq.n	80072f6 <HAL_RCC_OscConfig+0x37e>
 8007318:	e014      	b.n	8007344 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800731a:	f7fb ff2b 	bl	8003174 <HAL_GetTick>
 800731e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007320:	e00a      	b.n	8007338 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007322:	f7fb ff27 	bl	8003174 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007330:	4293      	cmp	r3, r2
 8007332:	d901      	bls.n	8007338 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e095      	b.n	8007464 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007338:	4b4c      	ldr	r3, [pc, #304]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1ee      	bne.n	8007322 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007344:	7dfb      	ldrb	r3, [r7, #23]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d105      	bne.n	8007356 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800734a:	4b48      	ldr	r3, [pc, #288]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	4a47      	ldr	r2, [pc, #284]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 8007350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007354:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 8081 	beq.w	8007462 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007360:	4b42      	ldr	r3, [pc, #264]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f003 030c 	and.w	r3, r3, #12
 8007368:	2b08      	cmp	r3, #8
 800736a:	d061      	beq.n	8007430 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	2b02      	cmp	r3, #2
 8007372:	d146      	bne.n	8007402 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007374:	4b3f      	ldr	r3, [pc, #252]	; (8007474 <HAL_RCC_OscConfig+0x4fc>)
 8007376:	2200      	movs	r2, #0
 8007378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800737a:	f7fb fefb 	bl	8003174 <HAL_GetTick>
 800737e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007380:	e008      	b.n	8007394 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007382:	f7fb fef7 	bl	8003174 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	d901      	bls.n	8007394 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e067      	b.n	8007464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007394:	4b35      	ldr	r3, [pc, #212]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1f0      	bne.n	8007382 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073a8:	d108      	bne.n	80073bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80073aa:	4b30      	ldr	r3, [pc, #192]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	492d      	ldr	r1, [pc, #180]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073bc:	4b2b      	ldr	r3, [pc, #172]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a19      	ldr	r1, [r3, #32]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	430b      	orrs	r3, r1
 80073ce:	4927      	ldr	r1, [pc, #156]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073d4:	4b27      	ldr	r3, [pc, #156]	; (8007474 <HAL_RCC_OscConfig+0x4fc>)
 80073d6:	2201      	movs	r2, #1
 80073d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073da:	f7fb fecb 	bl	8003174 <HAL_GetTick>
 80073de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80073e0:	e008      	b.n	80073f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073e2:	f7fb fec7 	bl	8003174 <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d901      	bls.n	80073f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e037      	b.n	8007464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80073f4:	4b1d      	ldr	r3, [pc, #116]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0f0      	beq.n	80073e2 <HAL_RCC_OscConfig+0x46a>
 8007400:	e02f      	b.n	8007462 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007402:	4b1c      	ldr	r3, [pc, #112]	; (8007474 <HAL_RCC_OscConfig+0x4fc>)
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007408:	f7fb feb4 	bl	8003174 <HAL_GetTick>
 800740c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800740e:	e008      	b.n	8007422 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007410:	f7fb feb0 	bl	8003174 <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	2b02      	cmp	r3, #2
 800741c:	d901      	bls.n	8007422 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e020      	b.n	8007464 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007422:	4b12      	ldr	r3, [pc, #72]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1f0      	bne.n	8007410 <HAL_RCC_OscConfig+0x498>
 800742e:	e018      	b.n	8007462 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d101      	bne.n	800743c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e013      	b.n	8007464 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800743c:	4b0b      	ldr	r3, [pc, #44]	; (800746c <HAL_RCC_OscConfig+0x4f4>)
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	429a      	cmp	r2, r3
 800744e:	d106      	bne.n	800745e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800745a:	429a      	cmp	r2, r3
 800745c:	d001      	beq.n	8007462 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	40021000 	.word	0x40021000
 8007470:	40007000 	.word	0x40007000
 8007474:	42420060 	.word	0x42420060

08007478 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e0d0      	b.n	800762e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800748c:	4b6a      	ldr	r3, [pc, #424]	; (8007638 <HAL_RCC_ClockConfig+0x1c0>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0307 	and.w	r3, r3, #7
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	429a      	cmp	r2, r3
 8007498:	d910      	bls.n	80074bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800749a:	4b67      	ldr	r3, [pc, #412]	; (8007638 <HAL_RCC_ClockConfig+0x1c0>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f023 0207 	bic.w	r2, r3, #7
 80074a2:	4965      	ldr	r1, [pc, #404]	; (8007638 <HAL_RCC_ClockConfig+0x1c0>)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074aa:	4b63      	ldr	r3, [pc, #396]	; (8007638 <HAL_RCC_ClockConfig+0x1c0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0307 	and.w	r3, r3, #7
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d001      	beq.n	80074bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e0b8      	b.n	800762e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0302 	and.w	r3, r3, #2
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d020      	beq.n	800750a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d005      	beq.n	80074e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074d4:	4b59      	ldr	r3, [pc, #356]	; (800763c <HAL_RCC_ClockConfig+0x1c4>)
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	4a58      	ldr	r2, [pc, #352]	; (800763c <HAL_RCC_ClockConfig+0x1c4>)
 80074da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80074de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0308 	and.w	r3, r3, #8
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074ec:	4b53      	ldr	r3, [pc, #332]	; (800763c <HAL_RCC_ClockConfig+0x1c4>)
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	4a52      	ldr	r2, [pc, #328]	; (800763c <HAL_RCC_ClockConfig+0x1c4>)
 80074f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80074f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074f8:	4b50      	ldr	r3, [pc, #320]	; (800763c <HAL_RCC_ClockConfig+0x1c4>)
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	494d      	ldr	r1, [pc, #308]	; (800763c <HAL_RCC_ClockConfig+0x1c4>)
 8007506:	4313      	orrs	r3, r2
 8007508:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d040      	beq.n	8007598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d107      	bne.n	800752e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800751e:	4b47      	ldr	r3, [pc, #284]	; (800763c <HAL_RCC_ClockConfig+0x1c4>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d115      	bne.n	8007556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e07f      	b.n	800762e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	2b02      	cmp	r3, #2
 8007534:	d107      	bne.n	8007546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007536:	4b41      	ldr	r3, [pc, #260]	; (800763c <HAL_RCC_ClockConfig+0x1c4>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d109      	bne.n	8007556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e073      	b.n	800762e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007546:	4b3d      	ldr	r3, [pc, #244]	; (800763c <HAL_RCC_ClockConfig+0x1c4>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e06b      	b.n	800762e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007556:	4b39      	ldr	r3, [pc, #228]	; (800763c <HAL_RCC_ClockConfig+0x1c4>)
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f023 0203 	bic.w	r2, r3, #3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	4936      	ldr	r1, [pc, #216]	; (800763c <HAL_RCC_ClockConfig+0x1c4>)
 8007564:	4313      	orrs	r3, r2
 8007566:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007568:	f7fb fe04 	bl	8003174 <HAL_GetTick>
 800756c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800756e:	e00a      	b.n	8007586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007570:	f7fb fe00 	bl	8003174 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	f241 3288 	movw	r2, #5000	; 0x1388
 800757e:	4293      	cmp	r3, r2
 8007580:	d901      	bls.n	8007586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e053      	b.n	800762e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007586:	4b2d      	ldr	r3, [pc, #180]	; (800763c <HAL_RCC_ClockConfig+0x1c4>)
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f003 020c 	and.w	r2, r3, #12
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	429a      	cmp	r2, r3
 8007596:	d1eb      	bne.n	8007570 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007598:	4b27      	ldr	r3, [pc, #156]	; (8007638 <HAL_RCC_ClockConfig+0x1c0>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0307 	and.w	r3, r3, #7
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d210      	bcs.n	80075c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075a6:	4b24      	ldr	r3, [pc, #144]	; (8007638 <HAL_RCC_ClockConfig+0x1c0>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f023 0207 	bic.w	r2, r3, #7
 80075ae:	4922      	ldr	r1, [pc, #136]	; (8007638 <HAL_RCC_ClockConfig+0x1c0>)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075b6:	4b20      	ldr	r3, [pc, #128]	; (8007638 <HAL_RCC_ClockConfig+0x1c0>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0307 	and.w	r3, r3, #7
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d001      	beq.n	80075c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e032      	b.n	800762e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0304 	and.w	r3, r3, #4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d008      	beq.n	80075e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075d4:	4b19      	ldr	r3, [pc, #100]	; (800763c <HAL_RCC_ClockConfig+0x1c4>)
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	4916      	ldr	r1, [pc, #88]	; (800763c <HAL_RCC_ClockConfig+0x1c4>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0308 	and.w	r3, r3, #8
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d009      	beq.n	8007606 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80075f2:	4b12      	ldr	r3, [pc, #72]	; (800763c <HAL_RCC_ClockConfig+0x1c4>)
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	490e      	ldr	r1, [pc, #56]	; (800763c <HAL_RCC_ClockConfig+0x1c4>)
 8007602:	4313      	orrs	r3, r2
 8007604:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007606:	f000 f821 	bl	800764c <HAL_RCC_GetSysClockFreq>
 800760a:	4601      	mov	r1, r0
 800760c:	4b0b      	ldr	r3, [pc, #44]	; (800763c <HAL_RCC_ClockConfig+0x1c4>)
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	091b      	lsrs	r3, r3, #4
 8007612:	f003 030f 	and.w	r3, r3, #15
 8007616:	4a0a      	ldr	r2, [pc, #40]	; (8007640 <HAL_RCC_ClockConfig+0x1c8>)
 8007618:	5cd3      	ldrb	r3, [r2, r3]
 800761a:	fa21 f303 	lsr.w	r3, r1, r3
 800761e:	4a09      	ldr	r2, [pc, #36]	; (8007644 <HAL_RCC_ClockConfig+0x1cc>)
 8007620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007622:	4b09      	ldr	r3, [pc, #36]	; (8007648 <HAL_RCC_ClockConfig+0x1d0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4618      	mov	r0, r3
 8007628:	f7fb fd62 	bl	80030f0 <HAL_InitTick>

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	40022000 	.word	0x40022000
 800763c:	40021000 	.word	0x40021000
 8007640:	0800cd98 	.word	0x0800cd98
 8007644:	2000013c 	.word	0x2000013c
 8007648:	20000140 	.word	0x20000140

0800764c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800764c:	b490      	push	{r4, r7}
 800764e:	b08a      	sub	sp, #40	; 0x28
 8007650:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007652:	4b2a      	ldr	r3, [pc, #168]	; (80076fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8007654:	1d3c      	adds	r4, r7, #4
 8007656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800765c:	4b28      	ldr	r3, [pc, #160]	; (8007700 <HAL_RCC_GetSysClockFreq+0xb4>)
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007662:	2300      	movs	r3, #0
 8007664:	61fb      	str	r3, [r7, #28]
 8007666:	2300      	movs	r3, #0
 8007668:	61bb      	str	r3, [r7, #24]
 800766a:	2300      	movs	r3, #0
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007672:	2300      	movs	r3, #0
 8007674:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007676:	4b23      	ldr	r3, [pc, #140]	; (8007704 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	f003 030c 	and.w	r3, r3, #12
 8007682:	2b04      	cmp	r3, #4
 8007684:	d002      	beq.n	800768c <HAL_RCC_GetSysClockFreq+0x40>
 8007686:	2b08      	cmp	r3, #8
 8007688:	d003      	beq.n	8007692 <HAL_RCC_GetSysClockFreq+0x46>
 800768a:	e02d      	b.n	80076e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800768c:	4b1e      	ldr	r3, [pc, #120]	; (8007708 <HAL_RCC_GetSysClockFreq+0xbc>)
 800768e:	623b      	str	r3, [r7, #32]
      break;
 8007690:	e02d      	b.n	80076ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	0c9b      	lsrs	r3, r3, #18
 8007696:	f003 030f 	and.w	r3, r3, #15
 800769a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800769e:	4413      	add	r3, r2
 80076a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80076a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d013      	beq.n	80076d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80076b0:	4b14      	ldr	r3, [pc, #80]	; (8007704 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	0c5b      	lsrs	r3, r3, #17
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80076be:	4413      	add	r3, r2
 80076c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80076c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	4a0f      	ldr	r2, [pc, #60]	; (8007708 <HAL_RCC_GetSysClockFreq+0xbc>)
 80076ca:	fb02 f203 	mul.w	r2, r2, r3
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
 80076d6:	e004      	b.n	80076e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	4a0c      	ldr	r2, [pc, #48]	; (800770c <HAL_RCC_GetSysClockFreq+0xc0>)
 80076dc:	fb02 f303 	mul.w	r3, r2, r3
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	623b      	str	r3, [r7, #32]
      break;
 80076e6:	e002      	b.n	80076ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80076e8:	4b07      	ldr	r3, [pc, #28]	; (8007708 <HAL_RCC_GetSysClockFreq+0xbc>)
 80076ea:	623b      	str	r3, [r7, #32]
      break;
 80076ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076ee:	6a3b      	ldr	r3, [r7, #32]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3728      	adds	r7, #40	; 0x28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bc90      	pop	{r4, r7}
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	0800caa4 	.word	0x0800caa4
 8007700:	0800cab4 	.word	0x0800cab4
 8007704:	40021000 	.word	0x40021000
 8007708:	007a1200 	.word	0x007a1200
 800770c:	003d0900 	.word	0x003d0900

08007710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007710:	b480      	push	{r7}
 8007712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007714:	4b02      	ldr	r3, [pc, #8]	; (8007720 <HAL_RCC_GetHCLKFreq+0x10>)
 8007716:	681b      	ldr	r3, [r3, #0]
}
 8007718:	4618      	mov	r0, r3
 800771a:	46bd      	mov	sp, r7
 800771c:	bc80      	pop	{r7}
 800771e:	4770      	bx	lr
 8007720:	2000013c 	.word	0x2000013c

08007724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007728:	f7ff fff2 	bl	8007710 <HAL_RCC_GetHCLKFreq>
 800772c:	4601      	mov	r1, r0
 800772e:	4b05      	ldr	r3, [pc, #20]	; (8007744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	0a1b      	lsrs	r3, r3, #8
 8007734:	f003 0307 	and.w	r3, r3, #7
 8007738:	4a03      	ldr	r2, [pc, #12]	; (8007748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800773a:	5cd3      	ldrb	r3, [r2, r3]
 800773c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007740:	4618      	mov	r0, r3
 8007742:	bd80      	pop	{r7, pc}
 8007744:	40021000 	.word	0x40021000
 8007748:	0800cda8 	.word	0x0800cda8

0800774c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007754:	4b0a      	ldr	r3, [pc, #40]	; (8007780 <RCC_Delay+0x34>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a0a      	ldr	r2, [pc, #40]	; (8007784 <RCC_Delay+0x38>)
 800775a:	fba2 2303 	umull	r2, r3, r2, r3
 800775e:	0a5b      	lsrs	r3, r3, #9
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	fb02 f303 	mul.w	r3, r2, r3
 8007766:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007768:	bf00      	nop
  }
  while (Delay --);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	1e5a      	subs	r2, r3, #1
 800776e:	60fa      	str	r2, [r7, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1f9      	bne.n	8007768 <RCC_Delay+0x1c>
}
 8007774:	bf00      	nop
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	bc80      	pop	{r7}
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	2000013c 	.word	0x2000013c
 8007784:	10624dd3 	.word	0x10624dd3

08007788 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	613b      	str	r3, [r7, #16]
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d07d      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80077a4:	2300      	movs	r3, #0
 80077a6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077a8:	4b4f      	ldr	r3, [pc, #316]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10d      	bne.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077b4:	4b4c      	ldr	r3, [pc, #304]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077b6:	69db      	ldr	r3, [r3, #28]
 80077b8:	4a4b      	ldr	r2, [pc, #300]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077be:	61d3      	str	r3, [r2, #28]
 80077c0:	4b49      	ldr	r3, [pc, #292]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077c8:	60bb      	str	r3, [r7, #8]
 80077ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077cc:	2301      	movs	r3, #1
 80077ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077d0:	4b46      	ldr	r3, [pc, #280]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d118      	bne.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077dc:	4b43      	ldr	r3, [pc, #268]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a42      	ldr	r2, [pc, #264]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80077e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077e8:	f7fb fcc4 	bl	8003174 <HAL_GetTick>
 80077ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077ee:	e008      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077f0:	f7fb fcc0 	bl	8003174 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b64      	cmp	r3, #100	; 0x64
 80077fc:	d901      	bls.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e06d      	b.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007802:	4b3a      	ldr	r3, [pc, #232]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0f0      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800780e:	4b36      	ldr	r3, [pc, #216]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007816:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d02e      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	429a      	cmp	r2, r3
 800782a:	d027      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800782c:	4b2e      	ldr	r3, [pc, #184]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007834:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007836:	4b2e      	ldr	r3, [pc, #184]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007838:	2201      	movs	r2, #1
 800783a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800783c:	4b2c      	ldr	r3, [pc, #176]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800783e:	2200      	movs	r2, #0
 8007840:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007842:	4a29      	ldr	r2, [pc, #164]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	d014      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007852:	f7fb fc8f 	bl	8003174 <HAL_GetTick>
 8007856:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007858:	e00a      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800785a:	f7fb fc8b 	bl	8003174 <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	f241 3288 	movw	r2, #5000	; 0x1388
 8007868:	4293      	cmp	r3, r2
 800786a:	d901      	bls.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e036      	b.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007870:	4b1d      	ldr	r3, [pc, #116]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0ee      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800787c:	4b1a      	ldr	r3, [pc, #104]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	4917      	ldr	r1, [pc, #92]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800788a:	4313      	orrs	r3, r2
 800788c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800788e:	7dfb      	ldrb	r3, [r7, #23]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d105      	bne.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007894:	4b14      	ldr	r3, [pc, #80]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	4a13      	ldr	r2, [pc, #76]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800789a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800789e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0302 	and.w	r3, r3, #2
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d008      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078ac:	4b0e      	ldr	r3, [pc, #56]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	490b      	ldr	r1, [pc, #44]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0310 	and.w	r3, r3, #16
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d008      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078ca:	4b07      	ldr	r3, [pc, #28]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	4904      	ldr	r1, [pc, #16]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078d8:	4313      	orrs	r3, r2
 80078da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	40021000 	.word	0x40021000
 80078ec:	40007000 	.word	0x40007000
 80078f0:	42420440 	.word	0x42420440

080078f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e041      	b.n	800798a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d106      	bne.n	8007920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fb f8c2 	bl	8002aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3304      	adds	r3, #4
 8007930:	4619      	mov	r1, r3
 8007932:	4610      	mov	r0, r2
 8007934:	f000 fa1a 	bl	8007d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	f003 0302 	and.w	r3, r3, #2
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d122      	bne.n	80079ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d11b      	bne.n	80079ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f06f 0202 	mvn.w	r2, #2
 80079be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	f003 0303 	and.w	r3, r3, #3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d003      	beq.n	80079dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f9ad 	bl	8007d34 <HAL_TIM_IC_CaptureCallback>
 80079da:	e005      	b.n	80079e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f9a0 	bl	8007d22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f9af 	bl	8007d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b04      	cmp	r3, #4
 80079fa:	d122      	bne.n	8007a42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	f003 0304 	and.w	r3, r3, #4
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d11b      	bne.n	8007a42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f06f 0204 	mvn.w	r2, #4
 8007a12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d003      	beq.n	8007a30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f983 	bl	8007d34 <HAL_TIM_IC_CaptureCallback>
 8007a2e:	e005      	b.n	8007a3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f976 	bl	8007d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f985 	bl	8007d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	f003 0308 	and.w	r3, r3, #8
 8007a4c:	2b08      	cmp	r3, #8
 8007a4e:	d122      	bne.n	8007a96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f003 0308 	and.w	r3, r3, #8
 8007a5a:	2b08      	cmp	r3, #8
 8007a5c:	d11b      	bne.n	8007a96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f06f 0208 	mvn.w	r2, #8
 8007a66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2204      	movs	r2, #4
 8007a6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	f003 0303 	and.w	r3, r3, #3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f959 	bl	8007d34 <HAL_TIM_IC_CaptureCallback>
 8007a82:	e005      	b.n	8007a90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f94c 	bl	8007d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f95b 	bl	8007d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	2b10      	cmp	r3, #16
 8007aa2:	d122      	bne.n	8007aea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f003 0310 	and.w	r3, r3, #16
 8007aae:	2b10      	cmp	r3, #16
 8007ab0:	d11b      	bne.n	8007aea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f06f 0210 	mvn.w	r2, #16
 8007aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2208      	movs	r2, #8
 8007ac0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	69db      	ldr	r3, [r3, #28]
 8007ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d003      	beq.n	8007ad8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f92f 	bl	8007d34 <HAL_TIM_IC_CaptureCallback>
 8007ad6:	e005      	b.n	8007ae4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f922 	bl	8007d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f931 	bl	8007d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d10e      	bne.n	8007b16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d107      	bne.n	8007b16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f06f 0201 	mvn.w	r2, #1
 8007b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f8fd 	bl	8007d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b20:	2b80      	cmp	r3, #128	; 0x80
 8007b22:	d10e      	bne.n	8007b42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b2e:	2b80      	cmp	r3, #128	; 0x80
 8007b30:	d107      	bne.n	8007b42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fa74 	bl	800802a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b4c:	2b40      	cmp	r3, #64	; 0x40
 8007b4e:	d10e      	bne.n	8007b6e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5a:	2b40      	cmp	r3, #64	; 0x40
 8007b5c:	d107      	bne.n	8007b6e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f8f5 	bl	8007d58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	f003 0320 	and.w	r3, r3, #32
 8007b78:	2b20      	cmp	r3, #32
 8007b7a:	d10e      	bne.n	8007b9a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	f003 0320 	and.w	r3, r3, #32
 8007b86:	2b20      	cmp	r3, #32
 8007b88:	d107      	bne.n	8007b9a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f06f 0220 	mvn.w	r2, #32
 8007b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fa3f 	bl	8008018 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b9a:	bf00      	nop
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d101      	bne.n	8007bba <HAL_TIM_ConfigClockSource+0x18>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e0a6      	b.n	8007d08 <HAL_TIM_ConfigClockSource+0x166>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007bd8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007be0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b40      	cmp	r3, #64	; 0x40
 8007bf0:	d067      	beq.n	8007cc2 <HAL_TIM_ConfigClockSource+0x120>
 8007bf2:	2b40      	cmp	r3, #64	; 0x40
 8007bf4:	d80b      	bhi.n	8007c0e <HAL_TIM_ConfigClockSource+0x6c>
 8007bf6:	2b10      	cmp	r3, #16
 8007bf8:	d073      	beq.n	8007ce2 <HAL_TIM_ConfigClockSource+0x140>
 8007bfa:	2b10      	cmp	r3, #16
 8007bfc:	d802      	bhi.n	8007c04 <HAL_TIM_ConfigClockSource+0x62>
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d06f      	beq.n	8007ce2 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007c02:	e078      	b.n	8007cf6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007c04:	2b20      	cmp	r3, #32
 8007c06:	d06c      	beq.n	8007ce2 <HAL_TIM_ConfigClockSource+0x140>
 8007c08:	2b30      	cmp	r3, #48	; 0x30
 8007c0a:	d06a      	beq.n	8007ce2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007c0c:	e073      	b.n	8007cf6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007c0e:	2b70      	cmp	r3, #112	; 0x70
 8007c10:	d00d      	beq.n	8007c2e <HAL_TIM_ConfigClockSource+0x8c>
 8007c12:	2b70      	cmp	r3, #112	; 0x70
 8007c14:	d804      	bhi.n	8007c20 <HAL_TIM_ConfigClockSource+0x7e>
 8007c16:	2b50      	cmp	r3, #80	; 0x50
 8007c18:	d033      	beq.n	8007c82 <HAL_TIM_ConfigClockSource+0xe0>
 8007c1a:	2b60      	cmp	r3, #96	; 0x60
 8007c1c:	d041      	beq.n	8007ca2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007c1e:	e06a      	b.n	8007cf6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c24:	d066      	beq.n	8007cf4 <HAL_TIM_ConfigClockSource+0x152>
 8007c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c2a:	d017      	beq.n	8007c5c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007c2c:	e063      	b.n	8007cf6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6818      	ldr	r0, [r3, #0]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	6899      	ldr	r1, [r3, #8]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	f000 f96e 	bl	8007f1e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	609a      	str	r2, [r3, #8]
      break;
 8007c5a:	e04c      	b.n	8007cf6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6818      	ldr	r0, [r3, #0]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	6899      	ldr	r1, [r3, #8]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f000 f957 	bl	8007f1e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	689a      	ldr	r2, [r3, #8]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c7e:	609a      	str	r2, [r3, #8]
      break;
 8007c80:	e039      	b.n	8007cf6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6818      	ldr	r0, [r3, #0]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	6859      	ldr	r1, [r3, #4]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f000 f8ce 	bl	8007e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2150      	movs	r1, #80	; 0x50
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 f925 	bl	8007eea <TIM_ITRx_SetConfig>
      break;
 8007ca0:	e029      	b.n	8007cf6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6818      	ldr	r0, [r3, #0]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	6859      	ldr	r1, [r3, #4]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	f000 f8ec 	bl	8007e8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2160      	movs	r1, #96	; 0x60
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 f915 	bl	8007eea <TIM_ITRx_SetConfig>
      break;
 8007cc0:	e019      	b.n	8007cf6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6818      	ldr	r0, [r3, #0]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	6859      	ldr	r1, [r3, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	f000 f8ae 	bl	8007e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2140      	movs	r1, #64	; 0x40
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 f905 	bl	8007eea <TIM_ITRx_SetConfig>
      break;
 8007ce0:	e009      	b.n	8007cf6 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4619      	mov	r1, r3
 8007cec:	4610      	mov	r0, r2
 8007cee:	f000 f8fc 	bl	8007eea <TIM_ITRx_SetConfig>
        break;
 8007cf2:	e000      	b.n	8007cf6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007cf4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bc80      	pop	{r7}
 8007d20:	4770      	bx	lr

08007d22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d2a:	bf00      	nop
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bc80      	pop	{r7}
 8007d32:	4770      	bx	lr

08007d34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bc80      	pop	{r7}
 8007d44:	4770      	bx	lr

08007d46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b083      	sub	sp, #12
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d4e:	bf00      	nop
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bc80      	pop	{r7}
 8007d56:	4770      	bx	lr

08007d58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bc80      	pop	{r7}
 8007d68:	4770      	bx	lr
	...

08007d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a29      	ldr	r2, [pc, #164]	; (8007e24 <TIM_Base_SetConfig+0xb8>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d00b      	beq.n	8007d9c <TIM_Base_SetConfig+0x30>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8a:	d007      	beq.n	8007d9c <TIM_Base_SetConfig+0x30>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a26      	ldr	r2, [pc, #152]	; (8007e28 <TIM_Base_SetConfig+0xbc>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d003      	beq.n	8007d9c <TIM_Base_SetConfig+0x30>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a25      	ldr	r2, [pc, #148]	; (8007e2c <TIM_Base_SetConfig+0xc0>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d108      	bne.n	8007dae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a1c      	ldr	r2, [pc, #112]	; (8007e24 <TIM_Base_SetConfig+0xb8>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d00b      	beq.n	8007dce <TIM_Base_SetConfig+0x62>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dbc:	d007      	beq.n	8007dce <TIM_Base_SetConfig+0x62>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a19      	ldr	r2, [pc, #100]	; (8007e28 <TIM_Base_SetConfig+0xbc>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d003      	beq.n	8007dce <TIM_Base_SetConfig+0x62>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a18      	ldr	r2, [pc, #96]	; (8007e2c <TIM_Base_SetConfig+0xc0>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d108      	bne.n	8007de0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	689a      	ldr	r2, [r3, #8]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a07      	ldr	r2, [pc, #28]	; (8007e24 <TIM_Base_SetConfig+0xb8>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d103      	bne.n	8007e14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	691a      	ldr	r2, [r3, #16]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	615a      	str	r2, [r3, #20]
}
 8007e1a:	bf00      	nop
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bc80      	pop	{r7}
 8007e22:	4770      	bx	lr
 8007e24:	40012c00 	.word	0x40012c00
 8007e28:	40000400 	.word	0x40000400
 8007e2c:	40000800 	.word	0x40000800

08007e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	f023 0201 	bic.w	r2, r3, #1
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	011b      	lsls	r3, r3, #4
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f023 030a 	bic.w	r3, r3, #10
 8007e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	621a      	str	r2, [r3, #32]
}
 8007e82:	bf00      	nop
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bc80      	pop	{r7}
 8007e8a:	4770      	bx	lr

08007e8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	f023 0210 	bic.w	r2, r3, #16
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007eb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	031b      	lsls	r3, r3, #12
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ec8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	011b      	lsls	r3, r3, #4
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	621a      	str	r2, [r3, #32]
}
 8007ee0:	bf00      	nop
 8007ee2:	371c      	adds	r7, #28
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bc80      	pop	{r7}
 8007ee8:	4770      	bx	lr

08007eea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b085      	sub	sp, #20
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	f043 0307 	orr.w	r3, r3, #7
 8007f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	609a      	str	r2, [r3, #8]
}
 8007f14:	bf00      	nop
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bc80      	pop	{r7}
 8007f1c:	4770      	bx	lr

08007f1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b087      	sub	sp, #28
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	607a      	str	r2, [r7, #4]
 8007f2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	021a      	lsls	r2, r3, #8
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	431a      	orrs	r2, r3
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	609a      	str	r2, [r3, #8]
}
 8007f52:	bf00      	nop
 8007f54:	371c      	adds	r7, #28
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bc80      	pop	{r7}
 8007f5a:	4770      	bx	lr

08007f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d101      	bne.n	8007f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f70:	2302      	movs	r3, #2
 8007f72:	e046      	b.n	8008002 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a16      	ldr	r2, [pc, #88]	; (800800c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d00e      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fc0:	d009      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a12      	ldr	r2, [pc, #72]	; (8008010 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d004      	beq.n	8007fd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a10      	ldr	r2, [pc, #64]	; (8008014 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d10c      	bne.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	bc80      	pop	{r7}
 800800a:	4770      	bx	lr
 800800c:	40012c00 	.word	0x40012c00
 8008010:	40000400 	.word	0x40000400
 8008014:	40000800 	.word	0x40000800

08008018 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	bc80      	pop	{r7}
 8008028:	4770      	bx	lr

0800802a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	bc80      	pop	{r7}
 800803a:	4770      	bx	lr

0800803c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800803c:	b084      	sub	sp, #16
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	f107 0014 	add.w	r0, r7, #20
 800804a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	bc80      	pop	{r7}
 8008058:	b004      	add	sp, #16
 800805a:	4770      	bx	lr

0800805c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800806c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008070:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	b29a      	uxth	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	bc80      	pop	{r7}
 8008086:	4770      	bx	lr

08008088 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008090:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008094:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800809c:	b29a      	uxth	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	43db      	mvns	r3, r3
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	4013      	ands	r3, r2
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bc80      	pop	{r7}
 80080ba:	4770      	bx	lr

080080bc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	460b      	mov	r3, r1
 80080c6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bc80      	pop	{r7}
 80080d2:	4770      	bx	lr

080080d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80080d4:	b084      	sub	sp, #16
 80080d6:	b480      	push	{r7}
 80080d8:	b083      	sub	sp, #12
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	f107 0014 	add.w	r0, r7, #20
 80080e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	bc80      	pop	{r7}
 8008110:	b004      	add	sp, #16
 8008112:	4770      	bx	lr

08008114 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008114:	b480      	push	{r7}
 8008116:	b09b      	sub	sp, #108	; 0x6c
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	b29b      	uxth	r3, r3
 8008132:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800813a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	78db      	ldrb	r3, [r3, #3]
 8008142:	2b03      	cmp	r3, #3
 8008144:	d81f      	bhi.n	8008186 <USB_ActivateEndpoint+0x72>
 8008146:	a201      	add	r2, pc, #4	; (adr r2, 800814c <USB_ActivateEndpoint+0x38>)
 8008148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814c:	0800815d 	.word	0x0800815d
 8008150:	08008179 	.word	0x08008179
 8008154:	0800818f 	.word	0x0800818f
 8008158:	0800816b 	.word	0x0800816b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800815c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008160:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008164:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008168:	e012      	b.n	8008190 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800816a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800816e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008172:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008176:	e00b      	b.n	8008190 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008178:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800817c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008180:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008184:	e004      	b.n	8008190 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800818c:	e000      	b.n	8008190 <USB_ActivateEndpoint+0x7c>
      break;
 800818e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	441a      	add	r2, r3
 800819a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800819e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	4313      	orrs	r3, r2
 80081d2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	441a      	add	r2, r3
 80081e0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80081e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	7b1b      	ldrb	r3, [r3, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f040 8149 	bne.w	8008494 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	785b      	ldrb	r3, [r3, #1]
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 8084 	beq.w	8008314 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	617b      	str	r3, [r7, #20]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008216:	b29b      	uxth	r3, r3
 8008218:	461a      	mov	r2, r3
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	4413      	add	r3, r2
 800821e:	617b      	str	r3, [r7, #20]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	011a      	lsls	r2, r3, #4
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	4413      	add	r3, r2
 800822a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800822e:	613b      	str	r3, [r7, #16]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	88db      	ldrh	r3, [r3, #6]
 8008234:	085b      	lsrs	r3, r3, #1
 8008236:	b29b      	uxth	r3, r3
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	b29a      	uxth	r2, r3
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	81fb      	strh	r3, [r7, #14]
 800824e:	89fb      	ldrh	r3, [r7, #14]
 8008250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008254:	2b00      	cmp	r3, #0
 8008256:	d01b      	beq.n	8008290 <USB_ActivateEndpoint+0x17c>
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	b29b      	uxth	r3, r3
 8008266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800826a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826e:	81bb      	strh	r3, [r7, #12]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	441a      	add	r2, r3
 800827a:	89bb      	ldrh	r3, [r7, #12]
 800827c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008288:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800828c:	b29b      	uxth	r3, r3
 800828e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	78db      	ldrb	r3, [r3, #3]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d020      	beq.n	80082da <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	881b      	ldrh	r3, [r3, #0]
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ae:	813b      	strh	r3, [r7, #8]
 80082b0:	893b      	ldrh	r3, [r7, #8]
 80082b2:	f083 0320 	eor.w	r3, r3, #32
 80082b6:	813b      	strh	r3, [r7, #8]
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	441a      	add	r2, r3
 80082c2:	893b      	ldrh	r3, [r7, #8]
 80082c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	8013      	strh	r3, [r2, #0]
 80082d8:	e27f      	b.n	80087da <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	881b      	ldrh	r3, [r3, #0]
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082f0:	817b      	strh	r3, [r7, #10]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	441a      	add	r2, r3
 80082fc:	897b      	ldrh	r3, [r7, #10]
 80082fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800830a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800830e:	b29b      	uxth	r3, r3
 8008310:	8013      	strh	r3, [r2, #0]
 8008312:	e262      	b.n	80087da <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800831e:	b29b      	uxth	r3, r3
 8008320:	461a      	mov	r2, r3
 8008322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008324:	4413      	add	r3, r2
 8008326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	011a      	lsls	r2, r3, #4
 800832e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008330:	4413      	add	r3, r2
 8008332:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008336:	62bb      	str	r3, [r7, #40]	; 0x28
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	88db      	ldrh	r3, [r3, #6]
 800833c:	085b      	lsrs	r3, r3, #1
 800833e:	b29b      	uxth	r3, r3
 8008340:	005b      	lsls	r3, r3, #1
 8008342:	b29a      	uxth	r2, r3
 8008344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008346:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	627b      	str	r3, [r7, #36]	; 0x24
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008352:	b29b      	uxth	r3, r3
 8008354:	461a      	mov	r2, r3
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	4413      	add	r3, r2
 800835a:	627b      	str	r3, [r7, #36]	; 0x24
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	011a      	lsls	r2, r3, #4
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	4413      	add	r3, r2
 8008366:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800836a:	623b      	str	r3, [r7, #32]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d112      	bne.n	800839a <USB_ActivateEndpoint+0x286>
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	881b      	ldrh	r3, [r3, #0]
 8008378:	b29b      	uxth	r3, r3
 800837a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800837e:	b29a      	uxth	r2, r3
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	801a      	strh	r2, [r3, #0]
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	881b      	ldrh	r3, [r3, #0]
 8008388:	b29b      	uxth	r3, r3
 800838a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800838e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008392:	b29a      	uxth	r2, r3
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	801a      	strh	r2, [r3, #0]
 8008398:	e02f      	b.n	80083fa <USB_ActivateEndpoint+0x2e6>
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	2b3e      	cmp	r3, #62	; 0x3e
 80083a0:	d813      	bhi.n	80083ca <USB_ActivateEndpoint+0x2b6>
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	085b      	lsrs	r3, r3, #1
 80083a8:	663b      	str	r3, [r7, #96]	; 0x60
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d002      	beq.n	80083bc <USB_ActivateEndpoint+0x2a8>
 80083b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083b8:	3301      	adds	r3, #1
 80083ba:	663b      	str	r3, [r7, #96]	; 0x60
 80083bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083be:	b29b      	uxth	r3, r3
 80083c0:	029b      	lsls	r3, r3, #10
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	801a      	strh	r2, [r3, #0]
 80083c8:	e017      	b.n	80083fa <USB_ActivateEndpoint+0x2e6>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	095b      	lsrs	r3, r3, #5
 80083d0:	663b      	str	r3, [r7, #96]	; 0x60
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	f003 031f 	and.w	r3, r3, #31
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d102      	bne.n	80083e4 <USB_ActivateEndpoint+0x2d0>
 80083de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083e0:	3b01      	subs	r3, #1
 80083e2:	663b      	str	r3, [r7, #96]	; 0x60
 80083e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	029b      	lsls	r3, r3, #10
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	83fb      	strh	r3, [r7, #30]
 8008408:	8bfb      	ldrh	r3, [r7, #30]
 800840a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d01b      	beq.n	800844a <USB_ActivateEndpoint+0x336>
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	881b      	ldrh	r3, [r3, #0]
 800841e:	b29b      	uxth	r3, r3
 8008420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008428:	83bb      	strh	r3, [r7, #28]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	441a      	add	r2, r3
 8008434:	8bbb      	ldrh	r3, [r7, #28]
 8008436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800843a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800843e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008446:	b29b      	uxth	r3, r3
 8008448:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	881b      	ldrh	r3, [r3, #0]
 8008456:	b29b      	uxth	r3, r3
 8008458:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800845c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008460:	837b      	strh	r3, [r7, #26]
 8008462:	8b7b      	ldrh	r3, [r7, #26]
 8008464:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008468:	837b      	strh	r3, [r7, #26]
 800846a:	8b7b      	ldrh	r3, [r7, #26]
 800846c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008470:	837b      	strh	r3, [r7, #26]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	441a      	add	r2, r3
 800847c:	8b7b      	ldrh	r3, [r7, #26]
 800847e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800848a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800848e:	b29b      	uxth	r3, r3
 8008490:	8013      	strh	r3, [r2, #0]
 8008492:	e1a2      	b.n	80087da <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084aa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	441a      	add	r2, r3
 80084b8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80084bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084c4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80084c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084da:	b29b      	uxth	r3, r3
 80084dc:	461a      	mov	r2, r3
 80084de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084e0:	4413      	add	r3, r2
 80084e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	011a      	lsls	r2, r3, #4
 80084ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084f2:	657b      	str	r3, [r7, #84]	; 0x54
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	891b      	ldrh	r3, [r3, #8]
 80084f8:	085b      	lsrs	r3, r3, #1
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	005b      	lsls	r3, r3, #1
 80084fe:	b29a      	uxth	r2, r3
 8008500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008502:	801a      	strh	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	653b      	str	r3, [r7, #80]	; 0x50
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800850e:	b29b      	uxth	r3, r3
 8008510:	461a      	mov	r2, r3
 8008512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008514:	4413      	add	r3, r2
 8008516:	653b      	str	r3, [r7, #80]	; 0x50
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	011a      	lsls	r2, r3, #4
 800851e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008520:	4413      	add	r3, r2
 8008522:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	895b      	ldrh	r3, [r3, #10]
 800852c:	085b      	lsrs	r3, r3, #1
 800852e:	b29b      	uxth	r3, r3
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	b29a      	uxth	r2, r3
 8008534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008536:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	785b      	ldrb	r3, [r3, #1]
 800853c:	2b00      	cmp	r3, #0
 800853e:	f040 8091 	bne.w	8008664 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008550:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d01b      	beq.n	8008592 <USB_ActivateEndpoint+0x47e>
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	b29b      	uxth	r3, r3
 8008568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800856c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008570:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	441a      	add	r2, r3
 800857c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800857e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800858a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800858e:	b29b      	uxth	r3, r3
 8008590:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	873b      	strh	r3, [r7, #56]	; 0x38
 80085a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80085a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d01b      	beq.n	80085e2 <USB_ActivateEndpoint+0x4ce>
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	441a      	add	r2, r3
 80085cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80085ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085de:	b29b      	uxth	r3, r3
 80085e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4413      	add	r3, r2
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80085fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80085fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008600:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008602:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008604:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008608:	86bb      	strh	r3, [r7, #52]	; 0x34
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	441a      	add	r2, r3
 8008614:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800861a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800861e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008626:	b29b      	uxth	r3, r3
 8008628:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	881b      	ldrh	r3, [r3, #0]
 8008636:	b29b      	uxth	r3, r3
 8008638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800863c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008640:	867b      	strh	r3, [r7, #50]	; 0x32
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	441a      	add	r2, r3
 800864c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800864e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800865a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800865e:	b29b      	uxth	r3, r3
 8008660:	8013      	strh	r3, [r2, #0]
 8008662:	e0ba      	b.n	80087da <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008674:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d01d      	beq.n	80086bc <USB_ActivateEndpoint+0x5a8>
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	b29b      	uxth	r3, r3
 800868e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008696:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	441a      	add	r2, r3
 80086a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80086a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80086cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80086d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d01d      	beq.n	8008714 <USB_ActivateEndpoint+0x600>
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	441a      	add	r2, r3
 80086fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800870c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008710:	b29b      	uxth	r3, r3
 8008712:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	78db      	ldrb	r3, [r3, #3]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d024      	beq.n	8008766 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	b29b      	uxth	r3, r3
 800872a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800872e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008732:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008736:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800873a:	f083 0320 	eor.w	r3, r3, #32
 800873e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	441a      	add	r2, r3
 800874c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800875c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008760:	b29b      	uxth	r3, r3
 8008762:	8013      	strh	r3, [r2, #0]
 8008764:	e01d      	b.n	80087a2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	881b      	ldrh	r3, [r3, #0]
 8008772:	b29b      	uxth	r3, r3
 8008774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800877c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	441a      	add	r2, r3
 800878a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800878e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800879a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800879e:	b29b      	uxth	r3, r3
 80087a0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	881b      	ldrh	r3, [r3, #0]
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	441a      	add	r2, r3
 80087c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80087c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80087da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80087de:	4618      	mov	r0, r3
 80087e0:	376c      	adds	r7, #108	; 0x6c
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bc80      	pop	{r7}
 80087e6:	4770      	bx	lr

080087e8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b08d      	sub	sp, #52	; 0x34
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	7b1b      	ldrb	r3, [r3, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f040 808e 	bne.w	8008918 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	785b      	ldrb	r3, [r3, #1]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d044      	beq.n	800888e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	4413      	add	r3, r2
 800880e:	881b      	ldrh	r3, [r3, #0]
 8008810:	81bb      	strh	r3, [r7, #12]
 8008812:	89bb      	ldrh	r3, [r7, #12]
 8008814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008818:	2b00      	cmp	r3, #0
 800881a:	d01b      	beq.n	8008854 <USB_DeactivateEndpoint+0x6c>
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4413      	add	r3, r2
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	b29b      	uxth	r3, r3
 800882a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800882e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008832:	817b      	strh	r3, [r7, #10]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	441a      	add	r2, r3
 800883e:	897b      	ldrh	r3, [r7, #10]
 8008840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800884c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008850:	b29b      	uxth	r3, r3
 8008852:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	b29b      	uxth	r3, r3
 8008862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800886a:	813b      	strh	r3, [r7, #8]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	441a      	add	r2, r3
 8008876:	893b      	ldrh	r3, [r7, #8]
 8008878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800887c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008888:	b29b      	uxth	r3, r3
 800888a:	8013      	strh	r3, [r2, #0]
 800888c:	e192      	b.n	8008bb4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4413      	add	r3, r2
 8008898:	881b      	ldrh	r3, [r3, #0]
 800889a:	827b      	strh	r3, [r7, #18]
 800889c:	8a7b      	ldrh	r3, [r7, #18]
 800889e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d01b      	beq.n	80088de <USB_DeactivateEndpoint+0xf6>
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4413      	add	r3, r2
 80088b0:	881b      	ldrh	r3, [r3, #0]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088bc:	823b      	strh	r3, [r7, #16]
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	441a      	add	r2, r3
 80088c8:	8a3b      	ldrh	r3, [r7, #16]
 80088ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088da:	b29b      	uxth	r3, r3
 80088dc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088f4:	81fb      	strh	r3, [r7, #14]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	441a      	add	r2, r3
 8008900:	89fb      	ldrh	r3, [r7, #14]
 8008902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800890a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800890e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008912:	b29b      	uxth	r3, r3
 8008914:	8013      	strh	r3, [r2, #0]
 8008916:	e14d      	b.n	8008bb4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	785b      	ldrb	r3, [r3, #1]
 800891c:	2b00      	cmp	r3, #0
 800891e:	f040 80a5 	bne.w	8008a6c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	843b      	strh	r3, [r7, #32]
 8008930:	8c3b      	ldrh	r3, [r7, #32]
 8008932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d01b      	beq.n	8008972 <USB_DeactivateEndpoint+0x18a>
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	b29b      	uxth	r3, r3
 8008948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800894c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008950:	83fb      	strh	r3, [r7, #30]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	441a      	add	r2, r3
 800895c:	8bfb      	ldrh	r3, [r7, #30]
 800895e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008966:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800896a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800896e:	b29b      	uxth	r3, r3
 8008970:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	83bb      	strh	r3, [r7, #28]
 8008980:	8bbb      	ldrh	r3, [r7, #28]
 8008982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008986:	2b00      	cmp	r3, #0
 8008988:	d01b      	beq.n	80089c2 <USB_DeactivateEndpoint+0x1da>
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	b29b      	uxth	r3, r3
 8008998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800899c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089a0:	837b      	strh	r3, [r7, #26]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	441a      	add	r2, r3
 80089ac:	8b7b      	ldrh	r3, [r7, #26]
 80089ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089be:	b29b      	uxth	r3, r3
 80089c0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	881b      	ldrh	r3, [r3, #0]
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d8:	833b      	strh	r3, [r7, #24]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	441a      	add	r2, r3
 80089e4:	8b3b      	ldrh	r3, [r7, #24]
 80089e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4413      	add	r3, r2
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a10:	82fb      	strh	r3, [r7, #22]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	441a      	add	r2, r3
 8008a1c:	8afb      	ldrh	r3, [r7, #22]
 8008a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	881b      	ldrh	r3, [r3, #0]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a48:	82bb      	strh	r3, [r7, #20]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	441a      	add	r2, r3
 8008a54:	8abb      	ldrh	r3, [r7, #20]
 8008a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	8013      	strh	r3, [r2, #0]
 8008a6a:	e0a3      	b.n	8008bb4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	881b      	ldrh	r3, [r3, #0]
 8008a78:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008a7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d01b      	beq.n	8008abc <USB_DeactivateEndpoint+0x2d4>
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	881b      	ldrh	r3, [r3, #0]
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a9a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	441a      	add	r2, r3
 8008aa6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ab0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	881b      	ldrh	r3, [r3, #0]
 8008ac8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008aca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d01b      	beq.n	8008b0c <USB_DeactivateEndpoint+0x324>
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4413      	add	r3, r2
 8008ade:	881b      	ldrh	r3, [r3, #0]
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aea:	853b      	strh	r3, [r7, #40]	; 0x28
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	441a      	add	r2, r3
 8008af6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008af8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008afc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	881b      	ldrh	r3, [r3, #0]
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b22:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	441a      	add	r2, r3
 8008b2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b5a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	441a      	add	r2, r3
 8008b66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b92:	847b      	strh	r3, [r7, #34]	; 0x22
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	441a      	add	r2, r3
 8008b9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3734      	adds	r7, #52	; 0x34
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bc80      	pop	{r7}
 8008bbe:	4770      	bx	lr

08008bc0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b0c4      	sub	sp, #272	; 0x110
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	1d3b      	adds	r3, r7, #4
 8008bc8:	6018      	str	r0, [r3, #0]
 8008bca:	463b      	mov	r3, r7
 8008bcc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008bce:	463b      	mov	r3, r7
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	785b      	ldrb	r3, [r3, #1]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	f040 8557 	bne.w	8009688 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008bda:	463b      	mov	r3, r7
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	699a      	ldr	r2, [r3, #24]
 8008be0:	463b      	mov	r3, r7
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d905      	bls.n	8008bf6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008bea:	463b      	mov	r3, r7
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008bf4:	e004      	b.n	8008c00 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008bf6:	463b      	mov	r3, r7
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	699b      	ldr	r3, [r3, #24]
 8008bfc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008c00:	463b      	mov	r3, r7
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	7b1b      	ldrb	r3, [r3, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d12c      	bne.n	8008c64 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008c0a:	463b      	mov	r3, r7
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6959      	ldr	r1, [r3, #20]
 8008c10:	463b      	mov	r3, r7
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	88da      	ldrh	r2, [r3, #6]
 8008c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	1d38      	adds	r0, r7, #4
 8008c1e:	6800      	ldr	r0, [r0, #0]
 8008c20:	f001 fa2c 	bl	800a07c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008c24:	1d3b      	adds	r3, r7, #4
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	617b      	str	r3, [r7, #20]
 8008c2a:	1d3b      	adds	r3, r7, #4
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	461a      	mov	r2, r3
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	4413      	add	r3, r2
 8008c3a:	617b      	str	r3, [r7, #20]
 8008c3c:	463b      	mov	r3, r7
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	011a      	lsls	r2, r3, #4
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	4413      	add	r3, r2
 8008c48:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008c4c:	f107 0310 	add.w	r3, r7, #16
 8008c50:	601a      	str	r2, [r3, #0]
 8008c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	f107 0310 	add.w	r3, r7, #16
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	801a      	strh	r2, [r3, #0]
 8008c60:	f000 bcdd 	b.w	800961e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008c64:	463b      	mov	r3, r7
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	78db      	ldrb	r3, [r3, #3]
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	f040 8347 	bne.w	80092fe <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008c70:	463b      	mov	r3, r7
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6a1a      	ldr	r2, [r3, #32]
 8008c76:	463b      	mov	r3, r7
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	f240 82eb 	bls.w	8009258 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008c82:	1d3b      	adds	r3, r7, #4
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	463b      	mov	r3, r7
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c9c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8008ca0:	1d3b      	adds	r3, r7, #4
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	463b      	mov	r3, r7
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	441a      	add	r2, r3
 8008cae:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008cc6:	463b      	mov	r3, r7
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6a1a      	ldr	r2, [r3, #32]
 8008ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cd0:	1ad2      	subs	r2, r2, r3
 8008cd2:	463b      	mov	r3, r7
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008cd8:	1d3b      	adds	r3, r7, #4
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	463b      	mov	r3, r7
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4413      	add	r3, r2
 8008ce6:	881b      	ldrh	r3, [r3, #0]
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f000 8159 	beq.w	8008fa6 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008cf4:	1d3b      	adds	r3, r7, #4
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8008cfa:	463b      	mov	r3, r7
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	785b      	ldrb	r3, [r3, #1]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d164      	bne.n	8008dce <USB_EPStartXfer+0x20e>
 8008d04:	1d3b      	adds	r3, r7, #4
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d0a:	1d3b      	adds	r3, r7, #4
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	461a      	mov	r2, r3
 8008d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d18:	4413      	add	r3, r2
 8008d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d1c:	463b      	mov	r3, r7
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	011a      	lsls	r2, r3, #4
 8008d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d26:	4413      	add	r3, r2
 8008d28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d112      	bne.n	8008d5c <USB_EPStartXfer+0x19c>
 8008d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d44:	801a      	strh	r2, [r3, #0]
 8008d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d58:	801a      	strh	r2, [r3, #0]
 8008d5a:	e054      	b.n	8008e06 <USB_EPStartXfer+0x246>
 8008d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d60:	2b3e      	cmp	r3, #62	; 0x3e
 8008d62:	d817      	bhi.n	8008d94 <USB_EPStartXfer+0x1d4>
 8008d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d68:	085b      	lsrs	r3, r3, #1
 8008d6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d72:	f003 0301 	and.w	r3, r3, #1
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d004      	beq.n	8008d84 <USB_EPStartXfer+0x1c4>
 8008d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d7e:	3301      	adds	r3, #1
 8008d80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	029b      	lsls	r3, r3, #10
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	801a      	strh	r2, [r3, #0]
 8008d92:	e038      	b.n	8008e06 <USB_EPStartXfer+0x246>
 8008d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d98:	095b      	lsrs	r3, r3, #5
 8008d9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008da2:	f003 031f 	and.w	r3, r3, #31
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d104      	bne.n	8008db4 <USB_EPStartXfer+0x1f4>
 8008daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dae:	3b01      	subs	r3, #1
 8008db0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	029b      	lsls	r3, r3, #10
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	801a      	strh	r2, [r3, #0]
 8008dcc:	e01b      	b.n	8008e06 <USB_EPStartXfer+0x246>
 8008dce:	463b      	mov	r3, r7
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	785b      	ldrb	r3, [r3, #1]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d116      	bne.n	8008e06 <USB_EPStartXfer+0x246>
 8008dd8:	1d3b      	adds	r3, r7, #4
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	461a      	mov	r2, r3
 8008de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de6:	4413      	add	r3, r2
 8008de8:	637b      	str	r3, [r7, #52]	; 0x34
 8008dea:	463b      	mov	r3, r7
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	011a      	lsls	r2, r3, #4
 8008df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df4:	4413      	add	r3, r2
 8008df6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008dfa:	633b      	str	r3, [r7, #48]	; 0x30
 8008dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e06:	463b      	mov	r3, r7
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	895b      	ldrh	r3, [r3, #10]
 8008e0c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e10:	463b      	mov	r3, r7
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6959      	ldr	r1, [r3, #20]
 8008e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008e20:	1d38      	adds	r0, r7, #4
 8008e22:	6800      	ldr	r0, [r0, #0]
 8008e24:	f001 f92a 	bl	800a07c <USB_WritePMA>
            ep->xfer_buff += len;
 8008e28:	463b      	mov	r3, r7
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	695a      	ldr	r2, [r3, #20]
 8008e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e32:	441a      	add	r2, r3
 8008e34:	463b      	mov	r3, r7
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008e3a:	463b      	mov	r3, r7
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	6a1a      	ldr	r2, [r3, #32]
 8008e40:	463b      	mov	r3, r7
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d909      	bls.n	8008e5e <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8008e4a:	463b      	mov	r3, r7
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	6a1a      	ldr	r2, [r3, #32]
 8008e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e54:	1ad2      	subs	r2, r2, r3
 8008e56:	463b      	mov	r3, r7
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	621a      	str	r2, [r3, #32]
 8008e5c:	e008      	b.n	8008e70 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8008e5e:	463b      	mov	r3, r7
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8008e68:	463b      	mov	r3, r7
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008e70:	463b      	mov	r3, r7
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	785b      	ldrb	r3, [r3, #1]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d164      	bne.n	8008f44 <USB_EPStartXfer+0x384>
 8008e7a:	1d3b      	adds	r3, r7, #4
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	61fb      	str	r3, [r7, #28]
 8008e80:	1d3b      	adds	r3, r7, #4
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	4413      	add	r3, r2
 8008e90:	61fb      	str	r3, [r7, #28]
 8008e92:	463b      	mov	r3, r7
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	011a      	lsls	r2, r3, #4
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ea2:	61bb      	str	r3, [r7, #24]
 8008ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d112      	bne.n	8008ed2 <USB_EPStartXfer+0x312>
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	881b      	ldrh	r3, [r3, #0]
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	801a      	strh	r2, [r3, #0]
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	801a      	strh	r2, [r3, #0]
 8008ed0:	e057      	b.n	8008f82 <USB_EPStartXfer+0x3c2>
 8008ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ed6:	2b3e      	cmp	r3, #62	; 0x3e
 8008ed8:	d817      	bhi.n	8008f0a <USB_EPStartXfer+0x34a>
 8008eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ede:	085b      	lsrs	r3, r3, #1
 8008ee0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d004      	beq.n	8008efa <USB_EPStartXfer+0x33a>
 8008ef0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008efa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	029b      	lsls	r3, r3, #10
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	801a      	strh	r2, [r3, #0]
 8008f08:	e03b      	b.n	8008f82 <USB_EPStartXfer+0x3c2>
 8008f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f0e:	095b      	lsrs	r3, r3, #5
 8008f10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f18:	f003 031f 	and.w	r3, r3, #31
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d104      	bne.n	8008f2a <USB_EPStartXfer+0x36a>
 8008f20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008f24:	3b01      	subs	r3, #1
 8008f26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008f2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	029b      	lsls	r3, r3, #10
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	801a      	strh	r2, [r3, #0]
 8008f42:	e01e      	b.n	8008f82 <USB_EPStartXfer+0x3c2>
 8008f44:	463b      	mov	r3, r7
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	785b      	ldrb	r3, [r3, #1]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d119      	bne.n	8008f82 <USB_EPStartXfer+0x3c2>
 8008f4e:	1d3b      	adds	r3, r7, #4
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	627b      	str	r3, [r7, #36]	; 0x24
 8008f54:	1d3b      	adds	r3, r7, #4
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	461a      	mov	r2, r3
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	4413      	add	r3, r2
 8008f64:	627b      	str	r3, [r7, #36]	; 0x24
 8008f66:	463b      	mov	r3, r7
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	011a      	lsls	r2, r3, #4
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	4413      	add	r3, r2
 8008f72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f76:	623b      	str	r3, [r7, #32]
 8008f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	6a3b      	ldr	r3, [r7, #32]
 8008f80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008f82:	463b      	mov	r3, r7
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	891b      	ldrh	r3, [r3, #8]
 8008f88:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f8c:	463b      	mov	r3, r7
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6959      	ldr	r1, [r3, #20]
 8008f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008f9c:	1d38      	adds	r0, r7, #4
 8008f9e:	6800      	ldr	r0, [r0, #0]
 8008fa0:	f001 f86c 	bl	800a07c <USB_WritePMA>
 8008fa4:	e33b      	b.n	800961e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008fa6:	463b      	mov	r3, r7
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	785b      	ldrb	r3, [r3, #1]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d164      	bne.n	800907a <USB_EPStartXfer+0x4ba>
 8008fb0:	1d3b      	adds	r3, r7, #4
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fb6:	1d3b      	adds	r3, r7, #4
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc4:	4413      	add	r3, r2
 8008fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fc8:	463b      	mov	r3, r7
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	011a      	lsls	r2, r3, #4
 8008fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008fd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d112      	bne.n	8009008 <USB_EPStartXfer+0x448>
 8008fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fe4:	881b      	ldrh	r3, [r3, #0]
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ff0:	801a      	strh	r2, [r3, #0]
 8008ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ff4:	881b      	ldrh	r3, [r3, #0]
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009000:	b29a      	uxth	r2, r3
 8009002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009004:	801a      	strh	r2, [r3, #0]
 8009006:	e057      	b.n	80090b8 <USB_EPStartXfer+0x4f8>
 8009008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800900c:	2b3e      	cmp	r3, #62	; 0x3e
 800900e:	d817      	bhi.n	8009040 <USB_EPStartXfer+0x480>
 8009010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009014:	085b      	lsrs	r3, r3, #1
 8009016:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800901a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d004      	beq.n	8009030 <USB_EPStartXfer+0x470>
 8009026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800902a:	3301      	adds	r3, #1
 800902c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009034:	b29b      	uxth	r3, r3
 8009036:	029b      	lsls	r3, r3, #10
 8009038:	b29a      	uxth	r2, r3
 800903a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800903c:	801a      	strh	r2, [r3, #0]
 800903e:	e03b      	b.n	80090b8 <USB_EPStartXfer+0x4f8>
 8009040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009044:	095b      	lsrs	r3, r3, #5
 8009046:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800904a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800904e:	f003 031f 	and.w	r3, r3, #31
 8009052:	2b00      	cmp	r3, #0
 8009054:	d104      	bne.n	8009060 <USB_EPStartXfer+0x4a0>
 8009056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800905a:	3b01      	subs	r3, #1
 800905c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009064:	b29b      	uxth	r3, r3
 8009066:	029b      	lsls	r3, r3, #10
 8009068:	b29b      	uxth	r3, r3
 800906a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800906e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009072:	b29a      	uxth	r2, r3
 8009074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009076:	801a      	strh	r2, [r3, #0]
 8009078:	e01e      	b.n	80090b8 <USB_EPStartXfer+0x4f8>
 800907a:	463b      	mov	r3, r7
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	785b      	ldrb	r3, [r3, #1]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d119      	bne.n	80090b8 <USB_EPStartXfer+0x4f8>
 8009084:	1d3b      	adds	r3, r7, #4
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	657b      	str	r3, [r7, #84]	; 0x54
 800908a:	1d3b      	adds	r3, r7, #4
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009092:	b29b      	uxth	r3, r3
 8009094:	461a      	mov	r2, r3
 8009096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009098:	4413      	add	r3, r2
 800909a:	657b      	str	r3, [r7, #84]	; 0x54
 800909c:	463b      	mov	r3, r7
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	011a      	lsls	r2, r3, #4
 80090a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090a6:	4413      	add	r3, r2
 80090a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090ac:	653b      	str	r3, [r7, #80]	; 0x50
 80090ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80090b8:	463b      	mov	r3, r7
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	891b      	ldrh	r3, [r3, #8]
 80090be:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090c2:	463b      	mov	r3, r7
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6959      	ldr	r1, [r3, #20]
 80090c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80090d2:	1d38      	adds	r0, r7, #4
 80090d4:	6800      	ldr	r0, [r0, #0]
 80090d6:	f000 ffd1 	bl	800a07c <USB_WritePMA>
            ep->xfer_buff += len;
 80090da:	463b      	mov	r3, r7
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	695a      	ldr	r2, [r3, #20]
 80090e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090e4:	441a      	add	r2, r3
 80090e6:	463b      	mov	r3, r7
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80090ec:	463b      	mov	r3, r7
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6a1a      	ldr	r2, [r3, #32]
 80090f2:	463b      	mov	r3, r7
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d909      	bls.n	8009110 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80090fc:	463b      	mov	r3, r7
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6a1a      	ldr	r2, [r3, #32]
 8009102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009106:	1ad2      	subs	r2, r2, r3
 8009108:	463b      	mov	r3, r7
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	621a      	str	r2, [r3, #32]
 800910e:	e008      	b.n	8009122 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8009110:	463b      	mov	r3, r7
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6a1b      	ldr	r3, [r3, #32]
 8009116:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800911a:	463b      	mov	r3, r7
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2200      	movs	r2, #0
 8009120:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009122:	1d3b      	adds	r3, r7, #4
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	647b      	str	r3, [r7, #68]	; 0x44
 8009128:	463b      	mov	r3, r7
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	785b      	ldrb	r3, [r3, #1]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d164      	bne.n	80091fc <USB_EPStartXfer+0x63c>
 8009132:	1d3b      	adds	r3, r7, #4
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009138:	1d3b      	adds	r3, r7, #4
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009140:	b29b      	uxth	r3, r3
 8009142:	461a      	mov	r2, r3
 8009144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009146:	4413      	add	r3, r2
 8009148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800914a:	463b      	mov	r3, r7
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	011a      	lsls	r2, r3, #4
 8009152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009154:	4413      	add	r3, r2
 8009156:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800915a:	63bb      	str	r3, [r7, #56]	; 0x38
 800915c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009160:	2b00      	cmp	r3, #0
 8009162:	d112      	bne.n	800918a <USB_EPStartXfer+0x5ca>
 8009164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	b29b      	uxth	r3, r3
 800916a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800916e:	b29a      	uxth	r2, r3
 8009170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009172:	801a      	strh	r2, [r3, #0]
 8009174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009176:	881b      	ldrh	r3, [r3, #0]
 8009178:	b29b      	uxth	r3, r3
 800917a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800917e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009182:	b29a      	uxth	r2, r3
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	801a      	strh	r2, [r3, #0]
 8009188:	e054      	b.n	8009234 <USB_EPStartXfer+0x674>
 800918a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800918e:	2b3e      	cmp	r3, #62	; 0x3e
 8009190:	d817      	bhi.n	80091c2 <USB_EPStartXfer+0x602>
 8009192:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009196:	085b      	lsrs	r3, r3, #1
 8009198:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800919c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091a0:	f003 0301 	and.w	r3, r3, #1
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d004      	beq.n	80091b2 <USB_EPStartXfer+0x5f2>
 80091a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091ac:	3301      	adds	r3, #1
 80091ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80091b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	029b      	lsls	r3, r3, #10
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091be:	801a      	strh	r2, [r3, #0]
 80091c0:	e038      	b.n	8009234 <USB_EPStartXfer+0x674>
 80091c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091c6:	095b      	lsrs	r3, r3, #5
 80091c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80091cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091d0:	f003 031f 	and.w	r3, r3, #31
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d104      	bne.n	80091e2 <USB_EPStartXfer+0x622>
 80091d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091dc:	3b01      	subs	r3, #1
 80091de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80091e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	029b      	lsls	r3, r3, #10
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	801a      	strh	r2, [r3, #0]
 80091fa:	e01b      	b.n	8009234 <USB_EPStartXfer+0x674>
 80091fc:	463b      	mov	r3, r7
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	785b      	ldrb	r3, [r3, #1]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d116      	bne.n	8009234 <USB_EPStartXfer+0x674>
 8009206:	1d3b      	adds	r3, r7, #4
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800920e:	b29b      	uxth	r3, r3
 8009210:	461a      	mov	r2, r3
 8009212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009214:	4413      	add	r3, r2
 8009216:	647b      	str	r3, [r7, #68]	; 0x44
 8009218:	463b      	mov	r3, r7
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	011a      	lsls	r2, r3, #4
 8009220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009222:	4413      	add	r3, r2
 8009224:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009228:	643b      	str	r3, [r7, #64]	; 0x40
 800922a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800922e:	b29a      	uxth	r2, r3
 8009230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009232:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009234:	463b      	mov	r3, r7
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	895b      	ldrh	r3, [r3, #10]
 800923a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800923e:	463b      	mov	r3, r7
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6959      	ldr	r1, [r3, #20]
 8009244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009248:	b29b      	uxth	r3, r3
 800924a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800924e:	1d38      	adds	r0, r7, #4
 8009250:	6800      	ldr	r0, [r0, #0]
 8009252:	f000 ff13 	bl	800a07c <USB_WritePMA>
 8009256:	e1e2      	b.n	800961e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009258:	463b      	mov	r3, r7
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009262:	1d3b      	adds	r3, r7, #4
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	463b      	mov	r3, r7
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	b29b      	uxth	r3, r3
 8009274:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009280:	1d3b      	adds	r3, r7, #4
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	463b      	mov	r3, r7
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	441a      	add	r2, r3
 800928e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800929a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800929e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80092a6:	1d3b      	adds	r3, r7, #4
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	663b      	str	r3, [r7, #96]	; 0x60
 80092ac:	1d3b      	adds	r3, r7, #4
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	461a      	mov	r2, r3
 80092b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092ba:	4413      	add	r3, r2
 80092bc:	663b      	str	r3, [r7, #96]	; 0x60
 80092be:	463b      	mov	r3, r7
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	011a      	lsls	r2, r3, #4
 80092c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092c8:	4413      	add	r3, r2
 80092ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80092da:	463b      	mov	r3, r7
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	891b      	ldrh	r3, [r3, #8]
 80092e0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092e4:	463b      	mov	r3, r7
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6959      	ldr	r1, [r3, #20]
 80092ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80092f4:	1d38      	adds	r0, r7, #4
 80092f6:	6800      	ldr	r0, [r0, #0]
 80092f8:	f000 fec0 	bl	800a07c <USB_WritePMA>
 80092fc:	e18f      	b.n	800961e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80092fe:	1d3b      	adds	r3, r7, #4
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	463b      	mov	r3, r7
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4413      	add	r3, r2
 800930c:	881b      	ldrh	r3, [r3, #0]
 800930e:	b29b      	uxth	r3, r3
 8009310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 808f 	beq.w	8009438 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800931a:	1d3b      	adds	r3, r7, #4
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009320:	463b      	mov	r3, r7
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	785b      	ldrb	r3, [r3, #1]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d164      	bne.n	80093f4 <USB_EPStartXfer+0x834>
 800932a:	1d3b      	adds	r3, r7, #4
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	673b      	str	r3, [r7, #112]	; 0x70
 8009330:	1d3b      	adds	r3, r7, #4
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009338:	b29b      	uxth	r3, r3
 800933a:	461a      	mov	r2, r3
 800933c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800933e:	4413      	add	r3, r2
 8009340:	673b      	str	r3, [r7, #112]	; 0x70
 8009342:	463b      	mov	r3, r7
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	011a      	lsls	r2, r3, #4
 800934a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800934c:	4413      	add	r3, r2
 800934e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009352:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009354:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009358:	2b00      	cmp	r3, #0
 800935a:	d112      	bne.n	8009382 <USB_EPStartXfer+0x7c2>
 800935c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	b29b      	uxth	r3, r3
 8009362:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009366:	b29a      	uxth	r2, r3
 8009368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800936a:	801a      	strh	r2, [r3, #0]
 800936c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	b29b      	uxth	r3, r3
 8009372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800937a:	b29a      	uxth	r2, r3
 800937c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800937e:	801a      	strh	r2, [r3, #0]
 8009380:	e054      	b.n	800942c <USB_EPStartXfer+0x86c>
 8009382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009386:	2b3e      	cmp	r3, #62	; 0x3e
 8009388:	d817      	bhi.n	80093ba <USB_EPStartXfer+0x7fa>
 800938a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800938e:	085b      	lsrs	r3, r3, #1
 8009390:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	2b00      	cmp	r3, #0
 800939e:	d004      	beq.n	80093aa <USB_EPStartXfer+0x7ea>
 80093a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093a4:	3301      	adds	r3, #1
 80093a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80093aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	029b      	lsls	r3, r3, #10
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093b6:	801a      	strh	r2, [r3, #0]
 80093b8:	e038      	b.n	800942c <USB_EPStartXfer+0x86c>
 80093ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093be:	095b      	lsrs	r3, r3, #5
 80093c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80093c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093c8:	f003 031f 	and.w	r3, r3, #31
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d104      	bne.n	80093da <USB_EPStartXfer+0x81a>
 80093d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d4:	3b01      	subs	r3, #1
 80093d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80093da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093de:	b29b      	uxth	r3, r3
 80093e0:	029b      	lsls	r3, r3, #10
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f0:	801a      	strh	r2, [r3, #0]
 80093f2:	e01b      	b.n	800942c <USB_EPStartXfer+0x86c>
 80093f4:	463b      	mov	r3, r7
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	785b      	ldrb	r3, [r3, #1]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d116      	bne.n	800942c <USB_EPStartXfer+0x86c>
 80093fe:	1d3b      	adds	r3, r7, #4
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009406:	b29b      	uxth	r3, r3
 8009408:	461a      	mov	r2, r3
 800940a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800940c:	4413      	add	r3, r2
 800940e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009410:	463b      	mov	r3, r7
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	011a      	lsls	r2, r3, #4
 8009418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800941a:	4413      	add	r3, r2
 800941c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009420:	677b      	str	r3, [r7, #116]	; 0x74
 8009422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009426:	b29a      	uxth	r2, r3
 8009428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800942a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800942c:	463b      	mov	r3, r7
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	895b      	ldrh	r3, [r3, #10]
 8009432:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8009436:	e097      	b.n	8009568 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009438:	463b      	mov	r3, r7
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	785b      	ldrb	r3, [r3, #1]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d168      	bne.n	8009514 <USB_EPStartXfer+0x954>
 8009442:	1d3b      	adds	r3, r7, #4
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800944a:	1d3b      	adds	r3, r7, #4
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009452:	b29b      	uxth	r3, r3
 8009454:	461a      	mov	r2, r3
 8009456:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800945a:	4413      	add	r3, r2
 800945c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009460:	463b      	mov	r3, r7
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	011a      	lsls	r2, r3, #4
 8009468:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800946c:	4413      	add	r3, r2
 800946e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009472:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009478:	2b00      	cmp	r3, #0
 800947a:	d112      	bne.n	80094a2 <USB_EPStartXfer+0x8e2>
 800947c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800947e:	881b      	ldrh	r3, [r3, #0]
 8009480:	b29b      	uxth	r3, r3
 8009482:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009486:	b29a      	uxth	r2, r3
 8009488:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800948a:	801a      	strh	r2, [r3, #0]
 800948c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800948e:	881b      	ldrh	r3, [r3, #0]
 8009490:	b29b      	uxth	r3, r3
 8009492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800949a:	b29a      	uxth	r2, r3
 800949c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800949e:	801a      	strh	r2, [r3, #0]
 80094a0:	e05d      	b.n	800955e <USB_EPStartXfer+0x99e>
 80094a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094a6:	2b3e      	cmp	r3, #62	; 0x3e
 80094a8:	d817      	bhi.n	80094da <USB_EPStartXfer+0x91a>
 80094aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094ae:	085b      	lsrs	r3, r3, #1
 80094b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80094b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094b8:	f003 0301 	and.w	r3, r3, #1
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d004      	beq.n	80094ca <USB_EPStartXfer+0x90a>
 80094c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80094c4:	3301      	adds	r3, #1
 80094c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80094ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	029b      	lsls	r3, r3, #10
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094d6:	801a      	strh	r2, [r3, #0]
 80094d8:	e041      	b.n	800955e <USB_EPStartXfer+0x99e>
 80094da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094de:	095b      	lsrs	r3, r3, #5
 80094e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80094e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094e8:	f003 031f 	and.w	r3, r3, #31
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d104      	bne.n	80094fa <USB_EPStartXfer+0x93a>
 80094f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80094f4:	3b01      	subs	r3, #1
 80094f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80094fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80094fe:	b29b      	uxth	r3, r3
 8009500:	029b      	lsls	r3, r3, #10
 8009502:	b29b      	uxth	r3, r3
 8009504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800950c:	b29a      	uxth	r2, r3
 800950e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009510:	801a      	strh	r2, [r3, #0]
 8009512:	e024      	b.n	800955e <USB_EPStartXfer+0x99e>
 8009514:	463b      	mov	r3, r7
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	785b      	ldrb	r3, [r3, #1]
 800951a:	2b01      	cmp	r3, #1
 800951c:	d11f      	bne.n	800955e <USB_EPStartXfer+0x99e>
 800951e:	1d3b      	adds	r3, r7, #4
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009526:	1d3b      	adds	r3, r7, #4
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800952e:	b29b      	uxth	r3, r3
 8009530:	461a      	mov	r2, r3
 8009532:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009536:	4413      	add	r3, r2
 8009538:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800953c:	463b      	mov	r3, r7
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	011a      	lsls	r2, r3, #4
 8009544:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009548:	4413      	add	r3, r2
 800954a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800954e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009556:	b29a      	uxth	r2, r3
 8009558:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800955c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800955e:	463b      	mov	r3, r7
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	891b      	ldrh	r3, [r3, #8]
 8009564:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009568:	463b      	mov	r3, r7
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6959      	ldr	r1, [r3, #20]
 800956e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009572:	b29b      	uxth	r3, r3
 8009574:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009578:	1d38      	adds	r0, r7, #4
 800957a:	6800      	ldr	r0, [r0, #0]
 800957c:	f000 fd7e 	bl	800a07c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009580:	463b      	mov	r3, r7
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	785b      	ldrb	r3, [r3, #1]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d122      	bne.n	80095d0 <USB_EPStartXfer+0xa10>
 800958a:	1d3b      	adds	r3, r7, #4
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	463b      	mov	r3, r7
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	881b      	ldrh	r3, [r3, #0]
 800959a:	b29b      	uxth	r3, r3
 800959c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095a4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80095a8:	1d3b      	adds	r3, r7, #4
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	463b      	mov	r3, r7
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	441a      	add	r2, r3
 80095b6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80095ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	8013      	strh	r3, [r2, #0]
 80095ce:	e026      	b.n	800961e <USB_EPStartXfer+0xa5e>
 80095d0:	463b      	mov	r3, r7
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	785b      	ldrb	r3, [r3, #1]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d121      	bne.n	800961e <USB_EPStartXfer+0xa5e>
 80095da:	1d3b      	adds	r3, r7, #4
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	463b      	mov	r3, r7
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	881b      	ldrh	r3, [r3, #0]
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095f4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80095f8:	1d3b      	adds	r3, r7, #4
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	463b      	mov	r3, r7
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	441a      	add	r2, r3
 8009606:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800960a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800960e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800961a:	b29b      	uxth	r3, r3
 800961c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800961e:	1d3b      	adds	r3, r7, #4
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	463b      	mov	r3, r7
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	4413      	add	r3, r2
 800962c:	881b      	ldrh	r3, [r3, #0]
 800962e:	b29b      	uxth	r3, r3
 8009630:	f107 020e 	add.w	r2, r7, #14
 8009634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800963c:	8013      	strh	r3, [r2, #0]
 800963e:	f107 030e 	add.w	r3, r7, #14
 8009642:	f107 020e 	add.w	r2, r7, #14
 8009646:	8812      	ldrh	r2, [r2, #0]
 8009648:	f082 0210 	eor.w	r2, r2, #16
 800964c:	801a      	strh	r2, [r3, #0]
 800964e:	f107 030e 	add.w	r3, r7, #14
 8009652:	f107 020e 	add.w	r2, r7, #14
 8009656:	8812      	ldrh	r2, [r2, #0]
 8009658:	f082 0220 	eor.w	r2, r2, #32
 800965c:	801a      	strh	r2, [r3, #0]
 800965e:	1d3b      	adds	r3, r7, #4
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	463b      	mov	r3, r7
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	441a      	add	r2, r3
 800966c:	f107 030e 	add.w	r3, r7, #14
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800967a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800967e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009682:	b29b      	uxth	r3, r3
 8009684:	8013      	strh	r3, [r2, #0]
 8009686:	e3b5      	b.n	8009df4 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009688:	463b      	mov	r3, r7
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	7b1b      	ldrb	r3, [r3, #12]
 800968e:	2b00      	cmp	r3, #0
 8009690:	f040 8090 	bne.w	80097b4 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009694:	463b      	mov	r3, r7
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	699a      	ldr	r2, [r3, #24]
 800969a:	463b      	mov	r3, r7
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d90e      	bls.n	80096c2 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80096a4:	463b      	mov	r3, r7
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80096ae:	463b      	mov	r3, r7
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	699a      	ldr	r2, [r3, #24]
 80096b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096b8:	1ad2      	subs	r2, r2, r3
 80096ba:	463b      	mov	r3, r7
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	619a      	str	r2, [r3, #24]
 80096c0:	e008      	b.n	80096d4 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80096c2:	463b      	mov	r3, r7
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80096cc:	463b      	mov	r3, r7
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2200      	movs	r2, #0
 80096d2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80096d4:	1d3b      	adds	r3, r7, #4
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80096dc:	1d3b      	adds	r3, r7, #4
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	461a      	mov	r2, r3
 80096e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80096ec:	4413      	add	r3, r2
 80096ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80096f2:	463b      	mov	r3, r7
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	011a      	lsls	r2, r3, #4
 80096fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80096fe:	4413      	add	r3, r2
 8009700:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009704:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009708:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800970c:	2b00      	cmp	r3, #0
 800970e:	d116      	bne.n	800973e <USB_EPStartXfer+0xb7e>
 8009710:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009714:	881b      	ldrh	r3, [r3, #0]
 8009716:	b29b      	uxth	r3, r3
 8009718:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800971c:	b29a      	uxth	r2, r3
 800971e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009722:	801a      	strh	r2, [r3, #0]
 8009724:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009728:	881b      	ldrh	r3, [r3, #0]
 800972a:	b29b      	uxth	r3, r3
 800972c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009734:	b29a      	uxth	r2, r3
 8009736:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800973a:	801a      	strh	r2, [r3, #0]
 800973c:	e32c      	b.n	8009d98 <USB_EPStartXfer+0x11d8>
 800973e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009742:	2b3e      	cmp	r3, #62	; 0x3e
 8009744:	d818      	bhi.n	8009778 <USB_EPStartXfer+0xbb8>
 8009746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800974a:	085b      	lsrs	r3, r3, #1
 800974c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009750:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009754:	f003 0301 	and.w	r3, r3, #1
 8009758:	2b00      	cmp	r3, #0
 800975a:	d004      	beq.n	8009766 <USB_EPStartXfer+0xba6>
 800975c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009760:	3301      	adds	r3, #1
 8009762:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009766:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800976a:	b29b      	uxth	r3, r3
 800976c:	029b      	lsls	r3, r3, #10
 800976e:	b29a      	uxth	r2, r3
 8009770:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009774:	801a      	strh	r2, [r3, #0]
 8009776:	e30f      	b.n	8009d98 <USB_EPStartXfer+0x11d8>
 8009778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800977c:	095b      	lsrs	r3, r3, #5
 800977e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009786:	f003 031f 	and.w	r3, r3, #31
 800978a:	2b00      	cmp	r3, #0
 800978c:	d104      	bne.n	8009798 <USB_EPStartXfer+0xbd8>
 800978e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009792:	3b01      	subs	r3, #1
 8009794:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009798:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800979c:	b29b      	uxth	r3, r3
 800979e:	029b      	lsls	r3, r3, #10
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097b0:	801a      	strh	r2, [r3, #0]
 80097b2:	e2f1      	b.n	8009d98 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80097b4:	463b      	mov	r3, r7
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	78db      	ldrb	r3, [r3, #3]
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	f040 818f 	bne.w	8009ade <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80097c0:	463b      	mov	r3, r7
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	785b      	ldrb	r3, [r3, #1]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d175      	bne.n	80098b6 <USB_EPStartXfer+0xcf6>
 80097ca:	1d3b      	adds	r3, r7, #4
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097d2:	1d3b      	adds	r3, r7, #4
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097da:	b29b      	uxth	r3, r3
 80097dc:	461a      	mov	r2, r3
 80097de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80097e2:	4413      	add	r3, r2
 80097e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097e8:	463b      	mov	r3, r7
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	011a      	lsls	r2, r3, #4
 80097f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80097f4:	4413      	add	r3, r2
 80097f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80097fe:	463b      	mov	r3, r7
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d116      	bne.n	8009836 <USB_EPStartXfer+0xc76>
 8009808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800980c:	881b      	ldrh	r3, [r3, #0]
 800980e:	b29b      	uxth	r3, r3
 8009810:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009814:	b29a      	uxth	r2, r3
 8009816:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800981a:	801a      	strh	r2, [r3, #0]
 800981c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009820:	881b      	ldrh	r3, [r3, #0]
 8009822:	b29b      	uxth	r3, r3
 8009824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800982c:	b29a      	uxth	r2, r3
 800982e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009832:	801a      	strh	r2, [r3, #0]
 8009834:	e065      	b.n	8009902 <USB_EPStartXfer+0xd42>
 8009836:	463b      	mov	r3, r7
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	2b3e      	cmp	r3, #62	; 0x3e
 800983e:	d81a      	bhi.n	8009876 <USB_EPStartXfer+0xcb6>
 8009840:	463b      	mov	r3, r7
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	085b      	lsrs	r3, r3, #1
 8009848:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800984c:	463b      	mov	r3, r7
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	2b00      	cmp	r3, #0
 8009858:	d004      	beq.n	8009864 <USB_EPStartXfer+0xca4>
 800985a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800985e:	3301      	adds	r3, #1
 8009860:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009864:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009868:	b29b      	uxth	r3, r3
 800986a:	029b      	lsls	r3, r3, #10
 800986c:	b29a      	uxth	r2, r3
 800986e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009872:	801a      	strh	r2, [r3, #0]
 8009874:	e045      	b.n	8009902 <USB_EPStartXfer+0xd42>
 8009876:	463b      	mov	r3, r7
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	095b      	lsrs	r3, r3, #5
 800987e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009882:	463b      	mov	r3, r7
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	f003 031f 	and.w	r3, r3, #31
 800988c:	2b00      	cmp	r3, #0
 800988e:	d104      	bne.n	800989a <USB_EPStartXfer+0xcda>
 8009890:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009894:	3b01      	subs	r3, #1
 8009896:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800989a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800989e:	b29b      	uxth	r3, r3
 80098a0:	029b      	lsls	r3, r3, #10
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098b2:	801a      	strh	r2, [r3, #0]
 80098b4:	e025      	b.n	8009902 <USB_EPStartXfer+0xd42>
 80098b6:	463b      	mov	r3, r7
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	785b      	ldrb	r3, [r3, #1]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d120      	bne.n	8009902 <USB_EPStartXfer+0xd42>
 80098c0:	1d3b      	adds	r3, r7, #4
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80098c8:	1d3b      	adds	r3, r7, #4
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	461a      	mov	r2, r3
 80098d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80098d8:	4413      	add	r3, r2
 80098da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80098de:	463b      	mov	r3, r7
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	011a      	lsls	r2, r3, #4
 80098e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80098ea:	4413      	add	r3, r2
 80098ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80098f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098f4:	463b      	mov	r3, r7
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009900:	801a      	strh	r2, [r3, #0]
 8009902:	1d3b      	adds	r3, r7, #4
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800990a:	463b      	mov	r3, r7
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	785b      	ldrb	r3, [r3, #1]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d175      	bne.n	8009a00 <USB_EPStartXfer+0xe40>
 8009914:	1d3b      	adds	r3, r7, #4
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800991c:	1d3b      	adds	r3, r7, #4
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009924:	b29b      	uxth	r3, r3
 8009926:	461a      	mov	r2, r3
 8009928:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800992c:	4413      	add	r3, r2
 800992e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009932:	463b      	mov	r3, r7
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	011a      	lsls	r2, r3, #4
 800993a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800993e:	4413      	add	r3, r2
 8009940:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009944:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009948:	463b      	mov	r3, r7
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d116      	bne.n	8009980 <USB_EPStartXfer+0xdc0>
 8009952:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009956:	881b      	ldrh	r3, [r3, #0]
 8009958:	b29b      	uxth	r3, r3
 800995a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800995e:	b29a      	uxth	r2, r3
 8009960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009964:	801a      	strh	r2, [r3, #0]
 8009966:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800996a:	881b      	ldrh	r3, [r3, #0]
 800996c:	b29b      	uxth	r3, r3
 800996e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009976:	b29a      	uxth	r2, r3
 8009978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800997c:	801a      	strh	r2, [r3, #0]
 800997e:	e061      	b.n	8009a44 <USB_EPStartXfer+0xe84>
 8009980:	463b      	mov	r3, r7
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	2b3e      	cmp	r3, #62	; 0x3e
 8009988:	d81a      	bhi.n	80099c0 <USB_EPStartXfer+0xe00>
 800998a:	463b      	mov	r3, r7
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	085b      	lsrs	r3, r3, #1
 8009992:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009996:	463b      	mov	r3, r7
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d004      	beq.n	80099ae <USB_EPStartXfer+0xdee>
 80099a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099a8:	3301      	adds	r3, #1
 80099aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80099ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	029b      	lsls	r3, r3, #10
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099bc:	801a      	strh	r2, [r3, #0]
 80099be:	e041      	b.n	8009a44 <USB_EPStartXfer+0xe84>
 80099c0:	463b      	mov	r3, r7
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	095b      	lsrs	r3, r3, #5
 80099c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80099cc:	463b      	mov	r3, r7
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	f003 031f 	and.w	r3, r3, #31
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d104      	bne.n	80099e4 <USB_EPStartXfer+0xe24>
 80099da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099de:	3b01      	subs	r3, #1
 80099e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80099e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	029b      	lsls	r3, r3, #10
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099fc:	801a      	strh	r2, [r3, #0]
 80099fe:	e021      	b.n	8009a44 <USB_EPStartXfer+0xe84>
 8009a00:	463b      	mov	r3, r7
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	785b      	ldrb	r3, [r3, #1]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d11c      	bne.n	8009a44 <USB_EPStartXfer+0xe84>
 8009a0a:	1d3b      	adds	r3, r7, #4
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	461a      	mov	r2, r3
 8009a16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a1a:	4413      	add	r3, r2
 8009a1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009a20:	463b      	mov	r3, r7
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	011a      	lsls	r2, r3, #4
 8009a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a36:	463b      	mov	r3, r7
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a42:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009a44:	463b      	mov	r3, r7
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	69db      	ldr	r3, [r3, #28]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f000 81a4 	beq.w	8009d98 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009a50:	1d3b      	adds	r3, r7, #4
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	463b      	mov	r3, r7
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4413      	add	r3, r2
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009a64:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d005      	beq.n	8009a7c <USB_EPStartXfer+0xebc>
 8009a70:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10d      	bne.n	8009a98 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009a7c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f040 8187 	bne.w	8009d98 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009a8a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f040 8180 	bne.w	8009d98 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009a98:	1d3b      	adds	r3, r7, #4
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	463b      	mov	r3, r7
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	4413      	add	r3, r2
 8009aa6:	881b      	ldrh	r3, [r3, #0]
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ab2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8009ab6:	1d3b      	adds	r3, r7, #4
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	463b      	mov	r3, r7
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	441a      	add	r2, r3
 8009ac4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8009ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	8013      	strh	r3, [r2, #0]
 8009adc:	e15c      	b.n	8009d98 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009ade:	463b      	mov	r3, r7
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	78db      	ldrb	r3, [r3, #3]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	f040 8155 	bne.w	8009d94 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009aea:	463b      	mov	r3, r7
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	699a      	ldr	r2, [r3, #24]
 8009af0:	463b      	mov	r3, r7
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d90e      	bls.n	8009b18 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8009afa:	463b      	mov	r3, r7
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8009b04:	463b      	mov	r3, r7
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	699a      	ldr	r2, [r3, #24]
 8009b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b0e:	1ad2      	subs	r2, r2, r3
 8009b10:	463b      	mov	r3, r7
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	619a      	str	r2, [r3, #24]
 8009b16:	e008      	b.n	8009b2a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8009b18:	463b      	mov	r3, r7
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8009b22:	463b      	mov	r3, r7
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2200      	movs	r2, #0
 8009b28:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009b2a:	463b      	mov	r3, r7
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	785b      	ldrb	r3, [r3, #1]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d16f      	bne.n	8009c14 <USB_EPStartXfer+0x1054>
 8009b34:	1d3b      	adds	r3, r7, #4
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b3c:	1d3b      	adds	r3, r7, #4
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	461a      	mov	r2, r3
 8009b48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b52:	463b      	mov	r3, r7
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	011a      	lsls	r2, r3, #4
 8009b5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009b5e:	4413      	add	r3, r2
 8009b60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d116      	bne.n	8009b9e <USB_EPStartXfer+0xfde>
 8009b70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009b74:	881b      	ldrh	r3, [r3, #0]
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009b82:	801a      	strh	r2, [r3, #0]
 8009b84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009b88:	881b      	ldrh	r3, [r3, #0]
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b94:	b29a      	uxth	r2, r3
 8009b96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009b9a:	801a      	strh	r2, [r3, #0]
 8009b9c:	e05f      	b.n	8009c5e <USB_EPStartXfer+0x109e>
 8009b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ba2:	2b3e      	cmp	r3, #62	; 0x3e
 8009ba4:	d818      	bhi.n	8009bd8 <USB_EPStartXfer+0x1018>
 8009ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009baa:	085b      	lsrs	r3, r3, #1
 8009bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bb4:	f003 0301 	and.w	r3, r3, #1
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d004      	beq.n	8009bc6 <USB_EPStartXfer+0x1006>
 8009bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	029b      	lsls	r3, r3, #10
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009bd4:	801a      	strh	r2, [r3, #0]
 8009bd6:	e042      	b.n	8009c5e <USB_EPStartXfer+0x109e>
 8009bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bdc:	095b      	lsrs	r3, r3, #5
 8009bde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009be6:	f003 031f 	and.w	r3, r3, #31
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d104      	bne.n	8009bf8 <USB_EPStartXfer+0x1038>
 8009bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	029b      	lsls	r3, r3, #10
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c10:	801a      	strh	r2, [r3, #0]
 8009c12:	e024      	b.n	8009c5e <USB_EPStartXfer+0x109e>
 8009c14:	463b      	mov	r3, r7
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	785b      	ldrb	r3, [r3, #1]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d11f      	bne.n	8009c5e <USB_EPStartXfer+0x109e>
 8009c1e:	1d3b      	adds	r3, r7, #4
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c26:	1d3b      	adds	r3, r7, #4
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	461a      	mov	r2, r3
 8009c32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c36:	4413      	add	r3, r2
 8009c38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c3c:	463b      	mov	r3, r7
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	011a      	lsls	r2, r3, #4
 8009c44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c48:	4413      	add	r3, r2
 8009c4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009c5c:	801a      	strh	r2, [r3, #0]
 8009c5e:	1d3b      	adds	r3, r7, #4
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c66:	463b      	mov	r3, r7
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	785b      	ldrb	r3, [r3, #1]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d16f      	bne.n	8009d50 <USB_EPStartXfer+0x1190>
 8009c70:	1d3b      	adds	r3, r7, #4
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c78:	1d3b      	adds	r3, r7, #4
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	461a      	mov	r2, r3
 8009c84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009c88:	4413      	add	r3, r2
 8009c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c8e:	463b      	mov	r3, r7
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	011a      	lsls	r2, r3, #4
 8009c96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009ca0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d116      	bne.n	8009cda <USB_EPStartXfer+0x111a>
 8009cac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009cb0:	881b      	ldrh	r3, [r3, #0]
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009cbe:	801a      	strh	r2, [r3, #0]
 8009cc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009cc4:	881b      	ldrh	r3, [r3, #0]
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cd0:	b29a      	uxth	r2, r3
 8009cd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009cd6:	801a      	strh	r2, [r3, #0]
 8009cd8:	e05e      	b.n	8009d98 <USB_EPStartXfer+0x11d8>
 8009cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009cde:	2b3e      	cmp	r3, #62	; 0x3e
 8009ce0:	d818      	bhi.n	8009d14 <USB_EPStartXfer+0x1154>
 8009ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ce6:	085b      	lsrs	r3, r3, #1
 8009ce8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009cf0:	f003 0301 	and.w	r3, r3, #1
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d004      	beq.n	8009d02 <USB_EPStartXfer+0x1142>
 8009cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	029b      	lsls	r3, r3, #10
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009d10:	801a      	strh	r2, [r3, #0]
 8009d12:	e041      	b.n	8009d98 <USB_EPStartXfer+0x11d8>
 8009d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d18:	095b      	lsrs	r3, r3, #5
 8009d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d22:	f003 031f 	and.w	r3, r3, #31
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d104      	bne.n	8009d34 <USB_EPStartXfer+0x1174>
 8009d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	029b      	lsls	r3, r3, #10
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009d4c:	801a      	strh	r2, [r3, #0]
 8009d4e:	e023      	b.n	8009d98 <USB_EPStartXfer+0x11d8>
 8009d50:	463b      	mov	r3, r7
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	785b      	ldrb	r3, [r3, #1]
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d11e      	bne.n	8009d98 <USB_EPStartXfer+0x11d8>
 8009d5a:	1d3b      	adds	r3, r7, #4
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	461a      	mov	r2, r3
 8009d66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d70:	463b      	mov	r3, r7
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	011a      	lsls	r2, r3, #4
 8009d78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d7c:	4413      	add	r3, r2
 8009d7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009d90:	801a      	strh	r2, [r3, #0]
 8009d92:	e001      	b.n	8009d98 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	e02e      	b.n	8009df6 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d98:	1d3b      	adds	r3, r7, #4
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	463b      	mov	r3, r7
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	881b      	ldrh	r3, [r3, #0]
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009db6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009dba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009dbe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009dc2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009dc6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009dca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009dce:	1d3b      	adds	r3, r7, #4
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	463b      	mov	r3, r7
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	441a      	add	r2, r3
 8009ddc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	785b      	ldrb	r3, [r3, #1]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d020      	beq.n	8009e54 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e28:	81bb      	strh	r3, [r7, #12]
 8009e2a:	89bb      	ldrh	r3, [r7, #12]
 8009e2c:	f083 0310 	eor.w	r3, r3, #16
 8009e30:	81bb      	strh	r3, [r7, #12]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	441a      	add	r2, r3
 8009e3c:	89bb      	ldrh	r3, [r7, #12]
 8009e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	8013      	strh	r3, [r2, #0]
 8009e52:	e01f      	b.n	8009e94 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4413      	add	r3, r2
 8009e5e:	881b      	ldrh	r3, [r3, #0]
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e6a:	81fb      	strh	r3, [r7, #14]
 8009e6c:	89fb      	ldrh	r3, [r7, #14]
 8009e6e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009e72:	81fb      	strh	r3, [r7, #14]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	441a      	add	r2, r3
 8009e7e:	89fb      	ldrh	r3, [r7, #14]
 8009e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bc80      	pop	{r7}
 8009e9e:	4770      	bx	lr

08009ea0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b087      	sub	sp, #28
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	7b1b      	ldrb	r3, [r3, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f040 809d 	bne.w	8009fee <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	785b      	ldrb	r3, [r3, #1]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d04c      	beq.n	8009f56 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4413      	add	r3, r2
 8009ec6:	881b      	ldrh	r3, [r3, #0]
 8009ec8:	823b      	strh	r3, [r7, #16]
 8009eca:	8a3b      	ldrh	r3, [r7, #16]
 8009ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d01b      	beq.n	8009f0c <USB_EPClearStall+0x6c>
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	881b      	ldrh	r3, [r3, #0]
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eea:	81fb      	strh	r3, [r7, #14]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	441a      	add	r2, r3
 8009ef6:	89fb      	ldrh	r3, [r7, #14]
 8009ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	78db      	ldrb	r3, [r3, #3]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d06c      	beq.n	8009fee <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	4413      	add	r3, r2
 8009f1e:	881b      	ldrh	r3, [r3, #0]
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f2a:	81bb      	strh	r3, [r7, #12]
 8009f2c:	89bb      	ldrh	r3, [r7, #12]
 8009f2e:	f083 0320 	eor.w	r3, r3, #32
 8009f32:	81bb      	strh	r3, [r7, #12]
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	441a      	add	r2, r3
 8009f3e:	89bb      	ldrh	r3, [r7, #12]
 8009f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	8013      	strh	r3, [r2, #0]
 8009f54:	e04b      	b.n	8009fee <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	4413      	add	r3, r2
 8009f60:	881b      	ldrh	r3, [r3, #0]
 8009f62:	82fb      	strh	r3, [r7, #22]
 8009f64:	8afb      	ldrh	r3, [r7, #22]
 8009f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d01b      	beq.n	8009fa6 <USB_EPClearStall+0x106>
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f84:	82bb      	strh	r3, [r7, #20]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	441a      	add	r2, r3
 8009f90:	8abb      	ldrh	r3, [r7, #20]
 8009f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fbc:	827b      	strh	r3, [r7, #18]
 8009fbe:	8a7b      	ldrh	r3, [r7, #18]
 8009fc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009fc4:	827b      	strh	r3, [r7, #18]
 8009fc6:	8a7b      	ldrh	r3, [r7, #18]
 8009fc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009fcc:	827b      	strh	r3, [r7, #18]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	441a      	add	r2, r3
 8009fd8:	8a7b      	ldrh	r3, [r7, #18]
 8009fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	371c      	adds	r7, #28
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bc80      	pop	{r7}
 8009ff8:	4770      	bx	lr

08009ffa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009ffa:	b480      	push	{r7}
 8009ffc:	b083      	sub	sp, #12
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	460b      	mov	r3, r1
 800a004:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a006:	78fb      	ldrb	r3, [r7, #3]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d103      	bne.n	800a014 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2280      	movs	r2, #128	; 0x80
 800a010:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	370c      	adds	r7, #12
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bc80      	pop	{r7}
 800a01e:	4770      	bx	lr

0800a020 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	370c      	adds	r7, #12
 800a02e:	46bd      	mov	sp, r7
 800a030:	bc80      	pop	{r7}
 800a032:	4770      	bx	lr

0800a034 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	bc80      	pop	{r7}
 800a046:	4770      	bx	lr

0800a048 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a056:	b29b      	uxth	r3, r3
 800a058:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a05a:	68fb      	ldr	r3, [r7, #12]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	bc80      	pop	{r7}
 800a064:	4770      	bx	lr

0800a066 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a066:	b480      	push	{r7}
 800a068:	b083      	sub	sp, #12
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
 800a06e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	bc80      	pop	{r7}
 800a07a:	4770      	bx	lr

0800a07c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b08d      	sub	sp, #52	; 0x34
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	4611      	mov	r1, r2
 800a088:	461a      	mov	r2, r3
 800a08a:	460b      	mov	r3, r1
 800a08c:	80fb      	strh	r3, [r7, #6]
 800a08e:	4613      	mov	r3, r2
 800a090:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a092:	88bb      	ldrh	r3, [r7, #4]
 800a094:	3301      	adds	r3, #1
 800a096:	085b      	lsrs	r3, r3, #1
 800a098:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a0a2:	88fb      	ldrh	r3, [r7, #6]
 800a0a4:	005a      	lsls	r2, r3, #1
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0ae:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a0b0:	6a3b      	ldr	r3, [r7, #32]
 800a0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0b4:	e01e      	b.n	800a0f4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0be:	3301      	adds	r3, #1
 800a0c0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	021b      	lsls	r3, r3, #8
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0da:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0de:	3302      	adds	r3, #2
 800a0e0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e4:	3302      	adds	r3, #2
 800a0e6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d1dd      	bne.n	800a0b6 <USB_WritePMA+0x3a>
  }
}
 800a0fa:	bf00      	nop
 800a0fc:	3734      	adds	r7, #52	; 0x34
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bc80      	pop	{r7}
 800a102:	4770      	bx	lr

0800a104 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a104:	b480      	push	{r7}
 800a106:	b08b      	sub	sp, #44	; 0x2c
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	4611      	mov	r1, r2
 800a110:	461a      	mov	r2, r3
 800a112:	460b      	mov	r3, r1
 800a114:	80fb      	strh	r3, [r7, #6]
 800a116:	4613      	mov	r3, r2
 800a118:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a11a:	88bb      	ldrh	r3, [r7, #4]
 800a11c:	085b      	lsrs	r3, r3, #1
 800a11e:	b29b      	uxth	r3, r3
 800a120:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a12a:	88fb      	ldrh	r3, [r7, #6]
 800a12c:	005a      	lsls	r2, r3, #1
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	4413      	add	r3, r2
 800a132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a136:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	627b      	str	r3, [r7, #36]	; 0x24
 800a13c:	e01b      	b.n	800a176 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a13e:	6a3b      	ldr	r3, [r7, #32]
 800a140:	881b      	ldrh	r3, [r3, #0]
 800a142:	b29b      	uxth	r3, r3
 800a144:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	3302      	adds	r3, #2
 800a14a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	3301      	adds	r3, #1
 800a158:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	0a1b      	lsrs	r3, r3, #8
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	3301      	adds	r3, #1
 800a168:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	3302      	adds	r3, #2
 800a16e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	3b01      	subs	r3, #1
 800a174:	627b      	str	r3, [r7, #36]	; 0x24
 800a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1e0      	bne.n	800a13e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a17c:	88bb      	ldrh	r3, [r7, #4]
 800a17e:	f003 0301 	and.w	r3, r3, #1
 800a182:	b29b      	uxth	r3, r3
 800a184:	2b00      	cmp	r3, #0
 800a186:	d007      	beq.n	800a198 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a188:	6a3b      	ldr	r3, [r7, #32]
 800a18a:	881b      	ldrh	r3, [r3, #0]
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	b2da      	uxtb	r2, r3
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	701a      	strb	r2, [r3, #0]
  }
}
 800a198:	bf00      	nop
 800a19a:	372c      	adds	r7, #44	; 0x2c
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bc80      	pop	{r7}
 800a1a0:	4770      	bx	lr

0800a1a2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	7c1b      	ldrb	r3, [r3, #16]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d115      	bne.n	800a1e6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a1ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1be:	2202      	movs	r2, #2
 800a1c0:	2181      	movs	r1, #129	; 0x81
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f001 fe75 	bl	800beb2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a1ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f001 fe6b 	bl	800beb2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a1e4:	e012      	b.n	800a20c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a1e6:	2340      	movs	r3, #64	; 0x40
 800a1e8:	2202      	movs	r2, #2
 800a1ea:	2181      	movs	r1, #129	; 0x81
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f001 fe60 	bl	800beb2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a1f8:	2340      	movs	r3, #64	; 0x40
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	2101      	movs	r1, #1
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f001 fe57 	bl	800beb2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a20c:	2308      	movs	r3, #8
 800a20e:	2203      	movs	r2, #3
 800a210:	2182      	movs	r1, #130	; 0x82
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f001 fe4d 	bl	800beb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a21e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a222:	f001 ff6d 	bl	800c100 <USBD_static_malloc>
 800a226:	4602      	mov	r2, r0
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a234:	2b00      	cmp	r3, #0
 800a236:	d102      	bne.n	800a23e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a238:	2301      	movs	r3, #1
 800a23a:	73fb      	strb	r3, [r7, #15]
 800a23c:	e026      	b.n	800a28c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a244:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	2200      	movs	r2, #0
 800a254:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	7c1b      	ldrb	r3, [r3, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d109      	bne.n	800a27c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a26e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a272:	2101      	movs	r1, #1
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f001 ff0d 	bl	800c094 <USBD_LL_PrepareReceive>
 800a27a:	e007      	b.n	800a28c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a282:	2340      	movs	r3, #64	; 0x40
 800a284:	2101      	movs	r1, #1
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f001 ff04 	bl	800c094 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b084      	sub	sp, #16
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
 800a29e:	460b      	mov	r3, r1
 800a2a0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a2a6:	2181      	movs	r1, #129	; 0x81
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 fe28 	bl	800befe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a2b4:	2101      	movs	r1, #1
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f001 fe21 	bl	800befe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a2c4:	2182      	movs	r1, #130	; 0x82
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f001 fe19 	bl	800befe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00e      	beq.n	800a2fa <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f001 ff13 	bl	800c118 <USBD_static_free>
    pdev->pClassData = NULL;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b086      	sub	sp, #24
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a314:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a316:	2300      	movs	r3, #0
 800a318:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a31a:	2300      	movs	r3, #0
 800a31c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d039      	beq.n	800a3a2 <USBD_CDC_Setup+0x9e>
 800a32e:	2b20      	cmp	r3, #32
 800a330:	d17c      	bne.n	800a42c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	88db      	ldrh	r3, [r3, #6]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d029      	beq.n	800a38e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	b25b      	sxtb	r3, r3
 800a340:	2b00      	cmp	r3, #0
 800a342:	da11      	bge.n	800a368 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a350:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	88d2      	ldrh	r2, [r2, #6]
 800a356:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a358:	6939      	ldr	r1, [r7, #16]
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	88db      	ldrh	r3, [r3, #6]
 800a35e:	461a      	mov	r2, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f001 f9f9 	bl	800b758 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a366:	e068      	b.n	800a43a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	785a      	ldrb	r2, [r3, #1]
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	88db      	ldrh	r3, [r3, #6]
 800a376:	b2da      	uxtb	r2, r3
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a37e:	6939      	ldr	r1, [r7, #16]
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	88db      	ldrh	r3, [r3, #6]
 800a384:	461a      	mov	r2, r3
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f001 fa14 	bl	800b7b4 <USBD_CtlPrepareRx>
      break;
 800a38c:	e055      	b.n	800a43a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	7850      	ldrb	r0, [r2, #1]
 800a39a:	2200      	movs	r2, #0
 800a39c:	6839      	ldr	r1, [r7, #0]
 800a39e:	4798      	blx	r3
      break;
 800a3a0:	e04b      	b.n	800a43a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	785b      	ldrb	r3, [r3, #1]
 800a3a6:	2b0a      	cmp	r3, #10
 800a3a8:	d017      	beq.n	800a3da <USBD_CDC_Setup+0xd6>
 800a3aa:	2b0b      	cmp	r3, #11
 800a3ac:	d029      	beq.n	800a402 <USBD_CDC_Setup+0xfe>
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d133      	bne.n	800a41a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	d107      	bne.n	800a3cc <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a3bc:	f107 030c 	add.w	r3, r7, #12
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f001 f9c7 	bl	800b758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3ca:	e02e      	b.n	800a42a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f001 f958 	bl	800b684 <USBD_CtlError>
            ret = USBD_FAIL;
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	75fb      	strb	r3, [r7, #23]
          break;
 800a3d8:	e027      	b.n	800a42a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3e0:	2b03      	cmp	r3, #3
 800a3e2:	d107      	bne.n	800a3f4 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a3e4:	f107 030f 	add.w	r3, r7, #15
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f001 f9b3 	bl	800b758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3f2:	e01a      	b.n	800a42a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800a3f4:	6839      	ldr	r1, [r7, #0]
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f001 f944 	bl	800b684 <USBD_CtlError>
            ret = USBD_FAIL;
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	75fb      	strb	r3, [r7, #23]
          break;
 800a400:	e013      	b.n	800a42a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a408:	2b03      	cmp	r3, #3
 800a40a:	d00d      	beq.n	800a428 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800a40c:	6839      	ldr	r1, [r7, #0]
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f001 f938 	bl	800b684 <USBD_CtlError>
            ret = USBD_FAIL;
 800a414:	2302      	movs	r3, #2
 800a416:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a418:	e006      	b.n	800a428 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800a41a:	6839      	ldr	r1, [r7, #0]
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f001 f931 	bl	800b684 <USBD_CtlError>
          ret = USBD_FAIL;
 800a422:	2302      	movs	r3, #2
 800a424:	75fb      	strb	r3, [r7, #23]
          break;
 800a426:	e000      	b.n	800a42a <USBD_CDC_Setup+0x126>
          break;
 800a428:	bf00      	nop
      }
      break;
 800a42a:	e006      	b.n	800a43a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800a42c:	6839      	ldr	r1, [r7, #0]
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f001 f928 	bl	800b684 <USBD_CtlError>
      ret = USBD_FAIL;
 800a434:	2302      	movs	r3, #2
 800a436:	75fb      	strb	r3, [r7, #23]
      break;
 800a438:	bf00      	nop
  }

  return ret;
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3718      	adds	r7, #24
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a456:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a45e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a466:	2b00      	cmp	r3, #0
 800a468:	d03a      	beq.n	800a4e0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a46a:	78fa      	ldrb	r2, [r7, #3]
 800a46c:	6879      	ldr	r1, [r7, #4]
 800a46e:	4613      	mov	r3, r2
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	4413      	add	r3, r2
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	440b      	add	r3, r1
 800a478:	331c      	adds	r3, #28
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d029      	beq.n	800a4d4 <USBD_CDC_DataIn+0x90>
 800a480:	78fa      	ldrb	r2, [r7, #3]
 800a482:	6879      	ldr	r1, [r7, #4]
 800a484:	4613      	mov	r3, r2
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	4413      	add	r3, r2
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	440b      	add	r3, r1
 800a48e:	331c      	adds	r3, #28
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	78f9      	ldrb	r1, [r7, #3]
 800a494:	68b8      	ldr	r0, [r7, #8]
 800a496:	460b      	mov	r3, r1
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	440b      	add	r3, r1
 800a49c:	00db      	lsls	r3, r3, #3
 800a49e:	4403      	add	r3, r0
 800a4a0:	3338      	adds	r3, #56	; 0x38
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a4a8:	fb03 f301 	mul.w	r3, r3, r1
 800a4ac:	1ad3      	subs	r3, r2, r3
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d110      	bne.n	800a4d4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a4b2:	78fa      	ldrb	r2, [r7, #3]
 800a4b4:	6879      	ldr	r1, [r7, #4]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	4413      	add	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	440b      	add	r3, r1
 800a4c0:	331c      	adds	r3, #28
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a4c6:	78f9      	ldrb	r1, [r7, #3]
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f001 fdbe 	bl	800c04e <USBD_LL_Transmit>
 800a4d2:	e003      	b.n	800a4dc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	e000      	b.n	800a4e2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a4e0:	2302      	movs	r3, #2
  }
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b084      	sub	sp, #16
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4fc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a4fe:	78fb      	ldrb	r3, [r7, #3]
 800a500:	4619      	mov	r1, r3
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f001 fde9 	bl	800c0da <USBD_LL_GetRxDataSize>
 800a508:	4602      	mov	r2, r0
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00d      	beq.n	800a536 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a528:	68fa      	ldr	r2, [r7, #12]
 800a52a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a52e:	4611      	mov	r1, r2
 800a530:	4798      	blx	r3

    return USBD_OK;
 800a532:	2300      	movs	r3, #0
 800a534:	e000      	b.n	800a538 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a536:	2302      	movs	r3, #2
  }
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a54e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a556:	2b00      	cmp	r3, #0
 800a558:	d015      	beq.n	800a586 <USBD_CDC_EP0_RxReady+0x46>
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a560:	2bff      	cmp	r3, #255	; 0xff
 800a562:	d010      	beq.n	800a586 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a572:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a57a:	b292      	uxth	r2, r2
 800a57c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	22ff      	movs	r2, #255	; 0xff
 800a582:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2243      	movs	r2, #67	; 0x43
 800a59c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a59e:	4b03      	ldr	r3, [pc, #12]	; (800a5ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bc80      	pop	{r7}
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	200001d0 	.word	0x200001d0

0800a5b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2243      	movs	r2, #67	; 0x43
 800a5bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a5be:	4b03      	ldr	r3, [pc, #12]	; (800a5cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bc80      	pop	{r7}
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	2000018c 	.word	0x2000018c

0800a5d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2243      	movs	r2, #67	; 0x43
 800a5dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a5de:	4b03      	ldr	r3, [pc, #12]	; (800a5ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bc80      	pop	{r7}
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	20000214 	.word	0x20000214

0800a5f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	220a      	movs	r2, #10
 800a5fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a5fe:	4b03      	ldr	r3, [pc, #12]	; (800a60c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a600:	4618      	mov	r0, r3
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	bc80      	pop	{r7}
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	20000148 	.word	0x20000148

0800a610 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a610:	b480      	push	{r7}
 800a612:	b085      	sub	sp, #20
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a61a:	2302      	movs	r3, #2
 800a61c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d005      	beq.n	800a630 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a62c:	2300      	movs	r3, #0
 800a62e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a630:	7bfb      	ldrb	r3, [r7, #15]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3714      	adds	r7, #20
 800a636:	46bd      	mov	sp, r7
 800a638:	bc80      	pop	{r7}
 800a63a:	4770      	bx	lr

0800a63c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b087      	sub	sp, #28
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	4613      	mov	r3, r2
 800a648:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a650:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a65a:	88fa      	ldrh	r2, [r7, #6]
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	371c      	adds	r7, #28
 800a668:	46bd      	mov	sp, r7
 800a66a:	bc80      	pop	{r7}
 800a66c:	4770      	bx	lr

0800a66e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a66e:	b480      	push	{r7}
 800a670:	b085      	sub	sp, #20
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a67e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	683a      	ldr	r2, [r7, #0]
 800a684:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	bc80      	pop	{r7}
 800a692:	4770      	bx	lr

0800a694 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d01c      	beq.n	800a6e8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d115      	bne.n	800a6e4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	2181      	movs	r1, #129	; 0x81
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f001 fcb7 	bl	800c04e <USBD_LL_Transmit>

      return USBD_OK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	e002      	b.n	800a6ea <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e000      	b.n	800a6ea <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a6e8:	2302      	movs	r3, #2
  }
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b084      	sub	sp, #16
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a700:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d017      	beq.n	800a73c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	7c1b      	ldrb	r3, [r3, #16]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d109      	bne.n	800a728 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a71a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a71e:	2101      	movs	r1, #1
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f001 fcb7 	bl	800c094 <USBD_LL_PrepareReceive>
 800a726:	e007      	b.n	800a738 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a72e:	2340      	movs	r3, #64	; 0x40
 800a730:	2101      	movs	r1, #1
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f001 fcae 	bl	800c094 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a738:	2300      	movs	r3, #0
 800a73a:	e000      	b.n	800a73e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a73c:	2302      	movs	r3, #2
  }
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b084      	sub	sp, #16
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	60f8      	str	r0, [r7, #12]
 800a74e:	60b9      	str	r1, [r7, #8]
 800a750:	4613      	mov	r3, r2
 800a752:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d101      	bne.n	800a75e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a75a:	2302      	movs	r3, #2
 800a75c:	e01a      	b.n	800a794 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a764:	2b00      	cmp	r3, #0
 800a766:	d003      	beq.n	800a770 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2201      	movs	r2, #1
 800a782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	79fa      	ldrb	r2, [r7, #7]
 800a78a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f001 fb1b 	bl	800bdc8 <USBD_LL_Init>

  return USBD_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d006      	beq.n	800a7be <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	683a      	ldr	r2, [r7, #0]
 800a7b4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	73fb      	strb	r3, [r7, #15]
 800a7bc:	e001      	b.n	800a7c2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a7be:	2302      	movs	r3, #2
 800a7c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3714      	adds	r7, #20
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bc80      	pop	{r7}
 800a7cc:	4770      	bx	lr

0800a7ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b082      	sub	sp, #8
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f001 fb50 	bl	800be7c <USBD_LL_Start>

  return USBD_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3708      	adds	r7, #8
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	b083      	sub	sp, #12
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bc80      	pop	{r7}
 800a7f8:	4770      	bx	lr

0800a7fa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b084      	sub	sp, #16
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	460b      	mov	r3, r1
 800a804:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a806:	2302      	movs	r3, #2
 800a808:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00c      	beq.n	800a82e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	78fa      	ldrb	r2, [r7, #3]
 800a81e:	4611      	mov	r1, r2
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	4798      	blx	r3
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d101      	bne.n	800a82e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a82a:	2300      	movs	r3, #0
 800a82c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a82e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a830:	4618      	mov	r0, r3
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	460b      	mov	r3, r1
 800a842:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	78fa      	ldrb	r2, [r7, #3]
 800a84e:	4611      	mov	r1, r2
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	4798      	blx	r3

  return USBD_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b082      	sub	sp, #8
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	4618      	mov	r0, r3
 800a872:	f000 fecb 	bl	800b60c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a884:	461a      	mov	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a892:	f003 031f 	and.w	r3, r3, #31
 800a896:	2b01      	cmp	r3, #1
 800a898:	d00c      	beq.n	800a8b4 <USBD_LL_SetupStage+0x56>
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d302      	bcc.n	800a8a4 <USBD_LL_SetupStage+0x46>
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	d010      	beq.n	800a8c4 <USBD_LL_SetupStage+0x66>
 800a8a2:	e017      	b.n	800a8d4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 f9cb 	bl	800ac48 <USBD_StdDevReq>
      break;
 800a8b2:	e01a      	b.n	800a8ea <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fa2d 	bl	800ad1c <USBD_StdItfReq>
      break;
 800a8c2:	e012      	b.n	800a8ea <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 fa6b 	bl	800ada8 <USBD_StdEPReq>
      break;
 800a8d2:	e00a      	b.n	800a8ea <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a8da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f001 fb2a 	bl	800bf3c <USBD_LL_StallEP>
      break;
 800a8e8:	bf00      	nop
  }

  return USBD_OK;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b086      	sub	sp, #24
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	607a      	str	r2, [r7, #4]
 800a900:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a902:	7afb      	ldrb	r3, [r7, #11]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d14b      	bne.n	800a9a0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a90e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a916:	2b03      	cmp	r3, #3
 800a918:	d134      	bne.n	800a984 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	68da      	ldr	r2, [r3, #12]
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	429a      	cmp	r2, r3
 800a924:	d919      	bls.n	800a95a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	68da      	ldr	r2, [r3, #12]
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	1ad2      	subs	r2, r2, r3
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	68da      	ldr	r2, [r3, #12]
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d203      	bcs.n	800a948 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a944:	b29b      	uxth	r3, r3
 800a946:	e002      	b.n	800a94e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	461a      	mov	r2, r3
 800a950:	6879      	ldr	r1, [r7, #4]
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f000 ff4c 	bl	800b7f0 <USBD_CtlContinueRx>
 800a958:	e038      	b.n	800a9cc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00a      	beq.n	800a97c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a96c:	2b03      	cmp	r3, #3
 800a96e:	d105      	bne.n	800a97c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 ff49 	bl	800b814 <USBD_CtlSendStatus>
 800a982:	e023      	b.n	800a9cc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a98a:	2b05      	cmp	r3, #5
 800a98c:	d11e      	bne.n	800a9cc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a996:	2100      	movs	r1, #0
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f001 facf 	bl	800bf3c <USBD_LL_StallEP>
 800a99e:	e015      	b.n	800a9cc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9a6:	699b      	ldr	r3, [r3, #24]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d00d      	beq.n	800a9c8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d108      	bne.n	800a9c8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	7afa      	ldrb	r2, [r7, #11]
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	4798      	blx	r3
 800a9c6:	e001      	b.n	800a9cc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	e000      	b.n	800a9ce <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3718      	adds	r7, #24
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b086      	sub	sp, #24
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	60f8      	str	r0, [r7, #12]
 800a9de:	460b      	mov	r3, r1
 800a9e0:	607a      	str	r2, [r7, #4]
 800a9e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a9e4:	7afb      	ldrb	r3, [r7, #11]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d17f      	bne.n	800aaea <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3314      	adds	r3, #20
 800a9ee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	d15c      	bne.n	800aab4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	68da      	ldr	r2, [r3, #12]
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d915      	bls.n	800aa32 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	68da      	ldr	r2, [r3, #12]
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	1ad2      	subs	r2, r2, r3
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	6879      	ldr	r1, [r7, #4]
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f000 feb6 	bl	800b790 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa24:	2300      	movs	r3, #0
 800aa26:	2200      	movs	r2, #0
 800aa28:	2100      	movs	r1, #0
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f001 fb32 	bl	800c094 <USBD_LL_PrepareReceive>
 800aa30:	e04e      	b.n	800aad0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	6912      	ldr	r2, [r2, #16]
 800aa3a:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa3e:	fb02 f201 	mul.w	r2, r2, r1
 800aa42:	1a9b      	subs	r3, r3, r2
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d11c      	bne.n	800aa82 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	689a      	ldr	r2, [r3, #8]
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d316      	bcc.n	800aa82 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	689a      	ldr	r2, [r3, #8]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d20f      	bcs.n	800aa82 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aa62:	2200      	movs	r2, #0
 800aa64:	2100      	movs	r1, #0
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f000 fe92 	bl	800b790 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa74:	2300      	movs	r3, #0
 800aa76:	2200      	movs	r2, #0
 800aa78:	2100      	movs	r1, #0
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f001 fb0a 	bl	800c094 <USBD_LL_PrepareReceive>
 800aa80:	e026      	b.n	800aad0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00a      	beq.n	800aaa4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aa94:	2b03      	cmp	r3, #3
 800aa96:	d105      	bne.n	800aaa4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800aaa4:	2180      	movs	r1, #128	; 0x80
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f001 fa48 	bl	800bf3c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f000 fec4 	bl	800b83a <USBD_CtlReceiveStatus>
 800aab2:	e00d      	b.n	800aad0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aaba:	2b04      	cmp	r3, #4
 800aabc:	d004      	beq.n	800aac8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d103      	bne.n	800aad0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800aac8:	2180      	movs	r1, #128	; 0x80
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f001 fa36 	bl	800bf3c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d11d      	bne.n	800ab16 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	f7ff fe83 	bl	800a7e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aae8:	e015      	b.n	800ab16 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaf0:	695b      	ldr	r3, [r3, #20]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00d      	beq.n	800ab12 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800aafc:	2b03      	cmp	r3, #3
 800aafe:	d108      	bne.n	800ab12 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab06:	695b      	ldr	r3, [r3, #20]
 800ab08:	7afa      	ldrb	r2, [r7, #11]
 800ab0a:	4611      	mov	r1, r2
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	4798      	blx	r3
 800ab10:	e001      	b.n	800ab16 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ab12:	2302      	movs	r3, #2
 800ab14:	e000      	b.n	800ab18 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ab16:	2300      	movs	r3, #0
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3718      	adds	r7, #24
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab28:	2340      	movs	r3, #64	; 0x40
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f001 f9bf 	bl	800beb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2240      	movs	r2, #64	; 0x40
 800ab40:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab44:	2340      	movs	r3, #64	; 0x40
 800ab46:	2200      	movs	r2, #0
 800ab48:	2180      	movs	r1, #128	; 0x80
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f001 f9b1 	bl	800beb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2201      	movs	r2, #1
 800ab54:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2240      	movs	r2, #64	; 0x40
 800ab5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d009      	beq.n	800ab98 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	6852      	ldr	r2, [r2, #4]
 800ab90:	b2d2      	uxtb	r2, r2
 800ab92:	4611      	mov	r1, r2
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	4798      	blx	r3
  }

  return USBD_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aba2:	b480      	push	{r7}
 800aba4:	b083      	sub	sp, #12
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
 800abaa:	460b      	mov	r3, r1
 800abac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	78fa      	ldrb	r2, [r7, #3]
 800abb2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	bc80      	pop	{r7}
 800abbe:	4770      	bx	lr

0800abc0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2204      	movs	r2, #4
 800abd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800abdc:	2300      	movs	r3, #0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	370c      	adds	r7, #12
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bc80      	pop	{r7}
 800abe6:	4770      	bx	lr

0800abe8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abf6:	2b04      	cmp	r3, #4
 800abf8:	d105      	bne.n	800ac06 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bc80      	pop	{r7}
 800ac10:	4770      	bx	lr

0800ac12 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b082      	sub	sp, #8
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac20:	2b03      	cmp	r3, #3
 800ac22:	d10b      	bne.n	800ac3c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac2a:	69db      	ldr	r3, [r3, #28]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d005      	beq.n	800ac3c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac36:	69db      	ldr	r3, [r3, #28]
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3708      	adds	r7, #8
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
	...

0800ac48 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac52:	2300      	movs	r3, #0
 800ac54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac5e:	2b20      	cmp	r3, #32
 800ac60:	d004      	beq.n	800ac6c <USBD_StdDevReq+0x24>
 800ac62:	2b40      	cmp	r3, #64	; 0x40
 800ac64:	d002      	beq.n	800ac6c <USBD_StdDevReq+0x24>
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d008      	beq.n	800ac7c <USBD_StdDevReq+0x34>
 800ac6a:	e04c      	b.n	800ad06 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	6839      	ldr	r1, [r7, #0]
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	4798      	blx	r3
      break;
 800ac7a:	e049      	b.n	800ad10 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	785b      	ldrb	r3, [r3, #1]
 800ac80:	2b09      	cmp	r3, #9
 800ac82:	d83a      	bhi.n	800acfa <USBD_StdDevReq+0xb2>
 800ac84:	a201      	add	r2, pc, #4	; (adr r2, 800ac8c <USBD_StdDevReq+0x44>)
 800ac86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8a:	bf00      	nop
 800ac8c:	0800acdd 	.word	0x0800acdd
 800ac90:	0800acf1 	.word	0x0800acf1
 800ac94:	0800acfb 	.word	0x0800acfb
 800ac98:	0800ace7 	.word	0x0800ace7
 800ac9c:	0800acfb 	.word	0x0800acfb
 800aca0:	0800acbf 	.word	0x0800acbf
 800aca4:	0800acb5 	.word	0x0800acb5
 800aca8:	0800acfb 	.word	0x0800acfb
 800acac:	0800acd3 	.word	0x0800acd3
 800acb0:	0800acc9 	.word	0x0800acc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800acb4:	6839      	ldr	r1, [r7, #0]
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f9d4 	bl	800b064 <USBD_GetDescriptor>
          break;
 800acbc:	e022      	b.n	800ad04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800acbe:	6839      	ldr	r1, [r7, #0]
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fb37 	bl	800b334 <USBD_SetAddress>
          break;
 800acc6:	e01d      	b.n	800ad04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800acc8:	6839      	ldr	r1, [r7, #0]
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fb74 	bl	800b3b8 <USBD_SetConfig>
          break;
 800acd0:	e018      	b.n	800ad04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800acd2:	6839      	ldr	r1, [r7, #0]
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 fbfd 	bl	800b4d4 <USBD_GetConfig>
          break;
 800acda:	e013      	b.n	800ad04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800acdc:	6839      	ldr	r1, [r7, #0]
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fc2c 	bl	800b53c <USBD_GetStatus>
          break;
 800ace4:	e00e      	b.n	800ad04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 fc5a 	bl	800b5a2 <USBD_SetFeature>
          break;
 800acee:	e009      	b.n	800ad04 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fc69 	bl	800b5ca <USBD_ClrFeature>
          break;
 800acf8:	e004      	b.n	800ad04 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800acfa:	6839      	ldr	r1, [r7, #0]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 fcc1 	bl	800b684 <USBD_CtlError>
          break;
 800ad02:	bf00      	nop
      }
      break;
 800ad04:	e004      	b.n	800ad10 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fcbb 	bl	800b684 <USBD_CtlError>
      break;
 800ad0e:	bf00      	nop
  }

  return ret;
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop

0800ad1c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad32:	2b20      	cmp	r3, #32
 800ad34:	d003      	beq.n	800ad3e <USBD_StdItfReq+0x22>
 800ad36:	2b40      	cmp	r3, #64	; 0x40
 800ad38:	d001      	beq.n	800ad3e <USBD_StdItfReq+0x22>
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d12a      	bne.n	800ad94 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad44:	3b01      	subs	r3, #1
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	d81d      	bhi.n	800ad86 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	889b      	ldrh	r3, [r3, #4]
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d813      	bhi.n	800ad7c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	6839      	ldr	r1, [r7, #0]
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	4798      	blx	r3
 800ad62:	4603      	mov	r3, r0
 800ad64:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	88db      	ldrh	r3, [r3, #6]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d110      	bne.n	800ad90 <USBD_StdItfReq+0x74>
 800ad6e:	7bfb      	ldrb	r3, [r7, #15]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10d      	bne.n	800ad90 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fd4d 	bl	800b814 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ad7a:	e009      	b.n	800ad90 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800ad7c:	6839      	ldr	r1, [r7, #0]
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 fc80 	bl	800b684 <USBD_CtlError>
          break;
 800ad84:	e004      	b.n	800ad90 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 fc7b 	bl	800b684 <USBD_CtlError>
          break;
 800ad8e:	e000      	b.n	800ad92 <USBD_StdItfReq+0x76>
          break;
 800ad90:	bf00      	nop
      }
      break;
 800ad92:	e004      	b.n	800ad9e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800ad94:	6839      	ldr	r1, [r7, #0]
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 fc74 	bl	800b684 <USBD_CtlError>
      break;
 800ad9c:	bf00      	nop
  }

  return USBD_OK;
 800ad9e:	2300      	movs	r3, #0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3710      	adds	r7, #16
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800adb2:	2300      	movs	r3, #0
 800adb4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	889b      	ldrh	r3, [r3, #4]
 800adba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adc4:	2b20      	cmp	r3, #32
 800adc6:	d004      	beq.n	800add2 <USBD_StdEPReq+0x2a>
 800adc8:	2b40      	cmp	r3, #64	; 0x40
 800adca:	d002      	beq.n	800add2 <USBD_StdEPReq+0x2a>
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d008      	beq.n	800ade2 <USBD_StdEPReq+0x3a>
 800add0:	e13d      	b.n	800b04e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	6839      	ldr	r1, [r7, #0]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	4798      	blx	r3
      break;
 800ade0:	e13a      	b.n	800b058 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adea:	2b20      	cmp	r3, #32
 800adec:	d10a      	bne.n	800ae04 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	4798      	blx	r3
 800adfc:	4603      	mov	r3, r0
 800adfe:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
 800ae02:	e12a      	b.n	800b05a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	785b      	ldrb	r3, [r3, #1]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d03e      	beq.n	800ae8a <USBD_StdEPReq+0xe2>
 800ae0c:	2b03      	cmp	r3, #3
 800ae0e:	d002      	beq.n	800ae16 <USBD_StdEPReq+0x6e>
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d070      	beq.n	800aef6 <USBD_StdEPReq+0x14e>
 800ae14:	e115      	b.n	800b042 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	d002      	beq.n	800ae26 <USBD_StdEPReq+0x7e>
 800ae20:	2b03      	cmp	r3, #3
 800ae22:	d015      	beq.n	800ae50 <USBD_StdEPReq+0xa8>
 800ae24:	e02b      	b.n	800ae7e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae26:	7bbb      	ldrb	r3, [r7, #14]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00c      	beq.n	800ae46 <USBD_StdEPReq+0x9e>
 800ae2c:	7bbb      	ldrb	r3, [r7, #14]
 800ae2e:	2b80      	cmp	r3, #128	; 0x80
 800ae30:	d009      	beq.n	800ae46 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ae32:	7bbb      	ldrb	r3, [r7, #14]
 800ae34:	4619      	mov	r1, r3
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f001 f880 	bl	800bf3c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ae3c:	2180      	movs	r1, #128	; 0x80
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f001 f87c 	bl	800bf3c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae44:	e020      	b.n	800ae88 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800ae46:	6839      	ldr	r1, [r7, #0]
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 fc1b 	bl	800b684 <USBD_CtlError>
              break;
 800ae4e:	e01b      	b.n	800ae88 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	885b      	ldrh	r3, [r3, #2]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d10e      	bne.n	800ae76 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800ae58:	7bbb      	ldrb	r3, [r7, #14]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00b      	beq.n	800ae76 <USBD_StdEPReq+0xce>
 800ae5e:	7bbb      	ldrb	r3, [r7, #14]
 800ae60:	2b80      	cmp	r3, #128	; 0x80
 800ae62:	d008      	beq.n	800ae76 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	88db      	ldrh	r3, [r3, #6]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d104      	bne.n	800ae76 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ae6c:	7bbb      	ldrb	r3, [r7, #14]
 800ae6e:	4619      	mov	r1, r3
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f001 f863 	bl	800bf3c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fccc 	bl	800b814 <USBD_CtlSendStatus>

              break;
 800ae7c:	e004      	b.n	800ae88 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fbff 	bl	800b684 <USBD_CtlError>
              break;
 800ae86:	bf00      	nop
          }
          break;
 800ae88:	e0e0      	b.n	800b04c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	d002      	beq.n	800ae9a <USBD_StdEPReq+0xf2>
 800ae94:	2b03      	cmp	r3, #3
 800ae96:	d015      	beq.n	800aec4 <USBD_StdEPReq+0x11c>
 800ae98:	e026      	b.n	800aee8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae9a:	7bbb      	ldrb	r3, [r7, #14]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00c      	beq.n	800aeba <USBD_StdEPReq+0x112>
 800aea0:	7bbb      	ldrb	r3, [r7, #14]
 800aea2:	2b80      	cmp	r3, #128	; 0x80
 800aea4:	d009      	beq.n	800aeba <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aea6:	7bbb      	ldrb	r3, [r7, #14]
 800aea8:	4619      	mov	r1, r3
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f001 f846 	bl	800bf3c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aeb0:	2180      	movs	r1, #128	; 0x80
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f001 f842 	bl	800bf3c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aeb8:	e01c      	b.n	800aef4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800aeba:	6839      	ldr	r1, [r7, #0]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fbe1 	bl	800b684 <USBD_CtlError>
              break;
 800aec2:	e017      	b.n	800aef4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	885b      	ldrh	r3, [r3, #2]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d112      	bne.n	800aef2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aecc:	7bbb      	ldrb	r3, [r7, #14]
 800aece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d004      	beq.n	800aee0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800aed6:	7bbb      	ldrb	r3, [r7, #14]
 800aed8:	4619      	mov	r1, r3
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f001 f84d 	bl	800bf7a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 fc97 	bl	800b814 <USBD_CtlSendStatus>
              }
              break;
 800aee6:	e004      	b.n	800aef2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800aee8:	6839      	ldr	r1, [r7, #0]
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 fbca 	bl	800b684 <USBD_CtlError>
              break;
 800aef0:	e000      	b.n	800aef4 <USBD_StdEPReq+0x14c>
              break;
 800aef2:	bf00      	nop
          }
          break;
 800aef4:	e0aa      	b.n	800b04c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d002      	beq.n	800af06 <USBD_StdEPReq+0x15e>
 800af00:	2b03      	cmp	r3, #3
 800af02:	d032      	beq.n	800af6a <USBD_StdEPReq+0x1c2>
 800af04:	e097      	b.n	800b036 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af06:	7bbb      	ldrb	r3, [r7, #14]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d007      	beq.n	800af1c <USBD_StdEPReq+0x174>
 800af0c:	7bbb      	ldrb	r3, [r7, #14]
 800af0e:	2b80      	cmp	r3, #128	; 0x80
 800af10:	d004      	beq.n	800af1c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800af12:	6839      	ldr	r1, [r7, #0]
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fbb5 	bl	800b684 <USBD_CtlError>
                break;
 800af1a:	e091      	b.n	800b040 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af20:	2b00      	cmp	r3, #0
 800af22:	da0b      	bge.n	800af3c <USBD_StdEPReq+0x194>
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af2a:	4613      	mov	r3, r2
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	4413      	add	r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	3310      	adds	r3, #16
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	4413      	add	r3, r2
 800af38:	3304      	adds	r3, #4
 800af3a:	e00b      	b.n	800af54 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af3c:	7bbb      	ldrb	r3, [r7, #14]
 800af3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af42:	4613      	mov	r3, r2
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	4413      	add	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	4413      	add	r3, r2
 800af52:	3304      	adds	r3, #4
 800af54:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	2200      	movs	r2, #0
 800af5a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	2202      	movs	r2, #2
 800af60:	4619      	mov	r1, r3
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 fbf8 	bl	800b758 <USBD_CtlSendData>
              break;
 800af68:	e06a      	b.n	800b040 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800af6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	da11      	bge.n	800af96 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af72:	7bbb      	ldrb	r3, [r7, #14]
 800af74:	f003 020f 	and.w	r2, r3, #15
 800af78:	6879      	ldr	r1, [r7, #4]
 800af7a:	4613      	mov	r3, r2
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4413      	add	r3, r2
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	440b      	add	r3, r1
 800af84:	3318      	adds	r3, #24
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d117      	bne.n	800afbc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800af8c:	6839      	ldr	r1, [r7, #0]
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 fb78 	bl	800b684 <USBD_CtlError>
                  break;
 800af94:	e054      	b.n	800b040 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800af96:	7bbb      	ldrb	r3, [r7, #14]
 800af98:	f003 020f 	and.w	r2, r3, #15
 800af9c:	6879      	ldr	r1, [r7, #4]
 800af9e:	4613      	mov	r3, r2
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4413      	add	r3, r2
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	440b      	add	r3, r1
 800afa8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d104      	bne.n	800afbc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800afb2:	6839      	ldr	r1, [r7, #0]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fb65 	bl	800b684 <USBD_CtlError>
                  break;
 800afba:	e041      	b.n	800b040 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	da0b      	bge.n	800afdc <USBD_StdEPReq+0x234>
 800afc4:	7bbb      	ldrb	r3, [r7, #14]
 800afc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afca:	4613      	mov	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4413      	add	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	3310      	adds	r3, #16
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	4413      	add	r3, r2
 800afd8:	3304      	adds	r3, #4
 800afda:	e00b      	b.n	800aff4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800afdc:	7bbb      	ldrb	r3, [r7, #14]
 800afde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afe2:	4613      	mov	r3, r2
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	4413      	add	r3, r2
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	4413      	add	r3, r2
 800aff2:	3304      	adds	r3, #4
 800aff4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aff6:	7bbb      	ldrb	r3, [r7, #14]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d002      	beq.n	800b002 <USBD_StdEPReq+0x25a>
 800affc:	7bbb      	ldrb	r3, [r7, #14]
 800affe:	2b80      	cmp	r3, #128	; 0x80
 800b000:	d103      	bne.n	800b00a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	2200      	movs	r2, #0
 800b006:	601a      	str	r2, [r3, #0]
 800b008:	e00e      	b.n	800b028 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b00a:	7bbb      	ldrb	r3, [r7, #14]
 800b00c:	4619      	mov	r1, r3
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 ffd2 	bl	800bfb8 <USBD_LL_IsStallEP>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d003      	beq.n	800b022 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	2201      	movs	r2, #1
 800b01e:	601a      	str	r2, [r3, #0]
 800b020:	e002      	b.n	800b028 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	2200      	movs	r2, #0
 800b026:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2202      	movs	r2, #2
 800b02c:	4619      	mov	r1, r3
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 fb92 	bl	800b758 <USBD_CtlSendData>
              break;
 800b034:	e004      	b.n	800b040 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800b036:	6839      	ldr	r1, [r7, #0]
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 fb23 	bl	800b684 <USBD_CtlError>
              break;
 800b03e:	bf00      	nop
          }
          break;
 800b040:	e004      	b.n	800b04c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 fb1d 	bl	800b684 <USBD_CtlError>
          break;
 800b04a:	bf00      	nop
      }
      break;
 800b04c:	e004      	b.n	800b058 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800b04e:	6839      	ldr	r1, [r7, #0]
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 fb17 	bl	800b684 <USBD_CtlError>
      break;
 800b056:	bf00      	nop
  }

  return ret;
 800b058:	7bfb      	ldrb	r3, [r7, #15]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
	...

0800b064 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b06e:	2300      	movs	r3, #0
 800b070:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b072:	2300      	movs	r3, #0
 800b074:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b076:	2300      	movs	r3, #0
 800b078:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	885b      	ldrh	r3, [r3, #2]
 800b07e:	0a1b      	lsrs	r3, r3, #8
 800b080:	b29b      	uxth	r3, r3
 800b082:	3b01      	subs	r3, #1
 800b084:	2b06      	cmp	r3, #6
 800b086:	f200 8128 	bhi.w	800b2da <USBD_GetDescriptor+0x276>
 800b08a:	a201      	add	r2, pc, #4	; (adr r2, 800b090 <USBD_GetDescriptor+0x2c>)
 800b08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b090:	0800b0ad 	.word	0x0800b0ad
 800b094:	0800b0c5 	.word	0x0800b0c5
 800b098:	0800b105 	.word	0x0800b105
 800b09c:	0800b2db 	.word	0x0800b2db
 800b0a0:	0800b2db 	.word	0x0800b2db
 800b0a4:	0800b27b 	.word	0x0800b27b
 800b0a8:	0800b2a7 	.word	0x0800b2a7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	7c12      	ldrb	r2, [r2, #16]
 800b0b8:	f107 0108 	add.w	r1, r7, #8
 800b0bc:	4610      	mov	r0, r2
 800b0be:	4798      	blx	r3
 800b0c0:	60f8      	str	r0, [r7, #12]
      break;
 800b0c2:	e112      	b.n	800b2ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	7c1b      	ldrb	r3, [r3, #16]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d10d      	bne.n	800b0e8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d4:	f107 0208 	add.w	r2, r7, #8
 800b0d8:	4610      	mov	r0, r2
 800b0da:	4798      	blx	r3
 800b0dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	2202      	movs	r2, #2
 800b0e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b0e6:	e100      	b.n	800b2ea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f0:	f107 0208 	add.w	r2, r7, #8
 800b0f4:	4610      	mov	r0, r2
 800b0f6:	4798      	blx	r3
 800b0f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	2202      	movs	r2, #2
 800b100:	701a      	strb	r2, [r3, #0]
      break;
 800b102:	e0f2      	b.n	800b2ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	885b      	ldrh	r3, [r3, #2]
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	2b05      	cmp	r3, #5
 800b10c:	f200 80ac 	bhi.w	800b268 <USBD_GetDescriptor+0x204>
 800b110:	a201      	add	r2, pc, #4	; (adr r2, 800b118 <USBD_GetDescriptor+0xb4>)
 800b112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b116:	bf00      	nop
 800b118:	0800b131 	.word	0x0800b131
 800b11c:	0800b165 	.word	0x0800b165
 800b120:	0800b199 	.word	0x0800b199
 800b124:	0800b1cd 	.word	0x0800b1cd
 800b128:	0800b201 	.word	0x0800b201
 800b12c:	0800b235 	.word	0x0800b235
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00b      	beq.n	800b154 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	7c12      	ldrb	r2, [r2, #16]
 800b148:	f107 0108 	add.w	r1, r7, #8
 800b14c:	4610      	mov	r0, r2
 800b14e:	4798      	blx	r3
 800b150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b152:	e091      	b.n	800b278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b154:	6839      	ldr	r1, [r7, #0]
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 fa94 	bl	800b684 <USBD_CtlError>
            err++;
 800b15c:	7afb      	ldrb	r3, [r7, #11]
 800b15e:	3301      	adds	r3, #1
 800b160:	72fb      	strb	r3, [r7, #11]
          break;
 800b162:	e089      	b.n	800b278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00b      	beq.n	800b188 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	7c12      	ldrb	r2, [r2, #16]
 800b17c:	f107 0108 	add.w	r1, r7, #8
 800b180:	4610      	mov	r0, r2
 800b182:	4798      	blx	r3
 800b184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b186:	e077      	b.n	800b278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b188:	6839      	ldr	r1, [r7, #0]
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 fa7a 	bl	800b684 <USBD_CtlError>
            err++;
 800b190:	7afb      	ldrb	r3, [r7, #11]
 800b192:	3301      	adds	r3, #1
 800b194:	72fb      	strb	r3, [r7, #11]
          break;
 800b196:	e06f      	b.n	800b278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d00b      	beq.n	800b1bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	7c12      	ldrb	r2, [r2, #16]
 800b1b0:	f107 0108 	add.w	r1, r7, #8
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	4798      	blx	r3
 800b1b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1ba:	e05d      	b.n	800b278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fa60 	bl	800b684 <USBD_CtlError>
            err++;
 800b1c4:	7afb      	ldrb	r3, [r7, #11]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	72fb      	strb	r3, [r7, #11]
          break;
 800b1ca:	e055      	b.n	800b278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00b      	beq.n	800b1f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	7c12      	ldrb	r2, [r2, #16]
 800b1e4:	f107 0108 	add.w	r1, r7, #8
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	4798      	blx	r3
 800b1ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1ee:	e043      	b.n	800b278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 fa46 	bl	800b684 <USBD_CtlError>
            err++;
 800b1f8:	7afb      	ldrb	r3, [r7, #11]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	72fb      	strb	r3, [r7, #11]
          break;
 800b1fe:	e03b      	b.n	800b278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b206:	695b      	ldr	r3, [r3, #20]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00b      	beq.n	800b224 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b212:	695b      	ldr	r3, [r3, #20]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	7c12      	ldrb	r2, [r2, #16]
 800b218:	f107 0108 	add.w	r1, r7, #8
 800b21c:	4610      	mov	r0, r2
 800b21e:	4798      	blx	r3
 800b220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b222:	e029      	b.n	800b278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b224:	6839      	ldr	r1, [r7, #0]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 fa2c 	bl	800b684 <USBD_CtlError>
            err++;
 800b22c:	7afb      	ldrb	r3, [r7, #11]
 800b22e:	3301      	adds	r3, #1
 800b230:	72fb      	strb	r3, [r7, #11]
          break;
 800b232:	e021      	b.n	800b278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b23a:	699b      	ldr	r3, [r3, #24]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d00b      	beq.n	800b258 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b246:	699b      	ldr	r3, [r3, #24]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	7c12      	ldrb	r2, [r2, #16]
 800b24c:	f107 0108 	add.w	r1, r7, #8
 800b250:	4610      	mov	r0, r2
 800b252:	4798      	blx	r3
 800b254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b256:	e00f      	b.n	800b278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b258:	6839      	ldr	r1, [r7, #0]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fa12 	bl	800b684 <USBD_CtlError>
            err++;
 800b260:	7afb      	ldrb	r3, [r7, #11]
 800b262:	3301      	adds	r3, #1
 800b264:	72fb      	strb	r3, [r7, #11]
          break;
 800b266:	e007      	b.n	800b278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b268:	6839      	ldr	r1, [r7, #0]
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 fa0a 	bl	800b684 <USBD_CtlError>
          err++;
 800b270:	7afb      	ldrb	r3, [r7, #11]
 800b272:	3301      	adds	r3, #1
 800b274:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b276:	e038      	b.n	800b2ea <USBD_GetDescriptor+0x286>
 800b278:	e037      	b.n	800b2ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	7c1b      	ldrb	r3, [r3, #16]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d109      	bne.n	800b296 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b28a:	f107 0208 	add.w	r2, r7, #8
 800b28e:	4610      	mov	r0, r2
 800b290:	4798      	blx	r3
 800b292:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b294:	e029      	b.n	800b2ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b296:	6839      	ldr	r1, [r7, #0]
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f9f3 	bl	800b684 <USBD_CtlError>
        err++;
 800b29e:	7afb      	ldrb	r3, [r7, #11]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	72fb      	strb	r3, [r7, #11]
      break;
 800b2a4:	e021      	b.n	800b2ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	7c1b      	ldrb	r3, [r3, #16]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10d      	bne.n	800b2ca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b6:	f107 0208 	add.w	r2, r7, #8
 800b2ba:	4610      	mov	r0, r2
 800b2bc:	4798      	blx	r3
 800b2be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	2207      	movs	r2, #7
 800b2c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2c8:	e00f      	b.n	800b2ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b2ca:	6839      	ldr	r1, [r7, #0]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f9d9 	bl	800b684 <USBD_CtlError>
        err++;
 800b2d2:	7afb      	ldrb	r3, [r7, #11]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	72fb      	strb	r3, [r7, #11]
      break;
 800b2d8:	e007      	b.n	800b2ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b2da:	6839      	ldr	r1, [r7, #0]
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 f9d1 	bl	800b684 <USBD_CtlError>
      err++;
 800b2e2:	7afb      	ldrb	r3, [r7, #11]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	72fb      	strb	r3, [r7, #11]
      break;
 800b2e8:	bf00      	nop
  }

  if (err != 0U)
 800b2ea:	7afb      	ldrb	r3, [r7, #11]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d11c      	bne.n	800b32a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b2f0:	893b      	ldrh	r3, [r7, #8]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d011      	beq.n	800b31a <USBD_GetDescriptor+0x2b6>
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	88db      	ldrh	r3, [r3, #6]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00d      	beq.n	800b31a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	88da      	ldrh	r2, [r3, #6]
 800b302:	893b      	ldrh	r3, [r7, #8]
 800b304:	4293      	cmp	r3, r2
 800b306:	bf28      	it	cs
 800b308:	4613      	movcs	r3, r2
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b30e:	893b      	ldrh	r3, [r7, #8]
 800b310:	461a      	mov	r2, r3
 800b312:	68f9      	ldr	r1, [r7, #12]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 fa1f 	bl	800b758 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	88db      	ldrh	r3, [r3, #6]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d104      	bne.n	800b32c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 fa76 	bl	800b814 <USBD_CtlSendStatus>
 800b328:	e000      	b.n	800b32c <USBD_GetDescriptor+0x2c8>
    return;
 800b32a:	bf00      	nop
    }
  }
}
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop

0800b334 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	889b      	ldrh	r3, [r3, #4]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d130      	bne.n	800b3a8 <USBD_SetAddress+0x74>
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	88db      	ldrh	r3, [r3, #6]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d12c      	bne.n	800b3a8 <USBD_SetAddress+0x74>
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	885b      	ldrh	r3, [r3, #2]
 800b352:	2b7f      	cmp	r3, #127	; 0x7f
 800b354:	d828      	bhi.n	800b3a8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	885b      	ldrh	r3, [r3, #2]
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b360:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b368:	2b03      	cmp	r3, #3
 800b36a:	d104      	bne.n	800b376 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b36c:	6839      	ldr	r1, [r7, #0]
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 f988 	bl	800b684 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b374:	e01c      	b.n	800b3b0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	7bfa      	ldrb	r2, [r7, #15]
 800b37a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b37e:	7bfb      	ldrb	r3, [r7, #15]
 800b380:	4619      	mov	r1, r3
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 fe44 	bl	800c010 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 fa43 	bl	800b814 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b38e:	7bfb      	ldrb	r3, [r7, #15]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d004      	beq.n	800b39e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2202      	movs	r2, #2
 800b398:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b39c:	e008      	b.n	800b3b0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3a6:	e003      	b.n	800b3b0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b3a8:	6839      	ldr	r1, [r7, #0]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 f96a 	bl	800b684 <USBD_CtlError>
  }
}
 800b3b0:	bf00      	nop
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	885b      	ldrh	r3, [r3, #2]
 800b3c6:	b2da      	uxtb	r2, r3
 800b3c8:	4b41      	ldr	r3, [pc, #260]	; (800b4d0 <USBD_SetConfig+0x118>)
 800b3ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b3cc:	4b40      	ldr	r3, [pc, #256]	; (800b4d0 <USBD_SetConfig+0x118>)
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d904      	bls.n	800b3de <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b3d4:	6839      	ldr	r1, [r7, #0]
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 f954 	bl	800b684 <USBD_CtlError>
 800b3dc:	e075      	b.n	800b4ca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3e4:	2b02      	cmp	r3, #2
 800b3e6:	d002      	beq.n	800b3ee <USBD_SetConfig+0x36>
 800b3e8:	2b03      	cmp	r3, #3
 800b3ea:	d023      	beq.n	800b434 <USBD_SetConfig+0x7c>
 800b3ec:	e062      	b.n	800b4b4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b3ee:	4b38      	ldr	r3, [pc, #224]	; (800b4d0 <USBD_SetConfig+0x118>)
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d01a      	beq.n	800b42c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b3f6:	4b36      	ldr	r3, [pc, #216]	; (800b4d0 <USBD_SetConfig+0x118>)
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2203      	movs	r2, #3
 800b404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b408:	4b31      	ldr	r3, [pc, #196]	; (800b4d0 <USBD_SetConfig+0x118>)
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	4619      	mov	r1, r3
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f7ff f9f3 	bl	800a7fa <USBD_SetClassConfig>
 800b414:	4603      	mov	r3, r0
 800b416:	2b02      	cmp	r3, #2
 800b418:	d104      	bne.n	800b424 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b41a:	6839      	ldr	r1, [r7, #0]
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 f931 	bl	800b684 <USBD_CtlError>
            return;
 800b422:	e052      	b.n	800b4ca <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 f9f5 	bl	800b814 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b42a:	e04e      	b.n	800b4ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 f9f1 	bl	800b814 <USBD_CtlSendStatus>
        break;
 800b432:	e04a      	b.n	800b4ca <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b434:	4b26      	ldr	r3, [pc, #152]	; (800b4d0 <USBD_SetConfig+0x118>)
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d112      	bne.n	800b462 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2202      	movs	r2, #2
 800b440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b444:	4b22      	ldr	r3, [pc, #136]	; (800b4d0 <USBD_SetConfig+0x118>)
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	461a      	mov	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b44e:	4b20      	ldr	r3, [pc, #128]	; (800b4d0 <USBD_SetConfig+0x118>)
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	4619      	mov	r1, r3
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f7ff f9ef 	bl	800a838 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 f9da 	bl	800b814 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b460:	e033      	b.n	800b4ca <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b462:	4b1b      	ldr	r3, [pc, #108]	; (800b4d0 <USBD_SetConfig+0x118>)
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	461a      	mov	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d01d      	beq.n	800b4ac <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	b2db      	uxtb	r3, r3
 800b476:	4619      	mov	r1, r3
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7ff f9dd 	bl	800a838 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b47e:	4b14      	ldr	r3, [pc, #80]	; (800b4d0 <USBD_SetConfig+0x118>)
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	461a      	mov	r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b488:	4b11      	ldr	r3, [pc, #68]	; (800b4d0 <USBD_SetConfig+0x118>)
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	4619      	mov	r1, r3
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f7ff f9b3 	bl	800a7fa <USBD_SetClassConfig>
 800b494:	4603      	mov	r3, r0
 800b496:	2b02      	cmp	r3, #2
 800b498:	d104      	bne.n	800b4a4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b49a:	6839      	ldr	r1, [r7, #0]
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 f8f1 	bl	800b684 <USBD_CtlError>
            return;
 800b4a2:	e012      	b.n	800b4ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 f9b5 	bl	800b814 <USBD_CtlSendStatus>
        break;
 800b4aa:	e00e      	b.n	800b4ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 f9b1 	bl	800b814 <USBD_CtlSendStatus>
        break;
 800b4b2:	e00a      	b.n	800b4ca <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b4b4:	6839      	ldr	r1, [r7, #0]
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f8e4 	bl	800b684 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b4bc:	4b04      	ldr	r3, [pc, #16]	; (800b4d0 <USBD_SetConfig+0x118>)
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7ff f9b8 	bl	800a838 <USBD_ClrClassConfig>
        break;
 800b4c8:	bf00      	nop
    }
  }
}
 800b4ca:	3708      	adds	r7, #8
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	200003a0 	.word	0x200003a0

0800b4d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	88db      	ldrh	r3, [r3, #6]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d004      	beq.n	800b4f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b4e6:	6839      	ldr	r1, [r7, #0]
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 f8cb 	bl	800b684 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b4ee:	e021      	b.n	800b534 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	db17      	blt.n	800b52a <USBD_GetConfig+0x56>
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	dd02      	ble.n	800b504 <USBD_GetConfig+0x30>
 800b4fe:	2b03      	cmp	r3, #3
 800b500:	d00b      	beq.n	800b51a <USBD_GetConfig+0x46>
 800b502:	e012      	b.n	800b52a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	3308      	adds	r3, #8
 800b50e:	2201      	movs	r2, #1
 800b510:	4619      	mov	r1, r3
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f920 	bl	800b758 <USBD_CtlSendData>
        break;
 800b518:	e00c      	b.n	800b534 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	3304      	adds	r3, #4
 800b51e:	2201      	movs	r2, #1
 800b520:	4619      	mov	r1, r3
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f918 	bl	800b758 <USBD_CtlSendData>
        break;
 800b528:	e004      	b.n	800b534 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800b52a:	6839      	ldr	r1, [r7, #0]
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 f8a9 	bl	800b684 <USBD_CtlError>
        break;
 800b532:	bf00      	nop
}
 800b534:	bf00      	nop
 800b536:	3708      	adds	r7, #8
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b54c:	3b01      	subs	r3, #1
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d81e      	bhi.n	800b590 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	88db      	ldrh	r3, [r3, #6]
 800b556:	2b02      	cmp	r3, #2
 800b558:	d004      	beq.n	800b564 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b55a:	6839      	ldr	r1, [r7, #0]
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 f891 	bl	800b684 <USBD_CtlError>
        break;
 800b562:	e01a      	b.n	800b59a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2201      	movs	r2, #1
 800b568:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b570:	2b00      	cmp	r3, #0
 800b572:	d005      	beq.n	800b580 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	f043 0202 	orr.w	r2, r3, #2
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	330c      	adds	r3, #12
 800b584:	2202      	movs	r2, #2
 800b586:	4619      	mov	r1, r3
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 f8e5 	bl	800b758 <USBD_CtlSendData>
      break;
 800b58e:	e004      	b.n	800b59a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b590:	6839      	ldr	r1, [r7, #0]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 f876 	bl	800b684 <USBD_CtlError>
      break;
 800b598:	bf00      	nop
  }
}
 800b59a:	bf00      	nop
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b082      	sub	sp, #8
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
 800b5aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	885b      	ldrh	r3, [r3, #2]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d106      	bne.n	800b5c2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 f929 	bl	800b814 <USBD_CtlSendStatus>
  }
}
 800b5c2:	bf00      	nop
 800b5c4:	3708      	adds	r7, #8
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b082      	sub	sp, #8
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5da:	3b01      	subs	r3, #1
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d80b      	bhi.n	800b5f8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	885b      	ldrh	r3, [r3, #2]
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d10c      	bne.n	800b602 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 f90f 	bl	800b814 <USBD_CtlSendStatus>
      }
      break;
 800b5f6:	e004      	b.n	800b602 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f842 	bl	800b684 <USBD_CtlError>
      break;
 800b600:	e000      	b.n	800b604 <USBD_ClrFeature+0x3a>
      break;
 800b602:	bf00      	nop
  }
}
 800b604:	bf00      	nop
 800b606:	3708      	adds	r7, #8
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	781a      	ldrb	r2, [r3, #0]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	785a      	ldrb	r2, [r3, #1]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	3302      	adds	r3, #2
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	b29a      	uxth	r2, r3
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	3303      	adds	r3, #3
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	b29b      	uxth	r3, r3
 800b636:	021b      	lsls	r3, r3, #8
 800b638:	b29b      	uxth	r3, r3
 800b63a:	4413      	add	r3, r2
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	3304      	adds	r3, #4
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	b29a      	uxth	r2, r3
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	3305      	adds	r3, #5
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	b29b      	uxth	r3, r3
 800b652:	021b      	lsls	r3, r3, #8
 800b654:	b29b      	uxth	r3, r3
 800b656:	4413      	add	r3, r2
 800b658:	b29a      	uxth	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	3306      	adds	r3, #6
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	b29a      	uxth	r2, r3
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	3307      	adds	r3, #7
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	021b      	lsls	r3, r3, #8
 800b670:	b29b      	uxth	r3, r3
 800b672:	4413      	add	r3, r2
 800b674:	b29a      	uxth	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	80da      	strh	r2, [r3, #6]

}
 800b67a:	bf00      	nop
 800b67c:	370c      	adds	r7, #12
 800b67e:	46bd      	mov	sp, r7
 800b680:	bc80      	pop	{r7}
 800b682:	4770      	bx	lr

0800b684 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b68e:	2180      	movs	r1, #128	; 0x80
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fc53 	bl	800bf3c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b696:	2100      	movs	r1, #0
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 fc4f 	bl	800bf3c <USBD_LL_StallEP>
}
 800b69e:	bf00      	nop
 800b6a0:	3708      	adds	r7, #8
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b086      	sub	sp, #24
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	60f8      	str	r0, [r7, #12]
 800b6ae:	60b9      	str	r1, [r7, #8]
 800b6b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d032      	beq.n	800b722 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f000 f834 	bl	800b72a <USBD_GetLen>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	005b      	lsls	r3, r3, #1
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b6d0:	7dfb      	ldrb	r3, [r7, #23]
 800b6d2:	1c5a      	adds	r2, r3, #1
 800b6d4:	75fa      	strb	r2, [r7, #23]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	4413      	add	r3, r2
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	7812      	ldrb	r2, [r2, #0]
 800b6e0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b6e2:	7dfb      	ldrb	r3, [r7, #23]
 800b6e4:	1c5a      	adds	r2, r3, #1
 800b6e6:	75fa      	strb	r2, [r7, #23]
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	2203      	movs	r2, #3
 800b6f0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b6f2:	e012      	b.n	800b71a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	1c5a      	adds	r2, r3, #1
 800b6f8:	60fa      	str	r2, [r7, #12]
 800b6fa:	7dfa      	ldrb	r2, [r7, #23]
 800b6fc:	1c51      	adds	r1, r2, #1
 800b6fe:	75f9      	strb	r1, [r7, #23]
 800b700:	4611      	mov	r1, r2
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	440a      	add	r2, r1
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b70a:	7dfb      	ldrb	r3, [r7, #23]
 800b70c:	1c5a      	adds	r2, r3, #1
 800b70e:	75fa      	strb	r2, [r7, #23]
 800b710:	461a      	mov	r2, r3
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	4413      	add	r3, r2
 800b716:	2200      	movs	r2, #0
 800b718:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d1e8      	bne.n	800b6f4 <USBD_GetString+0x4e>
    }
  }
}
 800b722:	bf00      	nop
 800b724:	3718      	adds	r7, #24
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b72a:	b480      	push	{r7}
 800b72c:	b085      	sub	sp, #20
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b732:	2300      	movs	r3, #0
 800b734:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b736:	e005      	b.n	800b744 <USBD_GetLen+0x1a>
  {
    len++;
 800b738:	7bfb      	ldrb	r3, [r7, #15]
 800b73a:	3301      	adds	r3, #1
 800b73c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	3301      	adds	r3, #1
 800b742:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1f5      	bne.n	800b738 <USBD_GetLen+0xe>
  }

  return len;
 800b74c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3714      	adds	r7, #20
 800b752:	46bd      	mov	sp, r7
 800b754:	bc80      	pop	{r7}
 800b756:	4770      	bx	lr

0800b758 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	4613      	mov	r3, r2
 800b764:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2202      	movs	r2, #2
 800b76a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b76e:	88fa      	ldrh	r2, [r7, #6]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b774:	88fa      	ldrh	r2, [r7, #6]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b77a:	88fb      	ldrh	r3, [r7, #6]
 800b77c:	68ba      	ldr	r2, [r7, #8]
 800b77e:	2100      	movs	r1, #0
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f000 fc64 	bl	800c04e <USBD_LL_Transmit>

  return USBD_OK;
 800b786:	2300      	movs	r3, #0
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	4613      	mov	r3, r2
 800b79c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b79e:	88fb      	ldrh	r3, [r7, #6]
 800b7a0:	68ba      	ldr	r2, [r7, #8]
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	f000 fc52 	bl	800c04e <USBD_LL_Transmit>

  return USBD_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	4613      	mov	r3, r2
 800b7c0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2203      	movs	r2, #3
 800b7c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b7ca:	88fa      	ldrh	r2, [r7, #6]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b7d2:	88fa      	ldrh	r2, [r7, #6]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b7da:	88fb      	ldrh	r3, [r7, #6]
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	2100      	movs	r1, #0
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f000 fc57 	bl	800c094 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b7fe:	88fb      	ldrh	r3, [r7, #6]
 800b800:	68ba      	ldr	r2, [r7, #8]
 800b802:	2100      	movs	r1, #0
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f000 fc45 	bl	800c094 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2204      	movs	r2, #4
 800b820:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b824:	2300      	movs	r3, #0
 800b826:	2200      	movs	r2, #0
 800b828:	2100      	movs	r1, #0
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fc0f 	bl	800c04e <USBD_LL_Transmit>

  return USBD_OK;
 800b830:	2300      	movs	r3, #0
}
 800b832:	4618      	mov	r0, r3
 800b834:	3708      	adds	r7, #8
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b082      	sub	sp, #8
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2205      	movs	r2, #5
 800b846:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b84a:	2300      	movs	r3, #0
 800b84c:	2200      	movs	r2, #0
 800b84e:	2100      	movs	r1, #0
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 fc1f 	bl	800c094 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b864:	2200      	movs	r2, #0
 800b866:	4912      	ldr	r1, [pc, #72]	; (800b8b0 <MX_USB_DEVICE_Init+0x50>)
 800b868:	4812      	ldr	r0, [pc, #72]	; (800b8b4 <MX_USB_DEVICE_Init+0x54>)
 800b86a:	f7fe ff6c 	bl	800a746 <USBD_Init>
 800b86e:	4603      	mov	r3, r0
 800b870:	2b00      	cmp	r3, #0
 800b872:	d001      	beq.n	800b878 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b874:	f7f6 ffd4 	bl	8002820 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b878:	490f      	ldr	r1, [pc, #60]	; (800b8b8 <MX_USB_DEVICE_Init+0x58>)
 800b87a:	480e      	ldr	r0, [pc, #56]	; (800b8b4 <MX_USB_DEVICE_Init+0x54>)
 800b87c:	f7fe ff8e 	bl	800a79c <USBD_RegisterClass>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d001      	beq.n	800b88a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b886:	f7f6 ffcb 	bl	8002820 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b88a:	490c      	ldr	r1, [pc, #48]	; (800b8bc <MX_USB_DEVICE_Init+0x5c>)
 800b88c:	4809      	ldr	r0, [pc, #36]	; (800b8b4 <MX_USB_DEVICE_Init+0x54>)
 800b88e:	f7fe febf 	bl	800a610 <USBD_CDC_RegisterInterface>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d001      	beq.n	800b89c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b898:	f7f6 ffc2 	bl	8002820 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b89c:	4805      	ldr	r0, [pc, #20]	; (800b8b4 <MX_USB_DEVICE_Init+0x54>)
 800b89e:	f7fe ff96 	bl	800a7ce <USBD_Start>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d001      	beq.n	800b8ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b8a8:	f7f6 ffba 	bl	8002820 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b8ac:	bf00      	nop
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	20000268 	.word	0x20000268
 800b8b4:	20000d38 	.word	0x20000d38
 800b8b8:	20000154 	.word	0x20000154
 800b8bc:	20000258 	.word	0x20000258

0800b8c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	4905      	ldr	r1, [pc, #20]	; (800b8dc <CDC_Init_FS+0x1c>)
 800b8c8:	4805      	ldr	r0, [pc, #20]	; (800b8e0 <CDC_Init_FS+0x20>)
 800b8ca:	f7fe feb7 	bl	800a63c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b8ce:	4905      	ldr	r1, [pc, #20]	; (800b8e4 <CDC_Init_FS+0x24>)
 800b8d0:	4803      	ldr	r0, [pc, #12]	; (800b8e0 <CDC_Init_FS+0x20>)
 800b8d2:	f7fe fecc 	bl	800a66e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b8d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	200013e4 	.word	0x200013e4
 800b8e0:	20000d38 	.word	0x20000d38
 800b8e4:	20000ffc 	.word	0x20000ffc

0800b8e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b8ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bc80      	pop	{r7}
 800b8f4:	4770      	bx	lr
	...

0800b8f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	4603      	mov	r3, r0
 800b900:	6039      	str	r1, [r7, #0]
 800b902:	71fb      	strb	r3, [r7, #7]
 800b904:	4613      	mov	r3, r2
 800b906:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b908:	79fb      	ldrb	r3, [r7, #7]
 800b90a:	2b23      	cmp	r3, #35	; 0x23
 800b90c:	d84a      	bhi.n	800b9a4 <CDC_Control_FS+0xac>
 800b90e:	a201      	add	r2, pc, #4	; (adr r2, 800b914 <CDC_Control_FS+0x1c>)
 800b910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b914:	0800b9a5 	.word	0x0800b9a5
 800b918:	0800b9a5 	.word	0x0800b9a5
 800b91c:	0800b9a5 	.word	0x0800b9a5
 800b920:	0800b9a5 	.word	0x0800b9a5
 800b924:	0800b9a5 	.word	0x0800b9a5
 800b928:	0800b9a5 	.word	0x0800b9a5
 800b92c:	0800b9a5 	.word	0x0800b9a5
 800b930:	0800b9a5 	.word	0x0800b9a5
 800b934:	0800b9a5 	.word	0x0800b9a5
 800b938:	0800b9a5 	.word	0x0800b9a5
 800b93c:	0800b9a5 	.word	0x0800b9a5
 800b940:	0800b9a5 	.word	0x0800b9a5
 800b944:	0800b9a5 	.word	0x0800b9a5
 800b948:	0800b9a5 	.word	0x0800b9a5
 800b94c:	0800b9a5 	.word	0x0800b9a5
 800b950:	0800b9a5 	.word	0x0800b9a5
 800b954:	0800b9a5 	.word	0x0800b9a5
 800b958:	0800b9a5 	.word	0x0800b9a5
 800b95c:	0800b9a5 	.word	0x0800b9a5
 800b960:	0800b9a5 	.word	0x0800b9a5
 800b964:	0800b9a5 	.word	0x0800b9a5
 800b968:	0800b9a5 	.word	0x0800b9a5
 800b96c:	0800b9a5 	.word	0x0800b9a5
 800b970:	0800b9a5 	.word	0x0800b9a5
 800b974:	0800b9a5 	.word	0x0800b9a5
 800b978:	0800b9a5 	.word	0x0800b9a5
 800b97c:	0800b9a5 	.word	0x0800b9a5
 800b980:	0800b9a5 	.word	0x0800b9a5
 800b984:	0800b9a5 	.word	0x0800b9a5
 800b988:	0800b9a5 	.word	0x0800b9a5
 800b98c:	0800b9a5 	.word	0x0800b9a5
 800b990:	0800b9a5 	.word	0x0800b9a5
 800b994:	0800b9a5 	.word	0x0800b9a5
 800b998:	0800b9a5 	.word	0x0800b9a5
 800b99c:	0800b9a5 	.word	0x0800b9a5
 800b9a0:	0800b9a5 	.word	0x0800b9a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b9a4:	bf00      	nop
  }

  return (USBD_OK);
 800b9a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bc80      	pop	{r7}
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop

0800b9b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b9be:	6879      	ldr	r1, [r7, #4]
 800b9c0:	4805      	ldr	r0, [pc, #20]	; (800b9d8 <CDC_Receive_FS+0x24>)
 800b9c2:	f7fe fe54 	bl	800a66e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b9c6:	4804      	ldr	r0, [pc, #16]	; (800b9d8 <CDC_Receive_FS+0x24>)
 800b9c8:	f7fe fe93 	bl	800a6f2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b9cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	20000d38 	.word	0x20000d38

0800b9dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b9ec:	4b0d      	ldr	r3, [pc, #52]	; (800ba24 <CDC_Transmit_FS+0x48>)
 800b9ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e00b      	b.n	800ba1a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ba02:	887b      	ldrh	r3, [r7, #2]
 800ba04:	461a      	mov	r2, r3
 800ba06:	6879      	ldr	r1, [r7, #4]
 800ba08:	4806      	ldr	r0, [pc, #24]	; (800ba24 <CDC_Transmit_FS+0x48>)
 800ba0a:	f7fe fe17 	bl	800a63c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ba0e:	4805      	ldr	r0, [pc, #20]	; (800ba24 <CDC_Transmit_FS+0x48>)
 800ba10:	f7fe fe40 	bl	800a694 <USBD_CDC_TransmitPacket>
 800ba14:	4603      	mov	r3, r0
 800ba16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ba18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	20000d38 	.word	0x20000d38

0800ba28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	4603      	mov	r3, r0
 800ba30:	6039      	str	r1, [r7, #0]
 800ba32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	2212      	movs	r2, #18
 800ba38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ba3a:	4b03      	ldr	r3, [pc, #12]	; (800ba48 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bc80      	pop	{r7}
 800ba44:	4770      	bx	lr
 800ba46:	bf00      	nop
 800ba48:	20000284 	.word	0x20000284

0800ba4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	4603      	mov	r3, r0
 800ba54:	6039      	str	r1, [r7, #0]
 800ba56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	2204      	movs	r2, #4
 800ba5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ba5e:	4b03      	ldr	r3, [pc, #12]	; (800ba6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	370c      	adds	r7, #12
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bc80      	pop	{r7}
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	20000298 	.word	0x20000298

0800ba70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	4603      	mov	r3, r0
 800ba78:	6039      	str	r1, [r7, #0]
 800ba7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba7c:	79fb      	ldrb	r3, [r7, #7]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d105      	bne.n	800ba8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba82:	683a      	ldr	r2, [r7, #0]
 800ba84:	4907      	ldr	r1, [pc, #28]	; (800baa4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba86:	4808      	ldr	r0, [pc, #32]	; (800baa8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ba88:	f7ff fe0d 	bl	800b6a6 <USBD_GetString>
 800ba8c:	e004      	b.n	800ba98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	4904      	ldr	r1, [pc, #16]	; (800baa4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba92:	4805      	ldr	r0, [pc, #20]	; (800baa8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ba94:	f7ff fe07 	bl	800b6a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba98:	4b02      	ldr	r3, [pc, #8]	; (800baa4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3708      	adds	r7, #8
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	200017cc 	.word	0x200017cc
 800baa8:	0800cab8 	.word	0x0800cab8

0800baac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	4603      	mov	r3, r0
 800bab4:	6039      	str	r1, [r7, #0]
 800bab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bab8:	683a      	ldr	r2, [r7, #0]
 800baba:	4904      	ldr	r1, [pc, #16]	; (800bacc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800babc:	4804      	ldr	r0, [pc, #16]	; (800bad0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800babe:	f7ff fdf2 	bl	800b6a6 <USBD_GetString>
  return USBD_StrDesc;
 800bac2:	4b02      	ldr	r3, [pc, #8]	; (800bacc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	200017cc 	.word	0x200017cc
 800bad0:	0800cad0 	.word	0x0800cad0

0800bad4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	4603      	mov	r3, r0
 800badc:	6039      	str	r1, [r7, #0]
 800bade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	221a      	movs	r2, #26
 800bae4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bae6:	f000 f843 	bl	800bb70 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800baea:	4b02      	ldr	r3, [pc, #8]	; (800baf4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800baec:	4618      	mov	r0, r3
 800baee:	3708      	adds	r7, #8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	2000029c 	.word	0x2000029c

0800baf8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	4603      	mov	r3, r0
 800bb00:	6039      	str	r1, [r7, #0]
 800bb02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bb04:	79fb      	ldrb	r3, [r7, #7]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d105      	bne.n	800bb16 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb0a:	683a      	ldr	r2, [r7, #0]
 800bb0c:	4907      	ldr	r1, [pc, #28]	; (800bb2c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb0e:	4808      	ldr	r0, [pc, #32]	; (800bb30 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb10:	f7ff fdc9 	bl	800b6a6 <USBD_GetString>
 800bb14:	e004      	b.n	800bb20 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb16:	683a      	ldr	r2, [r7, #0]
 800bb18:	4904      	ldr	r1, [pc, #16]	; (800bb2c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb1a:	4805      	ldr	r0, [pc, #20]	; (800bb30 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb1c:	f7ff fdc3 	bl	800b6a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb20:	4b02      	ldr	r3, [pc, #8]	; (800bb2c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	200017cc 	.word	0x200017cc
 800bb30:	0800cae4 	.word	0x0800cae4

0800bb34 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	6039      	str	r1, [r7, #0]
 800bb3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb40:	79fb      	ldrb	r3, [r7, #7]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d105      	bne.n	800bb52 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb46:	683a      	ldr	r2, [r7, #0]
 800bb48:	4907      	ldr	r1, [pc, #28]	; (800bb68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb4a:	4808      	ldr	r0, [pc, #32]	; (800bb6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb4c:	f7ff fdab 	bl	800b6a6 <USBD_GetString>
 800bb50:	e004      	b.n	800bb5c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb52:	683a      	ldr	r2, [r7, #0]
 800bb54:	4904      	ldr	r1, [pc, #16]	; (800bb68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb56:	4805      	ldr	r0, [pc, #20]	; (800bb6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb58:	f7ff fda5 	bl	800b6a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb5c:	4b02      	ldr	r3, [pc, #8]	; (800bb68 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	200017cc 	.word	0x200017cc
 800bb6c:	0800caf0 	.word	0x0800caf0

0800bb70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bb76:	4b0f      	ldr	r3, [pc, #60]	; (800bbb4 <Get_SerialNum+0x44>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bb7c:	4b0e      	ldr	r3, [pc, #56]	; (800bbb8 <Get_SerialNum+0x48>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bb82:	4b0e      	ldr	r3, [pc, #56]	; (800bbbc <Get_SerialNum+0x4c>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d009      	beq.n	800bbaa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bb96:	2208      	movs	r2, #8
 800bb98:	4909      	ldr	r1, [pc, #36]	; (800bbc0 <Get_SerialNum+0x50>)
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f000 f814 	bl	800bbc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bba0:	2204      	movs	r2, #4
 800bba2:	4908      	ldr	r1, [pc, #32]	; (800bbc4 <Get_SerialNum+0x54>)
 800bba4:	68b8      	ldr	r0, [r7, #8]
 800bba6:	f000 f80f 	bl	800bbc8 <IntToUnicode>
  }
}
 800bbaa:	bf00      	nop
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	1ffff7e8 	.word	0x1ffff7e8
 800bbb8:	1ffff7ec 	.word	0x1ffff7ec
 800bbbc:	1ffff7f0 	.word	0x1ffff7f0
 800bbc0:	2000029e 	.word	0x2000029e
 800bbc4:	200002ae 	.word	0x200002ae

0800bbc8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b087      	sub	sp, #28
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bbda:	2300      	movs	r3, #0
 800bbdc:	75fb      	strb	r3, [r7, #23]
 800bbde:	e027      	b.n	800bc30 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	0f1b      	lsrs	r3, r3, #28
 800bbe4:	2b09      	cmp	r3, #9
 800bbe6:	d80b      	bhi.n	800bc00 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	0f1b      	lsrs	r3, r3, #28
 800bbec:	b2da      	uxtb	r2, r3
 800bbee:	7dfb      	ldrb	r3, [r7, #23]
 800bbf0:	005b      	lsls	r3, r3, #1
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	440b      	add	r3, r1
 800bbf8:	3230      	adds	r2, #48	; 0x30
 800bbfa:	b2d2      	uxtb	r2, r2
 800bbfc:	701a      	strb	r2, [r3, #0]
 800bbfe:	e00a      	b.n	800bc16 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	0f1b      	lsrs	r3, r3, #28
 800bc04:	b2da      	uxtb	r2, r3
 800bc06:	7dfb      	ldrb	r3, [r7, #23]
 800bc08:	005b      	lsls	r3, r3, #1
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	440b      	add	r3, r1
 800bc10:	3237      	adds	r2, #55	; 0x37
 800bc12:	b2d2      	uxtb	r2, r2
 800bc14:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	011b      	lsls	r3, r3, #4
 800bc1a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bc1c:	7dfb      	ldrb	r3, [r7, #23]
 800bc1e:	005b      	lsls	r3, r3, #1
 800bc20:	3301      	adds	r3, #1
 800bc22:	68ba      	ldr	r2, [r7, #8]
 800bc24:	4413      	add	r3, r2
 800bc26:	2200      	movs	r2, #0
 800bc28:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bc2a:	7dfb      	ldrb	r3, [r7, #23]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	75fb      	strb	r3, [r7, #23]
 800bc30:	7dfa      	ldrb	r2, [r7, #23]
 800bc32:	79fb      	ldrb	r3, [r7, #7]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d3d3      	bcc.n	800bbe0 <IntToUnicode+0x18>
  }
}
 800bc38:	bf00      	nop
 800bc3a:	371c      	adds	r7, #28
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bc80      	pop	{r7}
 800bc40:	4770      	bx	lr
	...

0800bc44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a0d      	ldr	r2, [pc, #52]	; (800bc88 <HAL_PCD_MspInit+0x44>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d113      	bne.n	800bc7e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bc56:	4b0d      	ldr	r3, [pc, #52]	; (800bc8c <HAL_PCD_MspInit+0x48>)
 800bc58:	69db      	ldr	r3, [r3, #28]
 800bc5a:	4a0c      	ldr	r2, [pc, #48]	; (800bc8c <HAL_PCD_MspInit+0x48>)
 800bc5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bc60:	61d3      	str	r3, [r2, #28]
 800bc62:	4b0a      	ldr	r3, [pc, #40]	; (800bc8c <HAL_PCD_MspInit+0x48>)
 800bc64:	69db      	ldr	r3, [r3, #28]
 800bc66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800bc6e:	2200      	movs	r2, #0
 800bc70:	2100      	movs	r1, #0
 800bc72:	2014      	movs	r0, #20
 800bc74:	f7f7 fd69 	bl	800374a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bc78:	2014      	movs	r0, #20
 800bc7a:	f7f7 fd82 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bc7e:	bf00      	nop
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	40005c00 	.word	0x40005c00
 800bc8c:	40021000 	.word	0x40021000

0800bc90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bca4:	4619      	mov	r1, r3
 800bca6:	4610      	mov	r0, r2
 800bca8:	f7fe fdd9 	bl	800a85e <USBD_LL_SetupStage>
}
 800bcac:	bf00      	nop
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bcc6:	78fa      	ldrb	r2, [r7, #3]
 800bcc8:	6879      	ldr	r1, [r7, #4]
 800bcca:	4613      	mov	r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	4413      	add	r3, r2
 800bcd0:	00db      	lsls	r3, r3, #3
 800bcd2:	440b      	add	r3, r1
 800bcd4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	78fb      	ldrb	r3, [r7, #3]
 800bcdc:	4619      	mov	r1, r3
 800bcde:	f7fe fe09 	bl	800a8f4 <USBD_LL_DataOutStage>
}
 800bce2:	bf00      	nop
 800bce4:	3708      	adds	r7, #8
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}

0800bcea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcea:	b580      	push	{r7, lr}
 800bcec:	b082      	sub	sp, #8
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
 800bcf2:	460b      	mov	r3, r1
 800bcf4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bcfc:	78fa      	ldrb	r2, [r7, #3]
 800bcfe:	6879      	ldr	r1, [r7, #4]
 800bd00:	4613      	mov	r3, r2
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	4413      	add	r3, r2
 800bd06:	00db      	lsls	r3, r3, #3
 800bd08:	440b      	add	r3, r1
 800bd0a:	333c      	adds	r3, #60	; 0x3c
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	78fb      	ldrb	r3, [r7, #3]
 800bd10:	4619      	mov	r1, r3
 800bd12:	f7fe fe60 	bl	800a9d6 <USBD_LL_DataInStage>
}
 800bd16:	bf00      	nop
 800bd18:	3708      	adds	r7, #8
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b082      	sub	sp, #8
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7fe ff70 	bl	800ac12 <USBD_LL_SOF>
}
 800bd32:	bf00      	nop
 800bd34:	3708      	adds	r7, #8
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b084      	sub	sp, #16
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bd42:	2301      	movs	r3, #1
 800bd44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d001      	beq.n	800bd52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bd4e:	f7f6 fd67 	bl	8002820 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bd58:	7bfa      	ldrb	r2, [r7, #15]
 800bd5a:	4611      	mov	r1, r2
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7fe ff20 	bl	800aba2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7fe fed9 	bl	800ab20 <USBD_LL_Reset>
}
 800bd6e:	bf00      	nop
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
	...

0800bd78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fe ff1a 	bl	800abc0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	699b      	ldr	r3, [r3, #24]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d005      	beq.n	800bda0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd94:	4b04      	ldr	r3, [pc, #16]	; (800bda8 <HAL_PCD_SuspendCallback+0x30>)
 800bd96:	691b      	ldr	r3, [r3, #16]
 800bd98:	4a03      	ldr	r2, [pc, #12]	; (800bda8 <HAL_PCD_SuspendCallback+0x30>)
 800bd9a:	f043 0306 	orr.w	r3, r3, #6
 800bd9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bda0:	bf00      	nop
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	e000ed00 	.word	0xe000ed00

0800bdac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fe ff14 	bl	800abe8 <USBD_LL_Resume>
}
 800bdc0:	bf00      	nop
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bdd0:	4a28      	ldr	r2, [pc, #160]	; (800be74 <USBD_LL_Init+0xac>)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	4a26      	ldr	r2, [pc, #152]	; (800be74 <USBD_LL_Init+0xac>)
 800bddc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bde0:	4b24      	ldr	r3, [pc, #144]	; (800be74 <USBD_LL_Init+0xac>)
 800bde2:	4a25      	ldr	r2, [pc, #148]	; (800be78 <USBD_LL_Init+0xb0>)
 800bde4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bde6:	4b23      	ldr	r3, [pc, #140]	; (800be74 <USBD_LL_Init+0xac>)
 800bde8:	2208      	movs	r2, #8
 800bdea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bdec:	4b21      	ldr	r3, [pc, #132]	; (800be74 <USBD_LL_Init+0xac>)
 800bdee:	2202      	movs	r2, #2
 800bdf0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bdf2:	4b20      	ldr	r3, [pc, #128]	; (800be74 <USBD_LL_Init+0xac>)
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bdf8:	4b1e      	ldr	r3, [pc, #120]	; (800be74 <USBD_LL_Init+0xac>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bdfe:	4b1d      	ldr	r3, [pc, #116]	; (800be74 <USBD_LL_Init+0xac>)
 800be00:	2200      	movs	r2, #0
 800be02:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800be04:	481b      	ldr	r0, [pc, #108]	; (800be74 <USBD_LL_Init+0xac>)
 800be06:	f7f9 fd34 	bl	8005872 <HAL_PCD_Init>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d001      	beq.n	800be14 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800be10:	f7f6 fd06 	bl	8002820 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800be1a:	2318      	movs	r3, #24
 800be1c:	2200      	movs	r2, #0
 800be1e:	2100      	movs	r1, #0
 800be20:	f7fb f868 	bl	8006ef4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800be2a:	2358      	movs	r3, #88	; 0x58
 800be2c:	2200      	movs	r2, #0
 800be2e:	2180      	movs	r1, #128	; 0x80
 800be30:	f7fb f860 	bl	8006ef4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800be3a:	23c0      	movs	r3, #192	; 0xc0
 800be3c:	2200      	movs	r2, #0
 800be3e:	2181      	movs	r1, #129	; 0x81
 800be40:	f7fb f858 	bl	8006ef4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800be4a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800be4e:	2200      	movs	r2, #0
 800be50:	2101      	movs	r1, #1
 800be52:	f7fb f84f 	bl	8006ef4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800be5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be60:	2200      	movs	r2, #0
 800be62:	2182      	movs	r1, #130	; 0x82
 800be64:	f7fb f846 	bl	8006ef4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	200019cc 	.word	0x200019cc
 800be78:	40005c00 	.word	0x40005c00

0800be7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be84:	2300      	movs	r3, #0
 800be86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be88:	2300      	movs	r3, #0
 800be8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be92:	4618      	mov	r0, r3
 800be94:	f7f9 fdf8 	bl	8005a88 <HAL_PCD_Start>
 800be98:	4603      	mov	r3, r0
 800be9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be9c:	7bfb      	ldrb	r3, [r7, #15]
 800be9e:	4618      	mov	r0, r3
 800bea0:	f000 f94e 	bl	800c140 <USBD_Get_USB_Status>
 800bea4:	4603      	mov	r3, r0
 800bea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bea8:	7bbb      	ldrb	r3, [r7, #14]
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3710      	adds	r7, #16
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b084      	sub	sp, #16
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
 800beba:	4608      	mov	r0, r1
 800bebc:	4611      	mov	r1, r2
 800bebe:	461a      	mov	r2, r3
 800bec0:	4603      	mov	r3, r0
 800bec2:	70fb      	strb	r3, [r7, #3]
 800bec4:	460b      	mov	r3, r1
 800bec6:	70bb      	strb	r3, [r7, #2]
 800bec8:	4613      	mov	r3, r2
 800beca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800becc:	2300      	movs	r3, #0
 800bece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bed0:	2300      	movs	r3, #0
 800bed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800beda:	78bb      	ldrb	r3, [r7, #2]
 800bedc:	883a      	ldrh	r2, [r7, #0]
 800bede:	78f9      	ldrb	r1, [r7, #3]
 800bee0:	f7f9 ff72 	bl	8005dc8 <HAL_PCD_EP_Open>
 800bee4:	4603      	mov	r3, r0
 800bee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
 800beea:	4618      	mov	r0, r3
 800beec:	f000 f928 	bl	800c140 <USBD_Get_USB_Status>
 800bef0:	4603      	mov	r3, r0
 800bef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bef4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b084      	sub	sp, #16
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
 800bf06:	460b      	mov	r3, r1
 800bf08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf18:	78fa      	ldrb	r2, [r7, #3]
 800bf1a:	4611      	mov	r1, r2
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7f9 ffb9 	bl	8005e94 <HAL_PCD_EP_Close>
 800bf22:	4603      	mov	r3, r0
 800bf24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf26:	7bfb      	ldrb	r3, [r7, #15]
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f000 f909 	bl	800c140 <USBD_Get_USB_Status>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf32:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	460b      	mov	r3, r1
 800bf46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf56:	78fa      	ldrb	r2, [r7, #3]
 800bf58:	4611      	mov	r1, r2
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fa f879 	bl	8006052 <HAL_PCD_EP_SetStall>
 800bf60:	4603      	mov	r3, r0
 800bf62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf64:	7bfb      	ldrb	r3, [r7, #15]
 800bf66:	4618      	mov	r0, r3
 800bf68:	f000 f8ea 	bl	800c140 <USBD_Get_USB_Status>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf70:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b084      	sub	sp, #16
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
 800bf82:	460b      	mov	r3, r1
 800bf84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf86:	2300      	movs	r3, #0
 800bf88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf94:	78fa      	ldrb	r2, [r7, #3]
 800bf96:	4611      	mov	r1, r2
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7fa f8ba 	bl	8006112 <HAL_PCD_EP_ClrStall>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfa2:	7bfb      	ldrb	r3, [r7, #15]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f000 f8cb 	bl	800c140 <USBD_Get_USB_Status>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfae:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3710      	adds	r7, #16
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bfcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	da0c      	bge.n	800bfee <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bfd4:	78fb      	ldrb	r3, [r7, #3]
 800bfd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfda:	68f9      	ldr	r1, [r7, #12]
 800bfdc:	1c5a      	adds	r2, r3, #1
 800bfde:	4613      	mov	r3, r2
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	4413      	add	r3, r2
 800bfe4:	00db      	lsls	r3, r3, #3
 800bfe6:	440b      	add	r3, r1
 800bfe8:	3302      	adds	r3, #2
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	e00b      	b.n	800c006 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bfee:	78fb      	ldrb	r3, [r7, #3]
 800bff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bff4:	68f9      	ldr	r1, [r7, #12]
 800bff6:	4613      	mov	r3, r2
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	4413      	add	r3, r2
 800bffc:	00db      	lsls	r3, r3, #3
 800bffe:	440b      	add	r3, r1
 800c000:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c004:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c006:	4618      	mov	r0, r3
 800c008:	3714      	adds	r7, #20
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bc80      	pop	{r7}
 800c00e:	4770      	bx	lr

0800c010 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	460b      	mov	r3, r1
 800c01a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c01c:	2300      	movs	r3, #0
 800c01e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c020:	2300      	movs	r3, #0
 800c022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c02a:	78fa      	ldrb	r2, [r7, #3]
 800c02c:	4611      	mov	r1, r2
 800c02e:	4618      	mov	r0, r3
 800c030:	f7f9 fea5 	bl	8005d7e <HAL_PCD_SetAddress>
 800c034:	4603      	mov	r3, r0
 800c036:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c038:	7bfb      	ldrb	r3, [r7, #15]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f000 f880 	bl	800c140 <USBD_Get_USB_Status>
 800c040:	4603      	mov	r3, r0
 800c042:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c044:	7bbb      	ldrb	r3, [r7, #14]
}
 800c046:	4618      	mov	r0, r3
 800c048:	3710      	adds	r7, #16
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b086      	sub	sp, #24
 800c052:	af00      	add	r7, sp, #0
 800c054:	60f8      	str	r0, [r7, #12]
 800c056:	607a      	str	r2, [r7, #4]
 800c058:	461a      	mov	r2, r3
 800c05a:	460b      	mov	r3, r1
 800c05c:	72fb      	strb	r3, [r7, #11]
 800c05e:	4613      	mov	r3, r2
 800c060:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c062:	2300      	movs	r3, #0
 800c064:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c066:	2300      	movs	r3, #0
 800c068:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c070:	893b      	ldrh	r3, [r7, #8]
 800c072:	7af9      	ldrb	r1, [r7, #11]
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	f7f9 ffa9 	bl	8005fcc <HAL_PCD_EP_Transmit>
 800c07a:	4603      	mov	r3, r0
 800c07c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c07e:	7dfb      	ldrb	r3, [r7, #23]
 800c080:	4618      	mov	r0, r3
 800c082:	f000 f85d 	bl	800c140 <USBD_Get_USB_Status>
 800c086:	4603      	mov	r3, r0
 800c088:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c08a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3718      	adds	r7, #24
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b086      	sub	sp, #24
 800c098:	af00      	add	r7, sp, #0
 800c09a:	60f8      	str	r0, [r7, #12]
 800c09c:	607a      	str	r2, [r7, #4]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	72fb      	strb	r3, [r7, #11]
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c0b6:	893b      	ldrh	r3, [r7, #8]
 800c0b8:	7af9      	ldrb	r1, [r7, #11]
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	f7f9 ff32 	bl	8005f24 <HAL_PCD_EP_Receive>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0c4:	7dfb      	ldrb	r3, [r7, #23]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f000 f83a 	bl	800c140 <USBD_Get_USB_Status>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0d0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3718      	adds	r7, #24
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b082      	sub	sp, #8
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0ec:	78fa      	ldrb	r2, [r7, #3]
 800c0ee:	4611      	mov	r1, r2
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7f9 ff54 	bl	8005f9e <HAL_PCD_EP_GetRxCount>
 800c0f6:	4603      	mov	r3, r0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c108:	4b02      	ldr	r3, [pc, #8]	; (800c114 <USBD_static_malloc+0x14>)
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	370c      	adds	r7, #12
 800c10e:	46bd      	mov	sp, r7
 800c110:	bc80      	pop	{r7}
 800c112:	4770      	bx	lr
 800c114:	200003a4 	.word	0x200003a4

0800c118 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]

}
 800c120:	bf00      	nop
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	bc80      	pop	{r7}
 800c128:	4770      	bx	lr

0800c12a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c12a:	b480      	push	{r7}
 800c12c:	b083      	sub	sp, #12
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
 800c132:	460b      	mov	r3, r1
 800c134:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c136:	bf00      	nop
 800c138:	370c      	adds	r7, #12
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bc80      	pop	{r7}
 800c13e:	4770      	bx	lr

0800c140 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c140:	b480      	push	{r7}
 800c142:	b085      	sub	sp, #20
 800c144:	af00      	add	r7, sp, #0
 800c146:	4603      	mov	r3, r0
 800c148:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c14a:	2300      	movs	r3, #0
 800c14c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c14e:	79fb      	ldrb	r3, [r7, #7]
 800c150:	2b03      	cmp	r3, #3
 800c152:	d817      	bhi.n	800c184 <USBD_Get_USB_Status+0x44>
 800c154:	a201      	add	r2, pc, #4	; (adr r2, 800c15c <USBD_Get_USB_Status+0x1c>)
 800c156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c15a:	bf00      	nop
 800c15c:	0800c16d 	.word	0x0800c16d
 800c160:	0800c173 	.word	0x0800c173
 800c164:	0800c179 	.word	0x0800c179
 800c168:	0800c17f 	.word	0x0800c17f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c16c:	2300      	movs	r3, #0
 800c16e:	73fb      	strb	r3, [r7, #15]
    break;
 800c170:	e00b      	b.n	800c18a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c172:	2302      	movs	r3, #2
 800c174:	73fb      	strb	r3, [r7, #15]
    break;
 800c176:	e008      	b.n	800c18a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c178:	2301      	movs	r3, #1
 800c17a:	73fb      	strb	r3, [r7, #15]
    break;
 800c17c:	e005      	b.n	800c18a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c17e:	2302      	movs	r3, #2
 800c180:	73fb      	strb	r3, [r7, #15]
    break;
 800c182:	e002      	b.n	800c18a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c184:	2302      	movs	r3, #2
 800c186:	73fb      	strb	r3, [r7, #15]
    break;
 800c188:	bf00      	nop
  }
  return usb_status;
 800c18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3714      	adds	r7, #20
 800c190:	46bd      	mov	sp, r7
 800c192:	bc80      	pop	{r7}
 800c194:	4770      	bx	lr
 800c196:	bf00      	nop

0800c198 <__errno>:
 800c198:	4b01      	ldr	r3, [pc, #4]	; (800c1a0 <__errno+0x8>)
 800c19a:	6818      	ldr	r0, [r3, #0]
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	200002b8 	.word	0x200002b8

0800c1a4 <__libc_init_array>:
 800c1a4:	b570      	push	{r4, r5, r6, lr}
 800c1a6:	2500      	movs	r5, #0
 800c1a8:	4e0c      	ldr	r6, [pc, #48]	; (800c1dc <__libc_init_array+0x38>)
 800c1aa:	4c0d      	ldr	r4, [pc, #52]	; (800c1e0 <__libc_init_array+0x3c>)
 800c1ac:	1ba4      	subs	r4, r4, r6
 800c1ae:	10a4      	asrs	r4, r4, #2
 800c1b0:	42a5      	cmp	r5, r4
 800c1b2:	d109      	bne.n	800c1c8 <__libc_init_array+0x24>
 800c1b4:	f000 fc48 	bl	800ca48 <_init>
 800c1b8:	2500      	movs	r5, #0
 800c1ba:	4e0a      	ldr	r6, [pc, #40]	; (800c1e4 <__libc_init_array+0x40>)
 800c1bc:	4c0a      	ldr	r4, [pc, #40]	; (800c1e8 <__libc_init_array+0x44>)
 800c1be:	1ba4      	subs	r4, r4, r6
 800c1c0:	10a4      	asrs	r4, r4, #2
 800c1c2:	42a5      	cmp	r5, r4
 800c1c4:	d105      	bne.n	800c1d2 <__libc_init_array+0x2e>
 800c1c6:	bd70      	pop	{r4, r5, r6, pc}
 800c1c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c1cc:	4798      	blx	r3
 800c1ce:	3501      	adds	r5, #1
 800c1d0:	e7ee      	b.n	800c1b0 <__libc_init_array+0xc>
 800c1d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c1d6:	4798      	blx	r3
 800c1d8:	3501      	adds	r5, #1
 800c1da:	e7f2      	b.n	800c1c2 <__libc_init_array+0x1e>
 800c1dc:	0800cde4 	.word	0x0800cde4
 800c1e0:	0800cde4 	.word	0x0800cde4
 800c1e4:	0800cde4 	.word	0x0800cde4
 800c1e8:	0800cde8 	.word	0x0800cde8

0800c1ec <memset>:
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	4402      	add	r2, r0
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d100      	bne.n	800c1f6 <memset+0xa>
 800c1f4:	4770      	bx	lr
 800c1f6:	f803 1b01 	strb.w	r1, [r3], #1
 800c1fa:	e7f9      	b.n	800c1f0 <memset+0x4>

0800c1fc <sniprintf>:
 800c1fc:	b40c      	push	{r2, r3}
 800c1fe:	b530      	push	{r4, r5, lr}
 800c200:	4b17      	ldr	r3, [pc, #92]	; (800c260 <sniprintf+0x64>)
 800c202:	1e0c      	subs	r4, r1, #0
 800c204:	b09d      	sub	sp, #116	; 0x74
 800c206:	681d      	ldr	r5, [r3, #0]
 800c208:	da08      	bge.n	800c21c <sniprintf+0x20>
 800c20a:	238b      	movs	r3, #139	; 0x8b
 800c20c:	f04f 30ff 	mov.w	r0, #4294967295
 800c210:	602b      	str	r3, [r5, #0]
 800c212:	b01d      	add	sp, #116	; 0x74
 800c214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c218:	b002      	add	sp, #8
 800c21a:	4770      	bx	lr
 800c21c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c220:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c224:	bf0c      	ite	eq
 800c226:	4623      	moveq	r3, r4
 800c228:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c22c:	9304      	str	r3, [sp, #16]
 800c22e:	9307      	str	r3, [sp, #28]
 800c230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c234:	9002      	str	r0, [sp, #8]
 800c236:	9006      	str	r0, [sp, #24]
 800c238:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c23c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c23e:	ab21      	add	r3, sp, #132	; 0x84
 800c240:	a902      	add	r1, sp, #8
 800c242:	4628      	mov	r0, r5
 800c244:	9301      	str	r3, [sp, #4]
 800c246:	f000 f867 	bl	800c318 <_svfiprintf_r>
 800c24a:	1c43      	adds	r3, r0, #1
 800c24c:	bfbc      	itt	lt
 800c24e:	238b      	movlt	r3, #139	; 0x8b
 800c250:	602b      	strlt	r3, [r5, #0]
 800c252:	2c00      	cmp	r4, #0
 800c254:	d0dd      	beq.n	800c212 <sniprintf+0x16>
 800c256:	2200      	movs	r2, #0
 800c258:	9b02      	ldr	r3, [sp, #8]
 800c25a:	701a      	strb	r2, [r3, #0]
 800c25c:	e7d9      	b.n	800c212 <sniprintf+0x16>
 800c25e:	bf00      	nop
 800c260:	200002b8 	.word	0x200002b8

0800c264 <__ssputs_r>:
 800c264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c268:	688e      	ldr	r6, [r1, #8]
 800c26a:	4682      	mov	sl, r0
 800c26c:	429e      	cmp	r6, r3
 800c26e:	460c      	mov	r4, r1
 800c270:	4690      	mov	r8, r2
 800c272:	4699      	mov	r9, r3
 800c274:	d837      	bhi.n	800c2e6 <__ssputs_r+0x82>
 800c276:	898a      	ldrh	r2, [r1, #12]
 800c278:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c27c:	d031      	beq.n	800c2e2 <__ssputs_r+0x7e>
 800c27e:	2302      	movs	r3, #2
 800c280:	6825      	ldr	r5, [r4, #0]
 800c282:	6909      	ldr	r1, [r1, #16]
 800c284:	1a6f      	subs	r7, r5, r1
 800c286:	6965      	ldr	r5, [r4, #20]
 800c288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c28c:	fb95 f5f3 	sdiv	r5, r5, r3
 800c290:	f109 0301 	add.w	r3, r9, #1
 800c294:	443b      	add	r3, r7
 800c296:	429d      	cmp	r5, r3
 800c298:	bf38      	it	cc
 800c29a:	461d      	movcc	r5, r3
 800c29c:	0553      	lsls	r3, r2, #21
 800c29e:	d530      	bpl.n	800c302 <__ssputs_r+0x9e>
 800c2a0:	4629      	mov	r1, r5
 800c2a2:	f000 fb37 	bl	800c914 <_malloc_r>
 800c2a6:	4606      	mov	r6, r0
 800c2a8:	b950      	cbnz	r0, 800c2c0 <__ssputs_r+0x5c>
 800c2aa:	230c      	movs	r3, #12
 800c2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b0:	f8ca 3000 	str.w	r3, [sl]
 800c2b4:	89a3      	ldrh	r3, [r4, #12]
 800c2b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ba:	81a3      	strh	r3, [r4, #12]
 800c2bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2c0:	463a      	mov	r2, r7
 800c2c2:	6921      	ldr	r1, [r4, #16]
 800c2c4:	f000 fab6 	bl	800c834 <memcpy>
 800c2c8:	89a3      	ldrh	r3, [r4, #12]
 800c2ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2d2:	81a3      	strh	r3, [r4, #12]
 800c2d4:	6126      	str	r6, [r4, #16]
 800c2d6:	443e      	add	r6, r7
 800c2d8:	6026      	str	r6, [r4, #0]
 800c2da:	464e      	mov	r6, r9
 800c2dc:	6165      	str	r5, [r4, #20]
 800c2de:	1bed      	subs	r5, r5, r7
 800c2e0:	60a5      	str	r5, [r4, #8]
 800c2e2:	454e      	cmp	r6, r9
 800c2e4:	d900      	bls.n	800c2e8 <__ssputs_r+0x84>
 800c2e6:	464e      	mov	r6, r9
 800c2e8:	4632      	mov	r2, r6
 800c2ea:	4641      	mov	r1, r8
 800c2ec:	6820      	ldr	r0, [r4, #0]
 800c2ee:	f000 faac 	bl	800c84a <memmove>
 800c2f2:	68a3      	ldr	r3, [r4, #8]
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	1b9b      	subs	r3, r3, r6
 800c2f8:	60a3      	str	r3, [r4, #8]
 800c2fa:	6823      	ldr	r3, [r4, #0]
 800c2fc:	441e      	add	r6, r3
 800c2fe:	6026      	str	r6, [r4, #0]
 800c300:	e7dc      	b.n	800c2bc <__ssputs_r+0x58>
 800c302:	462a      	mov	r2, r5
 800c304:	f000 fb60 	bl	800c9c8 <_realloc_r>
 800c308:	4606      	mov	r6, r0
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d1e2      	bne.n	800c2d4 <__ssputs_r+0x70>
 800c30e:	6921      	ldr	r1, [r4, #16]
 800c310:	4650      	mov	r0, sl
 800c312:	f000 fab3 	bl	800c87c <_free_r>
 800c316:	e7c8      	b.n	800c2aa <__ssputs_r+0x46>

0800c318 <_svfiprintf_r>:
 800c318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c31c:	461d      	mov	r5, r3
 800c31e:	898b      	ldrh	r3, [r1, #12]
 800c320:	b09d      	sub	sp, #116	; 0x74
 800c322:	061f      	lsls	r7, r3, #24
 800c324:	4680      	mov	r8, r0
 800c326:	460c      	mov	r4, r1
 800c328:	4616      	mov	r6, r2
 800c32a:	d50f      	bpl.n	800c34c <_svfiprintf_r+0x34>
 800c32c:	690b      	ldr	r3, [r1, #16]
 800c32e:	b96b      	cbnz	r3, 800c34c <_svfiprintf_r+0x34>
 800c330:	2140      	movs	r1, #64	; 0x40
 800c332:	f000 faef 	bl	800c914 <_malloc_r>
 800c336:	6020      	str	r0, [r4, #0]
 800c338:	6120      	str	r0, [r4, #16]
 800c33a:	b928      	cbnz	r0, 800c348 <_svfiprintf_r+0x30>
 800c33c:	230c      	movs	r3, #12
 800c33e:	f8c8 3000 	str.w	r3, [r8]
 800c342:	f04f 30ff 	mov.w	r0, #4294967295
 800c346:	e0c8      	b.n	800c4da <_svfiprintf_r+0x1c2>
 800c348:	2340      	movs	r3, #64	; 0x40
 800c34a:	6163      	str	r3, [r4, #20]
 800c34c:	2300      	movs	r3, #0
 800c34e:	9309      	str	r3, [sp, #36]	; 0x24
 800c350:	2320      	movs	r3, #32
 800c352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c356:	2330      	movs	r3, #48	; 0x30
 800c358:	f04f 0b01 	mov.w	fp, #1
 800c35c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c360:	9503      	str	r5, [sp, #12]
 800c362:	4637      	mov	r7, r6
 800c364:	463d      	mov	r5, r7
 800c366:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c36a:	b10b      	cbz	r3, 800c370 <_svfiprintf_r+0x58>
 800c36c:	2b25      	cmp	r3, #37	; 0x25
 800c36e:	d13e      	bne.n	800c3ee <_svfiprintf_r+0xd6>
 800c370:	ebb7 0a06 	subs.w	sl, r7, r6
 800c374:	d00b      	beq.n	800c38e <_svfiprintf_r+0x76>
 800c376:	4653      	mov	r3, sl
 800c378:	4632      	mov	r2, r6
 800c37a:	4621      	mov	r1, r4
 800c37c:	4640      	mov	r0, r8
 800c37e:	f7ff ff71 	bl	800c264 <__ssputs_r>
 800c382:	3001      	adds	r0, #1
 800c384:	f000 80a4 	beq.w	800c4d0 <_svfiprintf_r+0x1b8>
 800c388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c38a:	4453      	add	r3, sl
 800c38c:	9309      	str	r3, [sp, #36]	; 0x24
 800c38e:	783b      	ldrb	r3, [r7, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	f000 809d 	beq.w	800c4d0 <_svfiprintf_r+0x1b8>
 800c396:	2300      	movs	r3, #0
 800c398:	f04f 32ff 	mov.w	r2, #4294967295
 800c39c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3a0:	9304      	str	r3, [sp, #16]
 800c3a2:	9307      	str	r3, [sp, #28]
 800c3a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3a8:	931a      	str	r3, [sp, #104]	; 0x68
 800c3aa:	462f      	mov	r7, r5
 800c3ac:	2205      	movs	r2, #5
 800c3ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c3b2:	4850      	ldr	r0, [pc, #320]	; (800c4f4 <_svfiprintf_r+0x1dc>)
 800c3b4:	f000 fa30 	bl	800c818 <memchr>
 800c3b8:	9b04      	ldr	r3, [sp, #16]
 800c3ba:	b9d0      	cbnz	r0, 800c3f2 <_svfiprintf_r+0xda>
 800c3bc:	06d9      	lsls	r1, r3, #27
 800c3be:	bf44      	itt	mi
 800c3c0:	2220      	movmi	r2, #32
 800c3c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c3c6:	071a      	lsls	r2, r3, #28
 800c3c8:	bf44      	itt	mi
 800c3ca:	222b      	movmi	r2, #43	; 0x2b
 800c3cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c3d0:	782a      	ldrb	r2, [r5, #0]
 800c3d2:	2a2a      	cmp	r2, #42	; 0x2a
 800c3d4:	d015      	beq.n	800c402 <_svfiprintf_r+0xea>
 800c3d6:	462f      	mov	r7, r5
 800c3d8:	2000      	movs	r0, #0
 800c3da:	250a      	movs	r5, #10
 800c3dc:	9a07      	ldr	r2, [sp, #28]
 800c3de:	4639      	mov	r1, r7
 800c3e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3e4:	3b30      	subs	r3, #48	; 0x30
 800c3e6:	2b09      	cmp	r3, #9
 800c3e8:	d94d      	bls.n	800c486 <_svfiprintf_r+0x16e>
 800c3ea:	b1b8      	cbz	r0, 800c41c <_svfiprintf_r+0x104>
 800c3ec:	e00f      	b.n	800c40e <_svfiprintf_r+0xf6>
 800c3ee:	462f      	mov	r7, r5
 800c3f0:	e7b8      	b.n	800c364 <_svfiprintf_r+0x4c>
 800c3f2:	4a40      	ldr	r2, [pc, #256]	; (800c4f4 <_svfiprintf_r+0x1dc>)
 800c3f4:	463d      	mov	r5, r7
 800c3f6:	1a80      	subs	r0, r0, r2
 800c3f8:	fa0b f000 	lsl.w	r0, fp, r0
 800c3fc:	4318      	orrs	r0, r3
 800c3fe:	9004      	str	r0, [sp, #16]
 800c400:	e7d3      	b.n	800c3aa <_svfiprintf_r+0x92>
 800c402:	9a03      	ldr	r2, [sp, #12]
 800c404:	1d11      	adds	r1, r2, #4
 800c406:	6812      	ldr	r2, [r2, #0]
 800c408:	9103      	str	r1, [sp, #12]
 800c40a:	2a00      	cmp	r2, #0
 800c40c:	db01      	blt.n	800c412 <_svfiprintf_r+0xfa>
 800c40e:	9207      	str	r2, [sp, #28]
 800c410:	e004      	b.n	800c41c <_svfiprintf_r+0x104>
 800c412:	4252      	negs	r2, r2
 800c414:	f043 0302 	orr.w	r3, r3, #2
 800c418:	9207      	str	r2, [sp, #28]
 800c41a:	9304      	str	r3, [sp, #16]
 800c41c:	783b      	ldrb	r3, [r7, #0]
 800c41e:	2b2e      	cmp	r3, #46	; 0x2e
 800c420:	d10c      	bne.n	800c43c <_svfiprintf_r+0x124>
 800c422:	787b      	ldrb	r3, [r7, #1]
 800c424:	2b2a      	cmp	r3, #42	; 0x2a
 800c426:	d133      	bne.n	800c490 <_svfiprintf_r+0x178>
 800c428:	9b03      	ldr	r3, [sp, #12]
 800c42a:	3702      	adds	r7, #2
 800c42c:	1d1a      	adds	r2, r3, #4
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	9203      	str	r2, [sp, #12]
 800c432:	2b00      	cmp	r3, #0
 800c434:	bfb8      	it	lt
 800c436:	f04f 33ff 	movlt.w	r3, #4294967295
 800c43a:	9305      	str	r3, [sp, #20]
 800c43c:	4d2e      	ldr	r5, [pc, #184]	; (800c4f8 <_svfiprintf_r+0x1e0>)
 800c43e:	2203      	movs	r2, #3
 800c440:	7839      	ldrb	r1, [r7, #0]
 800c442:	4628      	mov	r0, r5
 800c444:	f000 f9e8 	bl	800c818 <memchr>
 800c448:	b138      	cbz	r0, 800c45a <_svfiprintf_r+0x142>
 800c44a:	2340      	movs	r3, #64	; 0x40
 800c44c:	1b40      	subs	r0, r0, r5
 800c44e:	fa03 f000 	lsl.w	r0, r3, r0
 800c452:	9b04      	ldr	r3, [sp, #16]
 800c454:	3701      	adds	r7, #1
 800c456:	4303      	orrs	r3, r0
 800c458:	9304      	str	r3, [sp, #16]
 800c45a:	7839      	ldrb	r1, [r7, #0]
 800c45c:	2206      	movs	r2, #6
 800c45e:	4827      	ldr	r0, [pc, #156]	; (800c4fc <_svfiprintf_r+0x1e4>)
 800c460:	1c7e      	adds	r6, r7, #1
 800c462:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c466:	f000 f9d7 	bl	800c818 <memchr>
 800c46a:	2800      	cmp	r0, #0
 800c46c:	d038      	beq.n	800c4e0 <_svfiprintf_r+0x1c8>
 800c46e:	4b24      	ldr	r3, [pc, #144]	; (800c500 <_svfiprintf_r+0x1e8>)
 800c470:	bb13      	cbnz	r3, 800c4b8 <_svfiprintf_r+0x1a0>
 800c472:	9b03      	ldr	r3, [sp, #12]
 800c474:	3307      	adds	r3, #7
 800c476:	f023 0307 	bic.w	r3, r3, #7
 800c47a:	3308      	adds	r3, #8
 800c47c:	9303      	str	r3, [sp, #12]
 800c47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c480:	444b      	add	r3, r9
 800c482:	9309      	str	r3, [sp, #36]	; 0x24
 800c484:	e76d      	b.n	800c362 <_svfiprintf_r+0x4a>
 800c486:	fb05 3202 	mla	r2, r5, r2, r3
 800c48a:	2001      	movs	r0, #1
 800c48c:	460f      	mov	r7, r1
 800c48e:	e7a6      	b.n	800c3de <_svfiprintf_r+0xc6>
 800c490:	2300      	movs	r3, #0
 800c492:	250a      	movs	r5, #10
 800c494:	4619      	mov	r1, r3
 800c496:	3701      	adds	r7, #1
 800c498:	9305      	str	r3, [sp, #20]
 800c49a:	4638      	mov	r0, r7
 800c49c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4a0:	3a30      	subs	r2, #48	; 0x30
 800c4a2:	2a09      	cmp	r2, #9
 800c4a4:	d903      	bls.n	800c4ae <_svfiprintf_r+0x196>
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d0c8      	beq.n	800c43c <_svfiprintf_r+0x124>
 800c4aa:	9105      	str	r1, [sp, #20]
 800c4ac:	e7c6      	b.n	800c43c <_svfiprintf_r+0x124>
 800c4ae:	fb05 2101 	mla	r1, r5, r1, r2
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	4607      	mov	r7, r0
 800c4b6:	e7f0      	b.n	800c49a <_svfiprintf_r+0x182>
 800c4b8:	ab03      	add	r3, sp, #12
 800c4ba:	9300      	str	r3, [sp, #0]
 800c4bc:	4622      	mov	r2, r4
 800c4be:	4b11      	ldr	r3, [pc, #68]	; (800c504 <_svfiprintf_r+0x1ec>)
 800c4c0:	a904      	add	r1, sp, #16
 800c4c2:	4640      	mov	r0, r8
 800c4c4:	f3af 8000 	nop.w
 800c4c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c4cc:	4681      	mov	r9, r0
 800c4ce:	d1d6      	bne.n	800c47e <_svfiprintf_r+0x166>
 800c4d0:	89a3      	ldrh	r3, [r4, #12]
 800c4d2:	065b      	lsls	r3, r3, #25
 800c4d4:	f53f af35 	bmi.w	800c342 <_svfiprintf_r+0x2a>
 800c4d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4da:	b01d      	add	sp, #116	; 0x74
 800c4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e0:	ab03      	add	r3, sp, #12
 800c4e2:	9300      	str	r3, [sp, #0]
 800c4e4:	4622      	mov	r2, r4
 800c4e6:	4b07      	ldr	r3, [pc, #28]	; (800c504 <_svfiprintf_r+0x1ec>)
 800c4e8:	a904      	add	r1, sp, #16
 800c4ea:	4640      	mov	r0, r8
 800c4ec:	f000 f882 	bl	800c5f4 <_printf_i>
 800c4f0:	e7ea      	b.n	800c4c8 <_svfiprintf_r+0x1b0>
 800c4f2:	bf00      	nop
 800c4f4:	0800cdb0 	.word	0x0800cdb0
 800c4f8:	0800cdb6 	.word	0x0800cdb6
 800c4fc:	0800cdba 	.word	0x0800cdba
 800c500:	00000000 	.word	0x00000000
 800c504:	0800c265 	.word	0x0800c265

0800c508 <_printf_common>:
 800c508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c50c:	4691      	mov	r9, r2
 800c50e:	461f      	mov	r7, r3
 800c510:	688a      	ldr	r2, [r1, #8]
 800c512:	690b      	ldr	r3, [r1, #16]
 800c514:	4606      	mov	r6, r0
 800c516:	4293      	cmp	r3, r2
 800c518:	bfb8      	it	lt
 800c51a:	4613      	movlt	r3, r2
 800c51c:	f8c9 3000 	str.w	r3, [r9]
 800c520:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c524:	460c      	mov	r4, r1
 800c526:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c52a:	b112      	cbz	r2, 800c532 <_printf_common+0x2a>
 800c52c:	3301      	adds	r3, #1
 800c52e:	f8c9 3000 	str.w	r3, [r9]
 800c532:	6823      	ldr	r3, [r4, #0]
 800c534:	0699      	lsls	r1, r3, #26
 800c536:	bf42      	ittt	mi
 800c538:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c53c:	3302      	addmi	r3, #2
 800c53e:	f8c9 3000 	strmi.w	r3, [r9]
 800c542:	6825      	ldr	r5, [r4, #0]
 800c544:	f015 0506 	ands.w	r5, r5, #6
 800c548:	d107      	bne.n	800c55a <_printf_common+0x52>
 800c54a:	f104 0a19 	add.w	sl, r4, #25
 800c54e:	68e3      	ldr	r3, [r4, #12]
 800c550:	f8d9 2000 	ldr.w	r2, [r9]
 800c554:	1a9b      	subs	r3, r3, r2
 800c556:	42ab      	cmp	r3, r5
 800c558:	dc29      	bgt.n	800c5ae <_printf_common+0xa6>
 800c55a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c55e:	6822      	ldr	r2, [r4, #0]
 800c560:	3300      	adds	r3, #0
 800c562:	bf18      	it	ne
 800c564:	2301      	movne	r3, #1
 800c566:	0692      	lsls	r2, r2, #26
 800c568:	d42e      	bmi.n	800c5c8 <_printf_common+0xc0>
 800c56a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c56e:	4639      	mov	r1, r7
 800c570:	4630      	mov	r0, r6
 800c572:	47c0      	blx	r8
 800c574:	3001      	adds	r0, #1
 800c576:	d021      	beq.n	800c5bc <_printf_common+0xb4>
 800c578:	6823      	ldr	r3, [r4, #0]
 800c57a:	68e5      	ldr	r5, [r4, #12]
 800c57c:	f003 0306 	and.w	r3, r3, #6
 800c580:	2b04      	cmp	r3, #4
 800c582:	bf18      	it	ne
 800c584:	2500      	movne	r5, #0
 800c586:	f8d9 2000 	ldr.w	r2, [r9]
 800c58a:	f04f 0900 	mov.w	r9, #0
 800c58e:	bf08      	it	eq
 800c590:	1aad      	subeq	r5, r5, r2
 800c592:	68a3      	ldr	r3, [r4, #8]
 800c594:	6922      	ldr	r2, [r4, #16]
 800c596:	bf08      	it	eq
 800c598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c59c:	4293      	cmp	r3, r2
 800c59e:	bfc4      	itt	gt
 800c5a0:	1a9b      	subgt	r3, r3, r2
 800c5a2:	18ed      	addgt	r5, r5, r3
 800c5a4:	341a      	adds	r4, #26
 800c5a6:	454d      	cmp	r5, r9
 800c5a8:	d11a      	bne.n	800c5e0 <_printf_common+0xd8>
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	e008      	b.n	800c5c0 <_printf_common+0xb8>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	4652      	mov	r2, sl
 800c5b2:	4639      	mov	r1, r7
 800c5b4:	4630      	mov	r0, r6
 800c5b6:	47c0      	blx	r8
 800c5b8:	3001      	adds	r0, #1
 800c5ba:	d103      	bne.n	800c5c4 <_printf_common+0xbc>
 800c5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5c4:	3501      	adds	r5, #1
 800c5c6:	e7c2      	b.n	800c54e <_printf_common+0x46>
 800c5c8:	2030      	movs	r0, #48	; 0x30
 800c5ca:	18e1      	adds	r1, r4, r3
 800c5cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c5d0:	1c5a      	adds	r2, r3, #1
 800c5d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c5d6:	4422      	add	r2, r4
 800c5d8:	3302      	adds	r3, #2
 800c5da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c5de:	e7c4      	b.n	800c56a <_printf_common+0x62>
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	4622      	mov	r2, r4
 800c5e4:	4639      	mov	r1, r7
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	47c0      	blx	r8
 800c5ea:	3001      	adds	r0, #1
 800c5ec:	d0e6      	beq.n	800c5bc <_printf_common+0xb4>
 800c5ee:	f109 0901 	add.w	r9, r9, #1
 800c5f2:	e7d8      	b.n	800c5a6 <_printf_common+0x9e>

0800c5f4 <_printf_i>:
 800c5f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c5fc:	460c      	mov	r4, r1
 800c5fe:	7e09      	ldrb	r1, [r1, #24]
 800c600:	b085      	sub	sp, #20
 800c602:	296e      	cmp	r1, #110	; 0x6e
 800c604:	4617      	mov	r7, r2
 800c606:	4606      	mov	r6, r0
 800c608:	4698      	mov	r8, r3
 800c60a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c60c:	f000 80b3 	beq.w	800c776 <_printf_i+0x182>
 800c610:	d822      	bhi.n	800c658 <_printf_i+0x64>
 800c612:	2963      	cmp	r1, #99	; 0x63
 800c614:	d036      	beq.n	800c684 <_printf_i+0x90>
 800c616:	d80a      	bhi.n	800c62e <_printf_i+0x3a>
 800c618:	2900      	cmp	r1, #0
 800c61a:	f000 80b9 	beq.w	800c790 <_printf_i+0x19c>
 800c61e:	2958      	cmp	r1, #88	; 0x58
 800c620:	f000 8083 	beq.w	800c72a <_printf_i+0x136>
 800c624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c628:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c62c:	e032      	b.n	800c694 <_printf_i+0xa0>
 800c62e:	2964      	cmp	r1, #100	; 0x64
 800c630:	d001      	beq.n	800c636 <_printf_i+0x42>
 800c632:	2969      	cmp	r1, #105	; 0x69
 800c634:	d1f6      	bne.n	800c624 <_printf_i+0x30>
 800c636:	6820      	ldr	r0, [r4, #0]
 800c638:	6813      	ldr	r3, [r2, #0]
 800c63a:	0605      	lsls	r5, r0, #24
 800c63c:	f103 0104 	add.w	r1, r3, #4
 800c640:	d52a      	bpl.n	800c698 <_printf_i+0xa4>
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	6011      	str	r1, [r2, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	da03      	bge.n	800c652 <_printf_i+0x5e>
 800c64a:	222d      	movs	r2, #45	; 0x2d
 800c64c:	425b      	negs	r3, r3
 800c64e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c652:	486f      	ldr	r0, [pc, #444]	; (800c810 <_printf_i+0x21c>)
 800c654:	220a      	movs	r2, #10
 800c656:	e039      	b.n	800c6cc <_printf_i+0xd8>
 800c658:	2973      	cmp	r1, #115	; 0x73
 800c65a:	f000 809d 	beq.w	800c798 <_printf_i+0x1a4>
 800c65e:	d808      	bhi.n	800c672 <_printf_i+0x7e>
 800c660:	296f      	cmp	r1, #111	; 0x6f
 800c662:	d020      	beq.n	800c6a6 <_printf_i+0xb2>
 800c664:	2970      	cmp	r1, #112	; 0x70
 800c666:	d1dd      	bne.n	800c624 <_printf_i+0x30>
 800c668:	6823      	ldr	r3, [r4, #0]
 800c66a:	f043 0320 	orr.w	r3, r3, #32
 800c66e:	6023      	str	r3, [r4, #0]
 800c670:	e003      	b.n	800c67a <_printf_i+0x86>
 800c672:	2975      	cmp	r1, #117	; 0x75
 800c674:	d017      	beq.n	800c6a6 <_printf_i+0xb2>
 800c676:	2978      	cmp	r1, #120	; 0x78
 800c678:	d1d4      	bne.n	800c624 <_printf_i+0x30>
 800c67a:	2378      	movs	r3, #120	; 0x78
 800c67c:	4865      	ldr	r0, [pc, #404]	; (800c814 <_printf_i+0x220>)
 800c67e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c682:	e055      	b.n	800c730 <_printf_i+0x13c>
 800c684:	6813      	ldr	r3, [r2, #0]
 800c686:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c68a:	1d19      	adds	r1, r3, #4
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	6011      	str	r1, [r2, #0]
 800c690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c694:	2301      	movs	r3, #1
 800c696:	e08c      	b.n	800c7b2 <_printf_i+0x1be>
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c69e:	6011      	str	r1, [r2, #0]
 800c6a0:	bf18      	it	ne
 800c6a2:	b21b      	sxthne	r3, r3
 800c6a4:	e7cf      	b.n	800c646 <_printf_i+0x52>
 800c6a6:	6813      	ldr	r3, [r2, #0]
 800c6a8:	6825      	ldr	r5, [r4, #0]
 800c6aa:	1d18      	adds	r0, r3, #4
 800c6ac:	6010      	str	r0, [r2, #0]
 800c6ae:	0628      	lsls	r0, r5, #24
 800c6b0:	d501      	bpl.n	800c6b6 <_printf_i+0xc2>
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	e002      	b.n	800c6bc <_printf_i+0xc8>
 800c6b6:	0668      	lsls	r0, r5, #25
 800c6b8:	d5fb      	bpl.n	800c6b2 <_printf_i+0xbe>
 800c6ba:	881b      	ldrh	r3, [r3, #0]
 800c6bc:	296f      	cmp	r1, #111	; 0x6f
 800c6be:	bf14      	ite	ne
 800c6c0:	220a      	movne	r2, #10
 800c6c2:	2208      	moveq	r2, #8
 800c6c4:	4852      	ldr	r0, [pc, #328]	; (800c810 <_printf_i+0x21c>)
 800c6c6:	2100      	movs	r1, #0
 800c6c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6cc:	6865      	ldr	r5, [r4, #4]
 800c6ce:	2d00      	cmp	r5, #0
 800c6d0:	60a5      	str	r5, [r4, #8]
 800c6d2:	f2c0 8095 	blt.w	800c800 <_printf_i+0x20c>
 800c6d6:	6821      	ldr	r1, [r4, #0]
 800c6d8:	f021 0104 	bic.w	r1, r1, #4
 800c6dc:	6021      	str	r1, [r4, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d13d      	bne.n	800c75e <_printf_i+0x16a>
 800c6e2:	2d00      	cmp	r5, #0
 800c6e4:	f040 808e 	bne.w	800c804 <_printf_i+0x210>
 800c6e8:	4665      	mov	r5, ip
 800c6ea:	2a08      	cmp	r2, #8
 800c6ec:	d10b      	bne.n	800c706 <_printf_i+0x112>
 800c6ee:	6823      	ldr	r3, [r4, #0]
 800c6f0:	07db      	lsls	r3, r3, #31
 800c6f2:	d508      	bpl.n	800c706 <_printf_i+0x112>
 800c6f4:	6923      	ldr	r3, [r4, #16]
 800c6f6:	6862      	ldr	r2, [r4, #4]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	bfde      	ittt	le
 800c6fc:	2330      	movle	r3, #48	; 0x30
 800c6fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c702:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c706:	ebac 0305 	sub.w	r3, ip, r5
 800c70a:	6123      	str	r3, [r4, #16]
 800c70c:	f8cd 8000 	str.w	r8, [sp]
 800c710:	463b      	mov	r3, r7
 800c712:	aa03      	add	r2, sp, #12
 800c714:	4621      	mov	r1, r4
 800c716:	4630      	mov	r0, r6
 800c718:	f7ff fef6 	bl	800c508 <_printf_common>
 800c71c:	3001      	adds	r0, #1
 800c71e:	d14d      	bne.n	800c7bc <_printf_i+0x1c8>
 800c720:	f04f 30ff 	mov.w	r0, #4294967295
 800c724:	b005      	add	sp, #20
 800c726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c72a:	4839      	ldr	r0, [pc, #228]	; (800c810 <_printf_i+0x21c>)
 800c72c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c730:	6813      	ldr	r3, [r2, #0]
 800c732:	6821      	ldr	r1, [r4, #0]
 800c734:	1d1d      	adds	r5, r3, #4
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	6015      	str	r5, [r2, #0]
 800c73a:	060a      	lsls	r2, r1, #24
 800c73c:	d50b      	bpl.n	800c756 <_printf_i+0x162>
 800c73e:	07ca      	lsls	r2, r1, #31
 800c740:	bf44      	itt	mi
 800c742:	f041 0120 	orrmi.w	r1, r1, #32
 800c746:	6021      	strmi	r1, [r4, #0]
 800c748:	b91b      	cbnz	r3, 800c752 <_printf_i+0x15e>
 800c74a:	6822      	ldr	r2, [r4, #0]
 800c74c:	f022 0220 	bic.w	r2, r2, #32
 800c750:	6022      	str	r2, [r4, #0]
 800c752:	2210      	movs	r2, #16
 800c754:	e7b7      	b.n	800c6c6 <_printf_i+0xd2>
 800c756:	064d      	lsls	r5, r1, #25
 800c758:	bf48      	it	mi
 800c75a:	b29b      	uxthmi	r3, r3
 800c75c:	e7ef      	b.n	800c73e <_printf_i+0x14a>
 800c75e:	4665      	mov	r5, ip
 800c760:	fbb3 f1f2 	udiv	r1, r3, r2
 800c764:	fb02 3311 	mls	r3, r2, r1, r3
 800c768:	5cc3      	ldrb	r3, [r0, r3]
 800c76a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c76e:	460b      	mov	r3, r1
 800c770:	2900      	cmp	r1, #0
 800c772:	d1f5      	bne.n	800c760 <_printf_i+0x16c>
 800c774:	e7b9      	b.n	800c6ea <_printf_i+0xf6>
 800c776:	6813      	ldr	r3, [r2, #0]
 800c778:	6825      	ldr	r5, [r4, #0]
 800c77a:	1d18      	adds	r0, r3, #4
 800c77c:	6961      	ldr	r1, [r4, #20]
 800c77e:	6010      	str	r0, [r2, #0]
 800c780:	0628      	lsls	r0, r5, #24
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	d501      	bpl.n	800c78a <_printf_i+0x196>
 800c786:	6019      	str	r1, [r3, #0]
 800c788:	e002      	b.n	800c790 <_printf_i+0x19c>
 800c78a:	066a      	lsls	r2, r5, #25
 800c78c:	d5fb      	bpl.n	800c786 <_printf_i+0x192>
 800c78e:	8019      	strh	r1, [r3, #0]
 800c790:	2300      	movs	r3, #0
 800c792:	4665      	mov	r5, ip
 800c794:	6123      	str	r3, [r4, #16]
 800c796:	e7b9      	b.n	800c70c <_printf_i+0x118>
 800c798:	6813      	ldr	r3, [r2, #0]
 800c79a:	1d19      	adds	r1, r3, #4
 800c79c:	6011      	str	r1, [r2, #0]
 800c79e:	681d      	ldr	r5, [r3, #0]
 800c7a0:	6862      	ldr	r2, [r4, #4]
 800c7a2:	2100      	movs	r1, #0
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	f000 f837 	bl	800c818 <memchr>
 800c7aa:	b108      	cbz	r0, 800c7b0 <_printf_i+0x1bc>
 800c7ac:	1b40      	subs	r0, r0, r5
 800c7ae:	6060      	str	r0, [r4, #4]
 800c7b0:	6863      	ldr	r3, [r4, #4]
 800c7b2:	6123      	str	r3, [r4, #16]
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7ba:	e7a7      	b.n	800c70c <_printf_i+0x118>
 800c7bc:	6923      	ldr	r3, [r4, #16]
 800c7be:	462a      	mov	r2, r5
 800c7c0:	4639      	mov	r1, r7
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	47c0      	blx	r8
 800c7c6:	3001      	adds	r0, #1
 800c7c8:	d0aa      	beq.n	800c720 <_printf_i+0x12c>
 800c7ca:	6823      	ldr	r3, [r4, #0]
 800c7cc:	079b      	lsls	r3, r3, #30
 800c7ce:	d413      	bmi.n	800c7f8 <_printf_i+0x204>
 800c7d0:	68e0      	ldr	r0, [r4, #12]
 800c7d2:	9b03      	ldr	r3, [sp, #12]
 800c7d4:	4298      	cmp	r0, r3
 800c7d6:	bfb8      	it	lt
 800c7d8:	4618      	movlt	r0, r3
 800c7da:	e7a3      	b.n	800c724 <_printf_i+0x130>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	464a      	mov	r2, r9
 800c7e0:	4639      	mov	r1, r7
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	47c0      	blx	r8
 800c7e6:	3001      	adds	r0, #1
 800c7e8:	d09a      	beq.n	800c720 <_printf_i+0x12c>
 800c7ea:	3501      	adds	r5, #1
 800c7ec:	68e3      	ldr	r3, [r4, #12]
 800c7ee:	9a03      	ldr	r2, [sp, #12]
 800c7f0:	1a9b      	subs	r3, r3, r2
 800c7f2:	42ab      	cmp	r3, r5
 800c7f4:	dcf2      	bgt.n	800c7dc <_printf_i+0x1e8>
 800c7f6:	e7eb      	b.n	800c7d0 <_printf_i+0x1dc>
 800c7f8:	2500      	movs	r5, #0
 800c7fa:	f104 0919 	add.w	r9, r4, #25
 800c7fe:	e7f5      	b.n	800c7ec <_printf_i+0x1f8>
 800c800:	2b00      	cmp	r3, #0
 800c802:	d1ac      	bne.n	800c75e <_printf_i+0x16a>
 800c804:	7803      	ldrb	r3, [r0, #0]
 800c806:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c80a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c80e:	e76c      	b.n	800c6ea <_printf_i+0xf6>
 800c810:	0800cdc1 	.word	0x0800cdc1
 800c814:	0800cdd2 	.word	0x0800cdd2

0800c818 <memchr>:
 800c818:	b510      	push	{r4, lr}
 800c81a:	b2c9      	uxtb	r1, r1
 800c81c:	4402      	add	r2, r0
 800c81e:	4290      	cmp	r0, r2
 800c820:	4603      	mov	r3, r0
 800c822:	d101      	bne.n	800c828 <memchr+0x10>
 800c824:	2300      	movs	r3, #0
 800c826:	e003      	b.n	800c830 <memchr+0x18>
 800c828:	781c      	ldrb	r4, [r3, #0]
 800c82a:	3001      	adds	r0, #1
 800c82c:	428c      	cmp	r4, r1
 800c82e:	d1f6      	bne.n	800c81e <memchr+0x6>
 800c830:	4618      	mov	r0, r3
 800c832:	bd10      	pop	{r4, pc}

0800c834 <memcpy>:
 800c834:	b510      	push	{r4, lr}
 800c836:	1e43      	subs	r3, r0, #1
 800c838:	440a      	add	r2, r1
 800c83a:	4291      	cmp	r1, r2
 800c83c:	d100      	bne.n	800c840 <memcpy+0xc>
 800c83e:	bd10      	pop	{r4, pc}
 800c840:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c844:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c848:	e7f7      	b.n	800c83a <memcpy+0x6>

0800c84a <memmove>:
 800c84a:	4288      	cmp	r0, r1
 800c84c:	b510      	push	{r4, lr}
 800c84e:	eb01 0302 	add.w	r3, r1, r2
 800c852:	d807      	bhi.n	800c864 <memmove+0x1a>
 800c854:	1e42      	subs	r2, r0, #1
 800c856:	4299      	cmp	r1, r3
 800c858:	d00a      	beq.n	800c870 <memmove+0x26>
 800c85a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c85e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c862:	e7f8      	b.n	800c856 <memmove+0xc>
 800c864:	4283      	cmp	r3, r0
 800c866:	d9f5      	bls.n	800c854 <memmove+0xa>
 800c868:	1881      	adds	r1, r0, r2
 800c86a:	1ad2      	subs	r2, r2, r3
 800c86c:	42d3      	cmn	r3, r2
 800c86e:	d100      	bne.n	800c872 <memmove+0x28>
 800c870:	bd10      	pop	{r4, pc}
 800c872:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c876:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c87a:	e7f7      	b.n	800c86c <memmove+0x22>

0800c87c <_free_r>:
 800c87c:	b538      	push	{r3, r4, r5, lr}
 800c87e:	4605      	mov	r5, r0
 800c880:	2900      	cmp	r1, #0
 800c882:	d043      	beq.n	800c90c <_free_r+0x90>
 800c884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c888:	1f0c      	subs	r4, r1, #4
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	bfb8      	it	lt
 800c88e:	18e4      	addlt	r4, r4, r3
 800c890:	f000 f8d0 	bl	800ca34 <__malloc_lock>
 800c894:	4a1e      	ldr	r2, [pc, #120]	; (800c910 <_free_r+0x94>)
 800c896:	6813      	ldr	r3, [r2, #0]
 800c898:	4610      	mov	r0, r2
 800c89a:	b933      	cbnz	r3, 800c8aa <_free_r+0x2e>
 800c89c:	6063      	str	r3, [r4, #4]
 800c89e:	6014      	str	r4, [r2, #0]
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8a6:	f000 b8c6 	b.w	800ca36 <__malloc_unlock>
 800c8aa:	42a3      	cmp	r3, r4
 800c8ac:	d90b      	bls.n	800c8c6 <_free_r+0x4a>
 800c8ae:	6821      	ldr	r1, [r4, #0]
 800c8b0:	1862      	adds	r2, r4, r1
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	bf01      	itttt	eq
 800c8b6:	681a      	ldreq	r2, [r3, #0]
 800c8b8:	685b      	ldreq	r3, [r3, #4]
 800c8ba:	1852      	addeq	r2, r2, r1
 800c8bc:	6022      	streq	r2, [r4, #0]
 800c8be:	6063      	str	r3, [r4, #4]
 800c8c0:	6004      	str	r4, [r0, #0]
 800c8c2:	e7ed      	b.n	800c8a0 <_free_r+0x24>
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	685a      	ldr	r2, [r3, #4]
 800c8c8:	b10a      	cbz	r2, 800c8ce <_free_r+0x52>
 800c8ca:	42a2      	cmp	r2, r4
 800c8cc:	d9fa      	bls.n	800c8c4 <_free_r+0x48>
 800c8ce:	6819      	ldr	r1, [r3, #0]
 800c8d0:	1858      	adds	r0, r3, r1
 800c8d2:	42a0      	cmp	r0, r4
 800c8d4:	d10b      	bne.n	800c8ee <_free_r+0x72>
 800c8d6:	6820      	ldr	r0, [r4, #0]
 800c8d8:	4401      	add	r1, r0
 800c8da:	1858      	adds	r0, r3, r1
 800c8dc:	4282      	cmp	r2, r0
 800c8de:	6019      	str	r1, [r3, #0]
 800c8e0:	d1de      	bne.n	800c8a0 <_free_r+0x24>
 800c8e2:	6810      	ldr	r0, [r2, #0]
 800c8e4:	6852      	ldr	r2, [r2, #4]
 800c8e6:	4401      	add	r1, r0
 800c8e8:	6019      	str	r1, [r3, #0]
 800c8ea:	605a      	str	r2, [r3, #4]
 800c8ec:	e7d8      	b.n	800c8a0 <_free_r+0x24>
 800c8ee:	d902      	bls.n	800c8f6 <_free_r+0x7a>
 800c8f0:	230c      	movs	r3, #12
 800c8f2:	602b      	str	r3, [r5, #0]
 800c8f4:	e7d4      	b.n	800c8a0 <_free_r+0x24>
 800c8f6:	6820      	ldr	r0, [r4, #0]
 800c8f8:	1821      	adds	r1, r4, r0
 800c8fa:	428a      	cmp	r2, r1
 800c8fc:	bf01      	itttt	eq
 800c8fe:	6811      	ldreq	r1, [r2, #0]
 800c900:	6852      	ldreq	r2, [r2, #4]
 800c902:	1809      	addeq	r1, r1, r0
 800c904:	6021      	streq	r1, [r4, #0]
 800c906:	6062      	str	r2, [r4, #4]
 800c908:	605c      	str	r4, [r3, #4]
 800c90a:	e7c9      	b.n	800c8a0 <_free_r+0x24>
 800c90c:	bd38      	pop	{r3, r4, r5, pc}
 800c90e:	bf00      	nop
 800c910:	200005c4 	.word	0x200005c4

0800c914 <_malloc_r>:
 800c914:	b570      	push	{r4, r5, r6, lr}
 800c916:	1ccd      	adds	r5, r1, #3
 800c918:	f025 0503 	bic.w	r5, r5, #3
 800c91c:	3508      	adds	r5, #8
 800c91e:	2d0c      	cmp	r5, #12
 800c920:	bf38      	it	cc
 800c922:	250c      	movcc	r5, #12
 800c924:	2d00      	cmp	r5, #0
 800c926:	4606      	mov	r6, r0
 800c928:	db01      	blt.n	800c92e <_malloc_r+0x1a>
 800c92a:	42a9      	cmp	r1, r5
 800c92c:	d903      	bls.n	800c936 <_malloc_r+0x22>
 800c92e:	230c      	movs	r3, #12
 800c930:	6033      	str	r3, [r6, #0]
 800c932:	2000      	movs	r0, #0
 800c934:	bd70      	pop	{r4, r5, r6, pc}
 800c936:	f000 f87d 	bl	800ca34 <__malloc_lock>
 800c93a:	4a21      	ldr	r2, [pc, #132]	; (800c9c0 <_malloc_r+0xac>)
 800c93c:	6814      	ldr	r4, [r2, #0]
 800c93e:	4621      	mov	r1, r4
 800c940:	b991      	cbnz	r1, 800c968 <_malloc_r+0x54>
 800c942:	4c20      	ldr	r4, [pc, #128]	; (800c9c4 <_malloc_r+0xb0>)
 800c944:	6823      	ldr	r3, [r4, #0]
 800c946:	b91b      	cbnz	r3, 800c950 <_malloc_r+0x3c>
 800c948:	4630      	mov	r0, r6
 800c94a:	f000 f863 	bl	800ca14 <_sbrk_r>
 800c94e:	6020      	str	r0, [r4, #0]
 800c950:	4629      	mov	r1, r5
 800c952:	4630      	mov	r0, r6
 800c954:	f000 f85e 	bl	800ca14 <_sbrk_r>
 800c958:	1c43      	adds	r3, r0, #1
 800c95a:	d124      	bne.n	800c9a6 <_malloc_r+0x92>
 800c95c:	230c      	movs	r3, #12
 800c95e:	4630      	mov	r0, r6
 800c960:	6033      	str	r3, [r6, #0]
 800c962:	f000 f868 	bl	800ca36 <__malloc_unlock>
 800c966:	e7e4      	b.n	800c932 <_malloc_r+0x1e>
 800c968:	680b      	ldr	r3, [r1, #0]
 800c96a:	1b5b      	subs	r3, r3, r5
 800c96c:	d418      	bmi.n	800c9a0 <_malloc_r+0x8c>
 800c96e:	2b0b      	cmp	r3, #11
 800c970:	d90f      	bls.n	800c992 <_malloc_r+0x7e>
 800c972:	600b      	str	r3, [r1, #0]
 800c974:	18cc      	adds	r4, r1, r3
 800c976:	50cd      	str	r5, [r1, r3]
 800c978:	4630      	mov	r0, r6
 800c97a:	f000 f85c 	bl	800ca36 <__malloc_unlock>
 800c97e:	f104 000b 	add.w	r0, r4, #11
 800c982:	1d23      	adds	r3, r4, #4
 800c984:	f020 0007 	bic.w	r0, r0, #7
 800c988:	1ac3      	subs	r3, r0, r3
 800c98a:	d0d3      	beq.n	800c934 <_malloc_r+0x20>
 800c98c:	425a      	negs	r2, r3
 800c98e:	50e2      	str	r2, [r4, r3]
 800c990:	e7d0      	b.n	800c934 <_malloc_r+0x20>
 800c992:	684b      	ldr	r3, [r1, #4]
 800c994:	428c      	cmp	r4, r1
 800c996:	bf16      	itet	ne
 800c998:	6063      	strne	r3, [r4, #4]
 800c99a:	6013      	streq	r3, [r2, #0]
 800c99c:	460c      	movne	r4, r1
 800c99e:	e7eb      	b.n	800c978 <_malloc_r+0x64>
 800c9a0:	460c      	mov	r4, r1
 800c9a2:	6849      	ldr	r1, [r1, #4]
 800c9a4:	e7cc      	b.n	800c940 <_malloc_r+0x2c>
 800c9a6:	1cc4      	adds	r4, r0, #3
 800c9a8:	f024 0403 	bic.w	r4, r4, #3
 800c9ac:	42a0      	cmp	r0, r4
 800c9ae:	d005      	beq.n	800c9bc <_malloc_r+0xa8>
 800c9b0:	1a21      	subs	r1, r4, r0
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	f000 f82e 	bl	800ca14 <_sbrk_r>
 800c9b8:	3001      	adds	r0, #1
 800c9ba:	d0cf      	beq.n	800c95c <_malloc_r+0x48>
 800c9bc:	6025      	str	r5, [r4, #0]
 800c9be:	e7db      	b.n	800c978 <_malloc_r+0x64>
 800c9c0:	200005c4 	.word	0x200005c4
 800c9c4:	200005c8 	.word	0x200005c8

0800c9c8 <_realloc_r>:
 800c9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ca:	4607      	mov	r7, r0
 800c9cc:	4614      	mov	r4, r2
 800c9ce:	460e      	mov	r6, r1
 800c9d0:	b921      	cbnz	r1, 800c9dc <_realloc_r+0x14>
 800c9d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c9d6:	4611      	mov	r1, r2
 800c9d8:	f7ff bf9c 	b.w	800c914 <_malloc_r>
 800c9dc:	b922      	cbnz	r2, 800c9e8 <_realloc_r+0x20>
 800c9de:	f7ff ff4d 	bl	800c87c <_free_r>
 800c9e2:	4625      	mov	r5, r4
 800c9e4:	4628      	mov	r0, r5
 800c9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9e8:	f000 f826 	bl	800ca38 <_malloc_usable_size_r>
 800c9ec:	42a0      	cmp	r0, r4
 800c9ee:	d20f      	bcs.n	800ca10 <_realloc_r+0x48>
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	4638      	mov	r0, r7
 800c9f4:	f7ff ff8e 	bl	800c914 <_malloc_r>
 800c9f8:	4605      	mov	r5, r0
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	d0f2      	beq.n	800c9e4 <_realloc_r+0x1c>
 800c9fe:	4631      	mov	r1, r6
 800ca00:	4622      	mov	r2, r4
 800ca02:	f7ff ff17 	bl	800c834 <memcpy>
 800ca06:	4631      	mov	r1, r6
 800ca08:	4638      	mov	r0, r7
 800ca0a:	f7ff ff37 	bl	800c87c <_free_r>
 800ca0e:	e7e9      	b.n	800c9e4 <_realloc_r+0x1c>
 800ca10:	4635      	mov	r5, r6
 800ca12:	e7e7      	b.n	800c9e4 <_realloc_r+0x1c>

0800ca14 <_sbrk_r>:
 800ca14:	b538      	push	{r3, r4, r5, lr}
 800ca16:	2300      	movs	r3, #0
 800ca18:	4c05      	ldr	r4, [pc, #20]	; (800ca30 <_sbrk_r+0x1c>)
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	4608      	mov	r0, r1
 800ca1e:	6023      	str	r3, [r4, #0]
 800ca20:	f7f6 faee 	bl	8003000 <_sbrk>
 800ca24:	1c43      	adds	r3, r0, #1
 800ca26:	d102      	bne.n	800ca2e <_sbrk_r+0x1a>
 800ca28:	6823      	ldr	r3, [r4, #0]
 800ca2a:	b103      	cbz	r3, 800ca2e <_sbrk_r+0x1a>
 800ca2c:	602b      	str	r3, [r5, #0]
 800ca2e:	bd38      	pop	{r3, r4, r5, pc}
 800ca30:	20001cb8 	.word	0x20001cb8

0800ca34 <__malloc_lock>:
 800ca34:	4770      	bx	lr

0800ca36 <__malloc_unlock>:
 800ca36:	4770      	bx	lr

0800ca38 <_malloc_usable_size_r>:
 800ca38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca3c:	1f18      	subs	r0, r3, #4
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	bfbc      	itt	lt
 800ca42:	580b      	ldrlt	r3, [r1, r0]
 800ca44:	18c0      	addlt	r0, r0, r3
 800ca46:	4770      	bx	lr

0800ca48 <_init>:
 800ca48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca4a:	bf00      	nop
 800ca4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca4e:	bc08      	pop	{r3}
 800ca50:	469e      	mov	lr, r3
 800ca52:	4770      	bx	lr

0800ca54 <_fini>:
 800ca54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca56:	bf00      	nop
 800ca58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca5a:	bc08      	pop	{r3}
 800ca5c:	469e      	mov	lr, r3
 800ca5e:	4770      	bx	lr
