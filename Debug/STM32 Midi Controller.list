
STM32 Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a590  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800a69c  0800a69c  0001a69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a718  0800a718  00020194  2**0
                  CONTENTS
  4 .ARM          00000000  0800a718  0800a718  00020194  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a718  0800a718  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a718  0800a718  0001a718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a71c  0800a71c  0001a71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0800a720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000139c  20000194  0800a8b4  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001530  0800a8b4  00021530  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6eb  00000000  00000000  000201bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036ba  00000000  00000000  0003b8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c8  00000000  00000000  0003ef68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001358  00000000  00000000  00040430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b718  00000000  00000000  00041788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000138d5  00000000  00000000  0005cea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094601  00000000  00000000  00070775  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00104d76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f4  00000000  00000000  00104df4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000194 	.word	0x20000194
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a684 	.word	0x0800a684

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000198 	.word	0x20000198
 8000148:	0800a684 	.word	0x0800a684

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <DWT_Delay_Init>:
	GPIOA->BRR = (1<<7);
}

/* DWT based delay */
uint32_t DWT_Delay_Init(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000198:	4b14      	ldr	r3, [pc, #80]	; (80001ec <DWT_Delay_Init+0x58>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	4a13      	ldr	r2, [pc, #76]	; (80001ec <DWT_Delay_Init+0x58>)
 800019e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80001a2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80001a4:	4b11      	ldr	r3, [pc, #68]	; (80001ec <DWT_Delay_Init+0x58>)
 80001a6:	68db      	ldr	r3, [r3, #12]
 80001a8:	4a10      	ldr	r2, [pc, #64]	; (80001ec <DWT_Delay_Init+0x58>)
 80001aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001ae:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80001b0:	4b0f      	ldr	r3, [pc, #60]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a0e      	ldr	r2, [pc, #56]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001b6:	f023 0301 	bic.w	r3, r3, #1
 80001ba:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80001bc:	4b0c      	ldr	r3, [pc, #48]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a0b      	ldr	r2, [pc, #44]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001c2:	f043 0301 	orr.w	r3, r3, #1
 80001c6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80001c8:	4b09      	ldr	r3, [pc, #36]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80001ce:	bf00      	nop
    __ASM volatile ("NOP");
 80001d0:	bf00      	nop
    __ASM volatile ("NOP");
 80001d2:	bf00      	nop
    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80001d4:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <DWT_Delay_Init+0x5c>)
 80001d6:	685b      	ldr	r3, [r3, #4]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80001dc:	2300      	movs	r3, #0
 80001de:	e000      	b.n	80001e2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80001e0:	2301      	movs	r3, #1
    }
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000edf0 	.word	0xe000edf0
 80001f0:	e0001000 	.word	0xe0001000

080001f4 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80001fc:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <DWT_Delay_us+0x44>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000202:	f005 fd25 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8000206:	4602      	mov	r2, r0
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <DWT_Delay_us+0x48>)
 800020a:	fba3 2302 	umull	r2, r3, r3, r2
 800020e:	0c9b      	lsrs	r3, r3, #18
 8000210:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	68ba      	ldr	r2, [r7, #8]
 8000216:	fb02 f303 	mul.w	r3, r2, r3
 800021a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 800021c:	bf00      	nop
 800021e:	4b06      	ldr	r3, [pc, #24]	; (8000238 <DWT_Delay_us+0x44>)
 8000220:	685a      	ldr	r2, [r3, #4]
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	1ad2      	subs	r2, r2, r3
 8000226:	6879      	ldr	r1, [r7, #4]
 8000228:	68bb      	ldr	r3, [r7, #8]
 800022a:	1acb      	subs	r3, r1, r3
 800022c:	429a      	cmp	r2, r3
 800022e:	d3f6      	bcc.n	800021e <DWT_Delay_us+0x2a>
}
 8000230:	bf00      	nop
 8000232:	3710      	adds	r7, #16
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	e0001000 	.word	0xe0001000
 800023c:	431bde83 	.word	0x431bde83

08000240 <DWT_Delay_ms>:

__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <DWT_Delay_ms+0x40>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 800024e:	f005 fcff 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8000252:	4602      	mov	r2, r0
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <DWT_Delay_ms+0x44>)
 8000256:	fba3 2302 	umull	r2, r3, r3, r2
 800025a:	099b      	lsrs	r3, r3, #6
 800025c:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	68ba      	ldr	r2, [r7, #8]
 8000262:	fb02 f303 	mul.w	r3, r2, r3
 8000266:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8000268:	bf00      	nop
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <DWT_Delay_ms+0x40>)
 800026c:	685a      	ldr	r2, [r3, #4]
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	1ad2      	subs	r2, r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	429a      	cmp	r2, r3
 8000276:	d3f8      	bcc.n	800026a <DWT_Delay_ms+0x2a>
}
 8000278:	bf00      	nop
 800027a:	3710      	adds	r7, #16
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	e0001000 	.word	0xe0001000
 8000284:	10624dd3 	.word	0x10624dd3

08000288 <MCP23017SetPin>:



/* MCP23017 Defines */

void MCP23017SetPin(uint8_t pin, bank b, uint8_t addr){
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	71fb      	strb	r3, [r7, #7]
 8000292:	460b      	mov	r3, r1
 8000294:	71bb      	strb	r3, [r7, #6]
 8000296:	4613      	mov	r3, r2
 8000298:	717b      	strb	r3, [r7, #5]

	while(blocked); //wait for clearance
 800029a:	bf00      	nop
 800029c:	4b3f      	ldr	r3, [pc, #252]	; (800039c <MCP23017SetPin+0x114>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d1fa      	bne.n	800029c <MCP23017SetPin+0x14>
	//GPIOA->BSRR = (1<<7);

	currentIOState[b] |= (1<<pin);
 80002a6:	79bb      	ldrb	r3, [r7, #6]
 80002a8:	4a3d      	ldr	r2, [pc, #244]	; (80003a0 <MCP23017SetPin+0x118>)
 80002aa:	5cd3      	ldrb	r3, [r2, r3]
 80002ac:	b25a      	sxtb	r2, r3
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2101      	movs	r1, #1
 80002b2:	fa01 f303 	lsl.w	r3, r1, r3
 80002b6:	b25b      	sxtb	r3, r3
 80002b8:	4313      	orrs	r3, r2
 80002ba:	b25a      	sxtb	r2, r3
 80002bc:	79bb      	ldrb	r3, [r7, #6]
 80002be:	b2d1      	uxtb	r1, r2
 80002c0:	4a37      	ldr	r2, [pc, #220]	; (80003a0 <MCP23017SetPin+0x118>)
 80002c2:	54d1      	strb	r1, [r2, r3]
	//write out the new state
	//UPDATE: This messes up the BAM Driver because it causes the BAM to skip entire steps... its better just to pause TIM2
	//__disable_irq(); //the entire routine will be super duper unhappy unless this is in place


	TIM2->CR1 &= ~1; //disable BAM Driver
 80002c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ce:	f023 0301 	bic.w	r3, r3, #1
 80002d2:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 80002d4:	4b33      	ldr	r3, [pc, #204]	; (80003a4 <MCP23017SetPin+0x11c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a32      	ldr	r2, [pc, #200]	; (80003a4 <MCP23017SetPin+0x11c>)
 80002da:	f023 0301 	bic.w	r3, r3, #1
 80002de:	6013      	str	r3, [r2, #0]
	I2C2->CR1 |= (1<<8); //send start condition
 80002e0:	4b31      	ldr	r3, [pc, #196]	; (80003a8 <MCP23017SetPin+0x120>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a30      	ldr	r2, [pc, #192]	; (80003a8 <MCP23017SetPin+0x120>)
 80002e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ea:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80002ec:	bf00      	nop
 80002ee:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <MCP23017SetPin+0x120>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f9      	beq.n	80002ee <MCP23017SetPin+0x66>
	I2C2->DR = addr; //address the MCP23017
 80002fa:	4a2b      	ldr	r2, [pc, #172]	; (80003a8 <MCP23017SetPin+0x120>)
 80002fc:	797b      	ldrb	r3, [r7, #5]
 80002fe:	6113      	str	r3, [r2, #16]
	//__enable_irq(); didn't work here
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000300:	bf00      	nop
 8000302:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <MCP23017SetPin+0x120>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f003 0302 	and.w	r3, r3, #2
 800030a:	2b00      	cmp	r3, #0
 800030c:	d0f9      	beq.n	8000302 <MCP23017SetPin+0x7a>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 800030e:	bf00      	nop
 8000310:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <MCP23017SetPin+0x120>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0304 	and.w	r3, r3, #4
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f9      	beq.n	8000310 <MCP23017SetPin+0x88>

	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800031c:	bf00      	nop
 800031e:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <MCP23017SetPin+0x120>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0f9      	beq.n	800031e <MCP23017SetPin+0x96>
	if(b==A){
 800032a:	79bb      	ldrb	r3, [r7, #6]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d103      	bne.n	8000338 <MCP23017SetPin+0xb0>
		I2C2->DR = 0x14;
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <MCP23017SetPin+0x120>)
 8000332:	2214      	movs	r2, #20
 8000334:	611a      	str	r2, [r3, #16]
 8000336:	e002      	b.n	800033e <MCP23017SetPin+0xb6>
	}
	else{
		I2C2->DR = 0x15;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MCP23017SetPin+0x120>)
 800033a:	2215      	movs	r2, #21
 800033c:	611a      	str	r2, [r3, #16]
	}
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800033e:	bf00      	nop
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MCP23017SetPin+0x120>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f9      	beq.n	8000340 <MCP23017SetPin+0xb8>
	I2C2->DR = currentIOState[b]; //just pull everything low
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	4a14      	ldr	r2, [pc, #80]	; (80003a0 <MCP23017SetPin+0x118>)
 8000350:	5cd2      	ldrb	r2, [r2, r3]
 8000352:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <MCP23017SetPin+0x120>)
 8000354:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000356:	bf00      	nop
 8000358:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <MCP23017SetPin+0x120>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0f9      	beq.n	8000358 <MCP23017SetPin+0xd0>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 8000364:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <MCP23017SetPin+0x120>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <MCP23017SetPin+0x120>)
 800036a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800036e:	6013      	str	r3, [r2, #0]

	while ((I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 8000370:	bf00      	nop
 8000372:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <MCP23017SetPin+0x120>)
 8000374:	699b      	ldr	r3, [r3, #24]
	TIM2->CR1 |= 1; //enable BAM Driver
 8000376:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 8000386:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <MCP23017SetPin+0x11c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <MCP23017SetPin+0x11c>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6013      	str	r3, [r2, #0]
	//__enable_irq();
	//GPIOA->BRR = (1<<7);

}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	200001b1 	.word	0x200001b1
 80003a0:	200001d0 	.word	0x200001d0
 80003a4:	40000400 	.word	0x40000400
 80003a8:	40005800 	.word	0x40005800

080003ac <MCP23017ClearPin>:

void MCP23017ClearPin(uint8_t pin, bank b, uint8_t addr){
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
 80003b6:	460b      	mov	r3, r1
 80003b8:	71bb      	strb	r3, [r7, #6]
 80003ba:	4613      	mov	r3, r2
 80003bc:	717b      	strb	r3, [r7, #5]

	while(blocked); //wait for clearance
 80003be:	bf00      	nop
 80003c0:	4b40      	ldr	r3, [pc, #256]	; (80004c4 <MCP23017ClearPin+0x118>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d1fa      	bne.n	80003c0 <MCP23017ClearPin+0x14>
	//GPIOA->BSRR = (1<<7);

	currentIOState[b] &= ~(1<<pin);
 80003ca:	79bb      	ldrb	r3, [r7, #6]
 80003cc:	4a3e      	ldr	r2, [pc, #248]	; (80004c8 <MCP23017ClearPin+0x11c>)
 80003ce:	5cd3      	ldrb	r3, [r2, r3]
 80003d0:	b25a      	sxtb	r2, r3
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	2101      	movs	r1, #1
 80003d6:	fa01 f303 	lsl.w	r3, r1, r3
 80003da:	b25b      	sxtb	r3, r3
 80003dc:	43db      	mvns	r3, r3
 80003de:	b25b      	sxtb	r3, r3
 80003e0:	4013      	ands	r3, r2
 80003e2:	b25a      	sxtb	r2, r3
 80003e4:	79bb      	ldrb	r3, [r7, #6]
 80003e6:	b2d1      	uxtb	r1, r2
 80003e8:	4a37      	ldr	r2, [pc, #220]	; (80004c8 <MCP23017ClearPin+0x11c>)
 80003ea:	54d1      	strb	r1, [r2, r3]
	//UPDATE: This messses up the BAM Driver... I think it'll be better just to stop TIM2
	//__disable_irq(); //the entire routine will be super duper unhappy unless this is in place

	//potential issue: the other interrupts may cause this crap to fail again...

	TIM2->CR1 &= ~1; //disable BAM Driver
 80003ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003f6:	f023 0301 	bic.w	r3, r3, #1
 80003fa:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 80003fc:	4b33      	ldr	r3, [pc, #204]	; (80004cc <MCP23017ClearPin+0x120>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a32      	ldr	r2, [pc, #200]	; (80004cc <MCP23017ClearPin+0x120>)
 8000402:	f023 0301 	bic.w	r3, r3, #1
 8000406:	6013      	str	r3, [r2, #0]

	I2C2->CR1 |= (1<<8); //send start condition
 8000408:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <MCP23017ClearPin+0x124>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a30      	ldr	r2, [pc, #192]	; (80004d0 <MCP23017ClearPin+0x124>)
 800040e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000412:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 8000414:	bf00      	nop
 8000416:	4b2e      	ldr	r3, [pc, #184]	; (80004d0 <MCP23017ClearPin+0x124>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	2b00      	cmp	r3, #0
 8000420:	d0f9      	beq.n	8000416 <MCP23017ClearPin+0x6a>
	I2C2->DR = addr; //address the MCP23017
 8000422:	4a2b      	ldr	r2, [pc, #172]	; (80004d0 <MCP23017ClearPin+0x124>)
 8000424:	797b      	ldrb	r3, [r7, #5]
 8000426:	6113      	str	r3, [r2, #16]
	//__enable_irq(); didn't work here
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000428:	bf00      	nop
 800042a:	4b29      	ldr	r3, [pc, #164]	; (80004d0 <MCP23017ClearPin+0x124>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f003 0302 	and.w	r3, r3, #2
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0f9      	beq.n	800042a <MCP23017ClearPin+0x7e>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000436:	bf00      	nop
 8000438:	4b25      	ldr	r3, [pc, #148]	; (80004d0 <MCP23017ClearPin+0x124>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0304 	and.w	r3, r3, #4
 8000440:	2b00      	cmp	r3, #0
 8000442:	d0f9      	beq.n	8000438 <MCP23017ClearPin+0x8c>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000444:	bf00      	nop
 8000446:	4b22      	ldr	r3, [pc, #136]	; (80004d0 <MCP23017ClearPin+0x124>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <MCP23017ClearPin+0x9a>
	if(b==A){
 8000452:	79bb      	ldrb	r3, [r7, #6]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d103      	bne.n	8000460 <MCP23017ClearPin+0xb4>
		I2C2->DR = 0x14;
 8000458:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <MCP23017ClearPin+0x124>)
 800045a:	2214      	movs	r2, #20
 800045c:	611a      	str	r2, [r3, #16]
 800045e:	e002      	b.n	8000466 <MCP23017ClearPin+0xba>
	}
	else{
		I2C2->DR = 0x15;
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <MCP23017ClearPin+0x124>)
 8000462:	2215      	movs	r2, #21
 8000464:	611a      	str	r2, [r3, #16]
	}
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000466:	bf00      	nop
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <MCP23017ClearPin+0x124>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000470:	2b00      	cmp	r3, #0
 8000472:	d0f9      	beq.n	8000468 <MCP23017ClearPin+0xbc>
	I2C2->DR = currentIOState[b]; //just pull everything low
 8000474:	79bb      	ldrb	r3, [r7, #6]
 8000476:	4a14      	ldr	r2, [pc, #80]	; (80004c8 <MCP23017ClearPin+0x11c>)
 8000478:	5cd2      	ldrb	r2, [r2, r3]
 800047a:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <MCP23017ClearPin+0x124>)
 800047c:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800047e:	bf00      	nop
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <MCP23017ClearPin+0x124>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000488:	2b00      	cmp	r3, #0
 800048a:	d0f9      	beq.n	8000480 <MCP23017ClearPin+0xd4>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 800048c:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <MCP23017ClearPin+0x124>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a0f      	ldr	r2, [pc, #60]	; (80004d0 <MCP23017ClearPin+0x124>)
 8000492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000496:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 8000498:	bf00      	nop
 800049a:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <MCP23017ClearPin+0x124>)
 800049c:	699b      	ldr	r3, [r3, #24]
	TIM2->CR1 |= 1; //enable BAM Driver
 800049e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 80004ae:	4b07      	ldr	r3, [pc, #28]	; (80004cc <MCP23017ClearPin+0x120>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a06      	ldr	r2, [pc, #24]	; (80004cc <MCP23017ClearPin+0x120>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6013      	str	r3, [r2, #0]
	//__enable_irq();
	//GPIOA->BRR = (1<<7);

}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	200001b1 	.word	0x200001b1
 80004c8:	200001d0 	.word	0x200001d0
 80004cc:	40000400 	.word	0x40000400
 80004d0:	40005800 	.word	0x40005800

080004d4 <LEDMatrixInit>:

void LEDMatrixInit(uint8_t addr){
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004de:	b672      	cpsid	i
	//note: BTF clearing and stop generation are handled by the Event Interrupt
	__disable_irq();



	I2C1->CR1 |= (1<<8); //send start condition
 80004e0:	4b27      	ldr	r3, [pc, #156]	; (8000580 <LEDMatrixInit+0xac>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a26      	ldr	r2, [pc, #152]	; (8000580 <LEDMatrixInit+0xac>)
 80004e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ea:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 80004ec:	bf00      	nop
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <LEDMatrixInit+0xac>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f9      	beq.n	80004ee <LEDMatrixInit+0x1a>
	I2C1->DR = addr; //address the MCP23017
 80004fa:	4a21      	ldr	r2, [pc, #132]	; (8000580 <LEDMatrixInit+0xac>)
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	6113      	str	r3, [r2, #16]
	while ((I2C1->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000500:	bf00      	nop
 8000502:	4b1f      	ldr	r3, [pc, #124]	; (8000580 <LEDMatrixInit+0xac>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	f003 0302 	and.w	r3, r3, #2
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0f9      	beq.n	8000502 <LEDMatrixInit+0x2e>
	while ((I2C1->SR2 & (1<<2)) == 0); //read I2C SR2
 800050e:	bf00      	nop
 8000510:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <LEDMatrixInit+0xac>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	2b00      	cmp	r3, #0
 800051a:	d0f9      	beq.n	8000510 <LEDMatrixInit+0x3c>
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800051c:	bf00      	nop
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <LEDMatrixInit+0xac>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <LEDMatrixInit+0x4a>
	I2C1->DR = 0x00; //write to IODIR_A
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <LEDMatrixInit+0xac>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000530:	bf00      	nop
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <LEDMatrixInit+0xac>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f9      	beq.n	8000532 <LEDMatrixInit+0x5e>
	I2C1->DR = 0x00; //all outputs
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <LEDMatrixInit+0xac>)
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000544:	bf00      	nop
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <LEDMatrixInit+0xac>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0f9      	beq.n	8000546 <LEDMatrixInit+0x72>
	I2C1->DR = 0x00; //all outputs for next address which is IODIR_B
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <LEDMatrixInit+0xac>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
	while ((I2C1->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000558:	bf00      	nop
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <LEDMatrixInit+0xac>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000562:	2b00      	cmp	r3, #0
 8000564:	d0f9      	beq.n	800055a <LEDMatrixInit+0x86>
	//while ((I2C1->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C1->CR1 |= (1<<9); //send stop condition
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <LEDMatrixInit+0xac>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a05      	ldr	r2, [pc, #20]	; (8000580 <LEDMatrixInit+0xac>)
 800056c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000570:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000572:	b662      	cpsie	i
	__enable_irq();

}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40005400 	.word	0x40005400

08000584 <LEDMatrixStart>:

void LEDMatrixStart(uint8_t addr){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]

	while(blocked); //just so nothing stupid happens
 800058e:	bf00      	nop
 8000590:	4b21      	ldr	r3, [pc, #132]	; (8000618 <LEDMatrixStart+0x94>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1fa      	bne.n	8000590 <LEDMatrixStart+0xc>


	DMA1_Channel6->CMAR = (uint32_t)LEDMatrixBuffer;
 800059a:	4b20      	ldr	r3, [pc, #128]	; (800061c <LEDMatrixStart+0x98>)
 800059c:	4a20      	ldr	r2, [pc, #128]	; (8000620 <LEDMatrixStart+0x9c>)
 800059e:	60da      	str	r2, [r3, #12]
	DMA1_Channel6->CPAR = (uint32_t)&(I2C1->DR);
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <LEDMatrixStart+0x98>)
 80005a2:	4a20      	ldr	r2, [pc, #128]	; (8000624 <LEDMatrixStart+0xa0>)
 80005a4:	609a      	str	r2, [r3, #8]
	DMA1_Channel6->CNDTR = 3;
 80005a6:	4b1d      	ldr	r3, [pc, #116]	; (800061c <LEDMatrixStart+0x98>)
 80005a8:	2203      	movs	r2, #3
 80005aa:	605a      	str	r2, [r3, #4]
	DMA1_Channel6->CCR |= (0b11<<12); //High Priority
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <LEDMatrixStart+0x98>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a1a      	ldr	r2, [pc, #104]	; (800061c <LEDMatrixStart+0x98>)
 80005b2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80005b6:	6013      	str	r3, [r2, #0]
	DMA1_Channel6->CCR |= (1<<4 | 1<<7); //set MINC and Read from Memory
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <LEDMatrixStart+0x98>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a17      	ldr	r2, [pc, #92]	; (800061c <LEDMatrixStart+0x98>)
 80005be:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80005c2:	6013      	str	r3, [r2, #0]
	//DMA1_Channel6->CCR |= (1<<1); //enable transfer complete interrupt

	DMA1_Channel6->CCR |= 1; //activate DMA
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <LEDMatrixStart+0x98>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a14      	ldr	r2, [pc, #80]	; (800061c <LEDMatrixStart+0x98>)
 80005ca:	f043 0301 	orr.w	r3, r3, #1
 80005ce:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i

	__disable_irq();
	I2C1->CR2 |= (1<<9); //enable event interrupts
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <LEDMatrixStart+0xa4>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	4a14      	ldr	r2, [pc, #80]	; (8000628 <LEDMatrixStart+0xa4>)
 80005d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005dc:	6053      	str	r3, [r2, #4]
	I2C1->CR1 |= (1<<8); //send start condition
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <LEDMatrixStart+0xa4>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a11      	ldr	r2, [pc, #68]	; (8000628 <LEDMatrixStart+0xa4>)
 80005e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e8:	6013      	str	r3, [r2, #0]
	while ((I2C1->SR1 & 1) == 0); //clear SB
 80005ea:	bf00      	nop
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <LEDMatrixStart+0xa4>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0f9      	beq.n	80005ec <LEDMatrixStart+0x68>
	I2C1->DR = addr; //address the MCP23017
 80005f8:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <LEDMatrixStart+0xa4>)
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	6113      	str	r3, [r2, #16]
	I2C1->CR2 |= (1<<11); //enable DMA Requests
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <LEDMatrixStart+0xa4>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	4a09      	ldr	r2, [pc, #36]	; (8000628 <LEDMatrixStart+0xa4>)
 8000604:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000608:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 800060a:	b662      	cpsie	i
	__enable_irq();



}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	200001b1 	.word	0x200001b1
 800061c:	4002006c 	.word	0x4002006c
 8000620:	200005a0 	.word	0x200005a0
 8000624:	40005410 	.word	0x40005410
 8000628:	40005400 	.word	0x40005400

0800062c <LCDInit>:
 * \fn LCDInit
 * @brief Initialises both the LCD and the MCP23017
 *
 * @param addr Address of the MCP23017
 */
void LCDInit(uint8_t addr){ //interrupts should be disabled here
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8000636:	b672      	cpsid	i

	//while(blocked); //wait for clearance anyways just for good measure

	//Initialise the MCP23017 first
	__disable_irq(); //let's allow the init to go down peacefully
	I2C2->CR1 |= (1<<8); //send start condition
 8000638:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <LCDInit+0x138>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a49      	ldr	r2, [pc, #292]	; (8000764 <LCDInit+0x138>)
 800063e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000642:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 8000644:	bf00      	nop
 8000646:	4b47      	ldr	r3, [pc, #284]	; (8000764 <LCDInit+0x138>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0f9      	beq.n	8000646 <LCDInit+0x1a>
	I2C2->DR = addr; //address the MCP23017
 8000652:	4a44      	ldr	r2, [pc, #272]	; (8000764 <LCDInit+0x138>)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000658:	bf00      	nop
 800065a:	4b42      	ldr	r3, [pc, #264]	; (8000764 <LCDInit+0x138>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0f9      	beq.n	800065a <LCDInit+0x2e>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000666:	bf00      	nop
 8000668:	4b3e      	ldr	r3, [pc, #248]	; (8000764 <LCDInit+0x138>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0304 	and.w	r3, r3, #4
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0f9      	beq.n	8000668 <LCDInit+0x3c>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000674:	bf00      	nop
 8000676:	4b3b      	ldr	r3, [pc, #236]	; (8000764 <LCDInit+0x138>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f9      	beq.n	8000676 <LCDInit+0x4a>
	I2C2->DR = 0x00; //write to IODIR_A
 8000682:	4b38      	ldr	r3, [pc, #224]	; (8000764 <LCDInit+0x138>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000688:	bf00      	nop
 800068a:	4b36      	ldr	r3, [pc, #216]	; (8000764 <LCDInit+0x138>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f9      	beq.n	800068a <LCDInit+0x5e>
	I2C2->DR = 0x00; //all outputs
 8000696:	4b33      	ldr	r3, [pc, #204]	; (8000764 <LCDInit+0x138>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800069c:	bf00      	nop
 800069e:	4b31      	ldr	r3, [pc, #196]	; (8000764 <LCDInit+0x138>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0f9      	beq.n	800069e <LCDInit+0x72>
	I2C2->DR = 0x00; //all outputs for next address which is IODIR_B
 80006aa:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <LCDInit+0x138>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80006b0:	bf00      	nop
 80006b2:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <LCDInit+0x138>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d0f9      	beq.n	80006b2 <LCDInit+0x86>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 80006be:	4b29      	ldr	r3, [pc, #164]	; (8000764 <LCDInit+0x138>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a28      	ldr	r2, [pc, #160]	; (8000764 <LCDInit+0x138>)
 80006c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006c8:	6013      	str	r3, [r2, #0]


	//Pull RS, RW and E pins LOW
	MCP23017ClearPin(RS_Pin, B, LCD_Address);
 80006ca:	224e      	movs	r2, #78	; 0x4e
 80006cc:	2101      	movs	r1, #1
 80006ce:	2002      	movs	r0, #2
 80006d0:	f7ff fe6c 	bl	80003ac <MCP23017ClearPin>
	MCP23017ClearPin(RS_Pin, B, LCD_Address);
 80006d4:	224e      	movs	r2, #78	; 0x4e
 80006d6:	2101      	movs	r1, #1
 80006d8:	2002      	movs	r0, #2
 80006da:	f7ff fe67 	bl	80003ac <MCP23017ClearPin>
	MCP23017ClearPin(RS_Pin, B, LCD_Address);
 80006de:	224e      	movs	r2, #78	; 0x4e
 80006e0:	2101      	movs	r1, #1
 80006e2:	2002      	movs	r0, #2
 80006e4:	f7ff fe62 	bl	80003ac <MCP23017ClearPin>



	LCDData(0x00, addr); //clear the data pins as well
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	4619      	mov	r1, r3
 80006ec:	2000      	movs	r0, #0
 80006ee:	f000 f83b 	bl	8000768 <LCDData>
	DWT_Delay_ms(30);
 80006f2:	201e      	movs	r0, #30
 80006f4:	f7ff fda4 	bl	8000240 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4619      	mov	r1, r3
 80006fc:	2030      	movs	r0, #48	; 0x30
 80006fe:	f000 f8a7 	bl	8000850 <LCDCommand>
	DWT_Delay_ms(5);
 8000702:	2005      	movs	r0, #5
 8000704:	f7ff fd9c 	bl	8000240 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4619      	mov	r1, r3
 800070c:	2030      	movs	r0, #48	; 0x30
 800070e:	f000 f89f 	bl	8000850 <LCDCommand>
	DWT_Delay_ms(5);
 8000712:	2005      	movs	r0, #5
 8000714:	f7ff fd94 	bl	8000240 <DWT_Delay_ms>

	LCDCommand(0x30, addr); //function set
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	4619      	mov	r1, r3
 800071c:	2030      	movs	r0, #48	; 0x30
 800071e:	f000 f897 	bl	8000850 <LCDCommand>
	DWT_Delay_us(1000);
 8000722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000726:	f7ff fd65 	bl	80001f4 <DWT_Delay_us>

	LCDCommand(0x38, addr); //8-bit mode, 2 lines, smaller font
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	4619      	mov	r1, r3
 800072e:	2038      	movs	r0, #56	; 0x38
 8000730:	f000 f88e 	bl	8000850 <LCDCommand>

	LCDCommand(0x0C, addr); //display ON
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	4619      	mov	r1, r3
 8000738:	200c      	movs	r0, #12
 800073a:	f000 f889 	bl	8000850 <LCDCommand>

	LCDCommand(0x01, addr); //display clear
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	4619      	mov	r1, r3
 8000742:	2001      	movs	r0, #1
 8000744:	f000 f884 	bl	8000850 <LCDCommand>
	DWT_Delay_us(2000); //clear requires a substantial delay
 8000748:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800074c:	f7ff fd52 	bl	80001f4 <DWT_Delay_us>

	LCDCommand(0x06, addr); //set entry mode
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4619      	mov	r1, r3
 8000754:	2006      	movs	r0, #6
 8000756:	f000 f87b 	bl	8000850 <LCDCommand>
  __ASM volatile ("cpsie i" : : : "memory");
 800075a:	b662      	cpsie	i

	__enable_irq();


}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40005800 	.word	0x40005800

08000768 <LCDData>:
 * @brief Presents the data to D0 to D7 (located on Bank A)
 *
 * @param data Data to send
 * @param addr I2C Address of the MCP23017
 */
void LCDData(char data, uint8_t addr){
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	460a      	mov	r2, r1
 8000772:	71fb      	strb	r3, [r7, #7]
 8000774:	4613      	mov	r3, r2
 8000776:	71bb      	strb	r3, [r7, #6]

	while(blocked); //wait for clearance
 8000778:	bf00      	nop
 800077a:	4b32      	ldr	r3, [pc, #200]	; (8000844 <LCDData+0xdc>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d1fa      	bne.n	800077a <LCDData+0x12>

	TIM2->CR1 &= ~1; //disable BAM Driver
 8000784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800078e:	f023 0301 	bic.w	r3, r3, #1
 8000792:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~1;
 8000794:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <LCDData+0xe0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a2b      	ldr	r2, [pc, #172]	; (8000848 <LCDData+0xe0>)
 800079a:	f023 0301 	bic.w	r3, r3, #1
 800079e:	6013      	str	r3, [r2, #0]

	I2C2->CR1 |= (1<<8); //send start condition
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <LCDData+0xe4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a29      	ldr	r2, [pc, #164]	; (800084c <LCDData+0xe4>)
 80007a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007aa:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 80007ac:	bf00      	nop
 80007ae:	4b27      	ldr	r3, [pc, #156]	; (800084c <LCDData+0xe4>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d0f9      	beq.n	80007ae <LCDData+0x46>
	I2C2->DR = addr; //address the MCP23017
 80007ba:	4a24      	ldr	r2, [pc, #144]	; (800084c <LCDData+0xe4>)
 80007bc:	79bb      	ldrb	r3, [r7, #6]
 80007be:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 80007c0:	bf00      	nop
 80007c2:	4b22      	ldr	r3, [pc, #136]	; (800084c <LCDData+0xe4>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f9      	beq.n	80007c2 <LCDData+0x5a>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 80007ce:	bf00      	nop
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <LCDData+0xe4>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d0f9      	beq.n	80007d0 <LCDData+0x68>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80007dc:	bf00      	nop
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <LCDData+0xe4>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0f9      	beq.n	80007de <LCDData+0x76>
	I2C2->DR = 0x14; //write to GPIO_A
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <LCDData+0xe4>)
 80007ec:	2214      	movs	r2, #20
 80007ee:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80007f0:	bf00      	nop
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <LCDData+0xe4>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f9      	beq.n	80007f2 <LCDData+0x8a>
	I2C2->DR = data; //present data at output bank A
 80007fe:	4a13      	ldr	r2, [pc, #76]	; (800084c <LCDData+0xe4>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	6113      	str	r3, [r2, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000804:	bf00      	nop
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <LCDData+0xe4>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f9      	beq.n	8000806 <LCDData+0x9e>
	//while ((I2C2->SR1 & (1<<2)) == 0); //make sure BTF is 1
	I2C2->CR1 |= (1<<9); //send stop condition
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <LCDData+0xe4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0d      	ldr	r2, [pc, #52]	; (800084c <LCDData+0xe4>)
 8000818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081c:	6013      	str	r3, [r2, #0]

	TIM2->CR1 |= 1; //enable BAM Driver
 800081e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= 1;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <LCDData+0xe0>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a05      	ldr	r2, [pc, #20]	; (8000848 <LCDData+0xe0>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6013      	str	r3, [r2, #0]

}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	200001b1 	.word	0x200001b1
 8000848:	40000400 	.word	0x40000400
 800084c:	40005800 	.word	0x40005800

08000850 <LCDCommand>:

void LCDCommand(char data, uint8_t addr){
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	460a      	mov	r2, r1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	71bb      	strb	r3, [r7, #6]


	MCP23017ClearPin(RS_Pin, B, addr);
 8000860:	79bb      	ldrb	r3, [r7, #6]
 8000862:	461a      	mov	r2, r3
 8000864:	2101      	movs	r1, #1
 8000866:	2002      	movs	r0, #2
 8000868:	f7ff fda0 	bl	80003ac <MCP23017ClearPin>

	LCDData(data, addr);
 800086c:	79ba      	ldrb	r2, [r7, #6]
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff78 	bl	8000768 <LCDData>

	LCDCycleEN(addr);
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f804 	bl	8000888 <LCDCycleEN>

}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <LCDCycleEN>:

void LCDCycleEN(uint8_t addr){
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]

	MCP23017ClearPin(EN_Pin, B, addr);
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	461a      	mov	r2, r3
 8000896:	2101      	movs	r1, #1
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff fd87 	bl	80003ac <MCP23017ClearPin>
	DWT_Delay_us(1);
 800089e:	2001      	movs	r0, #1
 80008a0:	f7ff fca8 	bl	80001f4 <DWT_Delay_us>
	MCP23017SetPin(EN_Pin, B, addr);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	461a      	mov	r2, r3
 80008a8:	2101      	movs	r1, #1
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff fcec 	bl	8000288 <MCP23017SetPin>
	DWT_Delay_us(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f7ff fc9f 	bl	80001f4 <DWT_Delay_us>
	MCP23017ClearPin(EN_Pin, B, addr);
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	461a      	mov	r2, r3
 80008ba:	2101      	movs	r1, #1
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fd75 	bl	80003ac <MCP23017ClearPin>
	DWT_Delay_us(100);
 80008c2:	2064      	movs	r0, #100	; 0x64
 80008c4:	f7ff fc96 	bl	80001f4 <DWT_Delay_us>


}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <LCDWriteChar>:

void LCDWriteChar(char data, uint8_t addr){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	460a      	mov	r2, r1
 80008da:	71fb      	strb	r3, [r7, #7]
 80008dc:	4613      	mov	r3, r2
 80008de:	71bb      	strb	r3, [r7, #6]

	MCP23017SetPin(RS_Pin, B, addr);
 80008e0:	79bb      	ldrb	r3, [r7, #6]
 80008e2:	461a      	mov	r2, r3
 80008e4:	2101      	movs	r1, #1
 80008e6:	2002      	movs	r0, #2
 80008e8:	f7ff fcce 	bl	8000288 <MCP23017SetPin>
	LCDData(data, addr);
 80008ec:	79ba      	ldrb	r2, [r7, #6]
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff38 	bl	8000768 <LCDData>
	LCDCycleEN(addr);
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ffc4 	bl	8000888 <LCDCycleEN>

}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <LCDWriteString>:

void LCDWriteString(char *str, uint8_t addr){
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	70fb      	strb	r3, [r7, #3]

	for(int i = 0; (volatile char)str[i] != '\x00' ; i++){ //Nice touch: take advantage of null byte terminated strings
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	e00b      	b.n	8000932 <LCDWriteString+0x2a>
		LCDWriteChar(str[i], addr);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	4413      	add	r3, r2
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	78fa      	ldrb	r2, [r7, #3]
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ffd2 	bl	80008d0 <LCDWriteChar>
	for(int i = 0; (volatile char)str[i] != '\x00' ; i++){ //Nice touch: take advantage of null byte terminated strings
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3301      	adds	r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	4413      	add	r3, r2
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d1ed      	bne.n	800091a <LCDWriteString+0x12>
	}

}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <LCDClear>:

void LCDClear(uint8_t addr){
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	4603      	mov	r3, r0
 800094e:	71fb      	strb	r3, [r7, #7]

	LCDCommand(1, addr);
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4619      	mov	r1, r3
 8000954:	2001      	movs	r0, #1
 8000956:	f7ff ff7b 	bl	8000850 <LCDCommand>
	DWT_Delay_us(2000);
 800095a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800095e:	f7ff fc49 	bl	80001f4 <DWT_Delay_us>

}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <LCDSetCursor>:

void LCDSetCursor(uint8_t row, uint8_t col, uint8_t addr){
 800096a:	b580      	push	{r7, lr}
 800096c:	b084      	sub	sp, #16
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	460b      	mov	r3, r1
 8000976:	71bb      	strb	r3, [r7, #6]
 8000978:	4613      	mov	r3, r2
 800097a:	717b      	strb	r3, [r7, #5]

	char outbyte;

	if(row == 1){
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d109      	bne.n	8000996 <LCDSetCursor+0x2c>
		outbyte = 0x80 + col - 1;
 8000982:	79bb      	ldrb	r3, [r7, #6]
 8000984:	337f      	adds	r3, #127	; 0x7f
 8000986:	73fb      	strb	r3, [r7, #15]
		LCDCommand(outbyte, addr);
 8000988:	797a      	ldrb	r2, [r7, #5]
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	4611      	mov	r1, r2
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ff5e 	bl	8000850 <LCDCommand>
	else if(row == 2){
		outbyte = 0xC0 + col - 1;
		LCDCommand(outbyte, addr);
	}

}
 8000994:	e00b      	b.n	80009ae <LCDSetCursor+0x44>
	else if(row == 2){
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d108      	bne.n	80009ae <LCDSetCursor+0x44>
		outbyte = 0xC0 + col - 1;
 800099c:	79bb      	ldrb	r3, [r7, #6]
 800099e:	3b41      	subs	r3, #65	; 0x41
 80009a0:	73fb      	strb	r3, [r7, #15]
		LCDCommand(outbyte, addr);
 80009a2:	797a      	ldrb	r2, [r7, #5]
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff51 	bl	8000850 <LCDCommand>
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009be:	f000 fe59 	bl	8001674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c2:	f000 f887 	bl	8000ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c6:	f000 fa6d 	bl	8000ea4 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ca:	f000 fa55 	bl	8000e78 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80009ce:	f009 f9b7 	bl	8009d40 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80009d2:	f000 f901 	bl	8000bd8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80009d6:	f000 f93d 	bl	8000c54 <MX_I2C1_Init>
  MX_I2C2_Init();
 80009da:	f000 f969 	bl	8000cb0 <MX_I2C2_Init>
  MX_TIM2_Init();
 80009de:	f000 f995 	bl	8000d0c <MX_TIM2_Init>
  MX_TIM3_Init();
 80009e2:	f000 f9ef 	bl	8000dc4 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80009e6:	f000 f8d2 	bl	8000b8e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  NVIC_SetPriorityGrouping(0U); //use standard interrupt grouping
 80009ea:	2000      	movs	r0, #0
 80009ec:	f7ff fbae 	bl	800014c <__NVIC_SetPriorityGrouping>
  DWT_Delay_Init();
 80009f0:	f7ff fbd0 	bl	8000194 <DWT_Delay_Init>

  blocked = 0;
 80009f4:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <main+0xfc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
  I2C2->CR1 |= 1; //enable i2c 2 peripheral for LCD and EEPROM
 80009fa:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <main+0x100>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a2e      	ldr	r2, [pc, #184]	; (8000ab8 <main+0x100>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6013      	str	r3, [r2, #0]
  I2C1->CR1 |= 1; //enable i2c 1 peripheral for LED Matrix
 8000a06:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <main+0x104>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a2c      	ldr	r2, [pc, #176]	; (8000abc <main+0x104>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6013      	str	r3, [r2, #0]

  LCDInit(LCD_Address);
 8000a12:	204e      	movs	r0, #78	; 0x4e
 8000a14:	f7ff fe0a 	bl	800062c <LCDInit>
  LEDMatrixInit(LEDMatrix_Address);
 8000a18:	2048      	movs	r0, #72	; 0x48
 8000a1a:	f7ff fd5b 	bl	80004d4 <LEDMatrixInit>

  //TIM2->CR1 |= 1; //enable BAM Driver
  //TIM3->CR1 |= 1; //enable encoder scan driver


  LCDClear(LCD_Address);
 8000a1e:	204e      	movs	r0, #78	; 0x4e
 8000a20:	f7ff ff91 	bl	8000946 <LCDClear>

  LCDSetCursor(1, 1, LCD_Address);
 8000a24:	224e      	movs	r2, #78	; 0x4e
 8000a26:	2101      	movs	r1, #1
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f7ff ff9e 	bl	800096a <LCDSetCursor>

  LCDWriteString("AAAA", LCD_Address);
 8000a2e:	214e      	movs	r1, #78	; 0x4e
 8000a30:	4823      	ldr	r0, [pc, #140]	; (8000ac0 <main+0x108>)
 8000a32:	f7ff ff69 	bl	8000908 <LCDWriteString>



  for(int i = 0; i < 4; i++){ //function to drive the LED's
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	e020      	b.n	8000a7e <main+0xc6>
	  LEDMatrixBuffer[i*3] = 0x14;
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	4413      	add	r3, r2
 8000a44:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <main+0x10c>)
 8000a46:	2114      	movs	r1, #20
 8000a48:	54d1      	strb	r1, [r2, r3]
	  LEDMatrixBuffer[i*3+1] = (1<<i);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	fa02 f103 	lsl.w	r1, r2, r3
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	b2c9      	uxtb	r1, r1
 8000a5e:	4a19      	ldr	r2, [pc, #100]	; (8000ac4 <main+0x10c>)
 8000a60:	54d1      	strb	r1, [r2, r3]
	  LEDMatrixBuffer[i*3+2] = LEDMatrix[i];
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	4916      	ldr	r1, [pc, #88]	; (8000ac8 <main+0x110>)
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	440a      	add	r2, r1
 8000a72:	7811      	ldrb	r1, [r2, #0]
 8000a74:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <main+0x10c>)
 8000a76:	54d1      	strb	r1, [r2, r3]
  for(int i = 0; i < 4; i++){ //function to drive the LED's
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b03      	cmp	r3, #3
 8000a82:	dddb      	ble.n	8000a3c <main+0x84>
  }

  LEDMatrixStart(LEDMatrix_Address);
 8000a84:	2048      	movs	r0, #72	; 0x48
 8000a86:	f7ff fd7d 	bl	8000584 <LEDMatrixStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  brightness[0] = encoderValues[3];
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <main+0x114>)
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <main+0x118>)
 8000a92:	701a      	strb	r2, [r3, #0]
	  brightness[1] = encoderValues[2];
 8000a94:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <main+0x114>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <main+0x118>)
 8000a9c:	705a      	strb	r2, [r3, #1]
	  brightness[2] = encoderValues[1];
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <main+0x114>)
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <main+0x118>)
 8000aa6:	709a      	strb	r2, [r3, #2]
	  brightness[3] = encoderValues[0];
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <main+0x114>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <main+0x118>)
 8000ab0:	70da      	strb	r2, [r3, #3]
	  brightness[0] = encoderValues[3];
 8000ab2:	e7ea      	b.n	8000a8a <main+0xd2>
 8000ab4:	200001b1 	.word	0x200001b1
 8000ab8:	40005800 	.word	0x40005800
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	0800a69c 	.word	0x0800a69c
 8000ac4:	200005a0 	.word	0x200005a0
 8000ac8:	20000014 	.word	0x20000014
 8000acc:	200001bc 	.word	0x200001bc
 8000ad0:	20000000 	.word	0x20000000

08000ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b094      	sub	sp, #80	; 0x50
 8000ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ade:	2228      	movs	r2, #40	; 0x28
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f009 fdc6 	bl	800a674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b04:	2301      	movs	r3, #1
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b12:	2301      	movs	r3, #1
 8000b14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b16:	2302      	movs	r3, #2
 8000b18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b20:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f004 fcc4 	bl	80054b8 <HAL_RCC_OscConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b36:	f000 fa47 	bl	8000fc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2102      	movs	r1, #2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f004 ff2e 	bl	80059b8 <HAL_RCC_ClockConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b62:	f000 fa31 	bl	8000fc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000b66:	2312      	movs	r3, #18
 8000b68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b6e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	4618      	mov	r0, r3
 8000b78:	f005 f8a6 	bl	8005cc8 <HAL_RCCEx_PeriphCLKConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b82:	f000 fa21 	bl	8000fc8 <Error_Handler>
  }
}
 8000b86:	bf00      	nop
 8000b88:	3750      	adds	r7, #80	; 0x50
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2101      	movs	r1, #1
 8000b96:	201c      	movs	r0, #28
 8000b98:	f001 f8af 	bl	8001cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b9c:	201c      	movs	r0, #28
 8000b9e:	f001 f8c8 	bl	8001d32 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	201d      	movs	r0, #29
 8000ba8:	f001 f8a7 	bl	8001cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bac:	201d      	movs	r0, #29
 8000bae:	f001 f8c0 	bl	8001d32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2010      	movs	r0, #16
 8000bb8:	f001 f89f 	bl	8001cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000bbc:	2010      	movs	r0, #16
 8000bbe:	f001 f8b8 	bl	8001d32 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	201f      	movs	r0, #31
 8000bc8:	f001 f897 	bl	8001cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000bcc:	201f      	movs	r0, #31
 8000bce:	f001 f8b0 	bl	8001d32 <HAL_NVIC_EnableIRQ>
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <MX_ADC1_Init+0x74>)
 8000bea:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <MX_ADC1_Init+0x78>)
 8000bec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_ADC1_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <MX_ADC1_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_ADC1_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <MX_ADC1_Init+0x74>)
 8000c02:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_ADC1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_ADC1_Init+0x74>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <MX_ADC1_Init+0x74>)
 8000c16:	f000 fd8f 	bl	8001738 <HAL_ADC_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c20:	f000 f9d2 	bl	8000fc8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_ADC1_Init+0x74>)
 8000c36:	f000 fe57 	bl	80018e8 <HAL_ADC_ConfigChannel>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c40:	f000 f9c2 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000528 	.word	0x20000528
 8000c50:	40012400 	.word	0x40012400

08000c54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c5a:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <MX_I2C1_Init+0x54>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c60:	4a12      	ldr	r2, [pc, #72]	; (8000cac <MX_I2C1_Init+0x58>)
 8000c62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <MX_I2C1_Init+0x50>)
 8000c92:	f001 fbbd 	bl	8002410 <HAL_I2C_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c9c:	f000 f994 	bl	8000fc8 <Error_Handler>
  //dude, the code generation is evil... doesn't help you all the way!!! Came a gutsa so many times....


  /* USER CODE END I2C1_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000438 	.word	0x20000438
 8000ca8:	40005400 	.word	0x40005400
 8000cac:	00061a80 	.word	0x00061a80

08000cb0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_I2C2_Init+0x50>)
 8000cb6:	4a13      	ldr	r2, [pc, #76]	; (8000d04 <MX_I2C2_Init+0x54>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_I2C2_Init+0x50>)
 8000cbc:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <MX_I2C2_Init+0x58>)
 8000cbe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_I2C2_Init+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_I2C2_Init+0x50>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_I2C2_Init+0x50>)
 8000cce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cd2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <MX_I2C2_Init+0x50>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_I2C2_Init+0x50>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <MX_I2C2_Init+0x50>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_I2C2_Init+0x50>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MX_I2C2_Init+0x50>)
 8000cee:	f001 fb8f 	bl	8002410 <HAL_I2C_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000cf8:	f000 f966 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000048c 	.word	0x2000048c
 8000d04:	40005800 	.word	0x40005800
 8000d08:	00061a80 	.word	0x00061a80

08000d0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	463b      	mov	r3, r7
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d28:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <MX_TIM2_Init+0xb4>)
 8000d2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000d30:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <MX_TIM2_Init+0xb4>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <MX_TIM2_Init+0xb4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2047;
 8000d3c:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <MX_TIM2_Init+0xb4>)
 8000d3e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000d42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d44:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <MX_TIM2_Init+0xb4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <MX_TIM2_Init+0xb4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d50:	481b      	ldr	r0, [pc, #108]	; (8000dc0 <MX_TIM2_Init+0xb4>)
 8000d52:	f005 f86f 	bl	8005e34 <HAL_TIM_Base_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d5c:	f000 f934 	bl	8000fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4814      	ldr	r0, [pc, #80]	; (8000dc0 <MX_TIM2_Init+0xb4>)
 8000d6e:	f005 f9b8 	bl	80060e2 <HAL_TIM_ConfigClockSource>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d78:	f000 f926 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	4619      	mov	r1, r3
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <MX_TIM2_Init+0xb4>)
 8000d8a:	f005 fb87 	bl	800649c <HAL_TIMEx_MasterConfigSynchronization>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d94:	f000 f918 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIM2->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the BAM Interrupt is triggered
 8000d98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da2:	f023 0302 	bic.w	r3, r3, #2
 8000da6:	6013      	str	r3, [r2, #0]
  TIM2->DIER |= 1; //Update interrupt enable
 8000da8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	60d3      	str	r3, [r2, #12]

  /* USER CODE END TIM2_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000558 	.word	0x20000558

08000dc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000de0:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <MX_TIM3_Init+0xac>)
 8000de2:	4a24      	ldr	r2, [pc, #144]	; (8000e74 <MX_TIM3_Init+0xb0>)
 8000de4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000de6:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <MX_TIM3_Init+0xac>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dec:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <MX_TIM3_Init+0xac>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16383;
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <MX_TIM3_Init+0xac>)
 8000df4:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000df8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <MX_TIM3_Init+0xac>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_TIM3_Init+0xac>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e06:	481a      	ldr	r0, [pc, #104]	; (8000e70 <MX_TIM3_Init+0xac>)
 8000e08:	f005 f814 	bl	8005e34 <HAL_TIM_Base_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e12:	f000 f8d9 	bl	8000fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	4619      	mov	r1, r3
 8000e22:	4813      	ldr	r0, [pc, #76]	; (8000e70 <MX_TIM3_Init+0xac>)
 8000e24:	f005 f95d 	bl	80060e2 <HAL_TIM_ConfigClockSource>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e2e:	f000 f8cb 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_TIM3_Init+0xac>)
 8000e40:	f005 fb2c 	bl	800649c <HAL_TIMEx_MasterConfigSynchronization>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e4a:	f000 f8bd 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the Encoder Scan Interrupt is triggered
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_TIM3_Init+0xb0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <MX_TIM3_Init+0xb0>)
 8000e54:	f023 0302 	bic.w	r3, r3, #2
 8000e58:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= 1; //Update interrupt enable
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_TIM3_Init+0xb0>)
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <MX_TIM3_Init+0xb0>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM3_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200004e0 	.word	0x200004e0
 8000e74:	40000400 	.word	0x40000400

08000e78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MX_DMA_Init+0x28>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <MX_DMA_Init+0x28>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6153      	str	r3, [r2, #20]
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <MX_DMA_Init+0x28>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb8:	4b3f      	ldr	r3, [pc, #252]	; (8000fb8 <MX_GPIO_Init+0x114>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a3e      	ldr	r2, [pc, #248]	; (8000fb8 <MX_GPIO_Init+0x114>)
 8000ebe:	f043 0310 	orr.w	r3, r3, #16
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b3c      	ldr	r3, [pc, #240]	; (8000fb8 <MX_GPIO_Init+0x114>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0310 	and.w	r3, r3, #16
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed0:	4b39      	ldr	r3, [pc, #228]	; (8000fb8 <MX_GPIO_Init+0x114>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a38      	ldr	r2, [pc, #224]	; (8000fb8 <MX_GPIO_Init+0x114>)
 8000ed6:	f043 0320 	orr.w	r3, r3, #32
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b36      	ldr	r3, [pc, #216]	; (8000fb8 <MX_GPIO_Init+0x114>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0320 	and.w	r3, r3, #32
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <MX_GPIO_Init+0x114>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a32      	ldr	r2, [pc, #200]	; (8000fb8 <MX_GPIO_Init+0x114>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <MX_GPIO_Init+0x114>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <MX_GPIO_Init+0x114>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a2c      	ldr	r2, [pc, #176]	; (8000fb8 <MX_GPIO_Init+0x114>)
 8000f06:	f043 0308 	orr.w	r3, r3, #8
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <MX_GPIO_Init+0x114>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0308 	and.w	r3, r3, #8
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000f1e:	4827      	ldr	r0, [pc, #156]	; (8000fbc <MX_GPIO_Init+0x118>)
 8000f20:	f001 fa5e 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f248 11c0 	movw	r1, #33216	; 0x81c0
 8000f2a:	4825      	ldr	r0, [pc, #148]	; (8000fc0 <MX_GPIO_Init+0x11c>)
 8000f2c:	f001 fa58 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f36:	4823      	ldr	r0, [pc, #140]	; (8000fc4 <MX_GPIO_Init+0x120>)
 8000f38:	f001 fa52 	bl	80023e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f3c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	4619      	mov	r1, r3
 8000f54:	4819      	ldr	r0, [pc, #100]	; (8000fbc <MX_GPIO_Init+0x118>)
 8000f56:	f001 f8e9 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
 8000f5a:	f248 13c0 	movw	r3, #33216	; 0x81c0
 8000f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4619      	mov	r1, r3
 8000f72:	4813      	ldr	r0, [pc, #76]	; (8000fc0 <MX_GPIO_Init+0x11c>)
 8000f74:	f001 f8da 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f78:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <MX_GPIO_Init+0x120>)
 8000f92:	f001 f8cb 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_GPIO_Init+0x11c>)
 8000fac:	f001 f8be 	bl	800212c <HAL_GPIO_Init>

}
 8000fb0:	bf00      	nop
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40011000 	.word	0x40011000
 8000fc0:	40010800 	.word	0x40010800
 8000fc4:	40010c00 	.word	0x40010c00

08000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fcc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fce:	e7fe      	b.n	8000fce <Error_Handler+0x6>

08000fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_MspInit+0x5c>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <HAL_MspInit+0x5c>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6193      	str	r3, [r2, #24]
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_MspInit+0x5c>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <HAL_MspInit+0x5c>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	; (800102c <HAL_MspInit+0x5c>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	61d3      	str	r3, [r2, #28]
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <HAL_MspInit+0x5c>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_MspInit+0x60>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <HAL_MspInit+0x60>)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	40021000 	.word	0x40021000
 8001030:	40010000 	.word	0x40010000

08001034 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <HAL_ADC_MspInit+0x6c>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d121      	bne.n	8001098 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <HAL_ADC_MspInit+0x70>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <HAL_ADC_MspInit+0x70>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <HAL_ADC_MspInit+0x70>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <HAL_ADC_MspInit+0x70>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a0c      	ldr	r2, [pc, #48]	; (80010a4 <HAL_ADC_MspInit+0x70>)
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_ADC_MspInit+0x70>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001084:	230f      	movs	r3, #15
 8001086:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001088:	2303      	movs	r3, #3
 800108a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	4619      	mov	r1, r3
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <HAL_ADC_MspInit+0x74>)
 8001094:	f001 f84a 	bl	800212c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001098:	bf00      	nop
 800109a:	3720      	adds	r7, #32
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40012400 	.word	0x40012400
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40010800 	.word	0x40010800

080010ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	; 0x30
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a45      	ldr	r2, [pc, #276]	; (80011dc <HAL_I2C_MspInit+0x130>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d159      	bne.n	8001180 <HAL_I2C_MspInit+0xd4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	4b44      	ldr	r3, [pc, #272]	; (80011e0 <HAL_I2C_MspInit+0x134>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a43      	ldr	r2, [pc, #268]	; (80011e0 <HAL_I2C_MspInit+0x134>)
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b41      	ldr	r3, [pc, #260]	; (80011e0 <HAL_I2C_MspInit+0x134>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ea:	2312      	movs	r3, #18
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	4619      	mov	r1, r3
 80010f8:	483a      	ldr	r0, [pc, #232]	; (80011e4 <HAL_I2C_MspInit+0x138>)
 80010fa:	f001 f817 	bl	800212c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80010fe:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <HAL_I2C_MspInit+0x13c>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001106:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110e:	f043 0302 	orr.w	r3, r3, #2
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001114:	4a34      	ldr	r2, [pc, #208]	; (80011e8 <HAL_I2C_MspInit+0x13c>)
 8001116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001118:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111a:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <HAL_I2C_MspInit+0x134>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a30      	ldr	r2, [pc, #192]	; (80011e0 <HAL_I2C_MspInit+0x134>)
 8001120:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <HAL_I2C_MspInit+0x134>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <HAL_I2C_MspInit+0x140>)
 8001134:	4a2e      	ldr	r2, [pc, #184]	; (80011f0 <HAL_I2C_MspInit+0x144>)
 8001136:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001138:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <HAL_I2C_MspInit+0x140>)
 800113a:	2210      	movs	r2, #16
 800113c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <HAL_I2C_MspInit+0x140>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <HAL_I2C_MspInit+0x140>)
 8001146:	2280      	movs	r2, #128	; 0x80
 8001148:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800114a:	4b28      	ldr	r3, [pc, #160]	; (80011ec <HAL_I2C_MspInit+0x140>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001150:	4b26      	ldr	r3, [pc, #152]	; (80011ec <HAL_I2C_MspInit+0x140>)
 8001152:	2200      	movs	r2, #0
 8001154:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001156:	4b25      	ldr	r3, [pc, #148]	; (80011ec <HAL_I2C_MspInit+0x140>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <HAL_I2C_MspInit+0x140>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001162:	4822      	ldr	r0, [pc, #136]	; (80011ec <HAL_I2C_MspInit+0x140>)
 8001164:	f000 fe00 	bl	8001d68 <HAL_DMA_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 800116e:	f7ff ff2b 	bl	8000fc8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <HAL_I2C_MspInit+0x140>)
 8001176:	635a      	str	r2, [r3, #52]	; 0x34
 8001178:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <HAL_I2C_MspInit+0x140>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800117e:	e029      	b.n	80011d4 <HAL_I2C_MspInit+0x128>
  else if(hi2c->Instance==I2C2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <HAL_I2C_MspInit+0x148>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d124      	bne.n	80011d4 <HAL_I2C_MspInit+0x128>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_I2C_MspInit+0x134>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <HAL_I2C_MspInit+0x134>)
 8001190:	f043 0308 	orr.w	r3, r3, #8
 8001194:	6193      	str	r3, [r2, #24]
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_I2C_MspInit+0x134>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a8:	2312      	movs	r3, #18
 80011aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	480b      	ldr	r0, [pc, #44]	; (80011e4 <HAL_I2C_MspInit+0x138>)
 80011b8:	f000 ffb8 	bl	800212c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_I2C_MspInit+0x134>)
 80011be:	69db      	ldr	r3, [r3, #28]
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <HAL_I2C_MspInit+0x134>)
 80011c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c6:	61d3      	str	r3, [r2, #28]
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_I2C_MspInit+0x134>)
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3730      	adds	r7, #48	; 0x30
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40005400 	.word	0x40005400
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010c00 	.word	0x40010c00
 80011e8:	40010000 	.word	0x40010000
 80011ec:	200003f4 	.word	0x200003f4
 80011f0:	4002006c 	.word	0x4002006c
 80011f4:	40005800 	.word	0x40005800

080011f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001208:	d10c      	bne.n	8001224 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_TIM_Base_MspInit+0x58>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	4a10      	ldr	r2, [pc, #64]	; (8001250 <HAL_TIM_Base_MspInit+0x58>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	61d3      	str	r3, [r2, #28]
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_TIM_Base_MspInit+0x58>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001222:	e010      	b.n	8001246 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <HAL_TIM_Base_MspInit+0x5c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10b      	bne.n	8001246 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_TIM_Base_MspInit+0x58>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a07      	ldr	r2, [pc, #28]	; (8001250 <HAL_TIM_Base_MspInit+0x58>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_TIM_Base_MspInit+0x58>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	40021000 	.word	0x40021000
 8001254:	40000400 	.word	0x40000400

08001258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800125c:	e7fe      	b.n	800125c <NMI_Handler+0x4>

0800125e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <HardFault_Handler+0x4>

08001264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <MemManage_Handler+0x4>

0800126a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <UsageFault_Handler+0x4>

08001276 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129e:	f000 fa2f 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	//GPIOA->BRR = 1<<6;



  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <DMA1_Channel6_IRQHandler+0x10>)
 80012ae:	f000 fe2b 	bl	8001f08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  //GPIOA->BSRR = 1<<6;
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200003f4 	.word	0x200003f4

080012bc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80012c2:	f002 fea6 	bl	8004012 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20001244 	.word	0x20001244

080012d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//GPIOA->BSRR = 1<<6;
	if(BAMIndex == 0){
 80012d4:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <TIM2_IRQHandler+0x114>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d102      	bne.n	80012e4 <TIM2_IRQHandler+0x14>
		blocked = 1; //block to protect the time sensitive LSB's, otherwise it gets pretty flicker-ry
 80012de:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <TIM2_IRQHandler+0x118>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]

	}

	if(brightness[0] & (1 << BAMIndex))	GPIOB->BSRR = (1<<12);
 80012e4:	4b41      	ldr	r3, [pc, #260]	; (80013ec <TIM2_IRQHandler+0x11c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b3d      	ldr	r3, [pc, #244]	; (80013e4 <TIM2_IRQHandler+0x114>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	fa42 f303 	asr.w	r3, r2, r3
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d004      	beq.n	8001308 <TIM2_IRQHandler+0x38>
 80012fe:	4b3c      	ldr	r3, [pc, #240]	; (80013f0 <TIM2_IRQHandler+0x120>)
 8001300:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001304:	611a      	str	r2, [r3, #16]
 8001306:	e003      	b.n	8001310 <TIM2_IRQHandler+0x40>
	else GPIOB->BRR = (1<<12);
 8001308:	4b39      	ldr	r3, [pc, #228]	; (80013f0 <TIM2_IRQHandler+0x120>)
 800130a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800130e:	615a      	str	r2, [r3, #20]
	if(brightness[1] & (1 << BAMIndex))	GPIOB->BSRR = (1<<13);
 8001310:	4b36      	ldr	r3, [pc, #216]	; (80013ec <TIM2_IRQHandler+0x11c>)
 8001312:	785b      	ldrb	r3, [r3, #1]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	461a      	mov	r2, r3
 8001318:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <TIM2_IRQHandler+0x114>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	fa42 f303 	asr.w	r3, r2, r3
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d004      	beq.n	8001334 <TIM2_IRQHandler+0x64>
 800132a:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <TIM2_IRQHandler+0x120>)
 800132c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001330:	611a      	str	r2, [r3, #16]
 8001332:	e003      	b.n	800133c <TIM2_IRQHandler+0x6c>
	else GPIOB->BRR = (1<<13);
 8001334:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <TIM2_IRQHandler+0x120>)
 8001336:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800133a:	615a      	str	r2, [r3, #20]
	if(brightness[2] & (1 << BAMIndex))	GPIOB->BSRR = (1<<14);
 800133c:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <TIM2_IRQHandler+0x11c>)
 800133e:	789b      	ldrb	r3, [r3, #2]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <TIM2_IRQHandler+0x114>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	fa42 f303 	asr.w	r3, r2, r3
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d004      	beq.n	8001360 <TIM2_IRQHandler+0x90>
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <TIM2_IRQHandler+0x120>)
 8001358:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800135c:	611a      	str	r2, [r3, #16]
 800135e:	e003      	b.n	8001368 <TIM2_IRQHandler+0x98>
	else GPIOB->BRR = (1<<14);
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <TIM2_IRQHandler+0x120>)
 8001362:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001366:	615a      	str	r2, [r3, #20]
	if(brightness[3] & (1 << BAMIndex))	GPIOB->BSRR = (1<<15);
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <TIM2_IRQHandler+0x11c>)
 800136a:	78db      	ldrb	r3, [r3, #3]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	461a      	mov	r2, r3
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <TIM2_IRQHandler+0x114>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	fa42 f303 	asr.w	r3, r2, r3
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <TIM2_IRQHandler+0xbc>
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <TIM2_IRQHandler+0x120>)
 8001384:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001388:	611a      	str	r2, [r3, #16]
 800138a:	e003      	b.n	8001394 <TIM2_IRQHandler+0xc4>
	else GPIOB->BRR = (1<<15);
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <TIM2_IRQHandler+0x120>)
 800138e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001392:	615a      	str	r2, [r3, #20]


*/

	//FIXME this might potentially cause issues, as it blocks for half of the time
	if(BAMIndex == 3){
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <TIM2_IRQHandler+0x114>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b03      	cmp	r3, #3
 800139c:	d102      	bne.n	80013a4 <TIM2_IRQHandler+0xd4>
		blocked = 0; //Time sensitive LSB's are done, unblock, value of 3 or less gives visible flicker
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <TIM2_IRQHandler+0x118>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]

	}

	if(BAMIndex == 7){ //We've passed one BAM cycle
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <TIM2_IRQHandler+0x114>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b07      	cmp	r3, #7
 80013ac:	d107      	bne.n	80013be <TIM2_IRQHandler+0xee>


		BAMIndex = 0;
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <TIM2_IRQHandler+0x114>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = 1;
 80013b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013b8:	2201      	movs	r2, #1
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
 80013bc:	e00d      	b.n	80013da <TIM2_IRQHandler+0x10a>



	}
	else{
		BAMIndex++;
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <TIM2_IRQHandler+0x114>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	3301      	adds	r3, #1
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <TIM2_IRQHandler+0x114>)
 80013ca:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = (volatile)(TIM2->PSC << 1); //set next write to occupy twice the time of this current write.
 80013cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	6293      	str	r3, [r2, #40]	; 0x28
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <TIM2_IRQHandler+0x124>)
 80013dc:	f004 fd79 	bl	8005ed2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200001b0 	.word	0x200001b0
 80013e8:	200001b1 	.word	0x200001b1
 80013ec:	20000000 	.word	0x20000000
 80013f0:	40010c00 	.word	0x40010c00
 80013f4:	20000558 	.word	0x20000558

080013f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	GPIOA->BSRR = 1<<6;
 80013fe:	4b49      	ldr	r3, [pc, #292]	; (8001524 <TIM3_IRQHandler+0x12c>)
 8001400:	2240      	movs	r2, #64	; 0x40
 8001402:	611a      	str	r2, [r3, #16]
	uint8_t currentReadoff = ((((GPIOA->IDR)>>9) & 1) << 1) | (((GPIOA->IDR)>>10) & 1); //read current encoder state
 8001404:	4b47      	ldr	r3, [pc, #284]	; (8001524 <TIM3_IRQHandler+0x12c>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	0a5b      	lsrs	r3, r3, #9
 800140a:	b2db      	uxtb	r3, r3
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4b43      	ldr	r3, [pc, #268]	; (8001524 <TIM3_IRQHandler+0x12c>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	0a9b      	lsrs	r3, r3, #10
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	4313      	orrs	r3, r2
 8001426:	71fb      	strb	r3, [r7, #7]
	uint8_t index = (lastEncoder[currentEncoder]<<2) | currentReadoff;
 8001428:	4b3f      	ldr	r3, [pc, #252]	; (8001528 <TIM3_IRQHandler+0x130>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	4b3e      	ldr	r3, [pc, #248]	; (800152c <TIM3_IRQHandler+0x134>)
 8001432:	5c9b      	ldrb	r3, [r3, r2]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	b25a      	sxtb	r2, r3
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	4313      	orrs	r3, r2
 8001440:	b25b      	sxtb	r3, r3
 8001442:	71bb      	strb	r3, [r7, #6]
	encoderValues[currentEncoder] += encoderLUT[index];
 8001444:	79bb      	ldrb	r3, [r7, #6]
 8001446:	4a3a      	ldr	r2, [pc, #232]	; (8001530 <TIM3_IRQHandler+0x138>)
 8001448:	5cd3      	ldrb	r3, [r2, r3]
 800144a:	b259      	sxtb	r1, r3
 800144c:	4b36      	ldr	r3, [pc, #216]	; (8001528 <TIM3_IRQHandler+0x130>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4610      	mov	r0, r2
 8001454:	4b37      	ldr	r3, [pc, #220]	; (8001534 <TIM3_IRQHandler+0x13c>)
 8001456:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800145a:	4608      	mov	r0, r1
 800145c:	4611      	mov	r1, r2
 800145e:	4403      	add	r3, r0
 8001460:	4a34      	ldr	r2, [pc, #208]	; (8001534 <TIM3_IRQHandler+0x13c>)
 8001462:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//constrain encoderValues
	if(encoderValues[currentEncoder] > 255) encoderValues[currentEncoder] = 255;
 8001466:	4b30      	ldr	r3, [pc, #192]	; (8001528 <TIM3_IRQHandler+0x130>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	4b31      	ldr	r3, [pc, #196]	; (8001534 <TIM3_IRQHandler+0x13c>)
 8001470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001474:	2bff      	cmp	r3, #255	; 0xff
 8001476:	dd07      	ble.n	8001488 <TIM3_IRQHandler+0x90>
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <TIM3_IRQHandler+0x130>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	4619      	mov	r1, r3
 8001480:	4b2c      	ldr	r3, [pc, #176]	; (8001534 <TIM3_IRQHandler+0x13c>)
 8001482:	22ff      	movs	r2, #255	; 0xff
 8001484:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	if(encoderValues[currentEncoder] < 0) encoderValues[currentEncoder] = 0;
 8001488:	4b27      	ldr	r3, [pc, #156]	; (8001528 <TIM3_IRQHandler+0x130>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	461a      	mov	r2, r3
 8001490:	4b28      	ldr	r3, [pc, #160]	; (8001534 <TIM3_IRQHandler+0x13c>)
 8001492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001496:	2b00      	cmp	r3, #0
 8001498:	da07      	bge.n	80014aa <TIM3_IRQHandler+0xb2>
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <TIM3_IRQHandler+0x130>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	4619      	mov	r1, r3
 80014a2:	4b24      	ldr	r3, [pc, #144]	; (8001534 <TIM3_IRQHandler+0x13c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	lastEncoder[currentEncoder] = currentReadoff;
 80014aa:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <TIM3_IRQHandler+0x130>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4619      	mov	r1, r3
 80014b2:	4a1e      	ldr	r2, [pc, #120]	; (800152c <TIM3_IRQHandler+0x134>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	5453      	strb	r3, [r2, r1]
	//uint8_t buffer[256];
	//sprintf(buffer, "currentReadoff %d index %d encoderValue %d\r\n", currentReadoff, index, encoderValues[0]);
	//CDC_Transmit_FS(buffer, sizeof(buffer));
	//}

	if(currentEncoder == 4) currentEncoder = 0;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <TIM3_IRQHandler+0x130>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d103      	bne.n	80014ca <TIM3_IRQHandler+0xd2>
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <TIM3_IRQHandler+0x130>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
 80014c8:	e006      	b.n	80014d8 <TIM3_IRQHandler+0xe0>
	else currentEncoder++;
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <TIM3_IRQHandler+0x130>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	3301      	adds	r3, #1
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <TIM3_IRQHandler+0x130>)
 80014d6:	701a      	strb	r2, [r3, #0]

	//select the nth encoder here to allow the mux time to settle
	GPIOC->BRR = (3<<13); //clear GPIO Pins
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <TIM3_IRQHandler+0x140>)
 80014da:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80014de:	615a      	str	r2, [r3, #20]
	GPIOC->BSRR = ((currentEncoder&3)<<13);
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <TIM3_IRQHandler+0x130>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	035b      	lsls	r3, r3, #13
 80014e8:	4a13      	ldr	r2, [pc, #76]	; (8001538 <TIM3_IRQHandler+0x140>)
 80014ea:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80014ee:	6113      	str	r3, [r2, #16]
	GPIOA->BRR = (1<<15);
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <TIM3_IRQHandler+0x12c>)
 80014f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014f6:	615a      	str	r2, [r3, #20]
	if(currentEncoder&4) GPIOA->BSRR = (1<<15); //BLOODY SOLDER DAG!!! Shorted out the pins giving the result in DS14
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <TIM3_IRQHandler+0x130>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <TIM3_IRQHandler+0x116>
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <TIM3_IRQHandler+0x12c>)
 8001508:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800150c:	611a      	str	r2, [r3, #16]

	GPIOA->BRR = 1<<6;
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <TIM3_IRQHandler+0x12c>)
 8001510:	2240      	movs	r2, #64	; 0x40
 8001512:	615a      	str	r2, [r3, #20]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001514:	4809      	ldr	r0, [pc, #36]	; (800153c <TIM3_IRQHandler+0x144>)
 8001516:	f004 fcdc 	bl	8005ed2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40010800 	.word	0x40010800
 8001528:	200001b2 	.word	0x200001b2
 800152c:	200001b4 	.word	0x200001b4
 8001530:	20000004 	.word	0x20000004
 8001534:	200001bc 	.word	0x200001bc
 8001538:	40011000 	.word	0x40011000
 800153c:	200004e0 	.word	0x200004e0

08001540 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0

	//hmmm it got stuck in here... coz im an idiot...



	GPIOA->BSRR = 1<<7;
 8001544:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <I2C1_EV_IRQHandler+0xc0>)
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	611a      	str	r2, [r3, #16]
	if(I2C1->SR1 & (1<<2)){ //BTF is set
 800154a:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <I2C1_EV_IRQHandler+0xc4>)
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	2b00      	cmp	r3, #0
 8001554:	d04b      	beq.n	80015ee <I2C1_EV_IRQHandler+0xae>

		//might have to move this to the DMA isr
		I2C1->CR2 &= ~(1<<11); //disable I2C1 DMA requesting
 8001556:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <I2C1_EV_IRQHandler+0xc4>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4a2a      	ldr	r2, [pc, #168]	; (8001604 <I2C1_EV_IRQHandler+0xc4>)
 800155c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001560:	6053      	str	r3, [r2, #4]

		//reconfigure the DMA
		if(DMA1->ISR & (1<<21)){ //channel 6 transfer complete
 8001562:	4b29      	ldr	r3, [pc, #164]	; (8001608 <I2C1_EV_IRQHandler+0xc8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d029      	beq.n	80015c2 <I2C1_EV_IRQHandler+0x82>


			DMA1_Channel6->CCR &= ~1; //disable DMA1 Channel 6 for reconfiguring
 800156e:	4b27      	ldr	r3, [pc, #156]	; (800160c <I2C1_EV_IRQHandler+0xcc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a26      	ldr	r2, [pc, #152]	; (800160c <I2C1_EV_IRQHandler+0xcc>)
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	6013      	str	r3, [r2, #0]
			if(currentLEDRow == 3) currentLEDRow = 0;
 800157a:	4b25      	ldr	r3, [pc, #148]	; (8001610 <I2C1_EV_IRQHandler+0xd0>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b03      	cmp	r3, #3
 8001582:	d103      	bne.n	800158c <I2C1_EV_IRQHandler+0x4c>
 8001584:	4b22      	ldr	r3, [pc, #136]	; (8001610 <I2C1_EV_IRQHandler+0xd0>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e006      	b.n	800159a <I2C1_EV_IRQHandler+0x5a>
			else currentLEDRow++;
 800158c:	4b20      	ldr	r3, [pc, #128]	; (8001610 <I2C1_EV_IRQHandler+0xd0>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	3301      	adds	r3, #1
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <I2C1_EV_IRQHandler+0xd0>)
 8001598:	701a      	strb	r2, [r3, #0]
			DMA1_Channel6->CNDTR = 3; //reload 3 bytes to transfer
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <I2C1_EV_IRQHandler+0xcc>)
 800159c:	2203      	movs	r2, #3
 800159e:	605a      	str	r2, [r3, #4]
			DMA1_Channel6->CMAR = &(LEDMatrixBuffer[currentLEDRow*3]); //set next target
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <I2C1_EV_IRQHandler+0xd0>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	4a19      	ldr	r2, [pc, #100]	; (8001614 <I2C1_EV_IRQHandler+0xd4>)
 80015b0:	441a      	add	r2, r3
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <I2C1_EV_IRQHandler+0xcc>)
 80015b4:	60da      	str	r2, [r3, #12]
			DMA1_Channel6->CCR |= 1; //enable DMA1 Channel 6
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <I2C1_EV_IRQHandler+0xcc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a14      	ldr	r2, [pc, #80]	; (800160c <I2C1_EV_IRQHandler+0xcc>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6013      	str	r3, [r2, #0]

		}

		I2C1->CR1 |= (1<<8); //if BTF is set, send restart condition
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <I2C1_EV_IRQHandler+0xc4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a0f      	ldr	r2, [pc, #60]	; (8001604 <I2C1_EV_IRQHandler+0xc4>)
 80015c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015cc:	6013      	str	r3, [r2, #0]
		while ((I2C1->SR1 & 1) == 0); //clear SB
 80015ce:	bf00      	nop
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <I2C1_EV_IRQHandler+0xc4>)
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f9      	beq.n	80015d0 <I2C1_EV_IRQHandler+0x90>
		I2C1->DR = LEDMatrix_Address; //address the MCP23017
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <I2C1_EV_IRQHandler+0xc4>)
 80015de:	2248      	movs	r2, #72	; 0x48
 80015e0:	611a      	str	r2, [r3, #16]


		I2C1->CR2 |= (1<<11); //enable DMA Requests
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <I2C1_EV_IRQHandler+0xc4>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4a07      	ldr	r2, [pc, #28]	; (8001604 <I2C1_EV_IRQHandler+0xc4>)
 80015e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015ec:	6053      	str	r3, [r2, #4]
	}

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80015ee:	480a      	ldr	r0, [pc, #40]	; (8001618 <I2C1_EV_IRQHandler+0xd8>)
 80015f0:	f001 f846 	bl	8002680 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */
  	GPIOA->BRR = 1<<7;
 80015f4:	4b02      	ldr	r3, [pc, #8]	; (8001600 <I2C1_EV_IRQHandler+0xc0>)
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	615a      	str	r2, [r3, #20]
  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40010800 	.word	0x40010800
 8001604:	40005400 	.word	0x40005400
 8001608:	40020000 	.word	0x40020000
 800160c:	4002006c 	.word	0x4002006c
 8001610:	200001d2 	.word	0x200001d2
 8001614:	200005a0 	.word	0x200005a0
 8001618:	20000438 	.word	0x20000438

0800161c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <Reset_Handler>:
 8001628:	2100      	movs	r1, #0
 800162a:	e003      	b.n	8001634 <LoopCopyDataInit>

0800162c <CopyDataInit>:
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <LoopFillZerobss+0x14>)
 800162e:	585b      	ldr	r3, [r3, r1]
 8001630:	5043      	str	r3, [r0, r1]
 8001632:	3104      	adds	r1, #4

08001634 <LoopCopyDataInit>:
 8001634:	480a      	ldr	r0, [pc, #40]	; (8001660 <LoopFillZerobss+0x18>)
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <LoopFillZerobss+0x1c>)
 8001638:	1842      	adds	r2, r0, r1
 800163a:	429a      	cmp	r2, r3
 800163c:	d3f6      	bcc.n	800162c <CopyDataInit>
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <LoopFillZerobss+0x20>)
 8001640:	e002      	b.n	8001648 <LoopFillZerobss>

08001642 <FillZerobss>:
 8001642:	2300      	movs	r3, #0
 8001644:	f842 3b04 	str.w	r3, [r2], #4

08001648 <LoopFillZerobss>:
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <LoopFillZerobss+0x24>)
 800164a:	429a      	cmp	r2, r3
 800164c:	d3f9      	bcc.n	8001642 <FillZerobss>
 800164e:	f7ff ffe5 	bl	800161c <SystemInit>
 8001652:	f008 ffeb 	bl	800a62c <__libc_init_array>
 8001656:	f7ff f9af 	bl	80009b8 <main>
 800165a:	4770      	bx	lr
 800165c:	0800a720 	.word	0x0800a720
 8001660:	20000000 	.word	0x20000000
 8001664:	20000194 	.word	0x20000194
 8001668:	20000194 	.word	0x20000194
 800166c:	20001530 	.word	0x20001530

08001670 <ADC1_2_IRQHandler>:
 8001670:	e7fe      	b.n	8001670 <ADC1_2_IRQHandler>
	...

08001674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <HAL_Init+0x28>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a07      	ldr	r2, [pc, #28]	; (800169c <HAL_Init+0x28>)
 800167e:	f043 0310 	orr.w	r3, r3, #16
 8001682:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001684:	2003      	movs	r0, #3
 8001686:	f000 fb2d 	bl	8001ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168a:	2000      	movs	r0, #0
 800168c:	f000 f808 	bl	80016a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001690:	f7ff fc9e 	bl	8000fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40022000 	.word	0x40022000

080016a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_InitTick+0x54>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x58>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fb45 	bl	8001d4e <HAL_SYSTICK_Config>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00e      	b.n	80016ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	d80a      	bhi.n	80016ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f000 fb0d 	bl	8001cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e0:	4a06      	ldr	r2, [pc, #24]	; (80016fc <HAL_InitTick+0x5c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000018 	.word	0x20000018
 80016f8:	20000020 	.word	0x20000020
 80016fc:	2000001c 	.word	0x2000001c

08001700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <HAL_IncTick+0x1c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_IncTick+0x20>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a03      	ldr	r2, [pc, #12]	; (8001720 <HAL_IncTick+0x20>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	20000020 	.word	0x20000020
 8001720:	200005ac 	.word	0x200005ac

08001724 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b02      	ldr	r3, [pc, #8]	; (8001734 <HAL_GetTick+0x10>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	200005ac 	.word	0x200005ac

08001738 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0be      	b.n	80018d8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	2b00      	cmp	r3, #0
 8001766:	d109      	bne.n	800177c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fc5c 	bl	8001034 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f9ab 	bl	8001ad8 <ADC_ConversionStop_Disable>
 8001782:	4603      	mov	r3, r0
 8001784:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	2b00      	cmp	r3, #0
 8001790:	f040 8099 	bne.w	80018c6 <HAL_ADC_Init+0x18e>
 8001794:	7dfb      	ldrb	r3, [r7, #23]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f040 8095 	bne.w	80018c6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017a4:	f023 0302 	bic.w	r3, r3, #2
 80017a8:	f043 0202 	orr.w	r2, r3, #2
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7b1b      	ldrb	r3, [r3, #12]
 80017be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017d0:	d003      	beq.n	80017da <HAL_ADC_Init+0xa2>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d102      	bne.n	80017e0 <HAL_ADC_Init+0xa8>
 80017da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017de:	e000      	b.n	80017e2 <HAL_ADC_Init+0xaa>
 80017e0:	2300      	movs	r3, #0
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7d1b      	ldrb	r3, [r3, #20]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d119      	bne.n	8001824 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7b1b      	ldrb	r3, [r3, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d109      	bne.n	800180c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	035a      	lsls	r2, r3, #13
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	e00b      	b.n	8001824 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	f043 0220 	orr.w	r2, r3, #32
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	f043 0201 	orr.w	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	430a      	orrs	r2, r1
 8001836:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_ADC_Init+0x1a8>)
 8001840:	4013      	ands	r3, r2
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	68b9      	ldr	r1, [r7, #8]
 8001848:	430b      	orrs	r3, r1
 800184a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001854:	d003      	beq.n	800185e <HAL_ADC_Init+0x126>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d104      	bne.n	8001868 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	3b01      	subs	r3, #1
 8001864:	051b      	lsls	r3, r3, #20
 8001866:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	430a      	orrs	r2, r1
 800187a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <HAL_ADC_Init+0x1ac>)
 8001884:	4013      	ands	r3, r2
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	429a      	cmp	r2, r3
 800188a:	d10b      	bne.n	80018a4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	f023 0303 	bic.w	r3, r3, #3
 800189a:	f043 0201 	orr.w	r2, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018a2:	e018      	b.n	80018d6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	f023 0312 	bic.w	r3, r3, #18
 80018ac:	f043 0210 	orr.w	r2, r3, #16
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	f043 0201 	orr.w	r2, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018c4:	e007      	b.n	80018d6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ca:	f043 0210 	orr.w	r2, r3, #16
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	ffe1f7fd 	.word	0xffe1f7fd
 80018e4:	ff1f0efe 	.word	0xff1f0efe

080018e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x20>
 8001904:	2302      	movs	r3, #2
 8001906:	e0dc      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x1da>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b06      	cmp	r3, #6
 8001916:	d81c      	bhi.n	8001952 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	3b05      	subs	r3, #5
 800192a:	221f      	movs	r2, #31
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	4019      	ands	r1, r3
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	3b05      	subs	r3, #5
 8001944:	fa00 f203 	lsl.w	r2, r0, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	635a      	str	r2, [r3, #52]	; 0x34
 8001950:	e03c      	b.n	80019cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d81c      	bhi.n	8001994 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	3b23      	subs	r3, #35	; 0x23
 800196c:	221f      	movs	r2, #31
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	4019      	ands	r1, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	3b23      	subs	r3, #35	; 0x23
 8001986:	fa00 f203 	lsl.w	r2, r0, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	631a      	str	r2, [r3, #48]	; 0x30
 8001992:	e01b      	b.n	80019cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	3b41      	subs	r3, #65	; 0x41
 80019a6:	221f      	movs	r2, #31
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	4019      	ands	r1, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	3b41      	subs	r3, #65	; 0x41
 80019c0:	fa00 f203 	lsl.w	r2, r0, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b09      	cmp	r3, #9
 80019d2:	d91c      	bls.n	8001a0e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68d9      	ldr	r1, [r3, #12]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4613      	mov	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4413      	add	r3, r2
 80019e4:	3b1e      	subs	r3, #30
 80019e6:	2207      	movs	r2, #7
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4019      	ands	r1, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6898      	ldr	r0, [r3, #8]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	3b1e      	subs	r3, #30
 8001a00:	fa00 f203 	lsl.w	r2, r0, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	e019      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6919      	ldr	r1, [r3, #16]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	2207      	movs	r2, #7
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	4019      	ands	r1, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6898      	ldr	r0, [r3, #8]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	fa00 f203 	lsl.w	r2, r0, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d003      	beq.n	8001a52 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a4e:	2b11      	cmp	r3, #17
 8001a50:	d132      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <HAL_ADC_ConfigChannel+0x1e4>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d125      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d126      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a78:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b10      	cmp	r3, #16
 8001a80:	d11a      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a13      	ldr	r2, [pc, #76]	; (8001ad4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	0c9a      	lsrs	r2, r3, #18
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a98:	e002      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f9      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x1b2>
 8001aa6:	e007      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	f043 0220 	orr.w	r2, r3, #32
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	40012400 	.word	0x40012400
 8001ad0:	20000018 	.word	0x20000018
 8001ad4:	431bde83 	.word	0x431bde83

08001ad8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d127      	bne.n	8001b42 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0201 	bic.w	r2, r2, #1
 8001b00:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b02:	f7ff fe0f 	bl	8001724 <HAL_GetTick>
 8001b06:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b08:	e014      	b.n	8001b34 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b0a:	f7ff fe0b 	bl	8001724 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d90d      	bls.n	8001b34 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	f043 0210 	orr.w	r2, r3, #16
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e007      	b.n	8001b44 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d0e3      	beq.n	8001b0a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <__NVIC_SetPriorityGrouping>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	60d3      	str	r3, [r2, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <__NVIC_GetPriorityGrouping+0x18>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	db0b      	blt.n	8001bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	f003 021f 	and.w	r2, r3, #31
 8001bc8:	4906      	ldr	r1, [pc, #24]	; (8001be4 <__NVIC_EnableIRQ+0x34>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	db0a      	blt.n	8001c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	490c      	ldr	r1, [pc, #48]	; (8001c34 <__NVIC_SetPriority+0x4c>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	0112      	lsls	r2, r2, #4
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c10:	e00a      	b.n	8001c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4908      	ldr	r1, [pc, #32]	; (8001c38 <__NVIC_SetPriority+0x50>)
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	3b04      	subs	r3, #4
 8001c20:	0112      	lsls	r2, r2, #4
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	440b      	add	r3, r1
 8001c26:	761a      	strb	r2, [r3, #24]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e100 	.word	0xe000e100
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f1c3 0307 	rsb	r3, r3, #7
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	bf28      	it	cs
 8001c5a:	2304      	movcs	r3, #4
 8001c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3304      	adds	r3, #4
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d902      	bls.n	8001c6c <NVIC_EncodePriority+0x30>
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3b03      	subs	r3, #3
 8001c6a:	e000      	b.n	8001c6e <NVIC_EncodePriority+0x32>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	401a      	ands	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c84:	f04f 31ff 	mov.w	r1, #4294967295
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	43d9      	mvns	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	4313      	orrs	r3, r2
         );
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3724      	adds	r7, #36	; 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cb0:	d301      	bcc.n	8001cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00f      	b.n	8001cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <SysTick_Config+0x40>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f7ff ff90 	bl	8001be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <SysTick_Config+0x40>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <SysTick_Config+0x40>)
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	e000e010 	.word	0xe000e010

08001ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff2d 	bl	8001b4c <__NVIC_SetPriorityGrouping>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d0c:	f7ff ff42 	bl	8001b94 <__NVIC_GetPriorityGrouping>
 8001d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	6978      	ldr	r0, [r7, #20]
 8001d18:	f7ff ff90 	bl	8001c3c <NVIC_EncodePriority>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff5f 	bl	8001be8 <__NVIC_SetPriority>
}
 8001d2a:	bf00      	nop
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff35 	bl	8001bb0 <__NVIC_EnableIRQ>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ffa2 	bl	8001ca0 <SysTick_Config>
 8001d5c:	4603      	mov	r3, r0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e043      	b.n	8001e06 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <HAL_DMA_Init+0xa8>)
 8001d86:	4413      	add	r3, r2
 8001d88:	4a22      	ldr	r2, [pc, #136]	; (8001e14 <HAL_DMA_Init+0xac>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	009a      	lsls	r2, r3, #2
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a1f      	ldr	r2, [pc, #124]	; (8001e18 <HAL_DMA_Init+0xb0>)
 8001d9a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001db2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001db6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	bffdfff8 	.word	0xbffdfff8
 8001e14:	cccccccd 	.word	0xcccccccd
 8001e18:	40020000 	.word	0x40020000

08001e1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d005      	beq.n	8001e3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2204      	movs	r2, #4
 8001e36:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	e051      	b.n	8001ee2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 020e 	bic.w	r2, r2, #14
 8001e4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0201 	bic.w	r2, r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a22      	ldr	r2, [pc, #136]	; (8001eec <HAL_DMA_Abort_IT+0xd0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d029      	beq.n	8001ebc <HAL_DMA_Abort_IT+0xa0>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a20      	ldr	r2, [pc, #128]	; (8001ef0 <HAL_DMA_Abort_IT+0xd4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d022      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x9c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1f      	ldr	r2, [pc, #124]	; (8001ef4 <HAL_DMA_Abort_IT+0xd8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d01a      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x96>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <HAL_DMA_Abort_IT+0xdc>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d012      	beq.n	8001eac <HAL_DMA_Abort_IT+0x90>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <HAL_DMA_Abort_IT+0xe0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00a      	beq.n	8001ea6 <HAL_DMA_Abort_IT+0x8a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1a      	ldr	r2, [pc, #104]	; (8001f00 <HAL_DMA_Abort_IT+0xe4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d102      	bne.n	8001ea0 <HAL_DMA_Abort_IT+0x84>
 8001e9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e9e:	e00e      	b.n	8001ebe <HAL_DMA_Abort_IT+0xa2>
 8001ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ea4:	e00b      	b.n	8001ebe <HAL_DMA_Abort_IT+0xa2>
 8001ea6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eaa:	e008      	b.n	8001ebe <HAL_DMA_Abort_IT+0xa2>
 8001eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb0:	e005      	b.n	8001ebe <HAL_DMA_Abort_IT+0xa2>
 8001eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb6:	e002      	b.n	8001ebe <HAL_DMA_Abort_IT+0xa2>
 8001eb8:	2310      	movs	r3, #16
 8001eba:	e000      	b.n	8001ebe <HAL_DMA_Abort_IT+0xa2>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <HAL_DMA_Abort_IT+0xe8>)
 8001ec0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	4798      	blx	r3
    } 
  }
  return status;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40020008 	.word	0x40020008
 8001ef0:	4002001c 	.word	0x4002001c
 8001ef4:	40020030 	.word	0x40020030
 8001ef8:	40020044 	.word	0x40020044
 8001efc:	40020058 	.word	0x40020058
 8001f00:	4002006c 	.word	0x4002006c
 8001f04:	40020000 	.word	0x40020000

08001f08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	2204      	movs	r2, #4
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d04f      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0xc8>
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d04a      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d107      	bne.n	8001f58 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0204 	bic.w	r2, r2, #4
 8001f56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a66      	ldr	r2, [pc, #408]	; (80020f8 <HAL_DMA_IRQHandler+0x1f0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d029      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xae>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a65      	ldr	r2, [pc, #404]	; (80020fc <HAL_DMA_IRQHandler+0x1f4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d022      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xaa>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a63      	ldr	r2, [pc, #396]	; (8002100 <HAL_DMA_IRQHandler+0x1f8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01a      	beq.n	8001fac <HAL_DMA_IRQHandler+0xa4>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a62      	ldr	r2, [pc, #392]	; (8002104 <HAL_DMA_IRQHandler+0x1fc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d012      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x9e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a60      	ldr	r2, [pc, #384]	; (8002108 <HAL_DMA_IRQHandler+0x200>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00a      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x98>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a5f      	ldr	r2, [pc, #380]	; (800210c <HAL_DMA_IRQHandler+0x204>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d102      	bne.n	8001f9a <HAL_DMA_IRQHandler+0x92>
 8001f94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f98:	e00e      	b.n	8001fb8 <HAL_DMA_IRQHandler+0xb0>
 8001f9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f9e:	e00b      	b.n	8001fb8 <HAL_DMA_IRQHandler+0xb0>
 8001fa0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fa4:	e008      	b.n	8001fb8 <HAL_DMA_IRQHandler+0xb0>
 8001fa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001faa:	e005      	b.n	8001fb8 <HAL_DMA_IRQHandler+0xb0>
 8001fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb0:	e002      	b.n	8001fb8 <HAL_DMA_IRQHandler+0xb0>
 8001fb2:	2340      	movs	r3, #64	; 0x40
 8001fb4:	e000      	b.n	8001fb8 <HAL_DMA_IRQHandler+0xb0>
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	4a55      	ldr	r2, [pc, #340]	; (8002110 <HAL_DMA_IRQHandler+0x208>)
 8001fba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 8094 	beq.w	80020ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001fce:	e08e      	b.n	80020ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d056      	beq.n	800208e <HAL_DMA_IRQHandler+0x186>
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d051      	beq.n	800208e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10b      	bne.n	8002010 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 020a 	bic.w	r2, r2, #10
 8002006:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a38      	ldr	r2, [pc, #224]	; (80020f8 <HAL_DMA_IRQHandler+0x1f0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d029      	beq.n	800206e <HAL_DMA_IRQHandler+0x166>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a37      	ldr	r2, [pc, #220]	; (80020fc <HAL_DMA_IRQHandler+0x1f4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d022      	beq.n	800206a <HAL_DMA_IRQHandler+0x162>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a35      	ldr	r2, [pc, #212]	; (8002100 <HAL_DMA_IRQHandler+0x1f8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d01a      	beq.n	8002064 <HAL_DMA_IRQHandler+0x15c>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a34      	ldr	r2, [pc, #208]	; (8002104 <HAL_DMA_IRQHandler+0x1fc>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d012      	beq.n	800205e <HAL_DMA_IRQHandler+0x156>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a32      	ldr	r2, [pc, #200]	; (8002108 <HAL_DMA_IRQHandler+0x200>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00a      	beq.n	8002058 <HAL_DMA_IRQHandler+0x150>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a31      	ldr	r2, [pc, #196]	; (800210c <HAL_DMA_IRQHandler+0x204>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d102      	bne.n	8002052 <HAL_DMA_IRQHandler+0x14a>
 800204c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002050:	e00e      	b.n	8002070 <HAL_DMA_IRQHandler+0x168>
 8002052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002056:	e00b      	b.n	8002070 <HAL_DMA_IRQHandler+0x168>
 8002058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800205c:	e008      	b.n	8002070 <HAL_DMA_IRQHandler+0x168>
 800205e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002062:	e005      	b.n	8002070 <HAL_DMA_IRQHandler+0x168>
 8002064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002068:	e002      	b.n	8002070 <HAL_DMA_IRQHandler+0x168>
 800206a:	2320      	movs	r3, #32
 800206c:	e000      	b.n	8002070 <HAL_DMA_IRQHandler+0x168>
 800206e:	2302      	movs	r3, #2
 8002070:	4a27      	ldr	r2, [pc, #156]	; (8002110 <HAL_DMA_IRQHandler+0x208>)
 8002072:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	2b00      	cmp	r3, #0
 8002082:	d034      	beq.n	80020ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800208c:	e02f      	b.n	80020ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	2208      	movs	r2, #8
 8002094:	409a      	lsls	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d028      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x1e8>
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d023      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 020e 	bic.w	r2, r2, #14
 80020b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c0:	2101      	movs	r1, #1
 80020c2:	fa01 f202 	lsl.w	r2, r1, r2
 80020c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d004      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4798      	blx	r3
    }
  }
  return;
 80020ee:	bf00      	nop
 80020f0:	bf00      	nop
}
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40020008 	.word	0x40020008
 80020fc:	4002001c 	.word	0x4002001c
 8002100:	40020030 	.word	0x40020030
 8002104:	40020044 	.word	0x40020044
 8002108:	40020058 	.word	0x40020058
 800210c:	4002006c 	.word	0x4002006c
 8002110:	40020000 	.word	0x40020000

08002114 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800212c:	b480      	push	{r7}
 800212e:	b08b      	sub	sp, #44	; 0x2c
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213e:	e127      	b.n	8002390 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002140:	2201      	movs	r2, #1
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	429a      	cmp	r2, r3
 800215a:	f040 8116 	bne.w	800238a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b12      	cmp	r3, #18
 8002164:	d034      	beq.n	80021d0 <HAL_GPIO_Init+0xa4>
 8002166:	2b12      	cmp	r3, #18
 8002168:	d80d      	bhi.n	8002186 <HAL_GPIO_Init+0x5a>
 800216a:	2b02      	cmp	r3, #2
 800216c:	d02b      	beq.n	80021c6 <HAL_GPIO_Init+0x9a>
 800216e:	2b02      	cmp	r3, #2
 8002170:	d804      	bhi.n	800217c <HAL_GPIO_Init+0x50>
 8002172:	2b00      	cmp	r3, #0
 8002174:	d031      	beq.n	80021da <HAL_GPIO_Init+0xae>
 8002176:	2b01      	cmp	r3, #1
 8002178:	d01c      	beq.n	80021b4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800217a:	e048      	b.n	800220e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800217c:	2b03      	cmp	r3, #3
 800217e:	d043      	beq.n	8002208 <HAL_GPIO_Init+0xdc>
 8002180:	2b11      	cmp	r3, #17
 8002182:	d01b      	beq.n	80021bc <HAL_GPIO_Init+0x90>
          break;
 8002184:	e043      	b.n	800220e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002186:	4a89      	ldr	r2, [pc, #548]	; (80023ac <HAL_GPIO_Init+0x280>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d026      	beq.n	80021da <HAL_GPIO_Init+0xae>
 800218c:	4a87      	ldr	r2, [pc, #540]	; (80023ac <HAL_GPIO_Init+0x280>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d806      	bhi.n	80021a0 <HAL_GPIO_Init+0x74>
 8002192:	4a87      	ldr	r2, [pc, #540]	; (80023b0 <HAL_GPIO_Init+0x284>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d020      	beq.n	80021da <HAL_GPIO_Init+0xae>
 8002198:	4a86      	ldr	r2, [pc, #536]	; (80023b4 <HAL_GPIO_Init+0x288>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01d      	beq.n	80021da <HAL_GPIO_Init+0xae>
          break;
 800219e:	e036      	b.n	800220e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021a0:	4a85      	ldr	r2, [pc, #532]	; (80023b8 <HAL_GPIO_Init+0x28c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d019      	beq.n	80021da <HAL_GPIO_Init+0xae>
 80021a6:	4a85      	ldr	r2, [pc, #532]	; (80023bc <HAL_GPIO_Init+0x290>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d016      	beq.n	80021da <HAL_GPIO_Init+0xae>
 80021ac:	4a84      	ldr	r2, [pc, #528]	; (80023c0 <HAL_GPIO_Init+0x294>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d013      	beq.n	80021da <HAL_GPIO_Init+0xae>
          break;
 80021b2:	e02c      	b.n	800220e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	623b      	str	r3, [r7, #32]
          break;
 80021ba:	e028      	b.n	800220e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	3304      	adds	r3, #4
 80021c2:	623b      	str	r3, [r7, #32]
          break;
 80021c4:	e023      	b.n	800220e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	3308      	adds	r3, #8
 80021cc:	623b      	str	r3, [r7, #32]
          break;
 80021ce:	e01e      	b.n	800220e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	330c      	adds	r3, #12
 80021d6:	623b      	str	r3, [r7, #32]
          break;
 80021d8:	e019      	b.n	800220e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d102      	bne.n	80021e8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021e2:	2304      	movs	r3, #4
 80021e4:	623b      	str	r3, [r7, #32]
          break;
 80021e6:	e012      	b.n	800220e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d105      	bne.n	80021fc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021f0:	2308      	movs	r3, #8
 80021f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	611a      	str	r2, [r3, #16]
          break;
 80021fa:	e008      	b.n	800220e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021fc:	2308      	movs	r3, #8
 80021fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	615a      	str	r2, [r3, #20]
          break;
 8002206:	e002      	b.n	800220e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002208:	2300      	movs	r3, #0
 800220a:	623b      	str	r3, [r7, #32]
          break;
 800220c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	2bff      	cmp	r3, #255	; 0xff
 8002212:	d801      	bhi.n	8002218 <HAL_GPIO_Init+0xec>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	e001      	b.n	800221c <HAL_GPIO_Init+0xf0>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3304      	adds	r3, #4
 800221c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	2bff      	cmp	r3, #255	; 0xff
 8002222:	d802      	bhi.n	800222a <HAL_GPIO_Init+0xfe>
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	e002      	b.n	8002230 <HAL_GPIO_Init+0x104>
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	3b08      	subs	r3, #8
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	210f      	movs	r1, #15
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	401a      	ands	r2, r3
 8002242:	6a39      	ldr	r1, [r7, #32]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	431a      	orrs	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 8096 	beq.w	800238a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800225e:	4b59      	ldr	r3, [pc, #356]	; (80023c4 <HAL_GPIO_Init+0x298>)
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	4a58      	ldr	r2, [pc, #352]	; (80023c4 <HAL_GPIO_Init+0x298>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6193      	str	r3, [r2, #24]
 800226a:	4b56      	ldr	r3, [pc, #344]	; (80023c4 <HAL_GPIO_Init+0x298>)
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002276:	4a54      	ldr	r2, [pc, #336]	; (80023c8 <HAL_GPIO_Init+0x29c>)
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	3302      	adds	r3, #2
 800227e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002282:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	220f      	movs	r2, #15
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4013      	ands	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a4b      	ldr	r2, [pc, #300]	; (80023cc <HAL_GPIO_Init+0x2a0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d013      	beq.n	80022ca <HAL_GPIO_Init+0x19e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a4a      	ldr	r2, [pc, #296]	; (80023d0 <HAL_GPIO_Init+0x2a4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d00d      	beq.n	80022c6 <HAL_GPIO_Init+0x19a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a49      	ldr	r2, [pc, #292]	; (80023d4 <HAL_GPIO_Init+0x2a8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d007      	beq.n	80022c2 <HAL_GPIO_Init+0x196>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a48      	ldr	r2, [pc, #288]	; (80023d8 <HAL_GPIO_Init+0x2ac>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d101      	bne.n	80022be <HAL_GPIO_Init+0x192>
 80022ba:	2303      	movs	r3, #3
 80022bc:	e006      	b.n	80022cc <HAL_GPIO_Init+0x1a0>
 80022be:	2304      	movs	r3, #4
 80022c0:	e004      	b.n	80022cc <HAL_GPIO_Init+0x1a0>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e002      	b.n	80022cc <HAL_GPIO_Init+0x1a0>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_GPIO_Init+0x1a0>
 80022ca:	2300      	movs	r3, #0
 80022cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ce:	f002 0203 	and.w	r2, r2, #3
 80022d2:	0092      	lsls	r2, r2, #2
 80022d4:	4093      	lsls	r3, r2
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4313      	orrs	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022dc:	493a      	ldr	r1, [pc, #232]	; (80023c8 <HAL_GPIO_Init+0x29c>)
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	3302      	adds	r3, #2
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d006      	beq.n	8002304 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022f6:	4b39      	ldr	r3, [pc, #228]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4938      	ldr	r1, [pc, #224]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
 8002302:	e006      	b.n	8002312 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002304:	4b35      	ldr	r3, [pc, #212]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	43db      	mvns	r3, r3
 800230c:	4933      	ldr	r1, [pc, #204]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 800230e:	4013      	ands	r3, r2
 8002310:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d006      	beq.n	800232c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800231e:	4b2f      	ldr	r3, [pc, #188]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	492e      	ldr	r1, [pc, #184]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	604b      	str	r3, [r1, #4]
 800232a:	e006      	b.n	800233a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800232c:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	43db      	mvns	r3, r3
 8002334:	4929      	ldr	r1, [pc, #164]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 8002336:	4013      	ands	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d006      	beq.n	8002354 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002346:	4b25      	ldr	r3, [pc, #148]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	4924      	ldr	r1, [pc, #144]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
 8002352:	e006      	b.n	8002362 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002354:	4b21      	ldr	r3, [pc, #132]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	43db      	mvns	r3, r3
 800235c:	491f      	ldr	r1, [pc, #124]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 800235e:	4013      	ands	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d006      	beq.n	800237c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800236e:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	491a      	ldr	r1, [pc, #104]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	60cb      	str	r3, [r1, #12]
 800237a:	e006      	b.n	800238a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800237c:	4b17      	ldr	r3, [pc, #92]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	43db      	mvns	r3, r3
 8002384:	4915      	ldr	r1, [pc, #84]	; (80023dc <HAL_GPIO_Init+0x2b0>)
 8002386:	4013      	ands	r3, r2
 8002388:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	3301      	adds	r3, #1
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	fa22 f303 	lsr.w	r3, r2, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	f47f aed0 	bne.w	8002140 <HAL_GPIO_Init+0x14>
  }
}
 80023a0:	bf00      	nop
 80023a2:	372c      	adds	r7, #44	; 0x2c
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	10210000 	.word	0x10210000
 80023b0:	10110000 	.word	0x10110000
 80023b4:	10120000 	.word	0x10120000
 80023b8:	10310000 	.word	0x10310000
 80023bc:	10320000 	.word	0x10320000
 80023c0:	10220000 	.word	0x10220000
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40010000 	.word	0x40010000
 80023cc:	40010800 	.word	0x40010800
 80023d0:	40010c00 	.word	0x40010c00
 80023d4:	40011000 	.word	0x40011000
 80023d8:	40011400 	.word	0x40011400
 80023dc:	40010400 	.word	0x40010400

080023e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
 80023ec:	4613      	mov	r3, r2
 80023ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023f0:	787b      	ldrb	r3, [r7, #1]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f6:	887a      	ldrh	r2, [r7, #2]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023fc:	e003      	b.n	8002406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023fe:	887b      	ldrh	r3, [r7, #2]
 8002400:	041a      	lsls	r2, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	611a      	str	r2, [r3, #16]
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e11f      	b.n	8002662 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d106      	bne.n	800243c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7fe fe38 	bl	80010ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2224      	movs	r2, #36	; 0x24
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002462:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002472:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002474:	f003 fbf6 	bl	8005c64 <HAL_RCC_GetPCLK1Freq>
 8002478:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4a7b      	ldr	r2, [pc, #492]	; (800266c <HAL_I2C_Init+0x25c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d807      	bhi.n	8002494 <HAL_I2C_Init+0x84>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4a7a      	ldr	r2, [pc, #488]	; (8002670 <HAL_I2C_Init+0x260>)
 8002488:	4293      	cmp	r3, r2
 800248a:	bf94      	ite	ls
 800248c:	2301      	movls	r3, #1
 800248e:	2300      	movhi	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	e006      	b.n	80024a2 <HAL_I2C_Init+0x92>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4a77      	ldr	r2, [pc, #476]	; (8002674 <HAL_I2C_Init+0x264>)
 8002498:	4293      	cmp	r3, r2
 800249a:	bf94      	ite	ls
 800249c:	2301      	movls	r3, #1
 800249e:	2300      	movhi	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e0db      	b.n	8002662 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4a72      	ldr	r2, [pc, #456]	; (8002678 <HAL_I2C_Init+0x268>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	0c9b      	lsrs	r3, r3, #18
 80024b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a64      	ldr	r2, [pc, #400]	; (800266c <HAL_I2C_Init+0x25c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d802      	bhi.n	80024e4 <HAL_I2C_Init+0xd4>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	3301      	adds	r3, #1
 80024e2:	e009      	b.n	80024f8 <HAL_I2C_Init+0xe8>
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024ea:	fb02 f303 	mul.w	r3, r2, r3
 80024ee:	4a63      	ldr	r2, [pc, #396]	; (800267c <HAL_I2C_Init+0x26c>)
 80024f0:	fba2 2303 	umull	r2, r3, r2, r3
 80024f4:	099b      	lsrs	r3, r3, #6
 80024f6:	3301      	adds	r3, #1
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	430b      	orrs	r3, r1
 80024fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800250a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4956      	ldr	r1, [pc, #344]	; (800266c <HAL_I2C_Init+0x25c>)
 8002514:	428b      	cmp	r3, r1
 8002516:	d80d      	bhi.n	8002534 <HAL_I2C_Init+0x124>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1e59      	subs	r1, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	fbb1 f3f3 	udiv	r3, r1, r3
 8002526:	3301      	adds	r3, #1
 8002528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252c:	2b04      	cmp	r3, #4
 800252e:	bf38      	it	cc
 8002530:	2304      	movcc	r3, #4
 8002532:	e04f      	b.n	80025d4 <HAL_I2C_Init+0x1c4>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d111      	bne.n	8002560 <HAL_I2C_Init+0x150>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1e58      	subs	r0, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	440b      	add	r3, r1
 800254a:	fbb0 f3f3 	udiv	r3, r0, r3
 800254e:	3301      	adds	r3, #1
 8002550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002554:	2b00      	cmp	r3, #0
 8002556:	bf0c      	ite	eq
 8002558:	2301      	moveq	r3, #1
 800255a:	2300      	movne	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	e012      	b.n	8002586 <HAL_I2C_Init+0x176>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1e58      	subs	r0, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	0099      	lsls	r1, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	fbb0 f3f3 	udiv	r3, r0, r3
 8002576:	3301      	adds	r3, #1
 8002578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf0c      	ite	eq
 8002580:	2301      	moveq	r3, #1
 8002582:	2300      	movne	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_I2C_Init+0x17e>
 800258a:	2301      	movs	r3, #1
 800258c:	e022      	b.n	80025d4 <HAL_I2C_Init+0x1c4>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10e      	bne.n	80025b4 <HAL_I2C_Init+0x1a4>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1e58      	subs	r0, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6859      	ldr	r1, [r3, #4]
 800259e:	460b      	mov	r3, r1
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	440b      	add	r3, r1
 80025a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a8:	3301      	adds	r3, #1
 80025aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025b2:	e00f      	b.n	80025d4 <HAL_I2C_Init+0x1c4>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1e58      	subs	r0, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	0099      	lsls	r1, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	6809      	ldr	r1, [r1, #0]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69da      	ldr	r2, [r3, #28]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002602:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6911      	ldr	r1, [r2, #16]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68d2      	ldr	r2, [r2, #12]
 800260e:	4311      	orrs	r1, r2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	430b      	orrs	r3, r1
 8002616:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695a      	ldr	r2, [r3, #20]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	000186a0 	.word	0x000186a0
 8002670:	001e847f 	.word	0x001e847f
 8002674:	003d08ff 	.word	0x003d08ff
 8002678:	431bde83 	.word	0x431bde83
 800267c:	10624dd3 	.word	0x10624dd3

08002680 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	2b10      	cmp	r3, #16
 80026ae:	d003      	beq.n	80026b8 <HAL_I2C_EV_IRQHandler+0x38>
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b40      	cmp	r3, #64	; 0x40
 80026b4:	f040 80bd 	bne.w	8002832 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10d      	bne.n	80026ee <HAL_I2C_EV_IRQHandler+0x6e>
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80026d8:	d003      	beq.n	80026e2 <HAL_I2C_EV_IRQHandler+0x62>
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80026e0:	d101      	bne.n	80026e6 <HAL_I2C_EV_IRQHandler+0x66>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_I2C_EV_IRQHandler+0x68>
 80026e6:	2300      	movs	r3, #0
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	f000 812e 	beq.w	800294a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00c      	beq.n	8002712 <HAL_I2C_EV_IRQHandler+0x92>
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	0a5b      	lsrs	r3, r3, #9
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d006      	beq.n	8002712 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f001 fb39 	bl	8003d7c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fcb1 	bl	8003072 <I2C_Master_SB>
 8002710:	e08e      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	08db      	lsrs	r3, r3, #3
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <HAL_I2C_EV_IRQHandler+0xb2>
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	0a5b      	lsrs	r3, r3, #9
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fd26 	bl	800317c <I2C_Master_ADD10>
 8002730:	e07e      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	085b      	lsrs	r3, r3, #1
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <HAL_I2C_EV_IRQHandler+0xd2>
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	0a5b      	lsrs	r3, r3, #9
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fd3f 	bl	80031ce <I2C_Master_ADDR>
 8002750:	e06e      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d037      	beq.n	80027ce <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800276c:	f000 80ef 	beq.w	800294e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	09db      	lsrs	r3, r3, #7
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00f      	beq.n	800279c <HAL_I2C_EV_IRQHandler+0x11c>
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	0a9b      	lsrs	r3, r3, #10
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d009      	beq.n	800279c <HAL_I2C_EV_IRQHandler+0x11c>
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d103      	bne.n	800279c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f93e 	bl	8002a16 <I2C_MasterTransmit_TXE>
 800279a:	e049      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80d2 	beq.w	800294e <HAL_I2C_EV_IRQHandler+0x2ce>
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	0a5b      	lsrs	r3, r3, #9
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80cb 	beq.w	800294e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b10      	cmp	r3, #16
 80027bc:	d103      	bne.n	80027c6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f9c5 	bl	8002b4e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027c4:	e0c3      	b.n	800294e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fa29 	bl	8002c1e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027cc:	e0bf      	b.n	800294e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027dc:	f000 80b7 	beq.w	800294e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	099b      	lsrs	r3, r3, #6
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00f      	beq.n	800280c <HAL_I2C_EV_IRQHandler+0x18c>
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	0a9b      	lsrs	r3, r3, #10
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d009      	beq.n	800280c <HAL_I2C_EV_IRQHandler+0x18c>
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d103      	bne.n	800280c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fa99 	bl	8002d3c <I2C_MasterReceive_RXNE>
 800280a:	e011      	b.n	8002830 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 809a 	beq.w	800294e <HAL_I2C_EV_IRQHandler+0x2ce>
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	0a5b      	lsrs	r3, r3, #9
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8093 	beq.w	800294e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fb38 	bl	8002e9e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800282e:	e08e      	b.n	800294e <HAL_I2C_EV_IRQHandler+0x2ce>
 8002830:	e08d      	b.n	800294e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d004      	beq.n	8002844 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	e007      	b.n	8002854 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	085b      	lsrs	r3, r3, #1
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d012      	beq.n	8002886 <HAL_I2C_EV_IRQHandler+0x206>
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	0a5b      	lsrs	r3, r3, #9
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00c      	beq.n	8002886 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800287c:	69b9      	ldr	r1, [r7, #24]
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 fefc 	bl	800367c <I2C_Slave_ADDR>
 8002884:	e066      	b.n	8002954 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <HAL_I2C_EV_IRQHandler+0x226>
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	0a5b      	lsrs	r3, r3, #9
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 ff30 	bl	8003704 <I2C_Slave_STOPF>
 80028a4:	e056      	b.n	8002954 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80028a6:	7bbb      	ldrb	r3, [r7, #14]
 80028a8:	2b21      	cmp	r3, #33	; 0x21
 80028aa:	d002      	beq.n	80028b2 <HAL_I2C_EV_IRQHandler+0x232>
 80028ac:	7bbb      	ldrb	r3, [r7, #14]
 80028ae:	2b29      	cmp	r3, #41	; 0x29
 80028b0:	d125      	bne.n	80028fe <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	09db      	lsrs	r3, r3, #7
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00f      	beq.n	80028de <HAL_I2C_EV_IRQHandler+0x25e>
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	0a9b      	lsrs	r3, r3, #10
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <HAL_I2C_EV_IRQHandler+0x25e>
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d103      	bne.n	80028de <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fe14 	bl	8003504 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028dc:	e039      	b.n	8002952 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d033      	beq.n	8002952 <HAL_I2C_EV_IRQHandler+0x2d2>
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	0a5b      	lsrs	r3, r3, #9
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d02d      	beq.n	8002952 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fe41 	bl	800357e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028fc:	e029      	b.n	8002952 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	099b      	lsrs	r3, r3, #6
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00f      	beq.n	800292a <HAL_I2C_EV_IRQHandler+0x2aa>
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	0a9b      	lsrs	r3, r3, #10
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d009      	beq.n	800292a <HAL_I2C_EV_IRQHandler+0x2aa>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d103      	bne.n	800292a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fe4b 	bl	80035be <I2C_SlaveReceive_RXNE>
 8002928:	e014      	b.n	8002954 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	089b      	lsrs	r3, r3, #2
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00e      	beq.n	8002954 <HAL_I2C_EV_IRQHandler+0x2d4>
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	0a5b      	lsrs	r3, r3, #9
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 fe79 	bl	800363a <I2C_SlaveReceive_BTF>
 8002948:	e004      	b.n	8002954 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800294a:	bf00      	nop
 800294c:	e002      	b.n	8002954 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800294e:	bf00      	nop
 8002950:	e000      	b.n	8002954 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002952:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002954:	3720      	adds	r7, #32
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	460b      	mov	r3, r1
 80029ac:	70fb      	strb	r3, [r7, #3]
 80029ae:	4613      	mov	r3, r2
 80029b0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a24:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a2c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d150      	bne.n	8002ade <I2C_MasterTransmit_TXE+0xc8>
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	2b21      	cmp	r3, #33	; 0x21
 8002a40:	d14d      	bne.n	8002ade <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d01d      	beq.n	8002a84 <I2C_MasterTransmit_TXE+0x6e>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d01a      	beq.n	8002a84 <I2C_MasterTransmit_TXE+0x6e>
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a54:	d016      	beq.n	8002a84 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a64:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2211      	movs	r2, #17
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ff6c 	bl	800295a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a82:	e060      	b.n	8002b46 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a92:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b40      	cmp	r3, #64	; 0x40
 8002abc:	d107      	bne.n	8002ace <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ff81 	bl	80029ce <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002acc:	e03b      	b.n	8002b46 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ff3f 	bl	800295a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002adc:	e033      	b.n	8002b46 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	2b21      	cmp	r3, #33	; 0x21
 8002ae2:	d005      	beq.n	8002af0 <I2C_MasterTransmit_TXE+0xda>
 8002ae4:	7bbb      	ldrb	r3, [r7, #14]
 8002ae6:	2b40      	cmp	r3, #64	; 0x40
 8002ae8:	d12d      	bne.n	8002b46 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	2b22      	cmp	r3, #34	; 0x22
 8002aee:	d12a      	bne.n	8002b46 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d108      	bne.n	8002b0c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b08:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002b0a:	e01c      	b.n	8002b46 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b40      	cmp	r3, #64	; 0x40
 8002b16:	d103      	bne.n	8002b20 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f880 	bl	8002c1e <I2C_MemoryTransmit_TXE_BTF>
}
 8002b1e:	e012      	b.n	8002b46 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	781a      	ldrb	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b44:	e7ff      	b.n	8002b46 <I2C_MasterTransmit_TXE+0x130>
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b21      	cmp	r3, #33	; 0x21
 8002b66:	d156      	bne.n	8002c16 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d012      	beq.n	8002b98 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	781a      	ldrb	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002b96:	e03e      	b.n	8002c16 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d01d      	beq.n	8002bda <I2C_MasterTransmit_BTF+0x8c>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d01a      	beq.n	8002bda <I2C_MasterTransmit_BTF+0x8c>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002baa:	d016      	beq.n	8002bda <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bba:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2211      	movs	r2, #17
 8002bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff fec1 	bl	800295a <HAL_I2C_MasterTxCpltCallback>
}
 8002bd8:	e01d      	b.n	8002c16 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002be8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff fea2 	bl	800295a <HAL_I2C_MasterTxCpltCallback>
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d11d      	bne.n	8002c72 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d10b      	bne.n	8002c56 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4e:	1c9a      	adds	r2, r3, #2
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002c54:	e06e      	b.n	8002d34 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	121b      	asrs	r3, r3, #8
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c70:	e060      	b.n	8002d34 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d10b      	bne.n	8002c92 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002c90:	e050      	b.n	8002d34 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d14c      	bne.n	8002d34 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	2b22      	cmp	r3, #34	; 0x22
 8002c9e:	d108      	bne.n	8002cb2 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cae:	601a      	str	r2, [r3, #0]
}
 8002cb0:	e040      	b.n	8002d34 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d015      	beq.n	8002ce8 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	2b21      	cmp	r3, #33	; 0x21
 8002cc0:	d112      	bne.n	8002ce8 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	781a      	ldrb	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ce6:	e025      	b.n	8002d34 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d120      	bne.n	8002d34 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	2b21      	cmp	r3, #33	; 0x21
 8002cf6:	d11d      	bne.n	8002d34 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d06:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d16:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff fe4d 	bl	80029ce <HAL_I2C_MemTxCpltCallback>
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b22      	cmp	r3, #34	; 0x22
 8002d4e:	f040 80a2 	bne.w	8002e96 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d921      	bls.n	8002da4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	f040 8082 	bne.w	8002e96 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002da2:	e078      	b.n	8002e96 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d074      	beq.n	8002e96 <I2C_MasterReceive_RXNE+0x15a>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d002      	beq.n	8002db8 <I2C_MasterReceive_RXNE+0x7c>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d16e      	bne.n	8002e96 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 ffad 	bl	8003d18 <I2C_WaitOnSTOPRequestThroughIT>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d142      	bne.n	8002e4a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002de2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b40      	cmp	r3, #64	; 0x40
 8002e1c:	d10a      	bne.n	8002e34 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff fdd7 	bl	80029e0 <HAL_I2C_MemRxCpltCallback>
}
 8002e32:	e030      	b.n	8002e96 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2212      	movs	r2, #18
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff fd92 	bl	800296c <HAL_I2C_MasterRxCpltCallback>
}
 8002e48:	e025      	b.n	8002e96 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e58:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff fdae 	bl	80029f2 <HAL_I2C_ErrorCallback>
}
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b084      	sub	sp, #16
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d11b      	bne.n	8002eee <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002eec:	e0bd      	b.n	800306a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d129      	bne.n	8002f4c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f06:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d00a      	beq.n	8002f24 <I2C_MasterReceive_BTF+0x86>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d007      	beq.n	8002f24 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f22:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f4a:	e08e      	b.n	800306a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d176      	bne.n	8003044 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d002      	beq.n	8002f62 <I2C_MasterReceive_BTF+0xc4>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d108      	bne.n	8002f74 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	e019      	b.n	8002fa8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d002      	beq.n	8002f80 <I2C_MasterReceive_BTF+0xe2>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d108      	bne.n	8002f92 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	e00a      	b.n	8002fa8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b10      	cmp	r3, #16
 8002f96:	d007      	beq.n	8002fa8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003002:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b40      	cmp	r3, #64	; 0x40
 8003016:	d10a      	bne.n	800302e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff fcda 	bl	80029e0 <HAL_I2C_MemRxCpltCallback>
}
 800302c:	e01d      	b.n	800306a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2212      	movs	r2, #18
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff fc95 	bl	800296c <HAL_I2C_MasterRxCpltCallback>
}
 8003042:	e012      	b.n	800306a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	d117      	bne.n	80030b6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	b2db      	uxtb	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800309e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80030a0:	e067      	b.n	8003172 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	611a      	str	r2, [r3, #16]
}
 80030b4:	e05d      	b.n	8003172 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030be:	d133      	bne.n	8003128 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b21      	cmp	r3, #33	; 0x21
 80030ca:	d109      	bne.n	80030e0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030dc:	611a      	str	r2, [r3, #16]
 80030de:	e008      	b.n	80030f2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d004      	beq.n	8003104 <I2C_Master_SB+0x92>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	2b00      	cmp	r3, #0
 8003102:	d108      	bne.n	8003116 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	2b00      	cmp	r3, #0
 800310a:	d032      	beq.n	8003172 <I2C_Master_SB+0x100>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	2b00      	cmp	r3, #0
 8003114:	d02d      	beq.n	8003172 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003124:	605a      	str	r2, [r3, #4]
}
 8003126:	e024      	b.n	8003172 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10e      	bne.n	800314e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003134:	b29b      	uxth	r3, r3
 8003136:	11db      	asrs	r3, r3, #7
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f003 0306 	and.w	r3, r3, #6
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f063 030f 	orn	r3, r3, #15
 8003144:	b2da      	uxtb	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	611a      	str	r2, [r3, #16]
}
 800314c:	e011      	b.n	8003172 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003152:	2b01      	cmp	r3, #1
 8003154:	d10d      	bne.n	8003172 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	b29b      	uxth	r3, r3
 800315c:	11db      	asrs	r3, r3, #7
 800315e:	b2db      	uxtb	r3, r3
 8003160:	f003 0306 	and.w	r3, r3, #6
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f063 030e 	orn	r3, r3, #14
 800316a:	b2da      	uxtb	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	611a      	str	r2, [r3, #16]
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	b2da      	uxtb	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003194:	2b00      	cmp	r3, #0
 8003196:	d103      	bne.n	80031a0 <I2C_Master_ADD10+0x24>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	2b00      	cmp	r3, #0
 800319e:	d011      	beq.n	80031c4 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d104      	bne.n	80031b4 <I2C_Master_ADD10+0x38>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d007      	beq.n	80031c4 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c2:	605a      	str	r2, [r3, #4]
    }
  }
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b091      	sub	sp, #68	; 0x44
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b22      	cmp	r3, #34	; 0x22
 80031f6:	f040 8174 	bne.w	80034e2 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10f      	bne.n	8003222 <I2C_Master_ADDR+0x54>
 8003202:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d10b      	bne.n	8003222 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320a:	2300      	movs	r3, #0
 800320c:	633b      	str	r3, [r7, #48]	; 0x30
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	633b      	str	r3, [r7, #48]	; 0x30
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	633b      	str	r3, [r7, #48]	; 0x30
 800321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003220:	e16b      	b.n	80034fa <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003226:	2b00      	cmp	r3, #0
 8003228:	d11d      	bne.n	8003266 <I2C_Master_ADDR+0x98>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003232:	d118      	bne.n	8003266 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003234:	2300      	movs	r3, #0
 8003236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003258:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	651a      	str	r2, [r3, #80]	; 0x50
 8003264:	e149      	b.n	80034fa <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d113      	bne.n	8003298 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003270:	2300      	movs	r3, #0
 8003272:	62bb      	str	r3, [r7, #40]	; 0x28
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	62bb      	str	r3, [r7, #40]	; 0x28
 8003284:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e120      	b.n	80034da <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b01      	cmp	r3, #1
 80032a0:	f040 808a 	bne.w	80033b8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80032a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032aa:	d137      	bne.n	800331c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ba:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ca:	d113      	bne.n	80032f4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032da:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032dc:	2300      	movs	r3, #0
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	e0f2      	b.n	80034da <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f4:	2300      	movs	r3, #0
 80032f6:	623b      	str	r3, [r7, #32]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	623b      	str	r3, [r7, #32]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	623b      	str	r3, [r7, #32]
 8003308:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	e0de      	b.n	80034da <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800331c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331e:	2b08      	cmp	r3, #8
 8003320:	d02e      	beq.n	8003380 <I2C_Master_ADDR+0x1b2>
 8003322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003324:	2b20      	cmp	r3, #32
 8003326:	d02b      	beq.n	8003380 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332a:	2b12      	cmp	r3, #18
 800332c:	d102      	bne.n	8003334 <I2C_Master_ADDR+0x166>
 800332e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003330:	2b01      	cmp	r3, #1
 8003332:	d125      	bne.n	8003380 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003336:	2b04      	cmp	r3, #4
 8003338:	d00e      	beq.n	8003358 <I2C_Master_ADDR+0x18a>
 800333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333c:	2b02      	cmp	r3, #2
 800333e:	d00b      	beq.n	8003358 <I2C_Master_ADDR+0x18a>
 8003340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003342:	2b10      	cmp	r3, #16
 8003344:	d008      	beq.n	8003358 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e007      	b.n	8003368 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003366:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003368:	2300      	movs	r3, #0
 800336a:	61fb      	str	r3, [r7, #28]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	61fb      	str	r3, [r7, #28]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	e0ac      	b.n	80034da <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003390:	2300      	movs	r3, #0
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	e090      	b.n	80034da <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d158      	bne.n	8003474 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d021      	beq.n	800340c <I2C_Master_ADDR+0x23e>
 80033c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d01e      	beq.n	800340c <I2C_Master_ADDR+0x23e>
 80033ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d01b      	beq.n	800340c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033e2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	e012      	b.n	8003432 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800341a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800341c:	2300      	movs	r3, #0
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800343c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003440:	d14b      	bne.n	80034da <I2C_Master_ADDR+0x30c>
 8003442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003444:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003448:	d00b      	beq.n	8003462 <I2C_Master_ADDR+0x294>
 800344a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344c:	2b01      	cmp	r3, #1
 800344e:	d008      	beq.n	8003462 <I2C_Master_ADDR+0x294>
 8003450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003452:	2b08      	cmp	r3, #8
 8003454:	d005      	beq.n	8003462 <I2C_Master_ADDR+0x294>
 8003456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003458:	2b10      	cmp	r3, #16
 800345a:	d002      	beq.n	8003462 <I2C_Master_ADDR+0x294>
 800345c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345e:	2b20      	cmp	r3, #32
 8003460:	d13b      	bne.n	80034da <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	e032      	b.n	80034da <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003482:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800348e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003492:	d117      	bne.n	80034c4 <I2C_Master_ADDR+0x2f6>
 8003494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003496:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800349a:	d00b      	beq.n	80034b4 <I2C_Master_ADDR+0x2e6>
 800349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d008      	beq.n	80034b4 <I2C_Master_ADDR+0x2e6>
 80034a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d005      	beq.n	80034b4 <I2C_Master_ADDR+0x2e6>
 80034a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034aa:	2b10      	cmp	r3, #16
 80034ac:	d002      	beq.n	80034b4 <I2C_Master_ADDR+0x2e6>
 80034ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d107      	bne.n	80034c4 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034c2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80034e0:	e00b      	b.n	80034fa <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	68bb      	ldr	r3, [r7, #8]
}
 80034f8:	e7ff      	b.n	80034fa <I2C_Master_ADDR+0x32c>
 80034fa:	bf00      	nop
 80034fc:	3744      	adds	r7, #68	; 0x44
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003512:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d02b      	beq.n	8003576 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	781a      	ldrb	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d114      	bne.n	8003576 <I2C_SlaveTransmit_TXE+0x72>
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b29      	cmp	r3, #41	; 0x29
 8003550:	d111      	bne.n	8003576 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003560:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2221      	movs	r2, #33	; 0x21
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2228      	movs	r2, #40	; 0x28
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff fa04 	bl	800297e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003576:	bf00      	nop
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d011      	beq.n	80035b4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	781a      	ldrb	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr

080035be <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035cc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d02c      	beq.n	8003632 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d114      	bne.n	8003632 <I2C_SlaveReceive_RXNE+0x74>
 8003608:	7bfb      	ldrb	r3, [r7, #15]
 800360a:	2b2a      	cmp	r3, #42	; 0x2a
 800360c:	d111      	bne.n	8003632 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2222      	movs	r2, #34	; 0x22
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2228      	movs	r2, #40	; 0x28
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff f9af 	bl	8002990 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003632:	bf00      	nop
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d012      	beq.n	8003672 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003686:	2300      	movs	r3, #0
 8003688:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003690:	b2db      	uxtb	r3, r3
 8003692:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003696:	2b28      	cmp	r3, #40	; 0x28
 8003698:	d127      	bne.n	80036ea <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	089b      	lsrs	r3, r3, #2
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	09db      	lsrs	r3, r3, #7
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d103      	bne.n	80036ce <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	81bb      	strh	r3, [r7, #12]
 80036cc:	e002      	b.n	80036d4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80036dc:	89ba      	ldrh	r2, [r7, #12]
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	4619      	mov	r1, r3
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff f95d 	bl	80029a2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80036e8:	e008      	b.n	80036fc <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f06f 0202 	mvn.w	r2, #2
 80036f2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80036fc:	bf00      	nop
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003712:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003722:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003724:	2300      	movs	r3, #0
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003750:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800375c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003760:	d172      	bne.n	8003848 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	2b22      	cmp	r3, #34	; 0x22
 8003766:	d002      	beq.n	800376e <I2C_Slave_STOPF+0x6a>
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	2b2a      	cmp	r3, #42	; 0x2a
 800376c:	d135      	bne.n	80037da <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	b29a      	uxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f043 0204 	orr.w	r2, r3, #4
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe fcb4 	bl	8002114 <HAL_DMA_GetState>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d049      	beq.n	8003846 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	4a69      	ldr	r2, [pc, #420]	; (800395c <I2C_Slave_STOPF+0x258>)
 80037b8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe fb2c 	bl	8001e1c <HAL_DMA_Abort_IT>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d03d      	beq.n	8003846 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037d4:	4610      	mov	r0, r2
 80037d6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037d8:	e035      	b.n	8003846 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f043 0204 	orr.w	r2, r3, #4
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800380c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003812:	4618      	mov	r0, r3
 8003814:	f7fe fc7e 	bl	8002114 <HAL_DMA_GetState>
 8003818:	4603      	mov	r3, r0
 800381a:	2b01      	cmp	r3, #1
 800381c:	d014      	beq.n	8003848 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003822:	4a4e      	ldr	r2, [pc, #312]	; (800395c <I2C_Slave_STOPF+0x258>)
 8003824:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe faf6 	bl	8001e1c <HAL_DMA_Abort_IT>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003840:	4610      	mov	r0, r2
 8003842:	4798      	blx	r3
 8003844:	e000      	b.n	8003848 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003846:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d03e      	beq.n	80038d0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b04      	cmp	r3, #4
 800385e:	d112      	bne.n	8003886 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003890:	2b40      	cmp	r3, #64	; 0x40
 8003892:	d112      	bne.n	80038ba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	f043 0204 	orr.w	r2, r3, #4
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f843 	bl	8003964 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80038de:	e039      	b.n	8003954 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b2a      	cmp	r3, #42	; 0x2a
 80038e4:	d109      	bne.n	80038fa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2228      	movs	r2, #40	; 0x28
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff f84b 	bl	8002990 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b28      	cmp	r3, #40	; 0x28
 8003904:	d111      	bne.n	800392a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a15      	ldr	r2, [pc, #84]	; (8003960 <I2C_Slave_STOPF+0x25c>)
 800390a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff f84a 	bl	80029bc <HAL_I2C_ListenCpltCallback>
}
 8003928:	e014      	b.n	8003954 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	2b22      	cmp	r3, #34	; 0x22
 8003930:	d002      	beq.n	8003938 <I2C_Slave_STOPF+0x234>
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	2b22      	cmp	r3, #34	; 0x22
 8003936:	d10d      	bne.n	8003954 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff f81e 	bl	8002990 <HAL_I2C_SlaveRxCpltCallback>
}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	08003bc9 	.word	0x08003bc9
 8003960:	ffff0000 	.word	0xffff0000

08003964 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003972:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800397a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800397c:	7bbb      	ldrb	r3, [r7, #14]
 800397e:	2b10      	cmp	r3, #16
 8003980:	d002      	beq.n	8003988 <I2C_ITError+0x24>
 8003982:	7bbb      	ldrb	r3, [r7, #14]
 8003984:	2b40      	cmp	r3, #64	; 0x40
 8003986:	d10a      	bne.n	800399e <I2C_ITError+0x3a>
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	2b22      	cmp	r3, #34	; 0x22
 800398c:	d107      	bne.n	800399e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800399c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039a4:	2b28      	cmp	r3, #40	; 0x28
 80039a6:	d107      	bne.n	80039b8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2228      	movs	r2, #40	; 0x28
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80039b6:	e015      	b.n	80039e4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039c6:	d00a      	beq.n	80039de <I2C_ITError+0x7a>
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b60      	cmp	r3, #96	; 0x60
 80039cc:	d007      	beq.n	80039de <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039f2:	d161      	bne.n	8003ab8 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a02:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d020      	beq.n	8003a52 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a14:	4a6a      	ldr	r2, [pc, #424]	; (8003bc0 <I2C_ITError+0x25c>)
 8003a16:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe f9fd 	bl	8001e1c <HAL_DMA_Abort_IT>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8089 	beq.w	8003b3c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4798      	blx	r3
 8003a50:	e074      	b.n	8003b3c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	4a5a      	ldr	r2, [pc, #360]	; (8003bc0 <I2C_ITError+0x25c>)
 8003a58:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe f9dc 	bl	8001e1c <HAL_DMA_Abort_IT>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d068      	beq.n	8003b3c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a74:	2b40      	cmp	r3, #64	; 0x40
 8003a76:	d10b      	bne.n	8003a90 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4798      	blx	r3
 8003ab6:	e041      	b.n	8003b3c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b60      	cmp	r3, #96	; 0x60
 8003ac2:	d125      	bne.n	8003b10 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	2b40      	cmp	r3, #64	; 0x40
 8003ade:	d10b      	bne.n	8003af8 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0201 	bic.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7fe ff7b 	bl	8002a04 <HAL_I2C_AbortCpltCallback>
 8003b0e:	e015      	b.n	8003b3c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1a:	2b40      	cmp	r3, #64	; 0x40
 8003b1c:	d10b      	bne.n	8003b36 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fe ff5b 	bl	80029f2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10e      	bne.n	8003b6a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d104      	bne.n	8003b6a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b78:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b80:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d113      	bne.n	8003bb6 <I2C_ITError+0x252>
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	2b28      	cmp	r3, #40	; 0x28
 8003b92:	d110      	bne.n	8003bb6 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a0b      	ldr	r2, [pc, #44]	; (8003bc4 <I2C_ITError+0x260>)
 8003b98:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7fe ff03 	bl	80029bc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003bb6:	bf00      	nop
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	08003bc9 	.word	0x08003bc9
 8003bc4:	ffff0000 	.word	0xffff0000

08003bc8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003be2:	4b4b      	ldr	r3, [pc, #300]	; (8003d10 <I2C_DMAAbort+0x148>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	08db      	lsrs	r3, r3, #3
 8003be8:	4a4a      	ldr	r2, [pc, #296]	; (8003d14 <I2C_DMAAbort+0x14c>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	0a1a      	lsrs	r2, r3, #8
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	00da      	lsls	r2, r3, #3
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f043 0220 	orr.w	r2, r3, #32
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003c0e:	e00a      	b.n	8003c26 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c24:	d0ea      	beq.n	8003bfc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c32:	2200      	movs	r2, #0
 8003c34:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	2200      	movs	r2, #0
 8003c44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c54:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c68:	2200      	movs	r2, #0
 8003c6a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	2200      	movs	r2, #0
 8003c7a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0201 	bic.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b60      	cmp	r3, #96	; 0x60
 8003c96:	d10e      	bne.n	8003cb6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2200      	movs	r2, #0
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003cae:	6978      	ldr	r0, [r7, #20]
 8003cb0:	f7fe fea8 	bl	8002a04 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cb4:	e027      	b.n	8003d06 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cb6:	7cfb      	ldrb	r3, [r7, #19]
 8003cb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cbc:	2b28      	cmp	r3, #40	; 0x28
 8003cbe:	d117      	bne.n	8003cf0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cde:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2228      	movs	r2, #40	; 0x28
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003cee:	e007      	b.n	8003d00 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003d00:	6978      	ldr	r0, [r7, #20]
 8003d02:	f7fe fe76 	bl	80029f2 <HAL_I2C_ErrorCallback>
}
 8003d06:	bf00      	nop
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000018 	.word	0x20000018
 8003d14:	14f8b589 	.word	0x14f8b589

08003d18 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d24:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	08db      	lsrs	r3, r3, #3
 8003d2a:	4a13      	ldr	r2, [pc, #76]	; (8003d78 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d30:	0a1a      	lsrs	r2, r3, #8
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d107      	bne.n	8003d56 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f043 0220 	orr.w	r2, r3, #32
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e008      	b.n	8003d68 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d64:	d0e9      	beq.n	8003d3a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20000018 	.word	0x20000018
 8003d78:	14f8b589 	.word	0x14f8b589

08003d7c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d8c:	d103      	bne.n	8003d96 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d94:	e007      	b.n	8003da6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003d9e:	d102      	bne.n	8003da6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2208      	movs	r2, #8
 8003da4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003db2:	b08b      	sub	sp, #44	; 0x2c
 8003db4:	af06      	add	r7, sp, #24
 8003db6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e0fd      	b.n	8003fbe <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f006 f97e 	bl	800a0d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2203      	movs	r2, #3
 8003de0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f002 fbed 	bl	80065c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	687e      	ldr	r6, [r7, #4]
 8003df6:	466d      	mov	r5, sp
 8003df8:	f106 0410 	add.w	r4, r6, #16
 8003dfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	602b      	str	r3, [r5, #0]
 8003e04:	1d33      	adds	r3, r6, #4
 8003e06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e08:	6838      	ldr	r0, [r7, #0]
 8003e0a:	f002 fbb7 	bl	800657c <USB_CoreInit>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0ce      	b.n	8003fbe <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2100      	movs	r1, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f002 fbe8 	bl	80065fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	73fb      	strb	r3, [r7, #15]
 8003e30:	e04c      	b.n	8003ecc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	4613      	mov	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	440b      	add	r3, r1
 8003e42:	3301      	adds	r3, #1
 8003e44:	2201      	movs	r2, #1
 8003e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	440b      	add	r3, r1
 8003e58:	7bfa      	ldrb	r2, [r7, #15]
 8003e5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e5c:	7bfa      	ldrb	r2, [r7, #15]
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	b298      	uxth	r0, r3
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	440b      	add	r3, r1
 8003e6e:	3336      	adds	r3, #54	; 0x36
 8003e70:	4602      	mov	r2, r0
 8003e72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	440b      	add	r3, r1
 8003e84:	3303      	adds	r3, #3
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e8a:	7bfa      	ldrb	r2, [r7, #15]
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	440b      	add	r3, r1
 8003e98:	3338      	adds	r3, #56	; 0x38
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	440b      	add	r3, r1
 8003eac:	333c      	adds	r3, #60	; 0x3c
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003eb2:	7bfa      	ldrb	r2, [r7, #15]
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	440b      	add	r3, r1
 8003ec0:	3340      	adds	r3, #64	; 0x40
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	73fb      	strb	r3, [r7, #15]
 8003ecc:	7bfa      	ldrb	r2, [r7, #15]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d3ad      	bcc.n	8003e32 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	73fb      	strb	r3, [r7, #15]
 8003eda:	e044      	b.n	8003f66 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003edc:	7bfa      	ldrb	r2, [r7, #15]
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	440b      	add	r3, r1
 8003eea:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003eee:	2200      	movs	r2, #0
 8003ef0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ef2:	7bfa      	ldrb	r2, [r7, #15]
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	440b      	add	r3, r1
 8003f00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f04:	7bfa      	ldrb	r2, [r7, #15]
 8003f06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f08:	7bfa      	ldrb	r2, [r7, #15]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	440b      	add	r3, r1
 8003f16:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f1e:	7bfa      	ldrb	r2, [r7, #15]
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	4613      	mov	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	440b      	add	r3, r1
 8003f2c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f34:	7bfa      	ldrb	r2, [r7, #15]
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	440b      	add	r3, r1
 8003f42:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f4a:	7bfa      	ldrb	r2, [r7, #15]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	440b      	add	r3, r1
 8003f58:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	3301      	adds	r3, #1
 8003f64:	73fb      	strb	r3, [r7, #15]
 8003f66:	7bfa      	ldrb	r2, [r7, #15]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d3b5      	bcc.n	8003edc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	603b      	str	r3, [r7, #0]
 8003f76:	687e      	ldr	r6, [r7, #4]
 8003f78:	466d      	mov	r5, sp
 8003f7a:	f106 0410 	add.w	r4, r6, #16
 8003f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	602b      	str	r3, [r5, #0]
 8003f86:	1d33      	adds	r3, r6, #4
 8003f88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f8a:	6838      	ldr	r0, [r7, #0]
 8003f8c:	f002 fb42 	bl	8006614 <USB_DevInit>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e00d      	b.n	8003fbe <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f004 fadc 	bl	8008574 <USB_DevDisconnect>

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fc6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_PCD_Start+0x16>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e016      	b.n	800400a <HAL_PCD_Start+0x44>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f002 fad7 	bl	800659c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003fee:	2101      	movs	r1, #1
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f006 fae4 	bl	800a5be <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f004 fab0 	bl	8008560 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b088      	sub	sp, #32
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f004 fab2 	bl	8008588 <USB_ReadInterrupts>
 8004024:	4603      	mov	r3, r0
 8004026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800402a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800402e:	d102      	bne.n	8004036 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fb61 	bl	80046f8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f004 faa4 	bl	8008588 <USB_ReadInterrupts>
 8004040:	4603      	mov	r3, r0
 8004042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800404a:	d112      	bne.n	8004072 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004054:	b29a      	uxth	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405e:	b292      	uxth	r2, r2
 8004060:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f006 f8b2 	bl	800a1ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800406a:	2100      	movs	r1, #0
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f925 	bl	80042bc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f004 fa86 	bl	8008588 <USB_ReadInterrupts>
 800407c:	4603      	mov	r3, r0
 800407e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004082:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004086:	d10b      	bne.n	80040a0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004090:	b29a      	uxth	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800409a:	b292      	uxth	r2, r2
 800409c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f004 fa6f 	bl	8008588 <USB_ReadInterrupts>
 80040aa:	4603      	mov	r3, r0
 80040ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b4:	d10b      	bne.n	80040ce <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040be:	b29a      	uxth	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040c8:	b292      	uxth	r2, r2
 80040ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f004 fa58 	bl	8008588 <USB_ReadInterrupts>
 80040d8:	4603      	mov	r3, r0
 80040da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e2:	d126      	bne.n	8004132 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0204 	bic.w	r2, r2, #4
 80040f6:	b292      	uxth	r2, r2
 80040f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0208 	bic.w	r2, r2, #8
 800410e:	b292      	uxth	r2, r2
 8004110:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f006 f893 	bl	800a240 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004122:	b29a      	uxth	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800412c:	b292      	uxth	r2, r2
 800412e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f004 fa26 	bl	8008588 <USB_ReadInterrupts>
 800413c:	4603      	mov	r3, r0
 800413e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004146:	f040 8084 	bne.w	8004252 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800414a:	2300      	movs	r3, #0
 800414c:	77fb      	strb	r3, [r7, #31]
 800414e:	e011      	b.n	8004174 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	7ffb      	ldrb	r3, [r7, #31]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	441a      	add	r2, r3
 800415c:	7ffb      	ldrb	r3, [r7, #31]
 800415e:	8812      	ldrh	r2, [r2, #0]
 8004160:	b292      	uxth	r2, r2
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	f107 0120 	add.w	r1, r7, #32
 8004168:	440b      	add	r3, r1
 800416a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800416e:	7ffb      	ldrb	r3, [r7, #31]
 8004170:	3301      	adds	r3, #1
 8004172:	77fb      	strb	r3, [r7, #31]
 8004174:	7ffb      	ldrb	r3, [r7, #31]
 8004176:	2b07      	cmp	r3, #7
 8004178:	d9ea      	bls.n	8004150 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	b292      	uxth	r2, r2
 800418e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800419a:	b29a      	uxth	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0201 	bic.w	r2, r2, #1
 80041a4:	b292      	uxth	r2, r2
 80041a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80041aa:	bf00      	nop
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f6      	beq.n	80041ac <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d0:	b292      	uxth	r2, r2
 80041d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80041d6:	2300      	movs	r3, #0
 80041d8:	77fb      	strb	r3, [r7, #31]
 80041da:	e010      	b.n	80041fe <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80041dc:	7ffb      	ldrb	r3, [r7, #31]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	4611      	mov	r1, r2
 80041e4:	7ffa      	ldrb	r2, [r7, #31]
 80041e6:	0092      	lsls	r2, r2, #2
 80041e8:	440a      	add	r2, r1
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	f107 0120 	add.w	r1, r7, #32
 80041f0:	440b      	add	r3, r1
 80041f2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80041f6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80041f8:	7ffb      	ldrb	r3, [r7, #31]
 80041fa:	3301      	adds	r3, #1
 80041fc:	77fb      	strb	r3, [r7, #31]
 80041fe:	7ffb      	ldrb	r3, [r7, #31]
 8004200:	2b07      	cmp	r3, #7
 8004202:	d9eb      	bls.n	80041dc <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800420c:	b29a      	uxth	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0208 	orr.w	r2, r2, #8
 8004216:	b292      	uxth	r2, r2
 8004218:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800422e:	b292      	uxth	r2, r2
 8004230:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800423c:	b29a      	uxth	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0204 	orr.w	r2, r2, #4
 8004246:	b292      	uxth	r2, r2
 8004248:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f005 ffdd 	bl	800a20c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f004 f996 	bl	8008588 <USB_ReadInterrupts>
 800425c:	4603      	mov	r3, r0
 800425e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004266:	d10e      	bne.n	8004286 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004270:	b29a      	uxth	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800427a:	b292      	uxth	r2, r2
 800427c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f005 ff96 	bl	800a1b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f004 f97c 	bl	8008588 <USB_ReadInterrupts>
 8004290:	4603      	mov	r3, r0
 8004292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800429a:	d10b      	bne.n	80042b4 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042ae:	b292      	uxth	r2, r2
 80042b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80042b4:	bf00      	nop
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_PCD_SetAddress+0x1a>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e013      	b.n	80042fe <HAL_PCD_SetAddress+0x42>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	78fa      	ldrb	r2, [r7, #3]
 80042e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	4611      	mov	r1, r2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f004 f923 	bl	800853a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	4608      	mov	r0, r1
 8004310:	4611      	mov	r1, r2
 8004312:	461a      	mov	r2, r3
 8004314:	4603      	mov	r3, r0
 8004316:	70fb      	strb	r3, [r7, #3]
 8004318:	460b      	mov	r3, r1
 800431a:	803b      	strh	r3, [r7, #0]
 800431c:	4613      	mov	r3, r2
 800431e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004328:	2b00      	cmp	r3, #0
 800432a:	da0e      	bge.n	800434a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	4413      	add	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2201      	movs	r2, #1
 8004346:	705a      	strb	r2, [r3, #1]
 8004348:	e00e      	b.n	8004368 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	f003 0207 	and.w	r2, r3, #7
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	4413      	add	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	b2da      	uxtb	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004374:	883a      	ldrh	r2, [r7, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	78ba      	ldrb	r2, [r7, #2]
 800437e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	785b      	ldrb	r3, [r3, #1]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d004      	beq.n	8004392 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004392:	78bb      	ldrb	r3, [r7, #2]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d102      	bne.n	800439e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_PCD_EP_Open+0xa6>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e00e      	b.n	80043ca <HAL_PCD_EP_Open+0xc4>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68f9      	ldr	r1, [r7, #12]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f002 f94a 	bl	8006654 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80043c8:	7afb      	ldrb	r3, [r7, #11]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	460b      	mov	r3, r1
 80043dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	da0e      	bge.n	8004404 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	4413      	add	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	705a      	strb	r2, [r3, #1]
 8004402:	e00e      	b.n	8004422 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	f003 0207 	and.w	r2, r3, #7
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	4413      	add	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	b2da      	uxtb	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_PCD_EP_Close+0x6a>
 8004438:	2302      	movs	r3, #2
 800443a:	e00e      	b.n	800445a <HAL_PCD_EP_Close+0x88>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68f9      	ldr	r1, [r7, #12]
 800444a:	4618      	mov	r0, r3
 800444c:	f002 fc6c 	bl	8006d28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b086      	sub	sp, #24
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
 800446e:	460b      	mov	r3, r1
 8004470:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004472:	7afb      	ldrb	r3, [r7, #11]
 8004474:	f003 0207 	and.w	r2, r3, #7
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2200      	movs	r2, #0
 800449a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2200      	movs	r2, #0
 80044a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044a2:	7afb      	ldrb	r3, [r7, #11]
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044ae:	7afb      	ldrb	r3, [r7, #11]
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d106      	bne.n	80044c6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6979      	ldr	r1, [r7, #20]
 80044be:	4618      	mov	r0, r3
 80044c0:	f002 fe1e 	bl	8007100 <USB_EPStartXfer>
 80044c4:	e005      	b.n	80044d2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6979      	ldr	r1, [r7, #20]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f002 fe17 	bl	8007100 <USB_EPStartXfer>
  }

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	f003 0207 	and.w	r2, r3, #7
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	440b      	add	r3, r1
 80044fa:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80044fe:	681b      	ldr	r3, [r3, #0]
}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr

0800450a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b086      	sub	sp, #24
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
 8004516:	460b      	mov	r3, r1
 8004518:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800451a:	7afb      	ldrb	r3, [r7, #11]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4413      	add	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2200      	movs	r2, #0
 800454e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2201      	movs	r2, #1
 8004554:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004556:	7afb      	ldrb	r3, [r7, #11]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	b2da      	uxtb	r2, r3
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004562:	7afb      	ldrb	r3, [r7, #11]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	2b00      	cmp	r3, #0
 800456a:	d106      	bne.n	800457a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6979      	ldr	r1, [r7, #20]
 8004572:	4618      	mov	r0, r3
 8004574:	f002 fdc4 	bl	8007100 <USB_EPStartXfer>
 8004578:	e005      	b.n	8004586 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6979      	ldr	r1, [r7, #20]
 8004580:	4618      	mov	r0, r3
 8004582:	f002 fdbd 	bl	8007100 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	f003 0207 	and.w	r2, r3, #7
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d901      	bls.n	80045ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e04c      	b.n	8004648 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	da0e      	bge.n	80045d4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045b6:	78fb      	ldrb	r3, [r7, #3]
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	4413      	add	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	705a      	strb	r2, [r3, #1]
 80045d2:	e00c      	b.n	80045ee <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045d4:	78fa      	ldrb	r2, [r7, #3]
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	4413      	add	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045f4:	78fb      	ldrb	r3, [r7, #3]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_PCD_EP_SetStall+0x7e>
 800460a:	2302      	movs	r3, #2
 800460c:	e01c      	b.n	8004648 <HAL_PCD_EP_SetStall+0xb8>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68f9      	ldr	r1, [r7, #12]
 800461c:	4618      	mov	r0, r3
 800461e:	f003 fe8f 	bl	8008340 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	2b00      	cmp	r3, #0
 800462a:	d108      	bne.n	800463e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004636:	4619      	mov	r1, r3
 8004638:	4610      	mov	r0, r2
 800463a:	f003 ffb4 	bl	80085a6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	f003 020f 	and.w	r2, r3, #15
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	429a      	cmp	r2, r3
 8004668:	d901      	bls.n	800466e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e040      	b.n	80046f0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800466e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004672:	2b00      	cmp	r3, #0
 8004674:	da0e      	bge.n	8004694 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004676:	78fb      	ldrb	r3, [r7, #3]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	4413      	add	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	705a      	strb	r2, [r3, #1]
 8004692:	e00e      	b.n	80046b2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	f003 0207 	and.w	r2, r3, #7
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046b8:	78fb      	ldrb	r3, [r7, #3]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_PCD_EP_ClrStall+0x82>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e00e      	b.n	80046f0 <HAL_PCD_EP_ClrStall+0xa0>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68f9      	ldr	r1, [r7, #12]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f003 fe7d 	bl	80083e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08e      	sub	sp, #56	; 0x38
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004700:	e2df      	b.n	8004cc2 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800470a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800470c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800470e:	b2db      	uxtb	r3, r3
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004718:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800471c:	2b00      	cmp	r3, #0
 800471e:	f040 8158 	bne.w	80049d2 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004722:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	2b00      	cmp	r3, #0
 800472a:	d152      	bne.n	80047d2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	b29b      	uxth	r3, r3
 8004734:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473c:	81fb      	strh	r3, [r7, #14]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	89fb      	ldrh	r3, [r7, #14]
 8004744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800474c:	b29b      	uxth	r3, r3
 800474e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3328      	adds	r3, #40	; 0x28
 8004754:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800475e:	b29b      	uxth	r3, r3
 8004760:	461a      	mov	r2, r3
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4413      	add	r3, r2
 800476a:	3302      	adds	r3, #2
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	695a      	ldr	r2, [r3, #20]
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	441a      	add	r2, r3
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004790:	2100      	movs	r1, #0
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f005 fcf3 	bl	800a17e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 828e 	beq.w	8004cc2 <PCD_EP_ISR_Handler+0x5ca>
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f040 8289 	bne.w	8004cc2 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	b292      	uxth	r2, r2
 80047c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80047d0:	e277      	b.n	8004cc2 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80047e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80047e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d034      	beq.n	8004856 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	461a      	mov	r2, r3
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	4413      	add	r3, r2
 8004800:	3306      	adds	r3, #6
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800482a:	b29b      	uxth	r3, r3
 800482c:	f003 ff0a 	bl	8008644 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b29a      	uxth	r2, r3
 8004838:	f640 738f 	movw	r3, #3983	; 0xf8f
 800483c:	4013      	ands	r3, r2
 800483e:	823b      	strh	r3, [r7, #16]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	8a3a      	ldrh	r2, [r7, #16]
 8004846:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800484a:	b292      	uxth	r2, r2
 800484c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f005 fc68 	bl	800a124 <HAL_PCD_SetupStageCallback>
 8004854:	e235      	b.n	8004cc2 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004856:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800485a:	2b00      	cmp	r3, #0
 800485c:	f280 8231 	bge.w	8004cc2 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29a      	uxth	r2, r3
 8004868:	f640 738f 	movw	r3, #3983	; 0xf8f
 800486c:	4013      	ands	r3, r2
 800486e:	83bb      	strh	r3, [r7, #28]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	8bba      	ldrh	r2, [r7, #28]
 8004876:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800487a:	b292      	uxth	r2, r2
 800487c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004886:	b29b      	uxth	r3, r3
 8004888:	461a      	mov	r2, r3
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4413      	add	r3, r2
 8004892:	3306      	adds	r3, #6
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6812      	ldr	r2, [r2, #0]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d019      	beq.n	80048e6 <PCD_EP_ISR_Handler+0x1ee>
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d015      	beq.n	80048e6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	6959      	ldr	r1, [r3, #20]
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	f003 feba 	bl	8008644 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	695a      	ldr	r2, [r3, #20]
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	441a      	add	r2, r3
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80048de:	2100      	movs	r1, #0
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f005 fc31 	bl	800a148 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	61bb      	str	r3, [r7, #24]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	4413      	add	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d112      	bne.n	8004934 <PCD_EP_ISR_Handler+0x23c>
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	b29b      	uxth	r3, r3
 8004914:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004918:	b29a      	uxth	r2, r3
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	801a      	strh	r2, [r3, #0]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800492c:	b29a      	uxth	r2, r3
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	801a      	strh	r2, [r3, #0]
 8004932:	e02f      	b.n	8004994 <PCD_EP_ISR_Handler+0x29c>
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	2b3e      	cmp	r3, #62	; 0x3e
 800493a:	d813      	bhi.n	8004964 <PCD_EP_ISR_Handler+0x26c>
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	085b      	lsrs	r3, r3, #1
 8004942:	633b      	str	r3, [r7, #48]	; 0x30
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <PCD_EP_ISR_Handler+0x25e>
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	3301      	adds	r3, #1
 8004954:	633b      	str	r3, [r7, #48]	; 0x30
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	b29b      	uxth	r3, r3
 800495a:	029b      	lsls	r3, r3, #10
 800495c:	b29a      	uxth	r2, r3
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	801a      	strh	r2, [r3, #0]
 8004962:	e017      	b.n	8004994 <PCD_EP_ISR_Handler+0x29c>
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	633b      	str	r3, [r7, #48]	; 0x30
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	f003 031f 	and.w	r3, r3, #31
 8004974:	2b00      	cmp	r3, #0
 8004976:	d102      	bne.n	800497e <PCD_EP_ISR_Handler+0x286>
 8004978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497a:	3b01      	subs	r3, #1
 800497c:	633b      	str	r3, [r7, #48]	; 0x30
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	b29b      	uxth	r3, r3
 8004982:	029b      	lsls	r3, r3, #10
 8004984:	b29b      	uxth	r3, r3
 8004986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800498a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800498e:	b29a      	uxth	r2, r3
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a4:	827b      	strh	r3, [r7, #18]
 80049a6:	8a7b      	ldrh	r3, [r7, #18]
 80049a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049ac:	827b      	strh	r3, [r7, #18]
 80049ae:	8a7b      	ldrh	r3, [r7, #18]
 80049b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049b4:	827b      	strh	r3, [r7, #18]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	8a7b      	ldrh	r3, [r7, #18]
 80049bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	8013      	strh	r3, [r2, #0]
 80049d0:	e177      	b.n	8004cc2 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80049e4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f280 80ea 	bge.w	8004bc2 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a04:	4013      	ands	r3, r2
 8004a06:	853b      	strh	r3, [r7, #40]	; 0x28
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004a18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a1c:	b292      	uxth	r2, r2
 8004a1e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004a20:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	4413      	add	r3, r2
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	7b1b      	ldrb	r3, [r3, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d122      	bne.n	8004a84 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	461a      	mov	r2, r3
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	4413      	add	r3, r2
 8004a52:	3306      	adds	r3, #6
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a66:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004a68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 8087 	beq.w	8004b7e <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	6959      	ldr	r1, [r3, #20]
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	88da      	ldrh	r2, [r3, #6]
 8004a7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a7e:	f003 fde1 	bl	8008644 <USB_ReadPMA>
 8004a82:	e07c      	b.n	8004b7e <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	78db      	ldrb	r3, [r3, #3]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d108      	bne.n	8004a9e <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004a8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a8e:	461a      	mov	r2, r3
 8004a90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f923 	bl	8004cde <HAL_PCD_EP_DB_Receive>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004a9c:	e06f      	b.n	8004b7e <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab8:	847b      	strh	r3, [r7, #34]	; 0x22
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d021      	beq.n	8004b3c <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3302      	adds	r3, #2
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b20:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004b22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d02a      	beq.n	8004b7e <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6818      	ldr	r0, [r3, #0]
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	6959      	ldr	r1, [r3, #20]
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	891a      	ldrh	r2, [r3, #8]
 8004b34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b36:	f003 fd85 	bl	8008644 <USB_ReadPMA>
 8004b3a:	e020      	b.n	8004b7e <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	4413      	add	r3, r2
 8004b50:	3306      	adds	r3, #6
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b64:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004b66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	6959      	ldr	r1, [r3, #20]
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	895a      	ldrh	r2, [r3, #10]
 8004b78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b7a:	f003 fd63 	bl	8008644 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	69da      	ldr	r2, [r3, #28]
 8004b82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b84:	441a      	add	r2, r3
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	695a      	ldr	r2, [r3, #20]
 8004b8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b90:	441a      	add	r2, r3
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d004      	beq.n	8004ba8 <PCD_EP_ISR_Handler+0x4b0>
 8004b9e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d206      	bcs.n	8004bb6 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	4619      	mov	r1, r3
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f005 faca 	bl	800a148 <HAL_PCD_DataOutStageCallback>
 8004bb4:	e005      	b.n	8004bc2 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f002 fa9f 	bl	8007100 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004bc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d07a      	beq.n	8004cc2 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8004bcc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	461a      	mov	r2, r3
 8004be6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfa:	843b      	strh	r3, [r7, #32]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	441a      	add	r2, r3
 8004c0a:	8c3b      	ldrh	r3, [r7, #32]
 8004c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	78db      	ldrb	r3, [r3, #3]
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d108      	bne.n	8004c32 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d146      	bne.n	8004cb6 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004c28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d141      	bne.n	8004cb6 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4413      	add	r3, r2
 8004c46:	3302      	adds	r3, #2
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6812      	ldr	r2, [r2, #0]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c5a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	699a      	ldr	r2, [r3, #24]
 8004c60:	8bfb      	ldrh	r3, [r7, #30]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d906      	bls.n	8004c74 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	699a      	ldr	r2, [r3, #24]
 8004c6a:	8bfb      	ldrh	r3, [r7, #30]
 8004c6c:	1ad2      	subs	r2, r2, r3
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	619a      	str	r2, [r3, #24]
 8004c72:	e002      	b.n	8004c7a <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	2200      	movs	r2, #0
 8004c78:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	4619      	mov	r1, r3
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f005 fa78 	bl	800a17e <HAL_PCD_DataInStageCallback>
 8004c8e:	e018      	b.n	8004cc2 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	695a      	ldr	r2, [r3, #20]
 8004c94:	8bfb      	ldrh	r3, [r7, #30]
 8004c96:	441a      	add	r2, r3
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	8bfb      	ldrh	r3, [r7, #30]
 8004ca2:	441a      	add	r2, r3
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f002 fa26 	bl	8007100 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004cb4:	e005      	b.n	8004cc2 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004cb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f91b 	bl	8004ef8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	b21b      	sxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f6ff ad17 	blt.w	8004702 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3738      	adds	r7, #56	; 0x38
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b088      	sub	sp, #32
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d07e      	beq.n	8004df4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	4413      	add	r3, r2
 8004d0a:	3302      	adds	r3, #2
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	6812      	ldr	r2, [r2, #0]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d1e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	699a      	ldr	r2, [r3, #24]
 8004d24:	8b7b      	ldrh	r3, [r7, #26]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d306      	bcc.n	8004d38 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	699a      	ldr	r2, [r3, #24]
 8004d2e:	8b7b      	ldrh	r3, [r7, #26]
 8004d30:	1ad2      	subs	r2, r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	619a      	str	r2, [r3, #24]
 8004d36:	e002      	b.n	8004d3e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d123      	bne.n	8004d8e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d60:	833b      	strh	r3, [r7, #24]
 8004d62:	8b3b      	ldrh	r3, [r7, #24]
 8004d64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d68:	833b      	strh	r3, [r7, #24]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	441a      	add	r2, r3
 8004d78:	8b3b      	ldrh	r3, [r7, #24]
 8004d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d01f      	beq.n	8004dd8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db2:	82fb      	strh	r3, [r7, #22]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	441a      	add	r2, r3
 8004dc2:	8afb      	ldrh	r3, [r7, #22]
 8004dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004dd8:	8b7b      	ldrh	r3, [r7, #26]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 8087 	beq.w	8004eee <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6959      	ldr	r1, [r3, #20]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	891a      	ldrh	r2, [r3, #8]
 8004dec:	8b7b      	ldrh	r3, [r7, #26]
 8004dee:	f003 fc29 	bl	8008644 <USB_ReadPMA>
 8004df2:	e07c      	b.n	8004eee <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4413      	add	r3, r2
 8004e08:	3306      	adds	r3, #6
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	6812      	ldr	r2, [r2, #0]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e1c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	699a      	ldr	r2, [r3, #24]
 8004e22:	8b7b      	ldrh	r3, [r7, #26]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d306      	bcc.n	8004e36 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	699a      	ldr	r2, [r3, #24]
 8004e2c:	8b7b      	ldrh	r3, [r7, #26]
 8004e2e:	1ad2      	subs	r2, r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	619a      	str	r2, [r3, #24]
 8004e34:	e002      	b.n	8004e3c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d123      	bne.n	8004e8c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5e:	83fb      	strh	r3, [r7, #30]
 8004e60:	8bfb      	ldrh	r3, [r7, #30]
 8004e62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e66:	83fb      	strh	r3, [r7, #30]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	441a      	add	r2, r3
 8004e76:	8bfb      	ldrh	r3, [r7, #30]
 8004e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d11f      	bne.n	8004ed6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb0:	83bb      	strh	r3, [r7, #28]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	441a      	add	r2, r3
 8004ec0:	8bbb      	ldrh	r3, [r7, #28]
 8004ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ece:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004ed6:	8b7b      	ldrh	r3, [r7, #26]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	6959      	ldr	r1, [r3, #20]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	895a      	ldrh	r2, [r3, #10]
 8004ee8:	8b7b      	ldrh	r3, [r7, #26]
 8004eea:	f003 fbab 	bl	8008644 <USB_ReadPMA>
    }
  }

  return count;
 8004eee:	8b7b      	ldrh	r3, [r7, #26]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3720      	adds	r7, #32
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b092      	sub	sp, #72	; 0x48
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	4613      	mov	r3, r2
 8004f04:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f06:	88fb      	ldrh	r3, [r7, #6]
 8004f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 8132 	beq.w	8005176 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	4413      	add	r3, r2
 8004f26:	3302      	adds	r3, #2
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f3a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	699a      	ldr	r2, [r3, #24]
 8004f40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d906      	bls.n	8004f54 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	699a      	ldr	r2, [r3, #24]
 8004f4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f4c:	1ad2      	subs	r2, r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	619a      	str	r2, [r3, #24]
 8004f52:	e002      	b.n	8004f5a <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2200      	movs	r2, #0
 8004f58:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d12c      	bne.n	8004fbc <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	4619      	mov	r1, r3
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f005 f908 	bl	800a17e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f6e:	88fb      	ldrh	r3, [r7, #6]
 8004f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 822f 	beq.w	80053d8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f94:	827b      	strh	r3, [r7, #18]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	441a      	add	r2, r3
 8004fa4:	8a7b      	ldrh	r3, [r7, #18]
 8004fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	8013      	strh	r3, [r2, #0]
 8004fba:	e20d      	b.n	80053d8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fbc:	88fb      	ldrh	r3, [r7, #6]
 8004fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d01f      	beq.n	8005006 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	441a      	add	r2, r3
 8004ff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005002:	b29b      	uxth	r3, r3
 8005004:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800500c:	2b01      	cmp	r3, #1
 800500e:	f040 81e3 	bne.w	80053d8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	695a      	ldr	r2, [r3, #20]
 8005016:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005018:	441a      	add	r2, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	69da      	ldr	r2, [r3, #28]
 8005022:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005024:	441a      	add	r2, r3
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	6a1a      	ldr	r2, [r3, #32]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	429a      	cmp	r2, r3
 8005034:	d309      	bcc.n	800504a <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	6a1a      	ldr	r2, [r3, #32]
 8005040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005042:	1ad2      	subs	r2, r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	621a      	str	r2, [r3, #32]
 8005048:	e014      	b.n	8005074 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8005052:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005054:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800505e:	e009      	b.n	8005074 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2200      	movs	r2, #0
 8005072:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d155      	bne.n	8005128 <HAL_PCD_EP_DB_Transmit+0x230>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	61bb      	str	r3, [r7, #24]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800508a:	b29b      	uxth	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	4413      	add	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	011a      	lsls	r2, r3, #4
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	4413      	add	r3, r2
 800509e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d112      	bne.n	80050d0 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	801a      	strh	r2, [r3, #0]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	801a      	strh	r2, [r3, #0]
 80050ce:	e047      	b.n	8005160 <HAL_PCD_EP_DB_Transmit+0x268>
 80050d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d2:	2b3e      	cmp	r3, #62	; 0x3e
 80050d4:	d811      	bhi.n	80050fa <HAL_PCD_EP_DB_Transmit+0x202>
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	085b      	lsrs	r3, r3, #1
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28
 80050dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <HAL_PCD_EP_DB_Transmit+0x1f4>
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	3301      	adds	r3, #1
 80050ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	029b      	lsls	r3, r3, #10
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	801a      	strh	r2, [r3, #0]
 80050f8:	e032      	b.n	8005160 <HAL_PCD_EP_DB_Transmit+0x268>
 80050fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005102:	f003 031f 	and.w	r3, r3, #31
 8005106:	2b00      	cmp	r3, #0
 8005108:	d102      	bne.n	8005110 <HAL_PCD_EP_DB_Transmit+0x218>
 800510a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510c:	3b01      	subs	r3, #1
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	b29b      	uxth	r3, r3
 8005114:	029b      	lsls	r3, r3, #10
 8005116:	b29b      	uxth	r3, r3
 8005118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800511c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005120:	b29a      	uxth	r2, r3
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	801a      	strh	r2, [r3, #0]
 8005126:	e01b      	b.n	8005160 <HAL_PCD_EP_DB_Transmit+0x268>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	785b      	ldrb	r3, [r3, #1]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d117      	bne.n	8005160 <HAL_PCD_EP_DB_Transmit+0x268>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	623b      	str	r3, [r7, #32]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800513e:	b29b      	uxth	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	4413      	add	r3, r2
 8005146:	623b      	str	r3, [r7, #32]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	011a      	lsls	r2, r3, #4
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	4413      	add	r3, r2
 8005152:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005156:	61fb      	str	r3, [r7, #28]
 8005158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515a:	b29a      	uxth	r2, r3
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6818      	ldr	r0, [r3, #0]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6959      	ldr	r1, [r3, #20]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	891a      	ldrh	r2, [r3, #8]
 800516c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516e:	b29b      	uxth	r3, r3
 8005170:	f003 fa24 	bl	80085bc <USB_WritePMA>
 8005174:	e130      	b.n	80053d8 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800517e:	b29b      	uxth	r3, r3
 8005180:	461a      	mov	r2, r3
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	4413      	add	r3, r2
 800518a:	3306      	adds	r3, #6
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800519e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	699a      	ldr	r2, [r3, #24]
 80051a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d306      	bcc.n	80051b8 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051b0:	1ad2      	subs	r2, r2, r3
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	619a      	str	r2, [r3, #24]
 80051b6:	e002      	b.n	80051be <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2200      	movs	r2, #0
 80051bc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d12c      	bne.n	8005220 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	4619      	mov	r1, r3
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f004 ffd6 	bl	800a17e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f040 80fd 	bne.w	80053d8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	441a      	add	r2, r3
 8005208:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800520a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005212:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521a:	b29b      	uxth	r3, r3
 800521c:	8013      	strh	r3, [r2, #0]
 800521e:	e0db      	b.n	80053d8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005220:	88fb      	ldrh	r3, [r7, #6]
 8005222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d11f      	bne.n	800526a <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29b      	uxth	r3, r3
 800523c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005244:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	461a      	mov	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	441a      	add	r2, r3
 8005254:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800525a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800525e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005266:	b29b      	uxth	r3, r3
 8005268:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005270:	2b01      	cmp	r3, #1
 8005272:	f040 80b1 	bne.w	80053d8 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800527c:	441a      	add	r2, r3
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	69da      	ldr	r2, [r3, #28]
 8005286:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005288:	441a      	add	r2, r3
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	6a1a      	ldr	r2, [r3, #32]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	429a      	cmp	r2, r3
 8005298:	d309      	bcc.n	80052ae <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	6a1a      	ldr	r2, [r3, #32]
 80052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a6:	1ad2      	subs	r2, r2, r3
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	621a      	str	r2, [r3, #32]
 80052ac:	e014      	b.n	80052d8 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80052b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052b8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80052c2:	e009      	b.n	80052d8 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2200      	movs	r2, #0
 80052ce:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	637b      	str	r3, [r7, #52]	; 0x34
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	785b      	ldrb	r3, [r3, #1]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d155      	bne.n	8005392 <HAL_PCD_EP_DB_Transmit+0x49a>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	647b      	str	r3, [r7, #68]	; 0x44
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052fa:	4413      	add	r3, r2
 80052fc:	647b      	str	r3, [r7, #68]	; 0x44
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	011a      	lsls	r2, r3, #4
 8005304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005306:	4413      	add	r3, r2
 8005308:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800530c:	643b      	str	r3, [r7, #64]	; 0x40
 800530e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005310:	2b00      	cmp	r3, #0
 8005312:	d112      	bne.n	800533a <HAL_PCD_EP_DB_Transmit+0x442>
 8005314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800531e:	b29a      	uxth	r2, r3
 8005320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005322:	801a      	strh	r2, [r3, #0]
 8005324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29b      	uxth	r3, r3
 800532a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800532e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005332:	b29a      	uxth	r2, r3
 8005334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005336:	801a      	strh	r2, [r3, #0]
 8005338:	e044      	b.n	80053c4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	2b3e      	cmp	r3, #62	; 0x3e
 800533e:	d811      	bhi.n	8005364 <HAL_PCD_EP_DB_Transmit+0x46c>
 8005340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <HAL_PCD_EP_DB_Transmit+0x45e>
 8005350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005352:	3301      	adds	r3, #1
 8005354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005358:	b29b      	uxth	r3, r3
 800535a:	029b      	lsls	r3, r3, #10
 800535c:	b29a      	uxth	r2, r3
 800535e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005360:	801a      	strh	r2, [r3, #0]
 8005362:	e02f      	b.n	80053c4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8005364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005366:	095b      	lsrs	r3, r3, #5
 8005368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	f003 031f 	and.w	r3, r3, #31
 8005370:	2b00      	cmp	r3, #0
 8005372:	d102      	bne.n	800537a <HAL_PCD_EP_DB_Transmit+0x482>
 8005374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005376:	3b01      	subs	r3, #1
 8005378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800537a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537c:	b29b      	uxth	r3, r3
 800537e:	029b      	lsls	r3, r3, #10
 8005380:	b29b      	uxth	r3, r3
 8005382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800538a:	b29a      	uxth	r2, r3
 800538c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800538e:	801a      	strh	r2, [r3, #0]
 8005390:	e018      	b.n	80053c4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	785b      	ldrb	r3, [r3, #1]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d114      	bne.n	80053c4 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a8:	4413      	add	r3, r2
 80053aa:	637b      	str	r3, [r7, #52]	; 0x34
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	011a      	lsls	r2, r3, #4
 80053b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b4:	4413      	add	r3, r2
 80053b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053ba:	633b      	str	r3, [r7, #48]	; 0x30
 80053bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053be:	b29a      	uxth	r2, r3
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	6959      	ldr	r1, [r3, #20]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	895a      	ldrh	r2, [r3, #10]
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	f003 f8f2 	bl	80085bc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053f2:	823b      	strh	r3, [r7, #16]
 80053f4:	8a3b      	ldrh	r3, [r7, #16]
 80053f6:	f083 0310 	eor.w	r3, r3, #16
 80053fa:	823b      	strh	r3, [r7, #16]
 80053fc:	8a3b      	ldrh	r3, [r7, #16]
 80053fe:	f083 0320 	eor.w	r3, r3, #32
 8005402:	823b      	strh	r3, [r7, #16]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	441a      	add	r2, r3
 8005412:	8a3b      	ldrh	r3, [r7, #16]
 8005414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005424:	b29b      	uxth	r3, r3
 8005426:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3748      	adds	r7, #72	; 0x48
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005432:	b480      	push	{r7}
 8005434:	b087      	sub	sp, #28
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	607b      	str	r3, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	817b      	strh	r3, [r7, #10]
 8005440:	4613      	mov	r3, r2
 8005442:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005444:	897b      	ldrh	r3, [r7, #10]
 8005446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00b      	beq.n	8005468 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005450:	897b      	ldrh	r3, [r7, #10]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	4613      	mov	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4413      	add	r3, r2
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	e009      	b.n	800547c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005468:	897a      	ldrh	r2, [r7, #10]
 800546a:	4613      	mov	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4413      	add	r3, r2
 800547a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800547c:	893b      	ldrh	r3, [r7, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d107      	bne.n	8005492 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2200      	movs	r2, #0
 8005486:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	b29a      	uxth	r2, r3
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	80da      	strh	r2, [r3, #6]
 8005490:	e00b      	b.n	80054aa <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2201      	movs	r2, #1
 8005496:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	b29a      	uxth	r2, r3
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	0c1b      	lsrs	r3, r3, #16
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	371c      	adds	r7, #28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr
	...

080054b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e26c      	b.n	80059a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 8087 	beq.w	80055e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054d8:	4b92      	ldr	r3, [pc, #584]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f003 030c 	and.w	r3, r3, #12
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d00c      	beq.n	80054fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80054e4:	4b8f      	ldr	r3, [pc, #572]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f003 030c 	and.w	r3, r3, #12
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d112      	bne.n	8005516 <HAL_RCC_OscConfig+0x5e>
 80054f0:	4b8c      	ldr	r3, [pc, #560]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fc:	d10b      	bne.n	8005516 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054fe:	4b89      	ldr	r3, [pc, #548]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d06c      	beq.n	80055e4 <HAL_RCC_OscConfig+0x12c>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d168      	bne.n	80055e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e246      	b.n	80059a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551e:	d106      	bne.n	800552e <HAL_RCC_OscConfig+0x76>
 8005520:	4b80      	ldr	r3, [pc, #512]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a7f      	ldr	r2, [pc, #508]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 8005526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	e02e      	b.n	800558c <HAL_RCC_OscConfig+0xd4>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10c      	bne.n	8005550 <HAL_RCC_OscConfig+0x98>
 8005536:	4b7b      	ldr	r3, [pc, #492]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a7a      	ldr	r2, [pc, #488]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 800553c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	4b78      	ldr	r3, [pc, #480]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a77      	ldr	r2, [pc, #476]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 8005548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	e01d      	b.n	800558c <HAL_RCC_OscConfig+0xd4>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005558:	d10c      	bne.n	8005574 <HAL_RCC_OscConfig+0xbc>
 800555a:	4b72      	ldr	r3, [pc, #456]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a71      	ldr	r2, [pc, #452]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 8005560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	4b6f      	ldr	r3, [pc, #444]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a6e      	ldr	r2, [pc, #440]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 800556c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	e00b      	b.n	800558c <HAL_RCC_OscConfig+0xd4>
 8005574:	4b6b      	ldr	r3, [pc, #428]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a6a      	ldr	r2, [pc, #424]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 800557a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	4b68      	ldr	r3, [pc, #416]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a67      	ldr	r2, [pc, #412]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 8005586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800558a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d013      	beq.n	80055bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005594:	f7fc f8c6 	bl	8001724 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800559c:	f7fc f8c2 	bl	8001724 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b64      	cmp	r3, #100	; 0x64
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e1fa      	b.n	80059a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ae:	4b5d      	ldr	r3, [pc, #372]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0f0      	beq.n	800559c <HAL_RCC_OscConfig+0xe4>
 80055ba:	e014      	b.n	80055e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055bc:	f7fc f8b2 	bl	8001724 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055c4:	f7fc f8ae 	bl	8001724 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b64      	cmp	r3, #100	; 0x64
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e1e6      	b.n	80059a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055d6:	4b53      	ldr	r3, [pc, #332]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_OscConfig+0x10c>
 80055e2:	e000      	b.n	80055e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d063      	beq.n	80056ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055f2:	4b4c      	ldr	r3, [pc, #304]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f003 030c 	and.w	r3, r3, #12
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00b      	beq.n	8005616 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80055fe:	4b49      	ldr	r3, [pc, #292]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f003 030c 	and.w	r3, r3, #12
 8005606:	2b08      	cmp	r3, #8
 8005608:	d11c      	bne.n	8005644 <HAL_RCC_OscConfig+0x18c>
 800560a:	4b46      	ldr	r3, [pc, #280]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d116      	bne.n	8005644 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005616:	4b43      	ldr	r3, [pc, #268]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <HAL_RCC_OscConfig+0x176>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d001      	beq.n	800562e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e1ba      	b.n	80059a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800562e:	4b3d      	ldr	r3, [pc, #244]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	4939      	ldr	r1, [pc, #228]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 800563e:	4313      	orrs	r3, r2
 8005640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005642:	e03a      	b.n	80056ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d020      	beq.n	800568e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800564c:	4b36      	ldr	r3, [pc, #216]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800564e:	2201      	movs	r2, #1
 8005650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005652:	f7fc f867 	bl	8001724 <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800565a:	f7fc f863 	bl	8001724 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e19b      	b.n	80059a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800566c:	4b2d      	ldr	r3, [pc, #180]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0f0      	beq.n	800565a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005678:	4b2a      	ldr	r3, [pc, #168]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	4927      	ldr	r1, [pc, #156]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 8005688:	4313      	orrs	r3, r2
 800568a:	600b      	str	r3, [r1, #0]
 800568c:	e015      	b.n	80056ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800568e:	4b26      	ldr	r3, [pc, #152]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005694:	f7fc f846 	bl	8001724 <HAL_GetTick>
 8005698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800569a:	e008      	b.n	80056ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800569c:	f7fc f842 	bl	8001724 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e17a      	b.n	80059a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ae:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1f0      	bne.n	800569c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d03a      	beq.n	800573c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d019      	beq.n	8005702 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ce:	4b17      	ldr	r3, [pc, #92]	; (800572c <HAL_RCC_OscConfig+0x274>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d4:	f7fc f826 	bl	8001724 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056dc:	f7fc f822 	bl	8001724 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e15a      	b.n	80059a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ee:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <HAL_RCC_OscConfig+0x26c>)
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0f0      	beq.n	80056dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80056fa:	2001      	movs	r0, #1
 80056fc:	f000 fac6 	bl	8005c8c <RCC_Delay>
 8005700:	e01c      	b.n	800573c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005702:	4b0a      	ldr	r3, [pc, #40]	; (800572c <HAL_RCC_OscConfig+0x274>)
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005708:	f7fc f80c 	bl	8001724 <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800570e:	e00f      	b.n	8005730 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005710:	f7fc f808 	bl	8001724 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d908      	bls.n	8005730 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e140      	b.n	80059a4 <HAL_RCC_OscConfig+0x4ec>
 8005722:	bf00      	nop
 8005724:	40021000 	.word	0x40021000
 8005728:	42420000 	.word	0x42420000
 800572c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005730:	4b9e      	ldr	r3, [pc, #632]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e9      	bne.n	8005710 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 80a6 	beq.w	8005896 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800574a:	2300      	movs	r3, #0
 800574c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800574e:	4b97      	ldr	r3, [pc, #604]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10d      	bne.n	8005776 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800575a:	4b94      	ldr	r3, [pc, #592]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	4a93      	ldr	r2, [pc, #588]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 8005760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005764:	61d3      	str	r3, [r2, #28]
 8005766:	4b91      	ldr	r3, [pc, #580]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576e:	60bb      	str	r3, [r7, #8]
 8005770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005772:	2301      	movs	r3, #1
 8005774:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005776:	4b8e      	ldr	r3, [pc, #568]	; (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577e:	2b00      	cmp	r3, #0
 8005780:	d118      	bne.n	80057b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005782:	4b8b      	ldr	r3, [pc, #556]	; (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a8a      	ldr	r2, [pc, #552]	; (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800578c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800578e:	f7fb ffc9 	bl	8001724 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005796:	f7fb ffc5 	bl	8001724 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b64      	cmp	r3, #100	; 0x64
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e0fd      	b.n	80059a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a8:	4b81      	ldr	r3, [pc, #516]	; (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d106      	bne.n	80057ca <HAL_RCC_OscConfig+0x312>
 80057bc:	4b7b      	ldr	r3, [pc, #492]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	4a7a      	ldr	r2, [pc, #488]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 80057c2:	f043 0301 	orr.w	r3, r3, #1
 80057c6:	6213      	str	r3, [r2, #32]
 80057c8:	e02d      	b.n	8005826 <HAL_RCC_OscConfig+0x36e>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10c      	bne.n	80057ec <HAL_RCC_OscConfig+0x334>
 80057d2:	4b76      	ldr	r3, [pc, #472]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	4a75      	ldr	r2, [pc, #468]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 80057d8:	f023 0301 	bic.w	r3, r3, #1
 80057dc:	6213      	str	r3, [r2, #32]
 80057de:	4b73      	ldr	r3, [pc, #460]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	4a72      	ldr	r2, [pc, #456]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 80057e4:	f023 0304 	bic.w	r3, r3, #4
 80057e8:	6213      	str	r3, [r2, #32]
 80057ea:	e01c      	b.n	8005826 <HAL_RCC_OscConfig+0x36e>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	2b05      	cmp	r3, #5
 80057f2:	d10c      	bne.n	800580e <HAL_RCC_OscConfig+0x356>
 80057f4:	4b6d      	ldr	r3, [pc, #436]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	4a6c      	ldr	r2, [pc, #432]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 80057fa:	f043 0304 	orr.w	r3, r3, #4
 80057fe:	6213      	str	r3, [r2, #32]
 8005800:	4b6a      	ldr	r3, [pc, #424]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	4a69      	ldr	r2, [pc, #420]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 8005806:	f043 0301 	orr.w	r3, r3, #1
 800580a:	6213      	str	r3, [r2, #32]
 800580c:	e00b      	b.n	8005826 <HAL_RCC_OscConfig+0x36e>
 800580e:	4b67      	ldr	r3, [pc, #412]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	4a66      	ldr	r2, [pc, #408]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 8005814:	f023 0301 	bic.w	r3, r3, #1
 8005818:	6213      	str	r3, [r2, #32]
 800581a:	4b64      	ldr	r3, [pc, #400]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	4a63      	ldr	r2, [pc, #396]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 8005820:	f023 0304 	bic.w	r3, r3, #4
 8005824:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d015      	beq.n	800585a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800582e:	f7fb ff79 	bl	8001724 <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005834:	e00a      	b.n	800584c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005836:	f7fb ff75 	bl	8001724 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	f241 3288 	movw	r2, #5000	; 0x1388
 8005844:	4293      	cmp	r3, r2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e0ab      	b.n	80059a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800584c:	4b57      	ldr	r3, [pc, #348]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0ee      	beq.n	8005836 <HAL_RCC_OscConfig+0x37e>
 8005858:	e014      	b.n	8005884 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800585a:	f7fb ff63 	bl	8001724 <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005860:	e00a      	b.n	8005878 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005862:	f7fb ff5f 	bl	8001724 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005870:	4293      	cmp	r3, r2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e095      	b.n	80059a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005878:	4b4c      	ldr	r3, [pc, #304]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1ee      	bne.n	8005862 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005884:	7dfb      	ldrb	r3, [r7, #23]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d105      	bne.n	8005896 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800588a:	4b48      	ldr	r3, [pc, #288]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	4a47      	ldr	r2, [pc, #284]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 8005890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005894:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 8081 	beq.w	80059a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058a0:	4b42      	ldr	r3, [pc, #264]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f003 030c 	and.w	r3, r3, #12
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d061      	beq.n	8005970 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d146      	bne.n	8005942 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b4:	4b3f      	ldr	r3, [pc, #252]	; (80059b4 <HAL_RCC_OscConfig+0x4fc>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ba:	f7fb ff33 	bl	8001724 <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058c0:	e008      	b.n	80058d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c2:	f7fb ff2f 	bl	8001724 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e067      	b.n	80059a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058d4:	4b35      	ldr	r3, [pc, #212]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1f0      	bne.n	80058c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e8:	d108      	bne.n	80058fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80058ea:	4b30      	ldr	r3, [pc, #192]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	492d      	ldr	r1, [pc, #180]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058fc:	4b2b      	ldr	r3, [pc, #172]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a19      	ldr	r1, [r3, #32]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	430b      	orrs	r3, r1
 800590e:	4927      	ldr	r1, [pc, #156]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 8005910:	4313      	orrs	r3, r2
 8005912:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005914:	4b27      	ldr	r3, [pc, #156]	; (80059b4 <HAL_RCC_OscConfig+0x4fc>)
 8005916:	2201      	movs	r2, #1
 8005918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591a:	f7fb ff03 	bl	8001724 <HAL_GetTick>
 800591e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005920:	e008      	b.n	8005934 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005922:	f7fb feff 	bl	8001724 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e037      	b.n	80059a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005934:	4b1d      	ldr	r3, [pc, #116]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0f0      	beq.n	8005922 <HAL_RCC_OscConfig+0x46a>
 8005940:	e02f      	b.n	80059a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005942:	4b1c      	ldr	r3, [pc, #112]	; (80059b4 <HAL_RCC_OscConfig+0x4fc>)
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005948:	f7fb feec 	bl	8001724 <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005950:	f7fb fee8 	bl	8001724 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e020      	b.n	80059a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005962:	4b12      	ldr	r3, [pc, #72]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1f0      	bne.n	8005950 <HAL_RCC_OscConfig+0x498>
 800596e:	e018      	b.n	80059a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e013      	b.n	80059a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800597c:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <HAL_RCC_OscConfig+0x4f4>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	429a      	cmp	r2, r3
 800598e:	d106      	bne.n	800599e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800599a:	429a      	cmp	r2, r3
 800599c:	d001      	beq.n	80059a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e000      	b.n	80059a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3718      	adds	r7, #24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	40021000 	.word	0x40021000
 80059b0:	40007000 	.word	0x40007000
 80059b4:	42420060 	.word	0x42420060

080059b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e0d0      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059cc:	4b6a      	ldr	r3, [pc, #424]	; (8005b78 <HAL_RCC_ClockConfig+0x1c0>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d910      	bls.n	80059fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059da:	4b67      	ldr	r3, [pc, #412]	; (8005b78 <HAL_RCC_ClockConfig+0x1c0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f023 0207 	bic.w	r2, r3, #7
 80059e2:	4965      	ldr	r1, [pc, #404]	; (8005b78 <HAL_RCC_ClockConfig+0x1c0>)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ea:	4b63      	ldr	r3, [pc, #396]	; (8005b78 <HAL_RCC_ClockConfig+0x1c0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d001      	beq.n	80059fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e0b8      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d020      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a14:	4b59      	ldr	r3, [pc, #356]	; (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	4a58      	ldr	r2, [pc, #352]	; (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a2c:	4b53      	ldr	r3, [pc, #332]	; (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	4a52      	ldr	r2, [pc, #328]	; (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005a36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a38:	4b50      	ldr	r3, [pc, #320]	; (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	494d      	ldr	r1, [pc, #308]	; (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d040      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d107      	bne.n	8005a6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a5e:	4b47      	ldr	r3, [pc, #284]	; (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d115      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e07f      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d107      	bne.n	8005a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a76:	4b41      	ldr	r3, [pc, #260]	; (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d109      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e073      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a86:	4b3d      	ldr	r3, [pc, #244]	; (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e06b      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a96:	4b39      	ldr	r3, [pc, #228]	; (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f023 0203 	bic.w	r2, r3, #3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	4936      	ldr	r1, [pc, #216]	; (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005aa8:	f7fb fe3c 	bl	8001724 <HAL_GetTick>
 8005aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aae:	e00a      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab0:	f7fb fe38 	bl	8001724 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e053      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac6:	4b2d      	ldr	r3, [pc, #180]	; (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f003 020c 	and.w	r2, r3, #12
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d1eb      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad8:	4b27      	ldr	r3, [pc, #156]	; (8005b78 <HAL_RCC_ClockConfig+0x1c0>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d210      	bcs.n	8005b08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ae6:	4b24      	ldr	r3, [pc, #144]	; (8005b78 <HAL_RCC_ClockConfig+0x1c0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f023 0207 	bic.w	r2, r3, #7
 8005aee:	4922      	ldr	r1, [pc, #136]	; (8005b78 <HAL_RCC_ClockConfig+0x1c0>)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005af6:	4b20      	ldr	r3, [pc, #128]	; (8005b78 <HAL_RCC_ClockConfig+0x1c0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d001      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e032      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b14:	4b19      	ldr	r3, [pc, #100]	; (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	4916      	ldr	r1, [pc, #88]	; (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d009      	beq.n	8005b46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b32:	4b12      	ldr	r3, [pc, #72]	; (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	490e      	ldr	r1, [pc, #56]	; (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b46:	f000 f821 	bl	8005b8c <HAL_RCC_GetSysClockFreq>
 8005b4a:	4601      	mov	r1, r0
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	091b      	lsrs	r3, r3, #4
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	4a0a      	ldr	r2, [pc, #40]	; (8005b80 <HAL_RCC_ClockConfig+0x1c8>)
 8005b58:	5cd3      	ldrb	r3, [r2, r3]
 8005b5a:	fa21 f303 	lsr.w	r3, r1, r3
 8005b5e:	4a09      	ldr	r2, [pc, #36]	; (8005b84 <HAL_RCC_ClockConfig+0x1cc>)
 8005b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b62:	4b09      	ldr	r3, [pc, #36]	; (8005b88 <HAL_RCC_ClockConfig+0x1d0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fb fd9a 	bl	80016a0 <HAL_InitTick>

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40022000 	.word	0x40022000
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	0800a700 	.word	0x0800a700
 8005b84:	20000018 	.word	0x20000018
 8005b88:	2000001c 	.word	0x2000001c

08005b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b8c:	b490      	push	{r4, r7}
 8005b8e:	b08a      	sub	sp, #40	; 0x28
 8005b90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005b92:	4b2a      	ldr	r3, [pc, #168]	; (8005c3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005b94:	1d3c      	adds	r4, r7, #4
 8005b96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005b9c:	4b28      	ldr	r3, [pc, #160]	; (8005c40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61fb      	str	r3, [r7, #28]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	2300      	movs	r3, #0
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
 8005bae:	2300      	movs	r3, #0
 8005bb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005bb6:	4b23      	ldr	r3, [pc, #140]	; (8005c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	f003 030c 	and.w	r3, r3, #12
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d002      	beq.n	8005bcc <HAL_RCC_GetSysClockFreq+0x40>
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	d003      	beq.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x46>
 8005bca:	e02d      	b.n	8005c28 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005bcc:	4b1e      	ldr	r3, [pc, #120]	; (8005c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005bce:	623b      	str	r3, [r7, #32]
      break;
 8005bd0:	e02d      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	0c9b      	lsrs	r3, r3, #18
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005bde:	4413      	add	r3, r2
 8005be0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005be4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d013      	beq.n	8005c18 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005bf0:	4b14      	ldr	r3, [pc, #80]	; (8005c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	0c5b      	lsrs	r3, r3, #17
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005bfe:	4413      	add	r3, r2
 8005c00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005c04:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	4a0f      	ldr	r2, [pc, #60]	; (8005c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c0a:	fb02 f203 	mul.w	r2, r2, r3
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24
 8005c16:	e004      	b.n	8005c22 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	4a0c      	ldr	r2, [pc, #48]	; (8005c4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c1c:	fb02 f303 	mul.w	r3, r2, r3
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	623b      	str	r3, [r7, #32]
      break;
 8005c26:	e002      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c28:	4b07      	ldr	r3, [pc, #28]	; (8005c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c2a:	623b      	str	r3, [r7, #32]
      break;
 8005c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3728      	adds	r7, #40	; 0x28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bc90      	pop	{r4, r7}
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	0800a6a4 	.word	0x0800a6a4
 8005c40:	0800a6b4 	.word	0x0800a6b4
 8005c44:	40021000 	.word	0x40021000
 8005c48:	007a1200 	.word	0x007a1200
 8005c4c:	003d0900 	.word	0x003d0900

08005c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c54:	4b02      	ldr	r3, [pc, #8]	; (8005c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c56:	681b      	ldr	r3, [r3, #0]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr
 8005c60:	20000018 	.word	0x20000018

08005c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c68:	f7ff fff2 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8005c6c:	4601      	mov	r1, r0
 8005c6e:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	0a1b      	lsrs	r3, r3, #8
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	4a03      	ldr	r2, [pc, #12]	; (8005c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c7a:	5cd3      	ldrb	r3, [r2, r3]
 8005c7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40021000 	.word	0x40021000
 8005c88:	0800a710 	.word	0x0800a710

08005c8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c94:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <RCC_Delay+0x34>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a0a      	ldr	r2, [pc, #40]	; (8005cc4 <RCC_Delay+0x38>)
 8005c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9e:	0a5b      	lsrs	r3, r3, #9
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	fb02 f303 	mul.w	r3, r2, r3
 8005ca6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ca8:	bf00      	nop
  }
  while (Delay --);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	1e5a      	subs	r2, r3, #1
 8005cae:	60fa      	str	r2, [r7, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1f9      	bne.n	8005ca8 <RCC_Delay+0x1c>
}
 8005cb4:	bf00      	nop
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	20000018 	.word	0x20000018
 8005cc4:	10624dd3 	.word	0x10624dd3

08005cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d07d      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ce8:	4b4f      	ldr	r3, [pc, #316]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10d      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cf4:	4b4c      	ldr	r3, [pc, #304]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	4a4b      	ldr	r2, [pc, #300]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cfe:	61d3      	str	r3, [r2, #28]
 8005d00:	4b49      	ldr	r3, [pc, #292]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d08:	60bb      	str	r3, [r7, #8]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d10:	4b46      	ldr	r3, [pc, #280]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d118      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d1c:	4b43      	ldr	r3, [pc, #268]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a42      	ldr	r2, [pc, #264]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d28:	f7fb fcfc 	bl	8001724 <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d2e:	e008      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d30:	f7fb fcf8 	bl	8001724 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b64      	cmp	r3, #100	; 0x64
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e06d      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d42:	4b3a      	ldr	r3, [pc, #232]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0f0      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d4e:	4b36      	ldr	r3, [pc, #216]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d02e      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d027      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d6c:	4b2e      	ldr	r3, [pc, #184]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d76:	4b2e      	ldr	r3, [pc, #184]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d78:	2201      	movs	r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d7c:	4b2c      	ldr	r3, [pc, #176]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d82:	4a29      	ldr	r2, [pc, #164]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d014      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d92:	f7fb fcc7 	bl	8001724 <HAL_GetTick>
 8005d96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d98:	e00a      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d9a:	f7fb fcc3 	bl	8001724 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e036      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db0:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0ee      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dbc:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	4917      	ldr	r1, [pc, #92]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005dce:	7dfb      	ldrb	r3, [r7, #23]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d105      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dd4:	4b14      	ldr	r3, [pc, #80]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	4a13      	ldr	r2, [pc, #76]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d008      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005dec:	4b0e      	ldr	r3, [pc, #56]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	490b      	ldr	r1, [pc, #44]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d008      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e0a:	4b07      	ldr	r3, [pc, #28]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	4904      	ldr	r1, [pc, #16]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	40007000 	.word	0x40007000
 8005e30:	42420440 	.word	0x42420440

08005e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e041      	b.n	8005eca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d106      	bne.n	8005e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fb f9cc 	bl	80011f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4619      	mov	r1, r3
 8005e72:	4610      	mov	r0, r2
 8005e74:	f000 fa1a 	bl	80062ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d122      	bne.n	8005f2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d11b      	bne.n	8005f2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f06f 0202 	mvn.w	r2, #2
 8005efe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	f003 0303 	and.w	r3, r3, #3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f9ad 	bl	8006274 <HAL_TIM_IC_CaptureCallback>
 8005f1a:	e005      	b.n	8005f28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f9a0 	bl	8006262 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f9af 	bl	8006286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d122      	bne.n	8005f82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f003 0304 	and.w	r3, r3, #4
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d11b      	bne.n	8005f82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f06f 0204 	mvn.w	r2, #4
 8005f52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f983 	bl	8006274 <HAL_TIM_IC_CaptureCallback>
 8005f6e:	e005      	b.n	8005f7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f976 	bl	8006262 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f985 	bl	8006286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f003 0308 	and.w	r3, r3, #8
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d122      	bne.n	8005fd6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f003 0308 	and.w	r3, r3, #8
 8005f9a:	2b08      	cmp	r3, #8
 8005f9c:	d11b      	bne.n	8005fd6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f06f 0208 	mvn.w	r2, #8
 8005fa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2204      	movs	r2, #4
 8005fac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	f003 0303 	and.w	r3, r3, #3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f959 	bl	8006274 <HAL_TIM_IC_CaptureCallback>
 8005fc2:	e005      	b.n	8005fd0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f94c 	bl	8006262 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f95b 	bl	8006286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	f003 0310 	and.w	r3, r3, #16
 8005fe0:	2b10      	cmp	r3, #16
 8005fe2:	d122      	bne.n	800602a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f003 0310 	and.w	r3, r3, #16
 8005fee:	2b10      	cmp	r3, #16
 8005ff0:	d11b      	bne.n	800602a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f06f 0210 	mvn.w	r2, #16
 8005ffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2208      	movs	r2, #8
 8006000:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f92f 	bl	8006274 <HAL_TIM_IC_CaptureCallback>
 8006016:	e005      	b.n	8006024 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f922 	bl	8006262 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f931 	bl	8006286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b01      	cmp	r3, #1
 8006036:	d10e      	bne.n	8006056 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b01      	cmp	r3, #1
 8006044:	d107      	bne.n	8006056 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f06f 0201 	mvn.w	r2, #1
 800604e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f8fd 	bl	8006250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006060:	2b80      	cmp	r3, #128	; 0x80
 8006062:	d10e      	bne.n	8006082 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606e:	2b80      	cmp	r3, #128	; 0x80
 8006070:	d107      	bne.n	8006082 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800607a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fa74 	bl	800656a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608c:	2b40      	cmp	r3, #64	; 0x40
 800608e:	d10e      	bne.n	80060ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609a:	2b40      	cmp	r3, #64	; 0x40
 800609c:	d107      	bne.n	80060ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f8f5 	bl	8006298 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b20      	cmp	r3, #32
 80060ba:	d10e      	bne.n	80060da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d107      	bne.n	80060da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f06f 0220 	mvn.w	r2, #32
 80060d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fa3f 	bl	8006558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060da:	bf00      	nop
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b084      	sub	sp, #16
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_TIM_ConfigClockSource+0x18>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e0a6      	b.n	8006248 <HAL_TIM_ConfigClockSource+0x166>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2202      	movs	r2, #2
 8006106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006118:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006120:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b40      	cmp	r3, #64	; 0x40
 8006130:	d067      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0x120>
 8006132:	2b40      	cmp	r3, #64	; 0x40
 8006134:	d80b      	bhi.n	800614e <HAL_TIM_ConfigClockSource+0x6c>
 8006136:	2b10      	cmp	r3, #16
 8006138:	d073      	beq.n	8006222 <HAL_TIM_ConfigClockSource+0x140>
 800613a:	2b10      	cmp	r3, #16
 800613c:	d802      	bhi.n	8006144 <HAL_TIM_ConfigClockSource+0x62>
 800613e:	2b00      	cmp	r3, #0
 8006140:	d06f      	beq.n	8006222 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006142:	e078      	b.n	8006236 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006144:	2b20      	cmp	r3, #32
 8006146:	d06c      	beq.n	8006222 <HAL_TIM_ConfigClockSource+0x140>
 8006148:	2b30      	cmp	r3, #48	; 0x30
 800614a:	d06a      	beq.n	8006222 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800614c:	e073      	b.n	8006236 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800614e:	2b70      	cmp	r3, #112	; 0x70
 8006150:	d00d      	beq.n	800616e <HAL_TIM_ConfigClockSource+0x8c>
 8006152:	2b70      	cmp	r3, #112	; 0x70
 8006154:	d804      	bhi.n	8006160 <HAL_TIM_ConfigClockSource+0x7e>
 8006156:	2b50      	cmp	r3, #80	; 0x50
 8006158:	d033      	beq.n	80061c2 <HAL_TIM_ConfigClockSource+0xe0>
 800615a:	2b60      	cmp	r3, #96	; 0x60
 800615c:	d041      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800615e:	e06a      	b.n	8006236 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006164:	d066      	beq.n	8006234 <HAL_TIM_ConfigClockSource+0x152>
 8006166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800616a:	d017      	beq.n	800619c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800616c:	e063      	b.n	8006236 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6818      	ldr	r0, [r3, #0]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	6899      	ldr	r1, [r3, #8]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f000 f96e 	bl	800645e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006190:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	609a      	str	r2, [r3, #8]
      break;
 800619a:	e04c      	b.n	8006236 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6818      	ldr	r0, [r3, #0]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	6899      	ldr	r1, [r3, #8]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f000 f957 	bl	800645e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061be:	609a      	str	r2, [r3, #8]
      break;
 80061c0:	e039      	b.n	8006236 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	6859      	ldr	r1, [r3, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	461a      	mov	r2, r3
 80061d0:	f000 f8ce 	bl	8006370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2150      	movs	r1, #80	; 0x50
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 f925 	bl	800642a <TIM_ITRx_SetConfig>
      break;
 80061e0:	e029      	b.n	8006236 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6818      	ldr	r0, [r3, #0]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	6859      	ldr	r1, [r3, #4]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	461a      	mov	r2, r3
 80061f0:	f000 f8ec 	bl	80063cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2160      	movs	r1, #96	; 0x60
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 f915 	bl	800642a <TIM_ITRx_SetConfig>
      break;
 8006200:	e019      	b.n	8006236 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6818      	ldr	r0, [r3, #0]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	6859      	ldr	r1, [r3, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	461a      	mov	r2, r3
 8006210:	f000 f8ae 	bl	8006370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2140      	movs	r1, #64	; 0x40
 800621a:	4618      	mov	r0, r3
 800621c:	f000 f905 	bl	800642a <TIM_ITRx_SetConfig>
      break;
 8006220:	e009      	b.n	8006236 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4619      	mov	r1, r3
 800622c:	4610      	mov	r0, r2
 800622e:	f000 f8fc 	bl	800642a <TIM_ITRx_SetConfig>
        break;
 8006232:	e000      	b.n	8006236 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006234:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr

08006262 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr

08006274 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	bc80      	pop	{r7}
 8006284:	4770      	bx	lr

08006286 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	bc80      	pop	{r7}
 8006296:	4770      	bx	lr

08006298 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bc80      	pop	{r7}
 80062a8:	4770      	bx	lr
	...

080062ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a29      	ldr	r2, [pc, #164]	; (8006364 <TIM_Base_SetConfig+0xb8>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00b      	beq.n	80062dc <TIM_Base_SetConfig+0x30>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ca:	d007      	beq.n	80062dc <TIM_Base_SetConfig+0x30>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a26      	ldr	r2, [pc, #152]	; (8006368 <TIM_Base_SetConfig+0xbc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d003      	beq.n	80062dc <TIM_Base_SetConfig+0x30>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a25      	ldr	r2, [pc, #148]	; (800636c <TIM_Base_SetConfig+0xc0>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d108      	bne.n	80062ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a1c      	ldr	r2, [pc, #112]	; (8006364 <TIM_Base_SetConfig+0xb8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00b      	beq.n	800630e <TIM_Base_SetConfig+0x62>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062fc:	d007      	beq.n	800630e <TIM_Base_SetConfig+0x62>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a19      	ldr	r2, [pc, #100]	; (8006368 <TIM_Base_SetConfig+0xbc>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d003      	beq.n	800630e <TIM_Base_SetConfig+0x62>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a18      	ldr	r2, [pc, #96]	; (800636c <TIM_Base_SetConfig+0xc0>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d108      	bne.n	8006320 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a07      	ldr	r2, [pc, #28]	; (8006364 <TIM_Base_SetConfig+0xb8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d103      	bne.n	8006354 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	615a      	str	r2, [r3, #20]
}
 800635a:	bf00      	nop
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	bc80      	pop	{r7}
 8006362:	4770      	bx	lr
 8006364:	40012c00 	.word	0x40012c00
 8006368:	40000400 	.word	0x40000400
 800636c:	40000800 	.word	0x40000800

08006370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006370:	b480      	push	{r7}
 8006372:	b087      	sub	sp, #28
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	f023 0201 	bic.w	r2, r3, #1
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800639a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f023 030a 	bic.w	r3, r3, #10
 80063ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	621a      	str	r2, [r3, #32]
}
 80063c2:	bf00      	nop
 80063c4:	371c      	adds	r7, #28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bc80      	pop	{r7}
 80063ca:	4770      	bx	lr

080063cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	f023 0210 	bic.w	r2, r3, #16
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	031b      	lsls	r3, r3, #12
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006408:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	4313      	orrs	r3, r2
 8006412:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	621a      	str	r2, [r3, #32]
}
 8006420:	bf00      	nop
 8006422:	371c      	adds	r7, #28
 8006424:	46bd      	mov	sp, r7
 8006426:	bc80      	pop	{r7}
 8006428:	4770      	bx	lr

0800642a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800642a:	b480      	push	{r7}
 800642c:	b085      	sub	sp, #20
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4313      	orrs	r3, r2
 8006448:	f043 0307 	orr.w	r3, r3, #7
 800644c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	609a      	str	r2, [r3, #8]
}
 8006454:	bf00      	nop
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	bc80      	pop	{r7}
 800645c:	4770      	bx	lr

0800645e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800645e:	b480      	push	{r7}
 8006460:	b087      	sub	sp, #28
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
 800646a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006478:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	021a      	lsls	r2, r3, #8
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	431a      	orrs	r2, r3
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	4313      	orrs	r3, r2
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	609a      	str	r2, [r3, #8]
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	bc80      	pop	{r7}
 800649a:	4770      	bx	lr

0800649c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e046      	b.n	8006542 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a16      	ldr	r2, [pc, #88]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00e      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006500:	d009      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a12      	ldr	r2, [pc, #72]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d004      	beq.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a10      	ldr	r2, [pc, #64]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d10c      	bne.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800651c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	4313      	orrs	r3, r2
 8006526:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	bc80      	pop	{r7}
 800654a:	4770      	bx	lr
 800654c:	40012c00 	.word	0x40012c00
 8006550:	40000400 	.word	0x40000400
 8006554:	40000800 	.word	0x40000800

08006558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	4770      	bx	lr

0800656a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006572:	bf00      	nop
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	bc80      	pop	{r7}
 800657a:	4770      	bx	lr

0800657c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800657c:	b084      	sub	sp, #16
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	f107 0014 	add.w	r0, r7, #20
 800658a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	b004      	add	sp, #16
 800659a:	4770      	bx	lr

0800659c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80065b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr

080065c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80065d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	43db      	mvns	r3, r3
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	4013      	ands	r3, r2
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bc80      	pop	{r7}
 80065fa:	4770      	bx	lr

080065fc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	bc80      	pop	{r7}
 8006612:	4770      	bx	lr

08006614 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006614:	b084      	sub	sp, #16
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	f107 0014 	add.w	r0, r7, #20
 8006622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	bc80      	pop	{r7}
 8006650:	b004      	add	sp, #16
 8006652:	4770      	bx	lr

08006654 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006654:	b480      	push	{r7}
 8006656:	b09b      	sub	sp, #108	; 0x6c
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	b29b      	uxth	r3, r3
 8006672:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	78db      	ldrb	r3, [r3, #3]
 8006682:	2b03      	cmp	r3, #3
 8006684:	d81f      	bhi.n	80066c6 <USB_ActivateEndpoint+0x72>
 8006686:	a201      	add	r2, pc, #4	; (adr r2, 800668c <USB_ActivateEndpoint+0x38>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	0800669d 	.word	0x0800669d
 8006690:	080066b9 	.word	0x080066b9
 8006694:	080066cf 	.word	0x080066cf
 8006698:	080066ab 	.word	0x080066ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800669c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80066a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80066a8:	e012      	b.n	80066d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80066aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80066ae:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80066b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80066b6:	e00b      	b.n	80066d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80066b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80066bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80066c4:	e004      	b.n	80066d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80066cc:	e000      	b.n	80066d0 <USB_ActivateEndpoint+0x7c>
      break;
 80066ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	441a      	add	r2, r3
 80066da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80066de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006708:	b29a      	uxth	r2, r3
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	b29b      	uxth	r3, r3
 8006710:	4313      	orrs	r3, r2
 8006712:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800672c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006734:	b29b      	uxth	r3, r3
 8006736:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	7b1b      	ldrb	r3, [r3, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	f040 8149 	bne.w	80069d4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	785b      	ldrb	r3, [r3, #1]
 8006746:	2b00      	cmp	r3, #0
 8006748:	f000 8084 	beq.w	8006854 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006756:	b29b      	uxth	r3, r3
 8006758:	461a      	mov	r2, r3
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	4413      	add	r3, r2
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	011a      	lsls	r2, r3, #4
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	88db      	ldrh	r3, [r3, #6]
 8006774:	085b      	lsrs	r3, r3, #1
 8006776:	b29b      	uxth	r3, r3
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	81fb      	strh	r3, [r7, #14]
 800678e:	89fb      	ldrh	r3, [r7, #14]
 8006790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01b      	beq.n	80067d0 <USB_ActivateEndpoint+0x17c>
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ae:	81bb      	strh	r3, [r7, #12]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	441a      	add	r2, r3
 80067ba:	89bb      	ldrh	r3, [r7, #12]
 80067bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	78db      	ldrb	r3, [r3, #3]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d020      	beq.n	800681a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ee:	813b      	strh	r3, [r7, #8]
 80067f0:	893b      	ldrh	r3, [r7, #8]
 80067f2:	f083 0320 	eor.w	r3, r3, #32
 80067f6:	813b      	strh	r3, [r7, #8]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	441a      	add	r2, r3
 8006802:	893b      	ldrh	r3, [r7, #8]
 8006804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800680c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006814:	b29b      	uxth	r3, r3
 8006816:	8013      	strh	r3, [r2, #0]
 8006818:	e27f      	b.n	8006d1a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800682c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006830:	817b      	strh	r3, [r7, #10]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	441a      	add	r2, r3
 800683c:	897b      	ldrh	r3, [r7, #10]
 800683e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800684a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684e:	b29b      	uxth	r3, r3
 8006850:	8013      	strh	r3, [r2, #0]
 8006852:	e262      	b.n	8006d1a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800685e:	b29b      	uxth	r3, r3
 8006860:	461a      	mov	r2, r3
 8006862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006864:	4413      	add	r3, r2
 8006866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	011a      	lsls	r2, r3, #4
 800686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006870:	4413      	add	r3, r2
 8006872:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006876:	62bb      	str	r3, [r7, #40]	; 0x28
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	88db      	ldrh	r3, [r3, #6]
 800687c:	085b      	lsrs	r3, r3, #1
 800687e:	b29b      	uxth	r3, r3
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	b29a      	uxth	r2, r3
 8006884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006886:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	627b      	str	r3, [r7, #36]	; 0x24
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006892:	b29b      	uxth	r3, r3
 8006894:	461a      	mov	r2, r3
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	4413      	add	r3, r2
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	011a      	lsls	r2, r3, #4
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	4413      	add	r3, r2
 80068a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068aa:	623b      	str	r3, [r7, #32]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d112      	bne.n	80068da <USB_ActivateEndpoint+0x286>
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068be:	b29a      	uxth	r2, r3
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	801a      	strh	r2, [r3, #0]
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	801a      	strh	r2, [r3, #0]
 80068d8:	e02f      	b.n	800693a <USB_ActivateEndpoint+0x2e6>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b3e      	cmp	r3, #62	; 0x3e
 80068e0:	d813      	bhi.n	800690a <USB_ActivateEndpoint+0x2b6>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	085b      	lsrs	r3, r3, #1
 80068e8:	663b      	str	r3, [r7, #96]	; 0x60
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <USB_ActivateEndpoint+0x2a8>
 80068f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068f8:	3301      	adds	r3, #1
 80068fa:	663b      	str	r3, [r7, #96]	; 0x60
 80068fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068fe:	b29b      	uxth	r3, r3
 8006900:	029b      	lsls	r3, r3, #10
 8006902:	b29a      	uxth	r2, r3
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	801a      	strh	r2, [r3, #0]
 8006908:	e017      	b.n	800693a <USB_ActivateEndpoint+0x2e6>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	095b      	lsrs	r3, r3, #5
 8006910:	663b      	str	r3, [r7, #96]	; 0x60
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	f003 031f 	and.w	r3, r3, #31
 800691a:	2b00      	cmp	r3, #0
 800691c:	d102      	bne.n	8006924 <USB_ActivateEndpoint+0x2d0>
 800691e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006920:	3b01      	subs	r3, #1
 8006922:	663b      	str	r3, [r7, #96]	; 0x60
 8006924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006926:	b29b      	uxth	r3, r3
 8006928:	029b      	lsls	r3, r3, #10
 800692a:	b29b      	uxth	r3, r3
 800692c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006934:	b29a      	uxth	r2, r3
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	83fb      	strh	r3, [r7, #30]
 8006948:	8bfb      	ldrh	r3, [r7, #30]
 800694a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d01b      	beq.n	800698a <USB_ActivateEndpoint+0x336>
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006968:	83bb      	strh	r3, [r7, #28]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	441a      	add	r2, r3
 8006974:	8bbb      	ldrh	r3, [r7, #28]
 8006976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800697e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006986:	b29b      	uxth	r3, r3
 8006988:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	b29b      	uxth	r3, r3
 8006998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800699c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a0:	837b      	strh	r3, [r7, #26]
 80069a2:	8b7b      	ldrh	r3, [r7, #26]
 80069a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069a8:	837b      	strh	r3, [r7, #26]
 80069aa:	8b7b      	ldrh	r3, [r7, #26]
 80069ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069b0:	837b      	strh	r3, [r7, #26]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	441a      	add	r2, r3
 80069bc:	8b7b      	ldrh	r3, [r7, #26]
 80069be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	8013      	strh	r3, [r2, #0]
 80069d2:	e1a2      	b.n	8006d1a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ea:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	441a      	add	r2, r3
 80069f8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80069fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a04:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a20:	4413      	add	r3, r2
 8006a22:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	011a      	lsls	r2, r3, #4
 8006a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a32:	657b      	str	r3, [r7, #84]	; 0x54
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	891b      	ldrh	r3, [r3, #8]
 8006a38:	085b      	lsrs	r3, r3, #1
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a42:	801a      	strh	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	653b      	str	r3, [r7, #80]	; 0x50
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	461a      	mov	r2, r3
 8006a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a54:	4413      	add	r3, r2
 8006a56:	653b      	str	r3, [r7, #80]	; 0x50
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	011a      	lsls	r2, r3, #4
 8006a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	895b      	ldrh	r3, [r3, #10]
 8006a6c:	085b      	lsrs	r3, r3, #1
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a76:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	785b      	ldrb	r3, [r3, #1]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f040 8091 	bne.w	8006ba4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006a90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d01b      	beq.n	8006ad2 <USB_ActivateEndpoint+0x47e>
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	441a      	add	r2, r3
 8006abc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	873b      	strh	r3, [r7, #56]	; 0x38
 8006ae0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d01b      	beq.n	8006b22 <USB_ActivateEndpoint+0x4ce>
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b00:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	441a      	add	r2, r3
 8006b0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b38:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006b3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b40:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006b42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b48:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	441a      	add	r2, r3
 8006b54:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b80:	867b      	strh	r3, [r7, #50]	; 0x32
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	441a      	add	r2, r3
 8006b8c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	8013      	strh	r3, [r2, #0]
 8006ba2:	e0ba      	b.n	8006d1a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006bb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01d      	beq.n	8006bfc <USB_ActivateEndpoint+0x5a8>
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	441a      	add	r2, r3
 8006be4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006c0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d01d      	beq.n	8006c54 <USB_ActivateEndpoint+0x600>
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	441a      	add	r2, r3
 8006c3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	78db      	ldrb	r3, [r3, #3]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d024      	beq.n	8006ca6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006c76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c7a:	f083 0320 	eor.w	r3, r3, #32
 8006c7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	441a      	add	r2, r3
 8006c8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	8013      	strh	r3, [r2, #0]
 8006ca4:	e01d      	b.n	8006ce2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cbc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	441a      	add	r2, r3
 8006cca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	441a      	add	r2, r3
 8006d04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	376c      	adds	r7, #108	; 0x6c
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bc80      	pop	{r7}
 8006d26:	4770      	bx	lr

08006d28 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b08d      	sub	sp, #52	; 0x34
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	7b1b      	ldrb	r3, [r3, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f040 808e 	bne.w	8006e58 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	785b      	ldrb	r3, [r3, #1]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d044      	beq.n	8006dce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	81bb      	strh	r3, [r7, #12]
 8006d52:	89bb      	ldrh	r3, [r7, #12]
 8006d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01b      	beq.n	8006d94 <USB_DeactivateEndpoint+0x6c>
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d72:	817b      	strh	r3, [r7, #10]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	441a      	add	r2, r3
 8006d7e:	897b      	ldrh	r3, [r7, #10]
 8006d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006daa:	813b      	strh	r3, [r7, #8]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	441a      	add	r2, r3
 8006db6:	893b      	ldrh	r3, [r7, #8]
 8006db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	8013      	strh	r3, [r2, #0]
 8006dcc:	e192      	b.n	80070f4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	827b      	strh	r3, [r7, #18]
 8006ddc:	8a7b      	ldrh	r3, [r7, #18]
 8006dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d01b      	beq.n	8006e1e <USB_DeactivateEndpoint+0xf6>
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfc:	823b      	strh	r3, [r7, #16]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	441a      	add	r2, r3
 8006e08:	8a3b      	ldrh	r3, [r7, #16]
 8006e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e34:	81fb      	strh	r3, [r7, #14]
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	441a      	add	r2, r3
 8006e40:	89fb      	ldrh	r3, [r7, #14]
 8006e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	8013      	strh	r3, [r2, #0]
 8006e56:	e14d      	b.n	80070f4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	785b      	ldrb	r3, [r3, #1]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f040 80a5 	bne.w	8006fac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	843b      	strh	r3, [r7, #32]
 8006e70:	8c3b      	ldrh	r3, [r7, #32]
 8006e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d01b      	beq.n	8006eb2 <USB_DeactivateEndpoint+0x18a>
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e90:	83fb      	strh	r3, [r7, #30]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	441a      	add	r2, r3
 8006e9c:	8bfb      	ldrh	r3, [r7, #30]
 8006e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ea6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	83bb      	strh	r3, [r7, #28]
 8006ec0:	8bbb      	ldrh	r3, [r7, #28]
 8006ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d01b      	beq.n	8006f02 <USB_DeactivateEndpoint+0x1da>
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee0:	837b      	strh	r3, [r7, #26]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	441a      	add	r2, r3
 8006eec:	8b7b      	ldrh	r3, [r7, #26]
 8006eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006efa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f18:	833b      	strh	r3, [r7, #24]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	441a      	add	r2, r3
 8006f24:	8b3b      	ldrh	r3, [r7, #24]
 8006f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f50:	82fb      	strh	r3, [r7, #22]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	441a      	add	r2, r3
 8006f5c:	8afb      	ldrh	r3, [r7, #22]
 8006f5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f88:	82bb      	strh	r3, [r7, #20]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	441a      	add	r2, r3
 8006f94:	8abb      	ldrh	r3, [r7, #20]
 8006f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	8013      	strh	r3, [r2, #0]
 8006faa:	e0a3      	b.n	80070f4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006fba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d01b      	beq.n	8006ffc <USB_DeactivateEndpoint+0x2d4>
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fda:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	441a      	add	r2, r3
 8006fe6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ff0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	857b      	strh	r3, [r7, #42]	; 0x2a
 800700a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800700c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007010:	2b00      	cmp	r3, #0
 8007012:	d01b      	beq.n	800704c <USB_DeactivateEndpoint+0x324>
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	b29b      	uxth	r3, r3
 8007022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702a:	853b      	strh	r3, [r7, #40]	; 0x28
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	441a      	add	r2, r3
 8007036:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800703c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007044:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007048:	b29b      	uxth	r3, r3
 800704a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	b29b      	uxth	r3, r3
 800705a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800705e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007062:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	441a      	add	r2, r3
 800706e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007078:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800707c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007080:	b29b      	uxth	r3, r3
 8007082:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	b29b      	uxth	r3, r3
 8007092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800709a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	441a      	add	r2, r3
 80070a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	441a      	add	r2, r3
 80070de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3734      	adds	r7, #52	; 0x34
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bc80      	pop	{r7}
 80070fe:	4770      	bx	lr

08007100 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b0c4      	sub	sp, #272	; 0x110
 8007104:	af00      	add	r7, sp, #0
 8007106:	1d3b      	adds	r3, r7, #4
 8007108:	6018      	str	r0, [r3, #0]
 800710a:	463b      	mov	r3, r7
 800710c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800710e:	463b      	mov	r3, r7
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	2b01      	cmp	r3, #1
 8007116:	f040 8557 	bne.w	8007bc8 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800711a:	463b      	mov	r3, r7
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	699a      	ldr	r2, [r3, #24]
 8007120:	463b      	mov	r3, r7
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	429a      	cmp	r2, r3
 8007128:	d905      	bls.n	8007136 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800712a:	463b      	mov	r3, r7
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007134:	e004      	b.n	8007140 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007136:	463b      	mov	r3, r7
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007140:	463b      	mov	r3, r7
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	7b1b      	ldrb	r3, [r3, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d12c      	bne.n	80071a4 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800714a:	463b      	mov	r3, r7
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6959      	ldr	r1, [r3, #20]
 8007150:	463b      	mov	r3, r7
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	88da      	ldrh	r2, [r3, #6]
 8007156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800715a:	b29b      	uxth	r3, r3
 800715c:	1d38      	adds	r0, r7, #4
 800715e:	6800      	ldr	r0, [r0, #0]
 8007160:	f001 fa2c 	bl	80085bc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007164:	1d3b      	adds	r3, r7, #4
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	617b      	str	r3, [r7, #20]
 800716a:	1d3b      	adds	r3, r7, #4
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007172:	b29b      	uxth	r3, r3
 8007174:	461a      	mov	r2, r3
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	4413      	add	r3, r2
 800717a:	617b      	str	r3, [r7, #20]
 800717c:	463b      	mov	r3, r7
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	011a      	lsls	r2, r3, #4
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	4413      	add	r3, r2
 8007188:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800718c:	f107 0310 	add.w	r3, r7, #16
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007196:	b29a      	uxth	r2, r3
 8007198:	f107 0310 	add.w	r3, r7, #16
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	801a      	strh	r2, [r3, #0]
 80071a0:	f000 bcdd 	b.w	8007b5e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80071a4:	463b      	mov	r3, r7
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	78db      	ldrb	r3, [r3, #3]
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	f040 8347 	bne.w	800783e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80071b0:	463b      	mov	r3, r7
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6a1a      	ldr	r2, [r3, #32]
 80071b6:	463b      	mov	r3, r7
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	429a      	cmp	r2, r3
 80071be:	f240 82eb 	bls.w	8007798 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80071c2:	1d3b      	adds	r3, r7, #4
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	463b      	mov	r3, r7
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071dc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80071e0:	1d3b      	adds	r3, r7, #4
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	463b      	mov	r3, r7
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	441a      	add	r2, r3
 80071ee:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80071f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80071fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007202:	b29b      	uxth	r3, r3
 8007204:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007206:	463b      	mov	r3, r7
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6a1a      	ldr	r2, [r3, #32]
 800720c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007210:	1ad2      	subs	r2, r2, r3
 8007212:	463b      	mov	r3, r7
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007218:	1d3b      	adds	r3, r7, #4
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	463b      	mov	r3, r7
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	b29b      	uxth	r3, r3
 800722a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722e:	2b00      	cmp	r3, #0
 8007230:	f000 8159 	beq.w	80074e6 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007234:	1d3b      	adds	r3, r7, #4
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	637b      	str	r3, [r7, #52]	; 0x34
 800723a:	463b      	mov	r3, r7
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	785b      	ldrb	r3, [r3, #1]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d164      	bne.n	800730e <USB_EPStartXfer+0x20e>
 8007244:	1d3b      	adds	r3, r7, #4
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800724a:	1d3b      	adds	r3, r7, #4
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007252:	b29b      	uxth	r3, r3
 8007254:	461a      	mov	r2, r3
 8007256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007258:	4413      	add	r3, r2
 800725a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800725c:	463b      	mov	r3, r7
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	011a      	lsls	r2, r3, #4
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	4413      	add	r3, r2
 8007268:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800726c:	62bb      	str	r3, [r7, #40]	; 0x28
 800726e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007272:	2b00      	cmp	r3, #0
 8007274:	d112      	bne.n	800729c <USB_EPStartXfer+0x19c>
 8007276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007280:	b29a      	uxth	r2, r3
 8007282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007284:	801a      	strh	r2, [r3, #0]
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007294:	b29a      	uxth	r2, r3
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	801a      	strh	r2, [r3, #0]
 800729a:	e054      	b.n	8007346 <USB_EPStartXfer+0x246>
 800729c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072a0:	2b3e      	cmp	r3, #62	; 0x3e
 80072a2:	d817      	bhi.n	80072d4 <USB_EPStartXfer+0x1d4>
 80072a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072a8:	085b      	lsrs	r3, r3, #1
 80072aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d004      	beq.n	80072c4 <USB_EPStartXfer+0x1c4>
 80072ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072be:	3301      	adds	r3, #1
 80072c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	029b      	lsls	r3, r3, #10
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	801a      	strh	r2, [r3, #0]
 80072d2:	e038      	b.n	8007346 <USB_EPStartXfer+0x246>
 80072d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072d8:	095b      	lsrs	r3, r3, #5
 80072da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072e2:	f003 031f 	and.w	r3, r3, #31
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d104      	bne.n	80072f4 <USB_EPStartXfer+0x1f4>
 80072ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ee:	3b01      	subs	r3, #1
 80072f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	029b      	lsls	r3, r3, #10
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007306:	b29a      	uxth	r2, r3
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	801a      	strh	r2, [r3, #0]
 800730c:	e01b      	b.n	8007346 <USB_EPStartXfer+0x246>
 800730e:	463b      	mov	r3, r7
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	785b      	ldrb	r3, [r3, #1]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d116      	bne.n	8007346 <USB_EPStartXfer+0x246>
 8007318:	1d3b      	adds	r3, r7, #4
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007320:	b29b      	uxth	r3, r3
 8007322:	461a      	mov	r2, r3
 8007324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007326:	4413      	add	r3, r2
 8007328:	637b      	str	r3, [r7, #52]	; 0x34
 800732a:	463b      	mov	r3, r7
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	011a      	lsls	r2, r3, #4
 8007332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007334:	4413      	add	r3, r2
 8007336:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800733a:	633b      	str	r3, [r7, #48]	; 0x30
 800733c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007340:	b29a      	uxth	r2, r3
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007346:	463b      	mov	r3, r7
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	895b      	ldrh	r3, [r3, #10]
 800734c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007350:	463b      	mov	r3, r7
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6959      	ldr	r1, [r3, #20]
 8007356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800735a:	b29b      	uxth	r3, r3
 800735c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007360:	1d38      	adds	r0, r7, #4
 8007362:	6800      	ldr	r0, [r0, #0]
 8007364:	f001 f92a 	bl	80085bc <USB_WritePMA>
            ep->xfer_buff += len;
 8007368:	463b      	mov	r3, r7
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	695a      	ldr	r2, [r3, #20]
 800736e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007372:	441a      	add	r2, r3
 8007374:	463b      	mov	r3, r7
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800737a:	463b      	mov	r3, r7
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6a1a      	ldr	r2, [r3, #32]
 8007380:	463b      	mov	r3, r7
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	429a      	cmp	r2, r3
 8007388:	d909      	bls.n	800739e <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800738a:	463b      	mov	r3, r7
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6a1a      	ldr	r2, [r3, #32]
 8007390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007394:	1ad2      	subs	r2, r2, r3
 8007396:	463b      	mov	r3, r7
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	621a      	str	r2, [r3, #32]
 800739c:	e008      	b.n	80073b0 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800739e:	463b      	mov	r3, r7
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80073a8:	463b      	mov	r3, r7
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2200      	movs	r2, #0
 80073ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073b0:	463b      	mov	r3, r7
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	785b      	ldrb	r3, [r3, #1]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d164      	bne.n	8007484 <USB_EPStartXfer+0x384>
 80073ba:	1d3b      	adds	r3, r7, #4
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	61fb      	str	r3, [r7, #28]
 80073c0:	1d3b      	adds	r3, r7, #4
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	461a      	mov	r2, r3
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	4413      	add	r3, r2
 80073d0:	61fb      	str	r3, [r7, #28]
 80073d2:	463b      	mov	r3, r7
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	011a      	lsls	r2, r3, #4
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	4413      	add	r3, r2
 80073de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073e2:	61bb      	str	r3, [r7, #24]
 80073e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d112      	bne.n	8007412 <USB_EPStartXfer+0x312>
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	801a      	strh	r2, [r3, #0]
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	b29b      	uxth	r3, r3
 8007402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800740a:	b29a      	uxth	r2, r3
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	801a      	strh	r2, [r3, #0]
 8007410:	e057      	b.n	80074c2 <USB_EPStartXfer+0x3c2>
 8007412:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007416:	2b3e      	cmp	r3, #62	; 0x3e
 8007418:	d817      	bhi.n	800744a <USB_EPStartXfer+0x34a>
 800741a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800741e:	085b      	lsrs	r3, r3, #1
 8007420:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	d004      	beq.n	800743a <USB_EPStartXfer+0x33a>
 8007430:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007434:	3301      	adds	r3, #1
 8007436:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800743a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800743e:	b29b      	uxth	r3, r3
 8007440:	029b      	lsls	r3, r3, #10
 8007442:	b29a      	uxth	r2, r3
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	801a      	strh	r2, [r3, #0]
 8007448:	e03b      	b.n	80074c2 <USB_EPStartXfer+0x3c2>
 800744a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800744e:	095b      	lsrs	r3, r3, #5
 8007450:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007458:	f003 031f 	and.w	r3, r3, #31
 800745c:	2b00      	cmp	r3, #0
 800745e:	d104      	bne.n	800746a <USB_EPStartXfer+0x36a>
 8007460:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007464:	3b01      	subs	r3, #1
 8007466:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800746a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800746e:	b29b      	uxth	r3, r3
 8007470:	029b      	lsls	r3, r3, #10
 8007472:	b29b      	uxth	r3, r3
 8007474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800747c:	b29a      	uxth	r2, r3
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	801a      	strh	r2, [r3, #0]
 8007482:	e01e      	b.n	80074c2 <USB_EPStartXfer+0x3c2>
 8007484:	463b      	mov	r3, r7
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d119      	bne.n	80074c2 <USB_EPStartXfer+0x3c2>
 800748e:	1d3b      	adds	r3, r7, #4
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
 8007494:	1d3b      	adds	r3, r7, #4
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800749c:	b29b      	uxth	r3, r3
 800749e:	461a      	mov	r2, r3
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	4413      	add	r3, r2
 80074a4:	627b      	str	r3, [r7, #36]	; 0x24
 80074a6:	463b      	mov	r3, r7
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	011a      	lsls	r2, r3, #4
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	4413      	add	r3, r2
 80074b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074b6:	623b      	str	r3, [r7, #32]
 80074b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074bc:	b29a      	uxth	r2, r3
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074c2:	463b      	mov	r3, r7
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	891b      	ldrh	r3, [r3, #8]
 80074c8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074cc:	463b      	mov	r3, r7
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6959      	ldr	r1, [r3, #20]
 80074d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80074dc:	1d38      	adds	r0, r7, #4
 80074de:	6800      	ldr	r0, [r0, #0]
 80074e0:	f001 f86c 	bl	80085bc <USB_WritePMA>
 80074e4:	e33b      	b.n	8007b5e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074e6:	463b      	mov	r3, r7
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	785b      	ldrb	r3, [r3, #1]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d164      	bne.n	80075ba <USB_EPStartXfer+0x4ba>
 80074f0:	1d3b      	adds	r3, r7, #4
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074f6:	1d3b      	adds	r3, r7, #4
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074fe:	b29b      	uxth	r3, r3
 8007500:	461a      	mov	r2, r3
 8007502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007504:	4413      	add	r3, r2
 8007506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007508:	463b      	mov	r3, r7
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	011a      	lsls	r2, r3, #4
 8007510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007512:	4413      	add	r3, r2
 8007514:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007518:	64bb      	str	r3, [r7, #72]	; 0x48
 800751a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d112      	bne.n	8007548 <USB_EPStartXfer+0x448>
 8007522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	b29b      	uxth	r3, r3
 8007528:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800752c:	b29a      	uxth	r2, r3
 800752e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007530:	801a      	strh	r2, [r3, #0]
 8007532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	b29b      	uxth	r3, r3
 8007538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007540:	b29a      	uxth	r2, r3
 8007542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007544:	801a      	strh	r2, [r3, #0]
 8007546:	e057      	b.n	80075f8 <USB_EPStartXfer+0x4f8>
 8007548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800754c:	2b3e      	cmp	r3, #62	; 0x3e
 800754e:	d817      	bhi.n	8007580 <USB_EPStartXfer+0x480>
 8007550:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007554:	085b      	lsrs	r3, r3, #1
 8007556:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800755a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <USB_EPStartXfer+0x470>
 8007566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800756a:	3301      	adds	r3, #1
 800756c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007574:	b29b      	uxth	r3, r3
 8007576:	029b      	lsls	r3, r3, #10
 8007578:	b29a      	uxth	r2, r3
 800757a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800757c:	801a      	strh	r2, [r3, #0]
 800757e:	e03b      	b.n	80075f8 <USB_EPStartXfer+0x4f8>
 8007580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007584:	095b      	lsrs	r3, r3, #5
 8007586:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800758a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800758e:	f003 031f 	and.w	r3, r3, #31
 8007592:	2b00      	cmp	r3, #0
 8007594:	d104      	bne.n	80075a0 <USB_EPStartXfer+0x4a0>
 8007596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800759a:	3b01      	subs	r3, #1
 800759c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80075a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	029b      	lsls	r3, r3, #10
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075b6:	801a      	strh	r2, [r3, #0]
 80075b8:	e01e      	b.n	80075f8 <USB_EPStartXfer+0x4f8>
 80075ba:	463b      	mov	r3, r7
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	785b      	ldrb	r3, [r3, #1]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d119      	bne.n	80075f8 <USB_EPStartXfer+0x4f8>
 80075c4:	1d3b      	adds	r3, r7, #4
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	657b      	str	r3, [r7, #84]	; 0x54
 80075ca:	1d3b      	adds	r3, r7, #4
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	461a      	mov	r2, r3
 80075d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075d8:	4413      	add	r3, r2
 80075da:	657b      	str	r3, [r7, #84]	; 0x54
 80075dc:	463b      	mov	r3, r7
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	011a      	lsls	r2, r3, #4
 80075e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075e6:	4413      	add	r3, r2
 80075e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075ec:	653b      	str	r3, [r7, #80]	; 0x50
 80075ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80075f8:	463b      	mov	r3, r7
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	891b      	ldrh	r3, [r3, #8]
 80075fe:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007602:	463b      	mov	r3, r7
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6959      	ldr	r1, [r3, #20]
 8007608:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800760c:	b29b      	uxth	r3, r3
 800760e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007612:	1d38      	adds	r0, r7, #4
 8007614:	6800      	ldr	r0, [r0, #0]
 8007616:	f000 ffd1 	bl	80085bc <USB_WritePMA>
            ep->xfer_buff += len;
 800761a:	463b      	mov	r3, r7
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	695a      	ldr	r2, [r3, #20]
 8007620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007624:	441a      	add	r2, r3
 8007626:	463b      	mov	r3, r7
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800762c:	463b      	mov	r3, r7
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6a1a      	ldr	r2, [r3, #32]
 8007632:	463b      	mov	r3, r7
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	429a      	cmp	r2, r3
 800763a:	d909      	bls.n	8007650 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 800763c:	463b      	mov	r3, r7
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6a1a      	ldr	r2, [r3, #32]
 8007642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007646:	1ad2      	subs	r2, r2, r3
 8007648:	463b      	mov	r3, r7
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	621a      	str	r2, [r3, #32]
 800764e:	e008      	b.n	8007662 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8007650:	463b      	mov	r3, r7
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800765a:	463b      	mov	r3, r7
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2200      	movs	r2, #0
 8007660:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007662:	1d3b      	adds	r3, r7, #4
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	647b      	str	r3, [r7, #68]	; 0x44
 8007668:	463b      	mov	r3, r7
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	785b      	ldrb	r3, [r3, #1]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d164      	bne.n	800773c <USB_EPStartXfer+0x63c>
 8007672:	1d3b      	adds	r3, r7, #4
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007678:	1d3b      	adds	r3, r7, #4
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007680:	b29b      	uxth	r3, r3
 8007682:	461a      	mov	r2, r3
 8007684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007686:	4413      	add	r3, r2
 8007688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800768a:	463b      	mov	r3, r7
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	011a      	lsls	r2, r3, #4
 8007692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007694:	4413      	add	r3, r2
 8007696:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800769a:	63bb      	str	r3, [r7, #56]	; 0x38
 800769c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d112      	bne.n	80076ca <USB_EPStartXfer+0x5ca>
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	801a      	strh	r2, [r3, #0]
 80076b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	801a      	strh	r2, [r3, #0]
 80076c8:	e054      	b.n	8007774 <USB_EPStartXfer+0x674>
 80076ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076ce:	2b3e      	cmp	r3, #62	; 0x3e
 80076d0:	d817      	bhi.n	8007702 <USB_EPStartXfer+0x602>
 80076d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076d6:	085b      	lsrs	r3, r3, #1
 80076d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80076dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <USB_EPStartXfer+0x5f2>
 80076e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076ec:	3301      	adds	r3, #1
 80076ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80076f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	029b      	lsls	r3, r3, #10
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fe:	801a      	strh	r2, [r3, #0]
 8007700:	e038      	b.n	8007774 <USB_EPStartXfer+0x674>
 8007702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007706:	095b      	lsrs	r3, r3, #5
 8007708:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800770c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007710:	f003 031f 	and.w	r3, r3, #31
 8007714:	2b00      	cmp	r3, #0
 8007716:	d104      	bne.n	8007722 <USB_EPStartXfer+0x622>
 8007718:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800771c:	3b01      	subs	r3, #1
 800771e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007722:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007726:	b29b      	uxth	r3, r3
 8007728:	029b      	lsls	r3, r3, #10
 800772a:	b29b      	uxth	r3, r3
 800772c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007734:	b29a      	uxth	r2, r3
 8007736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007738:	801a      	strh	r2, [r3, #0]
 800773a:	e01b      	b.n	8007774 <USB_EPStartXfer+0x674>
 800773c:	463b      	mov	r3, r7
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	785b      	ldrb	r3, [r3, #1]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d116      	bne.n	8007774 <USB_EPStartXfer+0x674>
 8007746:	1d3b      	adds	r3, r7, #4
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800774e:	b29b      	uxth	r3, r3
 8007750:	461a      	mov	r2, r3
 8007752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007754:	4413      	add	r3, r2
 8007756:	647b      	str	r3, [r7, #68]	; 0x44
 8007758:	463b      	mov	r3, r7
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	011a      	lsls	r2, r3, #4
 8007760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007762:	4413      	add	r3, r2
 8007764:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007768:	643b      	str	r3, [r7, #64]	; 0x40
 800776a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800776e:	b29a      	uxth	r2, r3
 8007770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007772:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007774:	463b      	mov	r3, r7
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	895b      	ldrh	r3, [r3, #10]
 800777a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800777e:	463b      	mov	r3, r7
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6959      	ldr	r1, [r3, #20]
 8007784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007788:	b29b      	uxth	r3, r3
 800778a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800778e:	1d38      	adds	r0, r7, #4
 8007790:	6800      	ldr	r0, [r0, #0]
 8007792:	f000 ff13 	bl	80085bc <USB_WritePMA>
 8007796:	e1e2      	b.n	8007b5e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007798:	463b      	mov	r3, r7
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80077a2:	1d3b      	adds	r3, r7, #4
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	463b      	mov	r3, r7
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80077b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077bc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80077c0:	1d3b      	adds	r3, r7, #4
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	463b      	mov	r3, r7
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	441a      	add	r2, r3
 80077ce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80077d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80077e6:	1d3b      	adds	r3, r7, #4
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	663b      	str	r3, [r7, #96]	; 0x60
 80077ec:	1d3b      	adds	r3, r7, #4
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	461a      	mov	r2, r3
 80077f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077fa:	4413      	add	r3, r2
 80077fc:	663b      	str	r3, [r7, #96]	; 0x60
 80077fe:	463b      	mov	r3, r7
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	011a      	lsls	r2, r3, #4
 8007806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007808:	4413      	add	r3, r2
 800780a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800780e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007810:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007814:	b29a      	uxth	r2, r3
 8007816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007818:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800781a:	463b      	mov	r3, r7
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	891b      	ldrh	r3, [r3, #8]
 8007820:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007824:	463b      	mov	r3, r7
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6959      	ldr	r1, [r3, #20]
 800782a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800782e:	b29b      	uxth	r3, r3
 8007830:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007834:	1d38      	adds	r0, r7, #4
 8007836:	6800      	ldr	r0, [r0, #0]
 8007838:	f000 fec0 	bl	80085bc <USB_WritePMA>
 800783c:	e18f      	b.n	8007b5e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800783e:	1d3b      	adds	r3, r7, #4
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	463b      	mov	r3, r7
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	4413      	add	r3, r2
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	b29b      	uxth	r3, r3
 8007850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 808f 	beq.w	8007978 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800785a:	1d3b      	adds	r3, r7, #4
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007860:	463b      	mov	r3, r7
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	785b      	ldrb	r3, [r3, #1]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d164      	bne.n	8007934 <USB_EPStartXfer+0x834>
 800786a:	1d3b      	adds	r3, r7, #4
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	673b      	str	r3, [r7, #112]	; 0x70
 8007870:	1d3b      	adds	r3, r7, #4
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007878:	b29b      	uxth	r3, r3
 800787a:	461a      	mov	r2, r3
 800787c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800787e:	4413      	add	r3, r2
 8007880:	673b      	str	r3, [r7, #112]	; 0x70
 8007882:	463b      	mov	r3, r7
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	011a      	lsls	r2, r3, #4
 800788a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800788c:	4413      	add	r3, r2
 800788e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007892:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007898:	2b00      	cmp	r3, #0
 800789a:	d112      	bne.n	80078c2 <USB_EPStartXfer+0x7c2>
 800789c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078aa:	801a      	strh	r2, [r3, #0]
 80078ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078be:	801a      	strh	r2, [r3, #0]
 80078c0:	e054      	b.n	800796c <USB_EPStartXfer+0x86c>
 80078c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078c6:	2b3e      	cmp	r3, #62	; 0x3e
 80078c8:	d817      	bhi.n	80078fa <USB_EPStartXfer+0x7fa>
 80078ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078ce:	085b      	lsrs	r3, r3, #1
 80078d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80078d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d004      	beq.n	80078ea <USB_EPStartXfer+0x7ea>
 80078e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e4:	3301      	adds	r3, #1
 80078e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80078ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	029b      	lsls	r3, r3, #10
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f6:	801a      	strh	r2, [r3, #0]
 80078f8:	e038      	b.n	800796c <USB_EPStartXfer+0x86c>
 80078fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078fe:	095b      	lsrs	r3, r3, #5
 8007900:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007908:	f003 031f 	and.w	r3, r3, #31
 800790c:	2b00      	cmp	r3, #0
 800790e:	d104      	bne.n	800791a <USB_EPStartXfer+0x81a>
 8007910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007914:	3b01      	subs	r3, #1
 8007916:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800791a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800791e:	b29b      	uxth	r3, r3
 8007920:	029b      	lsls	r3, r3, #10
 8007922:	b29b      	uxth	r3, r3
 8007924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800792c:	b29a      	uxth	r2, r3
 800792e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007930:	801a      	strh	r2, [r3, #0]
 8007932:	e01b      	b.n	800796c <USB_EPStartXfer+0x86c>
 8007934:	463b      	mov	r3, r7
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	785b      	ldrb	r3, [r3, #1]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d116      	bne.n	800796c <USB_EPStartXfer+0x86c>
 800793e:	1d3b      	adds	r3, r7, #4
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007946:	b29b      	uxth	r3, r3
 8007948:	461a      	mov	r2, r3
 800794a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800794c:	4413      	add	r3, r2
 800794e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007950:	463b      	mov	r3, r7
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	011a      	lsls	r2, r3, #4
 8007958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800795a:	4413      	add	r3, r2
 800795c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007960:	677b      	str	r3, [r7, #116]	; 0x74
 8007962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007966:	b29a      	uxth	r2, r3
 8007968:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800796a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800796c:	463b      	mov	r3, r7
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	895b      	ldrh	r3, [r3, #10]
 8007972:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8007976:	e097      	b.n	8007aa8 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007978:	463b      	mov	r3, r7
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d168      	bne.n	8007a54 <USB_EPStartXfer+0x954>
 8007982:	1d3b      	adds	r3, r7, #4
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800798a:	1d3b      	adds	r3, r7, #4
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007992:	b29b      	uxth	r3, r3
 8007994:	461a      	mov	r2, r3
 8007996:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800799a:	4413      	add	r3, r2
 800799c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079a0:	463b      	mov	r3, r7
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	011a      	lsls	r2, r3, #4
 80079a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079ac:	4413      	add	r3, r2
 80079ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d112      	bne.n	80079e2 <USB_EPStartXfer+0x8e2>
 80079bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079be:	881b      	ldrh	r3, [r3, #0]
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079ca:	801a      	strh	r2, [r3, #0]
 80079cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079da:	b29a      	uxth	r2, r3
 80079dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079de:	801a      	strh	r2, [r3, #0]
 80079e0:	e05d      	b.n	8007a9e <USB_EPStartXfer+0x99e>
 80079e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079e6:	2b3e      	cmp	r3, #62	; 0x3e
 80079e8:	d817      	bhi.n	8007a1a <USB_EPStartXfer+0x91a>
 80079ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079ee:	085b      	lsrs	r3, r3, #1
 80079f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80079f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d004      	beq.n	8007a0a <USB_EPStartXfer+0x90a>
 8007a00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a04:	3301      	adds	r3, #1
 8007a06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	029b      	lsls	r3, r3, #10
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a16:	801a      	strh	r2, [r3, #0]
 8007a18:	e041      	b.n	8007a9e <USB_EPStartXfer+0x99e>
 8007a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a1e:	095b      	lsrs	r3, r3, #5
 8007a20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a28:	f003 031f 	and.w	r3, r3, #31
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d104      	bne.n	8007a3a <USB_EPStartXfer+0x93a>
 8007a30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a34:	3b01      	subs	r3, #1
 8007a36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	029b      	lsls	r3, r3, #10
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a50:	801a      	strh	r2, [r3, #0]
 8007a52:	e024      	b.n	8007a9e <USB_EPStartXfer+0x99e>
 8007a54:	463b      	mov	r3, r7
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	785b      	ldrb	r3, [r3, #1]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d11f      	bne.n	8007a9e <USB_EPStartXfer+0x99e>
 8007a5e:	1d3b      	adds	r3, r7, #4
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a66:	1d3b      	adds	r3, r7, #4
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	461a      	mov	r2, r3
 8007a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a76:	4413      	add	r3, r2
 8007a78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a7c:	463b      	mov	r3, r7
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	011a      	lsls	r2, r3, #4
 8007a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a88:	4413      	add	r3, r2
 8007a8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a9c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a9e:	463b      	mov	r3, r7
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	891b      	ldrh	r3, [r3, #8]
 8007aa4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aa8:	463b      	mov	r3, r7
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6959      	ldr	r1, [r3, #20]
 8007aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007ab8:	1d38      	adds	r0, r7, #4
 8007aba:	6800      	ldr	r0, [r0, #0]
 8007abc:	f000 fd7e 	bl	80085bc <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007ac0:	463b      	mov	r3, r7
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	785b      	ldrb	r3, [r3, #1]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d122      	bne.n	8007b10 <USB_EPStartXfer+0xa10>
 8007aca:	1d3b      	adds	r3, r7, #4
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	463b      	mov	r3, r7
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007ae8:	1d3b      	adds	r3, r7, #4
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	463b      	mov	r3, r7
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	441a      	add	r2, r3
 8007af6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	8013      	strh	r3, [r2, #0]
 8007b0e:	e026      	b.n	8007b5e <USB_EPStartXfer+0xa5e>
 8007b10:	463b      	mov	r3, r7
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	785b      	ldrb	r3, [r3, #1]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d121      	bne.n	8007b5e <USB_EPStartXfer+0xa5e>
 8007b1a:	1d3b      	adds	r3, r7, #4
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	463b      	mov	r3, r7
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b34:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8007b38:	1d3b      	adds	r3, r7, #4
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	463b      	mov	r3, r7
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	441a      	add	r2, r3
 8007b46:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8007b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007b5e:	1d3b      	adds	r3, r7, #4
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	463b      	mov	r3, r7
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	881b      	ldrh	r3, [r3, #0]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	f107 020e 	add.w	r2, r7, #14
 8007b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b7c:	8013      	strh	r3, [r2, #0]
 8007b7e:	f107 030e 	add.w	r3, r7, #14
 8007b82:	f107 020e 	add.w	r2, r7, #14
 8007b86:	8812      	ldrh	r2, [r2, #0]
 8007b88:	f082 0210 	eor.w	r2, r2, #16
 8007b8c:	801a      	strh	r2, [r3, #0]
 8007b8e:	f107 030e 	add.w	r3, r7, #14
 8007b92:	f107 020e 	add.w	r2, r7, #14
 8007b96:	8812      	ldrh	r2, [r2, #0]
 8007b98:	f082 0220 	eor.w	r2, r2, #32
 8007b9c:	801a      	strh	r2, [r3, #0]
 8007b9e:	1d3b      	adds	r3, r7, #4
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	463b      	mov	r3, r7
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	441a      	add	r2, r3
 8007bac:	f107 030e 	add.w	r3, r7, #14
 8007bb0:	881b      	ldrh	r3, [r3, #0]
 8007bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	8013      	strh	r3, [r2, #0]
 8007bc6:	e3b5      	b.n	8008334 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007bc8:	463b      	mov	r3, r7
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	7b1b      	ldrb	r3, [r3, #12]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f040 8090 	bne.w	8007cf4 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007bd4:	463b      	mov	r3, r7
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	699a      	ldr	r2, [r3, #24]
 8007bda:	463b      	mov	r3, r7
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d90e      	bls.n	8007c02 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8007be4:	463b      	mov	r3, r7
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8007bee:	463b      	mov	r3, r7
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	699a      	ldr	r2, [r3, #24]
 8007bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bf8:	1ad2      	subs	r2, r2, r3
 8007bfa:	463b      	mov	r3, r7
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	619a      	str	r2, [r3, #24]
 8007c00:	e008      	b.n	8007c14 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8007c02:	463b      	mov	r3, r7
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8007c0c:	463b      	mov	r3, r7
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2200      	movs	r2, #0
 8007c12:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007c14:	1d3b      	adds	r3, r7, #4
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c1c:	1d3b      	adds	r3, r7, #4
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	461a      	mov	r2, r3
 8007c28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c32:	463b      	mov	r3, r7
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	011a      	lsls	r2, r3, #4
 8007c3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c3e:	4413      	add	r3, r2
 8007c40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d116      	bne.n	8007c7e <USB_EPStartXfer+0xb7e>
 8007c50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c62:	801a      	strh	r2, [r3, #0]
 8007c64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c7a:	801a      	strh	r2, [r3, #0]
 8007c7c:	e32c      	b.n	80082d8 <USB_EPStartXfer+0x11d8>
 8007c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c82:	2b3e      	cmp	r3, #62	; 0x3e
 8007c84:	d818      	bhi.n	8007cb8 <USB_EPStartXfer+0xbb8>
 8007c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c8a:	085b      	lsrs	r3, r3, #1
 8007c8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d004      	beq.n	8007ca6 <USB_EPStartXfer+0xba6>
 8007c9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007ca6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	029b      	lsls	r3, r3, #10
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007cb4:	801a      	strh	r2, [r3, #0]
 8007cb6:	e30f      	b.n	80082d8 <USB_EPStartXfer+0x11d8>
 8007cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cbc:	095b      	lsrs	r3, r3, #5
 8007cbe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cc6:	f003 031f 	and.w	r3, r3, #31
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d104      	bne.n	8007cd8 <USB_EPStartXfer+0xbd8>
 8007cce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007cd8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	029b      	lsls	r3, r3, #10
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007cf0:	801a      	strh	r2, [r3, #0]
 8007cf2:	e2f1      	b.n	80082d8 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007cf4:	463b      	mov	r3, r7
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	78db      	ldrb	r3, [r3, #3]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	f040 818f 	bne.w	800801e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007d00:	463b      	mov	r3, r7
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	785b      	ldrb	r3, [r3, #1]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d175      	bne.n	8007df6 <USB_EPStartXfer+0xcf6>
 8007d0a:	1d3b      	adds	r3, r7, #4
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d12:	1d3b      	adds	r3, r7, #4
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007d22:	4413      	add	r3, r2
 8007d24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d28:	463b      	mov	r3, r7
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	011a      	lsls	r2, r3, #4
 8007d30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007d34:	4413      	add	r3, r2
 8007d36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d3e:	463b      	mov	r3, r7
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d116      	bne.n	8007d76 <USB_EPStartXfer+0xc76>
 8007d48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d4c:	881b      	ldrh	r3, [r3, #0]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d5a:	801a      	strh	r2, [r3, #0]
 8007d5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d72:	801a      	strh	r2, [r3, #0]
 8007d74:	e065      	b.n	8007e42 <USB_EPStartXfer+0xd42>
 8007d76:	463b      	mov	r3, r7
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	2b3e      	cmp	r3, #62	; 0x3e
 8007d7e:	d81a      	bhi.n	8007db6 <USB_EPStartXfer+0xcb6>
 8007d80:	463b      	mov	r3, r7
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	085b      	lsrs	r3, r3, #1
 8007d88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d8c:	463b      	mov	r3, r7
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d004      	beq.n	8007da4 <USB_EPStartXfer+0xca4>
 8007d9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d9e:	3301      	adds	r3, #1
 8007da0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007da4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	029b      	lsls	r3, r3, #10
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007db2:	801a      	strh	r2, [r3, #0]
 8007db4:	e045      	b.n	8007e42 <USB_EPStartXfer+0xd42>
 8007db6:	463b      	mov	r3, r7
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	095b      	lsrs	r3, r3, #5
 8007dbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007dc2:	463b      	mov	r3, r7
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	f003 031f 	and.w	r3, r3, #31
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d104      	bne.n	8007dda <USB_EPStartXfer+0xcda>
 8007dd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007dda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	029b      	lsls	r3, r3, #10
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007df2:	801a      	strh	r2, [r3, #0]
 8007df4:	e025      	b.n	8007e42 <USB_EPStartXfer+0xd42>
 8007df6:	463b      	mov	r3, r7
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	785b      	ldrb	r3, [r3, #1]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d120      	bne.n	8007e42 <USB_EPStartXfer+0xd42>
 8007e00:	1d3b      	adds	r3, r7, #4
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e08:	1d3b      	adds	r3, r7, #4
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	461a      	mov	r2, r3
 8007e14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e18:	4413      	add	r3, r2
 8007e1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e1e:	463b      	mov	r3, r7
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	011a      	lsls	r2, r3, #4
 8007e26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e34:	463b      	mov	r3, r7
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e40:	801a      	strh	r2, [r3, #0]
 8007e42:	1d3b      	adds	r3, r7, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e4a:	463b      	mov	r3, r7
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	785b      	ldrb	r3, [r3, #1]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d175      	bne.n	8007f40 <USB_EPStartXfer+0xe40>
 8007e54:	1d3b      	adds	r3, r7, #4
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e5c:	1d3b      	adds	r3, r7, #4
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	461a      	mov	r2, r3
 8007e68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e72:	463b      	mov	r3, r7
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	011a      	lsls	r2, r3, #4
 8007e7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e7e:	4413      	add	r3, r2
 8007e80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e88:	463b      	mov	r3, r7
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d116      	bne.n	8007ec0 <USB_EPStartXfer+0xdc0>
 8007e92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ea4:	801a      	strh	r2, [r3, #0]
 8007ea6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ebc:	801a      	strh	r2, [r3, #0]
 8007ebe:	e061      	b.n	8007f84 <USB_EPStartXfer+0xe84>
 8007ec0:	463b      	mov	r3, r7
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ec8:	d81a      	bhi.n	8007f00 <USB_EPStartXfer+0xe00>
 8007eca:	463b      	mov	r3, r7
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	085b      	lsrs	r3, r3, #1
 8007ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ed6:	463b      	mov	r3, r7
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	f003 0301 	and.w	r3, r3, #1
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d004      	beq.n	8007eee <USB_EPStartXfer+0xdee>
 8007ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee8:	3301      	adds	r3, #1
 8007eea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	029b      	lsls	r3, r3, #10
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007efc:	801a      	strh	r2, [r3, #0]
 8007efe:	e041      	b.n	8007f84 <USB_EPStartXfer+0xe84>
 8007f00:	463b      	mov	r3, r7
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	095b      	lsrs	r3, r3, #5
 8007f08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f0c:	463b      	mov	r3, r7
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	f003 031f 	and.w	r3, r3, #31
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d104      	bne.n	8007f24 <USB_EPStartXfer+0xe24>
 8007f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	029b      	lsls	r3, r3, #10
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f3c:	801a      	strh	r2, [r3, #0]
 8007f3e:	e021      	b.n	8007f84 <USB_EPStartXfer+0xe84>
 8007f40:	463b      	mov	r3, r7
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	785b      	ldrb	r3, [r3, #1]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d11c      	bne.n	8007f84 <USB_EPStartXfer+0xe84>
 8007f4a:	1d3b      	adds	r3, r7, #4
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	461a      	mov	r2, r3
 8007f56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f60:	463b      	mov	r3, r7
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	011a      	lsls	r2, r3, #4
 8007f68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f76:	463b      	mov	r3, r7
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f82:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007f84:	463b      	mov	r3, r7
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	69db      	ldr	r3, [r3, #28]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 81a4 	beq.w	80082d8 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007f90:	1d3b      	adds	r3, r7, #4
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	463b      	mov	r3, r7
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4413      	add	r3, r2
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007fa4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d005      	beq.n	8007fbc <USB_EPStartXfer+0xebc>
 8007fb0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10d      	bne.n	8007fd8 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007fbc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f040 8187 	bne.w	80082d8 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007fca:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f040 8180 	bne.w	80082d8 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007fd8:	1d3b      	adds	r3, r7, #4
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	463b      	mov	r3, r7
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007ff6:	1d3b      	adds	r3, r7, #4
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	463b      	mov	r3, r7
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	441a      	add	r2, r3
 8008004:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8008008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800800c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008014:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008018:	b29b      	uxth	r3, r3
 800801a:	8013      	strh	r3, [r2, #0]
 800801c:	e15c      	b.n	80082d8 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800801e:	463b      	mov	r3, r7
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	78db      	ldrb	r3, [r3, #3]
 8008024:	2b01      	cmp	r3, #1
 8008026:	f040 8155 	bne.w	80082d4 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800802a:	463b      	mov	r3, r7
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	699a      	ldr	r2, [r3, #24]
 8008030:	463b      	mov	r3, r7
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	429a      	cmp	r2, r3
 8008038:	d90e      	bls.n	8008058 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800803a:	463b      	mov	r3, r7
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8008044:	463b      	mov	r3, r7
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699a      	ldr	r2, [r3, #24]
 800804a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800804e:	1ad2      	subs	r2, r2, r3
 8008050:	463b      	mov	r3, r7
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	619a      	str	r2, [r3, #24]
 8008056:	e008      	b.n	800806a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8008058:	463b      	mov	r3, r7
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8008062:	463b      	mov	r3, r7
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2200      	movs	r2, #0
 8008068:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800806a:	463b      	mov	r3, r7
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	785b      	ldrb	r3, [r3, #1]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d16f      	bne.n	8008154 <USB_EPStartXfer+0x1054>
 8008074:	1d3b      	adds	r3, r7, #4
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800807c:	1d3b      	adds	r3, r7, #4
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008084:	b29b      	uxth	r3, r3
 8008086:	461a      	mov	r2, r3
 8008088:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800808c:	4413      	add	r3, r2
 800808e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008092:	463b      	mov	r3, r7
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	011a      	lsls	r2, r3, #4
 800809a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800809e:	4413      	add	r3, r2
 80080a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80080a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d116      	bne.n	80080de <USB_EPStartXfer+0xfde>
 80080b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080bc:	b29a      	uxth	r2, r3
 80080be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080c2:	801a      	strh	r2, [r3, #0]
 80080c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080da:	801a      	strh	r2, [r3, #0]
 80080dc:	e05f      	b.n	800819e <USB_EPStartXfer+0x109e>
 80080de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080e2:	2b3e      	cmp	r3, #62	; 0x3e
 80080e4:	d818      	bhi.n	8008118 <USB_EPStartXfer+0x1018>
 80080e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080ea:	085b      	lsrs	r3, r3, #1
 80080ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80080f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080f4:	f003 0301 	and.w	r3, r3, #1
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d004      	beq.n	8008106 <USB_EPStartXfer+0x1006>
 80080fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008100:	3301      	adds	r3, #1
 8008102:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800810a:	b29b      	uxth	r3, r3
 800810c:	029b      	lsls	r3, r3, #10
 800810e:	b29a      	uxth	r2, r3
 8008110:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008114:	801a      	strh	r2, [r3, #0]
 8008116:	e042      	b.n	800819e <USB_EPStartXfer+0x109e>
 8008118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800811c:	095b      	lsrs	r3, r3, #5
 800811e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008126:	f003 031f 	and.w	r3, r3, #31
 800812a:	2b00      	cmp	r3, #0
 800812c:	d104      	bne.n	8008138 <USB_EPStartXfer+0x1038>
 800812e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008132:	3b01      	subs	r3, #1
 8008134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800813c:	b29b      	uxth	r3, r3
 800813e:	029b      	lsls	r3, r3, #10
 8008140:	b29b      	uxth	r3, r3
 8008142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800814a:	b29a      	uxth	r2, r3
 800814c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008150:	801a      	strh	r2, [r3, #0]
 8008152:	e024      	b.n	800819e <USB_EPStartXfer+0x109e>
 8008154:	463b      	mov	r3, r7
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	785b      	ldrb	r3, [r3, #1]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d11f      	bne.n	800819e <USB_EPStartXfer+0x109e>
 800815e:	1d3b      	adds	r3, r7, #4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008166:	1d3b      	adds	r3, r7, #4
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800816e:	b29b      	uxth	r3, r3
 8008170:	461a      	mov	r2, r3
 8008172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008176:	4413      	add	r3, r2
 8008178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800817c:	463b      	mov	r3, r7
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	011a      	lsls	r2, r3, #4
 8008184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008188:	4413      	add	r3, r2
 800818a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800818e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008192:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008196:	b29a      	uxth	r2, r3
 8008198:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800819c:	801a      	strh	r2, [r3, #0]
 800819e:	1d3b      	adds	r3, r7, #4
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081a6:	463b      	mov	r3, r7
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	785b      	ldrb	r3, [r3, #1]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d16f      	bne.n	8008290 <USB_EPStartXfer+0x1190>
 80081b0:	1d3b      	adds	r3, r7, #4
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081b8:	1d3b      	adds	r3, r7, #4
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	461a      	mov	r2, r3
 80081c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081c8:	4413      	add	r3, r2
 80081ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081ce:	463b      	mov	r3, r7
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	011a      	lsls	r2, r3, #4
 80081d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081da:	4413      	add	r3, r2
 80081dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80081e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d116      	bne.n	800821a <USB_EPStartXfer+0x111a>
 80081ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081fe:	801a      	strh	r2, [r3, #0]
 8008200:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	b29b      	uxth	r3, r3
 8008208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800820c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008210:	b29a      	uxth	r2, r3
 8008212:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008216:	801a      	strh	r2, [r3, #0]
 8008218:	e05e      	b.n	80082d8 <USB_EPStartXfer+0x11d8>
 800821a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800821e:	2b3e      	cmp	r3, #62	; 0x3e
 8008220:	d818      	bhi.n	8008254 <USB_EPStartXfer+0x1154>
 8008222:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008226:	085b      	lsrs	r3, r3, #1
 8008228:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800822c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d004      	beq.n	8008242 <USB_EPStartXfer+0x1142>
 8008238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800823c:	3301      	adds	r3, #1
 800823e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008246:	b29b      	uxth	r3, r3
 8008248:	029b      	lsls	r3, r3, #10
 800824a:	b29a      	uxth	r2, r3
 800824c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008250:	801a      	strh	r2, [r3, #0]
 8008252:	e041      	b.n	80082d8 <USB_EPStartXfer+0x11d8>
 8008254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008258:	095b      	lsrs	r3, r3, #5
 800825a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800825e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008262:	f003 031f 	and.w	r3, r3, #31
 8008266:	2b00      	cmp	r3, #0
 8008268:	d104      	bne.n	8008274 <USB_EPStartXfer+0x1174>
 800826a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800826e:	3b01      	subs	r3, #1
 8008270:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008278:	b29b      	uxth	r3, r3
 800827a:	029b      	lsls	r3, r3, #10
 800827c:	b29b      	uxth	r3, r3
 800827e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008286:	b29a      	uxth	r2, r3
 8008288:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800828c:	801a      	strh	r2, [r3, #0]
 800828e:	e023      	b.n	80082d8 <USB_EPStartXfer+0x11d8>
 8008290:	463b      	mov	r3, r7
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	785b      	ldrb	r3, [r3, #1]
 8008296:	2b01      	cmp	r3, #1
 8008298:	d11e      	bne.n	80082d8 <USB_EPStartXfer+0x11d8>
 800829a:	1d3b      	adds	r3, r7, #4
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	461a      	mov	r2, r3
 80082a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082aa:	4413      	add	r3, r2
 80082ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082b0:	463b      	mov	r3, r7
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	011a      	lsls	r2, r3, #4
 80082b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082bc:	4413      	add	r3, r2
 80082be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082d0:	801a      	strh	r2, [r3, #0]
 80082d2:	e001      	b.n	80082d8 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e02e      	b.n	8008336 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082d8:	1d3b      	adds	r3, r7, #4
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	463b      	mov	r3, r7
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80082f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80082fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082fe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008302:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008306:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800830a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800830e:	1d3b      	adds	r3, r7, #4
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	463b      	mov	r3, r7
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	441a      	add	r2, r3
 800831c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800832c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008330:	b29b      	uxth	r3, r3
 8008332:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	785b      	ldrb	r3, [r3, #1]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d020      	beq.n	8008394 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	b29b      	uxth	r3, r3
 8008360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008368:	81bb      	strh	r3, [r7, #12]
 800836a:	89bb      	ldrh	r3, [r7, #12]
 800836c:	f083 0310 	eor.w	r3, r3, #16
 8008370:	81bb      	strh	r3, [r7, #12]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	441a      	add	r2, r3
 800837c:	89bb      	ldrh	r3, [r7, #12]
 800837e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800838a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800838e:	b29b      	uxth	r3, r3
 8008390:	8013      	strh	r3, [r2, #0]
 8008392:	e01f      	b.n	80083d4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083aa:	81fb      	strh	r3, [r7, #14]
 80083ac:	89fb      	ldrh	r3, [r7, #14]
 80083ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083b2:	81fb      	strh	r3, [r7, #14]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	441a      	add	r2, r3
 80083be:	89fb      	ldrh	r3, [r7, #14]
 80083c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3714      	adds	r7, #20
 80083da:	46bd      	mov	sp, r7
 80083dc:	bc80      	pop	{r7}
 80083de:	4770      	bx	lr

080083e0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	7b1b      	ldrb	r3, [r3, #12]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f040 809d 	bne.w	800852e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	785b      	ldrb	r3, [r3, #1]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d04c      	beq.n	8008496 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	881b      	ldrh	r3, [r3, #0]
 8008408:	823b      	strh	r3, [r7, #16]
 800840a:	8a3b      	ldrh	r3, [r7, #16]
 800840c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008410:	2b00      	cmp	r3, #0
 8008412:	d01b      	beq.n	800844c <USB_EPClearStall+0x6c>
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	b29b      	uxth	r3, r3
 8008422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800842a:	81fb      	strh	r3, [r7, #14]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	441a      	add	r2, r3
 8008436:	89fb      	ldrh	r3, [r7, #14]
 8008438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800843c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008444:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008448:	b29b      	uxth	r3, r3
 800844a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	78db      	ldrb	r3, [r3, #3]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d06c      	beq.n	800852e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29b      	uxth	r3, r3
 8008462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800846a:	81bb      	strh	r3, [r7, #12]
 800846c:	89bb      	ldrh	r3, [r7, #12]
 800846e:	f083 0320 	eor.w	r3, r3, #32
 8008472:	81bb      	strh	r3, [r7, #12]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	441a      	add	r2, r3
 800847e:	89bb      	ldrh	r3, [r7, #12]
 8008480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800848c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008490:	b29b      	uxth	r3, r3
 8008492:	8013      	strh	r3, [r2, #0]
 8008494:	e04b      	b.n	800852e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	82fb      	strh	r3, [r7, #22]
 80084a4:	8afb      	ldrh	r3, [r7, #22]
 80084a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d01b      	beq.n	80084e6 <USB_EPClearStall+0x106>
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c4:	82bb      	strh	r3, [r7, #20]
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	441a      	add	r2, r3
 80084d0:	8abb      	ldrh	r3, [r7, #20]
 80084d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fc:	827b      	strh	r3, [r7, #18]
 80084fe:	8a7b      	ldrh	r3, [r7, #18]
 8008500:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008504:	827b      	strh	r3, [r7, #18]
 8008506:	8a7b      	ldrh	r3, [r7, #18]
 8008508:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800850c:	827b      	strh	r3, [r7, #18]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	441a      	add	r2, r3
 8008518:	8a7b      	ldrh	r3, [r7, #18]
 800851a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800851e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800852a:	b29b      	uxth	r3, r3
 800852c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	371c      	adds	r7, #28
 8008534:	46bd      	mov	sp, r7
 8008536:	bc80      	pop	{r7}
 8008538:	4770      	bx	lr

0800853a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800853a:	b480      	push	{r7}
 800853c:	b083      	sub	sp, #12
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	460b      	mov	r3, r1
 8008544:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008546:	78fb      	ldrb	r3, [r7, #3]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d103      	bne.n	8008554 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2280      	movs	r2, #128	; 0x80
 8008550:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	bc80      	pop	{r7}
 800855e:	4770      	bx	lr

08008560 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	bc80      	pop	{r7}
 8008572:	4770      	bx	lr

08008574 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	bc80      	pop	{r7}
 8008586:	4770      	bx	lr

08008588 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008596:	b29b      	uxth	r3, r3
 8008598:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800859a:	68fb      	ldr	r3, [r7, #12]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bc80      	pop	{r7}
 80085a4:	4770      	bx	lr

080085a6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b083      	sub	sp, #12
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc80      	pop	{r7}
 80085ba:	4770      	bx	lr

080085bc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085bc:	b480      	push	{r7}
 80085be:	b08d      	sub	sp, #52	; 0x34
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	4611      	mov	r1, r2
 80085c8:	461a      	mov	r2, r3
 80085ca:	460b      	mov	r3, r1
 80085cc:	80fb      	strh	r3, [r7, #6]
 80085ce:	4613      	mov	r3, r2
 80085d0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80085d2:	88bb      	ldrh	r3, [r7, #4]
 80085d4:	3301      	adds	r3, #1
 80085d6:	085b      	lsrs	r3, r3, #1
 80085d8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085e2:	88fb      	ldrh	r3, [r7, #6]
 80085e4:	005a      	lsls	r2, r3, #1
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	4413      	add	r3, r2
 80085ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085ee:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80085f0:	6a3b      	ldr	r3, [r7, #32]
 80085f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085f4:	e01e      	b.n	8008634 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	3301      	adds	r3, #1
 8008600:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	b29b      	uxth	r3, r3
 8008608:	021b      	lsls	r3, r3, #8
 800860a:	b29b      	uxth	r3, r3
 800860c:	461a      	mov	r2, r3
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	4313      	orrs	r3, r2
 8008612:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	b29a      	uxth	r2, r3
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	3302      	adds	r3, #2
 8008620:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008624:	3302      	adds	r3, #2
 8008626:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	3301      	adds	r3, #1
 800862c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800862e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008630:	3b01      	subs	r3, #1
 8008632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1dd      	bne.n	80085f6 <USB_WritePMA+0x3a>
  }
}
 800863a:	bf00      	nop
 800863c:	3734      	adds	r7, #52	; 0x34
 800863e:	46bd      	mov	sp, r7
 8008640:	bc80      	pop	{r7}
 8008642:	4770      	bx	lr

08008644 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008644:	b480      	push	{r7}
 8008646:	b08b      	sub	sp, #44	; 0x2c
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	4611      	mov	r1, r2
 8008650:	461a      	mov	r2, r3
 8008652:	460b      	mov	r3, r1
 8008654:	80fb      	strh	r3, [r7, #6]
 8008656:	4613      	mov	r3, r2
 8008658:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800865a:	88bb      	ldrh	r3, [r7, #4]
 800865c:	085b      	lsrs	r3, r3, #1
 800865e:	b29b      	uxth	r3, r3
 8008660:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800866a:	88fb      	ldrh	r3, [r7, #6]
 800866c:	005a      	lsls	r2, r3, #1
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	4413      	add	r3, r2
 8008672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008676:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	627b      	str	r3, [r7, #36]	; 0x24
 800867c:	e01b      	b.n	80086b6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800867e:	6a3b      	ldr	r3, [r7, #32]
 8008680:	881b      	ldrh	r3, [r3, #0]
 8008682:	b29b      	uxth	r3, r3
 8008684:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	3302      	adds	r3, #2
 800868a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	b2da      	uxtb	r2, r3
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	3301      	adds	r3, #1
 8008698:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	0a1b      	lsrs	r3, r3, #8
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	3301      	adds	r3, #1
 80086a8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	3302      	adds	r3, #2
 80086ae:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	3b01      	subs	r3, #1
 80086b4:	627b      	str	r3, [r7, #36]	; 0x24
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1e0      	bne.n	800867e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80086bc:	88bb      	ldrh	r3, [r7, #4]
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d007      	beq.n	80086d8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	881b      	ldrh	r3, [r3, #0]
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	701a      	strb	r2, [r3, #0]
  }
}
 80086d8:	bf00      	nop
 80086da:	372c      	adds	r7, #44	; 0x2c
 80086dc:	46bd      	mov	sp, r7
 80086de:	bc80      	pop	{r7}
 80086e0:	4770      	bx	lr

080086e2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	460b      	mov	r3, r1
 80086ec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	7c1b      	ldrb	r3, [r3, #16]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d115      	bne.n	8008726 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80086fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086fe:	2202      	movs	r2, #2
 8008700:	2181      	movs	r1, #129	; 0x81
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f001 fe1f 	bl	800a346 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800870e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008712:	2202      	movs	r2, #2
 8008714:	2101      	movs	r1, #1
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f001 fe15 	bl	800a346 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008724:	e012      	b.n	800874c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008726:	2340      	movs	r3, #64	; 0x40
 8008728:	2202      	movs	r2, #2
 800872a:	2181      	movs	r1, #129	; 0x81
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f001 fe0a 	bl	800a346 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008738:	2340      	movs	r3, #64	; 0x40
 800873a:	2202      	movs	r2, #2
 800873c:	2101      	movs	r1, #1
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f001 fe01 	bl	800a346 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800874c:	2308      	movs	r3, #8
 800874e:	2203      	movs	r2, #3
 8008750:	2182      	movs	r1, #130	; 0x82
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f001 fdf7 	bl	800a346 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800875e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008762:	f001 ff17 	bl	800a594 <USBD_static_malloc>
 8008766:	4602      	mov	r2, r0
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008774:	2b00      	cmp	r3, #0
 8008776:	d102      	bne.n	800877e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008778:	2301      	movs	r3, #1
 800877a:	73fb      	strb	r3, [r7, #15]
 800877c:	e026      	b.n	80087cc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008784:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2200      	movs	r2, #0
 8008794:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	2200      	movs	r2, #0
 800879c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	7c1b      	ldrb	r3, [r3, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d109      	bne.n	80087bc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087b2:	2101      	movs	r1, #1
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f001 feb7 	bl	800a528 <USBD_LL_PrepareReceive>
 80087ba:	e007      	b.n	80087cc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087c2:	2340      	movs	r3, #64	; 0x40
 80087c4:	2101      	movs	r1, #1
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f001 feae 	bl	800a528 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	460b      	mov	r3, r1
 80087e0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80087e2:	2300      	movs	r3, #0
 80087e4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80087e6:	2181      	movs	r1, #129	; 0x81
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f001 fdd2 	bl	800a392 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80087f4:	2101      	movs	r1, #1
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f001 fdcb 	bl	800a392 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008804:	2182      	movs	r1, #130	; 0x82
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f001 fdc3 	bl	800a392 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00e      	beq.n	800883a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800882c:	4618      	mov	r0, r3
 800882e:	f001 febd 	bl	800a5ac <USBD_static_free>
    pdev->pClassData = NULL;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800883a:	7bfb      	ldrb	r3, [r7, #15]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008854:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800885a:	2300      	movs	r3, #0
 800885c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800886a:	2b00      	cmp	r3, #0
 800886c:	d039      	beq.n	80088e2 <USBD_CDC_Setup+0x9e>
 800886e:	2b20      	cmp	r3, #32
 8008870:	d17c      	bne.n	800896c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	88db      	ldrh	r3, [r3, #6]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d029      	beq.n	80088ce <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	b25b      	sxtb	r3, r3
 8008880:	2b00      	cmp	r3, #0
 8008882:	da11      	bge.n	80088a8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008890:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	88d2      	ldrh	r2, [r2, #6]
 8008896:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008898:	6939      	ldr	r1, [r7, #16]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	88db      	ldrh	r3, [r3, #6]
 800889e:	461a      	mov	r2, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f001 f9c9 	bl	8009c38 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80088a6:	e068      	b.n	800897a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	785a      	ldrb	r2, [r3, #1]
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	88db      	ldrh	r3, [r3, #6]
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80088be:	6939      	ldr	r1, [r7, #16]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	88db      	ldrh	r3, [r3, #6]
 80088c4:	461a      	mov	r2, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 f9e4 	bl	8009c94 <USBD_CtlPrepareRx>
      break;
 80088cc:	e055      	b.n	800897a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	7850      	ldrb	r0, [r2, #1]
 80088da:	2200      	movs	r2, #0
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	4798      	blx	r3
      break;
 80088e0:	e04b      	b.n	800897a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	785b      	ldrb	r3, [r3, #1]
 80088e6:	2b0a      	cmp	r3, #10
 80088e8:	d017      	beq.n	800891a <USBD_CDC_Setup+0xd6>
 80088ea:	2b0b      	cmp	r3, #11
 80088ec:	d029      	beq.n	8008942 <USBD_CDC_Setup+0xfe>
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d133      	bne.n	800895a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088f8:	2b03      	cmp	r3, #3
 80088fa:	d107      	bne.n	800890c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80088fc:	f107 030c 	add.w	r3, r7, #12
 8008900:	2202      	movs	r2, #2
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f001 f997 	bl	8009c38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800890a:	e02e      	b.n	800896a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f001 f928 	bl	8009b64 <USBD_CtlError>
            ret = USBD_FAIL;
 8008914:	2302      	movs	r3, #2
 8008916:	75fb      	strb	r3, [r7, #23]
          break;
 8008918:	e027      	b.n	800896a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008920:	2b03      	cmp	r3, #3
 8008922:	d107      	bne.n	8008934 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008924:	f107 030f 	add.w	r3, r7, #15
 8008928:	2201      	movs	r2, #1
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 f983 	bl	8009c38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008932:	e01a      	b.n	800896a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f001 f914 	bl	8009b64 <USBD_CtlError>
            ret = USBD_FAIL;
 800893c:	2302      	movs	r3, #2
 800893e:	75fb      	strb	r3, [r7, #23]
          break;
 8008940:	e013      	b.n	800896a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008948:	2b03      	cmp	r3, #3
 800894a:	d00d      	beq.n	8008968 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f001 f908 	bl	8009b64 <USBD_CtlError>
            ret = USBD_FAIL;
 8008954:	2302      	movs	r3, #2
 8008956:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008958:	e006      	b.n	8008968 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 f901 	bl	8009b64 <USBD_CtlError>
          ret = USBD_FAIL;
 8008962:	2302      	movs	r3, #2
 8008964:	75fb      	strb	r3, [r7, #23]
          break;
 8008966:	e000      	b.n	800896a <USBD_CDC_Setup+0x126>
          break;
 8008968:	bf00      	nop
      }
      break;
 800896a:	e006      	b.n	800897a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 f8f8 	bl	8009b64 <USBD_CtlError>
      ret = USBD_FAIL;
 8008974:	2302      	movs	r3, #2
 8008976:	75fb      	strb	r3, [r7, #23]
      break;
 8008978:	bf00      	nop
  }

  return ret;
 800897a:	7dfb      	ldrb	r3, [r7, #23]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3718      	adds	r7, #24
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008996:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800899e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d03a      	beq.n	8008a20 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80089aa:	78fa      	ldrb	r2, [r7, #3]
 80089ac:	6879      	ldr	r1, [r7, #4]
 80089ae:	4613      	mov	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	440b      	add	r3, r1
 80089b8:	331c      	adds	r3, #28
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d029      	beq.n	8008a14 <USBD_CDC_DataIn+0x90>
 80089c0:	78fa      	ldrb	r2, [r7, #3]
 80089c2:	6879      	ldr	r1, [r7, #4]
 80089c4:	4613      	mov	r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	440b      	add	r3, r1
 80089ce:	331c      	adds	r3, #28
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	78f9      	ldrb	r1, [r7, #3]
 80089d4:	68b8      	ldr	r0, [r7, #8]
 80089d6:	460b      	mov	r3, r1
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	440b      	add	r3, r1
 80089dc:	00db      	lsls	r3, r3, #3
 80089de:	4403      	add	r3, r0
 80089e0:	3338      	adds	r3, #56	; 0x38
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80089e8:	fb03 f301 	mul.w	r3, r3, r1
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d110      	bne.n	8008a14 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80089f2:	78fa      	ldrb	r2, [r7, #3]
 80089f4:	6879      	ldr	r1, [r7, #4]
 80089f6:	4613      	mov	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	440b      	add	r3, r1
 8008a00:	331c      	adds	r3, #28
 8008a02:	2200      	movs	r2, #0
 8008a04:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a06:	78f9      	ldrb	r1, [r7, #3]
 8008a08:	2300      	movs	r3, #0
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f001 fd68 	bl	800a4e2 <USBD_LL_Transmit>
 8008a12:	e003      	b.n	8008a1c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	e000      	b.n	8008a22 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008a20:	2302      	movs	r3, #2
  }
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	460b      	mov	r3, r1
 8008a34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a3c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a3e:	78fb      	ldrb	r3, [r7, #3]
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f001 fd93 	bl	800a56e <USBD_LL_GetRxDataSize>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00d      	beq.n	8008a76 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008a6e:	4611      	mov	r1, r2
 8008a70:	4798      	blx	r3

    return USBD_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	e000      	b.n	8008a78 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008a76:	2302      	movs	r3, #2
  }
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a8e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d015      	beq.n	8008ac6 <USBD_CDC_EP0_RxReady+0x46>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008aa0:	2bff      	cmp	r3, #255	; 0xff
 8008aa2:	d010      	beq.n	8008ac6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008ab2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008aba:	b292      	uxth	r2, r2
 8008abc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	22ff      	movs	r2, #255	; 0xff
 8008ac2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2243      	movs	r2, #67	; 0x43
 8008adc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008ade:	4b03      	ldr	r3, [pc, #12]	; (8008aec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bc80      	pop	{r7}
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	200000ac 	.word	0x200000ac

08008af0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2243      	movs	r2, #67	; 0x43
 8008afc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008afe:	4b03      	ldr	r3, [pc, #12]	; (8008b0c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bc80      	pop	{r7}
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	20000068 	.word	0x20000068

08008b10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2243      	movs	r2, #67	; 0x43
 8008b1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008b1e:	4b03      	ldr	r3, [pc, #12]	; (8008b2c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bc80      	pop	{r7}
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	200000f0 	.word	0x200000f0

08008b30 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	220a      	movs	r2, #10
 8008b3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008b3e:	4b03      	ldr	r3, [pc, #12]	; (8008b4c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bc80      	pop	{r7}
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	20000024 	.word	0x20000024

08008b50 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d005      	beq.n	8008b70 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	683a      	ldr	r2, [r7, #0]
 8008b68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3714      	adds	r7, #20
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bc80      	pop	{r7}
 8008b7a:	4770      	bx	lr

08008b7c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b087      	sub	sp, #28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	4613      	mov	r3, r2
 8008b88:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b90:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008b9a:	88fa      	ldrh	r2, [r7, #6]
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	371c      	adds	r7, #28
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bc80      	pop	{r7}
 8008bac:	4770      	bx	lr

08008bae <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b085      	sub	sp, #20
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bbe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bc80      	pop	{r7}
 8008bd2:	4770      	bx	lr

08008bd4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d017      	beq.n	8008c1e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	7c1b      	ldrb	r3, [r3, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d109      	bne.n	8008c0a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c00:	2101      	movs	r1, #1
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f001 fc90 	bl	800a528 <USBD_LL_PrepareReceive>
 8008c08:	e007      	b.n	8008c1a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c10:	2340      	movs	r3, #64	; 0x40
 8008c12:	2101      	movs	r1, #1
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f001 fc87 	bl	800a528 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	e000      	b.n	8008c20 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008c1e:	2302      	movs	r3, #2
  }
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	4613      	mov	r3, r2
 8008c34:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e01a      	b.n	8008c76 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	79fa      	ldrb	r2, [r7, #7]
 8008c6c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f001 faf4 	bl	800a25c <USBD_LL_Init>

  return USBD_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b085      	sub	sp, #20
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d006      	beq.n	8008ca0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	683a      	ldr	r2, [r7, #0]
 8008c96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	73fb      	strb	r3, [r7, #15]
 8008c9e:	e001      	b.n	8008ca4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bc80      	pop	{r7}
 8008cae:	4770      	bx	lr

08008cb0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f001 fb29 	bl	800a310 <USBD_LL_Start>

  return USBD_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bc80      	pop	{r7}
 8008cda:	4770      	bx	lr

08008cdc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008ce8:	2302      	movs	r3, #2
 8008cea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00c      	beq.n	8008d10 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	78fa      	ldrb	r2, [r7, #3]
 8008d00:	4611      	mov	r1, r2
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	4798      	blx	r3
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	78fa      	ldrb	r2, [r7, #3]
 8008d30:	4611      	mov	r1, r2
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	4798      	blx	r3

  return USBD_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 feca 	bl	8009aec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008d66:	461a      	mov	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008d74:	f003 031f 	and.w	r3, r3, #31
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d00c      	beq.n	8008d96 <USBD_LL_SetupStage+0x56>
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d302      	bcc.n	8008d86 <USBD_LL_SetupStage+0x46>
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d010      	beq.n	8008da6 <USBD_LL_SetupStage+0x66>
 8008d84:	e017      	b.n	8008db6 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f9ca 	bl	8009128 <USBD_StdDevReq>
      break;
 8008d94:	e01a      	b.n	8008dcc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fa2c 	bl	80091fc <USBD_StdItfReq>
      break;
 8008da4:	e012      	b.n	8008dcc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fa6a 	bl	8009288 <USBD_StdEPReq>
      break;
 8008db4:	e00a      	b.n	8008dcc <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008dbc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f001 fb03 	bl	800a3d0 <USBD_LL_StallEP>
      break;
 8008dca:	bf00      	nop
  }

  return USBD_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b086      	sub	sp, #24
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	60f8      	str	r0, [r7, #12]
 8008dde:	460b      	mov	r3, r1
 8008de0:	607a      	str	r2, [r7, #4]
 8008de2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008de4:	7afb      	ldrb	r3, [r7, #11]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d14b      	bne.n	8008e82 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008df0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008df8:	2b03      	cmp	r3, #3
 8008dfa:	d134      	bne.n	8008e66 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	68da      	ldr	r2, [r3, #12]
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d919      	bls.n	8008e3c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	68da      	ldr	r2, [r3, #12]
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	1ad2      	subs	r2, r2, r3
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	68da      	ldr	r2, [r3, #12]
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d203      	bcs.n	8008e2a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	e002      	b.n	8008e30 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	461a      	mov	r2, r3
 8008e32:	6879      	ldr	r1, [r7, #4]
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 ff4b 	bl	8009cd0 <USBD_CtlContinueRx>
 8008e3a:	e038      	b.n	8008eae <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00a      	beq.n	8008e5e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	d105      	bne.n	8008e5e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 ff48 	bl	8009cf4 <USBD_CtlSendStatus>
 8008e64:	e023      	b.n	8008eae <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e6c:	2b05      	cmp	r3, #5
 8008e6e:	d11e      	bne.n	8008eae <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008e78:	2100      	movs	r1, #0
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f001 faa8 	bl	800a3d0 <USBD_LL_StallEP>
 8008e80:	e015      	b.n	8008eae <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00d      	beq.n	8008eaa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e94:	2b03      	cmp	r3, #3
 8008e96:	d108      	bne.n	8008eaa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	7afa      	ldrb	r2, [r7, #11]
 8008ea2:	4611      	mov	r1, r2
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	4798      	blx	r3
 8008ea8:	e001      	b.n	8008eae <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008eaa:	2302      	movs	r3, #2
 8008eac:	e000      	b.n	8008eb0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3718      	adds	r7, #24
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	607a      	str	r2, [r7, #4]
 8008ec4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008ec6:	7afb      	ldrb	r3, [r7, #11]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d17f      	bne.n	8008fcc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3314      	adds	r3, #20
 8008ed0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d15c      	bne.n	8008f96 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	68da      	ldr	r2, [r3, #12]
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d915      	bls.n	8008f14 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	68da      	ldr	r2, [r3, #12]
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	1ad2      	subs	r2, r2, r3
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	461a      	mov	r2, r3
 8008efe:	6879      	ldr	r1, [r7, #4]
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 feb5 	bl	8009c70 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f06:	2300      	movs	r3, #0
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f001 fb0b 	bl	800a528 <USBD_LL_PrepareReceive>
 8008f12:	e04e      	b.n	8008fb2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	697a      	ldr	r2, [r7, #20]
 8008f1a:	6912      	ldr	r2, [r2, #16]
 8008f1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f20:	fb02 f201 	mul.w	r2, r2, r1
 8008f24:	1a9b      	subs	r3, r3, r2
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d11c      	bne.n	8008f64 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	689a      	ldr	r2, [r3, #8]
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d316      	bcc.n	8008f64 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	689a      	ldr	r2, [r3, #8]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d20f      	bcs.n	8008f64 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f44:	2200      	movs	r2, #0
 8008f46:	2100      	movs	r1, #0
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 fe91 	bl	8009c70 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f56:	2300      	movs	r3, #0
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f001 fae3 	bl	800a528 <USBD_LL_PrepareReceive>
 8008f62:	e026      	b.n	8008fb2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00a      	beq.n	8008f86 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f76:	2b03      	cmp	r3, #3
 8008f78:	d105      	bne.n	8008f86 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008f86:	2180      	movs	r1, #128	; 0x80
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f001 fa21 	bl	800a3d0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f000 fec3 	bl	8009d1a <USBD_CtlReceiveStatus>
 8008f94:	e00d      	b.n	8008fb2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	d004      	beq.n	8008faa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d103      	bne.n	8008fb2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008faa:	2180      	movs	r1, #128	; 0x80
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f001 fa0f 	bl	800a3d0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d11d      	bne.n	8008ff8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f7ff fe83 	bl	8008cc8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008fca:	e015      	b.n	8008ff8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd2:	695b      	ldr	r3, [r3, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00d      	beq.n	8008ff4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d108      	bne.n	8008ff4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	7afa      	ldrb	r2, [r7, #11]
 8008fec:	4611      	mov	r1, r2
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	4798      	blx	r3
 8008ff2:	e001      	b.n	8008ff8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	e000      	b.n	8008ffa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b082      	sub	sp, #8
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800900a:	2340      	movs	r3, #64	; 0x40
 800900c:	2200      	movs	r2, #0
 800900e:	2100      	movs	r1, #0
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f001 f998 	bl	800a346 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2201      	movs	r2, #1
 800901a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2240      	movs	r2, #64	; 0x40
 8009022:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009026:	2340      	movs	r3, #64	; 0x40
 8009028:	2200      	movs	r2, #0
 800902a:	2180      	movs	r1, #128	; 0x80
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 f98a 	bl	800a346 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2240      	movs	r2, #64	; 0x40
 800903c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009062:	2b00      	cmp	r3, #0
 8009064:	d009      	beq.n	800907a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	6852      	ldr	r2, [r2, #4]
 8009072:	b2d2      	uxtb	r2, r2
 8009074:	4611      	mov	r1, r2
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	4798      	blx	r3
  }

  return USBD_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	460b      	mov	r3, r1
 800908e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	78fa      	ldrb	r2, [r7, #3]
 8009094:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	bc80      	pop	{r7}
 80090a0:	4770      	bx	lr

080090a2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b083      	sub	sp, #12
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2204      	movs	r2, #4
 80090ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bc80      	pop	{r7}
 80090c8:	4770      	bx	lr

080090ca <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80090ca:	b480      	push	{r7}
 80090cc:	b083      	sub	sp, #12
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d8:	2b04      	cmp	r3, #4
 80090da:	d105      	bne.n	80090e8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bc80      	pop	{r7}
 80090f2:	4770      	bx	lr

080090f4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009102:	2b03      	cmp	r3, #3
 8009104:	d10b      	bne.n	800911e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d005      	beq.n	800911e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800913e:	2b20      	cmp	r3, #32
 8009140:	d004      	beq.n	800914c <USBD_StdDevReq+0x24>
 8009142:	2b40      	cmp	r3, #64	; 0x40
 8009144:	d002      	beq.n	800914c <USBD_StdDevReq+0x24>
 8009146:	2b00      	cmp	r3, #0
 8009148:	d008      	beq.n	800915c <USBD_StdDevReq+0x34>
 800914a:	e04c      	b.n	80091e6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	6839      	ldr	r1, [r7, #0]
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	4798      	blx	r3
      break;
 800915a:	e049      	b.n	80091f0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	785b      	ldrb	r3, [r3, #1]
 8009160:	2b09      	cmp	r3, #9
 8009162:	d83a      	bhi.n	80091da <USBD_StdDevReq+0xb2>
 8009164:	a201      	add	r2, pc, #4	; (adr r2, 800916c <USBD_StdDevReq+0x44>)
 8009166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916a:	bf00      	nop
 800916c:	080091bd 	.word	0x080091bd
 8009170:	080091d1 	.word	0x080091d1
 8009174:	080091db 	.word	0x080091db
 8009178:	080091c7 	.word	0x080091c7
 800917c:	080091db 	.word	0x080091db
 8009180:	0800919f 	.word	0x0800919f
 8009184:	08009195 	.word	0x08009195
 8009188:	080091db 	.word	0x080091db
 800918c:	080091b3 	.word	0x080091b3
 8009190:	080091a9 	.word	0x080091a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f9d4 	bl	8009544 <USBD_GetDescriptor>
          break;
 800919c:	e022      	b.n	80091e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fb37 	bl	8009814 <USBD_SetAddress>
          break;
 80091a6:	e01d      	b.n	80091e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fb74 	bl	8009898 <USBD_SetConfig>
          break;
 80091b0:	e018      	b.n	80091e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fbfd 	bl	80099b4 <USBD_GetConfig>
          break;
 80091ba:	e013      	b.n	80091e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fc2c 	bl	8009a1c <USBD_GetStatus>
          break;
 80091c4:	e00e      	b.n	80091e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fc5a 	bl	8009a82 <USBD_SetFeature>
          break;
 80091ce:	e009      	b.n	80091e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fc69 	bl	8009aaa <USBD_ClrFeature>
          break;
 80091d8:	e004      	b.n	80091e4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80091da:	6839      	ldr	r1, [r7, #0]
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fcc1 	bl	8009b64 <USBD_CtlError>
          break;
 80091e2:	bf00      	nop
      }
      break;
 80091e4:	e004      	b.n	80091f0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fcbb 	bl	8009b64 <USBD_CtlError>
      break;
 80091ee:	bf00      	nop
  }

  return ret;
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop

080091fc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009212:	2b20      	cmp	r3, #32
 8009214:	d003      	beq.n	800921e <USBD_StdItfReq+0x22>
 8009216:	2b40      	cmp	r3, #64	; 0x40
 8009218:	d001      	beq.n	800921e <USBD_StdItfReq+0x22>
 800921a:	2b00      	cmp	r3, #0
 800921c:	d12a      	bne.n	8009274 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009224:	3b01      	subs	r3, #1
 8009226:	2b02      	cmp	r3, #2
 8009228:	d81d      	bhi.n	8009266 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	889b      	ldrh	r3, [r3, #4]
 800922e:	b2db      	uxtb	r3, r3
 8009230:	2b01      	cmp	r3, #1
 8009232:	d813      	bhi.n	800925c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	4798      	blx	r3
 8009242:	4603      	mov	r3, r0
 8009244:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	88db      	ldrh	r3, [r3, #6]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d110      	bne.n	8009270 <USBD_StdItfReq+0x74>
 800924e:	7bfb      	ldrb	r3, [r7, #15]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10d      	bne.n	8009270 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fd4d 	bl	8009cf4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800925a:	e009      	b.n	8009270 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fc80 	bl	8009b64 <USBD_CtlError>
          break;
 8009264:	e004      	b.n	8009270 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fc7b 	bl	8009b64 <USBD_CtlError>
          break;
 800926e:	e000      	b.n	8009272 <USBD_StdItfReq+0x76>
          break;
 8009270:	bf00      	nop
      }
      break;
 8009272:	e004      	b.n	800927e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fc74 	bl	8009b64 <USBD_CtlError>
      break;
 800927c:	bf00      	nop
  }

  return USBD_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	889b      	ldrh	r3, [r3, #4]
 800929a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092a4:	2b20      	cmp	r3, #32
 80092a6:	d004      	beq.n	80092b2 <USBD_StdEPReq+0x2a>
 80092a8:	2b40      	cmp	r3, #64	; 0x40
 80092aa:	d002      	beq.n	80092b2 <USBD_StdEPReq+0x2a>
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d008      	beq.n	80092c2 <USBD_StdEPReq+0x3a>
 80092b0:	e13d      	b.n	800952e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	4798      	blx	r3
      break;
 80092c0:	e13a      	b.n	8009538 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092ca:	2b20      	cmp	r3, #32
 80092cc:	d10a      	bne.n	80092e4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	4798      	blx	r3
 80092dc:	4603      	mov	r3, r0
 80092de:	73fb      	strb	r3, [r7, #15]

        return ret;
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
 80092e2:	e12a      	b.n	800953a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	785b      	ldrb	r3, [r3, #1]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d03e      	beq.n	800936a <USBD_StdEPReq+0xe2>
 80092ec:	2b03      	cmp	r3, #3
 80092ee:	d002      	beq.n	80092f6 <USBD_StdEPReq+0x6e>
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d070      	beq.n	80093d6 <USBD_StdEPReq+0x14e>
 80092f4:	e115      	b.n	8009522 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d002      	beq.n	8009306 <USBD_StdEPReq+0x7e>
 8009300:	2b03      	cmp	r3, #3
 8009302:	d015      	beq.n	8009330 <USBD_StdEPReq+0xa8>
 8009304:	e02b      	b.n	800935e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009306:	7bbb      	ldrb	r3, [r7, #14]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00c      	beq.n	8009326 <USBD_StdEPReq+0x9e>
 800930c:	7bbb      	ldrb	r3, [r7, #14]
 800930e:	2b80      	cmp	r3, #128	; 0x80
 8009310:	d009      	beq.n	8009326 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009312:	7bbb      	ldrb	r3, [r7, #14]
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f001 f85a 	bl	800a3d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800931c:	2180      	movs	r1, #128	; 0x80
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f001 f856 	bl	800a3d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009324:	e020      	b.n	8009368 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fc1b 	bl	8009b64 <USBD_CtlError>
              break;
 800932e:	e01b      	b.n	8009368 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	885b      	ldrh	r3, [r3, #2]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10e      	bne.n	8009356 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8009338:	7bbb      	ldrb	r3, [r7, #14]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00b      	beq.n	8009356 <USBD_StdEPReq+0xce>
 800933e:	7bbb      	ldrb	r3, [r7, #14]
 8009340:	2b80      	cmp	r3, #128	; 0x80
 8009342:	d008      	beq.n	8009356 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	88db      	ldrh	r3, [r3, #6]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d104      	bne.n	8009356 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800934c:	7bbb      	ldrb	r3, [r7, #14]
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 f83d 	bl	800a3d0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fccc 	bl	8009cf4 <USBD_CtlSendStatus>

              break;
 800935c:	e004      	b.n	8009368 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fbff 	bl	8009b64 <USBD_CtlError>
              break;
 8009366:	bf00      	nop
          }
          break;
 8009368:	e0e0      	b.n	800952c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009370:	2b02      	cmp	r3, #2
 8009372:	d002      	beq.n	800937a <USBD_StdEPReq+0xf2>
 8009374:	2b03      	cmp	r3, #3
 8009376:	d015      	beq.n	80093a4 <USBD_StdEPReq+0x11c>
 8009378:	e026      	b.n	80093c8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800937a:	7bbb      	ldrb	r3, [r7, #14]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00c      	beq.n	800939a <USBD_StdEPReq+0x112>
 8009380:	7bbb      	ldrb	r3, [r7, #14]
 8009382:	2b80      	cmp	r3, #128	; 0x80
 8009384:	d009      	beq.n	800939a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	4619      	mov	r1, r3
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f001 f820 	bl	800a3d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009390:	2180      	movs	r1, #128	; 0x80
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f001 f81c 	bl	800a3d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009398:	e01c      	b.n	80093d4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800939a:	6839      	ldr	r1, [r7, #0]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fbe1 	bl	8009b64 <USBD_CtlError>
              break;
 80093a2:	e017      	b.n	80093d4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	885b      	ldrh	r3, [r3, #2]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d112      	bne.n	80093d2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
 80093ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d004      	beq.n	80093c0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80093b6:	7bbb      	ldrb	r3, [r7, #14]
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f001 f827 	bl	800a40e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fc97 	bl	8009cf4 <USBD_CtlSendStatus>
              }
              break;
 80093c6:	e004      	b.n	80093d2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 fbca 	bl	8009b64 <USBD_CtlError>
              break;
 80093d0:	e000      	b.n	80093d4 <USBD_StdEPReq+0x14c>
              break;
 80093d2:	bf00      	nop
          }
          break;
 80093d4:	e0aa      	b.n	800952c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d002      	beq.n	80093e6 <USBD_StdEPReq+0x15e>
 80093e0:	2b03      	cmp	r3, #3
 80093e2:	d032      	beq.n	800944a <USBD_StdEPReq+0x1c2>
 80093e4:	e097      	b.n	8009516 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093e6:	7bbb      	ldrb	r3, [r7, #14]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d007      	beq.n	80093fc <USBD_StdEPReq+0x174>
 80093ec:	7bbb      	ldrb	r3, [r7, #14]
 80093ee:	2b80      	cmp	r3, #128	; 0x80
 80093f0:	d004      	beq.n	80093fc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fbb5 	bl	8009b64 <USBD_CtlError>
                break;
 80093fa:	e091      	b.n	8009520 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009400:	2b00      	cmp	r3, #0
 8009402:	da0b      	bge.n	800941c <USBD_StdEPReq+0x194>
 8009404:	7bbb      	ldrb	r3, [r7, #14]
 8009406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800940a:	4613      	mov	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	3310      	adds	r3, #16
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	4413      	add	r3, r2
 8009418:	3304      	adds	r3, #4
 800941a:	e00b      	b.n	8009434 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800941c:	7bbb      	ldrb	r3, [r7, #14]
 800941e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009422:	4613      	mov	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4413      	add	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	4413      	add	r3, r2
 8009432:	3304      	adds	r3, #4
 8009434:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2200      	movs	r2, #0
 800943a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2202      	movs	r2, #2
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fbf8 	bl	8009c38 <USBD_CtlSendData>
              break;
 8009448:	e06a      	b.n	8009520 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800944a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800944e:	2b00      	cmp	r3, #0
 8009450:	da11      	bge.n	8009476 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009452:	7bbb      	ldrb	r3, [r7, #14]
 8009454:	f003 020f 	and.w	r2, r3, #15
 8009458:	6879      	ldr	r1, [r7, #4]
 800945a:	4613      	mov	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	440b      	add	r3, r1
 8009464:	3318      	adds	r3, #24
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d117      	bne.n	800949c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800946c:	6839      	ldr	r1, [r7, #0]
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fb78 	bl	8009b64 <USBD_CtlError>
                  break;
 8009474:	e054      	b.n	8009520 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009476:	7bbb      	ldrb	r3, [r7, #14]
 8009478:	f003 020f 	and.w	r2, r3, #15
 800947c:	6879      	ldr	r1, [r7, #4]
 800947e:	4613      	mov	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4413      	add	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	440b      	add	r3, r1
 8009488:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d104      	bne.n	800949c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fb65 	bl	8009b64 <USBD_CtlError>
                  break;
 800949a:	e041      	b.n	8009520 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800949c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	da0b      	bge.n	80094bc <USBD_StdEPReq+0x234>
 80094a4:	7bbb      	ldrb	r3, [r7, #14]
 80094a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094aa:	4613      	mov	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	3310      	adds	r3, #16
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	4413      	add	r3, r2
 80094b8:	3304      	adds	r3, #4
 80094ba:	e00b      	b.n	80094d4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094bc:	7bbb      	ldrb	r3, [r7, #14]
 80094be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094c2:	4613      	mov	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	4413      	add	r3, r2
 80094d2:	3304      	adds	r3, #4
 80094d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094d6:	7bbb      	ldrb	r3, [r7, #14]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d002      	beq.n	80094e2 <USBD_StdEPReq+0x25a>
 80094dc:	7bbb      	ldrb	r3, [r7, #14]
 80094de:	2b80      	cmp	r3, #128	; 0x80
 80094e0:	d103      	bne.n	80094ea <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	2200      	movs	r2, #0
 80094e6:	601a      	str	r2, [r3, #0]
 80094e8:	e00e      	b.n	8009508 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80094ea:	7bbb      	ldrb	r3, [r7, #14]
 80094ec:	4619      	mov	r1, r3
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 ffac 	bl	800a44c <USBD_LL_IsStallEP>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2201      	movs	r2, #1
 80094fe:	601a      	str	r2, [r3, #0]
 8009500:	e002      	b.n	8009508 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	2200      	movs	r2, #0
 8009506:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	2202      	movs	r2, #2
 800950c:	4619      	mov	r1, r3
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fb92 	bl	8009c38 <USBD_CtlSendData>
              break;
 8009514:	e004      	b.n	8009520 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8009516:	6839      	ldr	r1, [r7, #0]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fb23 	bl	8009b64 <USBD_CtlError>
              break;
 800951e:	bf00      	nop
          }
          break;
 8009520:	e004      	b.n	800952c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fb1d 	bl	8009b64 <USBD_CtlError>
          break;
 800952a:	bf00      	nop
      }
      break;
 800952c:	e004      	b.n	8009538 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fb17 	bl	8009b64 <USBD_CtlError>
      break;
 8009536:	bf00      	nop
  }

  return ret;
 8009538:	7bfb      	ldrb	r3, [r7, #15]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
	...

08009544 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800954e:	2300      	movs	r3, #0
 8009550:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009552:	2300      	movs	r3, #0
 8009554:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009556:	2300      	movs	r3, #0
 8009558:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	885b      	ldrh	r3, [r3, #2]
 800955e:	0a1b      	lsrs	r3, r3, #8
 8009560:	b29b      	uxth	r3, r3
 8009562:	3b01      	subs	r3, #1
 8009564:	2b06      	cmp	r3, #6
 8009566:	f200 8128 	bhi.w	80097ba <USBD_GetDescriptor+0x276>
 800956a:	a201      	add	r2, pc, #4	; (adr r2, 8009570 <USBD_GetDescriptor+0x2c>)
 800956c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009570:	0800958d 	.word	0x0800958d
 8009574:	080095a5 	.word	0x080095a5
 8009578:	080095e5 	.word	0x080095e5
 800957c:	080097bb 	.word	0x080097bb
 8009580:	080097bb 	.word	0x080097bb
 8009584:	0800975b 	.word	0x0800975b
 8009588:	08009787 	.word	0x08009787
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	7c12      	ldrb	r2, [r2, #16]
 8009598:	f107 0108 	add.w	r1, r7, #8
 800959c:	4610      	mov	r0, r2
 800959e:	4798      	blx	r3
 80095a0:	60f8      	str	r0, [r7, #12]
      break;
 80095a2:	e112      	b.n	80097ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	7c1b      	ldrb	r3, [r3, #16]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10d      	bne.n	80095c8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b4:	f107 0208 	add.w	r2, r7, #8
 80095b8:	4610      	mov	r0, r2
 80095ba:	4798      	blx	r3
 80095bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	3301      	adds	r3, #1
 80095c2:	2202      	movs	r2, #2
 80095c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80095c6:	e100      	b.n	80097ca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d0:	f107 0208 	add.w	r2, r7, #8
 80095d4:	4610      	mov	r0, r2
 80095d6:	4798      	blx	r3
 80095d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	3301      	adds	r3, #1
 80095de:	2202      	movs	r2, #2
 80095e0:	701a      	strb	r2, [r3, #0]
      break;
 80095e2:	e0f2      	b.n	80097ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	885b      	ldrh	r3, [r3, #2]
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b05      	cmp	r3, #5
 80095ec:	f200 80ac 	bhi.w	8009748 <USBD_GetDescriptor+0x204>
 80095f0:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <USBD_GetDescriptor+0xb4>)
 80095f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f6:	bf00      	nop
 80095f8:	08009611 	.word	0x08009611
 80095fc:	08009645 	.word	0x08009645
 8009600:	08009679 	.word	0x08009679
 8009604:	080096ad 	.word	0x080096ad
 8009608:	080096e1 	.word	0x080096e1
 800960c:	08009715 	.word	0x08009715
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00b      	beq.n	8009634 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	7c12      	ldrb	r2, [r2, #16]
 8009628:	f107 0108 	add.w	r1, r7, #8
 800962c:	4610      	mov	r0, r2
 800962e:	4798      	blx	r3
 8009630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009632:	e091      	b.n	8009758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fa94 	bl	8009b64 <USBD_CtlError>
            err++;
 800963c:	7afb      	ldrb	r3, [r7, #11]
 800963e:	3301      	adds	r3, #1
 8009640:	72fb      	strb	r3, [r7, #11]
          break;
 8009642:	e089      	b.n	8009758 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00b      	beq.n	8009668 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	7c12      	ldrb	r2, [r2, #16]
 800965c:	f107 0108 	add.w	r1, r7, #8
 8009660:	4610      	mov	r0, r2
 8009662:	4798      	blx	r3
 8009664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009666:	e077      	b.n	8009758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009668:	6839      	ldr	r1, [r7, #0]
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fa7a 	bl	8009b64 <USBD_CtlError>
            err++;
 8009670:	7afb      	ldrb	r3, [r7, #11]
 8009672:	3301      	adds	r3, #1
 8009674:	72fb      	strb	r3, [r7, #11]
          break;
 8009676:	e06f      	b.n	8009758 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00b      	beq.n	800969c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	7c12      	ldrb	r2, [r2, #16]
 8009690:	f107 0108 	add.w	r1, r7, #8
 8009694:	4610      	mov	r0, r2
 8009696:	4798      	blx	r3
 8009698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800969a:	e05d      	b.n	8009758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800969c:	6839      	ldr	r1, [r7, #0]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 fa60 	bl	8009b64 <USBD_CtlError>
            err++;
 80096a4:	7afb      	ldrb	r3, [r7, #11]
 80096a6:	3301      	adds	r3, #1
 80096a8:	72fb      	strb	r3, [r7, #11]
          break;
 80096aa:	e055      	b.n	8009758 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00b      	beq.n	80096d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	7c12      	ldrb	r2, [r2, #16]
 80096c4:	f107 0108 	add.w	r1, r7, #8
 80096c8:	4610      	mov	r0, r2
 80096ca:	4798      	blx	r3
 80096cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ce:	e043      	b.n	8009758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fa46 	bl	8009b64 <USBD_CtlError>
            err++;
 80096d8:	7afb      	ldrb	r3, [r7, #11]
 80096da:	3301      	adds	r3, #1
 80096dc:	72fb      	strb	r3, [r7, #11]
          break;
 80096de:	e03b      	b.n	8009758 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096e6:	695b      	ldr	r3, [r3, #20]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00b      	beq.n	8009704 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096f2:	695b      	ldr	r3, [r3, #20]
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	7c12      	ldrb	r2, [r2, #16]
 80096f8:	f107 0108 	add.w	r1, r7, #8
 80096fc:	4610      	mov	r0, r2
 80096fe:	4798      	blx	r3
 8009700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009702:	e029      	b.n	8009758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fa2c 	bl	8009b64 <USBD_CtlError>
            err++;
 800970c:	7afb      	ldrb	r3, [r7, #11]
 800970e:	3301      	adds	r3, #1
 8009710:	72fb      	strb	r3, [r7, #11]
          break;
 8009712:	e021      	b.n	8009758 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00b      	beq.n	8009738 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	7c12      	ldrb	r2, [r2, #16]
 800972c:	f107 0108 	add.w	r1, r7, #8
 8009730:	4610      	mov	r0, r2
 8009732:	4798      	blx	r3
 8009734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009736:	e00f      	b.n	8009758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009738:	6839      	ldr	r1, [r7, #0]
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fa12 	bl	8009b64 <USBD_CtlError>
            err++;
 8009740:	7afb      	ldrb	r3, [r7, #11]
 8009742:	3301      	adds	r3, #1
 8009744:	72fb      	strb	r3, [r7, #11]
          break;
 8009746:	e007      	b.n	8009758 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fa0a 	bl	8009b64 <USBD_CtlError>
          err++;
 8009750:	7afb      	ldrb	r3, [r7, #11]
 8009752:	3301      	adds	r3, #1
 8009754:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009756:	e038      	b.n	80097ca <USBD_GetDescriptor+0x286>
 8009758:	e037      	b.n	80097ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	7c1b      	ldrb	r3, [r3, #16]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d109      	bne.n	8009776 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800976a:	f107 0208 	add.w	r2, r7, #8
 800976e:	4610      	mov	r0, r2
 8009770:	4798      	blx	r3
 8009772:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009774:	e029      	b.n	80097ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009776:	6839      	ldr	r1, [r7, #0]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 f9f3 	bl	8009b64 <USBD_CtlError>
        err++;
 800977e:	7afb      	ldrb	r3, [r7, #11]
 8009780:	3301      	adds	r3, #1
 8009782:	72fb      	strb	r3, [r7, #11]
      break;
 8009784:	e021      	b.n	80097ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	7c1b      	ldrb	r3, [r3, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10d      	bne.n	80097aa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009796:	f107 0208 	add.w	r2, r7, #8
 800979a:	4610      	mov	r0, r2
 800979c:	4798      	blx	r3
 800979e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	3301      	adds	r3, #1
 80097a4:	2207      	movs	r2, #7
 80097a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097a8:	e00f      	b.n	80097ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097aa:	6839      	ldr	r1, [r7, #0]
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f9d9 	bl	8009b64 <USBD_CtlError>
        err++;
 80097b2:	7afb      	ldrb	r3, [r7, #11]
 80097b4:	3301      	adds	r3, #1
 80097b6:	72fb      	strb	r3, [r7, #11]
      break;
 80097b8:	e007      	b.n	80097ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f9d1 	bl	8009b64 <USBD_CtlError>
      err++;
 80097c2:	7afb      	ldrb	r3, [r7, #11]
 80097c4:	3301      	adds	r3, #1
 80097c6:	72fb      	strb	r3, [r7, #11]
      break;
 80097c8:	bf00      	nop
  }

  if (err != 0U)
 80097ca:	7afb      	ldrb	r3, [r7, #11]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d11c      	bne.n	800980a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80097d0:	893b      	ldrh	r3, [r7, #8]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d011      	beq.n	80097fa <USBD_GetDescriptor+0x2b6>
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	88db      	ldrh	r3, [r3, #6]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00d      	beq.n	80097fa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	88da      	ldrh	r2, [r3, #6]
 80097e2:	893b      	ldrh	r3, [r7, #8]
 80097e4:	4293      	cmp	r3, r2
 80097e6:	bf28      	it	cs
 80097e8:	4613      	movcs	r3, r2
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097ee:	893b      	ldrh	r3, [r7, #8]
 80097f0:	461a      	mov	r2, r3
 80097f2:	68f9      	ldr	r1, [r7, #12]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fa1f 	bl	8009c38 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	88db      	ldrh	r3, [r3, #6]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d104      	bne.n	800980c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fa76 	bl	8009cf4 <USBD_CtlSendStatus>
 8009808:	e000      	b.n	800980c <USBD_GetDescriptor+0x2c8>
    return;
 800980a:	bf00      	nop
    }
  }
}
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop

08009814 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	889b      	ldrh	r3, [r3, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d130      	bne.n	8009888 <USBD_SetAddress+0x74>
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	88db      	ldrh	r3, [r3, #6]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d12c      	bne.n	8009888 <USBD_SetAddress+0x74>
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	885b      	ldrh	r3, [r3, #2]
 8009832:	2b7f      	cmp	r3, #127	; 0x7f
 8009834:	d828      	bhi.n	8009888 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	885b      	ldrh	r3, [r3, #2]
 800983a:	b2db      	uxtb	r3, r3
 800983c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009840:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009848:	2b03      	cmp	r3, #3
 800984a:	d104      	bne.n	8009856 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f988 	bl	8009b64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009854:	e01c      	b.n	8009890 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	7bfa      	ldrb	r2, [r7, #15]
 800985a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800985e:	7bfb      	ldrb	r3, [r7, #15]
 8009860:	4619      	mov	r1, r3
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fe1e 	bl	800a4a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fa43 	bl	8009cf4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800986e:	7bfb      	ldrb	r3, [r7, #15]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d004      	beq.n	800987e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2202      	movs	r2, #2
 8009878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800987c:	e008      	b.n	8009890 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009886:	e003      	b.n	8009890 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f96a 	bl	8009b64 <USBD_CtlError>
  }
}
 8009890:	bf00      	nop
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	885b      	ldrh	r3, [r3, #2]
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	4b41      	ldr	r3, [pc, #260]	; (80099b0 <USBD_SetConfig+0x118>)
 80098aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80098ac:	4b40      	ldr	r3, [pc, #256]	; (80099b0 <USBD_SetConfig+0x118>)
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d904      	bls.n	80098be <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f954 	bl	8009b64 <USBD_CtlError>
 80098bc:	e075      	b.n	80099aa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d002      	beq.n	80098ce <USBD_SetConfig+0x36>
 80098c8:	2b03      	cmp	r3, #3
 80098ca:	d023      	beq.n	8009914 <USBD_SetConfig+0x7c>
 80098cc:	e062      	b.n	8009994 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80098ce:	4b38      	ldr	r3, [pc, #224]	; (80099b0 <USBD_SetConfig+0x118>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d01a      	beq.n	800990c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80098d6:	4b36      	ldr	r3, [pc, #216]	; (80099b0 <USBD_SetConfig+0x118>)
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2203      	movs	r2, #3
 80098e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80098e8:	4b31      	ldr	r3, [pc, #196]	; (80099b0 <USBD_SetConfig+0x118>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	4619      	mov	r1, r3
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f7ff f9f4 	bl	8008cdc <USBD_SetClassConfig>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d104      	bne.n	8009904 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80098fa:	6839      	ldr	r1, [r7, #0]
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f931 	bl	8009b64 <USBD_CtlError>
            return;
 8009902:	e052      	b.n	80099aa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 f9f5 	bl	8009cf4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800990a:	e04e      	b.n	80099aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f9f1 	bl	8009cf4 <USBD_CtlSendStatus>
        break;
 8009912:	e04a      	b.n	80099aa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009914:	4b26      	ldr	r3, [pc, #152]	; (80099b0 <USBD_SetConfig+0x118>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d112      	bne.n	8009942 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2202      	movs	r2, #2
 8009920:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009924:	4b22      	ldr	r3, [pc, #136]	; (80099b0 <USBD_SetConfig+0x118>)
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	461a      	mov	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800992e:	4b20      	ldr	r3, [pc, #128]	; (80099b0 <USBD_SetConfig+0x118>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f7ff f9f0 	bl	8008d1a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f9da 	bl	8009cf4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009940:	e033      	b.n	80099aa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009942:	4b1b      	ldr	r3, [pc, #108]	; (80099b0 <USBD_SetConfig+0x118>)
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	461a      	mov	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	429a      	cmp	r2, r3
 800994e:	d01d      	beq.n	800998c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	b2db      	uxtb	r3, r3
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7ff f9de 	bl	8008d1a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800995e:	4b14      	ldr	r3, [pc, #80]	; (80099b0 <USBD_SetConfig+0x118>)
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	461a      	mov	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009968:	4b11      	ldr	r3, [pc, #68]	; (80099b0 <USBD_SetConfig+0x118>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	4619      	mov	r1, r3
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f7ff f9b4 	bl	8008cdc <USBD_SetClassConfig>
 8009974:	4603      	mov	r3, r0
 8009976:	2b02      	cmp	r3, #2
 8009978:	d104      	bne.n	8009984 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800997a:	6839      	ldr	r1, [r7, #0]
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f8f1 	bl	8009b64 <USBD_CtlError>
            return;
 8009982:	e012      	b.n	80099aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f9b5 	bl	8009cf4 <USBD_CtlSendStatus>
        break;
 800998a:	e00e      	b.n	80099aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f9b1 	bl	8009cf4 <USBD_CtlSendStatus>
        break;
 8009992:	e00a      	b.n	80099aa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f8e4 	bl	8009b64 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800999c:	4b04      	ldr	r3, [pc, #16]	; (80099b0 <USBD_SetConfig+0x118>)
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	4619      	mov	r1, r3
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f7ff f9b9 	bl	8008d1a <USBD_ClrClassConfig>
        break;
 80099a8:	bf00      	nop
    }
  }
}
 80099aa:	3708      	adds	r7, #8
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	200001d3 	.word	0x200001d3

080099b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	88db      	ldrh	r3, [r3, #6]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d004      	beq.n	80099d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f8cb 	bl	8009b64 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80099ce:	e021      	b.n	8009a14 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	db17      	blt.n	8009a0a <USBD_GetConfig+0x56>
 80099da:	2b02      	cmp	r3, #2
 80099dc:	dd02      	ble.n	80099e4 <USBD_GetConfig+0x30>
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d00b      	beq.n	80099fa <USBD_GetConfig+0x46>
 80099e2:	e012      	b.n	8009a0a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	3308      	adds	r3, #8
 80099ee:	2201      	movs	r2, #1
 80099f0:	4619      	mov	r1, r3
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f920 	bl	8009c38 <USBD_CtlSendData>
        break;
 80099f8:	e00c      	b.n	8009a14 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	3304      	adds	r3, #4
 80099fe:	2201      	movs	r2, #1
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f918 	bl	8009c38 <USBD_CtlSendData>
        break;
 8009a08:	e004      	b.n	8009a14 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009a0a:	6839      	ldr	r1, [r7, #0]
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f8a9 	bl	8009b64 <USBD_CtlError>
        break;
 8009a12:	bf00      	nop
}
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d81e      	bhi.n	8009a70 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	88db      	ldrh	r3, [r3, #6]
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d004      	beq.n	8009a44 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f891 	bl	8009b64 <USBD_CtlError>
        break;
 8009a42:	e01a      	b.n	8009a7a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2201      	movs	r2, #1
 8009a48:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d005      	beq.n	8009a60 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	f043 0202 	orr.w	r2, r3, #2
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	330c      	adds	r3, #12
 8009a64:	2202      	movs	r2, #2
 8009a66:	4619      	mov	r1, r3
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 f8e5 	bl	8009c38 <USBD_CtlSendData>
      break;
 8009a6e:	e004      	b.n	8009a7a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f876 	bl	8009b64 <USBD_CtlError>
      break;
 8009a78:	bf00      	nop
  }
}
 8009a7a:	bf00      	nop
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b082      	sub	sp, #8
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	885b      	ldrh	r3, [r3, #2]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d106      	bne.n	8009aa2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f929 	bl	8009cf4 <USBD_CtlSendStatus>
  }
}
 8009aa2:	bf00      	nop
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b082      	sub	sp, #8
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aba:	3b01      	subs	r3, #1
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d80b      	bhi.n	8009ad8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	885b      	ldrh	r3, [r3, #2]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d10c      	bne.n	8009ae2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f90f 	bl	8009cf4 <USBD_CtlSendStatus>
      }
      break;
 8009ad6:	e004      	b.n	8009ae2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f842 	bl	8009b64 <USBD_CtlError>
      break;
 8009ae0:	e000      	b.n	8009ae4 <USBD_ClrFeature+0x3a>
      break;
 8009ae2:	bf00      	nop
  }
}
 8009ae4:	bf00      	nop
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	781a      	ldrb	r2, [r3, #0]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	785a      	ldrb	r2, [r3, #1]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	3302      	adds	r3, #2
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	3303      	adds	r3, #3
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	021b      	lsls	r3, r3, #8
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	4413      	add	r3, r2
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	3304      	adds	r3, #4
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	3305      	adds	r3, #5
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	021b      	lsls	r3, r3, #8
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	4413      	add	r3, r2
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	3306      	adds	r3, #6
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	3307      	adds	r3, #7
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	021b      	lsls	r3, r3, #8
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	4413      	add	r3, r2
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	80da      	strh	r2, [r3, #6]

}
 8009b5a:	bf00      	nop
 8009b5c:	370c      	adds	r7, #12
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bc80      	pop	{r7}
 8009b62:	4770      	bx	lr

08009b64 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009b6e:	2180      	movs	r1, #128	; 0x80
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fc2d 	bl	800a3d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009b76:	2100      	movs	r1, #0
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 fc29 	bl	800a3d0 <USBD_LL_StallEP>
}
 8009b7e:	bf00      	nop
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b086      	sub	sp, #24
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	60f8      	str	r0, [r7, #12]
 8009b8e:	60b9      	str	r1, [r7, #8]
 8009b90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b92:	2300      	movs	r3, #0
 8009b94:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d032      	beq.n	8009c02 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f000 f834 	bl	8009c0a <USBD_GetLen>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	005b      	lsls	r3, r3, #1
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009bb0:	7dfb      	ldrb	r3, [r7, #23]
 8009bb2:	1c5a      	adds	r2, r3, #1
 8009bb4:	75fa      	strb	r2, [r7, #23]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	4413      	add	r3, r2
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	7812      	ldrb	r2, [r2, #0]
 8009bc0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009bc2:	7dfb      	ldrb	r3, [r7, #23]
 8009bc4:	1c5a      	adds	r2, r3, #1
 8009bc6:	75fa      	strb	r2, [r7, #23]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	4413      	add	r3, r2
 8009bce:	2203      	movs	r2, #3
 8009bd0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009bd2:	e012      	b.n	8009bfa <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	1c5a      	adds	r2, r3, #1
 8009bd8:	60fa      	str	r2, [r7, #12]
 8009bda:	7dfa      	ldrb	r2, [r7, #23]
 8009bdc:	1c51      	adds	r1, r2, #1
 8009bde:	75f9      	strb	r1, [r7, #23]
 8009be0:	4611      	mov	r1, r2
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	440a      	add	r2, r1
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009bea:	7dfb      	ldrb	r3, [r7, #23]
 8009bec:	1c5a      	adds	r2, r3, #1
 8009bee:	75fa      	strb	r2, [r7, #23]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1e8      	bne.n	8009bd4 <USBD_GetString+0x4e>
    }
  }
}
 8009c02:	bf00      	nop
 8009c04:	3718      	adds	r7, #24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	b085      	sub	sp, #20
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c12:	2300      	movs	r3, #0
 8009c14:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009c16:	e005      	b.n	8009c24 <USBD_GetLen+0x1a>
  {
    len++;
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	3301      	adds	r3, #1
 8009c22:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1f5      	bne.n	8009c18 <USBD_GetLen+0xe>
  }

  return len;
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3714      	adds	r7, #20
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bc80      	pop	{r7}
 8009c36:	4770      	bx	lr

08009c38 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	4613      	mov	r3, r2
 8009c44:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2202      	movs	r2, #2
 8009c4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c4e:	88fa      	ldrh	r2, [r7, #6]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009c54:	88fa      	ldrh	r2, [r7, #6]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c5a:	88fb      	ldrh	r3, [r7, #6]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	2100      	movs	r1, #0
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f000 fc3e 	bl	800a4e2 <USBD_LL_Transmit>

  return USBD_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c7e:	88fb      	ldrh	r3, [r7, #6]
 8009c80:	68ba      	ldr	r2, [r7, #8]
 8009c82:	2100      	movs	r1, #0
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f000 fc2c 	bl	800a4e2 <USBD_LL_Transmit>

  return USBD_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2203      	movs	r2, #3
 8009ca6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009caa:	88fa      	ldrh	r2, [r7, #6]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009cb2:	88fa      	ldrh	r2, [r7, #6]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cba:	88fb      	ldrh	r3, [r7, #6]
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f000 fc31 	bl	800a528 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3710      	adds	r7, #16
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cde:	88fb      	ldrh	r3, [r7, #6]
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 fc1f 	bl	800a528 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2204      	movs	r2, #4
 8009d00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d04:	2300      	movs	r3, #0
 8009d06:	2200      	movs	r2, #0
 8009d08:	2100      	movs	r1, #0
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fbe9 	bl	800a4e2 <USBD_LL_Transmit>

  return USBD_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2205      	movs	r2, #5
 8009d26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	2100      	movs	r1, #0
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fbf9 	bl	800a528 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009d44:	2200      	movs	r2, #0
 8009d46:	4912      	ldr	r1, [pc, #72]	; (8009d90 <MX_USB_DEVICE_Init+0x50>)
 8009d48:	4812      	ldr	r0, [pc, #72]	; (8009d94 <MX_USB_DEVICE_Init+0x54>)
 8009d4a:	f7fe ff6d 	bl	8008c28 <USBD_Init>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d001      	beq.n	8009d58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d54:	f7f7 f938 	bl	8000fc8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d58:	490f      	ldr	r1, [pc, #60]	; (8009d98 <MX_USB_DEVICE_Init+0x58>)
 8009d5a:	480e      	ldr	r0, [pc, #56]	; (8009d94 <MX_USB_DEVICE_Init+0x54>)
 8009d5c:	f7fe ff8f 	bl	8008c7e <USBD_RegisterClass>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d66:	f7f7 f92f 	bl	8000fc8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d6a:	490c      	ldr	r1, [pc, #48]	; (8009d9c <MX_USB_DEVICE_Init+0x5c>)
 8009d6c:	4809      	ldr	r0, [pc, #36]	; (8009d94 <MX_USB_DEVICE_Init+0x54>)
 8009d6e:	f7fe feef 	bl	8008b50 <USBD_CDC_RegisterInterface>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d001      	beq.n	8009d7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009d78:	f7f7 f926 	bl	8000fc8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d7c:	4805      	ldr	r0, [pc, #20]	; (8009d94 <MX_USB_DEVICE_Init+0x54>)
 8009d7e:	f7fe ff97 	bl	8008cb0 <USBD_Start>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009d88:	f7f7 f91e 	bl	8000fc8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d8c:	bf00      	nop
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	20000144 	.word	0x20000144
 8009d94:	200005b0 	.word	0x200005b0
 8009d98:	20000030 	.word	0x20000030
 8009d9c:	20000134 	.word	0x20000134

08009da0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009da4:	2200      	movs	r2, #0
 8009da6:	4905      	ldr	r1, [pc, #20]	; (8009dbc <CDC_Init_FS+0x1c>)
 8009da8:	4805      	ldr	r0, [pc, #20]	; (8009dc0 <CDC_Init_FS+0x20>)
 8009daa:	f7fe fee7 	bl	8008b7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009dae:	4905      	ldr	r1, [pc, #20]	; (8009dc4 <CDC_Init_FS+0x24>)
 8009db0:	4803      	ldr	r0, [pc, #12]	; (8009dc0 <CDC_Init_FS+0x20>)
 8009db2:	f7fe fefc 	bl	8008bae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009db6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	20000c5c 	.word	0x20000c5c
 8009dc0:	200005b0 	.word	0x200005b0
 8009dc4:	20000874 	.word	0x20000874

08009dc8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009dcc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bc80      	pop	{r7}
 8009dd4:	4770      	bx	lr
	...

08009dd8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	4603      	mov	r3, r0
 8009de0:	6039      	str	r1, [r7, #0]
 8009de2:	71fb      	strb	r3, [r7, #7]
 8009de4:	4613      	mov	r3, r2
 8009de6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009de8:	79fb      	ldrb	r3, [r7, #7]
 8009dea:	2b23      	cmp	r3, #35	; 0x23
 8009dec:	d84a      	bhi.n	8009e84 <CDC_Control_FS+0xac>
 8009dee:	a201      	add	r2, pc, #4	; (adr r2, 8009df4 <CDC_Control_FS+0x1c>)
 8009df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df4:	08009e85 	.word	0x08009e85
 8009df8:	08009e85 	.word	0x08009e85
 8009dfc:	08009e85 	.word	0x08009e85
 8009e00:	08009e85 	.word	0x08009e85
 8009e04:	08009e85 	.word	0x08009e85
 8009e08:	08009e85 	.word	0x08009e85
 8009e0c:	08009e85 	.word	0x08009e85
 8009e10:	08009e85 	.word	0x08009e85
 8009e14:	08009e85 	.word	0x08009e85
 8009e18:	08009e85 	.word	0x08009e85
 8009e1c:	08009e85 	.word	0x08009e85
 8009e20:	08009e85 	.word	0x08009e85
 8009e24:	08009e85 	.word	0x08009e85
 8009e28:	08009e85 	.word	0x08009e85
 8009e2c:	08009e85 	.word	0x08009e85
 8009e30:	08009e85 	.word	0x08009e85
 8009e34:	08009e85 	.word	0x08009e85
 8009e38:	08009e85 	.word	0x08009e85
 8009e3c:	08009e85 	.word	0x08009e85
 8009e40:	08009e85 	.word	0x08009e85
 8009e44:	08009e85 	.word	0x08009e85
 8009e48:	08009e85 	.word	0x08009e85
 8009e4c:	08009e85 	.word	0x08009e85
 8009e50:	08009e85 	.word	0x08009e85
 8009e54:	08009e85 	.word	0x08009e85
 8009e58:	08009e85 	.word	0x08009e85
 8009e5c:	08009e85 	.word	0x08009e85
 8009e60:	08009e85 	.word	0x08009e85
 8009e64:	08009e85 	.word	0x08009e85
 8009e68:	08009e85 	.word	0x08009e85
 8009e6c:	08009e85 	.word	0x08009e85
 8009e70:	08009e85 	.word	0x08009e85
 8009e74:	08009e85 	.word	0x08009e85
 8009e78:	08009e85 	.word	0x08009e85
 8009e7c:	08009e85 	.word	0x08009e85
 8009e80:	08009e85 	.word	0x08009e85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009e84:	bf00      	nop
  }

  return (USBD_OK);
 8009e86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bc80      	pop	{r7}
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop

08009e94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009e9e:	6879      	ldr	r1, [r7, #4]
 8009ea0:	4805      	ldr	r0, [pc, #20]	; (8009eb8 <CDC_Receive_FS+0x24>)
 8009ea2:	f7fe fe84 	bl	8008bae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009ea6:	4804      	ldr	r0, [pc, #16]	; (8009eb8 <CDC_Receive_FS+0x24>)
 8009ea8:	f7fe fe94 	bl	8008bd4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009eac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	200005b0 	.word	0x200005b0

08009ebc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	6039      	str	r1, [r7, #0]
 8009ec6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	2212      	movs	r2, #18
 8009ecc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009ece:	4b03      	ldr	r3, [pc, #12]	; (8009edc <USBD_FS_DeviceDescriptor+0x20>)
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bc80      	pop	{r7}
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	20000160 	.word	0x20000160

08009ee0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	6039      	str	r1, [r7, #0]
 8009eea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	2204      	movs	r2, #4
 8009ef0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009ef2:	4b03      	ldr	r3, [pc, #12]	; (8009f00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bc80      	pop	{r7}
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	20000174 	.word	0x20000174

08009f04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	6039      	str	r1, [r7, #0]
 8009f0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f10:	79fb      	ldrb	r3, [r7, #7]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d105      	bne.n	8009f22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	4907      	ldr	r1, [pc, #28]	; (8009f38 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f1a:	4808      	ldr	r0, [pc, #32]	; (8009f3c <USBD_FS_ProductStrDescriptor+0x38>)
 8009f1c:	f7ff fe33 	bl	8009b86 <USBD_GetString>
 8009f20:	e004      	b.n	8009f2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f22:	683a      	ldr	r2, [r7, #0]
 8009f24:	4904      	ldr	r1, [pc, #16]	; (8009f38 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f26:	4805      	ldr	r0, [pc, #20]	; (8009f3c <USBD_FS_ProductStrDescriptor+0x38>)
 8009f28:	f7ff fe2d 	bl	8009b86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f2c:	4b02      	ldr	r3, [pc, #8]	; (8009f38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	20001044 	.word	0x20001044
 8009f3c:	0800a6b8 	.word	0x0800a6b8

08009f40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	4603      	mov	r3, r0
 8009f48:	6039      	str	r1, [r7, #0]
 8009f4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f4c:	683a      	ldr	r2, [r7, #0]
 8009f4e:	4904      	ldr	r1, [pc, #16]	; (8009f60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009f50:	4804      	ldr	r0, [pc, #16]	; (8009f64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009f52:	f7ff fe18 	bl	8009b86 <USBD_GetString>
  return USBD_StrDesc;
 8009f56:	4b02      	ldr	r3, [pc, #8]	; (8009f60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	20001044 	.word	0x20001044
 8009f64:	0800a6d0 	.word	0x0800a6d0

08009f68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	6039      	str	r1, [r7, #0]
 8009f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	221a      	movs	r2, #26
 8009f78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009f7a:	f000 f843 	bl	800a004 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009f7e:	4b02      	ldr	r3, [pc, #8]	; (8009f88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	20000178 	.word	0x20000178

08009f8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	4603      	mov	r3, r0
 8009f94:	6039      	str	r1, [r7, #0]
 8009f96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009f98:	79fb      	ldrb	r3, [r7, #7]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d105      	bne.n	8009faa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f9e:	683a      	ldr	r2, [r7, #0]
 8009fa0:	4907      	ldr	r1, [pc, #28]	; (8009fc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009fa2:	4808      	ldr	r0, [pc, #32]	; (8009fc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009fa4:	f7ff fdef 	bl	8009b86 <USBD_GetString>
 8009fa8:	e004      	b.n	8009fb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	4904      	ldr	r1, [pc, #16]	; (8009fc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009fae:	4805      	ldr	r0, [pc, #20]	; (8009fc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009fb0:	f7ff fde9 	bl	8009b86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fb4:	4b02      	ldr	r3, [pc, #8]	; (8009fc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20001044 	.word	0x20001044
 8009fc4:	0800a6e4 	.word	0x0800a6e4

08009fc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	4603      	mov	r3, r0
 8009fd0:	6039      	str	r1, [r7, #0]
 8009fd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fd4:	79fb      	ldrb	r3, [r7, #7]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d105      	bne.n	8009fe6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009fda:	683a      	ldr	r2, [r7, #0]
 8009fdc:	4907      	ldr	r1, [pc, #28]	; (8009ffc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009fde:	4808      	ldr	r0, [pc, #32]	; (800a000 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009fe0:	f7ff fdd1 	bl	8009b86 <USBD_GetString>
 8009fe4:	e004      	b.n	8009ff0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009fe6:	683a      	ldr	r2, [r7, #0]
 8009fe8:	4904      	ldr	r1, [pc, #16]	; (8009ffc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009fea:	4805      	ldr	r0, [pc, #20]	; (800a000 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009fec:	f7ff fdcb 	bl	8009b86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ff0:	4b02      	ldr	r3, [pc, #8]	; (8009ffc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	20001044 	.word	0x20001044
 800a000:	0800a6f0 	.word	0x0800a6f0

0800a004 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a00a:	4b0f      	ldr	r3, [pc, #60]	; (800a048 <Get_SerialNum+0x44>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a010:	4b0e      	ldr	r3, [pc, #56]	; (800a04c <Get_SerialNum+0x48>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a016:	4b0e      	ldr	r3, [pc, #56]	; (800a050 <Get_SerialNum+0x4c>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4413      	add	r3, r2
 800a022:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d009      	beq.n	800a03e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a02a:	2208      	movs	r2, #8
 800a02c:	4909      	ldr	r1, [pc, #36]	; (800a054 <Get_SerialNum+0x50>)
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f000 f814 	bl	800a05c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a034:	2204      	movs	r2, #4
 800a036:	4908      	ldr	r1, [pc, #32]	; (800a058 <Get_SerialNum+0x54>)
 800a038:	68b8      	ldr	r0, [r7, #8]
 800a03a:	f000 f80f 	bl	800a05c <IntToUnicode>
  }
}
 800a03e:	bf00      	nop
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	1ffff7e8 	.word	0x1ffff7e8
 800a04c:	1ffff7ec 	.word	0x1ffff7ec
 800a050:	1ffff7f0 	.word	0x1ffff7f0
 800a054:	2000017a 	.word	0x2000017a
 800a058:	2000018a 	.word	0x2000018a

0800a05c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b087      	sub	sp, #28
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	4613      	mov	r3, r2
 800a068:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a06e:	2300      	movs	r3, #0
 800a070:	75fb      	strb	r3, [r7, #23]
 800a072:	e027      	b.n	800a0c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	0f1b      	lsrs	r3, r3, #28
 800a078:	2b09      	cmp	r3, #9
 800a07a:	d80b      	bhi.n	800a094 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	0f1b      	lsrs	r3, r3, #28
 800a080:	b2da      	uxtb	r2, r3
 800a082:	7dfb      	ldrb	r3, [r7, #23]
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	4619      	mov	r1, r3
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	440b      	add	r3, r1
 800a08c:	3230      	adds	r2, #48	; 0x30
 800a08e:	b2d2      	uxtb	r2, r2
 800a090:	701a      	strb	r2, [r3, #0]
 800a092:	e00a      	b.n	800a0aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	0f1b      	lsrs	r3, r3, #28
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	7dfb      	ldrb	r3, [r7, #23]
 800a09c:	005b      	lsls	r3, r3, #1
 800a09e:	4619      	mov	r1, r3
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	440b      	add	r3, r1
 800a0a4:	3237      	adds	r2, #55	; 0x37
 800a0a6:	b2d2      	uxtb	r2, r2
 800a0a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	011b      	lsls	r3, r3, #4
 800a0ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a0b0:	7dfb      	ldrb	r3, [r7, #23]
 800a0b2:	005b      	lsls	r3, r3, #1
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a0be:	7dfb      	ldrb	r3, [r7, #23]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	75fb      	strb	r3, [r7, #23]
 800a0c4:	7dfa      	ldrb	r2, [r7, #23]
 800a0c6:	79fb      	ldrb	r3, [r7, #7]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d3d3      	bcc.n	800a074 <IntToUnicode+0x18>
  }
}
 800a0cc:	bf00      	nop
 800a0ce:	371c      	adds	r7, #28
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bc80      	pop	{r7}
 800a0d4:	4770      	bx	lr
	...

0800a0d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a0d      	ldr	r2, [pc, #52]	; (800a11c <HAL_PCD_MspInit+0x44>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d113      	bne.n	800a112 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a0ea:	4b0d      	ldr	r3, [pc, #52]	; (800a120 <HAL_PCD_MspInit+0x48>)
 800a0ec:	69db      	ldr	r3, [r3, #28]
 800a0ee:	4a0c      	ldr	r2, [pc, #48]	; (800a120 <HAL_PCD_MspInit+0x48>)
 800a0f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a0f4:	61d3      	str	r3, [r2, #28]
 800a0f6:	4b0a      	ldr	r3, [pc, #40]	; (800a120 <HAL_PCD_MspInit+0x48>)
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0fe:	60fb      	str	r3, [r7, #12]
 800a100:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a102:	2200      	movs	r2, #0
 800a104:	2100      	movs	r1, #0
 800a106:	2014      	movs	r0, #20
 800a108:	f7f7 fdf7 	bl	8001cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a10c:	2014      	movs	r0, #20
 800a10e:	f7f7 fe10 	bl	8001d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a112:	bf00      	nop
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	40005c00 	.word	0x40005c00
 800a120:	40021000 	.word	0x40021000

0800a124 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a138:	4619      	mov	r1, r3
 800a13a:	4610      	mov	r0, r2
 800a13c:	f7fe fe00 	bl	8008d40 <USBD_LL_SetupStage>
}
 800a140:	bf00      	nop
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a15a:	78fa      	ldrb	r2, [r7, #3]
 800a15c:	6879      	ldr	r1, [r7, #4]
 800a15e:	4613      	mov	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	4413      	add	r3, r2
 800a164:	00db      	lsls	r3, r3, #3
 800a166:	440b      	add	r3, r1
 800a168:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	78fb      	ldrb	r3, [r7, #3]
 800a170:	4619      	mov	r1, r3
 800a172:	f7fe fe30 	bl	8008dd6 <USBD_LL_DataOutStage>
}
 800a176:	bf00      	nop
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b082      	sub	sp, #8
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	460b      	mov	r3, r1
 800a188:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a190:	78fa      	ldrb	r2, [r7, #3]
 800a192:	6879      	ldr	r1, [r7, #4]
 800a194:	4613      	mov	r3, r2
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4413      	add	r3, r2
 800a19a:	00db      	lsls	r3, r3, #3
 800a19c:	440b      	add	r3, r1
 800a19e:	333c      	adds	r3, #60	; 0x3c
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	78fb      	ldrb	r3, [r7, #3]
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	f7fe fe87 	bl	8008eb8 <USBD_LL_DataInStage>
}
 800a1aa:	bf00      	nop
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b082      	sub	sp, #8
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7fe ff97 	bl	80090f4 <USBD_LL_SOF>
}
 800a1c6:	bf00      	nop
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b084      	sub	sp, #16
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d001      	beq.n	800a1e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a1e2:	f7f6 fef1 	bl	8000fc8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a1ec:	7bfa      	ldrb	r2, [r7, #15]
 800a1ee:	4611      	mov	r1, r2
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7fe ff47 	bl	8009084 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7fe ff00 	bl	8009002 <USBD_LL_Reset>
}
 800a202:	bf00      	nop
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
	...

0800a20c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fe ff41 	bl	80090a2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	699b      	ldr	r3, [r3, #24]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d005      	beq.n	800a234 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a228:	4b04      	ldr	r3, [pc, #16]	; (800a23c <HAL_PCD_SuspendCallback+0x30>)
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	4a03      	ldr	r2, [pc, #12]	; (800a23c <HAL_PCD_SuspendCallback+0x30>)
 800a22e:	f043 0306 	orr.w	r3, r3, #6
 800a232:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a234:	bf00      	nop
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	e000ed00 	.word	0xe000ed00

0800a240 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fe ff3b 	bl	80090ca <USBD_LL_Resume>
}
 800a254:	bf00      	nop
 800a256:	3708      	adds	r7, #8
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a264:	4a28      	ldr	r2, [pc, #160]	; (800a308 <USBD_LL_Init+0xac>)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a26      	ldr	r2, [pc, #152]	; (800a308 <USBD_LL_Init+0xac>)
 800a270:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a274:	4b24      	ldr	r3, [pc, #144]	; (800a308 <USBD_LL_Init+0xac>)
 800a276:	4a25      	ldr	r2, [pc, #148]	; (800a30c <USBD_LL_Init+0xb0>)
 800a278:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a27a:	4b23      	ldr	r3, [pc, #140]	; (800a308 <USBD_LL_Init+0xac>)
 800a27c:	2208      	movs	r2, #8
 800a27e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a280:	4b21      	ldr	r3, [pc, #132]	; (800a308 <USBD_LL_Init+0xac>)
 800a282:	2202      	movs	r2, #2
 800a284:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a286:	4b20      	ldr	r3, [pc, #128]	; (800a308 <USBD_LL_Init+0xac>)
 800a288:	2200      	movs	r2, #0
 800a28a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a28c:	4b1e      	ldr	r3, [pc, #120]	; (800a308 <USBD_LL_Init+0xac>)
 800a28e:	2200      	movs	r2, #0
 800a290:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a292:	4b1d      	ldr	r3, [pc, #116]	; (800a308 <USBD_LL_Init+0xac>)
 800a294:	2200      	movs	r2, #0
 800a296:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a298:	481b      	ldr	r0, [pc, #108]	; (800a308 <USBD_LL_Init+0xac>)
 800a29a:	f7f9 fd89 	bl	8003db0 <HAL_PCD_Init>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a2a4:	f7f6 fe90 	bl	8000fc8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a2ae:	2318      	movs	r3, #24
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	f7fb f8bd 	bl	8005432 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a2be:	2358      	movs	r3, #88	; 0x58
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	2180      	movs	r1, #128	; 0x80
 800a2c4:	f7fb f8b5 	bl	8005432 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a2ce:	23c0      	movs	r3, #192	; 0xc0
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	2181      	movs	r1, #129	; 0x81
 800a2d4:	f7fb f8ad 	bl	8005432 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a2de:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	2101      	movs	r1, #1
 800a2e6:	f7fb f8a4 	bl	8005432 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a2f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	2182      	movs	r1, #130	; 0x82
 800a2f8:	f7fb f89b 	bl	8005432 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	20001244 	.word	0x20001244
 800a30c:	40005c00 	.word	0x40005c00

0800a310 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a318:	2300      	movs	r3, #0
 800a31a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a326:	4618      	mov	r0, r3
 800a328:	f7f9 fe4d 	bl	8003fc6 <HAL_PCD_Start>
 800a32c:	4603      	mov	r3, r0
 800a32e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a330:	7bfb      	ldrb	r3, [r7, #15]
 800a332:	4618      	mov	r0, r3
 800a334:	f000 f94e 	bl	800a5d4 <USBD_Get_USB_Status>
 800a338:	4603      	mov	r3, r0
 800a33a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a33c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b084      	sub	sp, #16
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	4608      	mov	r0, r1
 800a350:	4611      	mov	r1, r2
 800a352:	461a      	mov	r2, r3
 800a354:	4603      	mov	r3, r0
 800a356:	70fb      	strb	r3, [r7, #3]
 800a358:	460b      	mov	r3, r1
 800a35a:	70bb      	strb	r3, [r7, #2]
 800a35c:	4613      	mov	r3, r2
 800a35e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a36e:	78bb      	ldrb	r3, [r7, #2]
 800a370:	883a      	ldrh	r2, [r7, #0]
 800a372:	78f9      	ldrb	r1, [r7, #3]
 800a374:	f7f9 ffc7 	bl	8004306 <HAL_PCD_EP_Open>
 800a378:	4603      	mov	r3, r0
 800a37a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 f928 	bl	800a5d4 <USBD_Get_USB_Status>
 800a384:	4603      	mov	r3, r0
 800a386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a388:	7bbb      	ldrb	r3, [r7, #14]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b084      	sub	sp, #16
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
 800a39a:	460b      	mov	r3, r1
 800a39c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3ac:	78fa      	ldrb	r2, [r7, #3]
 800a3ae:	4611      	mov	r1, r2
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7fa f80e 	bl	80043d2 <HAL_PCD_EP_Close>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ba:	7bfb      	ldrb	r3, [r7, #15]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 f909 	bl	800a5d4 <USBD_Get_USB_Status>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	460b      	mov	r3, r1
 800a3da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3ea:	78fa      	ldrb	r2, [r7, #3]
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7fa f8ce 	bl	8004590 <HAL_PCD_EP_SetStall>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f000 f8ea 	bl	800a5d4 <USBD_Get_USB_Status>
 800a400:	4603      	mov	r3, r0
 800a402:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a404:	7bbb      	ldrb	r3, [r7, #14]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b084      	sub	sp, #16
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
 800a416:	460b      	mov	r3, r1
 800a418:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a41e:	2300      	movs	r3, #0
 800a420:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a428:	78fa      	ldrb	r2, [r7, #3]
 800a42a:	4611      	mov	r1, r2
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7fa f90f 	bl	8004650 <HAL_PCD_EP_ClrStall>
 800a432:	4603      	mov	r3, r0
 800a434:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a436:	7bfb      	ldrb	r3, [r7, #15]
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 f8cb 	bl	800a5d4 <USBD_Get_USB_Status>
 800a43e:	4603      	mov	r3, r0
 800a440:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a442:	7bbb      	ldrb	r3, [r7, #14]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b085      	sub	sp, #20
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	460b      	mov	r3, r1
 800a456:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a45e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a460:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a464:	2b00      	cmp	r3, #0
 800a466:	da0c      	bge.n	800a482 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a468:	78fb      	ldrb	r3, [r7, #3]
 800a46a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a46e:	68f9      	ldr	r1, [r7, #12]
 800a470:	1c5a      	adds	r2, r3, #1
 800a472:	4613      	mov	r3, r2
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	4413      	add	r3, r2
 800a478:	00db      	lsls	r3, r3, #3
 800a47a:	440b      	add	r3, r1
 800a47c:	3302      	adds	r3, #2
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	e00b      	b.n	800a49a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a482:	78fb      	ldrb	r3, [r7, #3]
 800a484:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a488:	68f9      	ldr	r1, [r7, #12]
 800a48a:	4613      	mov	r3, r2
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	4413      	add	r3, r2
 800a490:	00db      	lsls	r3, r3, #3
 800a492:	440b      	add	r3, r1
 800a494:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a498:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3714      	adds	r7, #20
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bc80      	pop	{r7}
 800a4a2:	4770      	bx	lr

0800a4a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4be:	78fa      	ldrb	r2, [r7, #3]
 800a4c0:	4611      	mov	r1, r2
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7f9 fefa 	bl	80042bc <HAL_PCD_SetAddress>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f000 f880 	bl	800a5d4 <USBD_Get_USB_Status>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b086      	sub	sp, #24
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	60f8      	str	r0, [r7, #12]
 800a4ea:	607a      	str	r2, [r7, #4]
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	72fb      	strb	r3, [r7, #11]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a504:	893b      	ldrh	r3, [r7, #8]
 800a506:	7af9      	ldrb	r1, [r7, #11]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	f7f9 fffe 	bl	800450a <HAL_PCD_EP_Transmit>
 800a50e:	4603      	mov	r3, r0
 800a510:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a512:	7dfb      	ldrb	r3, [r7, #23]
 800a514:	4618      	mov	r0, r3
 800a516:	f000 f85d 	bl	800a5d4 <USBD_Get_USB_Status>
 800a51a:	4603      	mov	r3, r0
 800a51c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a51e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3718      	adds	r7, #24
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b086      	sub	sp, #24
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	607a      	str	r2, [r7, #4]
 800a532:	461a      	mov	r2, r3
 800a534:	460b      	mov	r3, r1
 800a536:	72fb      	strb	r3, [r7, #11]
 800a538:	4613      	mov	r3, r2
 800a53a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a53c:	2300      	movs	r3, #0
 800a53e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a540:	2300      	movs	r3, #0
 800a542:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a54a:	893b      	ldrh	r3, [r7, #8]
 800a54c:	7af9      	ldrb	r1, [r7, #11]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	f7f9 ff87 	bl	8004462 <HAL_PCD_EP_Receive>
 800a554:	4603      	mov	r3, r0
 800a556:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a558:	7dfb      	ldrb	r3, [r7, #23]
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 f83a 	bl	800a5d4 <USBD_Get_USB_Status>
 800a560:	4603      	mov	r3, r0
 800a562:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a564:	7dbb      	ldrb	r3, [r7, #22]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3718      	adds	r7, #24
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b082      	sub	sp, #8
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
 800a576:	460b      	mov	r3, r1
 800a578:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a580:	78fa      	ldrb	r2, [r7, #3]
 800a582:	4611      	mov	r1, r2
 800a584:	4618      	mov	r0, r3
 800a586:	f7f9 ffa9 	bl	80044dc <HAL_PCD_EP_GetRxCount>
 800a58a:	4603      	mov	r3, r0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a59c:	4b02      	ldr	r3, [pc, #8]	; (800a5a8 <USBD_static_malloc+0x14>)
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bc80      	pop	{r7}
 800a5a6:	4770      	bx	lr
 800a5a8:	200001d4 	.word	0x200001d4

0800a5ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]

}
 800a5b4:	bf00      	nop
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bc80      	pop	{r7}
 800a5bc:	4770      	bx	lr

0800a5be <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b083      	sub	sp, #12
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a5ca:	bf00      	nop
 800a5cc:	370c      	adds	r7, #12
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bc80      	pop	{r7}
 800a5d2:	4770      	bx	lr

0800a5d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	4603      	mov	r3, r0
 800a5dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a5e2:	79fb      	ldrb	r3, [r7, #7]
 800a5e4:	2b03      	cmp	r3, #3
 800a5e6:	d817      	bhi.n	800a618 <USBD_Get_USB_Status+0x44>
 800a5e8:	a201      	add	r2, pc, #4	; (adr r2, 800a5f0 <USBD_Get_USB_Status+0x1c>)
 800a5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ee:	bf00      	nop
 800a5f0:	0800a601 	.word	0x0800a601
 800a5f4:	0800a607 	.word	0x0800a607
 800a5f8:	0800a60d 	.word	0x0800a60d
 800a5fc:	0800a613 	.word	0x0800a613
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a600:	2300      	movs	r3, #0
 800a602:	73fb      	strb	r3, [r7, #15]
    break;
 800a604:	e00b      	b.n	800a61e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a606:	2302      	movs	r3, #2
 800a608:	73fb      	strb	r3, [r7, #15]
    break;
 800a60a:	e008      	b.n	800a61e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a60c:	2301      	movs	r3, #1
 800a60e:	73fb      	strb	r3, [r7, #15]
    break;
 800a610:	e005      	b.n	800a61e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a612:	2302      	movs	r3, #2
 800a614:	73fb      	strb	r3, [r7, #15]
    break;
 800a616:	e002      	b.n	800a61e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a618:	2302      	movs	r3, #2
 800a61a:	73fb      	strb	r3, [r7, #15]
    break;
 800a61c:	bf00      	nop
  }
  return usb_status;
 800a61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3714      	adds	r7, #20
 800a624:	46bd      	mov	sp, r7
 800a626:	bc80      	pop	{r7}
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop

0800a62c <__libc_init_array>:
 800a62c:	b570      	push	{r4, r5, r6, lr}
 800a62e:	2500      	movs	r5, #0
 800a630:	4e0c      	ldr	r6, [pc, #48]	; (800a664 <__libc_init_array+0x38>)
 800a632:	4c0d      	ldr	r4, [pc, #52]	; (800a668 <__libc_init_array+0x3c>)
 800a634:	1ba4      	subs	r4, r4, r6
 800a636:	10a4      	asrs	r4, r4, #2
 800a638:	42a5      	cmp	r5, r4
 800a63a:	d109      	bne.n	800a650 <__libc_init_array+0x24>
 800a63c:	f000 f822 	bl	800a684 <_init>
 800a640:	2500      	movs	r5, #0
 800a642:	4e0a      	ldr	r6, [pc, #40]	; (800a66c <__libc_init_array+0x40>)
 800a644:	4c0a      	ldr	r4, [pc, #40]	; (800a670 <__libc_init_array+0x44>)
 800a646:	1ba4      	subs	r4, r4, r6
 800a648:	10a4      	asrs	r4, r4, #2
 800a64a:	42a5      	cmp	r5, r4
 800a64c:	d105      	bne.n	800a65a <__libc_init_array+0x2e>
 800a64e:	bd70      	pop	{r4, r5, r6, pc}
 800a650:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a654:	4798      	blx	r3
 800a656:	3501      	adds	r5, #1
 800a658:	e7ee      	b.n	800a638 <__libc_init_array+0xc>
 800a65a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a65e:	4798      	blx	r3
 800a660:	3501      	adds	r5, #1
 800a662:	e7f2      	b.n	800a64a <__libc_init_array+0x1e>
 800a664:	0800a718 	.word	0x0800a718
 800a668:	0800a718 	.word	0x0800a718
 800a66c:	0800a718 	.word	0x0800a718
 800a670:	0800a71c 	.word	0x0800a71c

0800a674 <memset>:
 800a674:	4603      	mov	r3, r0
 800a676:	4402      	add	r2, r0
 800a678:	4293      	cmp	r3, r2
 800a67a:	d100      	bne.n	800a67e <memset+0xa>
 800a67c:	4770      	bx	lr
 800a67e:	f803 1b01 	strb.w	r1, [r3], #1
 800a682:	e7f9      	b.n	800a678 <memset+0x4>

0800a684 <_init>:
 800a684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a686:	bf00      	nop
 800a688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a68a:	bc08      	pop	{r3}
 800a68c:	469e      	mov	lr, r3
 800a68e:	4770      	bx	lr

0800a690 <_fini>:
 800a690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a692:	bf00      	nop
 800a694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a696:	bc08      	pop	{r3}
 800a698:	469e      	mov	lr, r3
 800a69a:	4770      	bx	lr
